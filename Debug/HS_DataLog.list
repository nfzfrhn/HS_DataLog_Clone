
HS_DataLog.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001b620  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001108  0801b7e0  0801b7e0  0002b7e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801c8e8  0801c8e8  00030540  2**0
                  CONTENTS
  4 .ARM          00000000  0801c8e8  0801c8e8  00030540  2**0
                  CONTENTS
  5 .preinit_array 00000000  0801c8e8  0801c8e8  00030540  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0801c8e8  0801c8e8  0002c8e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  0801c8f0  0801c8f0  0002c8f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000540  20000000  0801c8f8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001debc  20000540  0801ce38  00030540  2**3
                  ALLOC
 10 ._user_heap_stack 00066004  2001e3fc  0801ce38  0003e3fc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030540  2**0
                  CONTENTS, READONLY
 12 .debug_info   000ae07f  00000000  00000000  00030570  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000e63f  00000000  00000000  000de5ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    000684ef  00000000  00000000  000ecc2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000032e8  00000000  00000000  00155120  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 0000e208  00000000  00000000  00158408  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000489af  00000000  00000000  00166610  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0007ccd8  00000000  00000000  001aefbf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0016e9c4  00000000  00000000  0022bc97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0039a65b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000c3d0  00000000  00000000  0039a6b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000540 	.word	0x20000540
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0801b7c4 	.word	0x0801b7c4

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000544 	.word	0x20000544
 80001fc:	0801b7c4 	.word	0x0801b7c4

08000200 <strcmp>:
 8000200:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000204:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000208:	2a01      	cmp	r2, #1
 800020a:	bf28      	it	cs
 800020c:	429a      	cmpcs	r2, r3
 800020e:	d0f7      	beq.n	8000200 <strcmp>
 8000210:	1ad0      	subs	r0, r2, r3
 8000212:	4770      	bx	lr

08000214 <strlen>:
 8000214:	4603      	mov	r3, r0
 8000216:	f813 2b01 	ldrb.w	r2, [r3], #1
 800021a:	2a00      	cmp	r2, #0
 800021c:	d1fb      	bne.n	8000216 <strlen+0x2>
 800021e:	1a18      	subs	r0, r3, r0
 8000220:	3801      	subs	r0, #1
 8000222:	4770      	bx	lr
	...

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff23 	bl	8000b2c <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	; (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc99 	bl	8000648 <__aeabi_dmul>
 8000d16:	f7ff ff6f 	bl	8000bf8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc1a 	bl	8000554 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	; (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc90 	bl	8000648 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff fad2 	bl	80002d8 <__aeabi_dsub>
 8000d34:	f7ff ff60 	bl	8000bf8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <create_JSON_SubSensorDescriptor>:
  json_object_dotset_number(JSON_SensorStatus, "comChannelNumber", sensor_status->comChannelNumber);
}


static void create_JSON_SubSensorDescriptor(COM_SubSensorDescriptor_t *sub_sensor_descriptor, JSON_Value *tempJSON)
{
 8000d44:	b570      	push	{r4, r5, r6, lr}
 8000d46:	460d      	mov	r5, r1
 8000d48:	4604      	mov	r4, r0
  uint32_t ii = 0;
  
  JSON_Value *tempJSONarray = json_value_init_object();
 8000d4a:	f015 fe73 	bl	8016a34 <json_value_init_object>
 8000d4e:	4606      	mov	r6, r0
  JSON_Array *JSON_SensorArray = json_value_get_array(tempJSONarray);
 8000d50:	f015 fb10 	bl	8016374 <json_value_get_array>
  JSON_Object *JSON_SubSensorDescriptor= json_value_get_object(tempJSON);
 8000d54:	4628      	mov	r0, r5
 8000d56:	f015 fb05 	bl	8016364 <json_value_get_object>
 8000d5a:	4605      	mov	r5, r0
  
  json_object_dotset_number(JSON_SubSensorDescriptor, "id", sub_sensor_descriptor->id);
 8000d5c:	7820      	ldrb	r0, [r4, #0]
 8000d5e:	f7ff fbf9 	bl	8000554 <__aeabi_ui2d>
 8000d62:	ec41 0b10 	vmov	d0, r0, r1
 8000d66:	493a      	ldr	r1, [pc, #232]	; (8000e50 <create_JSON_SubSensorDescriptor+0x10c>)
 8000d68:	4628      	mov	r0, r5
 8000d6a:	f016 f9b3 	bl	80170d4 <json_object_dotset_number>
  
  switch (sub_sensor_descriptor->sensorType)
 8000d6e:	7863      	ldrb	r3, [r4, #1]
 8000d70:	3b01      	subs	r3, #1
 8000d72:	2b06      	cmp	r3, #6
 8000d74:	d865      	bhi.n	8000e42 <create_JSON_SubSensorDescriptor+0xfe>
 8000d76:	e8df f003 	tbb	[pc, r3]
 8000d7a:	4640      	.short	0x4640
 8000d7c:	5e58524c 	.word	0x5e58524c
 8000d80:	04          	.byte	0x04
 8000d81:	00          	.byte	0x00
    break;
  case COM_TYPE_HUM:
    json_object_dotset_string(JSON_SubSensorDescriptor, "sensorType", "HUM");
    break;
  case COM_TYPE_MIC:
    json_object_dotset_string(JSON_SubSensorDescriptor, "sensorType", "MIC");
 8000d82:	4a34      	ldr	r2, [pc, #208]	; (8000e54 <create_JSON_SubSensorDescriptor+0x110>)
 8000d84:	4934      	ldr	r1, [pc, #208]	; (8000e58 <create_JSON_SubSensorDescriptor+0x114>)
 8000d86:	4628      	mov	r0, r5
 8000d88:	f016 f988 	bl	801709c <json_object_dotset_string>
  default:
    json_object_dotset_string(JSON_SubSensorDescriptor, "sensorType", "NA");
    break;      
  }
  
  json_object_dotset_number(JSON_SubSensorDescriptor, "dataPerSample", sub_sensor_descriptor->dataPerSample);
 8000d8c:	78a0      	ldrb	r0, [r4, #2]
 8000d8e:	f7ff fbe1 	bl	8000554 <__aeabi_ui2d>
 8000d92:	ec41 0b10 	vmov	d0, r0, r1
 8000d96:	4931      	ldr	r1, [pc, #196]	; (8000e5c <create_JSON_SubSensorDescriptor+0x118>)
 8000d98:	4628      	mov	r0, r5
 8000d9a:	f016 f99b 	bl	80170d4 <json_object_dotset_number>
  json_object_dotset_string(JSON_SubSensorDescriptor, "unit", sub_sensor_descriptor->unit);  
 8000d9e:	4930      	ldr	r1, [pc, #192]	; (8000e60 <create_JSON_SubSensorDescriptor+0x11c>)
 8000da0:	1ce2      	adds	r2, r4, #3
 8000da2:	4628      	mov	r0, r5
 8000da4:	f016 f97a 	bl	801709c <json_object_dotset_string>
  json_object_dotset_value(JSON_SubSensorDescriptor, "fs.values", json_value_init_array());
 8000da8:	f015 fe64 	bl	8016a74 <json_value_init_array>
 8000dac:	492d      	ldr	r1, [pc, #180]	; (8000e64 <create_JSON_SubSensorDescriptor+0x120>)
 8000dae:	4602      	mov	r2, r0
 8000db0:	4628      	mov	r0, r5
 8000db2:	f016 f8ad 	bl	8016f10 <json_object_dotset_value>
  JSON_SensorArray = json_object_dotget_array(JSON_SubSensorDescriptor, "fs.values");
 8000db6:	4628      	mov	r0, r5
 8000db8:	492a      	ldr	r1, [pc, #168]	; (8000e64 <create_JSON_SubSensorDescriptor+0x120>)
 8000dba:	f015 faa1 	bl	8016300 <json_object_dotget_array>
  
  while (sub_sensor_descriptor->FS[ii] > 0)
 8000dbe:	edd4 7a05 	vldr	s15, [r4, #20]
 8000dc2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000dc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  JSON_SensorArray = json_object_dotget_array(JSON_SubSensorDescriptor, "fs.values");
 8000dca:	4605      	mov	r5, r0
  while (sub_sensor_descriptor->FS[ii] > 0)
 8000dcc:	dd10      	ble.n	8000df0 <create_JSON_SubSensorDescriptor+0xac>
 8000dce:	3418      	adds	r4, #24
  {
    json_array_append_number(JSON_SensorArray, sub_sensor_descriptor->FS[ii]);
 8000dd0:	ee17 0a90 	vmov	r0, s15
 8000dd4:	f7ff fbe0 	bl	8000598 <__aeabi_f2d>
 8000dd8:	ec41 0b10 	vmov	d0, r0, r1
 8000ddc:	4628      	mov	r0, r5
 8000dde:	f015 ffcb 	bl	8016d78 <json_array_append_number>
  while (sub_sensor_descriptor->FS[ii] > 0)
 8000de2:	ecf4 7a01 	vldmia	r4!, {s15}
 8000de6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000dea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000dee:	dcef      	bgt.n	8000dd0 <create_JSON_SubSensorDescriptor+0x8c>
    ii++;
  }  
  json_value_free(tempJSONarray);
 8000df0:	4630      	mov	r0, r6
}
 8000df2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  json_value_free(tempJSONarray);
 8000df6:	f015 bac5 	b.w	8016384 <json_value_free>
    json_object_dotset_string(JSON_SubSensorDescriptor, "sensorType", "ACC");
 8000dfa:	4a1b      	ldr	r2, [pc, #108]	; (8000e68 <create_JSON_SubSensorDescriptor+0x124>)
 8000dfc:	4916      	ldr	r1, [pc, #88]	; (8000e58 <create_JSON_SubSensorDescriptor+0x114>)
 8000dfe:	4628      	mov	r0, r5
 8000e00:	f016 f94c 	bl	801709c <json_object_dotset_string>
    break;
 8000e04:	e7c2      	b.n	8000d8c <create_JSON_SubSensorDescriptor+0x48>
    json_object_dotset_string(JSON_SubSensorDescriptor, "sensorType", "MAG");
 8000e06:	4a19      	ldr	r2, [pc, #100]	; (8000e6c <create_JSON_SubSensorDescriptor+0x128>)
 8000e08:	4913      	ldr	r1, [pc, #76]	; (8000e58 <create_JSON_SubSensorDescriptor+0x114>)
 8000e0a:	4628      	mov	r0, r5
 8000e0c:	f016 f946 	bl	801709c <json_object_dotset_string>
    break;
 8000e10:	e7bc      	b.n	8000d8c <create_JSON_SubSensorDescriptor+0x48>
    json_object_dotset_string(JSON_SubSensorDescriptor, "sensorType", "GYRO");
 8000e12:	4a17      	ldr	r2, [pc, #92]	; (8000e70 <create_JSON_SubSensorDescriptor+0x12c>)
 8000e14:	4910      	ldr	r1, [pc, #64]	; (8000e58 <create_JSON_SubSensorDescriptor+0x114>)
 8000e16:	4628      	mov	r0, r5
 8000e18:	f016 f940 	bl	801709c <json_object_dotset_string>
    break;
 8000e1c:	e7b6      	b.n	8000d8c <create_JSON_SubSensorDescriptor+0x48>
    json_object_dotset_string(JSON_SubSensorDescriptor, "sensorType", "TEMP");
 8000e1e:	4a15      	ldr	r2, [pc, #84]	; (8000e74 <create_JSON_SubSensorDescriptor+0x130>)
 8000e20:	490d      	ldr	r1, [pc, #52]	; (8000e58 <create_JSON_SubSensorDescriptor+0x114>)
 8000e22:	4628      	mov	r0, r5
 8000e24:	f016 f93a 	bl	801709c <json_object_dotset_string>
    break;
 8000e28:	e7b0      	b.n	8000d8c <create_JSON_SubSensorDescriptor+0x48>
    json_object_dotset_string(JSON_SubSensorDescriptor, "sensorType", "PRESS");
 8000e2a:	4a13      	ldr	r2, [pc, #76]	; (8000e78 <create_JSON_SubSensorDescriptor+0x134>)
 8000e2c:	490a      	ldr	r1, [pc, #40]	; (8000e58 <create_JSON_SubSensorDescriptor+0x114>)
 8000e2e:	4628      	mov	r0, r5
 8000e30:	f016 f934 	bl	801709c <json_object_dotset_string>
    break;
 8000e34:	e7aa      	b.n	8000d8c <create_JSON_SubSensorDescriptor+0x48>
    json_object_dotset_string(JSON_SubSensorDescriptor, "sensorType", "HUM");
 8000e36:	4a11      	ldr	r2, [pc, #68]	; (8000e7c <create_JSON_SubSensorDescriptor+0x138>)
 8000e38:	4907      	ldr	r1, [pc, #28]	; (8000e58 <create_JSON_SubSensorDescriptor+0x114>)
 8000e3a:	4628      	mov	r0, r5
 8000e3c:	f016 f92e 	bl	801709c <json_object_dotset_string>
    break;
 8000e40:	e7a4      	b.n	8000d8c <create_JSON_SubSensorDescriptor+0x48>
    json_object_dotset_string(JSON_SubSensorDescriptor, "sensorType", "NA");
 8000e42:	4a0f      	ldr	r2, [pc, #60]	; (8000e80 <create_JSON_SubSensorDescriptor+0x13c>)
 8000e44:	4904      	ldr	r1, [pc, #16]	; (8000e58 <create_JSON_SubSensorDescriptor+0x114>)
 8000e46:	4628      	mov	r0, r5
 8000e48:	f016 f928 	bl	801709c <json_object_dotset_string>
    break;      
 8000e4c:	e79e      	b.n	8000d8c <create_JSON_SubSensorDescriptor+0x48>
 8000e4e:	bf00      	nop
 8000e50:	0801c230 	.word	0x0801c230
 8000e54:	0801bd6c 	.word	0x0801bd6c
 8000e58:	0801bd40 	.word	0x0801bd40
 8000e5c:	0801bd74 	.word	0x0801bd74
 8000e60:	0801bd84 	.word	0x0801bd84
 8000e64:	0801bd8c 	.word	0x0801bd8c
 8000e68:	0801bd3c 	.word	0x0801bd3c
 8000e6c:	0801bd4c 	.word	0x0801bd4c
 8000e70:	0801bd50 	.word	0x0801bd50
 8000e74:	0801bd58 	.word	0x0801bd58
 8000e78:	0801bd60 	.word	0x0801bd60
 8000e7c:	0801bd68 	.word	0x0801bd68
 8000e80:	0801bd70 	.word	0x0801bd70

08000e84 <create_JSON_SensorDescriptor>:
{
 8000e84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e86:	4606      	mov	r6, r0
 8000e88:	b083      	sub	sp, #12
  JSON_Object *JSON_SensorDescriptor = json_value_get_object(tempJSON);
 8000e8a:	4608      	mov	r0, r1
 8000e8c:	f015 fa6a 	bl	8016364 <json_value_get_object>
  json_object_dotset_string(JSON_SensorDescriptor, "name", sensor_descriptor->name);  
 8000e90:	4950      	ldr	r1, [pc, #320]	; (8000fd4 <create_JSON_SensorDescriptor+0x150>)
 8000e92:	1c72      	adds	r2, r6, #1
  JSON_Object *JSON_SensorDescriptor = json_value_get_object(tempJSON);
 8000e94:	4607      	mov	r7, r0
  json_object_dotset_string(JSON_SensorDescriptor, "name", sensor_descriptor->name);  
 8000e96:	f016 f901 	bl	801709c <json_object_dotset_string>
  switch (sensor_descriptor->dataType)
 8000e9a:	7c73      	ldrb	r3, [r6, #17]
 8000e9c:	2b06      	cmp	r3, #6
 8000e9e:	f200 8093 	bhi.w	8000fc8 <create_JSON_SensorDescriptor+0x144>
 8000ea2:	e8df f003 	tbb	[pc, r3]
 8000ea6:	736d      	.short	0x736d
 8000ea8:	8b857f79 	.word	0x8b857f79
 8000eac:	04          	.byte	0x04
 8000ead:	00          	.byte	0x00
    json_object_dotset_string(JSON_SensorDescriptor, "dataType", "float");
 8000eae:	4a4a      	ldr	r2, [pc, #296]	; (8000fd8 <create_JSON_SensorDescriptor+0x154>)
 8000eb0:	494a      	ldr	r1, [pc, #296]	; (8000fdc <create_JSON_SensorDescriptor+0x158>)
 8000eb2:	4638      	mov	r0, r7
 8000eb4:	f016 f8f2 	bl	801709c <json_object_dotset_string>
  json_object_dotset_number(JSON_SensorDescriptor, "samplesPerTs.min", sensor_descriptor->samplesPerTimestamp[0]);  
 8000eb8:	f8b6 0054 	ldrh.w	r0, [r6, #84]	; 0x54
 8000ebc:	f7ff fb4a 	bl	8000554 <__aeabi_ui2d>
 8000ec0:	ec41 0b10 	vmov	d0, r0, r1
 8000ec4:	4946      	ldr	r1, [pc, #280]	; (8000fe0 <create_JSON_SensorDescriptor+0x15c>)
 8000ec6:	4638      	mov	r0, r7
 8000ec8:	f016 f904 	bl	80170d4 <json_object_dotset_number>
  json_object_dotset_number(JSON_SensorDescriptor, "samplesPerTs.max", sensor_descriptor->samplesPerTimestamp[1]);  
 8000ecc:	f8b6 0056 	ldrh.w	r0, [r6, #86]	; 0x56
 8000ed0:	f7ff fb40 	bl	8000554 <__aeabi_ui2d>
 8000ed4:	ec41 0b10 	vmov	d0, r0, r1
 8000ed8:	4942      	ldr	r1, [pc, #264]	; (8000fe4 <create_JSON_SensorDescriptor+0x160>)
 8000eda:	4638      	mov	r0, r7
 8000edc:	f016 f8fa 	bl	80170d4 <json_object_dotset_number>
  json_object_dotset_string(JSON_SensorDescriptor, "samplesPerTs.dataType", "int16_t");  
 8000ee0:	4a41      	ldr	r2, [pc, #260]	; (8000fe8 <create_JSON_SensorDescriptor+0x164>)
 8000ee2:	4942      	ldr	r1, [pc, #264]	; (8000fec <create_JSON_SensorDescriptor+0x168>)
 8000ee4:	4638      	mov	r0, r7
 8000ee6:	f016 f8d9 	bl	801709c <json_object_dotset_string>
  json_object_dotset_value(JSON_SensorDescriptor, "odr.values", json_value_init_array());
 8000eea:	f015 fdc3 	bl	8016a74 <json_value_init_array>
 8000eee:	4940      	ldr	r1, [pc, #256]	; (8000ff0 <create_JSON_SensorDescriptor+0x16c>)
 8000ef0:	4602      	mov	r2, r0
 8000ef2:	4638      	mov	r0, r7
 8000ef4:	f016 f80c 	bl	8016f10 <json_object_dotset_value>
  JSON_Array *JSON_SensorArray = json_object_dotget_array(JSON_SensorDescriptor, "odr.values");
 8000ef8:	493d      	ldr	r1, [pc, #244]	; (8000ff0 <create_JSON_SensorDescriptor+0x16c>)
 8000efa:	4638      	mov	r0, r7
 8000efc:	f015 fa00 	bl	8016300 <json_object_dotget_array>
  while (sensor_descriptor->ODR[ii] > 0)
 8000f00:	edd6 7a05 	vldr	s15, [r6, #20]
 8000f04:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000f08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  JSON_Array *JSON_SensorArray = json_object_dotget_array(JSON_SensorDescriptor, "odr.values");
 8000f0c:	4605      	mov	r5, r0
  while (sensor_descriptor->ODR[ii] > 0)
 8000f0e:	dd11      	ble.n	8000f34 <create_JSON_SensorDescriptor+0xb0>
 8000f10:	f106 0418 	add.w	r4, r6, #24
    json_array_append_number(JSON_SensorArray, sensor_descriptor->ODR[ii]);
 8000f14:	ee17 0a90 	vmov	r0, s15
 8000f18:	f7ff fb3e 	bl	8000598 <__aeabi_f2d>
 8000f1c:	ec41 0b10 	vmov	d0, r0, r1
 8000f20:	4628      	mov	r0, r5
 8000f22:	f015 ff29 	bl	8016d78 <json_array_append_number>
  while (sensor_descriptor->ODR[ii] > 0)
 8000f26:	ecf4 7a01 	vldmia	r4!, {s15}
 8000f2a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000f2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f32:	dcef      	bgt.n	8000f14 <create_JSON_SensorDescriptor+0x90>
  json_object_dotset_value(JSON_SensorDescriptor, "subSensorDescriptor", json_value_init_array());  
 8000f34:	f015 fd9e 	bl	8016a74 <json_value_init_array>
 8000f38:	492e      	ldr	r1, [pc, #184]	; (8000ff4 <create_JSON_SensorDescriptor+0x170>)
 8000f3a:	4602      	mov	r2, r0
 8000f3c:	4638      	mov	r0, r7
 8000f3e:	f015 ffe7 	bl	8016f10 <json_object_dotset_value>
  JSON_SensorArray1 = json_object_dotget_array(JSON_SensorDescriptor, "subSensorDescriptor"); 
 8000f42:	4638      	mov	r0, r7
 8000f44:	492b      	ldr	r1, [pc, #172]	; (8000ff4 <create_JSON_SensorDescriptor+0x170>)
 8000f46:	f015 f9db 	bl	8016300 <json_object_dotget_array>
  for (ii = 0; ii < sensor_descriptor->nSubSensors; ii++)
 8000f4a:	f896 3058 	ldrb.w	r3, [r6, #88]	; 0x58
  JSON_SensorArray1 = json_object_dotget_array(JSON_SensorDescriptor, "subSensorDescriptor"); 
 8000f4e:	4607      	mov	r7, r0
  for (ii = 0; ii < sensor_descriptor->nSubSensors; ii++)
 8000f50:	b1a3      	cbz	r3, 8000f7c <create_JSON_SensorDescriptor+0xf8>
 8000f52:	f106 055c 	add.w	r5, r6, #92	; 0x5c
 8000f56:	2400      	movs	r4, #0
    tempJSON1 = json_value_init_object();  
 8000f58:	f015 fd6c 	bl	8016a34 <json_value_init_object>
 8000f5c:	4601      	mov	r1, r0
    create_JSON_SubSensorDescriptor(&sensor_descriptor->subSensorDescriptor[ii], tempJSON1);  
 8000f5e:	9001      	str	r0, [sp, #4]
 8000f60:	4628      	mov	r0, r5
 8000f62:	f7ff feef 	bl	8000d44 <create_JSON_SubSensorDescriptor>
    json_array_append_value(JSON_SensorArray1,tempJSON1);
 8000f66:	9901      	ldr	r1, [sp, #4]
 8000f68:	4638      	mov	r0, r7
 8000f6a:	f015 fec9 	bl	8016d00 <json_array_append_value>
  for (ii = 0; ii < sensor_descriptor->nSubSensors; ii++)
 8000f6e:	f896 3058 	ldrb.w	r3, [r6, #88]	; 0x58
 8000f72:	3401      	adds	r4, #1
 8000f74:	42a3      	cmp	r3, r4
 8000f76:	f105 0554 	add.w	r5, r5, #84	; 0x54
 8000f7a:	d8ed      	bhi.n	8000f58 <create_JSON_SensorDescriptor+0xd4>
}
 8000f7c:	b003      	add	sp, #12
 8000f7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    json_object_dotset_string(JSON_SensorDescriptor, "dataType", "uint8_t");
 8000f80:	4a1d      	ldr	r2, [pc, #116]	; (8000ff8 <create_JSON_SensorDescriptor+0x174>)
 8000f82:	4916      	ldr	r1, [pc, #88]	; (8000fdc <create_JSON_SensorDescriptor+0x158>)
 8000f84:	4638      	mov	r0, r7
 8000f86:	f016 f889 	bl	801709c <json_object_dotset_string>
    break;
 8000f8a:	e795      	b.n	8000eb8 <create_JSON_SensorDescriptor+0x34>
    json_object_dotset_string(JSON_SensorDescriptor, "dataType", "int8_t");
 8000f8c:	4a1b      	ldr	r2, [pc, #108]	; (8000ffc <create_JSON_SensorDescriptor+0x178>)
 8000f8e:	4913      	ldr	r1, [pc, #76]	; (8000fdc <create_JSON_SensorDescriptor+0x158>)
 8000f90:	4638      	mov	r0, r7
 8000f92:	f016 f883 	bl	801709c <json_object_dotset_string>
    break;
 8000f96:	e78f      	b.n	8000eb8 <create_JSON_SensorDescriptor+0x34>
    json_object_dotset_string(JSON_SensorDescriptor, "dataType", "uint16_t");
 8000f98:	4a19      	ldr	r2, [pc, #100]	; (8001000 <create_JSON_SensorDescriptor+0x17c>)
 8000f9a:	4910      	ldr	r1, [pc, #64]	; (8000fdc <create_JSON_SensorDescriptor+0x158>)
 8000f9c:	4638      	mov	r0, r7
 8000f9e:	f016 f87d 	bl	801709c <json_object_dotset_string>
    break;
 8000fa2:	e789      	b.n	8000eb8 <create_JSON_SensorDescriptor+0x34>
    json_object_dotset_string(JSON_SensorDescriptor, "dataType", "int16_t");
 8000fa4:	4a10      	ldr	r2, [pc, #64]	; (8000fe8 <create_JSON_SensorDescriptor+0x164>)
 8000fa6:	490d      	ldr	r1, [pc, #52]	; (8000fdc <create_JSON_SensorDescriptor+0x158>)
 8000fa8:	4638      	mov	r0, r7
 8000faa:	f016 f877 	bl	801709c <json_object_dotset_string>
    break;
 8000fae:	e783      	b.n	8000eb8 <create_JSON_SensorDescriptor+0x34>
    json_object_dotset_string(JSON_SensorDescriptor, "dataType", "uint32_t");
 8000fb0:	4a14      	ldr	r2, [pc, #80]	; (8001004 <create_JSON_SensorDescriptor+0x180>)
 8000fb2:	490a      	ldr	r1, [pc, #40]	; (8000fdc <create_JSON_SensorDescriptor+0x158>)
 8000fb4:	4638      	mov	r0, r7
 8000fb6:	f016 f871 	bl	801709c <json_object_dotset_string>
    break;
 8000fba:	e77d      	b.n	8000eb8 <create_JSON_SensorDescriptor+0x34>
    json_object_dotset_string(JSON_SensorDescriptor, "dataType", "int32_t");
 8000fbc:	4a12      	ldr	r2, [pc, #72]	; (8001008 <create_JSON_SensorDescriptor+0x184>)
 8000fbe:	4907      	ldr	r1, [pc, #28]	; (8000fdc <create_JSON_SensorDescriptor+0x158>)
 8000fc0:	4638      	mov	r0, r7
 8000fc2:	f016 f86b 	bl	801709c <json_object_dotset_string>
    break;
 8000fc6:	e777      	b.n	8000eb8 <create_JSON_SensorDescriptor+0x34>
    json_object_dotset_string(JSON_SensorDescriptor, "dataType", "NA");
 8000fc8:	4a10      	ldr	r2, [pc, #64]	; (800100c <create_JSON_SensorDescriptor+0x188>)
 8000fca:	4904      	ldr	r1, [pc, #16]	; (8000fdc <create_JSON_SensorDescriptor+0x158>)
 8000fcc:	4638      	mov	r0, r7
 8000fce:	f016 f865 	bl	801709c <json_object_dotset_string>
    break;
 8000fd2:	e771      	b.n	8000eb8 <create_JSON_SensorDescriptor+0x34>
 8000fd4:	0801bd98 	.word	0x0801bd98
 8000fd8:	0801bde4 	.word	0x0801bde4
 8000fdc:	0801bda8 	.word	0x0801bda8
 8000fe0:	0801bdec 	.word	0x0801bdec
 8000fe4:	0801be00 	.word	0x0801be00
 8000fe8:	0801bdc8 	.word	0x0801bdc8
 8000fec:	0801be14 	.word	0x0801be14
 8000ff0:	0801be2c 	.word	0x0801be2c
 8000ff4:	0801be38 	.word	0x0801be38
 8000ff8:	0801bda0 	.word	0x0801bda0
 8000ffc:	0801bdb4 	.word	0x0801bdb4
 8001000:	0801bdbc 	.word	0x0801bdbc
 8001004:	0801bdd0 	.word	0x0801bdd0
 8001008:	0801bddc 	.word	0x0801bddc
 800100c:	0801bd70 	.word	0x0801bd70

08001010 <create_JSON_SensorStatus>:
{
 8001010:	b538      	push	{r3, r4, r5, lr}
 8001012:	4605      	mov	r5, r0
  JSON_Object *JSON_SensorStatus= json_value_get_object(tempJSON);
 8001014:	4608      	mov	r0, r1
 8001016:	f015 f9a5 	bl	8016364 <json_value_get_object>
 800101a:	4604      	mov	r4, r0
  json_object_dotset_number(JSON_SensorStatus, "odr", sensor_status->ODR);
 800101c:	6828      	ldr	r0, [r5, #0]
 800101e:	f7ff fabb 	bl	8000598 <__aeabi_f2d>
 8001022:	ec41 0b10 	vmov	d0, r0, r1
 8001026:	4921      	ldr	r1, [pc, #132]	; (80010ac <create_JSON_SensorStatus+0x9c>)
 8001028:	4620      	mov	r0, r4
 800102a:	f016 f853 	bl	80170d4 <json_object_dotset_number>
  json_object_dotset_number(JSON_SensorStatus, "odrMeasured", sensor_status->measuredODR);
 800102e:	6868      	ldr	r0, [r5, #4]
 8001030:	f7ff fab2 	bl	8000598 <__aeabi_f2d>
 8001034:	ec41 0b10 	vmov	d0, r0, r1
 8001038:	491d      	ldr	r1, [pc, #116]	; (80010b0 <create_JSON_SensorStatus+0xa0>)
 800103a:	4620      	mov	r0, r4
 800103c:	f016 f84a 	bl	80170d4 <json_object_dotset_number>
  json_object_dotset_number(JSON_SensorStatus, "initialOffset", sensor_status->initialOffset);
 8001040:	68a8      	ldr	r0, [r5, #8]
 8001042:	f7ff faa9 	bl	8000598 <__aeabi_f2d>
 8001046:	ec41 0b10 	vmov	d0, r0, r1
 800104a:	491a      	ldr	r1, [pc, #104]	; (80010b4 <create_JSON_SensorStatus+0xa4>)
 800104c:	4620      	mov	r0, r4
 800104e:	f016 f841 	bl	80170d4 <json_object_dotset_number>
  json_object_dotset_boolean(JSON_SensorStatus, "isActive", sensor_status->isActive);
 8001052:	7baa      	ldrb	r2, [r5, #14]
 8001054:	4918      	ldr	r1, [pc, #96]	; (80010b8 <create_JSON_SensorStatus+0xa8>)
 8001056:	4620      	mov	r0, r4
 8001058:	f016 f884 	bl	8017164 <json_object_dotset_boolean>
  json_object_dotset_number(JSON_SensorStatus, "samplesPerTs", sensor_status->samplesPerTimestamp);
 800105c:	89a8      	ldrh	r0, [r5, #12]
 800105e:	f7ff fa79 	bl	8000554 <__aeabi_ui2d>
 8001062:	ec41 0b10 	vmov	d0, r0, r1
 8001066:	4915      	ldr	r1, [pc, #84]	; (80010bc <create_JSON_SensorStatus+0xac>)
 8001068:	4620      	mov	r0, r4
 800106a:	f016 f833 	bl	80170d4 <json_object_dotset_number>
  json_object_dotset_number(JSON_SensorStatus, "usbDataPacketSize", sensor_status->usbDataPacketSize);
 800106e:	8a28      	ldrh	r0, [r5, #16]
 8001070:	f7ff fa70 	bl	8000554 <__aeabi_ui2d>
 8001074:	ec41 0b10 	vmov	d0, r0, r1
 8001078:	4911      	ldr	r1, [pc, #68]	; (80010c0 <create_JSON_SensorStatus+0xb0>)
 800107a:	4620      	mov	r0, r4
 800107c:	f016 f82a 	bl	80170d4 <json_object_dotset_number>
  json_object_dotset_number(JSON_SensorStatus, "sdWriteBufferSize", sensor_status->sdWriteBufferSize);
 8001080:	6968      	ldr	r0, [r5, #20]
 8001082:	f7ff fa67 	bl	8000554 <__aeabi_ui2d>
 8001086:	ec41 0b10 	vmov	d0, r0, r1
 800108a:	490e      	ldr	r1, [pc, #56]	; (80010c4 <create_JSON_SensorStatus+0xb4>)
 800108c:	4620      	mov	r0, r4
 800108e:	f016 f821 	bl	80170d4 <json_object_dotset_number>
  json_object_dotset_number(JSON_SensorStatus, "comChannelNumber", sensor_status->comChannelNumber);
 8001092:	f9b5 0018 	ldrsh.w	r0, [r5, #24]
 8001096:	f7ff fa6d 	bl	8000574 <__aeabi_i2d>
 800109a:	ec41 0b10 	vmov	d0, r0, r1
 800109e:	4620      	mov	r0, r4
 80010a0:	4909      	ldr	r1, [pc, #36]	; (80010c8 <create_JSON_SensorStatus+0xb8>)
}
 80010a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  json_object_dotset_number(JSON_SensorStatus, "comChannelNumber", sensor_status->comChannelNumber);
 80010a6:	f016 b815 	b.w	80170d4 <json_object_dotset_number>
 80010aa:	bf00      	nop
 80010ac:	0801be4c 	.word	0x0801be4c
 80010b0:	0801be50 	.word	0x0801be50
 80010b4:	0801be5c 	.word	0x0801be5c
 80010b8:	0801be6c 	.word	0x0801be6c
 80010bc:	0801be78 	.word	0x0801be78
 80010c0:	0801be88 	.word	0x0801be88
 80010c4:	0801be9c 	.word	0x0801be9c
 80010c8:	0801beb0 	.word	0x0801beb0

080010cc <parse_Status_from_JSON>:
{  
 80010cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80010d0:	ed2d 8b02 	vpush	{d8}
 80010d4:	b083      	sub	sp, #12
 80010d6:	460e      	mov	r6, r1
  JSON_Value *tempJSON = json_parse_string(SerializedJSON);
 80010d8:	f015 fc94 	bl	8016a04 <json_parse_string>
 80010dc:	ee08 0a10 	vmov	s16, r0
  JSON_Object *JSON_ParseHandler = json_value_get_object(tempJSON);
 80010e0:	f015 f940 	bl	8016364 <json_value_get_object>
  if (json_object_dothas_value(JSON_ParseHandler,"odr"))
 80010e4:	4989      	ldr	r1, [pc, #548]	; (800130c <parse_Status_from_JSON+0x240>)
  JSON_Object *JSON_ParseHandler = json_value_get_object(tempJSON);
 80010e6:	4604      	mov	r4, r0
  if (json_object_dothas_value(JSON_ParseHandler,"odr"))
 80010e8:	f015 f920 	bl	801632c <json_object_dothas_value>
 80010ec:	2800      	cmp	r0, #0
 80010ee:	d12d      	bne.n	800114c <parse_Status_from_JSON+0x80>
  if (json_object_dothas_value(JSON_ParseHandler,"usbDataPacketSize"))
 80010f0:	4987      	ldr	r1, [pc, #540]	; (8001310 <parse_Status_from_JSON+0x244>)
 80010f2:	4620      	mov	r0, r4
 80010f4:	f015 f91a 	bl	801632c <json_object_dothas_value>
 80010f8:	2800      	cmp	r0, #0
 80010fa:	d136      	bne.n	800116a <parse_Status_from_JSON+0x9e>
  if (json_object_dothas_value(JSON_ParseHandler,"sdWriteBufferSize"))
 80010fc:	4985      	ldr	r1, [pc, #532]	; (8001314 <parse_Status_from_JSON+0x248>)
 80010fe:	4620      	mov	r0, r4
 8001100:	f015 f914 	bl	801632c <json_object_dothas_value>
 8001104:	2800      	cmp	r0, #0
 8001106:	d13f      	bne.n	8001188 <parse_Status_from_JSON+0xbc>
  if (json_object_dothas_value(JSON_ParseHandler,"comChannelNumber"))
 8001108:	4983      	ldr	r1, [pc, #524]	; (8001318 <parse_Status_from_JSON+0x24c>)
 800110a:	4620      	mov	r0, r4
 800110c:	f015 f90e 	bl	801632c <json_object_dothas_value>
 8001110:	2800      	cmp	r0, #0
 8001112:	d148      	bne.n	80011a6 <parse_Status_from_JSON+0xda>
  if (json_object_dothas_value(JSON_ParseHandler,"samplesPerTs"))
 8001114:	4981      	ldr	r1, [pc, #516]	; (800131c <parse_Status_from_JSON+0x250>)
 8001116:	4620      	mov	r0, r4
 8001118:	f015 f908 	bl	801632c <json_object_dothas_value>
 800111c:	2800      	cmp	r0, #0
 800111e:	d151      	bne.n	80011c4 <parse_Status_from_JSON+0xf8>
  if (json_object_dothas_value(JSON_ParseHandler,"isActive"))
 8001120:	497f      	ldr	r1, [pc, #508]	; (8001320 <parse_Status_from_JSON+0x254>)
 8001122:	4620      	mov	r0, r4
 8001124:	f015 f902 	bl	801632c <json_object_dothas_value>
 8001128:	2800      	cmp	r0, #0
 800112a:	d15a      	bne.n	80011e2 <parse_Status_from_JSON+0x116>
  if (json_object_dothas_value(JSON_ParseHandler,"subSensorStatus"))
 800112c:	497d      	ldr	r1, [pc, #500]	; (8001324 <parse_Status_from_JSON+0x258>)
 800112e:	4620      	mov	r0, r4
 8001130:	f015 f8fc 	bl	801632c <json_object_dothas_value>
 8001134:	2800      	cmp	r0, #0
 8001136:	d163      	bne.n	8001200 <parse_Status_from_JSON+0x134>
  json_value_free(tempJSON);
 8001138:	ee18 0a10 	vmov	r0, s16
 800113c:	f015 f922 	bl	8016384 <json_value_free>
}
 8001140:	2000      	movs	r0, #0
 8001142:	b003      	add	sp, #12
 8001144:	ecbd 8b02 	vpop	{d8}
 8001148:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    sensorStatus->ODR = json_object_dotget_number(JSON_ParseHandler, "odr");
 800114c:	496f      	ldr	r1, [pc, #444]	; (800130c <parse_Status_from_JSON+0x240>)
 800114e:	4620      	mov	r0, r4
 8001150:	f015 f8c2 	bl	80162d8 <json_object_dotget_number>
 8001154:	ec51 0b10 	vmov	r0, r1, d0
 8001158:	f7ff fd6e 	bl	8000c38 <__aeabi_d2f>
  if (json_object_dothas_value(JSON_ParseHandler,"usbDataPacketSize"))
 800115c:	496c      	ldr	r1, [pc, #432]	; (8001310 <parse_Status_from_JSON+0x244>)
    sensorStatus->ODR = json_object_dotget_number(JSON_ParseHandler, "odr");
 800115e:	6030      	str	r0, [r6, #0]
  if (json_object_dothas_value(JSON_ParseHandler,"usbDataPacketSize"))
 8001160:	4620      	mov	r0, r4
 8001162:	f015 f8e3 	bl	801632c <json_object_dothas_value>
 8001166:	2800      	cmp	r0, #0
 8001168:	d0c8      	beq.n	80010fc <parse_Status_from_JSON+0x30>
    sensorStatus->usbDataPacketSize = (uint16_t) json_object_dotget_number(JSON_ParseHandler, "usbDataPacketSize");
 800116a:	4969      	ldr	r1, [pc, #420]	; (8001310 <parse_Status_from_JSON+0x244>)
 800116c:	4620      	mov	r0, r4
 800116e:	f015 f8b3 	bl	80162d8 <json_object_dotget_number>
 8001172:	ec51 0b10 	vmov	r0, r1, d0
 8001176:	f7ff fd3f 	bl	8000bf8 <__aeabi_d2uiz>
  if (json_object_dothas_value(JSON_ParseHandler,"sdWriteBufferSize"))
 800117a:	4966      	ldr	r1, [pc, #408]	; (8001314 <parse_Status_from_JSON+0x248>)
    sensorStatus->usbDataPacketSize = (uint16_t) json_object_dotget_number(JSON_ParseHandler, "usbDataPacketSize");
 800117c:	8230      	strh	r0, [r6, #16]
  if (json_object_dothas_value(JSON_ParseHandler,"sdWriteBufferSize"))
 800117e:	4620      	mov	r0, r4
 8001180:	f015 f8d4 	bl	801632c <json_object_dothas_value>
 8001184:	2800      	cmp	r0, #0
 8001186:	d0bf      	beq.n	8001108 <parse_Status_from_JSON+0x3c>
    sensorStatus->sdWriteBufferSize = (uint32_t) json_object_dotget_number(JSON_ParseHandler, "sdWriteBufferSize");
 8001188:	4962      	ldr	r1, [pc, #392]	; (8001314 <parse_Status_from_JSON+0x248>)
 800118a:	4620      	mov	r0, r4
 800118c:	f015 f8a4 	bl	80162d8 <json_object_dotget_number>
 8001190:	ec51 0b10 	vmov	r0, r1, d0
 8001194:	f7ff fd30 	bl	8000bf8 <__aeabi_d2uiz>
  if (json_object_dothas_value(JSON_ParseHandler,"comChannelNumber"))
 8001198:	495f      	ldr	r1, [pc, #380]	; (8001318 <parse_Status_from_JSON+0x24c>)
    sensorStatus->sdWriteBufferSize = (uint32_t) json_object_dotget_number(JSON_ParseHandler, "sdWriteBufferSize");
 800119a:	6170      	str	r0, [r6, #20]
  if (json_object_dothas_value(JSON_ParseHandler,"comChannelNumber"))
 800119c:	4620      	mov	r0, r4
 800119e:	f015 f8c5 	bl	801632c <json_object_dothas_value>
 80011a2:	2800      	cmp	r0, #0
 80011a4:	d0b6      	beq.n	8001114 <parse_Status_from_JSON+0x48>
    sensorStatus->comChannelNumber = (int16_t) json_object_dotget_number(JSON_ParseHandler, "comChannelNumber");
 80011a6:	495c      	ldr	r1, [pc, #368]	; (8001318 <parse_Status_from_JSON+0x24c>)
 80011a8:	4620      	mov	r0, r4
 80011aa:	f015 f895 	bl	80162d8 <json_object_dotget_number>
 80011ae:	ec51 0b10 	vmov	r0, r1, d0
 80011b2:	f7ff fcf9 	bl	8000ba8 <__aeabi_d2iz>
  if (json_object_dothas_value(JSON_ParseHandler,"samplesPerTs"))
 80011b6:	4959      	ldr	r1, [pc, #356]	; (800131c <parse_Status_from_JSON+0x250>)
    sensorStatus->comChannelNumber = (int16_t) json_object_dotget_number(JSON_ParseHandler, "comChannelNumber");
 80011b8:	8330      	strh	r0, [r6, #24]
  if (json_object_dothas_value(JSON_ParseHandler,"samplesPerTs"))
 80011ba:	4620      	mov	r0, r4
 80011bc:	f015 f8b6 	bl	801632c <json_object_dothas_value>
 80011c0:	2800      	cmp	r0, #0
 80011c2:	d0ad      	beq.n	8001120 <parse_Status_from_JSON+0x54>
    sensorStatus->samplesPerTimestamp = (uint16_t)json_object_dotget_number(JSON_ParseHandler, "samplesPerTs");
 80011c4:	4955      	ldr	r1, [pc, #340]	; (800131c <parse_Status_from_JSON+0x250>)
 80011c6:	4620      	mov	r0, r4
 80011c8:	f015 f886 	bl	80162d8 <json_object_dotget_number>
 80011cc:	ec51 0b10 	vmov	r0, r1, d0
 80011d0:	f7ff fd12 	bl	8000bf8 <__aeabi_d2uiz>
  if (json_object_dothas_value(JSON_ParseHandler,"isActive"))
 80011d4:	4952      	ldr	r1, [pc, #328]	; (8001320 <parse_Status_from_JSON+0x254>)
    sensorStatus->samplesPerTimestamp = (uint16_t)json_object_dotget_number(JSON_ParseHandler, "samplesPerTs");
 80011d6:	81b0      	strh	r0, [r6, #12]
  if (json_object_dothas_value(JSON_ParseHandler,"isActive"))
 80011d8:	4620      	mov	r0, r4
 80011da:	f015 f8a7 	bl	801632c <json_object_dothas_value>
 80011de:	2800      	cmp	r0, #0
 80011e0:	d0a4      	beq.n	800112c <parse_Status_from_JSON+0x60>
    if (json_object_dotget_boolean(JSON_ParseHandler,"isActive") == 1)
 80011e2:	494f      	ldr	r1, [pc, #316]	; (8001320 <parse_Status_from_JSON+0x254>)
 80011e4:	4620      	mov	r0, r4
 80011e6:	f015 f895 	bl	8016314 <json_object_dotget_boolean>
 80011ea:	2801      	cmp	r0, #1
      sensorStatus->isActive = 0;
 80011ec:	bf16      	itet	ne
 80011ee:	2300      	movne	r3, #0
      sensorStatus->isActive = 1;
 80011f0:	73b0      	strbeq	r0, [r6, #14]
      sensorStatus->isActive = 0;
 80011f2:	73b3      	strbne	r3, [r6, #14]
  if (json_object_dothas_value(JSON_ParseHandler,"subSensorStatus"))
 80011f4:	494b      	ldr	r1, [pc, #300]	; (8001324 <parse_Status_from_JSON+0x258>)
 80011f6:	4620      	mov	r0, r4
 80011f8:	f015 f898 	bl	801632c <json_object_dothas_value>
 80011fc:	2800      	cmp	r0, #0
 80011fe:	d09b      	beq.n	8001138 <parse_Status_from_JSON+0x6c>
    JSON_subSensorParser = json_object_dotget_array(JSON_ParseHandler, "subSensorStatus");    
 8001200:	4948      	ldr	r1, [pc, #288]	; (8001324 <parse_Status_from_JSON+0x258>)
 8001202:	4620      	mov	r0, r4
 8001204:	f015 f87c 	bl	8016300 <json_object_dotget_array>
 8001208:	4680      	mov	r8, r0
    size = (uint32_t)json_array_get_count(JSON_subSensorParser);
 800120a:	f015 f8a7 	bl	801635c <json_array_get_count>
    for (ii = 0; ii < size; ii++)
 800120e:	9000      	str	r0, [sp, #0]
 8001210:	2800      	cmp	r0, #0
 8001212:	d091      	beq.n	8001138 <parse_Status_from_JSON+0x6c>
 8001214:	4f44      	ldr	r7, [pc, #272]	; (8001328 <parse_Status_from_JSON+0x25c>)
      if (json_object_dothas_value(JSON_subSensorObj,"id"))  
 8001216:	f8df b114 	ldr.w	fp, [pc, #276]	; 800132c <parse_Status_from_JSON+0x260>
      if (json_object_dothas_value(JSON_subSensorObj,"fs"))
 800121a:	f8df a114 	ldr.w	sl, [pc, #276]	; 8001330 <parse_Status_from_JSON+0x264>
      if (json_object_dothas_value(JSON_subSensorObj,"sensitivity"))
 800121e:	f8df 9114 	ldr.w	r9, [pc, #276]	; 8001334 <parse_Status_from_JSON+0x268>
    for (ii = 0; ii < size; ii++)
 8001222:	2500      	movs	r5, #0
 8001224:	e017      	b.n	8001256 <parse_Status_from_JSON+0x18a>
        subid = ii;
 8001226:	b26b      	sxtb	r3, r5
      if (json_object_dothas_value(JSON_subSensorObj,"fs"))
 8001228:	4651      	mov	r1, sl
 800122a:	4620      	mov	r0, r4
        subid = ii;
 800122c:	703b      	strb	r3, [r7, #0]
      if (json_object_dothas_value(JSON_subSensorObj,"fs"))
 800122e:	f015 f87d 	bl	801632c <json_object_dothas_value>
 8001232:	bb50      	cbnz	r0, 800128a <parse_Status_from_JSON+0x1be>
      if (json_object_dothas_value(JSON_subSensorObj,"sensitivity"))
 8001234:	4649      	mov	r1, r9
 8001236:	4620      	mov	r0, r4
 8001238:	f015 f878 	bl	801632c <json_object_dothas_value>
 800123c:	2800      	cmp	r0, #0
 800123e:	d13b      	bne.n	80012b8 <parse_Status_from_JSON+0x1ec>
      if (json_object_dothas_value(JSON_subSensorObj,"isActive"))
 8001240:	4937      	ldr	r1, [pc, #220]	; (8001320 <parse_Status_from_JSON+0x254>)
 8001242:	4620      	mov	r0, r4
 8001244:	f015 f872 	bl	801632c <json_object_dothas_value>
 8001248:	2800      	cmp	r0, #0
 800124a:	d14c      	bne.n	80012e6 <parse_Status_from_JSON+0x21a>
    for (ii = 0; ii < size; ii++)
 800124c:	9b00      	ldr	r3, [sp, #0]
 800124e:	3501      	adds	r5, #1
 8001250:	42ab      	cmp	r3, r5
 8001252:	f43f af71 	beq.w	8001138 <parse_Status_from_JSON+0x6c>
      JSON_subSensorObj = json_array_get_object(JSON_subSensorParser,ii);      
 8001256:	4629      	mov	r1, r5
 8001258:	4640      	mov	r0, r8
 800125a:	f015 f86f 	bl	801633c <json_array_get_object>
      if (json_object_dothas_value(JSON_subSensorObj,"id"))  
 800125e:	4659      	mov	r1, fp
      JSON_subSensorObj = json_array_get_object(JSON_subSensorParser,ii);      
 8001260:	4604      	mov	r4, r0
      if (json_object_dothas_value(JSON_subSensorObj,"id"))  
 8001262:	f015 f863 	bl	801632c <json_object_dothas_value>
 8001266:	2800      	cmp	r0, #0
 8001268:	d0dd      	beq.n	8001226 <parse_Status_from_JSON+0x15a>
        subid = (int8_t)json_object_dotget_number(JSON_subSensorObj, "id");
 800126a:	4659      	mov	r1, fp
 800126c:	4620      	mov	r0, r4
 800126e:	f015 f833 	bl	80162d8 <json_object_dotget_number>
 8001272:	ec51 0b10 	vmov	r0, r1, d0
 8001276:	f7ff fc97 	bl	8000ba8 <__aeabi_d2iz>
 800127a:	b240      	sxtb	r0, r0
 800127c:	7038      	strb	r0, [r7, #0]
      if (json_object_dothas_value(JSON_subSensorObj,"fs"))
 800127e:	4651      	mov	r1, sl
 8001280:	4620      	mov	r0, r4
 8001282:	f015 f853 	bl	801632c <json_object_dothas_value>
 8001286:	2800      	cmp	r0, #0
 8001288:	d0d4      	beq.n	8001234 <parse_Status_from_JSON+0x168>
        sensorStatus->subSensorStatus[subid].FS = json_object_dotget_number(JSON_subSensorObj, "fs");
 800128a:	4651      	mov	r1, sl
 800128c:	4620      	mov	r0, r4
 800128e:	f015 f823 	bl	80162d8 <json_object_dotget_number>
 8001292:	783b      	ldrb	r3, [r7, #0]
 8001294:	b25b      	sxtb	r3, r3
 8001296:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800129a:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800129e:	ec51 0b10 	vmov	r0, r1, d0
 80012a2:	9301      	str	r3, [sp, #4]
 80012a4:	f7ff fcc8 	bl	8000c38 <__aeabi_d2f>
 80012a8:	9b01      	ldr	r3, [sp, #4]
      if (json_object_dothas_value(JSON_subSensorObj,"sensitivity"))
 80012aa:	4649      	mov	r1, r9
        sensorStatus->subSensorStatus[subid].FS = json_object_dotget_number(JSON_subSensorObj, "fs");
 80012ac:	61d8      	str	r0, [r3, #28]
      if (json_object_dothas_value(JSON_subSensorObj,"sensitivity"))
 80012ae:	4620      	mov	r0, r4
 80012b0:	f015 f83c 	bl	801632c <json_object_dothas_value>
 80012b4:	2800      	cmp	r0, #0
 80012b6:	d0c3      	beq.n	8001240 <parse_Status_from_JSON+0x174>
        sensorStatus->subSensorStatus[subid].sensitivity = json_object_dotget_number(JSON_subSensorObj, "sensitivity");
 80012b8:	4649      	mov	r1, r9
 80012ba:	4620      	mov	r0, r4
 80012bc:	f015 f80c 	bl	80162d8 <json_object_dotget_number>
 80012c0:	783b      	ldrb	r3, [r7, #0]
 80012c2:	b25b      	sxtb	r3, r3
 80012c4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80012c8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80012cc:	ec51 0b10 	vmov	r0, r1, d0
 80012d0:	9301      	str	r3, [sp, #4]
 80012d2:	f7ff fcb1 	bl	8000c38 <__aeabi_d2f>
 80012d6:	9b01      	ldr	r3, [sp, #4]
      if (json_object_dothas_value(JSON_subSensorObj,"isActive"))
 80012d8:	4911      	ldr	r1, [pc, #68]	; (8001320 <parse_Status_from_JSON+0x254>)
        sensorStatus->subSensorStatus[subid].sensitivity = json_object_dotget_number(JSON_subSensorObj, "sensitivity");
 80012da:	6218      	str	r0, [r3, #32]
      if (json_object_dothas_value(JSON_subSensorObj,"isActive"))
 80012dc:	4620      	mov	r0, r4
 80012de:	f015 f825 	bl	801632c <json_object_dothas_value>
 80012e2:	2800      	cmp	r0, #0
 80012e4:	d0b2      	beq.n	800124c <parse_Status_from_JSON+0x180>
        if (json_object_dotget_boolean(JSON_subSensorObj,"isActive") == 1)
 80012e6:	490e      	ldr	r1, [pc, #56]	; (8001320 <parse_Status_from_JSON+0x254>)
 80012e8:	4620      	mov	r0, r4
 80012ea:	f015 f813 	bl	8016314 <json_object_dotget_boolean>
          sensorStatus->subSensorStatus[subid].isActive = 1;
 80012ee:	783b      	ldrb	r3, [r7, #0]
 80012f0:	b25b      	sxtb	r3, r3
 80012f2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
        if (json_object_dotget_boolean(JSON_subSensorObj,"isActive") == 1)
 80012f6:	2801      	cmp	r0, #1
          sensorStatus->subSensorStatus[subid].isActive = 1;
 80012f8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
          sensorStatus->subSensorStatus[subid].isActive = 0;
 80012fc:	bf16      	itet	ne
 80012fe:	2200      	movne	r2, #0
          sensorStatus->subSensorStatus[subid].isActive = 1;
 8001300:	f883 0024 	strbeq.w	r0, [r3, #36]	; 0x24
          sensorStatus->subSensorStatus[subid].isActive = 0;
 8001304:	f883 2024 	strbne.w	r2, [r3, #36]	; 0x24
 8001308:	e7a0      	b.n	800124c <parse_Status_from_JSON+0x180>
 800130a:	bf00      	nop
 800130c:	0801be4c 	.word	0x0801be4c
 8001310:	0801be88 	.word	0x0801be88
 8001314:	0801be9c 	.word	0x0801be9c
 8001318:	0801beb0 	.word	0x0801beb0
 800131c:	0801be78 	.word	0x0801be78
 8001320:	0801be6c 	.word	0x0801be6c
 8001324:	0801bec4 	.word	0x0801bec4
 8001328:	20000000 	.word	0x20000000
 800132c:	0801c230 	.word	0x0801c230
 8001330:	0801bed4 	.word	0x0801bed4
 8001334:	0801bed8 	.word	0x0801bed8

08001338 <create_JSON_Sensor>:
{
 8001338:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800133c:	4681      	mov	r9, r0
 800133e:	b083      	sub	sp, #12
  JSON_Object *JSON_Sensor = json_value_get_object(tempJSON);
 8001340:	4608      	mov	r0, r1
  uint8_t nSensor = sensor->sensorDescriptor.id;
 8001342:	f899 4000 	ldrb.w	r4, [r9]
  uint8_t nSubSensors = sensor->sensorDescriptor.nSubSensors; 
 8001346:	f899 a058 	ldrb.w	sl, [r9, #88]	; 0x58
  JSON_Object *JSON_Sensor = json_value_get_object(tempJSON);
 800134a:	f015 f80b 	bl	8016364 <json_value_get_object>
 800134e:	4680      	mov	r8, r0
  json_object_dotset_number(JSON_Sensor, "id", nSensor);
 8001350:	4620      	mov	r0, r4
 8001352:	f7ff f8ff 	bl	8000554 <__aeabi_ui2d>
 8001356:	ec41 0b10 	vmov	d0, r0, r1
 800135a:	494c      	ldr	r1, [pc, #304]	; (800148c <create_JSON_Sensor+0x154>)
 800135c:	4640      	mov	r0, r8
 800135e:	f015 feb9 	bl	80170d4 <json_object_dotset_number>
  JSON_Value *DescriptorJSON = json_value_init_object();
 8001362:	f015 fb67 	bl	8016a34 <json_value_init_object>
  json_object_set_value(JSON_Sensor, "sensorDescriptor", DescriptorJSON);
 8001366:	494a      	ldr	r1, [pc, #296]	; (8001490 <create_JSON_Sensor+0x158>)
 8001368:	4602      	mov	r2, r0
  JSON_Value *DescriptorJSON = json_value_init_object();
 800136a:	4604      	mov	r4, r0
  json_object_set_value(JSON_Sensor, "sensorDescriptor", DescriptorJSON);
 800136c:	4640      	mov	r0, r8
 800136e:	f015 fd69 	bl	8016e44 <json_object_set_value>
  create_JSON_SensorDescriptor(&sensor->sensorDescriptor, DescriptorJSON); 
 8001372:	4621      	mov	r1, r4
 8001374:	4648      	mov	r0, r9
 8001376:	f7ff fd85 	bl	8000e84 <create_JSON_SensorDescriptor>
  json_object_dotset_value(JSON_Sensor, "sensorDescriptor.subSensorDescriptor", json_value_init_array());
 800137a:	f015 fb7b 	bl	8016a74 <json_value_init_array>
 800137e:	4945      	ldr	r1, [pc, #276]	; (8001494 <create_JSON_Sensor+0x15c>)
 8001380:	4602      	mov	r2, r0
 8001382:	4640      	mov	r0, r8
 8001384:	f015 fdc4 	bl	8016f10 <json_object_dotset_value>
  JSON_SensorArray1 = json_object_dotget_array(JSON_Sensor, "sensorDescriptor.subSensorDescriptor"); 
 8001388:	4942      	ldr	r1, [pc, #264]	; (8001494 <create_JSON_Sensor+0x15c>)
 800138a:	4640      	mov	r0, r8
 800138c:	f014 ffb8 	bl	8016300 <json_object_dotget_array>
  for (ii = 0; ii < nSubSensors; ii++)
 8001390:	f1ba 0f00 	cmp.w	sl, #0
 8001394:	d05f      	beq.n	8001456 <create_JSON_Sensor+0x11e>
 8001396:	f109 055c 	add.w	r5, r9, #92	; 0x5c
 800139a:	2754      	movs	r7, #84	; 0x54
 800139c:	4606      	mov	r6, r0
 800139e:	fb17 570a 	smlabb	r7, r7, sl, r5
 80013a2:	464c      	mov	r4, r9
    tempJSON1 = json_value_init_object();  
 80013a4:	f015 fb46 	bl	8016a34 <json_value_init_object>
 80013a8:	4601      	mov	r1, r0
    create_JSON_SubSensorDescriptor(&sensor->sensorDescriptor.subSensorDescriptor[ii], tempJSON1);  
 80013aa:	9001      	str	r0, [sp, #4]
 80013ac:	4628      	mov	r0, r5
 80013ae:	f7ff fcc9 	bl	8000d44 <create_JSON_SubSensorDescriptor>
    json_array_append_value(JSON_SensorArray1,tempJSON1);
 80013b2:	3554      	adds	r5, #84	; 0x54
 80013b4:	9901      	ldr	r1, [sp, #4]
 80013b6:	4630      	mov	r0, r6
 80013b8:	f015 fca2 	bl	8016d00 <json_array_append_value>
  for (ii = 0; ii < nSubSensors; ii++)
 80013bc:	42bd      	cmp	r5, r7
 80013be:	d1f1      	bne.n	80013a4 <create_JSON_Sensor+0x6c>
  JSON_Value *statusJSON = json_value_init_object();
 80013c0:	f015 fb38 	bl	8016a34 <json_value_init_object>
  json_object_set_value(JSON_Sensor, "sensorStatus", statusJSON);
 80013c4:	4934      	ldr	r1, [pc, #208]	; (8001498 <create_JSON_Sensor+0x160>)

static void create_JSON_SubSensorStatus(COM_SubSensorStatus_t *sub_sensor_status, JSON_Value *tempJSON)
{
  JSON_Object *JSON_SubSensorStatus = json_value_get_object(tempJSON);
  
  json_object_dotset_number(JSON_SubSensorStatus, "fs", sub_sensor_status->FS);
 80013c6:	f8df b0dc 	ldr.w	fp, [pc, #220]	; 80014a4 <create_JSON_Sensor+0x16c>
  json_object_dotset_number(JSON_SubSensorStatus, "sensitivity", sub_sensor_status->sensitivity);
 80013ca:	4f34      	ldr	r7, [pc, #208]	; (800149c <create_JSON_Sensor+0x164>)
  json_object_set_value(JSON_Sensor, "sensorStatus", statusJSON);
 80013cc:	4602      	mov	r2, r0
  JSON_Value *statusJSON = json_value_init_object();
 80013ce:	4605      	mov	r5, r0
  json_object_set_value(JSON_Sensor, "sensorStatus", statusJSON);
 80013d0:	4640      	mov	r0, r8
 80013d2:	f015 fd37 	bl	8016e44 <json_object_set_value>
  create_JSON_SensorStatus(&sensor->sensorStatus, statusJSON); 
 80013d6:	4629      	mov	r1, r5
 80013d8:	f509 70d6 	add.w	r0, r9, #428	; 0x1ac
 80013dc:	f7ff fe18 	bl	8001010 <create_JSON_SensorStatus>
  json_object_dotset_value(JSON_Sensor, "sensorStatus.subSensorStatus", json_value_init_array());
 80013e0:	f015 fb48 	bl	8016a74 <json_value_init_array>
 80013e4:	492e      	ldr	r1, [pc, #184]	; (80014a0 <create_JSON_Sensor+0x168>)
 80013e6:	4602      	mov	r2, r0
 80013e8:	4640      	mov	r0, r8
 80013ea:	f015 fd91 	bl	8016f10 <json_object_dotset_value>
  JSON_SensorArray2= json_object_dotget_array(JSON_Sensor, "sensorStatus.subSensorStatus"); 
 80013ee:	4640      	mov	r0, r8
 80013f0:	492b      	ldr	r1, [pc, #172]	; (80014a0 <create_JSON_Sensor+0x168>)
  json_object_dotset_boolean(JSON_SubSensorStatus, "isActive", sub_sensor_status->isActive);
 80013f2:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 80014a8 <create_JSON_Sensor+0x170>
  JSON_SensorArray2= json_object_dotget_array(JSON_Sensor, "sensorStatus.subSensorStatus"); 
 80013f6:	f014 ff83 	bl	8016300 <json_object_dotget_array>
 80013fa:	230c      	movs	r3, #12
 80013fc:	4606      	mov	r6, r0
  for (ii = 0; ii < nSubSensors; ii++)
 80013fe:	fb13 990a 	smlabb	r9, r3, sl, r9
    tempJSON2 = json_value_init_object();  
 8001402:	f015 fb17 	bl	8016a34 <json_value_init_object>
 8001406:	4682      	mov	sl, r0
  JSON_Object *JSON_SubSensorStatus = json_value_get_object(tempJSON);
 8001408:	f014 ffac 	bl	8016364 <json_value_get_object>
 800140c:	4605      	mov	r5, r0
  json_object_dotset_number(JSON_SubSensorStatus, "fs", sub_sensor_status->FS);
 800140e:	f8d4 01c8 	ldr.w	r0, [r4, #456]	; 0x1c8
 8001412:	f7ff f8c1 	bl	8000598 <__aeabi_f2d>
 8001416:	ec41 0b10 	vmov	d0, r0, r1
 800141a:	4659      	mov	r1, fp
 800141c:	4628      	mov	r0, r5
 800141e:	f015 fe59 	bl	80170d4 <json_object_dotset_number>
  json_object_dotset_number(JSON_SubSensorStatus, "sensitivity", sub_sensor_status->sensitivity);
 8001422:	f8d4 01cc 	ldr.w	r0, [r4, #460]	; 0x1cc
 8001426:	f7ff f8b7 	bl	8000598 <__aeabi_f2d>
 800142a:	ec41 0b10 	vmov	d0, r0, r1
 800142e:	4639      	mov	r1, r7
 8001430:	4628      	mov	r0, r5
 8001432:	f015 fe4f 	bl	80170d4 <json_object_dotset_number>
  json_object_dotset_boolean(JSON_SubSensorStatus, "isActive", sub_sensor_status->isActive);
 8001436:	f894 21d0 	ldrb.w	r2, [r4, #464]	; 0x1d0
 800143a:	4641      	mov	r1, r8
 800143c:	4628      	mov	r0, r5
 800143e:	f015 fe91 	bl	8017164 <json_object_dotset_boolean>
    json_array_append_value(JSON_SensorArray2,tempJSON2);
 8001442:	340c      	adds	r4, #12
 8001444:	4651      	mov	r1, sl
 8001446:	4630      	mov	r0, r6
 8001448:	f015 fc5a 	bl	8016d00 <json_array_append_value>
  for (ii = 0; ii < nSubSensors; ii++)
 800144c:	45a1      	cmp	r9, r4
 800144e:	d1d8      	bne.n	8001402 <create_JSON_Sensor+0xca>
}
 8001450:	b003      	add	sp, #12
 8001452:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  JSON_Value *statusJSON = json_value_init_object();
 8001456:	f015 faed 	bl	8016a34 <json_value_init_object>
  json_object_set_value(JSON_Sensor, "sensorStatus", statusJSON);
 800145a:	490f      	ldr	r1, [pc, #60]	; (8001498 <create_JSON_Sensor+0x160>)
 800145c:	4602      	mov	r2, r0
  JSON_Value *statusJSON = json_value_init_object();
 800145e:	4604      	mov	r4, r0
  json_object_set_value(JSON_Sensor, "sensorStatus", statusJSON);
 8001460:	4640      	mov	r0, r8
 8001462:	f015 fcef 	bl	8016e44 <json_object_set_value>
  create_JSON_SensorStatus(&sensor->sensorStatus, statusJSON); 
 8001466:	4621      	mov	r1, r4
 8001468:	f509 70d6 	add.w	r0, r9, #428	; 0x1ac
 800146c:	f7ff fdd0 	bl	8001010 <create_JSON_SensorStatus>
  json_object_dotset_value(JSON_Sensor, "sensorStatus.subSensorStatus", json_value_init_array());
 8001470:	f015 fb00 	bl	8016a74 <json_value_init_array>
 8001474:	490a      	ldr	r1, [pc, #40]	; (80014a0 <create_JSON_Sensor+0x168>)
 8001476:	4602      	mov	r2, r0
 8001478:	4640      	mov	r0, r8
 800147a:	f015 fd49 	bl	8016f10 <json_object_dotset_value>
  JSON_SensorArray2= json_object_dotget_array(JSON_Sensor, "sensorStatus.subSensorStatus"); 
 800147e:	4908      	ldr	r1, [pc, #32]	; (80014a0 <create_JSON_Sensor+0x168>)
 8001480:	4640      	mov	r0, r8
}
 8001482:	b003      	add	sp, #12
 8001484:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  JSON_SensorArray2= json_object_dotget_array(JSON_Sensor, "sensorStatus.subSensorStatus"); 
 8001488:	f014 bf3a 	b.w	8016300 <json_object_dotget_array>
 800148c:	0801c230 	.word	0x0801c230
 8001490:	0801bee4 	.word	0x0801bee4
 8001494:	0801bef8 	.word	0x0801bef8
 8001498:	0801bf20 	.word	0x0801bf20
 800149c:	0801bed8 	.word	0x0801bed8
 80014a0:	0801bf30 	.word	0x0801bf30
 80014a4:	0801bed4 	.word	0x0801bed4
 80014a8:	0801be6c 	.word	0x0801be6c

080014ac <HSD_JSON_set_allocation_functions>:
{
 80014ac:	b510      	push	{r4, lr}
 80014ae:	460c      	mov	r4, r1
  json_set_allocation_functions(malloc_function, free_function);
 80014b0:	f015 fe82 	bl	80171b8 <json_set_allocation_functions>
  JSON_free_function = free_function;
 80014b4:	4b01      	ldr	r3, [pc, #4]	; (80014bc <HSD_JSON_set_allocation_functions+0x10>)
}
 80014b6:	2000      	movs	r0, #0
  JSON_free_function = free_function;
 80014b8:	601c      	str	r4, [r3, #0]
}
 80014ba:	bd10      	pop	{r4, pc}
 80014bc:	2000055c 	.word	0x2000055c

080014c0 <HSD_JSON_free>:
{
 80014c0:	b508      	push	{r3, lr}
  JSON_free_function(mem);
 80014c2:	4b02      	ldr	r3, [pc, #8]	; (80014cc <HSD_JSON_free+0xc>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	4798      	blx	r3
}
 80014c8:	2000      	movs	r0, #0
 80014ca:	bd08      	pop	{r3, pc}
 80014cc:	2000055c 	.word	0x2000055c

080014d0 <HSD_JSON_serialize_Device>:
{
 80014d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80014d4:	b082      	sub	sp, #8
 80014d6:	4604      	mov	r4, r0
 80014d8:	460f      	mov	r7, r1
 80014da:	4690      	mov	r8, r2
  tempJSON = json_value_init_object();
 80014dc:	f015 faaa 	bl	8016a34 <json_value_init_object>
 80014e0:	4606      	mov	r6, r0
  JSON_Device = json_value_get_object(tempJSON);
 80014e2:	f014 ff3f 	bl	8016364 <json_value_get_object>
  json_object_dotset_string(JSON_Device, "device.deviceInfo.serialNumber", device->deviceDescriptor.serialNumber);
 80014e6:	492b      	ldr	r1, [pc, #172]	; (8001594 <HSD_JSON_serialize_Device+0xc4>)
  JSON_Device = json_value_get_object(tempJSON);
 80014e8:	4605      	mov	r5, r0
  json_object_dotset_string(JSON_Device, "device.deviceInfo.serialNumber", device->deviceDescriptor.serialNumber);
 80014ea:	4622      	mov	r2, r4
 80014ec:	f015 fdd6 	bl	801709c <json_object_dotset_string>
  json_object_dotset_string(JSON_Device, "device.deviceInfo.alias", device->deviceDescriptor.alias);
 80014f0:	f104 0215 	add.w	r2, r4, #21
 80014f4:	4928      	ldr	r1, [pc, #160]	; (8001598 <HSD_JSON_serialize_Device+0xc8>)
 80014f6:	4628      	mov	r0, r5
 80014f8:	f015 fdd0 	bl	801709c <json_object_dotset_string>
  json_object_dotset_number(JSON_Device, "device.deviceInfo.nSensor", device->deviceDescriptor.nSensor);
 80014fc:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80014fe:	f7ff f829 	bl	8000554 <__aeabi_ui2d>
 8001502:	ec41 0b10 	vmov	d0, r0, r1
 8001506:	4925      	ldr	r1, [pc, #148]	; (800159c <HSD_JSON_serialize_Device+0xcc>)
 8001508:	4628      	mov	r0, r5
 800150a:	f015 fde3 	bl	80170d4 <json_object_dotset_number>
  json_object_dotset_value(JSON_Device, "device.sensor", json_value_init_array());
 800150e:	f015 fab1 	bl	8016a74 <json_value_init_array>
 8001512:	4923      	ldr	r1, [pc, #140]	; (80015a0 <HSD_JSON_serialize_Device+0xd0>)
 8001514:	4602      	mov	r2, r0
 8001516:	4628      	mov	r0, r5
 8001518:	f015 fcfa 	bl	8016f10 <json_object_dotset_value>
  JSON_SensorArray = json_object_dotget_array(JSON_Device, "device.sensor");
 800151c:	4920      	ldr	r1, [pc, #128]	; (80015a0 <HSD_JSON_serialize_Device+0xd0>)
 800151e:	4628      	mov	r0, r5
 8001520:	f014 feee 	bl	8016300 <json_object_dotget_array>
  for(i = 0; i < device->deviceDescriptor.nSensor; i++)
 8001524:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001526:	b1ab      	cbz	r3, 8001554 <HSD_JSON_serialize_Device+0x84>
 8001528:	4605      	mov	r5, r0
 800152a:	f104 0928 	add.w	r9, r4, #40	; 0x28
 800152e:	f04f 0a00 	mov.w	sl, #0
    tempJSON1 = json_value_init_object();  
 8001532:	f015 fa7f 	bl	8016a34 <json_value_init_object>
 8001536:	4601      	mov	r1, r0
    create_JSON_Sensor(device->sensors[i], tempJSON1);    
 8001538:	9001      	str	r0, [sp, #4]
 800153a:	f859 0f04 	ldr.w	r0, [r9, #4]!
 800153e:	f7ff fefb 	bl	8001338 <create_JSON_Sensor>
    json_array_append_value(JSON_SensorArray,tempJSON1);
 8001542:	9901      	ldr	r1, [sp, #4]
 8001544:	4628      	mov	r0, r5
 8001546:	f015 fbdb 	bl	8016d00 <json_array_append_value>
  for(i = 0; i < device->deviceDescriptor.nSensor; i++)
 800154a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800154c:	f10a 0a01 	add.w	sl, sl, #1
 8001550:	459a      	cmp	sl, r3
 8001552:	d3ee      	bcc.n	8001532 <HSD_JSON_serialize_Device+0x62>
  if (pretty == 1)
 8001554:	f1b8 0f01 	cmp.w	r8, #1
    *serialized_string = json_serialize_to_string_pretty(tempJSON);
 8001558:	4630      	mov	r0, r6
  if (pretty == 1)
 800155a:	d00d      	beq.n	8001578 <HSD_JSON_serialize_Device+0xa8>
    *serialized_string = json_serialize_to_string(tempJSON);
 800155c:	f015 fb62 	bl	8016c24 <json_serialize_to_string>
 8001560:	6038      	str	r0, [r7, #0]
    size = json_serialization_size(tempJSON);    
 8001562:	4630      	mov	r0, r6
 8001564:	f015 fb50 	bl	8016c08 <json_serialization_size>
 8001568:	4604      	mov	r4, r0
  json_value_free(tempJSON);
 800156a:	4630      	mov	r0, r6
 800156c:	f014 ff0a 	bl	8016384 <json_value_free>
}
 8001570:	4620      	mov	r0, r4
 8001572:	b002      	add	sp, #8
 8001574:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    *serialized_string = json_serialize_to_string_pretty(tempJSON);
 8001578:	f015 fb92 	bl	8016ca0 <json_serialize_to_string_pretty>
 800157c:	6038      	str	r0, [r7, #0]
    size = json_serialization_size_pretty(tempJSON);    
 800157e:	4630      	mov	r0, r6
 8001580:	f015 fb80 	bl	8016c84 <json_serialization_size_pretty>
 8001584:	4604      	mov	r4, r0
  json_value_free(tempJSON);
 8001586:	4630      	mov	r0, r6
 8001588:	f014 fefc 	bl	8016384 <json_value_free>
}
 800158c:	4620      	mov	r0, r4
 800158e:	b002      	add	sp, #8
 8001590:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001594:	0801bf50 	.word	0x0801bf50
 8001598:	0801bf70 	.word	0x0801bf70
 800159c:	0801bf88 	.word	0x0801bf88
 80015a0:	0801bfa4 	.word	0x0801bfa4

080015a4 <HSD_JSON_serialize_DeviceInfo>:
{
 80015a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80015a6:	4605      	mov	r5, r0
 80015a8:	460f      	mov	r7, r1
  JSON_Value *tempJSON = json_value_init_object();
 80015aa:	f015 fa43 	bl	8016a34 <json_value_init_object>
 80015ae:	4604      	mov	r4, r0
  JSON_Object *JSON_DeviceHandler = json_value_get_object(tempJSON);
 80015b0:	f014 fed8 	bl	8016364 <json_value_get_object>
  json_object_dotset_string(JSON_DeviceHandler, "serialNumber", device_descriptor->serialNumber);
 80015b4:	462a      	mov	r2, r5
  JSON_Object *JSON_DeviceHandler = json_value_get_object(tempJSON);
 80015b6:	4606      	mov	r6, r0
  json_object_dotset_string(JSON_DeviceHandler, "serialNumber", device_descriptor->serialNumber);
 80015b8:	490f      	ldr	r1, [pc, #60]	; (80015f8 <HSD_JSON_serialize_DeviceInfo+0x54>)
 80015ba:	f015 fd6f 	bl	801709c <json_object_dotset_string>
  json_object_dotset_string(JSON_DeviceHandler, "alias", device_descriptor->alias);
 80015be:	f105 0215 	add.w	r2, r5, #21
 80015c2:	490e      	ldr	r1, [pc, #56]	; (80015fc <HSD_JSON_serialize_DeviceInfo+0x58>)
 80015c4:	4630      	mov	r0, r6
 80015c6:	f015 fd69 	bl	801709c <json_object_dotset_string>
  json_object_dotset_number(JSON_DeviceHandler, "nSensor", device_descriptor->nSensor);
 80015ca:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 80015cc:	f7fe ffc2 	bl	8000554 <__aeabi_ui2d>
 80015d0:	ec41 0b10 	vmov	d0, r0, r1
 80015d4:	490a      	ldr	r1, [pc, #40]	; (8001600 <HSD_JSON_serialize_DeviceInfo+0x5c>)
 80015d6:	4630      	mov	r0, r6
 80015d8:	f015 fd7c 	bl	80170d4 <json_object_dotset_number>
  *serialized_string = json_serialize_to_string(tempJSON);
 80015dc:	4620      	mov	r0, r4
 80015de:	f015 fb21 	bl	8016c24 <json_serialize_to_string>
 80015e2:	6038      	str	r0, [r7, #0]
  size = json_serialization_size(tempJSON); 
 80015e4:	4620      	mov	r0, r4
 80015e6:	f015 fb0f 	bl	8016c08 <json_serialization_size>
 80015ea:	4605      	mov	r5, r0
  json_value_free(tempJSON); 
 80015ec:	4620      	mov	r0, r4
 80015ee:	f014 fec9 	bl	8016384 <json_value_free>
}
 80015f2:	4628      	mov	r0, r5
 80015f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80015f6:	bf00      	nop
 80015f8:	0801bfb4 	.word	0x0801bfb4
 80015fc:	0801bfc4 	.word	0x0801bfc4
 8001600:	0801bfcc 	.word	0x0801bfcc

08001604 <HSD_JSON_serialize_SensorDescriptor>:
{
 8001604:	b570      	push	{r4, r5, r6, lr}
 8001606:	460d      	mov	r5, r1
 8001608:	4606      	mov	r6, r0
  JSON_Value *tempJSON = json_value_init_object();
 800160a:	f015 fa13 	bl	8016a34 <json_value_init_object>
 800160e:	4604      	mov	r4, r0
  create_JSON_SensorDescriptor(sensor_descriptor, tempJSON);
 8001610:	4621      	mov	r1, r4
 8001612:	4630      	mov	r0, r6
 8001614:	f7ff fc36 	bl	8000e84 <create_JSON_SensorDescriptor>
  *serialized_string = json_serialize_to_string(tempJSON);
 8001618:	4620      	mov	r0, r4
 800161a:	f015 fb03 	bl	8016c24 <json_serialize_to_string>
 800161e:	6028      	str	r0, [r5, #0]
  size = json_serialization_size(tempJSON); 
 8001620:	4620      	mov	r0, r4
 8001622:	f015 faf1 	bl	8016c08 <json_serialization_size>
 8001626:	4605      	mov	r5, r0
  json_value_free(tempJSON); 
 8001628:	4620      	mov	r0, r4
 800162a:	f014 feab 	bl	8016384 <json_value_free>
}
 800162e:	4628      	mov	r0, r5
 8001630:	bd70      	pop	{r4, r5, r6, pc}
 8001632:	bf00      	nop

08001634 <HSD_JSON_serialize_SensorStatus>:
{
 8001634:	b570      	push	{r4, r5, r6, lr}
 8001636:	460d      	mov	r5, r1
 8001638:	4606      	mov	r6, r0
  JSON_Value *tempJSON = json_value_init_object();
 800163a:	f015 f9fb 	bl	8016a34 <json_value_init_object>
 800163e:	4604      	mov	r4, r0
  create_JSON_SensorStatus(sensor_status, tempJSON);
 8001640:	4621      	mov	r1, r4
 8001642:	4630      	mov	r0, r6
 8001644:	f7ff fce4 	bl	8001010 <create_JSON_SensorStatus>
  *serialized_string = json_serialize_to_string(tempJSON);
 8001648:	4620      	mov	r0, r4
 800164a:	f015 faeb 	bl	8016c24 <json_serialize_to_string>
 800164e:	6028      	str	r0, [r5, #0]
  size = json_serialization_size(tempJSON); 
 8001650:	4620      	mov	r0, r4
 8001652:	f015 fad9 	bl	8016c08 <json_serialization_size>
 8001656:	4605      	mov	r5, r0
  json_value_free(tempJSON); 
 8001658:	4620      	mov	r0, r4
 800165a:	f014 fe93 	bl	8016384 <json_value_free>
}
 800165e:	4628      	mov	r0, r5
 8001660:	bd70      	pop	{r4, r5, r6, pc}
 8001662:	bf00      	nop

08001664 <HSD_JSON_serialize_SubSensorDescriptor>:
{
 8001664:	b570      	push	{r4, r5, r6, lr}
 8001666:	460d      	mov	r5, r1
 8001668:	4606      	mov	r6, r0
  JSON_Value *tempJSON = json_value_init_object();
 800166a:	f015 f9e3 	bl	8016a34 <json_value_init_object>
 800166e:	4604      	mov	r4, r0
  create_JSON_SubSensorDescriptor(sub_sensor_descriptor, tempJSON);
 8001670:	4621      	mov	r1, r4
 8001672:	4630      	mov	r0, r6
 8001674:	f7ff fb66 	bl	8000d44 <create_JSON_SubSensorDescriptor>
  *serialized_string = json_serialize_to_string(tempJSON);
 8001678:	4620      	mov	r0, r4
 800167a:	f015 fad3 	bl	8016c24 <json_serialize_to_string>
 800167e:	6028      	str	r0, [r5, #0]
  size = json_serialization_size(tempJSON); 
 8001680:	4620      	mov	r0, r4
 8001682:	f015 fac1 	bl	8016c08 <json_serialization_size>
 8001686:	4605      	mov	r5, r0
  json_value_free(tempJSON); 
 8001688:	4620      	mov	r0, r4
 800168a:	f014 fe7b 	bl	8016384 <json_value_free>
}
 800168e:	4628      	mov	r0, r5
 8001690:	bd70      	pop	{r4, r5, r6, pc}
 8001692:	bf00      	nop

08001694 <HSD_JSON_serialize_SubSensorStatus>:
{
 8001694:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001696:	4606      	mov	r6, r0
 8001698:	460f      	mov	r7, r1
  JSON_Value *tempJSON = json_value_init_object();
 800169a:	f015 f9cb 	bl	8016a34 <json_value_init_object>
 800169e:	4604      	mov	r4, r0
  JSON_Object *JSON_SubSensorStatus = json_value_get_object(tempJSON);
 80016a0:	f014 fe60 	bl	8016364 <json_value_get_object>
 80016a4:	4605      	mov	r5, r0
  json_object_dotset_number(JSON_SubSensorStatus, "fs", sub_sensor_status->FS);
 80016a6:	6830      	ldr	r0, [r6, #0]
 80016a8:	f7fe ff76 	bl	8000598 <__aeabi_f2d>
 80016ac:	ec41 0b10 	vmov	d0, r0, r1
 80016b0:	490f      	ldr	r1, [pc, #60]	; (80016f0 <HSD_JSON_serialize_SubSensorStatus+0x5c>)
 80016b2:	4628      	mov	r0, r5
 80016b4:	f015 fd0e 	bl	80170d4 <json_object_dotset_number>
  json_object_dotset_number(JSON_SubSensorStatus, "sensitivity", sub_sensor_status->sensitivity);
 80016b8:	6870      	ldr	r0, [r6, #4]
 80016ba:	f7fe ff6d 	bl	8000598 <__aeabi_f2d>
 80016be:	ec41 0b10 	vmov	d0, r0, r1
 80016c2:	490c      	ldr	r1, [pc, #48]	; (80016f4 <HSD_JSON_serialize_SubSensorStatus+0x60>)
 80016c4:	4628      	mov	r0, r5
 80016c6:	f015 fd05 	bl	80170d4 <json_object_dotset_number>
  json_object_dotset_boolean(JSON_SubSensorStatus, "isActive", sub_sensor_status->isActive);
 80016ca:	7a32      	ldrb	r2, [r6, #8]
 80016cc:	490a      	ldr	r1, [pc, #40]	; (80016f8 <HSD_JSON_serialize_SubSensorStatus+0x64>)
 80016ce:	4628      	mov	r0, r5
 80016d0:	f015 fd48 	bl	8017164 <json_object_dotset_boolean>
  *serialized_string = json_serialize_to_string(tempJSON);
 80016d4:	4620      	mov	r0, r4
 80016d6:	f015 faa5 	bl	8016c24 <json_serialize_to_string>
 80016da:	6038      	str	r0, [r7, #0]
  size = json_serialization_size(tempJSON); 
 80016dc:	4620      	mov	r0, r4
 80016de:	f015 fa93 	bl	8016c08 <json_serialization_size>
 80016e2:	4605      	mov	r5, r0
  json_value_free(tempJSON); 
 80016e4:	4620      	mov	r0, r4
 80016e6:	f014 fe4d 	bl	8016384 <json_value_free>
}
 80016ea:	4628      	mov	r0, r5
 80016ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80016ee:	bf00      	nop
 80016f0:	0801bed4 	.word	0x0801bed4
 80016f4:	0801bed8 	.word	0x0801bed8
 80016f8:	0801be6c 	.word	0x0801be6c

080016fc <HSD_JSON_parse_Device>:
{
 80016fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001700:	468a      	mov	sl, r1
  JSON_Value *tempJSON = json_parse_string(SerializedJSON);
 8001702:	f015 f97f 	bl	8016a04 <json_parse_string>
 8001706:	4605      	mov	r5, r0
  JSON_Object *JSON_ParseHandler = json_value_get_object(tempJSON);
 8001708:	f014 fe2c 	bl	8016364 <json_value_get_object>
  if (json_object_dothas_value(JSON_ParseHandler,"device.sensor"))
 800170c:	491a      	ldr	r1, [pc, #104]	; (8001778 <HSD_JSON_parse_Device+0x7c>)
  JSON_Object *JSON_ParseHandler = json_value_get_object(tempJSON);
 800170e:	4604      	mov	r4, r0
  if (json_object_dothas_value(JSON_ParseHandler,"device.sensor"))
 8001710:	f014 fe0c 	bl	801632c <json_object_dothas_value>
 8001714:	b928      	cbnz	r0, 8001722 <HSD_JSON_parse_Device+0x26>
  json_value_free(tempJSON);
 8001716:	4628      	mov	r0, r5
 8001718:	f014 fe34 	bl	8016384 <json_value_free>
}
 800171c:	2000      	movs	r0, #0
 800171e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    JSON_subSensorParser = json_object_dotget_array(JSON_ParseHandler, "device.sensor");    
 8001722:	4915      	ldr	r1, [pc, #84]	; (8001778 <HSD_JSON_parse_Device+0x7c>)
 8001724:	4620      	mov	r0, r4
 8001726:	f014 fdeb 	bl	8016300 <json_object_dotget_array>
 800172a:	4681      	mov	r9, r0
    size = (uint32_t)json_array_get_count(JSON_subSensorParser);
 800172c:	f014 fe16 	bl	801635c <json_array_get_count>
    for (ii = 0; ii < size; ii++)
 8001730:	4607      	mov	r7, r0
 8001732:	2800      	cmp	r0, #0
 8001734:	d0ef      	beq.n	8001716 <HSD_JSON_parse_Device+0x1a>
      if (json_object_dothas_value(JSON_subSensorObj,"sensorStatus"))
 8001736:	f8df 8044 	ldr.w	r8, [pc, #68]	; 800177c <HSD_JSON_parse_Device+0x80>
        parse_Status_from_JSON(StatusText, &Device->sensors[ii]->sensorStatus);
 800173a:	f10a 0a2c 	add.w	sl, sl, #44	; 0x2c
    for (ii = 0; ii < size; ii++)
 800173e:	2400      	movs	r4, #0
 8001740:	e002      	b.n	8001748 <HSD_JSON_parse_Device+0x4c>
 8001742:	3401      	adds	r4, #1
 8001744:	42a7      	cmp	r7, r4
 8001746:	d0e6      	beq.n	8001716 <HSD_JSON_parse_Device+0x1a>
      JSON_subSensorObj = json_array_get_object(JSON_subSensorParser,ii);
 8001748:	4621      	mov	r1, r4
 800174a:	4648      	mov	r0, r9
 800174c:	f014 fdf6 	bl	801633c <json_array_get_object>
      if (json_object_dothas_value(JSON_subSensorObj,"sensorStatus"))
 8001750:	4641      	mov	r1, r8
      JSON_subSensorObj = json_array_get_object(JSON_subSensorParser,ii);
 8001752:	4606      	mov	r6, r0
      if (json_object_dothas_value(JSON_subSensorObj,"sensorStatus"))
 8001754:	f014 fdea 	bl	801632c <json_object_dothas_value>
 8001758:	2800      	cmp	r0, #0
 800175a:	d0f2      	beq.n	8001742 <HSD_JSON_parse_Device+0x46>
        StatusText = json_serialize_to_string(json_object_get_value(JSON_subSensorObj,"sensorStatus"));
 800175c:	4641      	mov	r1, r8
 800175e:	4630      	mov	r0, r6
 8001760:	f014 fd1c 	bl	801619c <json_object_get_value>
 8001764:	f015 fa5e 	bl	8016c24 <json_serialize_to_string>
        parse_Status_from_JSON(StatusText, &Device->sensors[ii]->sensorStatus);
 8001768:	f85a 1024 	ldr.w	r1, [sl, r4, lsl #2]
 800176c:	f501 71d6 	add.w	r1, r1, #428	; 0x1ac
 8001770:	f7ff fcac 	bl	80010cc <parse_Status_from_JSON>
 8001774:	e7e5      	b.n	8001742 <HSD_JSON_parse_Device+0x46>
 8001776:	bf00      	nop
 8001778:	0801bfa4 	.word	0x0801bfa4
 800177c:	0801bf20 	.word	0x0801bf20

08001780 <HSD_JSON_parse_Command>:
{ 
 8001780:	b570      	push	{r4, r5, r6, lr}
 8001782:	460d      	mov	r5, r1
  JSON_Value *tempJSON = json_parse_string(SerializedJSON);
 8001784:	f015 f93e 	bl	8016a04 <json_parse_string>
 8001788:	4606      	mov	r6, r0
  JSON_Object *JSON_ParseHandler = json_value_get_object(tempJSON);
 800178a:	f014 fdeb 	bl	8016364 <json_value_get_object>
  if (json_object_dothas_value(JSON_ParseHandler,"command"))
 800178e:	4951      	ldr	r1, [pc, #324]	; (80018d4 <HSD_JSON_parse_Command+0x154>)
  JSON_Object *JSON_ParseHandler = json_value_get_object(tempJSON);
 8001790:	4604      	mov	r4, r0
  if (json_object_dothas_value(JSON_ParseHandler,"command"))
 8001792:	f014 fdcb 	bl	801632c <json_object_dothas_value>
 8001796:	2800      	cmp	r0, #0
 8001798:	f000 8088 	beq.w	80018ac <HSD_JSON_parse_Command+0x12c>
    if (strcmp(json_object_dotget_string(JSON_ParseHandler,"command"),"GET") == 0)
 800179c:	494d      	ldr	r1, [pc, #308]	; (80018d4 <HSD_JSON_parse_Command+0x154>)
 800179e:	4620      	mov	r0, r4
 80017a0:	f014 fd90 	bl	80162c4 <json_object_dotget_string>
 80017a4:	494c      	ldr	r1, [pc, #304]	; (80018d8 <HSD_JSON_parse_Command+0x158>)
 80017a6:	f7fe fd2b 	bl	8000200 <strcmp>
 80017aa:	b9e0      	cbnz	r0, 80017e6 <HSD_JSON_parse_Command+0x66>
      outCommand->command = COM_COMMAND_GET;
 80017ac:	2301      	movs	r3, #1
 80017ae:	702b      	strb	r3, [r5, #0]
  if (json_object_dothas_value(JSON_ParseHandler,"request"))
 80017b0:	494a      	ldr	r1, [pc, #296]	; (80018dc <HSD_JSON_parse_Command+0x15c>)
 80017b2:	4620      	mov	r0, r4
 80017b4:	f014 fdba 	bl	801632c <json_object_dothas_value>
 80017b8:	bb20      	cbnz	r0, 8001804 <HSD_JSON_parse_Command+0x84>
      outCommand->request = COM_COMMAND_ERROR;
 80017ba:	23ff      	movs	r3, #255	; 0xff
 80017bc:	706b      	strb	r3, [r5, #1]
  if (json_object_dothas_value(JSON_ParseHandler,"sensorId"))
 80017be:	4948      	ldr	r1, [pc, #288]	; (80018e0 <HSD_JSON_parse_Command+0x160>)
 80017c0:	4620      	mov	r0, r4
 80017c2:	f014 fdb3 	bl	801632c <json_object_dothas_value>
 80017c6:	bb60      	cbnz	r0, 8001822 <HSD_JSON_parse_Command+0xa2>
    outCommand->sensorId = COM_COMMAND_ERROR;
 80017c8:	23ff      	movs	r3, #255	; 0xff
  if (json_object_dothas_value(JSON_ParseHandler,"subSensorId"))
 80017ca:	4946      	ldr	r1, [pc, #280]	; (80018e4 <HSD_JSON_parse_Command+0x164>)
    outCommand->sensorId = COM_COMMAND_ERROR;
 80017cc:	70ab      	strb	r3, [r5, #2]
  if (json_object_dothas_value(JSON_ParseHandler,"subSensorId"))
 80017ce:	4620      	mov	r0, r4
 80017d0:	f014 fdac 	bl	801632c <json_object_dothas_value>
 80017d4:	2800      	cmp	r0, #0
 80017d6:	d133      	bne.n	8001840 <HSD_JSON_parse_Command+0xc0>
    outCommand->subSensorId = COM_COMMAND_ERROR;
 80017d8:	23ff      	movs	r3, #255	; 0xff
 80017da:	70eb      	strb	r3, [r5, #3]
  json_value_free(tempJSON);
 80017dc:	4630      	mov	r0, r6
 80017de:	f014 fdd1 	bl	8016384 <json_value_free>
  return 0;  
 80017e2:	2000      	movs	r0, #0
}
 80017e4:	bd70      	pop	{r4, r5, r6, pc}
    else if (strcmp(json_object_dotget_string(JSON_ParseHandler,"command"),"SET") == 0)
 80017e6:	493b      	ldr	r1, [pc, #236]	; (80018d4 <HSD_JSON_parse_Command+0x154>)
 80017e8:	4620      	mov	r0, r4
 80017ea:	f014 fd6b 	bl	80162c4 <json_object_dotget_string>
 80017ee:	493e      	ldr	r1, [pc, #248]	; (80018e8 <HSD_JSON_parse_Command+0x168>)
 80017f0:	f7fe fd06 	bl	8000200 <strcmp>
 80017f4:	bb70      	cbnz	r0, 8001854 <HSD_JSON_parse_Command+0xd4>
      outCommand->command = COM_COMMAND_SET;
 80017f6:	7028      	strb	r0, [r5, #0]
  if (json_object_dothas_value(JSON_ParseHandler,"request"))
 80017f8:	4938      	ldr	r1, [pc, #224]	; (80018dc <HSD_JSON_parse_Command+0x15c>)
 80017fa:	4620      	mov	r0, r4
 80017fc:	f014 fd96 	bl	801632c <json_object_dothas_value>
 8001800:	2800      	cmp	r0, #0
 8001802:	d0da      	beq.n	80017ba <HSD_JSON_parse_Command+0x3a>
    if (strcmp(json_object_dotget_string(JSON_ParseHandler,"request"),"device") == 0)
 8001804:	4935      	ldr	r1, [pc, #212]	; (80018dc <HSD_JSON_parse_Command+0x15c>)
 8001806:	4620      	mov	r0, r4
 8001808:	f014 fd5c 	bl	80162c4 <json_object_dotget_string>
 800180c:	4937      	ldr	r1, [pc, #220]	; (80018ec <HSD_JSON_parse_Command+0x16c>)
 800180e:	f7fe fcf7 	bl	8000200 <strcmp>
 8001812:	bb50      	cbnz	r0, 800186a <HSD_JSON_parse_Command+0xea>
      outCommand->request = COM_REQUEST_DEVICE;
 8001814:	7068      	strb	r0, [r5, #1]
  if (json_object_dothas_value(JSON_ParseHandler,"sensorId"))
 8001816:	4932      	ldr	r1, [pc, #200]	; (80018e0 <HSD_JSON_parse_Command+0x160>)
 8001818:	4620      	mov	r0, r4
 800181a:	f014 fd87 	bl	801632c <json_object_dothas_value>
 800181e:	2800      	cmp	r0, #0
 8001820:	d0d2      	beq.n	80017c8 <HSD_JSON_parse_Command+0x48>
    outCommand->sensorId = (int8_t)json_object_dotget_number(JSON_ParseHandler, "sensorId");
 8001822:	492f      	ldr	r1, [pc, #188]	; (80018e0 <HSD_JSON_parse_Command+0x160>)
 8001824:	4620      	mov	r0, r4
 8001826:	f014 fd57 	bl	80162d8 <json_object_dotget_number>
 800182a:	ec51 0b10 	vmov	r0, r1, d0
 800182e:	f7ff f9bb 	bl	8000ba8 <__aeabi_d2iz>
  if (json_object_dothas_value(JSON_ParseHandler,"subSensorId"))
 8001832:	492c      	ldr	r1, [pc, #176]	; (80018e4 <HSD_JSON_parse_Command+0x164>)
    outCommand->sensorId = (int8_t)json_object_dotget_number(JSON_ParseHandler, "sensorId");
 8001834:	70a8      	strb	r0, [r5, #2]
  if (json_object_dothas_value(JSON_ParseHandler,"subSensorId"))
 8001836:	4620      	mov	r0, r4
 8001838:	f014 fd78 	bl	801632c <json_object_dothas_value>
 800183c:	2800      	cmp	r0, #0
 800183e:	d0cb      	beq.n	80017d8 <HSD_JSON_parse_Command+0x58>
    outCommand->subSensorId = (int8_t)json_object_dotget_number(JSON_ParseHandler, "subSensorId");
 8001840:	4928      	ldr	r1, [pc, #160]	; (80018e4 <HSD_JSON_parse_Command+0x164>)
 8001842:	4620      	mov	r0, r4
 8001844:	f014 fd48 	bl	80162d8 <json_object_dotget_number>
 8001848:	ec51 0b10 	vmov	r0, r1, d0
 800184c:	f7ff f9ac 	bl	8000ba8 <__aeabi_d2iz>
 8001850:	70e8      	strb	r0, [r5, #3]
 8001852:	e7c3      	b.n	80017dc <HSD_JSON_parse_Command+0x5c>
    else if (strcmp(json_object_dotget_string(JSON_ParseHandler,"command"),"START") == 0)
 8001854:	491f      	ldr	r1, [pc, #124]	; (80018d4 <HSD_JSON_parse_Command+0x154>)
 8001856:	4620      	mov	r0, r4
 8001858:	f014 fd34 	bl	80162c4 <json_object_dotget_string>
 800185c:	4924      	ldr	r1, [pc, #144]	; (80018f0 <HSD_JSON_parse_Command+0x170>)
 800185e:	f7fe fccf 	bl	8000200 <strcmp>
 8001862:	b968      	cbnz	r0, 8001880 <HSD_JSON_parse_Command+0x100>
      outCommand->command = COM_COMMAND_START;
 8001864:	2302      	movs	r3, #2
 8001866:	702b      	strb	r3, [r5, #0]
 8001868:	e7a2      	b.n	80017b0 <HSD_JSON_parse_Command+0x30>
    else if (strcmp(json_object_dotget_string(JSON_ParseHandler,"request"),"deviceInfo") == 0)
 800186a:	491c      	ldr	r1, [pc, #112]	; (80018dc <HSD_JSON_parse_Command+0x15c>)
 800186c:	4620      	mov	r0, r4
 800186e:	f014 fd29 	bl	80162c4 <json_object_dotget_string>
 8001872:	4920      	ldr	r1, [pc, #128]	; (80018f4 <HSD_JSON_parse_Command+0x174>)
 8001874:	f7fe fcc4 	bl	8000200 <strcmp>
 8001878:	b968      	cbnz	r0, 8001896 <HSD_JSON_parse_Command+0x116>
      outCommand->request = COM_REQUEST_DEVICE_INFO;
 800187a:	2301      	movs	r3, #1
 800187c:	706b      	strb	r3, [r5, #1]
 800187e:	e79e      	b.n	80017be <HSD_JSON_parse_Command+0x3e>
    else if (strcmp(json_object_dotget_string(JSON_ParseHandler,"command"),"STOP") == 0)
 8001880:	4914      	ldr	r1, [pc, #80]	; (80018d4 <HSD_JSON_parse_Command+0x154>)
 8001882:	4620      	mov	r0, r4
 8001884:	f014 fd1e 	bl	80162c4 <json_object_dotget_string>
 8001888:	491b      	ldr	r1, [pc, #108]	; (80018f8 <HSD_JSON_parse_Command+0x178>)
 800188a:	f7fe fcb9 	bl	8000200 <strcmp>
 800188e:	b980      	cbnz	r0, 80018b2 <HSD_JSON_parse_Command+0x132>
      outCommand->command = COM_COMMAND_STOP;
 8001890:	2303      	movs	r3, #3
 8001892:	702b      	strb	r3, [r5, #0]
 8001894:	e78c      	b.n	80017b0 <HSD_JSON_parse_Command+0x30>
    else if (strcmp(json_object_dotget_string(JSON_ParseHandler,"request"),"descriptor") == 0)
 8001896:	4911      	ldr	r1, [pc, #68]	; (80018dc <HSD_JSON_parse_Command+0x15c>)
 8001898:	4620      	mov	r0, r4
 800189a:	f014 fd13 	bl	80162c4 <json_object_dotget_string>
 800189e:	4917      	ldr	r1, [pc, #92]	; (80018fc <HSD_JSON_parse_Command+0x17c>)
 80018a0:	f7fe fcae 	bl	8000200 <strcmp>
 80018a4:	b940      	cbnz	r0, 80018b8 <HSD_JSON_parse_Command+0x138>
      outCommand->request = COM_REQUEST_DESCRIPTOR;
 80018a6:	2302      	movs	r3, #2
 80018a8:	706b      	strb	r3, [r5, #1]
 80018aa:	e788      	b.n	80017be <HSD_JSON_parse_Command+0x3e>
    return COM_COMMAND_ERROR;
 80018ac:	f04f 30ff 	mov.w	r0, #4294967295
}
 80018b0:	bd70      	pop	{r4, r5, r6, pc}
      outCommand->command = COM_COMMAND_ERROR;
 80018b2:	23ff      	movs	r3, #255	; 0xff
 80018b4:	702b      	strb	r3, [r5, #0]
 80018b6:	e77b      	b.n	80017b0 <HSD_JSON_parse_Command+0x30>
    else if (strcmp(json_object_dotget_string(JSON_ParseHandler,"request"),"status") == 0)
 80018b8:	4908      	ldr	r1, [pc, #32]	; (80018dc <HSD_JSON_parse_Command+0x15c>)
 80018ba:	4620      	mov	r0, r4
 80018bc:	f014 fd02 	bl	80162c4 <json_object_dotget_string>
 80018c0:	490f      	ldr	r1, [pc, #60]	; (8001900 <HSD_JSON_parse_Command+0x180>)
 80018c2:	f7fe fc9d 	bl	8000200 <strcmp>
 80018c6:	2800      	cmp	r0, #0
 80018c8:	f47f af77 	bne.w	80017ba <HSD_JSON_parse_Command+0x3a>
      outCommand->request = COM_REQUEST_STATUS;
 80018cc:	2303      	movs	r3, #3
 80018ce:	706b      	strb	r3, [r5, #1]
 80018d0:	e775      	b.n	80017be <HSD_JSON_parse_Command+0x3e>
 80018d2:	bf00      	nop
 80018d4:	0801bfd4 	.word	0x0801bfd4
 80018d8:	0801bfdc 	.word	0x0801bfdc
 80018dc:	0801bff4 	.word	0x0801bff4
 80018e0:	0801c024 	.word	0x0801c024
 80018e4:	0801c030 	.word	0x0801c030
 80018e8:	0801bfe0 	.word	0x0801bfe0
 80018ec:	0801bffc 	.word	0x0801bffc
 80018f0:	0801bfe4 	.word	0x0801bfe4
 80018f4:	0801c004 	.word	0x0801c004
 80018f8:	0801bfec 	.word	0x0801bfec
 80018fc:	0801c010 	.word	0x0801c010
 8001900:	0801c01c 	.word	0x0801c01c

08001904 <HSD_JSON_parse_Status>:
  return parse_Status_from_JSON(SerializedJSON, SensorStatus);
 8001904:	f7ff bbe2 	b.w	80010cc <parse_Status_from_JSON>

08001908 <COM_AddSensor>:
* @brief Add Sensor to Db
* @param None
* @retval Sensor unique sID
*/
int32_t COM_AddSensor(void)
{  
 8001908:	b538      	push	{r3, r4, r5, lr}
  uint32_t ii = COM_device.deviceDescriptor.nSensor;
 800190a:	4c0c      	ldr	r4, [pc, #48]	; (800193c <COM_AddSensor+0x34>)
 800190c:	6aa5      	ldr	r5, [r4, #40]	; 0x28
  
  COM_device.sensors[ii] = calloc(1, sizeof(COM_Sensor_t));   
 800190e:	f44f 71fc 	mov.w	r1, #504	; 0x1f8
 8001912:	2001      	movs	r0, #1
 8001914:	f015 fcd4 	bl	80172c0 <calloc>
 8001918:	f105 030a 	add.w	r3, r5, #10
 800191c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8001920:	6058      	str	r0, [r3, #4]
  
  if(COM_device.sensors[ii] == NULL)
 8001922:	685a      	ldr	r2, [r3, #4]
 8001924:	b13a      	cbz	r2, 8001936 <COM_AddSensor+0x2e>
    return -1;
  
  COM_device.sensors[ii]->sensorDescriptor.id = ii;
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	701d      	strb	r5, [r3, #0]
  COM_device.deviceDescriptor.nSensor++;
 800192a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800192c:	3301      	adds	r3, #1
 800192e:	62a3      	str	r3, [r4, #40]	; 0x28
  return COM_device.deviceDescriptor.nSensor - 1;
 8001930:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8001932:	3801      	subs	r0, #1
}
 8001934:	bd38      	pop	{r3, r4, r5, pc}
    return -1;
 8001936:	f04f 30ff 	mov.w	r0, #4294967295
}
 800193a:	bd38      	pop	{r3, r4, r5, pc}
 800193c:	20000560 	.word	0x20000560

08001940 <COM_GetDevice>:
* @retval whole device Structure
*/
COM_Device_t * COM_GetDevice(void)
{
  return (COM_Device_t *)&COM_device;
}
 8001940:	4800      	ldr	r0, [pc, #0]	; (8001944 <COM_GetDevice+0x4>)
 8001942:	4770      	bx	lr
 8001944:	20000560 	.word	0x20000560

08001948 <COM_GetDeviceDescriptor>:
* @retval Device Descriptor
*/
COM_DeviceDescriptor_t * COM_GetDeviceDescriptor(void)
{
  return (COM_DeviceDescriptor_t *)&(COM_device.deviceDescriptor);
}
 8001948:	4800      	ldr	r0, [pc, #0]	; (800194c <COM_GetDeviceDescriptor+0x4>)
 800194a:	4770      	bx	lr
 800194c:	20000560 	.word	0x20000560

08001950 <COM_GetSensor>:
* @param None
* @retval Sensor unique sID
*/
COM_Sensor_t * COM_GetSensor(uint8_t sID)
{
  return COM_device.sensors[sID];
 8001950:	4b02      	ldr	r3, [pc, #8]	; (800195c <COM_GetSensor+0xc>)
 8001952:	300a      	adds	r0, #10
 8001954:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8001958:	6858      	ldr	r0, [r3, #4]
}
 800195a:	4770      	bx	lr
 800195c:	20000560 	.word	0x20000560

08001960 <COM_GetSensorDescriptor>:
* @param None
* @retval Sensor unique sID
*/
COM_SensorDescriptor_t * COM_GetSensorDescriptor(uint8_t sID)
{
    return &(COM_device.sensors[sID]->sensorDescriptor);  
 8001960:	4b02      	ldr	r3, [pc, #8]	; (800196c <COM_GetSensorDescriptor+0xc>)
 8001962:	300a      	adds	r0, #10
 8001964:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8001968:	6858      	ldr	r0, [r3, #4]
}
 800196a:	4770      	bx	lr
 800196c:	20000560 	.word	0x20000560

08001970 <COM_GetSensorStatus>:
* @param None
* @retval Sensor unique sID
*/
COM_SensorStatus_t * COM_GetSensorStatus(uint8_t sID)
{
    return &(COM_device.sensors[sID]->sensorStatus);  
 8001970:	4b03      	ldr	r3, [pc, #12]	; (8001980 <COM_GetSensorStatus+0x10>)
 8001972:	300a      	adds	r0, #10
 8001974:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8001978:	6858      	ldr	r0, [r3, #4]
}
 800197a:	f500 70d6 	add.w	r0, r0, #428	; 0x1ac
 800197e:	4770      	bx	lr
 8001980:	20000560 	.word	0x20000560

08001984 <COM_GetSubSensorDescriptor>:
* @param None
* @retval Sensor unique sID
*/
COM_SubSensorDescriptor_t * COM_GetSubSensorDescriptor(uint8_t sID, uint8_t ssID)
{
    return &(COM_device.sensors[sID]->sensorDescriptor.subSensorDescriptor[ssID]);  
 8001984:	4b04      	ldr	r3, [pc, #16]	; (8001998 <COM_GetSubSensorDescriptor+0x14>)
 8001986:	300a      	adds	r0, #10
 8001988:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800198c:	2354      	movs	r3, #84	; 0x54
 800198e:	6840      	ldr	r0, [r0, #4]
 8001990:	fb03 0001 	mla	r0, r3, r1, r0
}
 8001994:	305c      	adds	r0, #92	; 0x5c
 8001996:	4770      	bx	lr
 8001998:	20000560 	.word	0x20000560

0800199c <COM_GetSubSensorStatus>:
* @param None
* @retval Sensor unique sID
*/
COM_SubSensorStatus_t * COM_GetSubSensorStatus(uint8_t sID, uint8_t ssID)
{
    return &(COM_device.sensors[sID]->sensorStatus.subSensorStatus[ssID]);  
 800199c:	4b05      	ldr	r3, [pc, #20]	; (80019b4 <COM_GetSubSensorStatus+0x18>)
 800199e:	300a      	adds	r0, #10
 80019a0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80019a4:	230c      	movs	r3, #12
 80019a6:	6840      	ldr	r0, [r0, #4]
 80019a8:	fb03 0001 	mla	r0, r3, r1, r0
}
 80019ac:	f500 70e4 	add.w	r0, r0, #456	; 0x1c8
 80019b0:	4770      	bx	lr
 80019b2:	bf00      	nop
 80019b4:	20000560 	.word	0x20000560

080019b8 <COM_GetSubSensorNumber>:
* @param Sensor unique sID
* @retval number of subsensors
*/
uint8_t COM_GetSubSensorNumber(uint8_t sID)
{
    return COM_device.sensors[sID]->sensorDescriptor.nSubSensors;  
 80019b8:	4b03      	ldr	r3, [pc, #12]	; (80019c8 <COM_GetSubSensorNumber+0x10>)
 80019ba:	300a      	adds	r0, #10
 80019bc:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 80019c0:	685b      	ldr	r3, [r3, #4]
}
 80019c2:	f893 0058 	ldrb.w	r0, [r3, #88]	; 0x58
 80019c6:	4770      	bx	lr
 80019c8:	20000560 	.word	0x20000560

080019cc <COM_IsOdrLegal>:

uint8_t COM_IsOdrLegal(float value, uint8_t sID)
{
  uint16_t i = 0;
  uint8_t ret = 0;
  float * list = COM_device.sensors[sID]->sensorDescriptor.ODR;
 80019cc:	4b12      	ldr	r3, [pc, #72]	; (8001a18 <COM_IsOdrLegal+0x4c>)
 80019ce:	300a      	adds	r0, #10
 80019d0:	eb03 0380 	add.w	r3, r3, r0, lsl #2
  while(list[i] != COM_END_OF_LIST_FLOAT)
 80019d4:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
  float * list = COM_device.sensors[sID]->sensorDescriptor.ODR;
 80019d8:	6859      	ldr	r1, [r3, #4]
  while(list[i] != COM_END_OF_LIST_FLOAT)
 80019da:	edd1 7a05 	vldr	s15, [r1, #20]
 80019de:	eef4 7a47 	vcmp.f32	s15, s14
 80019e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  float * list = COM_device.sensors[sID]->sensorDescriptor.ODR;
 80019e6:	f101 0114 	add.w	r1, r1, #20
  uint8_t ret = 0;
 80019ea:	f04f 0000 	mov.w	r0, #0
  while(list[i] != COM_END_OF_LIST_FLOAT)
 80019ee:	d012      	beq.n	8001a16 <COM_IsOdrLegal+0x4a>
  uint16_t i = 0;
 80019f0:	4603      	mov	r3, r0
  {
    if(list[i] == value)
      ret = 1;
    i++;
 80019f2:	3301      	adds	r3, #1
 80019f4:	b29b      	uxth	r3, r3
  while(list[i] != COM_END_OF_LIST_FLOAT)
 80019f6:	eb01 0283 	add.w	r2, r1, r3, lsl #2
      ret = 1;
 80019fa:	eef4 7a40 	vcmp.f32	s15, s0
  while(list[i] != COM_END_OF_LIST_FLOAT)
 80019fe:	edd2 7a00 	vldr	s15, [r2]
      ret = 1;
 8001a02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  while(list[i] != COM_END_OF_LIST_FLOAT)
 8001a06:	eef4 7a47 	vcmp.f32	s15, s14
      ret = 1;
 8001a0a:	bf08      	it	eq
 8001a0c:	2001      	moveq	r0, #1
  while(list[i] != COM_END_OF_LIST_FLOAT)
 8001a0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a12:	d1ee      	bne.n	80019f2 <COM_IsOdrLegal+0x26>
 8001a14:	4770      	bx	lr
  }
  
  return ret;
}
 8001a16:	4770      	bx	lr
 8001a18:	20000560 	.word	0x20000560

08001a1c <set_default_description>:
* @brief Set default device description
* @param None
* @retval None
*/
void set_default_description(void)
{  
 8001a1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001a20:	ed2d 8b0e 	vpush	{d8-d14}
 8001a24:	b085      	sub	sp, #20
  COM_Sensor_t * tempSensor;
  COM_DeviceDescriptor_t * tempDeviceDescriptor;
  tempDeviceDescriptor = COM_GetDeviceDescriptor();
 8001a26:	f7ff ff8f 	bl	8001948 <COM_GetDeviceDescriptor>
  deviceserial[1] = *(uint32_t*)DEVICE_ID_REG_2;
 8001a2a:	4ae0      	ldr	r2, [pc, #896]	; (8001dac <set_default_description+0x390>)
  deviceserial[2] = *(uint32_t*)DEVICE_ID_REG_3; 
 8001a2c:	4be0      	ldr	r3, [pc, #896]	; (8001db0 <set_default_description+0x394>)
  deviceserial[1] = *(uint32_t*)DEVICE_ID_REG_2;
 8001a2e:	6812      	ldr	r2, [r2, #0]
  deviceserial[2] = *(uint32_t*)DEVICE_ID_REG_3; 
 8001a30:	681b      	ldr	r3, [r3, #0]
  deviceserial[0] = *(uint32_t*)DEVICE_ID_REG_1;
 8001a32:	49e0      	ldr	r1, [pc, #896]	; (8001db4 <set_default_description+0x398>)
  n = sprintf(p, "%05u", x);
 8001a34:	4de0      	ldr	r5, [pc, #896]	; (8001db8 <set_default_description+0x39c>)
  deviceserial[0] = *(uint32_t*)DEVICE_ID_REG_1;
 8001a36:	680f      	ldr	r7, [r1, #0]
  n = sprintf(p, "%03u", waf_num);
 8001a38:	49e0      	ldr	r1, [pc, #896]	; (8001dbc <set_default_description+0x3a0>)
  
  get_unique_id(tempDeviceDescriptor->serialNumber);
  strcpy(tempDeviceDescriptor->alias, "STWIN_001"); 
    
  /***** IIS3DWB *****/
  iis3dwb_com_id = COM_AddSensor();
 8001a3a:	4ee1      	ldr	r6, [pc, #900]	; (8001dc0 <set_default_description+0x3a4>)
  tempSensor->sensorDescriptor.samplesPerTimestamp[1] = 1000;  
  tempSensor->sensorDescriptor.nSubSensors = 1;
  
  /* SENSOR STATUS */
  tempSensor->sensorStatus.ODR = 26667.0f;
  tempSensor->sensorStatus.measuredODR = 0.0f;
 8001a3c:	eddf 8ae1 	vldr	s17, [pc, #900]	; 8001dc4 <set_default_description+0x3a8>
  tempSensor->sensorDescriptor.subSensorDescriptor[0].FS[4] = COM_END_OF_LIST_FLOAT;
  
  /* SUBSENSOR 0 STATUS */
  tempSensor->sensorStatus.subSensorStatus[0].FS = 16.0f;
  tempSensor->sensorStatus.subSensorStatus[0].isActive = 1;
  tempSensor->sensorStatus.subSensorStatus[0].sensitivity = 0.061f *  tempSensor->sensorStatus.subSensorStatus[0].FS/2;
 8001a40:	ed9f eae1 	vldr	s28, [pc, #900]	; 8001dc8 <set_default_description+0x3ac>

  IIS3DWB_Init_Param.ODR = tempSensor->sensorStatus.ODR;
  IIS3DWB_Init_Param.FS[0] = tempSensor->sensorStatus.subSensorStatus[0].FS;
  IIS3DWB_Init_Param.subSensorActive[0] = tempSensor->sensorStatus.subSensorStatus[0].isActive;
  
  maxWriteTimeSensor[iis3dwb_com_id] = 1000 * WRITE_BUFFER_SIZE_IIS3DWB / (uint32_t)(IIS3DWB_Init_Param.ODR * 6); 
 8001a44:	f8df b3dc 	ldr.w	fp, [pc, #988]	; 8001e24 <set_default_description+0x408>
    /* SUBSENSOR 1 DESCRIPTOR */
  tempSensor->sensorDescriptor.subSensorDescriptor[1].id = 1;
  tempSensor->sensorDescriptor.subSensorDescriptor[1].sensorType = COM_TYPE_HUM; 
  tempSensor->sensorDescriptor.subSensorDescriptor[1].dataPerSample = 1;
  strcpy(tempSensor->sensorDescriptor.subSensorDescriptor[1].unit, "%");
  tempSensor->sensorDescriptor.subSensorDescriptor[1].FS[0] = 100.0f; 
 8001a48:	ed9f 9ae0 	vldr	s18, [pc, #896]	; 8001dcc <set_default_description+0x3b0>
  strcpy(tempSensor->sensorDescriptor.name, "IIS2DH"); 
  tempSensor->sensorDescriptor.dataType = DATA_TYPE_INT16;  
  tempSensor->sensorDescriptor.ODR[0] = 1.0f;
  tempSensor->sensorDescriptor.ODR[1] = 10.0f;
  tempSensor->sensorDescriptor.ODR[2] = 25.0f;
  tempSensor->sensorDescriptor.ODR[3] = 50.0f;
 8001a4c:	ed9f bae0 	vldr	s22, [pc, #896]	; 8001dd0 <set_default_description+0x3b4>
  tempSensor->sensorDescriptor.ODR[4] = 100.0f;
  tempSensor->sensorDescriptor.ODR[5] = 200.0f;
 8001a50:	ed9f cae0 	vldr	s24, [pc, #896]	; 8001dd4 <set_default_description+0x3b8>
  tempDeviceDescriptor = COM_GetDeviceDescriptor();
 8001a54:	4604      	mov	r4, r0
  id[4] = (deviceserial[2]>>8) & 0xFF;
 8001a56:	ea4f 2e13 	mov.w	lr, r3, lsr #8
  id[5] = (deviceserial[2]>>16) & 0xFF;
 8001a5a:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  id[6] = (deviceserial[2]>>24) & 0xFF;
 8001a5e:	0e18      	lsrs	r0, r3, #24
  id[0] = (deviceserial[1]>>8) & 0xFF;
 8001a60:	ea4f 2912 	mov.w	r9, r2, lsr #8
  id[1] = (deviceserial[1]>>16) & 0xFF;
 8001a64:	ea4f 4a12 	mov.w	sl, r2, lsr #16
  id[2] = (deviceserial[1]>>24) & 0xFF;  
 8001a68:	ea4f 6812 	mov.w	r8, r2, lsr #24
  id[4] = (deviceserial[2]>>8) & 0xFF;
 8001a6c:	f884 e004 	strb.w	lr, [r4, #4]
  id[5] = (deviceserial[2]>>16) & 0xFF;
 8001a70:	f884 c005 	strb.w	ip, [r4, #5]
  id[3] = (deviceserial[2]) & 0xFF;
 8001a74:	70e3      	strb	r3, [r4, #3]
  id[0] = (deviceserial[1]>>8) & 0xFF;
 8001a76:	f884 9000 	strb.w	r9, [r4]
  id[1] = (deviceserial[1]>>16) & 0xFF;
 8001a7a:	f884 a001 	strb.w	sl, [r4, #1]
  id[2] = (deviceserial[1]>>24) & 0xFF;  
 8001a7e:	f884 8002 	strb.w	r8, [r4, #2]
  id[6] = (deviceserial[2]>>24) & 0xFF;
 8001a82:	71a0      	strb	r0, [r4, #6]
  n = sprintf(p, "%03u", waf_num);
 8001a84:	b2d2      	uxtb	r2, r2
 8001a86:	1de0      	adds	r0, r4, #7
 8001a88:	f016 fbe0 	bl	801824c <siprintf>
  n = sprintf(p, "%05u", x);
 8001a8c:	0c3a      	lsrs	r2, r7, #16
 8001a8e:	4629      	mov	r1, r5
 8001a90:	f104 000a 	add.w	r0, r4, #10
 8001a94:	f016 fbda 	bl	801824c <siprintf>
  n = sprintf(p, "%05u", y);
 8001a98:	b2ba      	uxth	r2, r7
 8001a9a:	4629      	mov	r1, r5
 8001a9c:	f104 000f 	add.w	r0, r4, #15
 8001aa0:	f016 fbd4 	bl	801824c <siprintf>
  strcpy(tempDeviceDescriptor->alias, "STWIN_001"); 
 8001aa4:	4bcc      	ldr	r3, [pc, #816]	; (8001dd8 <set_default_description+0x3bc>)
 8001aa6:	cb03      	ldmia	r3!, {r0, r1}
  *p = '\0';
 8001aa8:	f04f 0a00 	mov.w	sl, #0
  strcpy(tempDeviceDescriptor->alias, "STWIN_001"); 
 8001aac:	881b      	ldrh	r3, [r3, #0]
 8001aae:	f8a4 301d 	strh.w	r3, [r4, #29]
 8001ab2:	f8c4 1019 	str.w	r1, [r4, #25]
  *p = '\0';
 8001ab6:	f884 a014 	strb.w	sl, [r4, #20]
  strcpy(tempDeviceDescriptor->alias, "STWIN_001"); 
 8001aba:	f8c4 0015 	str.w	r0, [r4, #21]
  iis3dwb_com_id = COM_AddSensor();
 8001abe:	f7ff ff23 	bl	8001908 <COM_AddSensor>
 8001ac2:	b2c0      	uxtb	r0, r0
 8001ac4:	7030      	strb	r0, [r6, #0]
  tempSensor = COM_GetSensor(iis3dwb_com_id);
 8001ac6:	f7ff ff43 	bl	8001950 <COM_GetSensor>
  strcpy(tempSensor->sensorDescriptor.subSensorDescriptor[0].unit, "mg"); 
 8001aca:	49c4      	ldr	r1, [pc, #784]	; (8001ddc <set_default_description+0x3c0>)
  strcpy(tempSensor->sensorDescriptor.name, "IIS3DWB"); 
 8001acc:	4cc4      	ldr	r4, [pc, #784]	; (8001de0 <set_default_description+0x3c4>)
  strcpy(tempSensor->sensorDescriptor.subSensorDescriptor[0].unit, "mg"); 
 8001ace:	788d      	ldrb	r5, [r1, #2]
  IIS3DWB_Init_Param.ODR = tempSensor->sensorStatus.ODR;
 8001ad0:	4ac4      	ldr	r2, [pc, #784]	; (8001de4 <set_default_description+0x3c8>)
  tempSensor->sensorDescriptor.ODR[0] = 26667.0f;
 8001ad2:	f8df c354 	ldr.w	ip, [pc, #852]	; 8001e28 <set_default_description+0x40c>
  strcpy(tempSensor->sensorDescriptor.subSensorDescriptor[0].unit, "mg"); 
 8001ad6:	9502      	str	r5, [sp, #8]
  tempSensor = COM_GetSensor(iis3dwb_com_id);
 8001ad8:	4603      	mov	r3, r0
  strcpy(tempSensor->sensorDescriptor.subSensorDescriptor[0].unit, "mg"); 
 8001ada:	8808      	ldrh	r0, [r1, #0]
 8001adc:	9001      	str	r0, [sp, #4]
  strcpy(tempSensor->sensorDescriptor.name, "IIS3DWB"); 
 8001ade:	cc03      	ldmia	r4!, {r0, r1}
  tempSensor->sensorStatus.usbDataPacketSize = 3000;
 8001ae0:	f640 37b8 	movw	r7, #3000	; 0xbb8
 8001ae4:	f8a3 71bc 	strh.w	r7, [r3, #444]	; 0x1bc
  tempSensor->sensorDescriptor.samplesPerTimestamp[0] = 0;
 8001ae8:	f04f 777a 	mov.w	r7, #65536000	; 0x3e80000
  strcpy(tempSensor->sensorDescriptor.name, "IIS3DWB"); 
 8001aec:	f8c3 1005 	str.w	r1, [r3, #5]
  tempSensor->sensorDescriptor.samplesPerTimestamp[0] = 0;
 8001af0:	655f      	str	r7, [r3, #84]	; 0x54
  tempSensor->sensorDescriptor.dataType = DATA_TYPE_INT16;
 8001af2:	f04f 0103 	mov.w	r1, #3
  tempSensor->sensorStatus.samplesPerTimestamp = 1000;
 8001af6:	f44f 777a 	mov.w	r7, #1000	; 0x3e8
  tempSensor->sensorDescriptor.nSubSensors = 1;
 8001afa:	2401      	movs	r4, #1
  tempSensor->sensorDescriptor.ODR[1] = COM_END_OF_LIST_FLOAT;  /* Terminate list */
 8001afc:	eebf 8a00 	vmov.f32	s16, #240	; 0xbf800000 -1.0
  n = sprintf(p, "%05u", y);
 8001b00:	f64f 78ff 	movw	r8, #65535	; 0xffff
  tempSensor->sensorDescriptor.subSensorDescriptor[0].FS[3] = 16.0f;
 8001b04:	eeb3 aa00 	vmov.f32	s20, #48	; 0x41800000  16.0
  tempSensor->sensorDescriptor.subSensorDescriptor[0].FS[1] = 4.0f;
 8001b08:	eef1 aa00 	vmov.f32	s21, #16	; 0x40800000  4.0
  tempSensor->sensorDescriptor.subSensorDescriptor[0].FS[0] = 2.0f; 
 8001b0c:	eef0 ba00 	vmov.f32	s23, #0	; 0x40000000  2.0
  tempSensor->sensorDescriptor.subSensorDescriptor[0].id = 0;
 8001b10:	f44f 7980 	mov.w	r9, #256	; 0x100
  tempSensor->sensorDescriptor.subSensorDescriptor[0].FS[2] = 8.0f;
 8001b14:	eef2 da00 	vmov.f32	s27, #32	; 0x41000000  8.0
  tempSensor->sensorDescriptor.dataType = DATA_TYPE_INT16;
 8001b18:	7459      	strb	r1, [r3, #17]
  tempSensor->sensorDescriptor.subSensorDescriptor[0].dataPerSample = 3;
 8001b1a:	f883 105e 	strb.w	r1, [r3, #94]	; 0x5e
  tempSensor->sensorStatus.samplesPerTimestamp = 1000;
 8001b1e:	f8a3 71b8 	strh.w	r7, [r3, #440]	; 0x1b8
  strcpy(tempSensor->sensorDescriptor.subSensorDescriptor[0].unit, "mg"); 
 8001b22:	9901      	ldr	r1, [sp, #4]
  tempSensor->sensorDescriptor.ODR[0] = 26667.0f;
 8001b24:	f8c3 c014 	str.w	ip, [r3, #20]
  tempSensor->sensorStatus.sdWriteBufferSize = WRITE_BUFFER_SIZE_IIS3DWB;
 8001b28:	f44f 47fa 	mov.w	r7, #32000	; 0x7d00
  tempSensor->sensorStatus.ODR = 26667.0f;
 8001b2c:	f8c3 c1ac 	str.w	ip, [r3, #428]	; 0x1ac
  strcpy(tempSensor->sensorDescriptor.subSensorDescriptor[0].unit, "mg"); 
 8001b30:	f8a3 105f 	strh.w	r1, [r3, #95]	; 0x5f
  strcpy(tempSensor->sensorDescriptor.name, "IIS3DWB"); 
 8001b34:	f8c3 0001 	str.w	r0, [r3, #1]
  tempSensor->sensorStatus.isActive = 0;
 8001b38:	f883 a1ba 	strb.w	sl, [r3, #442]	; 0x1ba
  IIS3DWB_Init_Param.ODR = tempSensor->sensorStatus.ODR;
 8001b3c:	f8c2 c000 	str.w	ip, [r2]
  tempSensor->sensorDescriptor.ODR[1] = COM_END_OF_LIST_FLOAT;  /* Terminate list */
 8001b40:	ed83 8a06 	vstr	s16, [r3, #24]
  tempSensor->sensorDescriptor.subSensorDescriptor[0].FS[4] = COM_END_OF_LIST_FLOAT;
 8001b44:	ed83 8a20 	vstr	s16, [r3, #128]	; 0x80
  tempSensor->sensorDescriptor.nSubSensors = 1;
 8001b48:	f883 4058 	strb.w	r4, [r3, #88]	; 0x58
  tempSensor->sensorStatus.subSensorStatus[0].isActive = 1;
 8001b4c:	f883 41d0 	strb.w	r4, [r3, #464]	; 0x1d0
  tempSensor->sensorStatus.measuredODR = 0.0f;
 8001b50:	edc3 8a6c 	vstr	s17, [r3, #432]	; 0x1b0
  tempSensor->sensorStatus.initialOffset = 0.0f;
 8001b54:	edc3 8a6d 	vstr	s17, [r3, #436]	; 0x1b4
  tempSensor->sensorStatus.sdWriteBufferSize = WRITE_BUFFER_SIZE_IIS3DWB;
 8001b58:	f8c3 71c0 	str.w	r7, [r3, #448]	; 0x1c0
  tempSensor->sensorStatus.comChannelNumber = -1;
 8001b5c:	f8a3 81c4 	strh.w	r8, [r3, #452]	; 0x1c4
  tempSensor->sensorDescriptor.subSensorDescriptor[0].id = 0;
 8001b60:	f8a3 905c 	strh.w	r9, [r3, #92]	; 0x5c
  strcpy(tempSensor->sensorDescriptor.subSensorDescriptor[0].unit, "mg"); 
 8001b64:	f883 5061 	strb.w	r5, [r3, #97]	; 0x61
  tempSensor->sensorDescriptor.subSensorDescriptor[0].FS[0] = 2.0f; 
 8001b68:	edc3 ba1c 	vstr	s23, [r3, #112]	; 0x70
  tempSensor->sensorDescriptor.subSensorDescriptor[0].FS[1] = 4.0f;
 8001b6c:	edc3 aa1d 	vstr	s21, [r3, #116]	; 0x74
  tempSensor->sensorDescriptor.subSensorDescriptor[0].FS[2] = 8.0f;
 8001b70:	edc3 da1e 	vstr	s27, [r3, #120]	; 0x78
  tempSensor->sensorDescriptor.subSensorDescriptor[0].FS[3] = 16.0f;
 8001b74:	ed83 aa1f 	vstr	s20, [r3, #124]	; 0x7c
  tempSensor->sensorStatus.subSensorStatus[0].FS = 16.0f;
 8001b78:	ed83 aa72 	vstr	s20, [r3, #456]	; 0x1c8
  tempSensor->sensorStatus.subSensorStatus[0].sensitivity = 0.061f *  tempSensor->sensorStatus.subSensorStatus[0].FS/2;
 8001b7c:	ed83 ea73 	vstr	s28, [r3, #460]	; 0x1cc
  maxWriteTimeSensor[iis3dwb_com_id] = 1000 * WRITE_BUFFER_SIZE_IIS3DWB / (uint32_t)(IIS3DWB_Init_Param.ODR * 6); 
 8001b80:	7833      	ldrb	r3, [r6, #0]
  IIS3DWB_Init_Param.FS[0] = tempSensor->sensorStatus.subSensorStatus[0].FS;
 8001b82:	ed82 aa01 	vstr	s20, [r2, #4]
  IIS3DWB_Init_Param.subSensorActive[0] = tempSensor->sensorStatus.subSensorStatus[0].isActive;
 8001b86:	7514      	strb	r4, [r2, #20]
  maxWriteTimeSensor[iis3dwb_com_id] = 1000 * WRITE_BUFFER_SIZE_IIS3DWB / (uint32_t)(IIS3DWB_Init_Param.ODR * 6); 
 8001b88:	22c7      	movs	r2, #199	; 0xc7
 8001b8a:	f84b 2023 	str.w	r2, [fp, r3, lsl #2]
  hts221_com_id = COM_AddSensor();
 8001b8e:	f7ff febb 	bl	8001908 <COM_AddSensor>
 8001b92:	4b95      	ldr	r3, [pc, #596]	; (8001de8 <set_default_description+0x3cc>)
  strcpy(tempSensor->sensorDescriptor.subSensorDescriptor[0].unit, "Celsius");
 8001b94:	4f95      	ldr	r7, [pc, #596]	; (8001dec <set_default_description+0x3d0>)
  hts221_com_id = COM_AddSensor();
 8001b96:	b2c0      	uxtb	r0, r0
 8001b98:	461d      	mov	r5, r3
 8001b9a:	7018      	strb	r0, [r3, #0]
  tempSensor = COM_GetSensor(hts221_com_id);
 8001b9c:	f7ff fed8 	bl	8001950 <COM_GetSensor>
  strcpy(tempSensor->sensorDescriptor.name, "HTS221"); 
 8001ba0:	4a93      	ldr	r2, [pc, #588]	; (8001df0 <set_default_description+0x3d4>)
  tempSensor->sensorDescriptor.subSensorDescriptor[0].FS[0] = 120.0f; 
 8001ba2:	eddf 7a94 	vldr	s15, [pc, #592]	; 8001df4 <set_default_description+0x3d8>
  strcpy(tempSensor->sensorDescriptor.name, "HTS221"); 
 8001ba6:	8891      	ldrh	r1, [r2, #4]
 8001ba8:	9103      	str	r1, [sp, #12]
  tempSensor = COM_GetSensor(hts221_com_id);
 8001baa:	4603      	mov	r3, r0
  strcpy(tempSensor->sensorDescriptor.name, "HTS221"); 
 8001bac:	6810      	ldr	r0, [r2, #0]
 8001bae:	f8c3 0001 	str.w	r0, [r3, #1]
  strcpy(tempSensor->sensorDescriptor.subSensorDescriptor[0].unit, "Celsius");
 8001bb2:	cf03      	ldmia	r7!, {r0, r1}
  tempSensor->sensorDescriptor.samplesPerTimestamp[0] = 0;
 8001bb4:	f04f 767a 	mov.w	r6, #65536000	; 0x3e80000
 8001bb8:	655e      	str	r6, [r3, #84]	; 0x54
  strcpy(tempSensor->sensorDescriptor.subSensorDescriptor[0].unit, "Celsius");
 8001bba:	f8c3 005f 	str.w	r0, [r3, #95]	; 0x5f
  strcpy(tempSensor->sensorDescriptor.name, "HTS221"); 
 8001bbe:	9e03      	ldr	r6, [sp, #12]
 8001bc0:	f8a3 6005 	strh.w	r6, [r3, #5]
  tempSensor->sensorDescriptor.nSubSensors = 2;
 8001bc4:	f04f 0002 	mov.w	r0, #2
 8001bc8:	f883 0058 	strb.w	r0, [r3, #88]	; 0x58
  tempSensor->sensorDescriptor.dataType = DATA_TYPE_FLOAT;
 8001bcc:	f04f 0606 	mov.w	r6, #6
  strcpy(tempSensor->sensorDescriptor.subSensorDescriptor[1].unit, "%");
 8001bd0:	4889      	ldr	r0, [pc, #548]	; (8001df8 <set_default_description+0x3dc>)
  strcpy(tempSensor->sensorDescriptor.name, "HTS221"); 
 8001bd2:	f892 e006 	ldrb.w	lr, [r2, #6]
  strcpy(tempSensor->sensorDescriptor.subSensorDescriptor[0].unit, "Celsius");
 8001bd6:	f8c3 1063 	str.w	r1, [r3, #99]	; 0x63
  tempSensor->sensorDescriptor.ODR[0] = 1.0f;
 8001bda:	eef7 9a00 	vmov.f32	s19, #112	; 0x3f800000  1.0
  tempSensor->sensorDescriptor.ODR[1] = 7.0f;
 8001bde:	eeb1 7a0c 	vmov.f32	s14, #28	; 0x40e00000  7.0
  tempSensor->sensorDescriptor.ODR[2] = 12.5f;
 8001be2:	eef2 ca09 	vmov.f32	s25, #41	; 0x41480000  12.5
  tempSensor->sensorDescriptor.dataType = DATA_TYPE_FLOAT;
 8001be6:	745e      	strb	r6, [r3, #17]
  tempSensor->sensorStatus.samplesPerTimestamp = 50;
 8001be8:	f04f 0c32 	mov.w	ip, #50	; 0x32
  tempSensor->sensorStatus.sdWriteBufferSize = WRITE_BUFFER_SIZE_HTS221;
 8001bec:	f44f 77fa 	mov.w	r7, #500	; 0x1f4
  tempSensor->sensorStatus.usbDataPacketSize = 16;
 8001bf0:	f04f 0110 	mov.w	r1, #16
  tempSensor->sensorDescriptor.subSensorDescriptor[0].id = 0;
 8001bf4:	f44f 6680 	mov.w	r6, #1024	; 0x400
  tempSensor->sensorDescriptor.ODR[1] = 7.0f;
 8001bf8:	ed83 7a06 	vstr	s14, [r3, #24]
  strcpy(tempSensor->sensorDescriptor.name, "HTS221"); 
 8001bfc:	f883 e007 	strb.w	lr, [r3, #7]
  tempSensor->sensorDescriptor.ODR[3] = COM_END_OF_LIST_FLOAT;
 8001c00:	ed83 8a08 	vstr	s16, [r3, #32]
  tempSensor->sensorStatus.measuredODR = 0.0f;
 8001c04:	edc3 8a6c 	vstr	s17, [r3, #432]	; 0x1b0
  tempSensor->sensorStatus.initialOffset = 0.0f;
 8001c08:	edc3 8a6d 	vstr	s17, [r3, #436]	; 0x1b4
  tempSensor->sensorStatus.isActive = 0;
 8001c0c:	f883 a1ba 	strb.w	sl, [r3, #442]	; 0x1ba
  tempSensor->sensorStatus.comChannelNumber = -1;
 8001c10:	f8a3 81c4 	strh.w	r8, [r3, #452]	; 0x1c4
  tempSensor->sensorDescriptor.subSensorDescriptor[0].dataPerSample = 1;
 8001c14:	f883 405e 	strb.w	r4, [r3, #94]	; 0x5e
  tempSensor->sensorDescriptor.subSensorDescriptor[0].FS[1] = COM_END_OF_LIST_FLOAT;
 8001c18:	ed83 8a1d 	vstr	s16, [r3, #116]	; 0x74
  tempSensor->sensorStatus.subSensorStatus[0].isActive = 1;
 8001c1c:	f883 41d0 	strb.w	r4, [r3, #464]	; 0x1d0
  tempSensor->sensorStatus.samplesPerTimestamp = 50;
 8001c20:	f8a3 c1b8 	strh.w	ip, [r3, #440]	; 0x1b8
  tempSensor->sensorStatus.sdWriteBufferSize = WRITE_BUFFER_SIZE_HTS221;
 8001c24:	f8c3 71c0 	str.w	r7, [r3, #448]	; 0x1c0
  tempSensor->sensorDescriptor.subSensorDescriptor[1].id = 1;
 8001c28:	f240 6c01 	movw	ip, #1537	; 0x601
  tempSensor->sensorDescriptor.ODR[0] = 1.0f;
 8001c2c:	edc3 9a05 	vstr	s19, [r3, #20]
  tempSensor->sensorStatus.subSensorStatus[0].sensitivity = 1.0f;
 8001c30:	edc3 9a73 	vstr	s19, [r3, #460]	; 0x1cc
  tempSensor->sensorDescriptor.ODR[2] = 12.5f;
 8001c34:	edc3 ca07 	vstr	s25, [r3, #28]
  tempSensor->sensorStatus.ODR = 12.5f;
 8001c38:	edc3 ca6b 	vstr	s25, [r3, #428]	; 0x1ac
  tempSensor->sensorStatus.usbDataPacketSize = 16;
 8001c3c:	f8a3 11bc 	strh.w	r1, [r3, #444]	; 0x1bc
  tempSensor->sensorDescriptor.subSensorDescriptor[0].id = 0;
 8001c40:	f8a3 605c 	strh.w	r6, [r3, #92]	; 0x5c
  tempSensor->sensorDescriptor.subSensorDescriptor[0].FS[0] = 120.0f; 
 8001c44:	edc3 7a1c 	vstr	s15, [r3, #112]	; 0x70
  maxWriteTimeSensor[hts221_com_id] = 1000 * WRITE_BUFFER_SIZE_HTS221 / (uint32_t)(HTS221_Init_Param.ODR * 8); 
 8001c48:	7829      	ldrb	r1, [r5, #0]
  strcpy(tempSensor->sensorDescriptor.subSensorDescriptor[1].unit, "%");
 8001c4a:	8800      	ldrh	r0, [r0, #0]
  tempSensor->sensorStatus.subSensorStatus[0].FS = 120.0f;
 8001c4c:	edc3 7a72 	vstr	s15, [r3, #456]	; 0x1c8
  HTS221_Init_Param.ODR = tempSensor->sensorStatus.ODR;
 8001c50:	4a6a      	ldr	r2, [pc, #424]	; (8001dfc <set_default_description+0x3e0>)
  tempSensor->sensorDescriptor.subSensorDescriptor[1].id = 1;
 8001c52:	f8a3 c0b0 	strh.w	ip, [r3, #176]	; 0xb0
  tempSensor->sensorDescriptor.subSensorDescriptor[1].dataPerSample = 1;
 8001c56:	f883 40b2 	strb.w	r4, [r3, #178]	; 0xb2
  tempSensor->sensorDescriptor.subSensorDescriptor[1].FS[1] = COM_END_OF_LIST_FLOAT;
 8001c5a:	ed83 8a32 	vstr	s16, [r3, #200]	; 0xc8
  tempSensor->sensorStatus.subSensorStatus[1].isActive = 1;
 8001c5e:	f883 41dc 	strb.w	r4, [r3, #476]	; 0x1dc
  tempSensor->sensorStatus.subSensorStatus[1].sensitivity = 1.0f;
 8001c62:	edc3 9a76 	vstr	s19, [r3, #472]	; 0x1d8
  tempSensor->sensorDescriptor.subSensorDescriptor[1].FS[0] = 100.0f; 
 8001c66:	ed83 9a31 	vstr	s18, [r3, #196]	; 0xc4
  tempSensor->sensorStatus.subSensorStatus[1].FS = 100.0f;
 8001c6a:	ed83 9a75 	vstr	s18, [r3, #468]	; 0x1d4
  strcpy(tempSensor->sensorDescriptor.subSensorDescriptor[1].unit, "%");
 8001c6e:	f8a3 00b3 	strh.w	r0, [r3, #179]	; 0xb3
  maxWriteTimeSensor[hts221_com_id] = 1000 * WRITE_BUFFER_SIZE_HTS221 / (uint32_t)(HTS221_Init_Param.ODR * 8); 
 8001c72:	f241 3388 	movw	r3, #5000	; 0x1388
 8001c76:	f84b 3021 	str.w	r3, [fp, r1, lsl #2]
  HTS221_Init_Param.subSensorActive[0] = tempSensor->sensorStatus.subSensorStatus[0].isActive;
 8001c7a:	f240 1301 	movw	r3, #257	; 0x101
 8001c7e:	8293      	strh	r3, [r2, #20]
  HTS221_Init_Param.FS[0] = tempSensor->sensorStatus.subSensorStatus[0].FS;
 8001c80:	edc2 7a01 	vstr	s15, [r2, #4]
  HTS221_Init_Param.ODR = tempSensor->sensorStatus.ODR;
 8001c84:	edc2 ca00 	vstr	s25, [r2]
  HTS221_Init_Param.FS[1] = tempSensor->sensorStatus.subSensorStatus[1].FS;
 8001c88:	ed82 9a02 	vstr	s18, [r2, #8]
  iis2dh_com_id = COM_AddSensor();
 8001c8c:	f7ff fe3c 	bl	8001908 <COM_AddSensor>
 8001c90:	4b5b      	ldr	r3, [pc, #364]	; (8001e00 <set_default_description+0x3e4>)
  tempSensor->sensorDescriptor.ODR[6] = 400.0f;
  tempSensor->sensorDescriptor.ODR[7] = 1344.0f;
 8001c92:	4f5c      	ldr	r7, [pc, #368]	; (8001e04 <set_default_description+0x3e8>)
  iis2dh_com_id = COM_AddSensor();
 8001c94:	b2c0      	uxtb	r0, r0
 8001c96:	7018      	strb	r0, [r3, #0]
  tempSensor = COM_GetSensor(iis2dh_com_id);
 8001c98:	f7ff fe5a 	bl	8001950 <COM_GetSensor>
  strcpy(tempSensor->sensorDescriptor.name, "IIS2DH"); 
 8001c9c:	4a5a      	ldr	r2, [pc, #360]	; (8001e08 <set_default_description+0x3ec>)
  tempSensor->sensorDescriptor.ODR[6] = 400.0f;
 8001c9e:	f8df c18c 	ldr.w	ip, [pc, #396]	; 8001e2c <set_default_description+0x410>
  strcpy(tempSensor->sensorDescriptor.name, "IIS2DH"); 
 8001ca2:	8896      	ldrh	r6, [r2, #4]
 8001ca4:	7991      	ldrb	r1, [r2, #6]
  tempSensor = COM_GetSensor(iis2dh_com_id);
 8001ca6:	4603      	mov	r3, r0
  tempSensor->sensorDescriptor.dataType = DATA_TYPE_INT16;  
 8001ca8:	f04f 0503 	mov.w	r5, #3
  strcpy(tempSensor->sensorDescriptor.name, "IIS2DH"); 
 8001cac:	6810      	ldr	r0, [r2, #0]
  tempSensor->sensorDescriptor.dataType = DATA_TYPE_INT16;  
 8001cae:	745d      	strb	r5, [r3, #17]
  tempSensor->sensorStatus.comChannelNumber = -1;
  
  /* SUBSENSOR 0 DESCRIPTOR */
  tempSensor->sensorDescriptor.subSensorDescriptor[0].id = 0;
  tempSensor->sensorDescriptor.subSensorDescriptor[0].sensorType = COM_TYPE_ACC; 
  tempSensor->sensorDescriptor.subSensorDescriptor[0].dataPerSample = 3;
 8001cb0:	f04f 0503 	mov.w	r5, #3
 8001cb4:	f883 505e 	strb.w	r5, [r3, #94]	; 0x5e
  strcpy(tempSensor->sensorDescriptor.name, "IIS2DH"); 
 8001cb8:	f8c3 0001 	str.w	r0, [r3, #1]
  strcpy(tempSensor->sensorDescriptor.subSensorDescriptor[0].unit, "mg");
 8001cbc:	9d01      	ldr	r5, [sp, #4]
  strcpy(tempSensor->sensorDescriptor.name, "IIS2DH"); 
 8001cbe:	f8a3 6005 	strh.w	r6, [r3, #5]
  tempSensor->sensorDescriptor.samplesPerTimestamp[0] = 0;
 8001cc2:	f04f 7e7a 	mov.w	lr, #65536000	; 0x3e80000
  
  IIS2DH_Init_Param.ODR = tempSensor->sensorStatus.ODR;
  IIS2DH_Init_Param.FS[0] = tempSensor->sensorStatus.subSensorStatus[0].FS;
  IIS2DH_Init_Param.subSensorActive[0] = tempSensor->sensorStatus.subSensorStatus[0].isActive;  
  
  maxWriteTimeSensor[iis2dh_com_id] = 1000 * WRITE_BUFFER_SIZE_IIS2DH / (uint32_t)(IIS2DH_Init_Param.ODR * 6);
 8001cc6:	4e4e      	ldr	r6, [pc, #312]	; (8001e00 <set_default_description+0x3e4>)
  tempSensor->sensorDescriptor.samplesPerTimestamp[0] = 0;
 8001cc8:	f8c3 e054 	str.w	lr, [r3, #84]	; 0x54
  tempSensor->sensorStatus.usbDataPacketSize = 2400;
 8001ccc:	f44f 6016 	mov.w	r0, #2400	; 0x960
  tempSensor->sensorStatus.samplesPerTimestamp = 1000;
 8001cd0:	f44f 7e7a 	mov.w	lr, #1000	; 0x3e8
  tempSensor->sensorDescriptor.ODR[1] = 10.0f;
 8001cd4:	eeb2 da04 	vmov.f32	s26, #36	; 0x41200000  10.0
  strcpy(tempSensor->sensorDescriptor.subSensorDescriptor[0].unit, "mg");
 8001cd8:	f8a3 505f 	strh.w	r5, [r3, #95]	; 0x5f
  tempSensor->sensorDescriptor.ODR[2] = 25.0f;
 8001cdc:	eef3 ea09 	vmov.f32	s29, #57	; 0x41c80000  25.0
  strcpy(tempSensor->sensorDescriptor.subSensorDescriptor[0].unit, "mg");
 8001ce0:	9d02      	ldr	r5, [sp, #8]
  tempSensor->sensorStatus.usbDataPacketSize = 2400;
 8001ce2:	f8a3 01bc 	strh.w	r0, [r3, #444]	; 0x1bc
  tempSensor->sensorStatus.sdWriteBufferSize = WRITE_BUFFER_SIZE_IIS2DH;
 8001ce6:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
  tempSensor->sensorStatus.samplesPerTimestamp = 1000;
 8001cea:	f8a3 e1b8 	strh.w	lr, [r3, #440]	; 0x1b8
  IIS2DH_Init_Param.ODR = tempSensor->sensorStatus.ODR;
 8001cee:	4a47      	ldr	r2, [pc, #284]	; (8001e0c <set_default_description+0x3f0>)
  tempSensor->sensorDescriptor.ODR[6] = 400.0f;
 8001cf0:	f8c3 c02c 	str.w	ip, [r3, #44]	; 0x2c
  tempSensor->sensorDescriptor.ODR[0] = 1.0f;
 8001cf4:	edc3 9a05 	vstr	s19, [r3, #20]
  tempSensor->sensorDescriptor.ODR[4] = 100.0f;
 8001cf8:	ed83 9a09 	vstr	s18, [r3, #36]	; 0x24
  tempSensor->sensorDescriptor.ODR[8] = COM_END_OF_LIST_FLOAT;  
 8001cfc:	ed83 8a0d 	vstr	s16, [r3, #52]	; 0x34
  tempSensor->sensorDescriptor.nSubSensors = 1;
 8001d00:	f883 4058 	strb.w	r4, [r3, #88]	; 0x58
  tempSensor->sensorStatus.measuredODR = 0.0f;
 8001d04:	edc3 8a6c 	vstr	s17, [r3, #432]	; 0x1b0
  tempSensor->sensorStatus.initialOffset = 0.0f;
 8001d08:	edc3 8a6d 	vstr	s17, [r3, #436]	; 0x1b4
  tempSensor->sensorStatus.isActive = 0;
 8001d0c:	f883 a1ba 	strb.w	sl, [r3, #442]	; 0x1ba
  tempSensor->sensorStatus.comChannelNumber = -1;
 8001d10:	f8a3 81c4 	strh.w	r8, [r3, #452]	; 0x1c4
  tempSensor->sensorDescriptor.subSensorDescriptor[0].id = 0;
 8001d14:	f8a3 905c 	strh.w	r9, [r3, #92]	; 0x5c
  strcpy(tempSensor->sensorDescriptor.subSensorDescriptor[0].unit, "mg");
 8001d18:	f883 5061 	strb.w	r5, [r3, #97]	; 0x61
  tempSensor->sensorDescriptor.subSensorDescriptor[0].FS[0] = 2.0f; 
 8001d1c:	edc3 ba1c 	vstr	s23, [r3, #112]	; 0x70
  tempSensor->sensorDescriptor.subSensorDescriptor[0].FS[1] = 4.0f;
 8001d20:	edc3 aa1d 	vstr	s21, [r3, #116]	; 0x74
  strcpy(tempSensor->sensorDescriptor.name, "IIS2DH"); 
 8001d24:	71d9      	strb	r1, [r3, #7]
  tempSensor->sensorDescriptor.ODR[1] = 10.0f;
 8001d26:	ed83 da06 	vstr	s26, [r3, #24]
  tempSensor->sensorDescriptor.ODR[2] = 25.0f;
 8001d2a:	edc3 ea07 	vstr	s29, [r3, #28]
  tempSensor->sensorDescriptor.ODR[3] = 50.0f;
 8001d2e:	ed83 ba08 	vstr	s22, [r3, #32]
  tempSensor->sensorDescriptor.ODR[5] = 200.0f;
 8001d32:	ed83 ca0a 	vstr	s24, [r3, #40]	; 0x28
  tempSensor->sensorDescriptor.ODR[7] = 1344.0f;
 8001d36:	631f      	str	r7, [r3, #48]	; 0x30
  tempSensor->sensorStatus.ODR = 1344.0f;
 8001d38:	f8c3 71ac 	str.w	r7, [r3, #428]	; 0x1ac
  maxWriteTimeSensor[iis2dh_com_id] = 1000 * WRITE_BUFFER_SIZE_IIS2DH / (uint32_t)(IIS2DH_Init_Param.ODR * 6);
 8001d3c:	7831      	ldrb	r1, [r6, #0]
  tempSensor->sensorStatus.sdWriteBufferSize = WRITE_BUFFER_SIZE_IIS2DH;
 8001d3e:	f8c3 01c0 	str.w	r0, [r3, #448]	; 0x1c0
    tempSensor->sensorStatus.subSensorStatus[0].sensitivity = 0.75f;
 8001d42:	f04f 507d 	mov.w	r0, #1061158912	; 0x3f400000
  tempSensor->sensorDescriptor.subSensorDescriptor[0].FS[2] = 8.0f;
 8001d46:	edc3 da1e 	vstr	s27, [r3, #120]	; 0x78
  tempSensor->sensorDescriptor.subSensorDescriptor[0].FS[3] = 16.0f;
 8001d4a:	ed83 aa1f 	vstr	s20, [r3, #124]	; 0x7c
  tempSensor->sensorDescriptor.subSensorDescriptor[0].FS[4] = COM_END_OF_LIST_FLOAT;
 8001d4e:	ed83 8a20 	vstr	s16, [r3, #128]	; 0x80
  tempSensor->sensorStatus.subSensorStatus[0].FS = 16.0f;
 8001d52:	ed83 aa72 	vstr	s20, [r3, #456]	; 0x1c8
  tempSensor->sensorStatus.subSensorStatus[0].isActive = 1;
 8001d56:	f883 41d0 	strb.w	r4, [r3, #464]	; 0x1d0
    tempSensor->sensorStatus.subSensorStatus[0].sensitivity = 0.75f;
 8001d5a:	f8c3 01cc 	str.w	r0, [r3, #460]	; 0x1cc
  maxWriteTimeSensor[iis2dh_com_id] = 1000 * WRITE_BUFFER_SIZE_IIS2DH / (uint32_t)(IIS2DH_Init_Param.ODR * 6);
 8001d5e:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 8001d62:	f84b 3021 	str.w	r3, [fp, r1, lsl #2]
  IIS2DH_Init_Param.ODR = tempSensor->sensorStatus.ODR;
 8001d66:	6017      	str	r7, [r2, #0]
  IIS2DH_Init_Param.FS[0] = tempSensor->sensorStatus.subSensorStatus[0].FS;
 8001d68:	ed82 aa01 	vstr	s20, [r2, #4]
  IIS2DH_Init_Param.subSensorActive[0] = tempSensor->sensorStatus.subSensorStatus[0].isActive;  
 8001d6c:	7514      	strb	r4, [r2, #20]
  
  /**********/ 
  
  /* IIS2MDC */
  iis2mdc_com_id = COM_AddSensor();  
 8001d6e:	f7ff fdcb 	bl	8001908 <COM_AddSensor>
 8001d72:	4b27      	ldr	r3, [pc, #156]	; (8001e10 <set_default_description+0x3f4>)
  
  /* SUBSENSOR 0 DESCRIPTOR */
  tempSensor->sensorDescriptor.subSensorDescriptor[0].id = 0;
  tempSensor->sensorDescriptor.subSensorDescriptor[0].sensorType = COM_TYPE_MAG; 
  tempSensor->sensorDescriptor.subSensorDescriptor[0].dataPerSample = 3;
  strcpy(tempSensor->sensorDescriptor.subSensorDescriptor[0].unit, "gauss");
 8001d74:	4f27      	ldr	r7, [pc, #156]	; (8001e14 <set_default_description+0x3f8>)
  /* SUBSENSOR 0 STATUS */
  tempSensor->sensorStatus.subSensorStatus[0].FS = 50.0f;
  tempSensor->sensorStatus.subSensorStatus[0].isActive = 1;
  tempSensor->sensorStatus.subSensorStatus[0].sensitivity = 1.5;
  
  IIS2MDC_Init_Param.ODR = tempSensor->sensorStatus.ODR;
 8001d76:	4e28      	ldr	r6, [pc, #160]	; (8001e18 <set_default_description+0x3fc>)
  iis2mdc_com_id = COM_AddSensor();  
 8001d78:	b2c0      	uxtb	r0, r0
 8001d7a:	461d      	mov	r5, r3
 8001d7c:	7018      	strb	r0, [r3, #0]
  tempSensor = COM_GetSensor(iis2mdc_com_id);
 8001d7e:	f7ff fde7 	bl	8001950 <COM_GetSensor>
  strcpy(tempSensor->sensorDescriptor.name, "IIS2MDC"); 
 8001d82:	4a26      	ldr	r2, [pc, #152]	; (8001e1c <set_default_description+0x400>)
  tempSensor = COM_GetSensor(iis2mdc_com_id);
 8001d84:	4603      	mov	r3, r0
  strcpy(tempSensor->sensorDescriptor.name, "IIS2MDC"); 
 8001d86:	ca03      	ldmia	r2!, {r0, r1}
  tempSensor->sensorDescriptor.samplesPerTimestamp[0] = 0;
 8001d88:	f04f 727a 	mov.w	r2, #65536000	; 0x3e80000
 8001d8c:	655a      	str	r2, [r3, #84]	; 0x54
  tempSensor->sensorStatus.usbDataPacketSize = 600;
 8001d8e:	f44f 7216 	mov.w	r2, #600	; 0x258
 8001d92:	f8a3 21bc 	strh.w	r2, [r3, #444]	; 0x1bc
  tempSensor->sensorDescriptor.subSensorDescriptor[0].id = 0;
 8001d96:	f44f 7200 	mov.w	r2, #512	; 0x200
  strcpy(tempSensor->sensorDescriptor.name, "IIS2MDC"); 
 8001d9a:	f8c3 0001 	str.w	r0, [r3, #1]
 8001d9e:	f8c3 1005 	str.w	r1, [r3, #5]
  tempSensor->sensorDescriptor.subSensorDescriptor[0].id = 0;
 8001da2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  tempSensor->sensorDescriptor.ODR[1] = 20.0f;
 8001da6:	481e      	ldr	r0, [pc, #120]	; (8001e20 <set_default_description+0x404>)
 8001da8:	6198      	str	r0, [r3, #24]
 8001daa:	e041      	b.n	8001e30 <set_default_description+0x414>
 8001dac:	1fff7594 	.word	0x1fff7594
 8001db0:	1fff7598 	.word	0x1fff7598
 8001db4:	1fff7590 	.word	0x1fff7590
 8001db8:	0801c044 	.word	0x0801c044
 8001dbc:	0801c03c 	.word	0x0801c03c
 8001dc0:	20017330 	.word	0x20017330
 8001dc4:	00000000 	.word	0x00000000
 8001dc8:	3ef9db23 	.word	0x3ef9db23
 8001dcc:	42c80000 	.word	0x42c80000
 8001dd0:	42480000 	.word	0x42480000
 8001dd4:	43480000 	.word	0x43480000
 8001dd8:	0801c04c 	.word	0x0801c04c
 8001ddc:	0801c060 	.word	0x0801c060
 8001de0:	0801c058 	.word	0x0801c058
 8001de4:	20011278 	.word	0x20011278
 8001de8:	20017644 	.word	0x20017644
 8001dec:	0801c06c 	.word	0x0801c06c
 8001df0:	0801c064 	.word	0x0801c064
 8001df4:	42f00000 	.word	0x42f00000
 8001df8:	0801c074 	.word	0x0801c074
 8001dfc:	200111e8 	.word	0x200111e8
 8001e00:	20017654 	.word	0x20017654
 8001e04:	44a80000 	.word	0x44a80000
 8001e08:	0801c078 	.word	0x0801c078
 8001e0c:	20011214 	.word	0x20011214
 8001e10:	20017605 	.word	0x20017605
 8001e14:	0801c088 	.word	0x0801c088
 8001e18:	2001124c 	.word	0x2001124c
 8001e1c:	0801c080 	.word	0x0801c080
 8001e20:	41a00000 	.word	0x41a00000
 8001e24:	20017610 	.word	0x20017610
 8001e28:	46d05600 	.word	0x46d05600
 8001e2c:	43c80000 	.word	0x43c80000
  tempSensor->sensorStatus.sdWriteBufferSize = WRITE_BUFFER_SIZE_IIS2MDC;
 8001e30:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
  tempSensor->sensorStatus.subSensorStatus[0].sensitivity = 1.5;
 8001e34:	f04f 527f 	mov.w	r2, #1069547520	; 0x3fc00000
  tempSensor->sensorDescriptor.dataType = DATA_TYPE_INT16;  
 8001e38:	f04f 0c03 	mov.w	ip, #3
  strcpy(tempSensor->sensorDescriptor.subSensorDescriptor[0].unit, "gauss");
 8001e3c:	6838      	ldr	r0, [r7, #0]
  tempSensor->sensorStatus.sdWriteBufferSize = WRITE_BUFFER_SIZE_IIS2MDC;
 8001e3e:	f8c3 11c0 	str.w	r1, [r3, #448]	; 0x1c0
  tempSensor->sensorStatus.subSensorStatus[0].sensitivity = 1.5;
 8001e42:	f8c3 21cc 	str.w	r2, [r3, #460]	; 0x1cc
  strcpy(tempSensor->sensorDescriptor.subSensorDescriptor[0].unit, "gauss");
 8001e46:	88b9      	ldrh	r1, [r7, #4]
  tempSensor->sensorDescriptor.dataType = DATA_TYPE_INT16;  
 8001e48:	f883 c011 	strb.w	ip, [r3, #17]
  tempSensor->sensorStatus.samplesPerTimestamp = 100;
 8001e4c:	f04f 0264 	mov.w	r2, #100	; 0x64
  tempSensor->sensorDescriptor.subSensorDescriptor[0].dataPerSample = 3;
 8001e50:	f883 c05e 	strb.w	ip, [r3, #94]	; 0x5e
  strcpy(tempSensor->sensorDescriptor.subSensorDescriptor[0].unit, "gauss");
 8001e54:	f8a3 1063 	strh.w	r1, [r3, #99]	; 0x63
  tempSensor->sensorDescriptor.ODR[0] = 10.0f;
 8001e58:	ed83 da05 	vstr	s26, [r3, #20]
  tempSensor->sensorDescriptor.ODR[2] = 50.0f;
 8001e5c:	ed83 ba07 	vstr	s22, [r3, #28]
  tempSensor->sensorDescriptor.ODR[3] = 100.0f;
 8001e60:	ed83 9a08 	vstr	s18, [r3, #32]
  tempSensor->sensorDescriptor.ODR[4] = COM_END_OF_LIST_FLOAT;  
 8001e64:	ed83 8a09 	vstr	s16, [r3, #36]	; 0x24
  tempSensor->sensorDescriptor.nSubSensors = 1;
 8001e68:	f883 4058 	strb.w	r4, [r3, #88]	; 0x58
  tempSensor->sensorStatus.ODR = 100.0f;
 8001e6c:	ed83 9a6b 	vstr	s18, [r3, #428]	; 0x1ac
  tempSensor->sensorStatus.measuredODR = 0.0f;
 8001e70:	edc3 8a6c 	vstr	s17, [r3, #432]	; 0x1b0
  tempSensor->sensorStatus.initialOffset = 0.0f;
 8001e74:	edc3 8a6d 	vstr	s17, [r3, #436]	; 0x1b4
  tempSensor->sensorStatus.isActive = 0;
 8001e78:	f883 a1ba 	strb.w	sl, [r3, #442]	; 0x1ba
  tempSensor->sensorStatus.comChannelNumber = -1;
 8001e7c:	f8a3 81c4 	strh.w	r8, [r3, #452]	; 0x1c4
  tempSensor->sensorDescriptor.subSensorDescriptor[0].FS[0] = 50.0f; 
 8001e80:	ed83 ba1c 	vstr	s22, [r3, #112]	; 0x70
  tempSensor->sensorDescriptor.subSensorDescriptor[0].FS[1] = COM_END_OF_LIST_FLOAT;
 8001e84:	ed83 8a1d 	vstr	s16, [r3, #116]	; 0x74
  tempSensor->sensorStatus.subSensorStatus[0].FS = 50.0f;
 8001e88:	ed83 ba72 	vstr	s22, [r3, #456]	; 0x1c8
  tempSensor->sensorStatus.subSensorStatus[0].isActive = 1;
 8001e8c:	f883 41d0 	strb.w	r4, [r3, #464]	; 0x1d0
  strcpy(tempSensor->sensorDescriptor.subSensorDescriptor[0].unit, "gauss");
 8001e90:	f8c3 005f 	str.w	r0, [r3, #95]	; 0x5f
  tempSensor->sensorStatus.samplesPerTimestamp = 100;
 8001e94:	f8a3 21b8 	strh.w	r2, [r3, #440]	; 0x1b8
  IIS2MDC_Init_Param.ODR = tempSensor->sensorStatus.ODR;
 8001e98:	ed86 9a00 	vstr	s18, [r6]
  IIS2MDC_Init_Param.FS[0] = tempSensor->sensorStatus.subSensorStatus[0].FS;
 8001e9c:	ed86 ba01 	vstr	s22, [r6, #4]
  IIS2MDC_Init_Param.subSensorActive[0] = tempSensor->sensorStatus.subSensorStatus[0].isActive;  
  
  maxWriteTimeSensor[iis2mdc_com_id] = 1000 * WRITE_BUFFER_SIZE_IIS2MDC / (uint32_t)(IIS2MDC_Init_Param.ODR * 6); 
 8001ea0:	782b      	ldrb	r3, [r5, #0]
  IIS2MDC_Init_Param.subSensorActive[0] = tempSensor->sensorStatus.subSensorStatus[0].isActive;  
 8001ea2:	7534      	strb	r4, [r6, #20]
  maxWriteTimeSensor[iis2mdc_com_id] = 1000 * WRITE_BUFFER_SIZE_IIS2MDC / (uint32_t)(IIS2MDC_Init_Param.ODR * 6); 
 8001ea4:	f640 5205 	movw	r2, #3333	; 0xd05
 8001ea8:	f84b 2023 	str.w	r2, [fp, r3, lsl #2]
  
  /**********/ 
  
  /* IMP34DT05 */
  imp34dt05_com_id = COM_AddSensor();
 8001eac:	f7ff fd2c 	bl	8001908 <COM_AddSensor>
 8001eb0:	4bdd      	ldr	r3, [pc, #884]	; (8002228 <set_default_description+0x80c>)
  
  /* SUBSENSOR 0 DESCRIPTOR */
  tempSensor->sensorDescriptor.subSensorDescriptor[0].id = 0;  
  tempSensor->sensorDescriptor.subSensorDescriptor[0].sensorType = COM_TYPE_MIC; 
  tempSensor->sensorDescriptor.subSensorDescriptor[0].dataPerSample = 1;
  strcpy(tempSensor->sensorDescriptor.subSensorDescriptor[0].unit, "Waveform");
 8001eb2:	4ede      	ldr	r6, [pc, #888]	; (800222c <set_default_description+0x810>)
  tempSensor->sensorDescriptor.subSensorDescriptor[0].FS[0] = 122.5f; 
 8001eb4:	4fde      	ldr	r7, [pc, #888]	; (8002230 <set_default_description+0x814>)
  imp34dt05_com_id = COM_AddSensor();
 8001eb6:	b2c0      	uxtb	r0, r0
 8001eb8:	461d      	mov	r5, r3
 8001eba:	7018      	strb	r0, [r3, #0]
  tempSensor = COM_GetSensor(imp34dt05_com_id);
 8001ebc:	f7ff fd48 	bl	8001950 <COM_GetSensor>
  strcpy(tempSensor->sensorDescriptor.name, "IMP34DT05"); 
 8001ec0:	4adc      	ldr	r2, [pc, #880]	; (8002234 <set_default_description+0x818>)
  tempSensor->sensorDescriptor.ODR[0] = 48000.0f;
 8001ec2:	f8df c3d4 	ldr.w	ip, [pc, #980]	; 8002298 <set_default_description+0x87c>
  tempSensor = COM_GetSensor(imp34dt05_com_id);
 8001ec6:	4603      	mov	r3, r0
  strcpy(tempSensor->sensorDescriptor.name, "IMP34DT05"); 
 8001ec8:	ca03      	ldmia	r2!, {r0, r1}
 8001eca:	f8c3 0001 	str.w	r0, [r3, #1]
 8001ece:	f8c3 1005 	str.w	r1, [r3, #5]
  strcpy(tempSensor->sensorDescriptor.subSensorDescriptor[0].unit, "Waveform");
 8001ed2:	ce03      	ldmia	r6!, {r0, r1}
  strcpy(tempSensor->sensorDescriptor.name, "IMP34DT05"); 
 8001ed4:	8812      	ldrh	r2, [r2, #0]
 8001ed6:	9203      	str	r2, [sp, #12]
  strcpy(tempSensor->sensorDescriptor.subSensorDescriptor[0].unit, "Waveform");
 8001ed8:	7832      	ldrb	r2, [r6, #0]
 8001eda:	f8c3 005f 	str.w	r0, [r3, #95]	; 0x5f
 8001ede:	4616      	mov	r6, r2
  tempSensor->sensorDescriptor.dataType = DATA_TYPE_INT16;  
 8001ee0:	f04f 0e03 	mov.w	lr, #3
  tempSensor->sensorStatus.sdWriteBufferSize = WRITE_BUFFER_SIZE_IMP34DT05;
 8001ee4:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 8001ee8:	f8c3 21c0 	str.w	r2, [r3, #448]	; 0x1c0
  tempSensor->sensorDescriptor.dataType = DATA_TYPE_INT16;  
 8001eec:	f883 e011 	strb.w	lr, [r3, #17]
  tempSensor->sensorDescriptor.samplesPerTimestamp[0] = 0;
 8001ef0:	f04f 727a 	mov.w	r2, #65536000	; 0x3e80000
  tempSensor->sensorStatus.samplesPerTimestamp = 1000;
 8001ef4:	f44f 7e7a 	mov.w	lr, #1000	; 0x3e8
  tempSensor->sensorDescriptor.samplesPerTimestamp[0] = 0;
 8001ef8:	655a      	str	r2, [r3, #84]	; 0x54
  tempSensor->sensorStatus.samplesPerTimestamp = 1000;
 8001efa:	f8a3 e1b8 	strh.w	lr, [r3, #440]	; 0x1b8
  strcpy(tempSensor->sensorDescriptor.name, "IMP34DT05"); 
 8001efe:	9a03      	ldr	r2, [sp, #12]
  tempSensor->sensorDescriptor.ODR[0] = 48000.0f;
 8001f00:	f8c3 c014 	str.w	ip, [r3, #20]
  tempSensor->sensorDescriptor.subSensorDescriptor[0].id = 0;  
 8001f04:	f44f 6ee0 	mov.w	lr, #1792	; 0x700
  tempSensor->sensorStatus.usbDataPacketSize = 4096;
 8001f08:	f44f 5080 	mov.w	r0, #4096	; 0x1000
  tempSensor->sensorStatus.ODR = 48000.0f;
 8001f0c:	f8c3 c1ac 	str.w	ip, [r3, #428]	; 0x1ac
  tempSensor->sensorDescriptor.ODR[1] = COM_END_OF_LIST_FLOAT;  
 8001f10:	ed83 8a06 	vstr	s16, [r3, #24]
  tempSensor->sensorDescriptor.nSubSensors = 1;
 8001f14:	f883 4058 	strb.w	r4, [r3, #88]	; 0x58
  tempSensor->sensorStatus.measuredODR = 0.0f;
 8001f18:	edc3 8a6c 	vstr	s17, [r3, #432]	; 0x1b0
  tempSensor->sensorStatus.initialOffset = 0.0f;
 8001f1c:	edc3 8a6d 	vstr	s17, [r3, #436]	; 0x1b4
  tempSensor->sensorStatus.isActive = 0;
 8001f20:	f883 a1ba 	strb.w	sl, [r3, #442]	; 0x1ba
  tempSensor->sensorStatus.comChannelNumber = -1;
 8001f24:	f8a3 81c4 	strh.w	r8, [r3, #452]	; 0x1c4
  tempSensor->sensorDescriptor.subSensorDescriptor[0].dataPerSample = 1;
 8001f28:	f883 405e 	strb.w	r4, [r3, #94]	; 0x5e
  tempSensor->sensorDescriptor.subSensorDescriptor[0].FS[1] = COM_END_OF_LIST_FLOAT;
 8001f2c:	ed83 8a1d 	vstr	s16, [r3, #116]	; 0x74
  
  /* SUBSENSOR 0 STATUS */
  tempSensor->sensorStatus.subSensorStatus[0].FS = 122.5f;
  tempSensor->sensorStatus.subSensorStatus[0].isActive = 1;
 8001f30:	f883 41d0 	strb.w	r4, [r3, #464]	; 0x1d0
  tempSensor->sensorStatus.subSensorStatus[0].sensitivity = 1.0;
 8001f34:	edc3 9a73 	vstr	s19, [r3, #460]	; 0x1cc
  strcpy(tempSensor->sensorDescriptor.name, "IMP34DT05"); 
 8001f38:	f8a3 2009 	strh.w	r2, [r3, #9]
  strcpy(tempSensor->sensorDescriptor.subSensorDescriptor[0].unit, "Waveform");
 8001f3c:	9603      	str	r6, [sp, #12]
  
  IMP34DT05_Init_Param.ODR = tempSensor->sensorStatus.ODR;
 8001f3e:	4abe      	ldr	r2, [pc, #760]	; (8002238 <set_default_description+0x81c>)
  strcpy(tempSensor->sensorDescriptor.subSensorDescriptor[0].unit, "Waveform");
 8001f40:	f883 6067 	strb.w	r6, [r3, #103]	; 0x67
 8001f44:	f8c3 1063 	str.w	r1, [r3, #99]	; 0x63
  tempSensor->sensorStatus.usbDataPacketSize = 4096;
 8001f48:	f8a3 01bc 	strh.w	r0, [r3, #444]	; 0x1bc
  tempSensor->sensorDescriptor.subSensorDescriptor[0].id = 0;  
 8001f4c:	f8a3 e05c 	strh.w	lr, [r3, #92]	; 0x5c
  tempSensor->sensorDescriptor.subSensorDescriptor[0].FS[0] = 122.5f; 
 8001f50:	671f      	str	r7, [r3, #112]	; 0x70
  tempSensor->sensorStatus.subSensorStatus[0].FS = 122.5f;
 8001f52:	f8c3 71c8 	str.w	r7, [r3, #456]	; 0x1c8
  IMP34DT05_Init_Param.FS[0] = tempSensor->sensorStatus.subSensorStatus[0].FS;
  IMP34DT05_Init_Param.subSensorActive[0] = tempSensor->sensorStatus.subSensorStatus[0].isActive;  
  
  maxWriteTimeSensor[imp34dt05_com_id] = 1000 * WRITE_BUFFER_SIZE_IMP34DT05 / (uint32_t)(IMP34DT05_Init_Param.ODR * 2); 
 8001f56:	782b      	ldrb	r3, [r5, #0]
  IMP34DT05_Init_Param.ODR = tempSensor->sensorStatus.ODR;
 8001f58:	f8c2 c000 	str.w	ip, [r2]
  maxWriteTimeSensor[imp34dt05_com_id] = 1000 * WRITE_BUFFER_SIZE_IMP34DT05 / (uint32_t)(IMP34DT05_Init_Param.ODR * 2); 
 8001f5c:	f240 114d 	movw	r1, #333	; 0x14d
 8001f60:	f84b 1023 	str.w	r1, [fp, r3, lsl #2]
  IMP34DT05_Init_Param.FS[0] = tempSensor->sensorStatus.subSensorStatus[0].FS;
 8001f64:	6057      	str	r7, [r2, #4]
  IMP34DT05_Init_Param.subSensorActive[0] = tempSensor->sensorStatus.subSensorStatus[0].isActive;  
 8001f66:	7514      	strb	r4, [r2, #20]
  
/**********/ 
  
  /* ISM330DHCX */
  ism330dhcx_com_id = COM_AddSensor();
 8001f68:	f7ff fcce 	bl	8001908 <COM_AddSensor>
 8001f6c:	4bb3      	ldr	r3, [pc, #716]	; (800223c <set_default_description+0x820>)
  strcpy(tempSensor->sensorDescriptor.name, "ISM330DHCX"); 
  tempSensor->sensorDescriptor.dataType = DATA_TYPE_INT16;
  tempSensor->sensorDescriptor.ODR[0] = 12.5f;
  tempSensor->sensorDescriptor.ODR[1] = 26.0f;
  tempSensor->sensorDescriptor.ODR[2] = 52.0f;
  tempSensor->sensorDescriptor.ODR[3] = 104.0f;
 8001f6e:	4fb4      	ldr	r7, [pc, #720]	; (8002240 <set_default_description+0x824>)
  tempSensor->sensorDescriptor.ODR[4] = 208.0f;
 8001f70:	4eb4      	ldr	r6, [pc, #720]	; (8002244 <set_default_description+0x828>)
  ism330dhcx_com_id = COM_AddSensor();
 8001f72:	b2c0      	uxtb	r0, r0
 8001f74:	7018      	strb	r0, [r3, #0]
    tempSensor = COM_GetSensor(ism330dhcx_com_id);
 8001f76:	f7ff fceb 	bl	8001950 <COM_GetSensor>
  strcpy(tempSensor->sensorDescriptor.name, "ISM330DHCX"); 
 8001f7a:	4ab3      	ldr	r2, [pc, #716]	; (8002248 <set_default_description+0x82c>)
  tempSensor->sensorDescriptor.ODR[0] = 12.5f;
 8001f7c:	edc0 ca05 	vstr	s25, [r0, #20]
    tempSensor = COM_GetSensor(ism330dhcx_com_id);
 8001f80:	4603      	mov	r3, r0
  strcpy(tempSensor->sensorDescriptor.name, "ISM330DHCX"); 
 8001f82:	ca03      	ldmia	r2!, {r0, r1}
  tempSensor->sensorDescriptor.ODR[6] = 833.0f;
  tempSensor->sensorDescriptor.ODR[7] = 1667.0f;
  tempSensor->sensorDescriptor.ODR[8] = 3333.0f;
  tempSensor->sensorDescriptor.ODR[9] = 6667.0f;
  tempSensor->sensorDescriptor.ODR[10] = COM_END_OF_LIST_FLOAT;
  tempSensor->sensorDescriptor.samplesPerTimestamp[0] = 0;
 8001f84:	f04f 7c7a 	mov.w	ip, #65536000	; 0x3e80000
 8001f88:	f8c3 c054 	str.w	ip, [r3, #84]	; 0x54
  strcpy(tempSensor->sensorDescriptor.name, "ISM330DHCX"); 
 8001f8c:	f8c3 0001 	str.w	r0, [r3, #1]
 8001f90:	f8c3 1005 	str.w	r1, [r3, #5]
  tempSensor->sensorDescriptor.ODR[6] = 833.0f;
 8001f94:	48ad      	ldr	r0, [pc, #692]	; (800224c <set_default_description+0x830>)
  strcpy(tempSensor->sensorDescriptor.name, "ISM330DHCX"); 
 8001f96:	8811      	ldrh	r1, [r2, #0]
 8001f98:	7892      	ldrb	r2, [r2, #2]
 8001f9a:	f8a3 1009 	strh.w	r1, [r3, #9]
  tempSensor->sensorDescriptor.samplesPerTimestamp[1] = 1000;  
  tempSensor->sensorDescriptor.nSubSensors = 2;
 8001f9e:	f04f 0c02 	mov.w	ip, #2
 8001fa2:	f883 c058 	strb.w	ip, [r3, #88]	; 0x58
  strcpy(tempSensor->sensorDescriptor.name, "ISM330DHCX"); 
 8001fa6:	72da      	strb	r2, [r3, #11]
  tempSensor->sensorDescriptor.ODR[6] = 833.0f;
 8001fa8:	62d8      	str	r0, [r3, #44]	; 0x2c
  tempSensor->sensorDescriptor.ODR[1] = 26.0f;
 8001faa:	4aa9      	ldr	r2, [pc, #676]	; (8002250 <set_default_description+0x834>)
  tempSensor->sensorDescriptor.ODR[7] = 1667.0f;
 8001fac:	49a9      	ldr	r1, [pc, #676]	; (8002254 <set_default_description+0x838>)
  tempSensor->sensorDescriptor.ODR[1] = 26.0f;
 8001fae:	619a      	str	r2, [r3, #24]
  tempSensor->sensorDescriptor.dataType = DATA_TYPE_INT16;
 8001fb0:	f04f 0503 	mov.w	r5, #3
  
  /* SENSOR STATUS */
  tempSensor->sensorStatus.ODR = 6667.0f;
  tempSensor->sensorStatus.measuredODR = 0.0f;
  tempSensor->sensorStatus.initialOffset = 0.0f;
  tempSensor->sensorStatus.samplesPerTimestamp = 1000;
 8001fb4:	f44f 7c7a 	mov.w	ip, #1000	; 0x3e8
  tempSensor->sensorStatus.isActive = 0;
  tempSensor->sensorStatus.usbDataPacketSize = 2048;
 8001fb8:	f44f 6000 	mov.w	r0, #2048	; 0x800
  tempSensor->sensorDescriptor.dataType = DATA_TYPE_INT16;
 8001fbc:	745d      	strb	r5, [r3, #17]
  tempSensor->sensorStatus.samplesPerTimestamp = 1000;
 8001fbe:	f8a3 c1b8 	strh.w	ip, [r3, #440]	; 0x1b8
  tempSensor->sensorDescriptor.ODR[3] = 104.0f;
 8001fc2:	621f      	str	r7, [r3, #32]
  tempSensor->sensorDescriptor.ODR[4] = 208.0f;
 8001fc4:	625e      	str	r6, [r3, #36]	; 0x24
  tempSensor->sensorDescriptor.ODR[7] = 1667.0f;
 8001fc6:	6319      	str	r1, [r3, #48]	; 0x30
  tempSensor->sensorDescriptor.ODR[9] = 6667.0f;
 8001fc8:	4ea3      	ldr	r6, [pc, #652]	; (8002258 <set_default_description+0x83c>)
  tempSensor->sensorStatus.usbDataPacketSize = 2048;
 8001fca:	f8a3 01bc 	strh.w	r0, [r3, #444]	; 0x1bc
  tempSensor->sensorDescriptor.ODR[2] = 52.0f;
 8001fce:	f8df e2cc 	ldr.w	lr, [pc, #716]	; 800229c <set_default_description+0x880>
  tempSensor->sensorDescriptor.ODR[5] = 417.0f;
 8001fd2:	f8df c2cc 	ldr.w	ip, [pc, #716]	; 80022a0 <set_default_description+0x884>
  tempSensor->sensorDescriptor.ODR[8] = 3333.0f;
 8001fd6:	4fa1      	ldr	r7, [pc, #644]	; (800225c <set_default_description+0x840>)
  
    /* SUBSENSOR 1 DESCRIPTOR */
  tempSensor->sensorDescriptor.subSensorDescriptor[1].id = 1;
  tempSensor->sensorDescriptor.subSensorDescriptor[1].sensorType = COM_TYPE_GYRO; 
  tempSensor->sensorDescriptor.subSensorDescriptor[1].dataPerSample = 3;
  strcpy(tempSensor->sensorDescriptor.subSensorDescriptor[1].unit, "mdps");
 8001fd8:	4aa1      	ldr	r2, [pc, #644]	; (8002260 <set_default_description+0x844>)
  tempSensor->sensorDescriptor.ODR[10] = COM_END_OF_LIST_FLOAT;
 8001fda:	ed83 8a0f 	vstr	s16, [r3, #60]	; 0x3c
  tempSensor->sensorDescriptor.subSensorDescriptor[0].dataPerSample = 3;
 8001fde:	f04f 0503 	mov.w	r5, #3
  tempSensor->sensorStatus.sdWriteBufferSize = WRITE_BUFFER_SIZE_ISM330DHCX;
 8001fe2:	f44f 517a 	mov.w	r1, #16000	; 0x3e80
  tempSensor->sensorDescriptor.subSensorDescriptor[0].FS[4] = COM_LIST_SEPARATOR_FLOAT;
 8001fe6:	f04f 4040 	mov.w	r0, #3221225472	; 0xc0000000
  tempSensor->sensorStatus.measuredODR = 0.0f;
 8001fea:	edc3 8a6c 	vstr	s17, [r3, #432]	; 0x1b0
  tempSensor->sensorStatus.initialOffset = 0.0f;
 8001fee:	edc3 8a6d 	vstr	s17, [r3, #436]	; 0x1b4
  tempSensor->sensorStatus.isActive = 0;
 8001ff2:	f883 a1ba 	strb.w	sl, [r3, #442]	; 0x1ba
  tempSensor->sensorStatus.comChannelNumber = -1;
 8001ff6:	f8a3 81c4 	strh.w	r8, [r3, #452]	; 0x1c4
  tempSensor->sensorDescriptor.subSensorDescriptor[0].id = 0;
 8001ffa:	f8a3 905c 	strh.w	r9, [r3, #92]	; 0x5c
  tempSensor->sensorDescriptor.ODR[2] = 52.0f;
 8001ffe:	f8c3 e01c 	str.w	lr, [r3, #28]
  tempSensor->sensorDescriptor.ODR[5] = 417.0f;
 8002002:	f8c3 c028 	str.w	ip, [r3, #40]	; 0x28
  tempSensor->sensorDescriptor.ODR[8] = 3333.0f;
 8002006:	635f      	str	r7, [r3, #52]	; 0x34
  tempSensor->sensorStatus.sdWriteBufferSize = WRITE_BUFFER_SIZE_ISM330DHCX;
 8002008:	f8c3 11c0 	str.w	r1, [r3, #448]	; 0x1c0
  tempSensor->sensorDescriptor.ODR[9] = 6667.0f;
 800200c:	639e      	str	r6, [r3, #56]	; 0x38
  tempSensor->sensorStatus.ODR = 6667.0f;
 800200e:	f8c3 61ac 	str.w	r6, [r3, #428]	; 0x1ac
  tempSensor->sensorDescriptor.subSensorDescriptor[0].dataPerSample = 3;
 8002012:	f883 505e 	strb.w	r5, [r3, #94]	; 0x5e
  ISM330DHCX_Init_Param.FS[0] = tempSensor->sensorStatus.subSensorStatus[0].FS;
  ISM330DHCX_Init_Param.FS[1] = tempSensor->sensorStatus.subSensorStatus[1].FS;
  ISM330DHCX_Init_Param.subSensorActive[0] = tempSensor->sensorStatus.subSensorStatus[0].isActive;
  ISM330DHCX_Init_Param.subSensorActive[1] = tempSensor->sensorStatus.subSensorStatus[1].isActive;
  
  maxWriteTimeSensor[ism330dhcx_com_id] = 1000 * WRITE_BUFFER_SIZE_ISM330DHCX / (uint32_t)(ISM330DHCX_Init_Param.ODR * 12); 
 8002016:	4989      	ldr	r1, [pc, #548]	; (800223c <set_default_description+0x820>)
  strcpy(tempSensor->sensorDescriptor.subSensorDescriptor[0].unit, "mg");
 8002018:	9d01      	ldr	r5, [sp, #4]
  tempSensor->sensorDescriptor.subSensorDescriptor[0].FS[4] = COM_LIST_SEPARATOR_FLOAT;
 800201a:	f8c3 0080 	str.w	r0, [r3, #128]	; 0x80
  tempSensor->sensorDescriptor.subSensorDescriptor[1].id = 1;
 800201e:	f240 3001 	movw	r0, #769	; 0x301
  tempSensor->sensorDescriptor.subSensorDescriptor[1].FS[0] = 125.0f; 
 8002022:	ed9f 7a90 	vldr	s14, [pc, #576]	; 8002264 <set_default_description+0x848>
  tempSensor->sensorDescriptor.subSensorDescriptor[1].FS[2] = 500.0f; 
 8002026:	eddf 7a90 	vldr	s15, [pc, #576]	; 8002268 <set_default_description+0x84c>
  strcpy(tempSensor->sensorDescriptor.subSensorDescriptor[0].unit, "mg");
 800202a:	f8a3 505f 	strh.w	r5, [r3, #95]	; 0x5f
  tempSensor->sensorDescriptor.subSensorDescriptor[1].id = 1;
 800202e:	f8a3 00b0 	strh.w	r0, [r3, #176]	; 0xb0
  strcpy(tempSensor->sensorDescriptor.subSensorDescriptor[0].unit, "mg");
 8002032:	9d02      	ldr	r5, [sp, #8]
  strcpy(tempSensor->sensorDescriptor.subSensorDescriptor[1].unit, "mdps");
 8002034:	6810      	ldr	r0, [r2, #0]
 8002036:	7912      	ldrb	r2, [r2, #4]
  maxWriteTimeSensor[ism330dhcx_com_id] = 1000 * WRITE_BUFFER_SIZE_ISM330DHCX / (uint32_t)(ISM330DHCX_Init_Param.ODR * 12); 
 8002038:	7809      	ldrb	r1, [r1, #0]
  tempSensor->sensorDescriptor.subSensorDescriptor[1].FS[3] = 1000.0f; 
 800203a:	f8df e268 	ldr.w	lr, [pc, #616]	; 80022a4 <set_default_description+0x888>
  tempSensor->sensorDescriptor.subSensorDescriptor[1].FS[4] = 2000.0f; 
 800203e:	f8df c268 	ldr.w	ip, [pc, #616]	; 80022a8 <set_default_description+0x88c>
  strcpy(tempSensor->sensorDescriptor.subSensorDescriptor[0].unit, "mg");
 8002042:	f883 5061 	strb.w	r5, [r3, #97]	; 0x61
  strcpy(tempSensor->sensorDescriptor.subSensorDescriptor[1].unit, "mdps");
 8002046:	f8c3 00b3 	str.w	r0, [r3, #179]	; 0xb3
 800204a:	f883 20b7 	strb.w	r2, [r3, #183]	; 0xb7
  tempSensor->sensorDescriptor.subSensorDescriptor[1].FS[5] = 4000.0f; 
 800204e:	4887      	ldr	r0, [pc, #540]	; (800226c <set_default_description+0x850>)
  ISM330DHCX_Init_Param.ODR = tempSensor->sensorStatus.ODR;
 8002050:	4a87      	ldr	r2, [pc, #540]	; (8002270 <set_default_description+0x854>)
  tempSensor->sensorDescriptor.subSensorDescriptor[1].FS[1] = 250.0f; 
 8002052:	f8df 9258 	ldr.w	r9, [pc, #600]	; 80022ac <set_default_description+0x890>
  tempSensor->sensorStatus.subSensorStatus[1].sensitivity = 4.375f * tempSensor->sensorStatus.subSensorStatus[1].FS/125.0f;
 8002056:	4f87      	ldr	r7, [pc, #540]	; (8002274 <set_default_description+0x858>)
  tempSensor->sensorDescriptor.subSensorDescriptor[1].FS[0] = 125.0f; 
 8002058:	ed83 7a31 	vstr	s14, [r3, #196]	; 0xc4
  tempSensor->sensorDescriptor.subSensorDescriptor[1].dataPerSample = 3;
 800205c:	f04f 0503 	mov.w	r5, #3
  tempSensor->sensorDescriptor.subSensorDescriptor[1].FS[2] = 500.0f; 
 8002060:	edc3 7a33 	vstr	s15, [r3, #204]	; 0xcc
  tempSensor->sensorDescriptor.subSensorDescriptor[1].FS[3] = 1000.0f; 
 8002064:	f8c3 e0d0 	str.w	lr, [r3, #208]	; 0xd0
  tempSensor->sensorDescriptor.subSensorDescriptor[1].FS[4] = 2000.0f; 
 8002068:	f8c3 c0d4 	str.w	ip, [r3, #212]	; 0xd4
  tempSensor->sensorDescriptor.subSensorDescriptor[0].FS[0] = 2.0f; 
 800206c:	edc3 ba1c 	vstr	s23, [r3, #112]	; 0x70
  tempSensor->sensorDescriptor.subSensorDescriptor[0].FS[1] = 4.0f;
 8002070:	edc3 aa1d 	vstr	s21, [r3, #116]	; 0x74
  tempSensor->sensorDescriptor.subSensorDescriptor[0].FS[2] = 8.0f;
 8002074:	edc3 da1e 	vstr	s27, [r3, #120]	; 0x78
  tempSensor->sensorDescriptor.subSensorDescriptor[0].FS[3] = 16.0f;
 8002078:	ed83 aa1f 	vstr	s20, [r3, #124]	; 0x7c
  tempSensor->sensorStatus.subSensorStatus[0].FS = 16.0f;
 800207c:	ed83 aa72 	vstr	s20, [r3, #456]	; 0x1c8
  tempSensor->sensorStatus.subSensorStatus[0].sensitivity = 0.061f * tempSensor->sensorStatus.subSensorStatus[0].FS/2.0f;
 8002080:	ed83 ea73 	vstr	s28, [r3, #460]	; 0x1cc
  tempSensor->sensorStatus.subSensorStatus[0].isActive = 1;
 8002084:	f883 41d0 	strb.w	r4, [r3, #464]	; 0x1d0
  tempSensor->sensorDescriptor.subSensorDescriptor[1].dataPerSample = 3;
 8002088:	f883 50b2 	strb.w	r5, [r3, #178]	; 0xb2
  tempSensor->sensorDescriptor.subSensorDescriptor[1].FS[6] = COM_END_OF_LIST_FLOAT; 
 800208c:	ed83 8a37 	vstr	s16, [r3, #220]	; 0xdc
  tempSensor->sensorStatus.subSensorStatus[1].isActive = 1;
 8002090:	f883 41dc 	strb.w	r4, [r3, #476]	; 0x1dc
  tempSensor->sensorDescriptor.subSensorDescriptor[1].FS[1] = 250.0f; 
 8002094:	f8c3 90c8 	str.w	r9, [r3, #200]	; 0xc8
  tempSensor->sensorStatus.subSensorStatus[1].sensitivity = 4.375f * tempSensor->sensorStatus.subSensorStatus[1].FS/125.0f;
 8002098:	f8c3 71d8 	str.w	r7, [r3, #472]	; 0x1d8
  tempSensor->sensorDescriptor.subSensorDescriptor[1].FS[5] = 4000.0f; 
 800209c:	f8c3 00d8 	str.w	r0, [r3, #216]	; 0xd8
  tempSensor->sensorStatus.subSensorStatus[1].FS = 4000.0f;
 80020a0:	f8c3 01d4 	str.w	r0, [r3, #468]	; 0x1d4
  maxWriteTimeSensor[ism330dhcx_com_id] = 1000 * WRITE_BUFFER_SIZE_ISM330DHCX / (uint32_t)(ISM330DHCX_Init_Param.ODR * 12); 
 80020a4:	f04f 09c7 	mov.w	r9, #199	; 0xc7
  ISM330DHCX_Init_Param.subSensorActive[0] = tempSensor->sensorStatus.subSensorStatus[0].isActive;
 80020a8:	f240 1301 	movw	r3, #257	; 0x101
  maxWriteTimeSensor[ism330dhcx_com_id] = 1000 * WRITE_BUFFER_SIZE_ISM330DHCX / (uint32_t)(ISM330DHCX_Init_Param.ODR * 12); 
 80020ac:	f84b 9021 	str.w	r9, [fp, r1, lsl #2]
  ISM330DHCX_Init_Param.ODR = tempSensor->sensorStatus.ODR;
 80020b0:	6016      	str	r6, [r2, #0]
  ISM330DHCX_Init_Param.subSensorActive[0] = tempSensor->sensorStatus.subSensorStatus[0].isActive;
 80020b2:	461f      	mov	r7, r3
  ISM330DHCX_Init_Param.FS[1] = tempSensor->sensorStatus.subSensorStatus[1].FS;
 80020b4:	6090      	str	r0, [r2, #8]
  ISM330DHCX_Init_Param.subSensorActive[0] = tempSensor->sensorStatus.subSensorStatus[0].isActive;
 80020b6:	8293      	strh	r3, [r2, #20]
  ISM330DHCX_Init_Param.FS[0] = tempSensor->sensorStatus.subSensorStatus[0].FS;
 80020b8:	ed82 aa01 	vstr	s20, [r2, #4]
  
  /**********/ 
  
  /* LPS22HH */
  lps22hh_com_id = COM_AddSensor();
 80020bc:	f7ff fc24 	bl	8001908 <COM_AddSensor>
 80020c0:	f8df 91ec 	ldr.w	r9, [pc, #492]	; 80022b0 <set_default_description+0x894>
  
  /* SUBSENSOR 0 DESCRIPTOR */
  tempSensor->sensorDescriptor.subSensorDescriptor[0].id = 0;
  tempSensor->sensorDescriptor.subSensorDescriptor[0].sensorType = COM_TYPE_PRESS; 
  tempSensor->sensorDescriptor.subSensorDescriptor[0].dataPerSample = 1;
  strcpy(tempSensor->sensorDescriptor.subSensorDescriptor[0].unit, "hPa");
 80020c4:	4e6c      	ldr	r6, [pc, #432]	; (8002278 <set_default_description+0x85c>)
  lps22hh_com_id = COM_AddSensor();
 80020c6:	b2c0      	uxtb	r0, r0
 80020c8:	f889 0000 	strb.w	r0, [r9]
  tempSensor = COM_GetSensor(lps22hh_com_id);
 80020cc:	f7ff fc40 	bl	8001950 <COM_GetSensor>
  strcpy(tempSensor->sensorDescriptor.name, "LPS22HH"); 
 80020d0:	f8df c1e0 	ldr.w	ip, [pc, #480]	; 80022b4 <set_default_description+0x898>
  tempSensor->sensorDescriptor.subSensorDescriptor[0].FS[0] = 1260.0f; 
 80020d4:	ed9f 7a69 	vldr	s14, [pc, #420]	; 800227c <set_default_description+0x860>
  tempSensor->sensorDescriptor.ODR[4] = 75.0f;
 80020d8:	eddf 6a69 	vldr	s13, [pc, #420]	; 8002280 <set_default_description+0x864>
    /* SUBSENSOR 1 DESCRIPTOR */
  tempSensor->sensorDescriptor.subSensorDescriptor[1].id = 1;
  tempSensor->sensorDescriptor.subSensorDescriptor[1].sensorType = COM_TYPE_TEMP; 
  tempSensor->sensorDescriptor.subSensorDescriptor[1].dataPerSample = 1;
  strcpy(tempSensor->sensorDescriptor.subSensorDescriptor[1].unit, "Celsius");
  tempSensor->sensorDescriptor.subSensorDescriptor[1].FS[0] = 85.0f; 
 80020dc:	eddf 7a69 	vldr	s15, [pc, #420]	; 8002284 <set_default_description+0x868>
  /* SUBSENSOR 1 STATUS */
  tempSensor->sensorStatus.subSensorStatus[1].FS = 85.0f;
  tempSensor->sensorStatus.subSensorStatus[1].isActive = 1;
  tempSensor->sensorStatus.subSensorStatus[1].sensitivity = 1.0f;   
  
  LPS22HH_Init_Param.ODR = tempSensor->sensorStatus.ODR;
 80020e0:	4a69      	ldr	r2, [pc, #420]	; (8002288 <set_default_description+0x86c>)
  tempSensor = COM_GetSensor(lps22hh_com_id);
 80020e2:	4603      	mov	r3, r0
  strcpy(tempSensor->sensorDescriptor.name, "LPS22HH"); 
 80020e4:	e8bc 0003 	ldmia.w	ip!, {r0, r1}
  tempSensor->sensorDescriptor.dataType = DATA_TYPE_FLOAT;
 80020e8:	f04f 0506 	mov.w	r5, #6
 80020ec:	745d      	strb	r5, [r3, #17]
  tempSensor->sensorDescriptor.samplesPerTimestamp[0] = 0;
 80020ee:	f04f 757a 	mov.w	r5, #65536000	; 0x3e80000
  strcpy(tempSensor->sensorDescriptor.name, "LPS22HH"); 
 80020f2:	f8c3 0001 	str.w	r0, [r3, #1]
  tempSensor->sensorDescriptor.samplesPerTimestamp[0] = 0;
 80020f6:	655d      	str	r5, [r3, #84]	; 0x54
  strcpy(tempSensor->sensorDescriptor.subSensorDescriptor[0].unit, "hPa");
 80020f8:	6830      	ldr	r0, [r6, #0]
  strcpy(tempSensor->sensorDescriptor.name, "LPS22HH"); 
 80020fa:	f8c3 1005 	str.w	r1, [r3, #5]
  tempSensor->sensorDescriptor.nSubSensors = 2;
 80020fe:	f04f 0502 	mov.w	r5, #2
  tempSensor->sensorStatus.samplesPerTimestamp = 200;
 8002102:	f04f 01c8 	mov.w	r1, #200	; 0xc8
  strcpy(tempSensor->sensorDescriptor.subSensorDescriptor[1].unit, "Celsius");
 8002106:	4e61      	ldr	r6, [pc, #388]	; (800228c <set_default_description+0x870>)
  tempSensor->sensorDescriptor.nSubSensors = 2;
 8002108:	f883 5058 	strb.w	r5, [r3, #88]	; 0x58
  tempSensor->sensorDescriptor.subSensorDescriptor[0].id = 0;
 800210c:	f44f 6ea0 	mov.w	lr, #1280	; 0x500
  tempSensor->sensorDescriptor.subSensorDescriptor[1].id = 1;
 8002110:	f240 4c01 	movw	ip, #1025	; 0x401
  tempSensor->sensorStatus.samplesPerTimestamp = 200;
 8002114:	f8a3 11b8 	strh.w	r1, [r3, #440]	; 0x1b8
  tempSensor->sensorStatus.sdWriteBufferSize = WRITE_BUFFER_SIZE_LPS22HH;
 8002118:	f44f 55fa 	mov.w	r5, #8000	; 0x1f40
  tempSensor->sensorStatus.usbDataPacketSize = 1600;
 800211c:	f44f 61c8 	mov.w	r1, #1600	; 0x640
  tempSensor->sensorDescriptor.ODR[4] = 75.0f;
 8002120:	edc3 6a09 	vstr	s13, [r3, #36]	; 0x24
  tempSensor->sensorDescriptor.subSensorDescriptor[0].FS[0] = 1260.0f; 
 8002124:	ed83 7a1c 	vstr	s14, [r3, #112]	; 0x70
  tempSensor->sensorStatus.subSensorStatus[0].FS = 1260.0f;
 8002128:	ed83 7a72 	vstr	s14, [r3, #456]	; 0x1c8
  tempSensor->sensorDescriptor.subSensorDescriptor[0].id = 0;
 800212c:	f8a3 e05c 	strh.w	lr, [r3, #92]	; 0x5c
  tempSensor->sensorDescriptor.ODR[1] = 10.0f;
 8002130:	ed83 da06 	vstr	s26, [r3, #24]
  tempSensor->sensorDescriptor.ODR[0] = 1.0f;
 8002134:	edc3 9a05 	vstr	s19, [r3, #20]
  tempSensor->sensorDescriptor.ODR[2] = 25.0f;
 8002138:	edc3 ea07 	vstr	s29, [r3, #28]
  tempSensor->sensorDescriptor.ODR[3] = 50.0f;
 800213c:	ed83 ba08 	vstr	s22, [r3, #32]
  tempSensor->sensorDescriptor.ODR[5] = 100.0f;
 8002140:	ed83 9a0a 	vstr	s18, [r3, #40]	; 0x28
  tempSensor->sensorDescriptor.ODR[6] = 200.0f;
 8002144:	ed83 ca0b 	vstr	s24, [r3, #44]	; 0x2c
  tempSensor->sensorDescriptor.ODR[7] = COM_END_OF_LIST_FLOAT; 
 8002148:	ed83 8a0c 	vstr	s16, [r3, #48]	; 0x30
  tempSensor->sensorStatus.ODR = 200.0f;
 800214c:	ed83 ca6b 	vstr	s24, [r3, #428]	; 0x1ac
  tempSensor->sensorStatus.measuredODR = 0.0f;
 8002150:	edc3 8a6c 	vstr	s17, [r3, #432]	; 0x1b0
  tempSensor->sensorStatus.initialOffset = 0.0f;
 8002154:	edc3 8a6d 	vstr	s17, [r3, #436]	; 0x1b4
  tempSensor->sensorStatus.isActive = 0;
 8002158:	f883 a1ba 	strb.w	sl, [r3, #442]	; 0x1ba
  tempSensor->sensorStatus.sdWriteBufferSize = WRITE_BUFFER_SIZE_LPS22HH;
 800215c:	f8c3 51c0 	str.w	r5, [r3, #448]	; 0x1c0
  tempSensor->sensorStatus.comChannelNumber = -1;
 8002160:	f8a3 81c4 	strh.w	r8, [r3, #452]	; 0x1c4
  tempSensor->sensorDescriptor.subSensorDescriptor[0].dataPerSample = 1;
 8002164:	f883 405e 	strb.w	r4, [r3, #94]	; 0x5e
  tempSensor->sensorDescriptor.subSensorDescriptor[0].FS[1] = COM_END_OF_LIST_FLOAT;
 8002168:	ed83 8a1d 	vstr	s16, [r3, #116]	; 0x74
  tempSensor->sensorStatus.subSensorStatus[0].isActive = 1;
 800216c:	f883 41d0 	strb.w	r4, [r3, #464]	; 0x1d0
  tempSensor->sensorStatus.subSensorStatus[0].sensitivity = 1.0f;
 8002170:	edc3 9a73 	vstr	s19, [r3, #460]	; 0x1cc
  tempSensor->sensorStatus.usbDataPacketSize = 1600;
 8002174:	f8a3 11bc 	strh.w	r1, [r3, #444]	; 0x1bc
  strcpy(tempSensor->sensorDescriptor.subSensorDescriptor[0].unit, "hPa");
 8002178:	f8c3 005f 	str.w	r0, [r3, #95]	; 0x5f
  tempSensor->sensorDescriptor.subSensorDescriptor[1].id = 1;
 800217c:	f8a3 c0b0 	strh.w	ip, [r3, #176]	; 0xb0
  strcpy(tempSensor->sensorDescriptor.subSensorDescriptor[1].unit, "Celsius");
 8002180:	ce03      	ldmia	r6!, {r0, r1}
  LPS22HH_Init_Param.FS[0] = tempSensor->sensorStatus.subSensorStatus[0].FS;
  LPS22HH_Init_Param.FS[1] = tempSensor->sensorStatus.subSensorStatus[1].FS;
  LPS22HH_Init_Param.subSensorActive[0] = tempSensor->sensorStatus.subSensorStatus[0].isActive;
  LPS22HH_Init_Param.subSensorActive[1] = tempSensor->sensorStatus.subSensorStatus[1].isActive;  
  
  maxWriteTimeSensor[lps22hh_com_id] = 1000 * WRITE_BUFFER_SIZE_LPS22HH / (uint32_t)(LPS22HH_Init_Param.ODR * 8); 
 8002182:	f899 6000 	ldrb.w	r6, [r9]
  tempSensor->sensorDescriptor.subSensorDescriptor[1].FS[0] = 85.0f; 
 8002186:	edc3 7a31 	vstr	s15, [r3, #196]	; 0xc4
  tempSensor->sensorStatus.subSensorStatus[1].FS = 85.0f;
 800218a:	edc3 7a75 	vstr	s15, [r3, #468]	; 0x1d4
  strcpy(tempSensor->sensorDescriptor.subSensorDescriptor[1].unit, "Celsius");
 800218e:	f8c3 10b7 	str.w	r1, [r3, #183]	; 0xb7
  tempSensor->sensorStatus.subSensorStatus[1].sensitivity = 1.0f;   
 8002192:	edc3 9a76 	vstr	s19, [r3, #472]	; 0x1d8
  tempSensor->sensorDescriptor.subSensorDescriptor[1].dataPerSample = 1;
 8002196:	f883 40b2 	strb.w	r4, [r3, #178]	; 0xb2
  tempSensor->sensorDescriptor.subSensorDescriptor[1].FS[1] = COM_END_OF_LIST_FLOAT;
 800219a:	ed83 8a32 	vstr	s16, [r3, #200]	; 0xc8
  tempSensor->sensorStatus.subSensorStatus[1].isActive = 1;
 800219e:	f883 41dc 	strb.w	r4, [r3, #476]	; 0x1dc
  LPS22HH_Init_Param.subSensorActive[0] = tempSensor->sensorStatus.subSensorStatus[0].isActive;
 80021a2:	8297      	strh	r7, [r2, #20]
  strcpy(tempSensor->sensorDescriptor.subSensorDescriptor[1].unit, "Celsius");
 80021a4:	f8c3 00b3 	str.w	r0, [r3, #179]	; 0xb3
  maxWriteTimeSensor[lps22hh_com_id] = 1000 * WRITE_BUFFER_SIZE_LPS22HH / (uint32_t)(LPS22HH_Init_Param.ODR * 8); 
 80021a8:	f241 3388 	movw	r3, #5000	; 0x1388
  LPS22HH_Init_Param.FS[0] = tempSensor->sensorStatus.subSensorStatus[0].FS;
 80021ac:	ed82 7a01 	vstr	s14, [r2, #4]
  LPS22HH_Init_Param.FS[1] = tempSensor->sensorStatus.subSensorStatus[1].FS;
 80021b0:	edc2 7a02 	vstr	s15, [r2, #8]
  maxWriteTimeSensor[lps22hh_com_id] = 1000 * WRITE_BUFFER_SIZE_LPS22HH / (uint32_t)(LPS22HH_Init_Param.ODR * 8); 
 80021b4:	f84b 3026 	str.w	r3, [fp, r6, lsl #2]
  LPS22HH_Init_Param.ODR = tempSensor->sensorStatus.ODR;
 80021b8:	ed82 ca00 	vstr	s24, [r2]
  
  /**********/ 
  
  /* MP23ABS1 */
  mp23abs1_com_id = COM_AddSensor();
 80021bc:	f7ff fba4 	bl	8001908 <COM_AddSensor>
 80021c0:	4d33      	ldr	r5, [pc, #204]	; (8002290 <set_default_description+0x874>)
  
   tempSensor = COM_GetSensor(mp23abs1_com_id);
  
  /* SENSOR DESCRIPTOR */
  strcpy(tempSensor->sensorDescriptor.name, "MP23ABS1"); 
 80021c2:	4e34      	ldr	r6, [pc, #208]	; (8002294 <set_default_description+0x878>)
  tempSensor->sensorDescriptor.dataType = DATA_TYPE_INT16;  
  tempSensor->sensorDescriptor.ODR[0] = 192000.0f;
 80021c4:	f8df 90f0 	ldr.w	r9, [pc, #240]	; 80022b8 <set_default_description+0x89c>
  mp23abs1_com_id = COM_AddSensor();
 80021c8:	b2c0      	uxtb	r0, r0
 80021ca:	7028      	strb	r0, [r5, #0]
   tempSensor = COM_GetSensor(mp23abs1_com_id);
 80021cc:	f7ff fbc0 	bl	8001950 <COM_GetSensor>
 80021d0:	4603      	mov	r3, r0
  strcpy(tempSensor->sensorDescriptor.name, "MP23ABS1"); 
 80021d2:	ce03      	ldmia	r6!, {r0, r1}
  tempSensor->sensorDescriptor.dataType = DATA_TYPE_INT16;  
 80021d4:	f04f 0703 	mov.w	r7, #3
  
  /* SUBSENSOR 0 DESCRIPTOR */
  tempSensor->sensorDescriptor.subSensorDescriptor[0].id = 0;
  tempSensor->sensorDescriptor.subSensorDescriptor[0].sensorType = COM_TYPE_MIC; 
  tempSensor->sensorDescriptor.subSensorDescriptor[0].dataPerSample = 1;
  strcpy(tempSensor->sensorDescriptor.subSensorDescriptor[0].unit, "Waveform");
 80021d8:	4a14      	ldr	r2, [pc, #80]	; (800222c <set_default_description+0x810>)
  tempSensor->sensorDescriptor.dataType = DATA_TYPE_INT16;  
 80021da:	745f      	strb	r7, [r3, #17]
  tempSensor->sensorDescriptor.samplesPerTimestamp[0] = 0;
 80021dc:	f04f 777a 	mov.w	r7, #65536000	; 0x3e80000
  strcpy(tempSensor->sensorDescriptor.name, "MP23ABS1"); 
 80021e0:	f8c3 0001 	str.w	r0, [r3, #1]
 80021e4:	f8c3 1005 	str.w	r1, [r3, #5]
  tempSensor->sensorDescriptor.samplesPerTimestamp[0] = 0;
 80021e8:	655f      	str	r7, [r3, #84]	; 0x54
  strcpy(tempSensor->sensorDescriptor.subSensorDescriptor[0].unit, "Waveform");
 80021ea:	ca03      	ldmia	r2!, {r0, r1}
  tempSensor->sensorStatus.samplesPerTimestamp = 1000;
 80021ec:	f44f 777a 	mov.w	r7, #1000	; 0x3e8
  /* SUBSENSOR 0 STATUS */
  tempSensor->sensorStatus.subSensorStatus[0].FS = 130.0f;
  tempSensor->sensorStatus.subSensorStatus[0].isActive = 1;
  tempSensor->sensorStatus.subSensorStatus[0].sensitivity = 1.0;
  
  MP23ABS1_Init_Param.ODR = tempSensor->sensorStatus.ODR;
 80021f0:	f8df c0c8 	ldr.w	ip, [pc, #200]	; 80022bc <set_default_description+0x8a0>
  strcpy(tempSensor->sensorDescriptor.subSensorDescriptor[0].unit, "Waveform");
 80021f4:	9a03      	ldr	r2, [sp, #12]
  tempSensor->sensorStatus.samplesPerTimestamp = 1000;
 80021f6:	f8a3 71b8 	strh.w	r7, [r3, #440]	; 0x1b8
  tempSensor->sensorStatus.usbDataPacketSize = 4096;
 80021fa:	f44f 5780 	mov.w	r7, #4096	; 0x1000
  tempSensor->sensorDescriptor.subSensorDescriptor[0].FS[0] = 130.0f; 
 80021fe:	f8df e0c0 	ldr.w	lr, [pc, #192]	; 80022c0 <set_default_description+0x8a4>
  strcpy(tempSensor->sensorDescriptor.name, "MP23ABS1"); 
 8002202:	7836      	ldrb	r6, [r6, #0]
  strcpy(tempSensor->sensorDescriptor.subSensorDescriptor[0].unit, "Waveform");
 8002204:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
  tempSensor->sensorStatus.usbDataPacketSize = 4096;
 8002208:	f8a3 71bc 	strh.w	r7, [r3, #444]	; 0x1bc
  tempSensor->sensorStatus.sdWriteBufferSize = WRITE_BUFFER_SIZE_MP23ABS1;
 800220c:	f64f 52e8 	movw	r2, #65000	; 0xfde8
  tempSensor->sensorDescriptor.subSensorDescriptor[0].id = 0;
 8002210:	f44f 67e0 	mov.w	r7, #1792	; 0x700
  strcpy(tempSensor->sensorDescriptor.subSensorDescriptor[0].unit, "Waveform");
 8002214:	f8c3 1063 	str.w	r1, [r3, #99]	; 0x63
  tempSensor->sensorDescriptor.subSensorDescriptor[0].FS[0] = 130.0f; 
 8002218:	f8c3 e070 	str.w	lr, [r3, #112]	; 0x70
  MP23ABS1_Init_Param.ODR = tempSensor->sensorStatus.ODR;
 800221c:	f8cc 9000 	str.w	r9, [ip]
  tempSensor->sensorDescriptor.ODR[1] = COM_END_OF_LIST_FLOAT;  
 8002220:	ed83 8a06 	vstr	s16, [r3, #24]
 8002224:	e04e      	b.n	80022c4 <set_default_description+0x8a8>
 8002226:	bf00      	nop
 8002228:	2001764c 	.word	0x2001764c
 800222c:	0801c09c 	.word	0x0801c09c
 8002230:	42f50000 	.word	0x42f50000
 8002234:	0801c090 	.word	0x0801c090
 8002238:	200161c8 	.word	0x200161c8
 800223c:	20017645 	.word	0x20017645
 8002240:	42d00000 	.word	0x42d00000
 8002244:	43500000 	.word	0x43500000
 8002248:	0801c0a8 	.word	0x0801c0a8
 800224c:	44504000 	.word	0x44504000
 8002250:	41d00000 	.word	0x41d00000
 8002254:	44d06000 	.word	0x44d06000
 8002258:	45d05800 	.word	0x45d05800
 800225c:	45505000 	.word	0x45505000
 8002260:	0801c0b4 	.word	0x0801c0b4
 8002264:	42fa0000 	.word	0x42fa0000
 8002268:	43fa0000 	.word	0x43fa0000
 800226c:	457a0000 	.word	0x457a0000
 8002270:	200172fc 	.word	0x200172fc
 8002274:	430c0000 	.word	0x430c0000
 8002278:	0801c0c4 	.word	0x0801c0c4
 800227c:	449d8000 	.word	0x449d8000
 8002280:	42960000 	.word	0x42960000
 8002284:	42aa0000 	.word	0x42aa0000
 8002288:	20017318 	.word	0x20017318
 800228c:	0801c06c 	.word	0x0801c06c
 8002290:	20017604 	.word	0x20017604
 8002294:	0801c0c8 	.word	0x0801c0c8
 8002298:	473b8000 	.word	0x473b8000
 800229c:	42500000 	.word	0x42500000
 80022a0:	43d08000 	.word	0x43d08000
 80022a4:	447a0000 	.word	0x447a0000
 80022a8:	44fa0000 	.word	0x44fa0000
 80022ac:	437a0000 	.word	0x437a0000
 80022b0:	2001765d 	.word	0x2001765d
 80022b4:	0801c0bc 	.word	0x0801c0bc
 80022b8:	483b8000 	.word	0x483b8000
 80022bc:	200177a8 	.word	0x200177a8
 80022c0:	43020000 	.word	0x43020000
  tempSensor->sensorDescriptor.nSubSensors = 1;
 80022c4:	f883 4058 	strb.w	r4, [r3, #88]	; 0x58
  tempSensor->sensorStatus.measuredODR = 0.0f;
 80022c8:	edc3 8a6c 	vstr	s17, [r3, #432]	; 0x1b0
  tempSensor->sensorStatus.initialOffset = 0.0f;
 80022cc:	edc3 8a6d 	vstr	s17, [r3, #436]	; 0x1b4
  tempSensor->sensorStatus.isActive = 0;
 80022d0:	f883 a1ba 	strb.w	sl, [r3, #442]	; 0x1ba
  tempSensor->sensorStatus.comChannelNumber = -1;
 80022d4:	f8a3 81c4 	strh.w	r8, [r3, #452]	; 0x1c4
  tempSensor->sensorDescriptor.subSensorDescriptor[0].id = 0;
 80022d8:	f8a3 705c 	strh.w	r7, [r3, #92]	; 0x5c
  tempSensor->sensorDescriptor.subSensorDescriptor[0].dataPerSample = 1;
 80022dc:	f883 405e 	strb.w	r4, [r3, #94]	; 0x5e
  tempSensor->sensorDescriptor.subSensorDescriptor[0].FS[1] = COM_END_OF_LIST_FLOAT;
 80022e0:	ed83 8a1d 	vstr	s16, [r3, #116]	; 0x74
  tempSensor->sensorStatus.subSensorStatus[0].isActive = 1;
 80022e4:	f883 41d0 	strb.w	r4, [r3, #464]	; 0x1d0
  tempSensor->sensorStatus.subSensorStatus[0].sensitivity = 1.0;
 80022e8:	edc3 9a73 	vstr	s19, [r3, #460]	; 0x1cc
  strcpy(tempSensor->sensorDescriptor.name, "MP23ABS1"); 
 80022ec:	725e      	strb	r6, [r3, #9]
  tempSensor->sensorStatus.sdWriteBufferSize = WRITE_BUFFER_SIZE_MP23ABS1;
 80022ee:	f8c3 21c0 	str.w	r2, [r3, #448]	; 0x1c0
  strcpy(tempSensor->sensorDescriptor.subSensorDescriptor[0].unit, "Waveform");
 80022f2:	f8c3 005f 	str.w	r0, [r3, #95]	; 0x5f
  tempSensor->sensorDescriptor.ODR[0] = 192000.0f;
 80022f6:	f8c3 9014 	str.w	r9, [r3, #20]
  tempSensor->sensorStatus.ODR = 192000.0f;
 80022fa:	f8c3 91ac 	str.w	r9, [r3, #428]	; 0x1ac
  tempSensor->sensorStatus.subSensorStatus[0].FS = 130.0f;
 80022fe:	f8c3 e1c8 	str.w	lr, [r3, #456]	; 0x1c8
  MP23ABS1_Init_Param.FS[0] = tempSensor->sensorStatus.subSensorStatus[0].FS;
  MP23ABS1_Init_Param.subSensorActive[0] = tempSensor->sensorStatus.subSensorStatus[0].isActive;  
    
  maxWriteTimeSensor[mp23abs1_com_id] = 1000 * WRITE_BUFFER_SIZE_MP23ABS1 / (uint32_t)(MP23ABS1_Init_Param.ODR * 2); 
 8002302:	782b      	ldrb	r3, [r5, #0]
  MP23ABS1_Init_Param.FS[0] = tempSensor->sensorStatus.subSensorStatus[0].FS;
 8002304:	f8cc e004 	str.w	lr, [ip, #4]
  maxWriteTimeSensor[mp23abs1_com_id] = 1000 * WRITE_BUFFER_SIZE_MP23ABS1 / (uint32_t)(MP23ABS1_Init_Param.ODR * 2); 
 8002308:	22a9      	movs	r2, #169	; 0xa9
 800230a:	f84b 2023 	str.w	r2, [fp, r3, lsl #2]
  MP23ABS1_Init_Param.subSensorActive[0] = tempSensor->sensorStatus.subSensorStatus[0].isActive;  
 800230e:	f88c 4014 	strb.w	r4, [ip, #20]
  
  /**********/ 
  
  /* STTS751 */
  stts751_com_id = COM_AddSensor();
 8002312:	f7ff faf9 	bl	8001908 <COM_AddSensor>
 8002316:	4b2b      	ldr	r3, [pc, #172]	; (80023c4 <set_default_description+0x9a8>)
  /* SUBSENSOR 0 STATUS */
  tempSensor->sensorStatus.subSensorStatus[0].FS = 100.0f;
  tempSensor->sensorStatus.subSensorStatus[0].isActive = 1;
  tempSensor->sensorStatus.subSensorStatus[0].sensitivity = 1.0;
  
  STTS751_Init_Param.ODR = tempSensor->sensorStatus.ODR;
 8002318:	4d2b      	ldr	r5, [pc, #172]	; (80023c8 <set_default_description+0x9ac>)
  stts751_com_id = COM_AddSensor();
 800231a:	b2c0      	uxtb	r0, r0
 800231c:	7018      	strb	r0, [r3, #0]
  tempSensor = COM_GetSensor(stts751_com_id);
 800231e:	f7ff fb17 	bl	8001950 <COM_GetSensor>
  strcpy(tempSensor->sensorDescriptor.name, "STTS751"); 
 8002322:	4a2a      	ldr	r2, [pc, #168]	; (80023cc <set_default_description+0x9b0>)
  tempSensor = COM_GetSensor(stts751_com_id);
 8002324:	4603      	mov	r3, r0
  strcpy(tempSensor->sensorDescriptor.name, "STTS751"); 
 8002326:	ca03      	ldmia	r2!, {r0, r1}
  strcpy(tempSensor->sensorDescriptor.subSensorDescriptor[0].unit, "Celsius");
 8002328:	4a29      	ldr	r2, [pc, #164]	; (80023d0 <set_default_description+0x9b4>)
  strcpy(tempSensor->sensorDescriptor.name, "STTS751"); 
 800232a:	f8c3 0001 	str.w	r0, [r3, #1]
 800232e:	f8c3 1005 	str.w	r1, [r3, #5]
  tempSensor->sensorStatus.usbDataPacketSize = 16;
 8002332:	f04f 0710 	mov.w	r7, #16
  strcpy(tempSensor->sensorDescriptor.subSensorDescriptor[0].unit, "Celsius");
 8002336:	ca03      	ldmia	r2!, {r0, r1}
  tempSensor->sensorStatus.usbDataPacketSize = 16;
 8002338:	f8a3 71bc 	strh.w	r7, [r3, #444]	; 0x1bc
  tempSensor->sensorDescriptor.dataType = DATA_TYPE_FLOAT;  
 800233c:	f04f 0606 	mov.w	r6, #6
  tempSensor->sensorDescriptor.samplesPerTimestamp[0] = 0;
 8002340:	f04f 777a 	mov.w	r7, #65536000	; 0x3e80000
  tempSensor->sensorDescriptor.dataType = DATA_TYPE_FLOAT;  
 8002344:	745e      	strb	r6, [r3, #17]
  tempSensor->sensorDescriptor.samplesPerTimestamp[0] = 0;
 8002346:	655f      	str	r7, [r3, #84]	; 0x54
  tempSensor->sensorStatus.samplesPerTimestamp = 20;
 8002348:	2214      	movs	r2, #20
  tempSensor->sensorStatus.sdWriteBufferSize = WRITE_BUFFER_SIZE_STTS751;
 800234a:	2764      	movs	r7, #100	; 0x64
  tempSensor->sensorDescriptor.subSensorDescriptor[0].id = 0;
 800234c:	f44f 6680 	mov.w	r6, #1024	; 0x400
  tempSensor->sensorDescriptor.ODR[0] = 1.0f;
 8002350:	edc3 9a05 	vstr	s19, [r3, #20]
  tempSensor->sensorDescriptor.ODR[1] = 2.0f; 
 8002354:	edc3 ba06 	vstr	s23, [r3, #24]
  tempSensor->sensorDescriptor.ODR[2] = 4.0f; 
 8002358:	edc3 aa07 	vstr	s21, [r3, #28]
  tempSensor->sensorDescriptor.ODR[3] = COM_END_OF_LIST_FLOAT;  
 800235c:	ed83 8a08 	vstr	s16, [r3, #32]
  tempSensor->sensorDescriptor.nSubSensors = 1;
 8002360:	f883 4058 	strb.w	r4, [r3, #88]	; 0x58
  tempSensor->sensorStatus.ODR = 4.0f;
 8002364:	edc3 aa6b 	vstr	s21, [r3, #428]	; 0x1ac
  tempSensor->sensorStatus.measuredODR = 0.0f;
 8002368:	edc3 8a6c 	vstr	s17, [r3, #432]	; 0x1b0
  tempSensor->sensorStatus.initialOffset = 0.0f;
 800236c:	edc3 8a6d 	vstr	s17, [r3, #436]	; 0x1b4
  tempSensor->sensorStatus.isActive = 0;
 8002370:	f883 a1ba 	strb.w	sl, [r3, #442]	; 0x1ba
  tempSensor->sensorStatus.sdWriteBufferSize = WRITE_BUFFER_SIZE_STTS751;
 8002374:	f8c3 71c0 	str.w	r7, [r3, #448]	; 0x1c0
  tempSensor->sensorStatus.comChannelNumber = -1;
 8002378:	f8a3 81c4 	strh.w	r8, [r3, #452]	; 0x1c4
  tempSensor->sensorDescriptor.subSensorDescriptor[0].id = 0;
 800237c:	f8a3 605c 	strh.w	r6, [r3, #92]	; 0x5c
  tempSensor->sensorDescriptor.subSensorDescriptor[0].dataPerSample = 1;
 8002380:	f883 405e 	strb.w	r4, [r3, #94]	; 0x5e
  tempSensor->sensorDescriptor.subSensorDescriptor[0].FS[0] = 100.0f; 
 8002384:	ed83 9a1c 	vstr	s18, [r3, #112]	; 0x70
  tempSensor->sensorDescriptor.subSensorDescriptor[0].FS[1] = COM_END_OF_LIST_FLOAT;
 8002388:	ed83 8a1d 	vstr	s16, [r3, #116]	; 0x74
  tempSensor->sensorStatus.subSensorStatus[0].FS = 100.0f;
 800238c:	ed83 9a72 	vstr	s18, [r3, #456]	; 0x1c8
  tempSensor->sensorStatus.subSensorStatus[0].isActive = 1;
 8002390:	f883 41d0 	strb.w	r4, [r3, #464]	; 0x1d0
  tempSensor->sensorStatus.subSensorStatus[0].sensitivity = 1.0;
 8002394:	edc3 9a73 	vstr	s19, [r3, #460]	; 0x1cc
  tempSensor->sensorStatus.samplesPerTimestamp = 20;
 8002398:	f8a3 21b8 	strh.w	r2, [r3, #440]	; 0x1b8
  strcpy(tempSensor->sensorDescriptor.subSensorDescriptor[0].unit, "Celsius");
 800239c:	f8c3 005f 	str.w	r0, [r3, #95]	; 0x5f
 80023a0:	f8c3 1063 	str.w	r1, [r3, #99]	; 0x63
  STTS751_Init_Param.FS[0] = tempSensor->sensorStatus.subSensorStatus[0].FS;
  STTS751_Init_Param.subSensorActive[0] = tempSensor->sensorStatus.subSensorStatus[0].isActive;  

  maxWriteTimeSensor[stts751_com_id] = 1000 * WRITE_BUFFER_SIZE_STTS751 / (uint32_t)(STTS751_Init_Param.ODR * 4); 
 80023a4:	4b07      	ldr	r3, [pc, #28]	; (80023c4 <set_default_description+0x9a8>)
  STTS751_Init_Param.FS[0] = tempSensor->sensorStatus.subSensorStatus[0].FS;
 80023a6:	ed85 9a01 	vstr	s18, [r5, #4]
  STTS751_Init_Param.ODR = tempSensor->sensorStatus.ODR;
 80023aa:	edc5 aa00 	vstr	s21, [r5]
  STTS751_Init_Param.subSensorActive[0] = tempSensor->sensorStatus.subSensorStatus[0].isActive;  
 80023ae:	752c      	strb	r4, [r5, #20]
  maxWriteTimeSensor[stts751_com_id] = 1000 * WRITE_BUFFER_SIZE_STTS751 / (uint32_t)(STTS751_Init_Param.ODR * 4); 
 80023b0:	781b      	ldrb	r3, [r3, #0]
 80023b2:	f641 026a 	movw	r2, #6250	; 0x186a
 80023b6:	f84b 2023 	str.w	r2, [fp, r3, lsl #2]

}
 80023ba:	b005      	add	sp, #20
 80023bc:	ecbd 8b0e 	vpop	{d8-d14}
 80023c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80023c4:	2001765c 	.word	0x2001765c
 80023c8:	20019aa4 	.word	0x20019aa4
 80023cc:	0801c0d4 	.word	0x0801c0d4
 80023d0:	0801c06c 	.word	0x0801c06c

080023d4 <update_sensorStatus>:

void update_sensorStatus(COM_SensorStatus_t * oldSensorStatus, COM_SensorStatus_t * newSensorStatus, uint8_t sID)
{
  /* Check differencies between oldSensorStatus and newSensorStatus, act properly*/
  /* ODR */
  if(oldSensorStatus->ODR != newSensorStatus->ODR)
 80023d4:	ed91 0a00 	vldr	s0, [r1]
 80023d8:	edd0 7a00 	vldr	s15, [r0]
 80023dc:	eef4 7a40 	vcmp.f32	s15, s0
 80023e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
{
 80023e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80023e8:	4604      	mov	r4, r0
 80023ea:	460d      	mov	r5, r1
 80023ec:	4616      	mov	r6, r2
  if(oldSensorStatus->ODR != newSensorStatus->ODR)
 80023ee:	f040 80f2 	bne.w	80025d6 <update_sensorStatus+0x202>
      oldSensorStatus->ODR = newSensorStatus->ODR; /* Todo Setters and getters */
    }
  }
  
  /* isActive */
  if(oldSensorStatus->isActive != newSensorStatus->isActive)
 80023f2:	7bab      	ldrb	r3, [r5, #14]
 80023f4:	7ba2      	ldrb	r2, [r4, #14]
 80023f6:	429a      	cmp	r2, r3
  {
    oldSensorStatus->isActive = newSensorStatus->isActive;
 80023f8:	bf18      	it	ne
 80023fa:	73a3      	strbne	r3, [r4, #14]
  }
  
  /* subsensor: FS, is Active*/
  for (int i = 0; i < COM_GetSubSensorNumber(sID); i++)
 80023fc:	4630      	mov	r0, r6
 80023fe:	f7ff fadb 	bl	80019b8 <COM_GetSubSensorNumber>
 8002402:	2800      	cmp	r0, #0
 8002404:	f000 809b 	beq.w	800253e <update_sensorStatus+0x16a>
  {
    if(oldSensorStatus->subSensorStatus[i].FS != newSensorStatus->subSensorStatus[i].FS)
 8002408:	edd5 7a07 	vldr	s15, [r5, #28]
 800240c:	ed94 7a07 	vldr	s14, [r4, #28]
    {
      oldSensorStatus->subSensorStatus[i].FS = newSensorStatus->subSensorStatus[i].FS; /* Todo Setters and getters */
    }
    
    if(oldSensorStatus->subSensorStatus[i].isActive != newSensorStatus->subSensorStatus[i].isActive)
 8002410:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
    if(oldSensorStatus->subSensorStatus[i].FS != newSensorStatus->subSensorStatus[i].FS)
 8002414:	eef4 7a47 	vcmp.f32	s15, s14
 8002418:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
      oldSensorStatus->subSensorStatus[i].FS = newSensorStatus->subSensorStatus[i].FS; /* Todo Setters and getters */
 800241c:	bf18      	it	ne
 800241e:	edc4 7a07 	vstrne	s15, [r4, #28]
    if(oldSensorStatus->subSensorStatus[i].isActive != newSensorStatus->subSensorStatus[i].isActive)
 8002422:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
 8002426:	429a      	cmp	r2, r3
    {
      oldSensorStatus->subSensorStatus[i].isActive = newSensorStatus->subSensorStatus[i].isActive; /* Todo Setters and getters */
 8002428:	bf18      	it	ne
 800242a:	f884 3024 	strbne.w	r3, [r4, #36]	; 0x24
  for (int i = 0; i < COM_GetSubSensorNumber(sID); i++)
 800242e:	4630      	mov	r0, r6
 8002430:	f7ff fac2 	bl	80019b8 <COM_GetSubSensorNumber>
 8002434:	2801      	cmp	r0, #1
 8002436:	f240 8082 	bls.w	800253e <update_sensorStatus+0x16a>
    if(oldSensorStatus->subSensorStatus[i].FS != newSensorStatus->subSensorStatus[i].FS)
 800243a:	edd5 7a0a 	vldr	s15, [r5, #40]	; 0x28
 800243e:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
    if(oldSensorStatus->subSensorStatus[i].isActive != newSensorStatus->subSensorStatus[i].isActive)
 8002442:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
    if(oldSensorStatus->subSensorStatus[i].FS != newSensorStatus->subSensorStatus[i].FS)
 8002446:	eeb4 7a67 	vcmp.f32	s14, s15
 800244a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
      oldSensorStatus->subSensorStatus[i].FS = newSensorStatus->subSensorStatus[i].FS; /* Todo Setters and getters */
 800244e:	bf18      	it	ne
 8002450:	edc4 7a0a 	vstrne	s15, [r4, #40]	; 0x28
    if(oldSensorStatus->subSensorStatus[i].isActive != newSensorStatus->subSensorStatus[i].isActive)
 8002454:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
 8002458:	429a      	cmp	r2, r3
      oldSensorStatus->subSensorStatus[i].isActive = newSensorStatus->subSensorStatus[i].isActive; /* Todo Setters and getters */
 800245a:	bf18      	it	ne
 800245c:	f884 3030 	strbne.w	r3, [r4, #48]	; 0x30
  for (int i = 0; i < COM_GetSubSensorNumber(sID); i++)
 8002460:	4630      	mov	r0, r6
 8002462:	f7ff faa9 	bl	80019b8 <COM_GetSubSensorNumber>
 8002466:	2802      	cmp	r0, #2
 8002468:	d969      	bls.n	800253e <update_sensorStatus+0x16a>
    if(oldSensorStatus->subSensorStatus[i].FS != newSensorStatus->subSensorStatus[i].FS)
 800246a:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 800246e:	ed94 7a0d 	vldr	s14, [r4, #52]	; 0x34
    if(oldSensorStatus->subSensorStatus[i].isActive != newSensorStatus->subSensorStatus[i].isActive)
 8002472:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
    if(oldSensorStatus->subSensorStatus[i].FS != newSensorStatus->subSensorStatus[i].FS)
 8002476:	eeb4 7a67 	vcmp.f32	s14, s15
 800247a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
      oldSensorStatus->subSensorStatus[i].FS = newSensorStatus->subSensorStatus[i].FS; /* Todo Setters and getters */
 800247e:	bf18      	it	ne
 8002480:	edc4 7a0d 	vstrne	s15, [r4, #52]	; 0x34
    if(oldSensorStatus->subSensorStatus[i].isActive != newSensorStatus->subSensorStatus[i].isActive)
 8002484:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
 8002488:	429a      	cmp	r2, r3
      oldSensorStatus->subSensorStatus[i].isActive = newSensorStatus->subSensorStatus[i].isActive; /* Todo Setters and getters */
 800248a:	bf18      	it	ne
 800248c:	f884 303c 	strbne.w	r3, [r4, #60]	; 0x3c
  for (int i = 0; i < COM_GetSubSensorNumber(sID); i++)
 8002490:	4630      	mov	r0, r6
 8002492:	f7ff fa91 	bl	80019b8 <COM_GetSubSensorNumber>
 8002496:	2803      	cmp	r0, #3
 8002498:	d951      	bls.n	800253e <update_sensorStatus+0x16a>
    if(oldSensorStatus->subSensorStatus[i].FS != newSensorStatus->subSensorStatus[i].FS)
 800249a:	edd5 7a10 	vldr	s15, [r5, #64]	; 0x40
 800249e:	ed94 7a10 	vldr	s14, [r4, #64]	; 0x40
    if(oldSensorStatus->subSensorStatus[i].isActive != newSensorStatus->subSensorStatus[i].isActive)
 80024a2:	f894 2048 	ldrb.w	r2, [r4, #72]	; 0x48
    if(oldSensorStatus->subSensorStatus[i].FS != newSensorStatus->subSensorStatus[i].FS)
 80024a6:	eeb4 7a67 	vcmp.f32	s14, s15
 80024aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
      oldSensorStatus->subSensorStatus[i].FS = newSensorStatus->subSensorStatus[i].FS; /* Todo Setters and getters */
 80024ae:	bf18      	it	ne
 80024b0:	edc4 7a10 	vstrne	s15, [r4, #64]	; 0x40
    if(oldSensorStatus->subSensorStatus[i].isActive != newSensorStatus->subSensorStatus[i].isActive)
 80024b4:	f895 3048 	ldrb.w	r3, [r5, #72]	; 0x48
 80024b8:	429a      	cmp	r2, r3
      oldSensorStatus->subSensorStatus[i].isActive = newSensorStatus->subSensorStatus[i].isActive; /* Todo Setters and getters */
 80024ba:	bf18      	it	ne
 80024bc:	f884 3048 	strbne.w	r3, [r4, #72]	; 0x48
  for (int i = 0; i < COM_GetSubSensorNumber(sID); i++)
 80024c0:	4630      	mov	r0, r6
 80024c2:	f7ff fa79 	bl	80019b8 <COM_GetSubSensorNumber>
 80024c6:	2804      	cmp	r0, #4
 80024c8:	d939      	bls.n	800253e <update_sensorStatus+0x16a>
    if(oldSensorStatus->subSensorStatus[i].FS != newSensorStatus->subSensorStatus[i].FS)
 80024ca:	edd5 7a13 	vldr	s15, [r5, #76]	; 0x4c
 80024ce:	ed94 7a13 	vldr	s14, [r4, #76]	; 0x4c
    if(oldSensorStatus->subSensorStatus[i].isActive != newSensorStatus->subSensorStatus[i].isActive)
 80024d2:	f894 2054 	ldrb.w	r2, [r4, #84]	; 0x54
    if(oldSensorStatus->subSensorStatus[i].FS != newSensorStatus->subSensorStatus[i].FS)
 80024d6:	eeb4 7a67 	vcmp.f32	s14, s15
 80024da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
      oldSensorStatus->subSensorStatus[i].FS = newSensorStatus->subSensorStatus[i].FS; /* Todo Setters and getters */
 80024de:	bf18      	it	ne
 80024e0:	edc4 7a13 	vstrne	s15, [r4, #76]	; 0x4c
    if(oldSensorStatus->subSensorStatus[i].isActive != newSensorStatus->subSensorStatus[i].isActive)
 80024e4:	f895 3054 	ldrb.w	r3, [r5, #84]	; 0x54
 80024e8:	429a      	cmp	r2, r3
      oldSensorStatus->subSensorStatus[i].isActive = newSensorStatus->subSensorStatus[i].isActive; /* Todo Setters and getters */
 80024ea:	bf18      	it	ne
 80024ec:	f884 3054 	strbne.w	r3, [r4, #84]	; 0x54
  for (int i = 0; i < COM_GetSubSensorNumber(sID); i++)
 80024f0:	4630      	mov	r0, r6
 80024f2:	f7ff fa61 	bl	80019b8 <COM_GetSubSensorNumber>
 80024f6:	f04f 0905 	mov.w	r9, #5
 80024fa:	4548      	cmp	r0, r9
 80024fc:	4627      	mov	r7, r4
 80024fe:	46a8      	mov	r8, r5
 8002500:	dd1d      	ble.n	800253e <update_sensorStatus+0x16a>
    if(oldSensorStatus->subSensorStatus[i].FS != newSensorStatus->subSensorStatus[i].FS)
 8002502:	edd8 7a16 	vldr	s15, [r8, #88]	; 0x58
 8002506:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
    if(oldSensorStatus->subSensorStatus[i].isActive != newSensorStatus->subSensorStatus[i].isActive)
 800250a:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
    if(oldSensorStatus->subSensorStatus[i].FS != newSensorStatus->subSensorStatus[i].FS)
 800250e:	eeb4 7a67 	vcmp.f32	s14, s15
 8002512:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
      oldSensorStatus->subSensorStatus[i].FS = newSensorStatus->subSensorStatus[i].FS; /* Todo Setters and getters */
 8002516:	bf18      	it	ne
 8002518:	edc7 7a16 	vstrne	s15, [r7, #88]	; 0x58
    if(oldSensorStatus->subSensorStatus[i].isActive != newSensorStatus->subSensorStatus[i].isActive)
 800251c:	f898 3060 	ldrb.w	r3, [r8, #96]	; 0x60
 8002520:	429a      	cmp	r2, r3
      oldSensorStatus->subSensorStatus[i].isActive = newSensorStatus->subSensorStatus[i].isActive; /* Todo Setters and getters */
 8002522:	bf18      	it	ne
 8002524:	f887 3060 	strbne.w	r3, [r7, #96]	; 0x60
  for (int i = 0; i < COM_GetSubSensorNumber(sID); i++)
 8002528:	4630      	mov	r0, r6
 800252a:	f7ff fa45 	bl	80019b8 <COM_GetSubSensorNumber>
 800252e:	f109 0901 	add.w	r9, r9, #1
 8002532:	4548      	cmp	r0, r9
 8002534:	f107 070c 	add.w	r7, r7, #12
 8002538:	f108 080c 	add.w	r8, r8, #12
 800253c:	dce1      	bgt.n	8002502 <update_sensorStatus+0x12e>
    }
  }
  
  if (sID == iis3dwb_com_id)
 800253e:	4b30      	ldr	r3, [pc, #192]	; (8002600 <update_sensorStatus+0x22c>)
 8002540:	781b      	ldrb	r3, [r3, #0]
 8002542:	42b3      	cmp	r3, r6
 8002544:	d03a      	beq.n	80025bc <update_sensorStatus+0x1e8>
  {
    oldSensorStatus->subSensorStatus[0].sensitivity = 0.061f *  oldSensorStatus->subSensorStatus[0].FS/2;
  }
  else if (sID == iis2dh_com_id)
 8002546:	4b2f      	ldr	r3, [pc, #188]	; (8002604 <update_sensorStatus+0x230>)
 8002548:	781b      	ldrb	r3, [r3, #0]
 800254a:	42b3      	cmp	r3, r6
 800254c:	d029      	beq.n	80025a2 <update_sensorStatus+0x1ce>
    else
    {
      oldSensorStatus->subSensorStatus[0].sensitivity = 0.0625f *  oldSensorStatus->subSensorStatus[0].FS/2;
    }
  }
  else if (sID == ism330dhcx_com_id)
 800254e:	4b2e      	ldr	r3, [pc, #184]	; (8002608 <update_sensorStatus+0x234>)
 8002550:	781b      	ldrb	r3, [r3, #0]
 8002552:	42b3      	cmp	r3, r6
 8002554:	d117      	bne.n	8002586 <update_sensorStatus+0x1b2>
  {        
    oldSensorStatus->subSensorStatus[0].sensitivity = 0.061f *  oldSensorStatus->subSensorStatus[0].FS/2;
    oldSensorStatus->subSensorStatus[1].sensitivity = 4.375f * oldSensorStatus->subSensorStatus[1].FS/125.0f;
 8002556:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 800255a:	eddf 5a2c 	vldr	s11, [pc, #176]	; 800260c <update_sensorStatus+0x238>
    oldSensorStatus->subSensorStatus[0].sensitivity = 0.061f *  oldSensorStatus->subSensorStatus[0].FS/2;
 800255e:	eddf 6a2c 	vldr	s13, [pc, #176]	; 8002610 <update_sensorStatus+0x23c>
    oldSensorStatus->subSensorStatus[1].sensitivity = 4.375f * oldSensorStatus->subSensorStatus[1].FS/125.0f;
 8002562:	ed9f 6a2c 	vldr	s12, [pc, #176]	; 8002614 <update_sensorStatus+0x240>
    oldSensorStatus->subSensorStatus[0].sensitivity = 0.061f *  oldSensorStatus->subSensorStatus[0].FS/2;
 8002566:	edd4 7a07 	vldr	s15, [r4, #28]
    oldSensorStatus->subSensorStatus[1].sensitivity = 4.375f * oldSensorStatus->subSensorStatus[1].FS/125.0f;
 800256a:	ee27 7a25 	vmul.f32	s14, s14, s11
    oldSensorStatus->subSensorStatus[0].sensitivity = 0.061f *  oldSensorStatus->subSensorStatus[0].FS/2;
 800256e:	ee67 7aa6 	vmul.f32	s15, s15, s13
    oldSensorStatus->subSensorStatus[1].sensitivity = 4.375f * oldSensorStatus->subSensorStatus[1].FS/125.0f;
 8002572:	eec7 6a06 	vdiv.f32	s13, s14, s12
    oldSensorStatus->subSensorStatus[0].sensitivity = 0.061f *  oldSensorStatus->subSensorStatus[0].FS/2;
 8002576:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800257a:	ee67 7a87 	vmul.f32	s15, s15, s14
    oldSensorStatus->subSensorStatus[1].sensitivity = 4.375f * oldSensorStatus->subSensorStatus[1].FS/125.0f;
 800257e:	edc4 6a0b 	vstr	s13, [r4, #44]	; 0x2c
    oldSensorStatus->subSensorStatus[0].sensitivity = 0.061f *  oldSensorStatus->subSensorStatus[0].FS/2;
 8002582:	edc4 7a08 	vstr	s15, [r4, #32]
  }
  
  /* CHANNEL NUMBER */
  if(oldSensorStatus->comChannelNumber != newSensorStatus->comChannelNumber)
 8002586:	f9b5 3018 	ldrsh.w	r3, [r5, #24]
 800258a:	f9b4 2018 	ldrsh.w	r2, [r4, #24]
 800258e:	429a      	cmp	r2, r3
  {
    oldSensorStatus->comChannelNumber = newSensorStatus->comChannelNumber; /* Todo Setters and getters */         
 8002590:	bf18      	it	ne
 8002592:	8323      	strhne	r3, [r4, #24]
  }  
  
   /* CHANNEL NUMBER */
  if(oldSensorStatus->samplesPerTimestamp != newSensorStatus->samplesPerTimestamp)
 8002594:	89a2      	ldrh	r2, [r4, #12]
 8002596:	89ab      	ldrh	r3, [r5, #12]
 8002598:	429a      	cmp	r2, r3
  {
    oldSensorStatus->samplesPerTimestamp = newSensorStatus->samplesPerTimestamp; /* Todo Setters and getters */         
 800259a:	bf18      	it	ne
 800259c:	81a3      	strhne	r3, [r4, #12]
  }  
}
 800259e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (oldSensorStatus->subSensorStatus[0].FS == 16.0f)
 80025a2:	edd4 7a07 	vldr	s15, [r4, #28]
 80025a6:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 80025aa:	eef4 7a47 	vcmp.f32	s15, s14
 80025ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025b2:	d119      	bne.n	80025e8 <update_sensorStatus+0x214>
      oldSensorStatus->subSensorStatus[0].sensitivity = 0.75f;
 80025b4:	f04f 537d 	mov.w	r3, #1061158912	; 0x3f400000
 80025b8:	6223      	str	r3, [r4, #32]
 80025ba:	e7e4      	b.n	8002586 <update_sensorStatus+0x1b2>
    oldSensorStatus->subSensorStatus[0].sensitivity = 0.061f *  oldSensorStatus->subSensorStatus[0].FS/2;
 80025bc:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8002610 <update_sensorStatus+0x23c>
 80025c0:	edd4 7a07 	vldr	s15, [r4, #28]
 80025c4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80025c8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80025cc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80025d0:	edc4 7a08 	vstr	s15, [r4, #32]
 80025d4:	e7d7      	b.n	8002586 <update_sensorStatus+0x1b2>
    if(COM_IsOdrLegal(newSensorStatus->ODR, sID))
 80025d6:	4610      	mov	r0, r2
 80025d8:	f7ff f9f8 	bl	80019cc <COM_IsOdrLegal>
 80025dc:	2800      	cmp	r0, #0
 80025de:	f43f af08 	beq.w	80023f2 <update_sensorStatus+0x1e>
      oldSensorStatus->ODR = newSensorStatus->ODR; /* Todo Setters and getters */
 80025e2:	682b      	ldr	r3, [r5, #0]
 80025e4:	6023      	str	r3, [r4, #0]
 80025e6:	e704      	b.n	80023f2 <update_sensorStatus+0x1e>
      oldSensorStatus->subSensorStatus[0].sensitivity = 0.0625f *  oldSensorStatus->subSensorStatus[0].FS/2;
 80025e8:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8002618 <update_sensorStatus+0x244>
 80025ec:	ee67 7a87 	vmul.f32	s15, s15, s14
 80025f0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80025f4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80025f8:	edc4 7a08 	vstr	s15, [r4, #32]
 80025fc:	e7c3      	b.n	8002586 <update_sensorStatus+0x1b2>
 80025fe:	bf00      	nop
 8002600:	20017330 	.word	0x20017330
 8002604:	20017654 	.word	0x20017654
 8002608:	20017645 	.word	0x20017645
 800260c:	408c0000 	.word	0x408c0000
 8002610:	3d79db23 	.word	0x3d79db23
 8002614:	42fa0000 	.word	0x42fa0000
 8002618:	3d800000 	.word	0x3d800000

0800261c <update_sensors_config>:

void update_sensors_config(void)
{  
 800261c:	b538      	push	{r3, r4, r5, lr}
  COM_Sensor_t * tempSensor;  
  
  tempSensor = COM_GetSensor(iis3dwb_com_id);  
 800261e:	4b4a      	ldr	r3, [pc, #296]	; (8002748 <update_sensors_config+0x12c>)
  IIS3DWB_Init_Param.ODR = tempSensor->sensorStatus.ODR;
  IIS3DWB_Init_Param.FS[0] = tempSensor->sensorStatus.subSensorStatus[0].FS;
  IIS3DWB_Init_Param.subSensorActive[0] = tempSensor->sensorStatus.subSensorStatus[0].isActive;
  
  tempSensor = COM_GetSensor(hts221_com_id);
 8002620:	4d4a      	ldr	r5, [pc, #296]	; (800274c <update_sensors_config+0x130>)
  tempSensor = COM_GetSensor(iis3dwb_com_id);  
 8002622:	7818      	ldrb	r0, [r3, #0]
 8002624:	f7ff f994 	bl	8001950 <COM_GetSensor>
  IIS3DWB_Init_Param.ODR = tempSensor->sensorStatus.ODR;
 8002628:	4b49      	ldr	r3, [pc, #292]	; (8002750 <update_sensors_config+0x134>)
 800262a:	f8d0 41ac 	ldr.w	r4, [r0, #428]	; 0x1ac
  IIS3DWB_Init_Param.FS[0] = tempSensor->sensorStatus.subSensorStatus[0].FS;
 800262e:	f8d0 11c8 	ldr.w	r1, [r0, #456]	; 0x1c8
  IIS3DWB_Init_Param.subSensorActive[0] = tempSensor->sensorStatus.subSensorStatus[0].isActive;
 8002632:	f890 21d0 	ldrb.w	r2, [r0, #464]	; 0x1d0
  tempSensor = COM_GetSensor(hts221_com_id);
 8002636:	7828      	ldrb	r0, [r5, #0]
  IIS3DWB_Init_Param.ODR = tempSensor->sensorStatus.ODR;
 8002638:	601c      	str	r4, [r3, #0]
  IIS3DWB_Init_Param.FS[0] = tempSensor->sensorStatus.subSensorStatus[0].FS;
 800263a:	6059      	str	r1, [r3, #4]
  IIS3DWB_Init_Param.subSensorActive[0] = tempSensor->sensorStatus.subSensorStatus[0].isActive;
 800263c:	751a      	strb	r2, [r3, #20]
  tempSensor = COM_GetSensor(hts221_com_id);
 800263e:	f7ff f987 	bl	8001950 <COM_GetSensor>
 8002642:	4603      	mov	r3, r0
  HTS221_Init_Param.ODR = tempSensor->sensorStatus.ODR;
 8002644:	4a43      	ldr	r2, [pc, #268]	; (8002754 <update_sensors_config+0x138>)
  HTS221_Init_Param.FS[0] = tempSensor->sensorStatus.subSensorStatus[0].FS;
  HTS221_Init_Param.FS[1] = tempSensor->sensorStatus.subSensorStatus[1].FS;
  HTS221_Init_Param.subSensorActive[0] = tempSensor->sensorStatus.subSensorStatus[0].isActive;
  HTS221_Init_Param.subSensorActive[1] = tempSensor->sensorStatus.subSensorStatus[1].isActive;
  
  tempSensor = COM_GetSensor(iis2dh_com_id);
 8002646:	4844      	ldr	r0, [pc, #272]	; (8002758 <update_sensors_config+0x13c>)
  HTS221_Init_Param.ODR = tempSensor->sensorStatus.ODR;
 8002648:	f8d3 11ac 	ldr.w	r1, [r3, #428]	; 0x1ac
  HTS221_Init_Param.FS[0] = tempSensor->sensorStatus.subSensorStatus[0].FS;
 800264c:	f8d3 51c8 	ldr.w	r5, [r3, #456]	; 0x1c8
  HTS221_Init_Param.FS[1] = tempSensor->sensorStatus.subSensorStatus[1].FS;
 8002650:	f8d3 41d4 	ldr.w	r4, [r3, #468]	; 0x1d4
  HTS221_Init_Param.ODR = tempSensor->sensorStatus.ODR;
 8002654:	6011      	str	r1, [r2, #0]
  tempSensor = COM_GetSensor(iis2dh_com_id);
 8002656:	7800      	ldrb	r0, [r0, #0]
  HTS221_Init_Param.subSensorActive[0] = tempSensor->sensorStatus.subSensorStatus[0].isActive;
 8002658:	f893 11d0 	ldrb.w	r1, [r3, #464]	; 0x1d0
  HTS221_Init_Param.subSensorActive[1] = tempSensor->sensorStatus.subSensorStatus[1].isActive;
 800265c:	f893 31dc 	ldrb.w	r3, [r3, #476]	; 0x1dc
  HTS221_Init_Param.FS[0] = tempSensor->sensorStatus.subSensorStatus[0].FS;
 8002660:	6055      	str	r5, [r2, #4]
  HTS221_Init_Param.FS[1] = tempSensor->sensorStatus.subSensorStatus[1].FS;
 8002662:	6094      	str	r4, [r2, #8]
  HTS221_Init_Param.subSensorActive[0] = tempSensor->sensorStatus.subSensorStatus[0].isActive;
 8002664:	7511      	strb	r1, [r2, #20]
  HTS221_Init_Param.subSensorActive[1] = tempSensor->sensorStatus.subSensorStatus[1].isActive;
 8002666:	7553      	strb	r3, [r2, #21]
  tempSensor = COM_GetSensor(iis2dh_com_id);
 8002668:	f7ff f972 	bl	8001950 <COM_GetSensor>
  IIS2DH_Init_Param.ODR = tempSensor->sensorStatus.ODR;
  IIS2DH_Init_Param.FS[0] = tempSensor->sensorStatus.subSensorStatus[0].FS;
  IIS2DH_Init_Param.subSensorActive[0] = tempSensor->sensorStatus.subSensorStatus[0].isActive;
  
  tempSensor = COM_GetSensor(iis2mdc_com_id);
 800266c:	4d3b      	ldr	r5, [pc, #236]	; (800275c <update_sensors_config+0x140>)
  IIS2DH_Init_Param.ODR = tempSensor->sensorStatus.ODR;
 800266e:	4b3c      	ldr	r3, [pc, #240]	; (8002760 <update_sensors_config+0x144>)
 8002670:	f8d0 41ac 	ldr.w	r4, [r0, #428]	; 0x1ac
  IIS2DH_Init_Param.FS[0] = tempSensor->sensorStatus.subSensorStatus[0].FS;
 8002674:	f8d0 11c8 	ldr.w	r1, [r0, #456]	; 0x1c8
  IIS2DH_Init_Param.subSensorActive[0] = tempSensor->sensorStatus.subSensorStatus[0].isActive;
 8002678:	f890 21d0 	ldrb.w	r2, [r0, #464]	; 0x1d0
  tempSensor = COM_GetSensor(iis2mdc_com_id);
 800267c:	7828      	ldrb	r0, [r5, #0]
  IIS2DH_Init_Param.ODR = tempSensor->sensorStatus.ODR;
 800267e:	601c      	str	r4, [r3, #0]
  IIS2DH_Init_Param.FS[0] = tempSensor->sensorStatus.subSensorStatus[0].FS;
 8002680:	6059      	str	r1, [r3, #4]
  IIS2DH_Init_Param.subSensorActive[0] = tempSensor->sensorStatus.subSensorStatus[0].isActive;
 8002682:	751a      	strb	r2, [r3, #20]
  tempSensor = COM_GetSensor(iis2mdc_com_id);
 8002684:	f7ff f964 	bl	8001950 <COM_GetSensor>
  IIS2MDC_Init_Param.ODR = tempSensor->sensorStatus.ODR;
  IIS2MDC_Init_Param.FS[0] = tempSensor->sensorStatus.subSensorStatus[0].FS;
  IIS2MDC_Init_Param.subSensorActive[0] = tempSensor->sensorStatus.subSensorStatus[0].isActive;  
  
  tempSensor = COM_GetSensor(imp34dt05_com_id);
 8002688:	4d36      	ldr	r5, [pc, #216]	; (8002764 <update_sensors_config+0x148>)
  IIS2MDC_Init_Param.ODR = tempSensor->sensorStatus.ODR;
 800268a:	4b37      	ldr	r3, [pc, #220]	; (8002768 <update_sensors_config+0x14c>)
 800268c:	f8d0 41ac 	ldr.w	r4, [r0, #428]	; 0x1ac
  IIS2MDC_Init_Param.FS[0] = tempSensor->sensorStatus.subSensorStatus[0].FS;
 8002690:	f8d0 11c8 	ldr.w	r1, [r0, #456]	; 0x1c8
  IIS2MDC_Init_Param.subSensorActive[0] = tempSensor->sensorStatus.subSensorStatus[0].isActive;  
 8002694:	f890 21d0 	ldrb.w	r2, [r0, #464]	; 0x1d0
  tempSensor = COM_GetSensor(imp34dt05_com_id);
 8002698:	7828      	ldrb	r0, [r5, #0]
  IIS2MDC_Init_Param.ODR = tempSensor->sensorStatus.ODR;
 800269a:	601c      	str	r4, [r3, #0]
  IIS2MDC_Init_Param.FS[0] = tempSensor->sensorStatus.subSensorStatus[0].FS;
 800269c:	6059      	str	r1, [r3, #4]
  IIS2MDC_Init_Param.subSensorActive[0] = tempSensor->sensorStatus.subSensorStatus[0].isActive;  
 800269e:	751a      	strb	r2, [r3, #20]
  tempSensor = COM_GetSensor(imp34dt05_com_id);
 80026a0:	f7ff f956 	bl	8001950 <COM_GetSensor>
  IMP34DT05_Init_Param.ODR = tempSensor->sensorStatus.ODR;
  IMP34DT05_Init_Param.FS[0] = tempSensor->sensorStatus.subSensorStatus[0].FS;
  IMP34DT05_Init_Param.subSensorActive[0] = tempSensor->sensorStatus.subSensorStatus[0].isActive;  
  
  tempSensor = COM_GetSensor(ism330dhcx_com_id);
 80026a4:	4d31      	ldr	r5, [pc, #196]	; (800276c <update_sensors_config+0x150>)
  IMP34DT05_Init_Param.ODR = tempSensor->sensorStatus.ODR;
 80026a6:	4b32      	ldr	r3, [pc, #200]	; (8002770 <update_sensors_config+0x154>)
 80026a8:	f8d0 41ac 	ldr.w	r4, [r0, #428]	; 0x1ac
  IMP34DT05_Init_Param.FS[0] = tempSensor->sensorStatus.subSensorStatus[0].FS;
 80026ac:	f8d0 11c8 	ldr.w	r1, [r0, #456]	; 0x1c8
  IMP34DT05_Init_Param.subSensorActive[0] = tempSensor->sensorStatus.subSensorStatus[0].isActive;  
 80026b0:	f890 21d0 	ldrb.w	r2, [r0, #464]	; 0x1d0
  tempSensor = COM_GetSensor(ism330dhcx_com_id);
 80026b4:	7828      	ldrb	r0, [r5, #0]
  IMP34DT05_Init_Param.ODR = tempSensor->sensorStatus.ODR;
 80026b6:	601c      	str	r4, [r3, #0]
  IMP34DT05_Init_Param.FS[0] = tempSensor->sensorStatus.subSensorStatus[0].FS;
 80026b8:	6059      	str	r1, [r3, #4]
  IMP34DT05_Init_Param.subSensorActive[0] = tempSensor->sensorStatus.subSensorStatus[0].isActive;  
 80026ba:	751a      	strb	r2, [r3, #20]
  tempSensor = COM_GetSensor(ism330dhcx_com_id);
 80026bc:	f7ff f948 	bl	8001950 <COM_GetSensor>
 80026c0:	4603      	mov	r3, r0
  ISM330DHCX_Init_Param.ODR = tempSensor->sensorStatus.ODR;
 80026c2:	4a2c      	ldr	r2, [pc, #176]	; (8002774 <update_sensors_config+0x158>)
  ISM330DHCX_Init_Param.FS[0] = tempSensor->sensorStatus.subSensorStatus[0].FS;
  ISM330DHCX_Init_Param.FS[1] = tempSensor->sensorStatus.subSensorStatus[1].FS;
  ISM330DHCX_Init_Param.subSensorActive[0] = tempSensor->sensorStatus.subSensorStatus[0].isActive;
  ISM330DHCX_Init_Param.subSensorActive[1] = tempSensor->sensorStatus.subSensorStatus[1].isActive;
  
  tempSensor = COM_GetSensor(lps22hh_com_id);
 80026c4:	482c      	ldr	r0, [pc, #176]	; (8002778 <update_sensors_config+0x15c>)
  ISM330DHCX_Init_Param.ODR = tempSensor->sensorStatus.ODR;
 80026c6:	f8d3 11ac 	ldr.w	r1, [r3, #428]	; 0x1ac
  ISM330DHCX_Init_Param.FS[0] = tempSensor->sensorStatus.subSensorStatus[0].FS;
 80026ca:	f8d3 51c8 	ldr.w	r5, [r3, #456]	; 0x1c8
  ISM330DHCX_Init_Param.FS[1] = tempSensor->sensorStatus.subSensorStatus[1].FS;
 80026ce:	f8d3 41d4 	ldr.w	r4, [r3, #468]	; 0x1d4
  ISM330DHCX_Init_Param.ODR = tempSensor->sensorStatus.ODR;
 80026d2:	6011      	str	r1, [r2, #0]
  tempSensor = COM_GetSensor(lps22hh_com_id);
 80026d4:	7800      	ldrb	r0, [r0, #0]
  ISM330DHCX_Init_Param.subSensorActive[0] = tempSensor->sensorStatus.subSensorStatus[0].isActive;
 80026d6:	f893 11d0 	ldrb.w	r1, [r3, #464]	; 0x1d0
  ISM330DHCX_Init_Param.subSensorActive[1] = tempSensor->sensorStatus.subSensorStatus[1].isActive;
 80026da:	f893 31dc 	ldrb.w	r3, [r3, #476]	; 0x1dc
  ISM330DHCX_Init_Param.FS[0] = tempSensor->sensorStatus.subSensorStatus[0].FS;
 80026de:	6055      	str	r5, [r2, #4]
  ISM330DHCX_Init_Param.FS[1] = tempSensor->sensorStatus.subSensorStatus[1].FS;
 80026e0:	6094      	str	r4, [r2, #8]
  ISM330DHCX_Init_Param.subSensorActive[0] = tempSensor->sensorStatus.subSensorStatus[0].isActive;
 80026e2:	7511      	strb	r1, [r2, #20]
  ISM330DHCX_Init_Param.subSensorActive[1] = tempSensor->sensorStatus.subSensorStatus[1].isActive;
 80026e4:	7553      	strb	r3, [r2, #21]
  tempSensor = COM_GetSensor(lps22hh_com_id);
 80026e6:	f7ff f933 	bl	8001950 <COM_GetSensor>
 80026ea:	4603      	mov	r3, r0
  LPS22HH_Init_Param.ODR = tempSensor->sensorStatus.ODR;
 80026ec:	4a23      	ldr	r2, [pc, #140]	; (800277c <update_sensors_config+0x160>)
  LPS22HH_Init_Param.FS[0] = tempSensor->sensorStatus.subSensorStatus[0].FS;
  LPS22HH_Init_Param.FS[1] = tempSensor->sensorStatus.subSensorStatus[1].FS;
  LPS22HH_Init_Param.subSensorActive[0] = tempSensor->sensorStatus.subSensorStatus[0].isActive;
  LPS22HH_Init_Param.subSensorActive[1] = tempSensor->sensorStatus.subSensorStatus[1].isActive; 
  
  tempSensor = COM_GetSensor(mp23abs1_com_id);
 80026ee:	4824      	ldr	r0, [pc, #144]	; (8002780 <update_sensors_config+0x164>)
  LPS22HH_Init_Param.ODR = tempSensor->sensorStatus.ODR;
 80026f0:	f8d3 11ac 	ldr.w	r1, [r3, #428]	; 0x1ac
  LPS22HH_Init_Param.FS[0] = tempSensor->sensorStatus.subSensorStatus[0].FS;
 80026f4:	f8d3 51c8 	ldr.w	r5, [r3, #456]	; 0x1c8
  LPS22HH_Init_Param.FS[1] = tempSensor->sensorStatus.subSensorStatus[1].FS;
 80026f8:	f8d3 41d4 	ldr.w	r4, [r3, #468]	; 0x1d4
  LPS22HH_Init_Param.ODR = tempSensor->sensorStatus.ODR;
 80026fc:	6011      	str	r1, [r2, #0]
  tempSensor = COM_GetSensor(mp23abs1_com_id);
 80026fe:	7800      	ldrb	r0, [r0, #0]
  LPS22HH_Init_Param.subSensorActive[0] = tempSensor->sensorStatus.subSensorStatus[0].isActive;
 8002700:	f893 11d0 	ldrb.w	r1, [r3, #464]	; 0x1d0
  LPS22HH_Init_Param.subSensorActive[1] = tempSensor->sensorStatus.subSensorStatus[1].isActive; 
 8002704:	f893 31dc 	ldrb.w	r3, [r3, #476]	; 0x1dc
  LPS22HH_Init_Param.FS[0] = tempSensor->sensorStatus.subSensorStatus[0].FS;
 8002708:	6055      	str	r5, [r2, #4]
  LPS22HH_Init_Param.FS[1] = tempSensor->sensorStatus.subSensorStatus[1].FS;
 800270a:	6094      	str	r4, [r2, #8]
  LPS22HH_Init_Param.subSensorActive[0] = tempSensor->sensorStatus.subSensorStatus[0].isActive;
 800270c:	7511      	strb	r1, [r2, #20]
  LPS22HH_Init_Param.subSensorActive[1] = tempSensor->sensorStatus.subSensorStatus[1].isActive; 
 800270e:	7553      	strb	r3, [r2, #21]
  tempSensor = COM_GetSensor(mp23abs1_com_id);
 8002710:	f7ff f91e 	bl	8001950 <COM_GetSensor>
  MP23ABS1_Init_Param.ODR = tempSensor->sensorStatus.ODR;
  MP23ABS1_Init_Param.FS[0] = tempSensor->sensorStatus.subSensorStatus[0].FS;
  MP23ABS1_Init_Param.subSensorActive[0] = tempSensor->sensorStatus.subSensorStatus[0].isActive;  
  
  tempSensor = COM_GetSensor(stts751_com_id);
 8002714:	4d1b      	ldr	r5, [pc, #108]	; (8002784 <update_sensors_config+0x168>)
  MP23ABS1_Init_Param.ODR = tempSensor->sensorStatus.ODR;
 8002716:	4b1c      	ldr	r3, [pc, #112]	; (8002788 <update_sensors_config+0x16c>)
 8002718:	f8d0 41ac 	ldr.w	r4, [r0, #428]	; 0x1ac
  MP23ABS1_Init_Param.FS[0] = tempSensor->sensorStatus.subSensorStatus[0].FS;
 800271c:	f8d0 11c8 	ldr.w	r1, [r0, #456]	; 0x1c8
  MP23ABS1_Init_Param.subSensorActive[0] = tempSensor->sensorStatus.subSensorStatus[0].isActive;  
 8002720:	f890 21d0 	ldrb.w	r2, [r0, #464]	; 0x1d0
  tempSensor = COM_GetSensor(stts751_com_id);
 8002724:	7828      	ldrb	r0, [r5, #0]
  MP23ABS1_Init_Param.ODR = tempSensor->sensorStatus.ODR;
 8002726:	601c      	str	r4, [r3, #0]
  MP23ABS1_Init_Param.FS[0] = tempSensor->sensorStatus.subSensorStatus[0].FS;
 8002728:	6059      	str	r1, [r3, #4]
  MP23ABS1_Init_Param.subSensorActive[0] = tempSensor->sensorStatus.subSensorStatus[0].isActive;  
 800272a:	751a      	strb	r2, [r3, #20]
  tempSensor = COM_GetSensor(stts751_com_id);
 800272c:	f7ff f910 	bl	8001950 <COM_GetSensor>
  STTS751_Init_Param.ODR = tempSensor->sensorStatus.ODR;
 8002730:	4b16      	ldr	r3, [pc, #88]	; (800278c <update_sensors_config+0x170>)
  STTS751_Init_Param.FS[0] = tempSensor->sensorStatus.subSensorStatus[0].FS;
  STTS751_Init_Param.subSensorActive[0] = tempSensor->sensorStatus.subSensorStatus[0].isActive;  
 8002732:	f890 21d0 	ldrb.w	r2, [r0, #464]	; 0x1d0
  STTS751_Init_Param.ODR = tempSensor->sensorStatus.ODR;
 8002736:	f8d0 41ac 	ldr.w	r4, [r0, #428]	; 0x1ac
  STTS751_Init_Param.FS[0] = tempSensor->sensorStatus.subSensorStatus[0].FS;
 800273a:	f8d0 11c8 	ldr.w	r1, [r0, #456]	; 0x1c8
  STTS751_Init_Param.subSensorActive[0] = tempSensor->sensorStatus.subSensorStatus[0].isActive;  
 800273e:	751a      	strb	r2, [r3, #20]
  STTS751_Init_Param.ODR = tempSensor->sensorStatus.ODR;
 8002740:	601c      	str	r4, [r3, #0]
  STTS751_Init_Param.FS[0] = tempSensor->sensorStatus.subSensorStatus[0].FS;
 8002742:	6059      	str	r1, [r3, #4]
  
}
 8002744:	bd38      	pop	{r3, r4, r5, pc}
 8002746:	bf00      	nop
 8002748:	20017330 	.word	0x20017330
 800274c:	20017644 	.word	0x20017644
 8002750:	20011278 	.word	0x20011278
 8002754:	200111e8 	.word	0x200111e8
 8002758:	20017654 	.word	0x20017654
 800275c:	20017605 	.word	0x20017605
 8002760:	20011214 	.word	0x20011214
 8002764:	2001764c 	.word	0x2001764c
 8002768:	2001124c 	.word	0x2001124c
 800276c:	20017645 	.word	0x20017645
 8002770:	200161c8 	.word	0x200161c8
 8002774:	200172fc 	.word	0x200172fc
 8002778:	2001765d 	.word	0x2001765d
 800277c:	20017318 	.word	0x20017318
 8002780:	20017604 	.word	0x20017604
 8002784:	2001765c 	.word	0x2001765c
 8002788:	200177a8 	.word	0x200177a8
 800278c:	20019aa4 	.word	0x20019aa4

08002790 <HTS221_Start>:
}

void HTS221_Start(void)
{
  HTS221_Set_State(SM_SENSOR_STATE_INITIALIZING);
  osThreadResume(HTS221_Thread_Id);
 8002790:	4a03      	ldr	r2, [pc, #12]	; (80027a0 <HTS221_Start+0x10>)
  HTS221_Sensor_State = newState;
 8002792:	4b04      	ldr	r3, [pc, #16]	; (80027a4 <HTS221_Start+0x14>)
  osThreadResume(HTS221_Thread_Id);
 8002794:	6810      	ldr	r0, [r2, #0]
  HTS221_Sensor_State = newState;
 8002796:	2203      	movs	r2, #3
 8002798:	701a      	strb	r2, [r3, #0]
  osThreadResume(HTS221_Thread_Id);
 800279a:	f010 b8e9 	b.w	8012970 <osThreadResume>
 800279e:	bf00      	nop
 80027a0:	20011208 	.word	0x20011208
 80027a4:	20000004 	.word	0x20000004

080027a8 <HTS221_Stop>:
  HTS221_Sensor_State = newState;
 80027a8:	4b01      	ldr	r3, [pc, #4]	; (80027b0 <HTS221_Stop+0x8>)
 80027aa:	2201      	movs	r2, #1
 80027ac:	701a      	strb	r2, [r3, #0]
}

void HTS221_Stop(void)
{
  HTS221_Set_State(SM_SENSOR_STATE_SUSPENDING);
}
 80027ae:	4770      	bx	lr
 80027b0:	20000004 	.word	0x20000004

080027b4 <IIS2DH_Start>:
}

void IIS2DH_Start(void)
{
  IIS2DH_Set_State(SM_SENSOR_STATE_INITIALIZING);
  osThreadResume(IIS2DH_Thread_Id);
 80027b4:	4a03      	ldr	r2, [pc, #12]	; (80027c4 <IIS2DH_Start+0x10>)
  IIS2DH_Sensor_State = newState;
 80027b6:	4b04      	ldr	r3, [pc, #16]	; (80027c8 <IIS2DH_Start+0x14>)
  osThreadResume(IIS2DH_Thread_Id);
 80027b8:	6810      	ldr	r0, [r2, #0]
  IIS2DH_Sensor_State = newState;
 80027ba:	2203      	movs	r2, #3
 80027bc:	701a      	strb	r2, [r3, #0]
  osThreadResume(IIS2DH_Thread_Id);
 80027be:	f010 b8d7 	b.w	8012970 <osThreadResume>
 80027c2:	bf00      	nop
 80027c4:	20011230 	.word	0x20011230
 80027c8:	20000024 	.word	0x20000024

080027cc <IIS2DH_Stop>:
  IIS2DH_Sensor_State = newState;
 80027cc:	4b01      	ldr	r3, [pc, #4]	; (80027d4 <IIS2DH_Stop+0x8>)
 80027ce:	2201      	movs	r2, #1
 80027d0:	701a      	strb	r2, [r3, #0]
}

void IIS2DH_Stop(void)
{
  IIS2DH_Set_State(SM_SENSOR_STATE_SUSPENDING);
}
 80027d2:	4770      	bx	lr
 80027d4:	20000024 	.word	0x20000024

080027d8 <IIS2MDC_Start>:
}

void IIS2MDC_Start(void)
{
  IIS2MDC_Set_State(SM_SENSOR_STATE_INITIALIZING);
  osThreadResume(IIS2MDC_Thread_Id);
 80027d8:	4a03      	ldr	r2, [pc, #12]	; (80027e8 <IIS2MDC_Start+0x10>)
  IIS2MDC_Sensor_State = newState;
 80027da:	4b04      	ldr	r3, [pc, #16]	; (80027ec <IIS2MDC_Start+0x14>)
  osThreadResume(IIS2MDC_Thread_Id);
 80027dc:	6810      	ldr	r0, [r2, #0]
  IIS2MDC_Sensor_State = newState;
 80027de:	2203      	movs	r2, #3
 80027e0:	701a      	strb	r2, [r3, #0]
  osThreadResume(IIS2MDC_Thread_Id);
 80027e2:	f010 b8c5 	b.w	8012970 <osThreadResume>
 80027e6:	bf00      	nop
 80027e8:	20011264 	.word	0x20011264
 80027ec:	20000044 	.word	0x20000044

080027f0 <IIS2MDC_Stop>:
  IIS2MDC_Sensor_State = newState;
 80027f0:	4b01      	ldr	r3, [pc, #4]	; (80027f8 <IIS2MDC_Stop+0x8>)
 80027f2:	2201      	movs	r2, #1
 80027f4:	701a      	strb	r2, [r3, #0]
}

void IIS2MDC_Stop(void)
{
  IIS2MDC_Set_State(SM_SENSOR_STATE_SUSPENDING);
}
 80027f6:	4770      	bx	lr
 80027f8:	20000044 	.word	0x20000044

080027fc <IIS3DWB_Int_Callback>:



static void IIS3DWB_Int_Callback(void)
{
  tim_value = hsm_tim.Instance->CNT;
 80027fc:	4a03      	ldr	r2, [pc, #12]	; (800280c <IIS3DWB_Int_Callback+0x10>)
 80027fe:	4b04      	ldr	r3, [pc, #16]	; (8002810 <IIS3DWB_Int_Callback+0x14>)
 8002800:	6812      	ldr	r2, [r2, #0]
  osSemaphoreRelease(iis3dwb_data_ready_sem_id);
 8002802:	6858      	ldr	r0, [r3, #4]
  tim_value = hsm_tim.Instance->CNT;
 8002804:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002806:	601a      	str	r2, [r3, #0]
  osSemaphoreRelease(iis3dwb_data_ready_sem_id);
 8002808:	f00f bf6c 	b.w	80126e4 <osSemaphoreRelease>
 800280c:	2001988c 	.word	0x2001988c
 8002810:	20000608 	.word	0x20000608

08002814 <IIS3DWB_Peripheral_Init>:
{
 8002814:	b530      	push	{r4, r5, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002816:	2400      	movs	r4, #0
{
 8002818:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800281a:	e9cd 4402 	strd	r4, r4, [sp, #8]
 800281e:	e9cd 4404 	strd	r4, r4, [sp, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002822:	4b22      	ldr	r3, [pc, #136]	; (80028ac <IIS3DWB_Peripheral_Init+0x98>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002824:	9406      	str	r4, [sp, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002826:	6cda      	ldr	r2, [r3, #76]	; 0x4c
  HAL_GPIO_WritePin(IIS3DWB_SPI_CS_GPIO_Port, IIS3DWB_SPI_CS_Pin, GPIO_PIN_SET);
 8002828:	4821      	ldr	r0, [pc, #132]	; (80028b0 <IIS3DWB_Peripheral_Init+0x9c>)
  HAL_EXTI_GetHandle(&iis3dwb_exti, EXTI_LINE_14);  
 800282a:	4d22      	ldr	r5, [pc, #136]	; (80028b4 <IIS3DWB_Peripheral_Init+0xa0>)
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800282c:	f042 0210 	orr.w	r2, r2, #16
 8002830:	64da      	str	r2, [r3, #76]	; 0x4c
 8002832:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002834:	f002 0210 	and.w	r2, r2, #16
 8002838:	9200      	str	r2, [sp, #0]
 800283a:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800283c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800283e:	f042 0220 	orr.w	r2, r2, #32
 8002842:	64da      	str	r2, [r3, #76]	; 0x4c
 8002844:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002846:	f003 0320 	and.w	r3, r3, #32
 800284a:	9301      	str	r3, [sp, #4]
  HAL_GPIO_WritePin(IIS3DWB_SPI_CS_GPIO_Port, IIS3DWB_SPI_CS_Pin, GPIO_PIN_SET);
 800284c:	2201      	movs	r2, #1
 800284e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002852:	9b01      	ldr	r3, [sp, #4]
  HAL_GPIO_WritePin(IIS3DWB_SPI_CS_GPIO_Port, IIS3DWB_SPI_CS_Pin, GPIO_PIN_SET);
 8002854:	f004 fcb2 	bl	80071bc <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = IIS3DWB_SPI_CS_Pin;
 8002858:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800285c:	2301      	movs	r3, #1
 800285e:	e9cd 2302 	strd	r2, r3, [sp, #8]
  HAL_GPIO_Init(IIS3DWB_SPI_CS_GPIO_Port, &GPIO_InitStruct);
 8002862:	a902      	add	r1, sp, #8
  GPIO_InitStruct.Pin = IIS3DWB_SPI_CS_Pin;
 8002864:	2200      	movs	r2, #0
 8002866:	2302      	movs	r3, #2
  HAL_GPIO_Init(IIS3DWB_SPI_CS_GPIO_Port, &GPIO_InitStruct);
 8002868:	4811      	ldr	r0, [pc, #68]	; (80028b0 <IIS3DWB_Peripheral_Init+0x9c>)
  GPIO_InitStruct.Pin = IIS3DWB_SPI_CS_Pin;
 800286a:	e9cd 2304 	strd	r2, r3, [sp, #16]
  HAL_GPIO_Init(IIS3DWB_SPI_CS_GPIO_Port, &GPIO_InitStruct);
 800286e:	f004 fb7f 	bl	8006f70 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin =  IIS3DWB_INT1_Pin ;
 8002872:	4b11      	ldr	r3, [pc, #68]	; (80028b8 <IIS3DWB_Peripheral_Init+0xa4>)
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);  
 8002874:	4811      	ldr	r0, [pc, #68]	; (80028bc <IIS3DWB_Peripheral_Init+0xa8>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002876:	9404      	str	r4, [sp, #16]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);  
 8002878:	a902      	add	r1, sp, #8
  GPIO_InitStruct.Pin =  IIS3DWB_INT1_Pin ;
 800287a:	2220      	movs	r2, #32
 800287c:	e9cd 2302 	strd	r2, r3, [sp, #8]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);  
 8002880:	f004 fb76 	bl	8006f70 <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8002884:	4622      	mov	r2, r4
 8002886:	2105      	movs	r1, #5
 8002888:	2028      	movs	r0, #40	; 0x28
 800288a:	f004 f97b 	bl	8006b84 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800288e:	2028      	movs	r0, #40	; 0x28
 8002890:	f004 f9b0 	bl	8006bf4 <HAL_NVIC_EnableIRQ>
  HAL_EXTI_GetHandle(&iis3dwb_exti, EXTI_LINE_14);  
 8002894:	490a      	ldr	r1, [pc, #40]	; (80028c0 <IIS3DWB_Peripheral_Init+0xac>)
 8002896:	4628      	mov	r0, r5
 8002898:	f004 fb4c 	bl	8006f34 <HAL_EXTI_GetHandle>
  HAL_EXTI_RegisterCallback(&iis3dwb_exti,  HAL_EXTI_COMMON_CB_ID, IIS3DWB_Int_Callback);
 800289c:	4a09      	ldr	r2, [pc, #36]	; (80028c4 <IIS3DWB_Peripheral_Init+0xb0>)
 800289e:	4621      	mov	r1, r4
 80028a0:	4628      	mov	r0, r5
 80028a2:	f004 fb41 	bl	8006f28 <HAL_EXTI_RegisterCallback>
}
 80028a6:	b009      	add	sp, #36	; 0x24
 80028a8:	bd30      	pop	{r4, r5, pc}
 80028aa:	bf00      	nop
 80028ac:	40021000 	.word	0x40021000
 80028b0:	48000400 	.word	0x48000400
 80028b4:	20011290 	.word	0x20011290
 80028b8:	10110000 	.word	0x10110000
 80028bc:	48001000 	.word	0x48001000
 80028c0:	1600000e 	.word	0x1600000e
 80028c4:	080027fd 	.word	0x080027fd

080028c8 <IIS3DWB_OS_Init>:
{  
 80028c8:	b530      	push	{r4, r5, lr}
  iis3dwb_data_read_cmplt_sem_id = osSemaphoreCreate(osSemaphore(iis3dwb_data_read_cmplt_sem), 1);
 80028ca:	4c16      	ldr	r4, [pc, #88]	; (8002924 <IIS3DWB_OS_Init+0x5c>)
 80028cc:	4d16      	ldr	r5, [pc, #88]	; (8002928 <IIS3DWB_OS_Init+0x60>)
{  
 80028ce:	b087      	sub	sp, #28
  iis3dwb_data_read_cmplt_sem_id = osSemaphoreCreate(osSemaphore(iis3dwb_data_read_cmplt_sem), 1);
 80028d0:	4620      	mov	r0, r4
 80028d2:	2101      	movs	r1, #1
 80028d4:	f00f fec6 	bl	8012664 <osSemaphoreCreate>
  vQueueAddToRegistry( iis3dwb_data_read_cmplt_sem_id, "iis3dwb_data_read_cmplt_sem_id" );
 80028d8:	4914      	ldr	r1, [pc, #80]	; (800292c <IIS3DWB_OS_Init+0x64>)
  iis3dwb_data_read_cmplt_sem_id = osSemaphoreCreate(osSemaphore(iis3dwb_data_read_cmplt_sem), 1);
 80028da:	60a8      	str	r0, [r5, #8]
  vQueueAddToRegistry( iis3dwb_data_read_cmplt_sem_id, "iis3dwb_data_read_cmplt_sem_id" );
 80028dc:	f010 ff2c 	bl	8013738 <vQueueAddToRegistry>
  osSemaphoreWait(iis3dwb_data_read_cmplt_sem_id,osWaitForever);
 80028e0:	68a8      	ldr	r0, [r5, #8]
 80028e2:	f04f 31ff 	mov.w	r1, #4294967295
 80028e6:	f00f fed1 	bl	801268c <osSemaphoreWait>
  iis3dwb_data_ready_sem_id = osSemaphoreCreate(osSemaphore(iis3dwb_data_ready_sem), 1);
 80028ea:	1d20      	adds	r0, r4, #4
 80028ec:	2101      	movs	r1, #1
 80028ee:	f00f feb9 	bl	8012664 <osSemaphoreCreate>
  vQueueAddToRegistry( iis3dwb_data_ready_sem_id, "iis3dwb_data_ready_sem_id" );
 80028f2:	490f      	ldr	r1, [pc, #60]	; (8002930 <IIS3DWB_OS_Init+0x68>)
  iis3dwb_data_ready_sem_id = osSemaphoreCreate(osSemaphore(iis3dwb_data_ready_sem), 1);
 80028f4:	6068      	str	r0, [r5, #4]
  osThreadDef(IIS3DWB_Acquisition_Thread, IIS3DWB_Thread, IIS3DWB_THREAD_PRIO, 1, configMINIMAL_STACK_SIZE);  
 80028f6:	3408      	adds	r4, #8
  vQueueAddToRegistry( iis3dwb_data_ready_sem_id, "iis3dwb_data_ready_sem_id" );
 80028f8:	f010 ff1e 	bl	8013738 <vQueueAddToRegistry>
  osSemaphoreWait(iis3dwb_data_ready_sem_id,  osWaitForever);
 80028fc:	6868      	ldr	r0, [r5, #4]
 80028fe:	f04f 31ff 	mov.w	r1, #4294967295
 8002902:	f00f fec3 	bl	801268c <osSemaphoreWait>
  osThreadDef(IIS3DWB_Acquisition_Thread, IIS3DWB_Thread, IIS3DWB_THREAD_PRIO, 1, configMINIMAL_STACK_SIZE);  
 8002906:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002908:	ad01      	add	r5, sp, #4
 800290a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800290c:	6823      	ldr	r3, [r4, #0]
 800290e:	602b      	str	r3, [r5, #0]
  IIS3DWB_Thread_Id = osThreadCreate(osThread(IIS3DWB_Acquisition_Thread), NULL); 
 8002910:	2100      	movs	r1, #0
 8002912:	a801      	add	r0, sp, #4
 8002914:	f00f fe8e 	bl	8012634 <osThreadCreate>
 8002918:	4b06      	ldr	r3, [pc, #24]	; (8002934 <IIS3DWB_OS_Init+0x6c>)
 800291a:	6018      	str	r0, [r3, #0]
  osThreadSuspend(IIS3DWB_Thread_Id);
 800291c:	f010 f822 	bl	8012964 <osThreadSuspend>
}
 8002920:	b007      	add	sp, #28
 8002922:	bd30      	pop	{r4, r5, pc}
 8002924:	0801b7e0 	.word	0x0801b7e0
 8002928:	20000608 	.word	0x20000608
 800292c:	0801c0f8 	.word	0x0801c0f8
 8002930:	0801c118 	.word	0x0801c118
 8002934:	20011274 	.word	0x20011274

08002938 <IIS3DWB_Start>:
}

void IIS3DWB_Start(void)
{
  IIS3DWB_Set_State(SM_SENSOR_STATE_INITIALIZING);
  osThreadResume(IIS3DWB_Thread_Id);
 8002938:	4a03      	ldr	r2, [pc, #12]	; (8002948 <IIS3DWB_Start+0x10>)
  IIS3DWB_Sensor_State = newState;
 800293a:	4b04      	ldr	r3, [pc, #16]	; (800294c <IIS3DWB_Start+0x14>)
  osThreadResume(IIS3DWB_Thread_Id);
 800293c:	6810      	ldr	r0, [r2, #0]
  IIS3DWB_Sensor_State = newState;
 800293e:	2203      	movs	r2, #3
 8002940:	701a      	strb	r2, [r3, #0]
  osThreadResume(IIS3DWB_Thread_Id);
 8002942:	f010 b815 	b.w	8012970 <osThreadResume>
 8002946:	bf00      	nop
 8002948:	20011274 	.word	0x20011274
 800294c:	20000064 	.word	0x20000064

08002950 <IIS3DWB_Stop>:
  IIS3DWB_Sensor_State = newState;
 8002950:	4b01      	ldr	r3, [pc, #4]	; (8002958 <IIS3DWB_Stop+0x8>)
 8002952:	2201      	movs	r2, #1
 8002954:	701a      	strb	r2, [r3, #0]
}

void IIS3DWB_Stop(void)
{
  IIS3DWB_Set_State(SM_SENSOR_STATE_SUSPENDING);  
}
 8002956:	4770      	bx	lr
 8002958:	20000064 	.word	0x20000064

0800295c <IIS3DWB_Thread>:
{
 800295c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002960:	4e90      	ldr	r6, [pc, #576]	; (8002ba4 <IIS3DWB_Thread+0x248>)
 8002962:	4d91      	ldr	r5, [pc, #580]	; (8002ba8 <IIS3DWB_Thread+0x24c>)
 8002964:	f8df a250 	ldr.w	sl, [pc, #592]	; 8002bb8 <IIS3DWB_Thread+0x25c>
 8002968:	f8df b250 	ldr.w	fp, [pc, #592]	; 8002bbc <IIS3DWB_Thread+0x260>
 800296c:	4634      	mov	r4, r6
 800296e:	b083      	sub	sp, #12
  vTaskSetApplicationTaskTag( NULL, (TaskHookFunction_t)TASK_IIS3DWB_DEBUG_PIN );
 8002970:	2101      	movs	r1, #1
 8002972:	2000      	movs	r0, #0
 8002974:	f011 fb98 	bl	80140a8 <vTaskSetApplicationTaskTag>
  volatile uint16_t fifo_level = 0;
 8002978:	2300      	movs	r3, #0
 800297a:	f814 8b04 	ldrb.w	r8, [r4], #4
 800297e:	f8ad 3006 	strh.w	r3, [sp, #6]
 8002982:	f505 7763 	add.w	r7, r5, #908	; 0x38c
    if (IIS3DWB_Sensor_State == SM_SENSOR_STATE_INITIALIZING)
 8002986:	f1b8 0f03 	cmp.w	r8, #3
 800298a:	f040 8091 	bne.w	8002ab0 <IIS3DWB_Thread+0x154>
      ts_iis3dwb = 0;
 800298e:	2200      	movs	r2, #0
 8002990:	2300      	movs	r3, #0
      iis3dwb_device_id_get( &iis3dwb_ctx_instance, (uint8_t *)&reg0);
 8002992:	f10d 0102 	add.w	r1, sp, #2
      tim_value_old = 0;
 8002996:	f04f 0900 	mov.w	r9, #0
      iis3dwb_device_id_get( &iis3dwb_ctx_instance, (uint8_t *)&reg0);
 800299a:	4620      	mov	r0, r4
      ts_iis3dwb = 0;
 800299c:	e9c5 23e4 	strd	r2, r3, [r5, #912]	; 0x390
      tim_value_old = 0;
 80029a0:	f8c5 9398 	str.w	r9, [r5, #920]	; 0x398
      iis3dwb_device_id_get( &iis3dwb_ctx_instance, (uint8_t *)&reg0);
 80029a4:	f002 fcb8 	bl	8005318 <iis3dwb_device_id_get>
      iis3dwb_reset_set(&iis3dwb_ctx_instance, 1);
 80029a8:	2101      	movs	r1, #1
 80029aa:	4620      	mov	r0, r4
 80029ac:	f002 fcbe 	bl	800532c <iis3dwb_reset_set>
      iis3dwb_read_reg(&iis3dwb_ctx_instance, IIS3DWB_CTRL1_XL, (uint8_t *)&reg0, 1);
 80029b0:	2301      	movs	r3, #1
 80029b2:	f10d 0202 	add.w	r2, sp, #2
 80029b6:	2110      	movs	r1, #16
 80029b8:	4620      	mov	r0, r4
 80029ba:	f002 fc69 	bl	8005290 <iis3dwb_read_reg>
      reg0 |= 0xA0;
 80029be:	f89d c002 	ldrb.w	ip, [sp, #2]
      iis3dwb_write_reg(&iis3dwb_ctx_instance, IIS3DWB_CTRL1_XL, (uint8_t *)&reg0, 1);
 80029c2:	2301      	movs	r3, #1
      reg0 |= 0xA0;
 80029c4:	f06c 0c5f 	orn	ip, ip, #95	; 0x5f
      iis3dwb_write_reg(&iis3dwb_ctx_instance, IIS3DWB_CTRL1_XL, (uint8_t *)&reg0, 1);
 80029c8:	f10d 0202 	add.w	r2, sp, #2
 80029cc:	2110      	movs	r1, #16
 80029ce:	4620      	mov	r0, r4
      reg0 |= 0xA0;
 80029d0:	f88d c002 	strb.w	ip, [sp, #2]
      iis3dwb_write_reg(&iis3dwb_ctx_instance, IIS3DWB_CTRL1_XL, (uint8_t *)&reg0, 1);
 80029d4:	f002 fc64 	bl	80052a0 <iis3dwb_write_reg>
      iis3dwb_i2c_interface_set(&iis3dwb_ctx_instance, IIS3DWB_I2C_DISABLE); 
 80029d8:	2101      	movs	r1, #1
 80029da:	4620      	mov	r0, r4
 80029dc:	f002 fcf8 	bl	80053d0 <iis3dwb_i2c_interface_set>
      iis3dwb_fifo_mode_set(&iis3dwb_ctx_instance, IIS3DWB_STREAM_MODE); 
 80029e0:	2106      	movs	r1, #6
 80029e2:	4620      	mov	r0, r4
 80029e4:	f002 fd60 	bl	80054a8 <iis3dwb_fifo_mode_set>
      iis3dwb_fifo_watermark_set(&iis3dwb_ctx_instance, IIS3DWB_WTM_LEVEL);
 80029e8:	2180      	movs	r1, #128	; 0x80
 80029ea:	4620      	mov	r0, r4
 80029ec:	f002 fd1e 	bl	800542c <iis3dwb_fifo_watermark_set>
      iis3dwb_data_ready_mode_set(&iis3dwb_ctx_instance, IIS3DWB_DRDY_PULSED);
 80029f0:	2101      	movs	r1, #1
 80029f2:	4620      	mov	r0, r4
 80029f4:	f002 fc76 	bl	80052e4 <iis3dwb_data_ready_mode_set>
      if(IIS3DWB_Init_Param.FS[0] < 3.0f)
 80029f8:	edda 7a01 	vldr	s15, [sl, #4]
 80029fc:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8002a00:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002a04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a08:	d466      	bmi.n	8002ad8 <IIS3DWB_Thread+0x17c>
      else if(IIS3DWB_Init_Param.FS[0] < 5.0f)
 8002a0a:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8002a0e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002a12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a16:	d464      	bmi.n	8002ae2 <IIS3DWB_Thread+0x186>
      else if(IIS3DWB_Init_Param.FS[0] < 9.0f)
 8002a18:	eeb2 7a02 	vmov.f32	s14, #34	; 0x41100000  9.0
 8002a1c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002a20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a24:	d462      	bmi.n	8002aec <IIS3DWB_Thread+0x190>
      else if(IIS3DWB_Init_Param.FS[0] < 17.0f)
 8002a26:	eeb3 7a01 	vmov.f32	s14, #49	; 0x41880000  17.0
 8002a2a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002a2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a32:	d460      	bmi.n	8002af6 <IIS3DWB_Thread+0x19a>
      iis3dwb_xl_hp_path_on_out_set(&iis3dwb_ctx_instance,IIS3DWB_LP_5kHz);
 8002a34:	2100      	movs	r1, #0
 8002a36:	4620      	mov	r0, r4
 8002a38:	f002 fc92 	bl	8005360 <iis3dwb_xl_hp_path_on_out_set>
      *(uint8_t*)&(pin_int1_route.int1_ctrl) = 0;
 8002a3c:	2308      	movs	r3, #8
      iis3dwb_pin_int1_route_set(&iis3dwb_ctx_instance, &pin_int1_route);
 8002a3e:	a901      	add	r1, sp, #4
 8002a40:	4620      	mov	r0, r4
      *(uint8_t*)&(pin_int1_route.int1_ctrl) = 0;
 8002a42:	f8ad 3004 	strh.w	r3, [sp, #4]
      iis3dwb_pin_int1_route_set(&iis3dwb_ctx_instance, &pin_int1_route);
 8002a46:	f002 fcdd 	bl	8005404 <iis3dwb_pin_int1_route_set>
      iis3dwb_fifo_xl_batch_set(&iis3dwb_ctx_instance, IIS3DWB_XL_BATCHED_AT_26k7Hz);
 8002a4a:	210a      	movs	r1, #10
 8002a4c:	4620      	mov	r0, r4
 8002a4e:	f002 fd11 	bl	8005474 <iis3dwb_fifo_xl_batch_set>
      HAL_NVIC_EnableIRQ(IIS3DWB_INT1_EXTI_IRQn); 
 8002a52:	2017      	movs	r0, #23
 8002a54:	f004 f8ce 	bl	8006bf4 <HAL_NVIC_EnableIRQ>
      IIS3DWB_Sensor_State = SM_SENSOR_STATE_RUNNING;      
 8002a58:	2300      	movs	r3, #0
 8002a5a:	7033      	strb	r3, [r6, #0]
      osSemaphoreWait(iis3dwb_data_ready_sem_id,  osWaitForever);     
 8002a5c:	6868      	ldr	r0, [r5, #4]
 8002a5e:	f04f 31ff 	mov.w	r1, #4294967295
 8002a62:	f00f fe13 	bl	801268c <osSemaphoreWait>
      if(IIS3DWB_Sensor_State == SM_SENSOR_STATE_RUNNING) /* Change of state can happen while task blocked */
 8002a66:	f896 8000 	ldrb.w	r8, [r6]
 8002a6a:	f1b8 0f00 	cmp.w	r8, #0
 8002a6e:	d18a      	bne.n	8002986 <IIS3DWB_Thread+0x2a>
        iis3dwb_read_reg(&iis3dwb_ctx_instance, IIS3DWB_FIFO_STATUS1, &reg0, 1);
 8002a70:	2301      	movs	r3, #1
 8002a72:	f10d 0202 	add.w	r2, sp, #2
 8002a76:	213a      	movs	r1, #58	; 0x3a
 8002a78:	4620      	mov	r0, r4
 8002a7a:	f002 fc09 	bl	8005290 <iis3dwb_read_reg>
        iis3dwb_read_reg(&iis3dwb_ctx_instance, IIS3DWB_FIFO_STATUS2, &reg1, 1);        
 8002a7e:	2301      	movs	r3, #1
 8002a80:	f10d 0203 	add.w	r2, sp, #3
 8002a84:	213b      	movs	r1, #59	; 0x3b
 8002a86:	4620      	mov	r0, r4
 8002a88:	f002 fc02 	bl	8005290 <iis3dwb_read_reg>
        fifo_level = ((reg1 & 0x03) << 8) + reg0; 
 8002a8c:	f89d 1003 	ldrb.w	r1, [sp, #3]
 8002a90:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8002a94:	020a      	lsls	r2, r1, #8
 8002a96:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8002a9a:	4413      	add	r3, r2
 8002a9c:	f8ad 3006 	strh.w	r3, [sp, #6]
        if((reg1) & 0x80  && (fifo_level>=IIS3DWB_SAMPLES_PER_IT) )
 8002aa0:	060b      	lsls	r3, r1, #24
 8002aa2:	d42d      	bmi.n	8002b00 <IIS3DWB_Thread+0x1a4>
 8002aa4:	f896 8000 	ldrb.w	r8, [r6]
    if (IIS3DWB_Sensor_State == SM_SENSOR_STATE_INITIALIZING)
 8002aa8:	f1b8 0f03 	cmp.w	r8, #3
 8002aac:	f43f af6f 	beq.w	800298e <IIS3DWB_Thread+0x32>
    else if(IIS3DWB_Sensor_State == SM_SENSOR_STATE_RUNNING)
 8002ab0:	f1b8 0f00 	cmp.w	r8, #0
 8002ab4:	d0d2      	beq.n	8002a5c <IIS3DWB_Thread+0x100>
    else if ( IIS3DWB_Sensor_State == SM_SENSOR_STATE_SUSPENDING)
 8002ab6:	f1b8 0f01 	cmp.w	r8, #1
 8002aba:	f47f af64 	bne.w	8002986 <IIS3DWB_Thread+0x2a>
      iis3dwb_fifo_xl_batch_set(&iis3dwb_ctx_instance, IIS3DWB_XL_NOT_BATCHED);
 8002abe:	2100      	movs	r1, #0
 8002ac0:	4620      	mov	r0, r4
 8002ac2:	f002 fcd7 	bl	8005474 <iis3dwb_fifo_xl_batch_set>
      IIS3DWB_Sensor_State = SM_SENSOR_STATE_SUSPENDED;
 8002ac6:	2302      	movs	r3, #2
      osThreadSuspend(IIS3DWB_Thread_Id);
 8002ac8:	f8db 0000 	ldr.w	r0, [fp]
      IIS3DWB_Sensor_State = SM_SENSOR_STATE_SUSPENDED;
 8002acc:	7033      	strb	r3, [r6, #0]
      osThreadSuspend(IIS3DWB_Thread_Id);
 8002ace:	f00f ff49 	bl	8012964 <osThreadSuspend>
 8002ad2:	f896 8000 	ldrb.w	r8, [r6]
 8002ad6:	e756      	b.n	8002986 <IIS3DWB_Thread+0x2a>
        iis3dwb_xl_full_scale_set(&iis3dwb_ctx_instance, IIS3DWB_2g);
 8002ad8:	4649      	mov	r1, r9
 8002ada:	4620      	mov	r0, r4
 8002adc:	f002 fbe8 	bl	80052b0 <iis3dwb_xl_full_scale_set>
 8002ae0:	e7a8      	b.n	8002a34 <IIS3DWB_Thread+0xd8>
        iis3dwb_xl_full_scale_set(&iis3dwb_ctx_instance, IIS3DWB_4g);
 8002ae2:	2102      	movs	r1, #2
 8002ae4:	4620      	mov	r0, r4
 8002ae6:	f002 fbe3 	bl	80052b0 <iis3dwb_xl_full_scale_set>
 8002aea:	e7a3      	b.n	8002a34 <IIS3DWB_Thread+0xd8>
        iis3dwb_xl_full_scale_set(&iis3dwb_ctx_instance, IIS3DWB_8g);
 8002aec:	4641      	mov	r1, r8
 8002aee:	4620      	mov	r0, r4
 8002af0:	f002 fbde 	bl	80052b0 <iis3dwb_xl_full_scale_set>
 8002af4:	e79e      	b.n	8002a34 <IIS3DWB_Thread+0xd8>
        iis3dwb_xl_full_scale_set(&iis3dwb_ctx_instance, IIS3DWB_16g);
 8002af6:	2101      	movs	r1, #1
 8002af8:	4620      	mov	r0, r4
 8002afa:	f002 fbd9 	bl	80052b0 <iis3dwb_xl_full_scale_set>
 8002afe:	e799      	b.n	8002a34 <IIS3DWB_Thread+0xd8>
        if((reg1) & 0x80  && (fifo_level>=IIS3DWB_SAMPLES_PER_IT) )
 8002b00:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8002b04:	b29b      	uxth	r3, r3
 8002b06:	2b7f      	cmp	r3, #127	; 0x7f
 8002b08:	d9cc      	bls.n	8002aa4 <IIS3DWB_Thread+0x148>
          if(tim_value >= tim_value_old)
 8002b0a:	682a      	ldr	r2, [r5, #0]
 8002b0c:	f8d5 3398 	ldr.w	r3, [r5, #920]	; 0x398
 8002b10:	429a      	cmp	r2, r3
            period = tim_value - tim_value_old;
 8002b12:	682b      	ldr	r3, [r5, #0]
 8002b14:	f8d5 2398 	ldr.w	r2, [r5, #920]	; 0x398
            period = tim_value + (0xFFFFFFFF - tim_value_old);
 8002b18:	bf38      	it	cc
 8002b1a:	f103 33ff 	addcc.w	r3, r3, #4294967295
 8002b1e:	1a9b      	subs	r3, r3, r2
 8002b20:	f8c5 339c 	str.w	r3, [r5, #924]	; 0x39c
          tim_value_old = tim_value;
 8002b24:	682b      	ldr	r3, [r5, #0]
 8002b26:	f8c5 3398 	str.w	r3, [r5, #920]	; 0x398
          ts_iis3dwb +=  period;
 8002b2a:	f8d5 239c 	ldr.w	r2, [r5, #924]	; 0x39c
 8002b2e:	e9d5 89e4 	ldrd	r8, r9, [r5, #912]	; 0x390
 8002b32:	eb18 0802 	adds.w	r8, r8, r2
          iis3dwb_read_reg(&iis3dwb_ctx_instance, IIS3DWB_FIFO_DATA_OUT_TAG, (uint8_t *)iis3dwb_mem, IIS3DWB_SAMPLES_PER_IT * 7);
 8002b36:	f44f 7360 	mov.w	r3, #896	; 0x380
 8002b3a:	4a1c      	ldr	r2, [pc, #112]	; (8002bac <IIS3DWB_Thread+0x250>)
          ts_iis3dwb +=  period;
 8002b3c:	f149 0900 	adc.w	r9, r9, #0
          iis3dwb_read_reg(&iis3dwb_ctx_instance, IIS3DWB_FIFO_DATA_OUT_TAG, (uint8_t *)iis3dwb_mem, IIS3DWB_SAMPLES_PER_IT * 7);
 8002b40:	2178      	movs	r1, #120	; 0x78
 8002b42:	4620      	mov	r0, r4
          ts_iis3dwb +=  period;
 8002b44:	e9c5 89e4 	strd	r8, r9, [r5, #912]	; 0x390
          iis3dwb_read_reg(&iis3dwb_ctx_instance, IIS3DWB_FIFO_DATA_OUT_TAG, (uint8_t *)iis3dwb_mem, IIS3DWB_SAMPLES_PER_IT * 7);
 8002b48:	f002 fba2 	bl	8005290 <iis3dwb_read_reg>
          for (i = 0; i < IIS3DWB_SAMPLES_PER_IT; i++)    
 8002b4c:	4a18      	ldr	r2, [pc, #96]	; (8002bb0 <IIS3DWB_Thread+0x254>)
          int16_t * p16src = (int16_t *)iis3dwb_mem;
 8002b4e:	1f93      	subs	r3, r2, #6
            *p16dest++ = *p16src++;
 8002b50:	f9b3 1001 	ldrsh.w	r1, [r3, #1]
 8002b54:	f822 1c06 	strh.w	r1, [r2, #-6]
            *p16dest++ = *p16src++;
 8002b58:	f9b3 1003 	ldrsh.w	r1, [r3, #3]
 8002b5c:	f822 1c04 	strh.w	r1, [r2, #-4]
            *p16dest++ = *p16src++;
 8002b60:	4619      	mov	r1, r3
 8002b62:	3307      	adds	r3, #7
 8002b64:	f9b1 1005 	ldrsh.w	r1, [r1, #5]
 8002b68:	f822 1c02 	strh.w	r1, [r2, #-2]
          for (i = 0; i < IIS3DWB_SAMPLES_PER_IT; i++)    
 8002b6c:	42bb      	cmp	r3, r7
 8002b6e:	f102 0206 	add.w	r2, r2, #6
 8002b72:	d1ed      	bne.n	8002b50 <IIS3DWB_Thread+0x1f4>
          IIS3DWB_Data_Ready((uint8_t *)iis3dwb_mem, IIS3DWB_SAMPLES_PER_IT * 6, (double)ts_iis3dwb/(double)SystemCoreClock);        
 8002b74:	e9d5 01e4 	ldrd	r0, r1, [r5, #912]	; 0x390
 8002b78:	f7fd fd30 	bl	80005dc <__aeabi_ul2d>
 8002b7c:	4b0d      	ldr	r3, [pc, #52]	; (8002bb4 <IIS3DWB_Thread+0x258>)
 8002b7e:	4680      	mov	r8, r0
 8002b80:	6818      	ldr	r0, [r3, #0]
 8002b82:	4689      	mov	r9, r1
 8002b84:	f7fd fce6 	bl	8000554 <__aeabi_ui2d>
 8002b88:	4602      	mov	r2, r0
 8002b8a:	460b      	mov	r3, r1
 8002b8c:	4640      	mov	r0, r8
 8002b8e:	4649      	mov	r1, r9
 8002b90:	f7fd fe84 	bl	800089c <__aeabi_ddiv>
 8002b94:	ec41 0b10 	vmov	d0, r0, r1
 8002b98:	4804      	ldr	r0, [pc, #16]	; (8002bac <IIS3DWB_Thread+0x250>)
 8002b9a:	f44f 7140 	mov.w	r1, #768	; 0x300
 8002b9e:	f000 fba1 	bl	80032e4 <IIS3DWB_Data_Ready>
 8002ba2:	e77f      	b.n	8002aa4 <IIS3DWB_Thread+0x148>
 8002ba4:	20000064 	.word	0x20000064
 8002ba8:	20000608 	.word	0x20000608
 8002bac:	20000614 	.word	0x20000614
 8002bb0:	2000061a 	.word	0x2000061a
 8002bb4:	200000f8 	.word	0x200000f8
 8002bb8:	20011278 	.word	0x20011278
 8002bbc:	20011274 	.word	0x20011274

08002bc0 <IMP34DT05_Start>:
}

void IMP34DT05_Start(void)
{
  IMP34DT05_Set_State(SM_SENSOR_STATE_INITIALIZING);
  osThreadResume(IMP34DT05_Thread_Id);
 8002bc0:	4a03      	ldr	r2, [pc, #12]	; (8002bd0 <IMP34DT05_Start+0x10>)
  IMP34DT05_Sensor_State = newState;
 8002bc2:	4b04      	ldr	r3, [pc, #16]	; (8002bd4 <IMP34DT05_Start+0x14>)
  osThreadResume(IMP34DT05_Thread_Id);
 8002bc4:	6810      	ldr	r0, [r2, #0]
  IMP34DT05_Sensor_State = newState;
 8002bc6:	2203      	movs	r2, #3
 8002bc8:	701a      	strb	r2, [r3, #0]
  osThreadResume(IMP34DT05_Thread_Id);
 8002bca:	f00f bed1 	b.w	8012970 <osThreadResume>
 8002bce:	bf00      	nop
 8002bd0:	20011298 	.word	0x20011298
 8002bd4:	20000084 	.word	0x20000084

08002bd8 <IMP34DT05_Stop>:
  IMP34DT05_Sensor_State = newState;
 8002bd8:	4b01      	ldr	r3, [pc, #4]	; (8002be0 <IMP34DT05_Stop+0x8>)
 8002bda:	2201      	movs	r2, #1
 8002bdc:	701a      	strb	r2, [r3, #0]
}

void IMP34DT05_Stop(void)
{
  IMP34DT05_Set_State(SM_SENSOR_STATE_SUSPENDING);
}
 8002bde:	4770      	bx	lr
 8002be0:	20000084 	.word	0x20000084

08002be4 <ISM330DHCX_Start>:
}

void ISM330DHCX_Start(void)
{
  ISM330DHCX_Set_State(SM_SENSOR_STATE_INITIALIZING);
  osThreadResume(ISM330DHCX_Thread_Id);
 8002be4:	4a03      	ldr	r2, [pc, #12]	; (8002bf4 <ISM330DHCX_Start+0x10>)
  ISM330DHCX_Sensor_State = newState;
 8002be6:	4b04      	ldr	r3, [pc, #16]	; (8002bf8 <ISM330DHCX_Start+0x14>)
  osThreadResume(ISM330DHCX_Thread_Id);
 8002be8:	6810      	ldr	r0, [r2, #0]
  ISM330DHCX_Sensor_State = newState;
 8002bea:	2203      	movs	r2, #3
 8002bec:	701a      	strb	r2, [r3, #0]
  osThreadResume(ISM330DHCX_Thread_Id);
 8002bee:	f00f bebf 	b.w	8012970 <osThreadResume>
 8002bf2:	bf00      	nop
 8002bf4:	200171f0 	.word	0x200171f0
 8002bf8:	20000088 	.word	0x20000088

08002bfc <ISM330DHCX_Stop>:
  ISM330DHCX_Sensor_State = newState;
 8002bfc:	4b01      	ldr	r3, [pc, #4]	; (8002c04 <ISM330DHCX_Stop+0x8>)
 8002bfe:	2201      	movs	r2, #1
 8002c00:	701a      	strb	r2, [r3, #0]
}

void ISM330DHCX_Stop(void)
{  
  ISM330DHCX_Set_State(SM_SENSOR_STATE_SUSPENDING);
}
 8002c02:	4770      	bx	lr
 8002c04:	20000088 	.word	0x20000088

08002c08 <LPS22HH_Start>:
}

void LPS22HH_Start(void)
{
  LPS22HH_Set_State(SM_SENSOR_STATE_INITIALIZING);
  osThreadResume(LPS22HH_Thread_Id);
 8002c08:	4a03      	ldr	r2, [pc, #12]	; (8002c18 <LPS22HH_Start+0x10>)
  LPS22HH_Sensor_State = newState;
 8002c0a:	4b04      	ldr	r3, [pc, #16]	; (8002c1c <LPS22HH_Start+0x14>)
  osThreadResume(LPS22HH_Thread_Id);
 8002c0c:	6810      	ldr	r0, [r2, #0]
  LPS22HH_Sensor_State = newState;
 8002c0e:	2203      	movs	r2, #3
 8002c10:	701a      	strb	r2, [r3, #0]
  osThreadResume(LPS22HH_Thread_Id);
 8002c12:	f00f bead 	b.w	8012970 <osThreadResume>
 8002c16:	bf00      	nop
 8002c18:	20017314 	.word	0x20017314
 8002c1c:	200000a8 	.word	0x200000a8

08002c20 <LPS22HH_Stop>:
  LPS22HH_Sensor_State = newState;
 8002c20:	4b01      	ldr	r3, [pc, #4]	; (8002c28 <LPS22HH_Stop+0x8>)
 8002c22:	2201      	movs	r2, #1
 8002c24:	701a      	strb	r2, [r3, #0]
}

void LPS22HH_Stop(void)
{
  LPS22HH_Set_State(SM_SENSOR_STATE_SUSPENDING);
}
 8002c26:	4770      	bx	lr
 8002c28:	200000a8 	.word	0x200000a8

08002c2c <BC_Int_Callback>:
* @brief  Battery Charger Interrupt callback
* @param  None
* @retval None
*/
void BC_Int_Callback(void)
{
 8002c2c:	b508      	push	{r3, lr}
  if(HAL_GetTick() - t_stwin > 4000)
 8002c2e:	f003 fa03 	bl	8006038 <HAL_GetTick>
 8002c32:	4b06      	ldr	r3, [pc, #24]	; (8002c4c <BC_Int_Callback+0x20>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	1ac0      	subs	r0, r0, r3
 8002c38:	f5b0 6f7a 	cmp.w	r0, #4000	; 0xfa0
 8002c3c:	d800      	bhi.n	8002c40 <BC_Int_Callback+0x14>
  {
    BSP_BC_CmdSend(SHIPPING_MODE_ON);
  }
}
 8002c3e:	bd08      	pop	{r3, pc}
 8002c40:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    BSP_BC_CmdSend(SHIPPING_MODE_ON);
 8002c44:	2017      	movs	r0, #23
 8002c46:	f002 bd6f 	b.w	8005728 <BSP_BC_CmdSend>
 8002c4a:	bf00      	nop
 8002c4c:	200016d0 	.word	0x200016d0

08002c50 <MX_USB_DEVICE_Init>:
{
 8002c50:	b510      	push	{r4, lr}
  USBD_Init(&USBD_Device, &WCID_STREAMING_Desc, 0);
 8002c52:	4c09      	ldr	r4, [pc, #36]	; (8002c78 <MX_USB_DEVICE_Init+0x28>)
 8002c54:	4909      	ldr	r1, [pc, #36]	; (8002c7c <MX_USB_DEVICE_Init+0x2c>)
 8002c56:	2200      	movs	r2, #0
 8002c58:	4620      	mov	r0, r4
 8002c5a:	f00b fca3 	bl	800e5a4 <USBD_Init>
  USBD_RegisterClass(&USBD_Device, USBD_WCID_STREAMING_CLASS);
 8002c5e:	4908      	ldr	r1, [pc, #32]	; (8002c80 <MX_USB_DEVICE_Init+0x30>)
 8002c60:	4620      	mov	r0, r4
 8002c62:	f00b fcb5 	bl	800e5d0 <USBD_RegisterClass>
  USBD_WCID_STREAMING_RegisterInterface(&USBD_Device, &USBD_WCID_STREAMING_fops);
 8002c66:	4620      	mov	r0, r4
 8002c68:	4906      	ldr	r1, [pc, #24]	; (8002c84 <MX_USB_DEVICE_Init+0x34>)
 8002c6a:	f00b fbdb 	bl	800e424 <USBD_WCID_STREAMING_RegisterInterface>
  USBD_Start(&USBD_Device);
 8002c6e:	4620      	mov	r0, r4
}
 8002c70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_Start(&USBD_Device);
 8002c74:	f00b bcb4 	b.w	800e5e0 <USBD_Start>
 8002c78:	20017340 	.word	0x20017340
 8002c7c:	20000130 	.word	0x20000130
 8002c80:	20000324 	.word	0x20000324
 8002c84:	2000014c 	.word	0x2000014c

08002c88 <SystemClock_Config>:
{
 8002c88:	b5f0      	push	{r4, r5, r6, r7, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002c8a:	2100      	movs	r1, #0
{
 8002c8c:	b0c1      	sub	sp, #260	; 0x104
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002c8e:	460c      	mov	r4, r1
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002c90:	2244      	movs	r2, #68	; 0x44
 8002c92:	a806      	add	r0, sp, #24
 8002c94:	f014 fd9e 	bl	80177d4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002c98:	4621      	mov	r1, r4
 8002c9a:	a818      	add	r0, sp, #96	; 0x60
 8002c9c:	229c      	movs	r2, #156	; 0x9c
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002c9e:	e9cd 4400 	strd	r4, r4, [sp]
 8002ca2:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8002ca6:	9404      	str	r4, [sp, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002ca8:	f014 fd94 	bl	80177d4 <memset>
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 8002cac:	4620      	mov	r0, r4
 8002cae:	f006 f8ff 	bl	8008eb0 <HAL_PWREx_ControlVoltageScaling>
 8002cb2:	b100      	cbz	r0, 8002cb6 <SystemClock_Config+0x2e>
* @param  None
* @retval None
*/
static void Error_Handler(void)
{
  while(1);
 8002cb4:	e7fe      	b.n	8002cb4 <SystemClock_Config+0x2c>
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8002cb6:	2421      	movs	r4, #33	; 0x21
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8002cb8:	2201      	movs	r2, #1
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8002cba:	f44f 3580 	mov.w	r5, #65536	; 0x10000
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002cbe:	2302      	movs	r3, #2
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8002cc0:	e9cd 4506 	strd	r4, r5, [sp, #24]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002cc4:	2103      	movs	r1, #3
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8002cc6:	920f      	str	r2, [sp, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002cc8:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.PLL.PLLN = 30;
 8002cca:	221e      	movs	r2, #30
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV5;
 8002ccc:	2405      	movs	r4, #5
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002cce:	e9cd 3315 	strd	r3, r3, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002cd2:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 2;
 8002cd4:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV5;
 8002cd6:	e9cd 2413 	strd	r2, r4, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002cda:	9111      	str	r1, [sp, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002cdc:	f006 fa42 	bl	8009164 <HAL_RCC_OscConfig>
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	b100      	cbz	r0, 8002ce6 <SystemClock_Config+0x5e>
  while(1);
 8002ce4:	e7fe      	b.n	8002ce4 <SystemClock_Config+0x5c>
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002ce6:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002ce8:	220f      	movs	r2, #15
 8002cea:	2303      	movs	r3, #3
 8002cec:	e9cd 2300 	strd	r2, r3, [sp]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002cf0:	4621      	mov	r1, r4
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	2200      	movs	r2, #0
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002cf6:	4668      	mov	r0, sp
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002cf8:	e9cd 2302 	strd	r2, r3, [sp, #8]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002cfc:	f006 fd48 	bl	8009790 <HAL_RCC_ClockConfig>
 8002d00:	4603      	mov	r3, r0
 8002d02:	b100      	cbz	r0, 8002d06 <SystemClock_Config+0x7e>
  while(1);
 8002d04:	e7fe      	b.n	8002d04 <SystemClock_Config+0x7c>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SAI1|RCC_PERIPHCLK_I2C2
 8002d06:	4c11      	ldr	r4, [pc, #68]	; (8002d4c <SystemClock_Config+0xc4>)
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8002d08:	932e      	str	r3, [sp, #184]	; 0xb8
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SAI1|RCC_PERIPHCLK_I2C2
 8002d0a:	2205      	movs	r2, #5
  PeriphClkInit.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI1;
 8002d0c:	9333      	str	r3, [sp, #204]	; 0xcc
  PeriphClkInit.Dfsdm1AudioClockSelection = RCC_DFSDM1AUDIOCLKSOURCE_SAI1;
 8002d0e:	933a      	str	r3, [sp, #232]	; 0xe8
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8002d10:	9335      	str	r3, [sp, #212]	; 0xd4
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SAI1|RCC_PERIPHCLK_I2C2
 8002d12:	2360      	movs	r3, #96	; 0x60
 8002d14:	e9cd 231a 	strd	r2, r3, [sp, #104]	; 0x68
 8002d18:	2503      	movs	r5, #3
 8002d1a:	4b0d      	ldr	r3, [pc, #52]	; (8002d50 <SystemClock_Config+0xc8>)
 8002d1c:	e9cd 4518 	strd	r4, r5, [sp, #96]	; 0x60
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8002d20:	f04f 5680 	mov.w	r6, #268435456	; 0x10000000
 8002d24:	2700      	movs	r7, #0
  PeriphClkInit.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_PLLP;
 8002d26:	f44f 4180 	mov.w	r1, #16384	; 0x4000
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SAI1|RCC_PERIPHCLK_I2C2
 8002d2a:	2419      	movs	r4, #25
 8002d2c:	2502      	movs	r5, #2
 8002d2e:	2204      	movs	r2, #4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002d30:	a818      	add	r0, sp, #96	; 0x60
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8002d32:	e9cd 6738 	strd	r6, r7, [sp, #224]	; 0xe0
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SAI1|RCC_PERIPHCLK_I2C2
 8002d36:	e9cd 451c 	strd	r4, r5, [sp, #112]	; 0x70
 8002d3a:	e9cd 231e 	strd	r2, r3, [sp, #120]	; 0x78
  PeriphClkInit.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_PLLP;
 8002d3e:	9136      	str	r1, [sp, #216]	; 0xd8
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002d40:	f006 ff7c 	bl	8009c3c <HAL_RCCEx_PeriphCLKConfig>
 8002d44:	b908      	cbnz	r0, 8002d4a <SystemClock_Config+0xc2>
}
 8002d46:	b041      	add	sp, #260	; 0x104
 8002d48:	bdf0      	pop	{r4, r5, r6, r7, pc}
  while(1);
 8002d4a:	e7fe      	b.n	8002d4a <SystemClock_Config+0xc2>
 8002d4c:	00296880 	.word	0x00296880
 8002d50:	01010000 	.word	0x01010000

08002d54 <PVD_Config>:
  __HAL_RCC_PWR_CLK_ENABLE();
 8002d54:	4b10      	ldr	r3, [pc, #64]	; (8002d98 <PVD_Config+0x44>)
{
 8002d56:	b500      	push	{lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 8002d58:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002d5a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002d5e:	659a      	str	r2, [r3, #88]	; 0x58
 8002d60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
{
 8002d62:	b085      	sub	sp, #20
  HAL_NVIC_SetPriority(PVD_PVM_IRQn, 0, 0);
 8002d64:	2200      	movs	r2, #0
  __HAL_RCC_PWR_CLK_ENABLE();
 8002d66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
  HAL_NVIC_SetPriority(PVD_PVM_IRQn, 0, 0);
 8002d6a:	4611      	mov	r1, r2
  __HAL_RCC_PWR_CLK_ENABLE();
 8002d6c:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(PVD_PVM_IRQn, 0, 0);
 8002d6e:	2001      	movs	r0, #1
  __HAL_RCC_PWR_CLK_ENABLE();
 8002d70:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(PVD_PVM_IRQn, 0, 0);
 8002d72:	f003 ff07 	bl	8006b84 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(PVD_PVM_IRQn);
 8002d76:	2001      	movs	r0, #1
 8002d78:	f003 ff3c 	bl	8006bf4 <HAL_NVIC_EnableIRQ>
  sConfigPVD.PVDLevel = PWR_PVDLEVEL_6;
 8002d7c:	220c      	movs	r2, #12
 8002d7e:	f04f 1301 	mov.w	r3, #65537	; 0x10001
  HAL_PWR_ConfigPVD(&sConfigPVD);
 8002d82:	a802      	add	r0, sp, #8
  sConfigPVD.PVDLevel = PWR_PVDLEVEL_6;
 8002d84:	e9cd 2302 	strd	r2, r3, [sp, #8]
  HAL_PWR_ConfigPVD(&sConfigPVD);
 8002d88:	f006 f83a 	bl	8008e00 <HAL_PWR_ConfigPVD>
  HAL_PWR_EnablePVD();
 8002d8c:	f006 f876 	bl	8008e7c <HAL_PWR_EnablePVD>
}
 8002d90:	b005      	add	sp, #20
 8002d92:	f85d fb04 	ldr.w	pc, [sp], #4
 8002d96:	bf00      	nop
 8002d98:	40021000 	.word	0x40021000

08002d9c <main>:
{
 8002d9c:	b500      	push	{lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 8002d9e:	4c2c      	ldr	r4, [pc, #176]	; (8002e50 <main+0xb4>)
{
 8002da0:	b083      	sub	sp, #12
  HAL_Init();
 8002da2:	f003 f92d 	bl	8006000 <HAL_Init>
  SystemClock_Config();
 8002da6:	f7ff ff6f 	bl	8002c88 <SystemClock_Config>
  __HAL_RCC_PWR_CLK_ENABLE();
 8002daa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002dac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002db0:	65a3      	str	r3, [r4, #88]	; 0x58
 8002db2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002db4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002db8:	9300      	str	r3, [sp, #0]
 8002dba:	9b00      	ldr	r3, [sp, #0]
  HAL_PWREx_EnableVddUSB(); 
 8002dbc:	f006 f8f6 	bl	8008fac <HAL_PWREx_EnableVddUSB>
  HAL_PWREx_EnableVddIO2();
 8002dc0:	f006 f8fc 	bl	8008fbc <HAL_PWREx_EnableVddIO2>
  BSP_Enable_DCDC2();
 8002dc4:	f002 fc08 	bl	80055d8 <BSP_Enable_DCDC2>
  BSP_BC_Init();
 8002dc8:	f002 fd8c 	bl	80058e4 <BSP_BC_Init>
  BSP_BC_BatMS_Init();
 8002dcc:	f002 fcd0 	bl	8005770 <BSP_BC_BatMS_Init>
  BSP_BC_CmdSend(BATMS_ON);  
 8002dd0:	200a      	movs	r0, #10
 8002dd2:	f002 fca9 	bl	8005728 <BSP_BC_CmdSend>
  HAL_EXTI_GetHandle(&BC_exti, EXTI_LINE_10);  
 8002dd6:	491f      	ldr	r1, [pc, #124]	; (8002e54 <main+0xb8>)
 8002dd8:	481f      	ldr	r0, [pc, #124]	; (8002e58 <main+0xbc>)
 8002dda:	f004 f8ab 	bl	8006f34 <HAL_EXTI_GetHandle>
  HAL_EXTI_RegisterCallback(&BC_exti,  HAL_EXTI_COMMON_CB_ID, BC_Int_Callback);
 8002dde:	4a1f      	ldr	r2, [pc, #124]	; (8002e5c <main+0xc0>)
 8002de0:	481d      	ldr	r0, [pc, #116]	; (8002e58 <main+0xbc>)
 8002de2:	2100      	movs	r1, #0
 8002de4:	f004 f8a0 	bl	8006f28 <HAL_EXTI_RegisterCallback>
  t_stwin = HAL_GetTick(); 
 8002de8:	f003 f926 	bl	8006038 <HAL_GetTick>
 8002dec:	4b1c      	ldr	r3, [pc, #112]	; (8002e60 <main+0xc4>)
 8002dee:	6018      	str	r0, [r3, #0]
  PVD_Config();
 8002df0:	f7ff ffb0 	bl	8002d54 <PVD_Config>
  BSP_DEBUG_PIN_Init_All();
 8002df4:	f002 fe4e 	bl	8005a94 <BSP_DEBUG_PIN_Init_All>
  BSP_LED_Init(LED1);
 8002df8:	2000      	movs	r0, #0
 8002dfa:	f002 fc4b 	bl	8005694 <BSP_LED_Init>
  BSP_LED_Init(LED2);
 8002dfe:	2001      	movs	r0, #1
 8002e00:	f002 fc48 	bl	8005694 <BSP_LED_Init>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e04:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
  HSD_JSON_set_allocation_functions(HSD_malloc, HSD_free);  
 8002e06:	4917      	ldr	r1, [pc, #92]	; (8002e64 <main+0xc8>)
 8002e08:	4817      	ldr	r0, [pc, #92]	; (8002e68 <main+0xcc>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e0a:	f043 0301 	orr.w	r3, r3, #1
 8002e0e:	64e3      	str	r3, [r4, #76]	; 0x4c
 8002e10:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8002e12:	f003 0301 	and.w	r3, r3, #1
 8002e16:	9301      	str	r3, [sp, #4]
 8002e18:	9b01      	ldr	r3, [sp, #4]
  HSD_JSON_set_allocation_functions(HSD_malloc, HSD_free);  
 8002e1a:	f7fe fb47 	bl	80014ac <HSD_JSON_set_allocation_functions>
  MX_USB_DEVICE_Init();
 8002e1e:	f7ff ff17 	bl	8002c50 <MX_USB_DEVICE_Init>
  set_default_description();
 8002e22:	f7fe fdfb 	bl	8001a1c <set_default_description>
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 8002e26:	2101      	movs	r1, #1
 8002e28:	2000      	movs	r0, #0
 8002e2a:	f002 fbfb 	bl	8005624 <BSP_PB_Init>
  BSP_PB_PWR_Init();
 8002e2e:	f002 fba9 	bl	8005584 <BSP_PB_PWR_Init>
  SM_Peripheral_Init();
 8002e32:	f001 fbed 	bl	8004610 <SM_Peripheral_Init>
  SM_OS_Init();
 8002e36:	f001 fab5 	bl	80043a4 <SM_OS_Init>
  IIS3DWB_Peripheral_Init();
 8002e3a:	f7ff fceb 	bl	8002814 <IIS3DWB_Peripheral_Init>
  SDM_Peripheral_Init();
 8002e3e:	f000 fb35 	bl	80034ac <SDM_Peripheral_Init>
  IIS3DWB_OS_Init();
 8002e42:	f7ff fd41 	bl	80028c8 <IIS3DWB_OS_Init>
  SDM_OS_Init();
 8002e46:	f000 fb33 	bl	80034b0 <SDM_OS_Init>
  osKernelStart();
 8002e4a:	f00f fbed 	bl	8012628 <osKernelStart>
  while(1);  
 8002e4e:	e7fe      	b.n	8002e4e <main+0xb2>
 8002e50:	40021000 	.word	0x40021000
 8002e54:	1600000a 	.word	0x1600000a
 8002e58:	20017608 	.word	0x20017608
 8002e5c:	08002c2d 	.word	0x08002c2d
 8002e60:	200016d0 	.word	0x200016d0
 8002e64:	08017775 	.word	0x08017775
 8002e68:	08017765 	.word	0x08017765

08002e6c <vApplicationIdleHook>:
  if(SD_Logging_Enabled)
 8002e6c:	4b28      	ldr	r3, [pc, #160]	; (8002f10 <vApplicationIdleHook+0xa4>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
{
 8002e70:	b510      	push	{r4, lr}
  if(SD_Logging_Enabled)
 8002e72:	b9db      	cbnz	r3, 8002eac <vApplicationIdleHook+0x40>
  if (!SD_Logging_Active)
 8002e74:	4b27      	ldr	r3, [pc, #156]	; (8002f14 <vApplicationIdleHook+0xa8>)
 8002e76:	781b      	ldrb	r3, [r3, #0]
 8002e78:	b9bb      	cbnz	r3, 8002eaa <vApplicationIdleHook+0x3e>
    if(com_status == HS_DATALOG_USB_STARTED)
 8002e7a:	4b27      	ldr	r3, [pc, #156]	; (8002f18 <vApplicationIdleHook+0xac>)
 8002e7c:	781b      	ldrb	r3, [r3, #0]
 8002e7e:	2b01      	cmp	r3, #1
 8002e80:	d017      	beq.n	8002eb2 <vApplicationIdleHook+0x46>
      if (!BSP_SD_IsDetected())
 8002e82:	f002 ffdb 	bl	8005e3c <BSP_SD_IsDetected>
 8002e86:	bb50      	cbnz	r0, 8002ede <vApplicationIdleHook+0x72>
        if(!(HAL_GetTick()%200)) 
 8002e88:	f003 f8d6 	bl	8006038 <HAL_GetTick>
 8002e8c:	4c23      	ldr	r4, [pc, #140]	; (8002f1c <vApplicationIdleHook+0xb0>)
 8002e8e:	4b24      	ldr	r3, [pc, #144]	; (8002f20 <vApplicationIdleHook+0xb4>)
 8002e90:	fb04 f000 	mul.w	r0, r4, r0
 8002e94:	ebb3 0ff0 	cmp.w	r3, r0, ror #3
 8002e98:	d234      	bcs.n	8002f04 <vApplicationIdleHook+0x98>
          if(!(HAL_GetTick()%100)) 
 8002e9a:	f003 f8cd 	bl	8006038 <HAL_GetTick>
 8002e9e:	4b21      	ldr	r3, [pc, #132]	; (8002f24 <vApplicationIdleHook+0xb8>)
 8002ea0:	fb04 f000 	mul.w	r0, r4, r0
 8002ea4:	ebb3 0fb0 	cmp.w	r3, r0, ror #2
 8002ea8:	d214      	bcs.n	8002ed4 <vApplicationIdleHook+0x68>
}
 8002eaa:	bd10      	pop	{r4, pc}
    SDM_AutosaveFile();
 8002eac:	f001 f876 	bl	8003f9c <SDM_AutosaveFile>
 8002eb0:	e7e0      	b.n	8002e74 <vApplicationIdleHook+0x8>
        if(!(HAL_GetTick()%100)) 
 8002eb2:	f003 f8c1 	bl	8006038 <HAL_GetTick>
 8002eb6:	4c19      	ldr	r4, [pc, #100]	; (8002f1c <vApplicationIdleHook+0xb0>)
 8002eb8:	4b1a      	ldr	r3, [pc, #104]	; (8002f24 <vApplicationIdleHook+0xb8>)
 8002eba:	fb04 f000 	mul.w	r0, r4, r0
 8002ebe:	ebb3 0fb0 	cmp.w	r3, r0, ror #2
 8002ec2:	d21f      	bcs.n	8002f04 <vApplicationIdleHook+0x98>
          if(!(HAL_GetTick()%50)) 
 8002ec4:	f003 f8b8 	bl	8006038 <HAL_GetTick>
 8002ec8:	4b17      	ldr	r3, [pc, #92]	; (8002f28 <vApplicationIdleHook+0xbc>)
 8002eca:	fb04 f000 	mul.w	r0, r4, r0
 8002ece:	ebb3 0f70 	cmp.w	r3, r0, ror #1
 8002ed2:	d3ea      	bcc.n	8002eaa <vApplicationIdleHook+0x3e>
}
 8002ed4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            BSP_LED_Off(LED_ORANGE);
 8002ed8:	2001      	movs	r0, #1
 8002eda:	f002 bc17 	b.w	800570c <BSP_LED_Off>
        if(!(HAL_GetTick()%1000)) 
 8002ede:	f003 f8ab 	bl	8006038 <HAL_GetTick>
 8002ee2:	4b12      	ldr	r3, [pc, #72]	; (8002f2c <vApplicationIdleHook+0xc0>)
 8002ee4:	4a12      	ldr	r2, [pc, #72]	; (8002f30 <vApplicationIdleHook+0xc4>)
 8002ee6:	fb03 f000 	mul.w	r0, r3, r0
 8002eea:	ebb2 0ff0 	cmp.w	r2, r0, ror #3
 8002eee:	d209      	bcs.n	8002f04 <vApplicationIdleHook+0x98>
          if(!(HAL_GetTick()%50)) 
 8002ef0:	f003 f8a2 	bl	8006038 <HAL_GetTick>
 8002ef4:	4b09      	ldr	r3, [pc, #36]	; (8002f1c <vApplicationIdleHook+0xb0>)
 8002ef6:	4a0c      	ldr	r2, [pc, #48]	; (8002f28 <vApplicationIdleHook+0xbc>)
 8002ef8:	fb03 f000 	mul.w	r0, r3, r0
 8002efc:	ebb2 0f70 	cmp.w	r2, r0, ror #1
 8002f00:	d2e8      	bcs.n	8002ed4 <vApplicationIdleHook+0x68>
}
 8002f02:	bd10      	pop	{r4, pc}
 8002f04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
          BSP_LED_On(LED_ORANGE);
 8002f08:	2001      	movs	r0, #1
 8002f0a:	f002 bbf1 	b.w	80056f0 <BSP_LED_On>
 8002f0e:	bf00      	nop
 8002f10:	20001928 	.word	0x20001928
 8002f14:	20001918 	.word	0x20001918
 8002f18:	200005b4 	.word	0x200005b4
 8002f1c:	c28f5c29 	.word	0xc28f5c29
 8002f20:	0147ae14 	.word	0x0147ae14
 8002f24:	028f5c28 	.word	0x028f5c28
 8002f28:	051eb851 	.word	0x051eb851
 8002f2c:	26e978d5 	.word	0x26e978d5
 8002f30:	00418937 	.word	0x00418937

08002f34 <SENSOR_Generic_Data_Ready>:
{ 
 8002f34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002f38:	ed2d 8b06 	vpush	{d8-d10}
 8002f3c:	eeb0 8a40 	vmov.f32	s16, s0
 8002f40:	eef0 8a60 	vmov.f32	s17, s1
  COM_SensorStatus_t * tempStatus = COM_GetSensorStatus(sId);    
 8002f44:	b2c3      	uxtb	r3, r0
{ 
 8002f46:	b085      	sub	sp, #20
 8002f48:	4606      	mov	r6, r0
  COM_SensorStatus_t * tempStatus = COM_GetSensorStatus(sId);    
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	461c      	mov	r4, r3
 8002f4e:	ee0a 3a10 	vmov	s20, r3
{ 
 8002f52:	4617      	mov	r7, r2
 8002f54:	ec5a 9b10 	vmov	r9, sl, d0
 8002f58:	4688      	mov	r8, r1
  COM_SensorStatus_t * tempStatus = COM_GetSensorStatus(sId);    
 8002f5a:	f7fe fd09 	bl	8001970 <COM_GetSensorStatus>
 8002f5e:	4605      	mov	r5, r0
  COM_SensorDescriptor_t * tempDescriptor = COM_GetSensorDescriptor(sId); 
 8002f60:	4620      	mov	r0, r4
 8002f62:	f7fe fcfd 	bl	8001960 <COM_GetSensorDescriptor>
  if (sensor_first_dataReady[sId]) // Discard first set of sensor data
 8002f66:	4bcf      	ldr	r3, [pc, #828]	; (80032a4 <SENSOR_Generic_Data_Ready+0x370>)
 8002f68:	5d9a      	ldrb	r2, [r3, r6]
 8002f6a:	b1ca      	cbz	r2, 8002fa0 <SENSOR_Generic_Data_Ready+0x6c>
    sensor_n_samples_acc[sId] = 0.0f;    
 8002f6c:	4cce      	ldr	r4, [pc, #824]	; (80032a8 <SENSOR_Generic_Data_Ready+0x374>)
 8002f6e:	eb04 0186 	add.w	r1, r4, r6, lsl #2
    sensor_first_dataReady[sId] = 0;    
 8002f72:	2200      	movs	r2, #0
    sensor_n_samples_acc[sId] = 0.0f;    
 8002f74:	2000      	movs	r0, #0
    sensor_first_dataReady[sId] = 0;    
 8002f76:	559a      	strb	r2, [r3, r6]
    sensor_n_samples_acc[sId] = 0.0f;    
 8002f78:	6048      	str	r0, [r1, #4]
    tempStatus->initialOffset = (float)timeStamp;
 8002f7a:	4648      	mov	r0, r9
 8002f7c:	4651      	mov	r1, sl
 8002f7e:	f7fd fe5b 	bl	8000c38 <__aeabi_d2f>
    sensor_n_samples_to_timestamp[sId] = tempStatus->samplesPerTimestamp;
 8002f82:	eb04 0346 	add.w	r3, r4, r6, lsl #1
    old_time_stamp[sId] = timeStamp;
 8002f86:	eb04 06c6 	add.w	r6, r4, r6, lsl #3
    sensor_n_samples_to_timestamp[sId] = tempStatus->samplesPerTimestamp;
 8002f8a:	89aa      	ldrh	r2, [r5, #12]
    tempStatus->initialOffset = (float)timeStamp;
 8002f8c:	60a8      	str	r0, [r5, #8]
    old_time_stamp[sId] = timeStamp;
 8002f8e:	e9c6 9a0c 	strd	r9, sl, [r6, #48]	; 0x30
    sensor_n_samples_to_timestamp[sId] = tempStatus->samplesPerTimestamp;
 8002f92:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
}
 8002f96:	b005      	add	sp, #20
 8002f98:	ecbd 8b06 	vpop	{d8-d10}
 8002f9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if(tempDescriptor->dataType == DATA_TYPE_FLOAT || tempDescriptor->dataType == DATA_TYPE_INT32 || tempDescriptor->dataType == DATA_TYPE_UINT32) 
 8002fa0:	f890 a011 	ldrb.w	sl, [r0, #17]
 8002fa4:	f1aa 0304 	sub.w	r3, sl, #4
 8002fa8:	2b02      	cmp	r3, #2
 8002faa:	4604      	mov	r4, r0
 8002fac:	d938      	bls.n	8003020 <SENSOR_Generic_Data_Ready+0xec>
    else if(tempDescriptor->dataType == DATA_TYPE_UINT16 || tempDescriptor->dataType == DATA_TYPE_INT16) 
 8002fae:	f1aa 0302 	sub.w	r3, sl, #2
 8002fb2:	2b01      	cmp	r3, #1
 8002fb4:	f240 8117 	bls.w	80031e6 <SENSOR_Generic_Data_Ready+0x2b2>
    for (int i = 0; i < tempDescriptor->nSubSensors; i++)
 8002fb8:	f894 9058 	ldrb.w	r9, [r4, #88]	; 0x58
      nBytesPerSample = 4;
 8002fbc:	f1ba 0f01 	cmp.w	sl, #1
 8002fc0:	bf8c      	ite	hi
 8002fc2:	f04f 0a00 	movhi.w	sl, #0
 8002fc6:	f04f 0a01 	movls.w	sl, #1
    for (int i = 0; i < tempDescriptor->nSubSensors; i++)
 8002fca:	f1b9 0f00 	cmp.w	r9, #0
 8002fce:	d12e      	bne.n	800302e <SENSOR_Generic_Data_Ready+0xfa>
    sensor_n_samples_acc[sId] = (float)(size / nBytesPerSample);
 8002fd0:	fbb7 f4f9 	udiv	r4, r7, r9
 8002fd4:	ee07 4a90 	vmov	s15, r4
 8002fd8:	4bb3      	ldr	r3, [pc, #716]	; (80032a8 <SENSOR_Generic_Data_Ready+0x374>)
 8002fda:	9300      	str	r3, [sp, #0]
 8002fdc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002fe0:	461f      	mov	r7, r3
 8002fe2:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 8002fe6:	edc3 7a01 	vstr	s15, [r3, #4]
    tempStatus->measuredODR = sensor_n_samples_acc[sId]/(timeStamp - old_time_stamp[sId]);
 8002fea:	ee17 0a90 	vmov	r0, s15
 8002fee:	f7fd fad3 	bl	8000598 <__aeabi_f2d>
 8002ff2:	eb07 07c6 	add.w	r7, r7, r6, lsl #3
 8002ff6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002ffa:	468b      	mov	fp, r1
 8002ffc:	4682      	mov	sl, r0
 8002ffe:	ec51 0b18 	vmov	r0, r1, d8
 8003002:	f7fd f969 	bl	80002d8 <__aeabi_dsub>
 8003006:	4602      	mov	r2, r0
 8003008:	460b      	mov	r3, r1
 800300a:	4650      	mov	r0, sl
 800300c:	4659      	mov	r1, fp
 800300e:	f7fd fc45 	bl	800089c <__aeabi_ddiv>
 8003012:	f7fd fe11 	bl	8000c38 <__aeabi_d2f>
    old_time_stamp[sId] = timeStamp;
 8003016:	46cb      	mov	fp, r9
    tempStatus->measuredODR = sensor_n_samples_acc[sId]/(timeStamp - old_time_stamp[sId]);
 8003018:	6068      	str	r0, [r5, #4]
    old_time_stamp[sId] = timeStamp;
 800301a:	ed87 8b0c 	vstr	d8, [r7, #48]	; 0x30
    while(toSend > 0)
 800301e:	e066      	b.n	80030ee <SENSOR_Generic_Data_Ready+0x1ba>
      nBytesPerSample = 4;
 8003020:	f04f 0a04 	mov.w	sl, #4
    for (int i = 0; i < tempDescriptor->nSubSensors; i++)
 8003024:	f894 9058 	ldrb.w	r9, [r4, #88]	; 0x58
 8003028:	f1b9 0f00 	cmp.w	r9, #0
 800302c:	d0d0      	beq.n	8002fd0 <SENSOR_Generic_Data_Ready+0x9c>
      if (tempStatus->subSensorStatus[i].isActive)
 800302e:	f895 b024 	ldrb.w	fp, [r5, #36]	; 0x24
 8003032:	f1bb 0f00 	cmp.w	fp, #0
 8003036:	f040 8101 	bne.w	800323c <SENSOR_Generic_Data_Ready+0x308>
    for (int i = 0; i < tempDescriptor->nSubSensors; i++)
 800303a:	f1b9 0f01 	cmp.w	r9, #1
 800303e:	d92b      	bls.n	8003098 <SENSOR_Generic_Data_Ready+0x164>
      if (tempStatus->subSensorStatus[i].isActive)
 8003040:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
 8003044:	2b00      	cmp	r3, #0
 8003046:	f040 8103 	bne.w	8003250 <SENSOR_Generic_Data_Ready+0x31c>
    for (int i = 0; i < tempDescriptor->nSubSensors; i++)
 800304a:	f1b9 0f02 	cmp.w	r9, #2
 800304e:	d923      	bls.n	8003098 <SENSOR_Generic_Data_Ready+0x164>
      if (tempStatus->subSensorStatus[i].isActive)
 8003050:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
 8003054:	2b00      	cmp	r3, #0
 8003056:	f040 80c9 	bne.w	80031ec <SENSOR_Generic_Data_Ready+0x2b8>
    for (int i = 0; i < tempDescriptor->nSubSensors; i++)
 800305a:	f1b9 0f03 	cmp.w	r9, #3
 800305e:	d91b      	bls.n	8003098 <SENSOR_Generic_Data_Ready+0x164>
      if (tempStatus->subSensorStatus[i].isActive)
 8003060:	f895 3048 	ldrb.w	r3, [r5, #72]	; 0x48
 8003064:	2b00      	cmp	r3, #0
 8003066:	f040 80cd 	bne.w	8003204 <SENSOR_Generic_Data_Ready+0x2d0>
    for (int i = 0; i < tempDescriptor->nSubSensors; i++)
 800306a:	f1b9 0f04 	cmp.w	r9, #4
 800306e:	d913      	bls.n	8003098 <SENSOR_Generic_Data_Ready+0x164>
      if (tempStatus->subSensorStatus[i].isActive)
 8003070:	f895 3054 	ldrb.w	r3, [r5, #84]	; 0x54
 8003074:	2b00      	cmp	r3, #0
 8003076:	f040 8108 	bne.w	800328a <SENSOR_Generic_Data_Ready+0x356>
    for (int i = 0; i < tempDescriptor->nSubSensors; i++)
 800307a:	f1b9 0f05 	cmp.w	r9, #5
 800307e:	d90b      	bls.n	8003098 <SENSOR_Generic_Data_Ready+0x164>
 8003080:	462a      	mov	r2, r5
 8003082:	2305      	movs	r3, #5
      if (tempStatus->subSensorStatus[i].isActive)
 8003084:	f892 1060 	ldrb.w	r1, [r2, #96]	; 0x60
 8003088:	2900      	cmp	r1, #0
 800308a:	f040 8115 	bne.w	80032b8 <SENSOR_Generic_Data_Ready+0x384>
    for (int i = 0; i < tempDescriptor->nSubSensors; i++)
 800308e:	3301      	adds	r3, #1
 8003090:	4599      	cmp	r9, r3
 8003092:	f102 020c 	add.w	r2, r2, #12
 8003096:	dcf5      	bgt.n	8003084 <SENSOR_Generic_Data_Ready+0x150>
 8003098:	fb0b fb0a 	mul.w	fp, fp, sl
    sensor_n_samples_acc[sId] = (float)(size / nBytesPerSample);
 800309c:	fbb7 f4fb 	udiv	r4, r7, fp
 80030a0:	ee07 4a90 	vmov	s15, r4
 80030a4:	4b80      	ldr	r3, [pc, #512]	; (80032a8 <SENSOR_Generic_Data_Ready+0x374>)
 80030a6:	9300      	str	r3, [sp, #0]
 80030a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80030ac:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 80030b0:	edc3 7a01 	vstr	s15, [r3, #4]
    tempStatus->measuredODR = sensor_n_samples_acc[sId]/(timeStamp - old_time_stamp[sId]);
 80030b4:	ee17 0a90 	vmov	r0, s15
 80030b8:	f7fd fa6e 	bl	8000598 <__aeabi_f2d>
 80030bc:	9b00      	ldr	r3, [sp, #0]
 80030be:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 80030c2:	e9d9 230c 	ldrd	r2, r3, [r9, #48]	; 0x30
 80030c6:	ec41 0b19 	vmov	d9, r0, r1
 80030ca:	ec51 0b18 	vmov	r0, r1, d8
 80030ce:	f7fd f903 	bl	80002d8 <__aeabi_dsub>
 80030d2:	4602      	mov	r2, r0
 80030d4:	460b      	mov	r3, r1
 80030d6:	ec51 0b19 	vmov	r0, r1, d9
 80030da:	f7fd fbdf 	bl	800089c <__aeabi_ddiv>
 80030de:	f7fd fdab 	bl	8000c38 <__aeabi_d2f>
    while(toSend > 0)
 80030e2:	455f      	cmp	r7, fp
    tempStatus->measuredODR = sensor_n_samples_acc[sId]/(timeStamp - old_time_stamp[sId]);
 80030e4:	6068      	str	r0, [r5, #4]
    old_time_stamp[sId] = timeStamp;
 80030e6:	ed89 8b0c 	vstr	d8, [r9, #48]	; 0x30
    while(toSend > 0)
 80030ea:	f4ff af54 	bcc.w	8002f96 <SENSOR_Generic_Data_Ready+0x62>
 80030ee:	9b00      	ldr	r3, [sp, #0]
 80030f0:	f8df 91c0 	ldr.w	r9, [pc, #448]	; 80032b4 <SENSOR_Generic_Data_Ready+0x380>
 80030f4:	eb03 0a46 	add.w	sl, r3, r6, lsl #1
 80030f8:	0072      	lsls	r2, r6, #1
 80030fa:	f8ba 3088 	ldrh.w	r3, [sl, #136]	; 0x88
 80030fe:	9201      	str	r2, [sp, #4]
 8003100:	e031      	b.n	8003166 <SENSOR_Generic_Data_Ready+0x232>
        else if (com_status == HS_DATALOG_USB_STARTED )
 8003102:	f899 2000 	ldrb.w	r2, [r9]
 8003106:	2a01      	cmp	r2, #1
 8003108:	d047      	beq.n	800319a <SENSOR_Generic_Data_Ready+0x266>
        double newTS = timeStamp - ((1.0 / (double)tempStatus->measuredODR) * toSend);   
 800310a:	6868      	ldr	r0, [r5, #4]
        toSend -= sensor_n_samples_to_timestamp[sId];
 800310c:	1ae4      	subs	r4, r4, r3
        buf+=sensor_n_samples_to_timestamp[sId] * nBytesPerSample;
 800310e:	fb0b 8803 	mla	r8, fp, r3, r8
        double newTS = timeStamp - ((1.0 / (double)tempStatus->measuredODR) * toSend);   
 8003112:	f7fd fa41 	bl	8000598 <__aeabi_f2d>
 8003116:	4602      	mov	r2, r0
 8003118:	460b      	mov	r3, r1
 800311a:	2000      	movs	r0, #0
 800311c:	4963      	ldr	r1, [pc, #396]	; (80032ac <SENSOR_Generic_Data_Ready+0x378>)
 800311e:	f7fd fbbd 	bl	800089c <__aeabi_ddiv>
        toSend -= sensor_n_samples_to_timestamp[sId];
 8003122:	b2a4      	uxth	r4, r4
        double newTS = timeStamp - ((1.0 / (double)tempStatus->measuredODR) * toSend);   
 8003124:	4606      	mov	r6, r0
 8003126:	4620      	mov	r0, r4
 8003128:	460f      	mov	r7, r1
 800312a:	f7fd fa23 	bl	8000574 <__aeabi_i2d>
 800312e:	4602      	mov	r2, r0
 8003130:	460b      	mov	r3, r1
 8003132:	4630      	mov	r0, r6
 8003134:	4639      	mov	r1, r7
 8003136:	f7fd fa87 	bl	8000648 <__aeabi_dmul>
 800313a:	460b      	mov	r3, r1
 800313c:	4602      	mov	r2, r0
 800313e:	ec51 0b18 	vmov	r0, r1, d8
 8003142:	f7fd f8c9 	bl	80002d8 <__aeabi_dsub>
        if(com_status == HS_DATALOG_SD_STARTED)
 8003146:	f899 3000 	ldrb.w	r3, [r9]
 800314a:	2b02      	cmp	r3, #2
        double newTS = timeStamp - ((1.0 / (double)tempStatus->measuredODR) * toSend);   
 800314c:	e9cd 0102 	strd	r0, r1, [sp, #8]
        if(com_status == HS_DATALOG_SD_STARTED)
 8003150:	d01b      	beq.n	800318a <SENSOR_Generic_Data_Ready+0x256>
        else if (com_status == HS_DATALOG_USB_STARTED )
 8003152:	f899 3000 	ldrb.w	r3, [r9]
 8003156:	2b01      	cmp	r3, #1
 8003158:	d029      	beq.n	80031ae <SENSOR_Generic_Data_Ready+0x27a>
        sensor_n_samples_to_timestamp[sId] = tempStatus->samplesPerTimestamp;  
 800315a:	89ab      	ldrh	r3, [r5, #12]
 800315c:	f8aa 3088 	strh.w	r3, [sl, #136]	; 0x88
    while(toSend > 0)
 8003160:	2c00      	cmp	r4, #0
 8003162:	f43f af18 	beq.w	8002f96 <SENSOR_Generic_Data_Ready+0x62>
      if(toSend < sensor_n_samples_to_timestamp[sId] || sensor_n_samples_to_timestamp[sId] == 0)
 8003166:	429c      	cmp	r4, r3
        if(com_status == HS_DATALOG_SD_STARTED)
 8003168:	f899 2000 	ldrb.w	r2, [r9]
      if(toSend < sensor_n_samples_to_timestamp[sId] || sensor_n_samples_to_timestamp[sId] == 0)
 800316c:	d327      	bcc.n	80031be <SENSOR_Generic_Data_Ready+0x28a>
 800316e:	b333      	cbz	r3, 80031be <SENSOR_Generic_Data_Ready+0x28a>
        if(com_status == HS_DATALOG_SD_STARTED)
 8003170:	2a02      	cmp	r2, #2
 8003172:	d1c6      	bne.n	8003102 <SENSOR_Generic_Data_Ready+0x1ce>
          SDM_Fill_Buffer(sId, (uint8_t *)buf, sensor_n_samples_to_timestamp[sId] * nBytesPerSample);
 8003174:	fb13 f30b 	smulbb	r3, r3, fp
 8003178:	b29a      	uxth	r2, r3
 800317a:	ee1a 0a10 	vmov	r0, s20
 800317e:	4641      	mov	r1, r8
 8003180:	f000 faa4 	bl	80036cc <SDM_Fill_Buffer>
 8003184:	f8ba 3088 	ldrh.w	r3, [sl, #136]	; 0x88
 8003188:	e7bf      	b.n	800310a <SENSOR_Generic_Data_Ready+0x1d6>
          SDM_Fill_Buffer(sId, (uint8_t *)&newTS, 8);
 800318a:	2208      	movs	r2, #8
 800318c:	ee1a 0a10 	vmov	r0, s20
 8003190:	eb0d 0102 	add.w	r1, sp, r2
 8003194:	f000 fa9a 	bl	80036cc <SDM_Fill_Buffer>
 8003198:	e7df      	b.n	800315a <SENSOR_Generic_Data_Ready+0x226>
          USBD_WCID_STREAMING_FillTxDataBuffer(&USBD_Device, tempStatus->comChannelNumber, (uint8_t *)buf, sensor_n_samples_to_timestamp[sId] * nBytesPerSample);
 800319a:	fb0b f303 	mul.w	r3, fp, r3
 800319e:	7e29      	ldrb	r1, [r5, #24]
 80031a0:	4843      	ldr	r0, [pc, #268]	; (80032b0 <SENSOR_Generic_Data_Ready+0x37c>)
 80031a2:	4642      	mov	r2, r8
 80031a4:	f00b f946 	bl	800e434 <USBD_WCID_STREAMING_FillTxDataBuffer>
 80031a8:	f8ba 3088 	ldrh.w	r3, [sl, #136]	; 0x88
 80031ac:	e7ad      	b.n	800310a <SENSOR_Generic_Data_Ready+0x1d6>
          USBD_WCID_STREAMING_FillTxDataBuffer(&USBD_Device, tempStatus->comChannelNumber, (uint8_t *)&newTS, 8);
 80031ae:	2308      	movs	r3, #8
 80031b0:	7e29      	ldrb	r1, [r5, #24]
 80031b2:	483f      	ldr	r0, [pc, #252]	; (80032b0 <SENSOR_Generic_Data_Ready+0x37c>)
 80031b4:	eb0d 0203 	add.w	r2, sp, r3
 80031b8:	f00b f93c 	bl	800e434 <USBD_WCID_STREAMING_FillTxDataBuffer>
 80031bc:	e7cd      	b.n	800315a <SENSOR_Generic_Data_Ready+0x226>
        if(com_status == HS_DATALOG_SD_STARTED)
 80031be:	2a02      	cmp	r2, #2
 80031c0:	d052      	beq.n	8003268 <SENSOR_Generic_Data_Ready+0x334>
        else if (com_status == HS_DATALOG_USB_STARTED )
 80031c2:	f899 2000 	ldrb.w	r2, [r9]
 80031c6:	2a01      	cmp	r2, #1
 80031c8:	d028      	beq.n	800321c <SENSOR_Generic_Data_Ready+0x2e8>
        if(sensor_n_samples_to_timestamp[sId] != 0)
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	f43f aee3 	beq.w	8002f96 <SENSOR_Generic_Data_Ready+0x62>
          sensor_n_samples_to_timestamp[sId] -= toSend;
 80031d0:	e9dd 2100 	ldrd	r2, r1, [sp]
 80031d4:	440a      	add	r2, r1
 80031d6:	1b1b      	subs	r3, r3, r4
 80031d8:	f8a2 3088 	strh.w	r3, [r2, #136]	; 0x88
}
 80031dc:	b005      	add	sp, #20
 80031de:	ecbd 8b06 	vpop	{d8-d10}
 80031e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      nBytesPerSample = 2;
 80031e6:	f04f 0a02 	mov.w	sl, #2
 80031ea:	e71b      	b.n	8003024 <SENSOR_Generic_Data_Ready+0xf0>
        tempSubSensorDescriptor = COM_GetSubSensorDescriptor(sId, i);
 80031ec:	ee1a 0a10 	vmov	r0, s20
 80031f0:	2102      	movs	r1, #2
 80031f2:	f7fe fbc7 	bl	8001984 <COM_GetSubSensorDescriptor>
        totalDataPerSample += tempSubSensorDescriptor->dataPerSample;     
 80031f6:	7883      	ldrb	r3, [r0, #2]
 80031f8:	f894 9058 	ldrb.w	r9, [r4, #88]	; 0x58
 80031fc:	449b      	add	fp, r3
 80031fe:	fa5f fb8b 	uxtb.w	fp, fp
 8003202:	e72a      	b.n	800305a <SENSOR_Generic_Data_Ready+0x126>
        tempSubSensorDescriptor = COM_GetSubSensorDescriptor(sId, i);
 8003204:	ee1a 0a10 	vmov	r0, s20
 8003208:	2103      	movs	r1, #3
 800320a:	f7fe fbbb 	bl	8001984 <COM_GetSubSensorDescriptor>
        totalDataPerSample += tempSubSensorDescriptor->dataPerSample;     
 800320e:	7883      	ldrb	r3, [r0, #2]
 8003210:	f894 9058 	ldrb.w	r9, [r4, #88]	; 0x58
 8003214:	449b      	add	fp, r3
 8003216:	fa5f fb8b 	uxtb.w	fp, fp
 800321a:	e726      	b.n	800306a <SENSOR_Generic_Data_Ready+0x136>
          USBD_WCID_STREAMING_FillTxDataBuffer(&USBD_Device, tempStatus->comChannelNumber  , (uint8_t *)buf, toSend * nBytesPerSample);
 800321c:	fb0b f304 	mul.w	r3, fp, r4
 8003220:	4642      	mov	r2, r8
 8003222:	7e29      	ldrb	r1, [r5, #24]
 8003224:	4822      	ldr	r0, [pc, #136]	; (80032b0 <SENSOR_Generic_Data_Ready+0x37c>)
 8003226:	f00b f905 	bl	800e434 <USBD_WCID_STREAMING_FillTxDataBuffer>
 800322a:	e9dd 3200 	ldrd	r3, r2, [sp]
 800322e:	4413      	add	r3, r2
 8003230:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
        if(sensor_n_samples_to_timestamp[sId] != 0)
 8003234:	2b00      	cmp	r3, #0
 8003236:	f43f aeae 	beq.w	8002f96 <SENSOR_Generic_Data_Ready+0x62>
 800323a:	e7c9      	b.n	80031d0 <SENSOR_Generic_Data_Ready+0x29c>
        tempSubSensorDescriptor = COM_GetSubSensorDescriptor(sId, i);
 800323c:	ee1a 0a10 	vmov	r0, s20
 8003240:	2100      	movs	r1, #0
 8003242:	f7fe fb9f 	bl	8001984 <COM_GetSubSensorDescriptor>
        totalDataPerSample += tempSubSensorDescriptor->dataPerSample;     
 8003246:	f894 9058 	ldrb.w	r9, [r4, #88]	; 0x58
 800324a:	f890 b002 	ldrb.w	fp, [r0, #2]
 800324e:	e6f4      	b.n	800303a <SENSOR_Generic_Data_Ready+0x106>
        tempSubSensorDescriptor = COM_GetSubSensorDescriptor(sId, i);
 8003250:	ee1a 0a10 	vmov	r0, s20
 8003254:	2101      	movs	r1, #1
 8003256:	f7fe fb95 	bl	8001984 <COM_GetSubSensorDescriptor>
        totalDataPerSample += tempSubSensorDescriptor->dataPerSample;     
 800325a:	7883      	ldrb	r3, [r0, #2]
 800325c:	f894 9058 	ldrb.w	r9, [r4, #88]	; 0x58
 8003260:	449b      	add	fp, r3
 8003262:	fa5f fb8b 	uxtb.w	fp, fp
 8003266:	e6f0      	b.n	800304a <SENSOR_Generic_Data_Ready+0x116>
          SDM_Fill_Buffer(sId , (uint8_t *)buf, toSend * nBytesPerSample);
 8003268:	fb14 f20b 	smulbb	r2, r4, fp
 800326c:	b292      	uxth	r2, r2
 800326e:	ee1a 0a10 	vmov	r0, s20
 8003272:	4641      	mov	r1, r8
 8003274:	f000 fa2a 	bl	80036cc <SDM_Fill_Buffer>
 8003278:	e9dd 3200 	ldrd	r3, r2, [sp]
 800327c:	4413      	add	r3, r2
 800327e:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
        if(sensor_n_samples_to_timestamp[sId] != 0)
 8003282:	2b00      	cmp	r3, #0
 8003284:	f43f ae87 	beq.w	8002f96 <SENSOR_Generic_Data_Ready+0x62>
 8003288:	e7a2      	b.n	80031d0 <SENSOR_Generic_Data_Ready+0x29c>
        tempSubSensorDescriptor = COM_GetSubSensorDescriptor(sId, i);
 800328a:	ee1a 0a10 	vmov	r0, s20
 800328e:	2104      	movs	r1, #4
 8003290:	f7fe fb78 	bl	8001984 <COM_GetSubSensorDescriptor>
        totalDataPerSample += tempSubSensorDescriptor->dataPerSample;     
 8003294:	7883      	ldrb	r3, [r0, #2]
 8003296:	f894 9058 	ldrb.w	r9, [r4, #88]	; 0x58
 800329a:	449b      	add	fp, r3
 800329c:	fa5f fb8b 	uxtb.w	fp, fp
 80032a0:	e6eb      	b.n	800307a <SENSOR_Generic_Data_Ready+0x146>
 80032a2:	bf00      	nop
 80032a4:	200000c8 	.word	0x200000c8
 80032a8:	200016d0 	.word	0x200016d0
 80032ac:	3ff00000 	.word	0x3ff00000
 80032b0:	20017340 	.word	0x20017340
 80032b4:	200005b4 	.word	0x200005b4
        tempSubSensorDescriptor = COM_GetSubSensorDescriptor(sId, i);
 80032b8:	b2d9      	uxtb	r1, r3
 80032ba:	ee1a 0a10 	vmov	r0, s20
 80032be:	9201      	str	r2, [sp, #4]
 80032c0:	9300      	str	r3, [sp, #0]
 80032c2:	f7fe fb5f 	bl	8001984 <COM_GetSubSensorDescriptor>
    for (int i = 0; i < tempDescriptor->nSubSensors; i++)
 80032c6:	9b00      	ldr	r3, [sp, #0]
 80032c8:	f894 9058 	ldrb.w	r9, [r4, #88]	; 0x58
        totalDataPerSample += tempSubSensorDescriptor->dataPerSample;     
 80032cc:	7881      	ldrb	r1, [r0, #2]
 80032ce:	9a01      	ldr	r2, [sp, #4]
    for (int i = 0; i < tempDescriptor->nSubSensors; i++)
 80032d0:	3301      	adds	r3, #1
        totalDataPerSample += tempSubSensorDescriptor->dataPerSample;     
 80032d2:	448b      	add	fp, r1
    for (int i = 0; i < tempDescriptor->nSubSensors; i++)
 80032d4:	454b      	cmp	r3, r9
 80032d6:	f102 020c 	add.w	r2, r2, #12
        totalDataPerSample += tempSubSensorDescriptor->dataPerSample;     
 80032da:	fa5f fb8b 	uxtb.w	fp, fp
    for (int i = 0; i < tempDescriptor->nSubSensors; i++)
 80032de:	f6ff aed1 	blt.w	8003084 <SENSOR_Generic_Data_Ready+0x150>
 80032e2:	e6d9      	b.n	8003098 <SENSOR_Generic_Data_Ready+0x164>

080032e4 <IIS3DWB_Data_Ready>:
  SENSOR_Generic_Data_Ready(iis3dwb_com_id, buf, size, timeStamp);
 80032e4:	4b02      	ldr	r3, [pc, #8]	; (80032f0 <IIS3DWB_Data_Ready+0xc>)
{  
 80032e6:	460a      	mov	r2, r1
  SENSOR_Generic_Data_Ready(iis3dwb_com_id, buf, size, timeStamp);
 80032e8:	4601      	mov	r1, r0
 80032ea:	7818      	ldrb	r0, [r3, #0]
 80032ec:	f7ff be22 	b.w	8002f34 <SENSOR_Generic_Data_Ready>
 80032f0:	20017330 	.word	0x20017330

080032f4 <MP23ABS1_Start>:
}

void MP23ABS1_Start(void)
{
  MP23ABS1_Set_State(SM_SENSOR_STATE_INITIALIZING);
  osThreadResume(MP23ABS1_Thread_Id);
 80032f4:	4a03      	ldr	r2, [pc, #12]	; (8003304 <MP23ABS1_Start+0x10>)
  MP23ABS1_Sensor_State = newState;
 80032f6:	4b04      	ldr	r3, [pc, #16]	; (8003308 <MP23ABS1_Start+0x14>)
  osThreadResume(MP23ABS1_Thread_Id);
 80032f8:	6810      	ldr	r0, [r2, #0]
  MP23ABS1_Sensor_State = newState;
 80032fa:	2203      	movs	r2, #3
 80032fc:	701a      	strb	r2, [r3, #0]
  osThreadResume(MP23ABS1_Thread_Id);
 80032fe:	f00f bb37 	b.w	8012970 <osThreadResume>
 8003302:	bf00      	nop
 8003304:	20017664 	.word	0x20017664
 8003308:	200000d3 	.word	0x200000d3

0800330c <MP23ABS1_Stop>:
  MP23ABS1_Sensor_State = newState;
 800330c:	4b01      	ldr	r3, [pc, #4]	; (8003314 <MP23ABS1_Stop+0x8>)
 800330e:	2201      	movs	r2, #1
 8003310:	701a      	strb	r2, [r3, #0]
}

void MP23ABS1_Stop(void)
{
  MP23ABS1_Set_State(SM_SENSOR_STATE_SUSPENDING);
}
 8003312:	4770      	bx	lr
 8003314:	200000d3 	.word	0x200000d3

08003318 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8003318:	b538      	push	{r3, r4, r5, lr}
  Stat = STA_NOINIT;
 800331a:	4c0a      	ldr	r4, [pc, #40]	; (8003344 <SD_initialize+0x2c>)
 800331c:	2501      	movs	r5, #1
 800331e:	7025      	strb	r5, [r4, #0]
#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8003320:	f002 fe00 	bl	8005f24 <BSP_SD_Init>
 8003324:	b108      	cbz	r0, 800332a <SD_initialize+0x12>
  }

#else
  Stat = SD_CheckStatus(lun);
#endif
  return Stat;
 8003326:	7820      	ldrb	r0, [r4, #0]
}
 8003328:	bd38      	pop	{r3, r4, r5, pc}
  Stat = STA_NOINIT;
 800332a:	7025      	strb	r5, [r4, #0]
  if(BSP_SD_GetCardState() == MSD_OK)
 800332c:	f002 fe2a 	bl	8005f84 <BSP_SD_GetCardState>
 8003330:	b918      	cbnz	r0, 800333a <SD_initialize+0x22>
    Stat &= ~STA_NOINIT;
 8003332:	7823      	ldrb	r3, [r4, #0]
 8003334:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8003338:	7023      	strb	r3, [r4, #0]
  return Stat;
 800333a:	7823      	ldrb	r3, [r4, #0]
 800333c:	b2db      	uxtb	r3, r3
    Stat = SD_CheckStatus(lun);
 800333e:	7023      	strb	r3, [r4, #0]
  return Stat;
 8003340:	7820      	ldrb	r0, [r4, #0]
}
 8003342:	bd38      	pop	{r3, r4, r5, pc}
 8003344:	200000d4 	.word	0x200000d4

08003348 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8003348:	b510      	push	{r4, lr}
  Stat = STA_NOINIT;
 800334a:	4c06      	ldr	r4, [pc, #24]	; (8003364 <SD_status+0x1c>)
 800334c:	2301      	movs	r3, #1
 800334e:	7023      	strb	r3, [r4, #0]
  if(BSP_SD_GetCardState() == MSD_OK)
 8003350:	f002 fe18 	bl	8005f84 <BSP_SD_GetCardState>
 8003354:	b918      	cbnz	r0, 800335e <SD_status+0x16>
    Stat &= ~STA_NOINIT;
 8003356:	7823      	ldrb	r3, [r4, #0]
 8003358:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800335c:	7023      	strb	r3, [r4, #0]
  return Stat;
 800335e:	7820      	ldrb	r0, [r4, #0]
  return SD_CheckStatus(lun);
}
 8003360:	bd10      	pop	{r4, pc}
 8003362:	bf00      	nop
 8003364:	200000d4 	.word	0x200000d4

08003368 <SD_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8003368:	b570      	push	{r4, r5, r6, lr}
  DRESULT res = RES_ERROR;
  ReadStatus = 0;
 800336a:	4c16      	ldr	r4, [pc, #88]	; (80033c4 <SD_read+0x5c>)
  uint32_t timeout;
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 800336c:	4608      	mov	r0, r1
 800336e:	4611      	mov	r1, r2
 8003370:	461a      	mov	r2, r3
  ReadStatus = 0;
 8003372:	2300      	movs	r3, #0
 8003374:	6023      	str	r3, [r4, #0]
  if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 8003376:	f002 fd75 	bl	8005e64 <BSP_SD_ReadBlocks_DMA>
 800337a:	b108      	cbz	r0, 8003380 <SD_read+0x18>
  DRESULT res = RES_ERROR;
 800337c:	2001      	movs	r0, #1
      }
    }
  }

  return res;
}
 800337e:	bd70      	pop	{r4, r5, r6, pc}
    timeout = HAL_GetTick();
 8003380:	f002 fe5a 	bl	8006038 <HAL_GetTick>
    while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8003384:	f247 562f 	movw	r6, #29999	; 0x752f
    timeout = HAL_GetTick();
 8003388:	4605      	mov	r5, r0
    while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800338a:	e004      	b.n	8003396 <SD_read+0x2e>
 800338c:	f002 fe54 	bl	8006038 <HAL_GetTick>
 8003390:	1b40      	subs	r0, r0, r5
 8003392:	42b0      	cmp	r0, r6
 8003394:	d802      	bhi.n	800339c <SD_read+0x34>
 8003396:	6823      	ldr	r3, [r4, #0]
 8003398:	2b00      	cmp	r3, #0
 800339a:	d0f7      	beq.n	800338c <SD_read+0x24>
    if (ReadStatus == 0)
 800339c:	6823      	ldr	r3, [r4, #0]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d0ec      	beq.n	800337c <SD_read+0x14>
      ReadStatus = 0;
 80033a2:	2300      	movs	r3, #0
 80033a4:	6023      	str	r3, [r4, #0]
      timeout = HAL_GetTick();
 80033a6:	f002 fe47 	bl	8006038 <HAL_GetTick>
      while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80033aa:	f247 552f 	movw	r5, #29999	; 0x752f
      timeout = HAL_GetTick();
 80033ae:	4604      	mov	r4, r0
      while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80033b0:	f002 fe42 	bl	8006038 <HAL_GetTick>
 80033b4:	1b00      	subs	r0, r0, r4
 80033b6:	42a8      	cmp	r0, r5
 80033b8:	d8e0      	bhi.n	800337c <SD_read+0x14>
        if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80033ba:	f002 fde3 	bl	8005f84 <BSP_SD_GetCardState>
 80033be:	2800      	cmp	r0, #0
 80033c0:	d1f6      	bne.n	80033b0 <SD_read+0x48>
}
 80033c2:	bd70      	pop	{r4, r5, r6, pc}
 80033c4:	20001774 	.word	0x20001774

080033c8 <SD_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 80033c8:	b538      	push	{r3, r4, r5, lr}
  DRESULT res = RES_ERROR;
  WriteStatus = 0;
 80033ca:	4d13      	ldr	r5, [pc, #76]	; (8003418 <SD_write+0x50>)
   */
  alignedAddr = (uint32_t)buff &  ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 80033cc:	4608      	mov	r0, r1
 80033ce:	4611      	mov	r1, r2
 80033d0:	461a      	mov	r2, r3
  WriteStatus = 0;
 80033d2:	2300      	movs	r3, #0
 80033d4:	606b      	str	r3, [r5, #4]
  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 80033d6:	f002 fd53 	bl	8005e80 <BSP_SD_WriteBlocks_DMA>
 80033da:	b108      	cbz	r0, 80033e0 <SD_write+0x18>
  DRESULT res = RES_ERROR;
 80033dc:	2001      	movs	r0, #1
      }
    }
  }

  return res;
}
 80033de:	bd38      	pop	{r3, r4, r5, pc}
    timeout = HAL_GetTick();
 80033e0:	4604      	mov	r4, r0
 80033e2:	f002 fe29 	bl	8006038 <HAL_GetTick>
    osSemaphoreWait(sdioSem_id, SD_TIMEOUT);
 80033e6:	4b0d      	ldr	r3, [pc, #52]	; (800341c <SD_write+0x54>)
 80033e8:	f247 5130 	movw	r1, #30000	; 0x7530
 80033ec:	6818      	ldr	r0, [r3, #0]
 80033ee:	f00f f94d 	bl	801268c <osSemaphoreWait>
    if (WriteStatus == 0)
 80033f2:	686b      	ldr	r3, [r5, #4]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d0f1      	beq.n	80033dc <SD_write+0x14>
      WriteStatus = 0;
 80033f8:	606c      	str	r4, [r5, #4]
      timeout = HAL_GetTick();
 80033fa:	f002 fe1d 	bl	8006038 <HAL_GetTick>
      while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80033fe:	f247 552f 	movw	r5, #29999	; 0x752f
      timeout = HAL_GetTick();
 8003402:	4604      	mov	r4, r0
      while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8003404:	f002 fe18 	bl	8006038 <HAL_GetTick>
 8003408:	1b00      	subs	r0, r0, r4
 800340a:	42a8      	cmp	r0, r5
 800340c:	d8e6      	bhi.n	80033dc <SD_write+0x14>
        if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800340e:	f002 fdb9 	bl	8005f84 <BSP_SD_GetCardState>
 8003412:	2800      	cmp	r0, #0
 8003414:	d1f6      	bne.n	8003404 <SD_write+0x3c>
}
 8003416:	bd38      	pop	{r3, r4, r5, pc}
 8003418:	20001774 	.word	0x20001774
 800341c:	200197b8 	.word	0x200197b8

08003420 <SD_ioctl>:
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
  DRESULT res = RES_ERROR;
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8003420:	4b15      	ldr	r3, [pc, #84]	; (8003478 <SD_ioctl+0x58>)
 8003422:	781b      	ldrb	r3, [r3, #0]
 8003424:	07db      	lsls	r3, r3, #31
 8003426:	d411      	bmi.n	800344c <SD_ioctl+0x2c>
{
 8003428:	b510      	push	{r4, lr}
 800342a:	4608      	mov	r0, r1
 800342c:	b08a      	sub	sp, #40	; 0x28
 800342e:	4614      	mov	r4, r2

  switch (cmd)
 8003430:	2903      	cmp	r1, #3
 8003432:	d81e      	bhi.n	8003472 <SD_ioctl+0x52>
 8003434:	e8df f001 	tbb	[pc, r1]
 8003438:	0c150208 	.word	0x0c150208
    res = RES_OK;
    break;

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800343c:	a801      	add	r0, sp, #4
 800343e:	f002 fdab 	bl	8005f98 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8003442:	9b07      	ldr	r3, [sp, #28]
 8003444:	6023      	str	r3, [r4, #0]
    res = RES_OK;
 8003446:	2000      	movs	r0, #0
  default:
    res = RES_PARERR;
  }

  return res;
}
 8003448:	b00a      	add	sp, #40	; 0x28
 800344a:	bd10      	pop	{r4, pc}
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800344c:	2003      	movs	r0, #3
}
 800344e:	4770      	bx	lr
    BSP_SD_GetCardInfo(&CardInfo);
 8003450:	a801      	add	r0, sp, #4
 8003452:	f002 fda1 	bl	8005f98 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8003456:	9b08      	ldr	r3, [sp, #32]
 8003458:	2000      	movs	r0, #0
 800345a:	0a5b      	lsrs	r3, r3, #9
 800345c:	6023      	str	r3, [r4, #0]
}
 800345e:	b00a      	add	sp, #40	; 0x28
 8003460:	bd10      	pop	{r4, pc}
    BSP_SD_GetCardInfo(&CardInfo);
 8003462:	a801      	add	r0, sp, #4
 8003464:	f002 fd98 	bl	8005f98 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8003468:	9b08      	ldr	r3, [sp, #32]
 800346a:	8023      	strh	r3, [r4, #0]
    res = RES_OK;
 800346c:	2000      	movs	r0, #0
}
 800346e:	b00a      	add	sp, #40	; 0x28
 8003470:	bd10      	pop	{r4, pc}
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8003472:	2004      	movs	r0, #4
 8003474:	e7e8      	b.n	8003448 <SD_ioctl+0x28>
 8003476:	bf00      	nop
 8003478:	200000d4 	.word	0x200000d4

0800347c <BSP_SD_WriteCpltCallback>:
  */
//void BSP_SD_WriteCpltCallback(uint32_t SdCard)
void BSP_SD_WriteCpltCallback(void)
{
  WriteStatus = 1;
  osSemaphoreRelease(sdioSem_id);
 800347c:	4a03      	ldr	r2, [pc, #12]	; (800348c <BSP_SD_WriteCpltCallback+0x10>)
  WriteStatus = 1;
 800347e:	4b04      	ldr	r3, [pc, #16]	; (8003490 <BSP_SD_WriteCpltCallback+0x14>)
  osSemaphoreRelease(sdioSem_id);
 8003480:	6810      	ldr	r0, [r2, #0]
  WriteStatus = 1;
 8003482:	2201      	movs	r2, #1
 8003484:	605a      	str	r2, [r3, #4]
  osSemaphoreRelease(sdioSem_id);
 8003486:	f00f b92d 	b.w	80126e4 <osSemaphoreRelease>
 800348a:	bf00      	nop
 800348c:	200197b8 	.word	0x200197b8
 8003490:	20001774 	.word	0x20001774

08003494 <BSP_SD_ReadCpltCallback>:
   ===============================================================================
  */
//void BSP_SD_ReadCpltCallback(uint32_t SdCard)
void BSP_SD_ReadCpltCallback(void)
{
  ReadStatus = 1;
 8003494:	4b01      	ldr	r3, [pc, #4]	; (800349c <BSP_SD_ReadCpltCallback+0x8>)
 8003496:	2201      	movs	r2, #1
 8003498:	601a      	str	r2, [r3, #0]
}
 800349a:	4770      	bx	lr
 800349c:	20001774 	.word	0x20001774

080034a0 <HAL_PWR_PVDCallback>:
* @param  None 
* @retval None
*/
void HAL_PWR_PVDCallback(void)
{
  BatteryLow = 1;
 80034a0:	4b01      	ldr	r3, [pc, #4]	; (80034a8 <HAL_PWR_PVDCallback+0x8>)
 80034a2:	2201      	movs	r2, #1
 80034a4:	701a      	strb	r2, [r3, #0]
}
 80034a6:	4770      	bx	lr
 80034a8:	2000177c 	.word	0x2000177c

080034ac <SDM_Peripheral_Init>:
}


void SDM_Peripheral_Init(void)
{
  BSP_SD_Detect_Init();   
 80034ac:	f002 bca6 	b.w	8005dfc <BSP_SD_Detect_Init>

080034b0 <SDM_OS_Init>:
* @brief  Initialize SD Card Manager thread and queue
* @param  None
* @retval None
*/
void SDM_OS_Init(void)
{
 80034b0:	b530      	push	{r4, r5, lr}
  sdioSem_id = osSemaphoreCreate(osSemaphore(sdioSem), 1);
 80034b2:	4c11      	ldr	r4, [pc, #68]	; (80034f8 <SDM_OS_Init+0x48>)
{
 80034b4:	b087      	sub	sp, #28
  sdioSem_id = osSemaphoreCreate(osSemaphore(sdioSem), 1);
 80034b6:	2101      	movs	r1, #1
 80034b8:	4620      	mov	r0, r4
 80034ba:	f00f f8d3 	bl	8012664 <osSemaphoreCreate>
 80034be:	4b0f      	ldr	r3, [pc, #60]	; (80034fc <SDM_OS_Init+0x4c>)
  osSemaphoreWait(sdioSem_id, osWaitForever);
 80034c0:	f04f 31ff 	mov.w	r1, #4294967295
  sdioSem_id = osSemaphoreCreate(osSemaphore(sdioSem), 1);
 80034c4:	6018      	str	r0, [r3, #0]
  osSemaphoreWait(sdioSem_id, osWaitForever);
 80034c6:	f00f f8e1 	bl	801268c <osSemaphoreWait>
  
  sdThreadQueue_id = osMessageCreate(osMessageQ(sdThreadQueue), NULL);
 80034ca:	1d20      	adds	r0, r4, #4
 80034cc:	2100      	movs	r1, #0
 80034ce:	f00f f9c9 	bl	8012864 <osMessageCreate>
 80034d2:	4b0b      	ldr	r3, [pc, #44]	; (8003500 <SDM_OS_Init+0x50>)
  
  vQueueAddToRegistry( sdThreadQueue_id, "sdThreadQueue_id" );
 80034d4:	490b      	ldr	r1, [pc, #44]	; (8003504 <SDM_OS_Init+0x54>)
  sdThreadQueue_id = osMessageCreate(osMessageQ(sdThreadQueue), NULL);
 80034d6:	6018      	str	r0, [r3, #0]
  
  /* Thread definition: read data */
  osThreadDef(SDM_On_Off_Thread, SDM_Thread, SD_THREAD_PRIO, 1, configMINIMAL_STACK_SIZE*4);
 80034d8:	340c      	adds	r4, #12
  vQueueAddToRegistry( sdThreadQueue_id, "sdThreadQueue_id" );
 80034da:	f010 f92d 	bl	8013738 <vQueueAddToRegistry>
  osThreadDef(SDM_On_Off_Thread, SDM_Thread, SD_THREAD_PRIO, 1, configMINIMAL_STACK_SIZE*4);
 80034de:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80034e0:	ad01      	add	r5, sp, #4
 80034e2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80034e4:	6823      	ldr	r3, [r4, #0]
 80034e6:	602b      	str	r3, [r5, #0]
  /* Start thread 1 */
  SDM_Thread_Id = osThreadCreate(osThread(SDM_On_Off_Thread), NULL);
 80034e8:	2100      	movs	r1, #0
 80034ea:	a801      	add	r0, sp, #4
 80034ec:	f00f f8a2 	bl	8012634 <osThreadCreate>
 80034f0:	4b05      	ldr	r3, [pc, #20]	; (8003508 <SDM_OS_Init+0x58>)
 80034f2:	6018      	str	r0, [r3, #0]
}
 80034f4:	b007      	add	sp, #28
 80034f6:	bd30      	pop	{r4, r5, pc}
 80034f8:	0801b810 	.word	0x0801b810
 80034fc:	200197b8 	.word	0x200197b8
 8003500:	2001952c 	.word	0x2001952c
 8003504:	0801c178 	.word	0x0801c178
 8003508:	2001978c 	.word	0x2001978c

0800350c <SDM_SD_Init>:
* @brief  Initialize SD Card and file system
* @param  None
* @retval None
*/
void SDM_SD_Init(void)
{
 800350c:	b508      	push	{r3, lr}
  if(FATFS_LinkDriver(&SD_Driver, SDPath) == 0)
 800350e:	490d      	ldr	r1, [pc, #52]	; (8003544 <SDM_SD_Init+0x38>)
 8003510:	480d      	ldr	r0, [pc, #52]	; (8003548 <SDM_SD_Init+0x3c>)
 8003512:	f00e ffd9 	bl	80124c8 <FATFS_LinkDriver>
 8003516:	b100      	cbz	r0, 800351a <SDM_SD_Init+0xe>
        BSP_LED_Off(LED1);
        HAL_Delay(100);
      }
    }
  }
}
 8003518:	bd08      	pop	{r3, pc}
    if(f_mount(&SDFatFs, (TCHAR const*)SDPath, 0) != FR_OK)
 800351a:	4602      	mov	r2, r0
 800351c:	4909      	ldr	r1, [pc, #36]	; (8003544 <SDM_SD_Init+0x38>)
 800351e:	480b      	ldr	r0, [pc, #44]	; (800354c <SDM_SD_Init+0x40>)
 8003520:	f00d ff0e 	bl	8011340 <f_mount>
 8003524:	2800      	cmp	r0, #0
 8003526:	d0f7      	beq.n	8003518 <SDM_SD_Init+0xc>
        BSP_LED_On(LED1);
 8003528:	2000      	movs	r0, #0
 800352a:	f002 f8e1 	bl	80056f0 <BSP_LED_On>
        HAL_Delay(500);
 800352e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003532:	f002 fd87 	bl	8006044 <HAL_Delay>
        BSP_LED_Off(LED1);
 8003536:	2000      	movs	r0, #0
 8003538:	f002 f8e8 	bl	800570c <BSP_LED_Off>
        HAL_Delay(100);
 800353c:	2064      	movs	r0, #100	; 0x64
 800353e:	f002 fd81 	bl	8006044 <HAL_Delay>
      while(1)
 8003542:	e7f1      	b.n	8003528 <SDM_SD_Init+0x1c>
 8003544:	20019530 	.word	0x20019530
 8003548:	0801b7fc 	.word	0x0801b7fc
 800354c:	200178b8 	.word	0x200178b8

08003550 <SDM_SD_DeInit>:
* @brief  Deinitialize SD Card and file system
* @param  None
* @retval None
*/
void SDM_SD_DeInit(void)
{
 8003550:	b508      	push	{r3, lr}
  if(FATFS_UnLinkDriver(SDPath) == 0)
 8003552:	480c      	ldr	r0, [pc, #48]	; (8003584 <SDM_SD_DeInit+0x34>)
 8003554:	f00e ffda 	bl	801250c <FATFS_UnLinkDriver>
 8003558:	b100      	cbz	r0, 800355c <SDM_SD_DeInit+0xc>
        BSP_LED_Off(LED1);
        HAL_Delay(100);
      }
    }
  }
}
 800355a:	bd08      	pop	{r3, pc}
    if(f_mount(NULL, (TCHAR const*)SDPath, 0) != FR_OK)
 800355c:	4909      	ldr	r1, [pc, #36]	; (8003584 <SDM_SD_DeInit+0x34>)
 800355e:	4602      	mov	r2, r0
 8003560:	f00d feee 	bl	8011340 <f_mount>
 8003564:	2800      	cmp	r0, #0
 8003566:	d0f8      	beq.n	800355a <SDM_SD_DeInit+0xa>
        BSP_LED_On(LED1);
 8003568:	2000      	movs	r0, #0
 800356a:	f002 f8c1 	bl	80056f0 <BSP_LED_On>
        HAL_Delay(500);
 800356e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003572:	f002 fd67 	bl	8006044 <HAL_Delay>
        BSP_LED_Off(LED1);
 8003576:	2000      	movs	r0, #0
 8003578:	f002 f8c8 	bl	800570c <BSP_LED_Off>
        HAL_Delay(100);
 800357c:	2064      	movs	r0, #100	; 0x64
 800357e:	f002 fd61 	bl	8006044 <HAL_Delay>
      while(1)
 8003582:	e7f1      	b.n	8003568 <SDM_SD_DeInit+0x18>
 8003584:	20019530 	.word	0x20019530

08003588 <SDM_GetLastDirNumber>:
* @brief  Scan SD Card file system to find the latest directory number that includes to the LOG_DIR_PREFIX
* @param  None
* @retval 
*/
uint32_t SDM_GetLastDirNumber(void)
{
 8003588:	b530      	push	{r4, r5, lr}
  FRESULT fr;     /* Return value */
  DIR dj;         /* Directory search object */
  FILINFO fno;    /* File information */
  int dir_n = 0, tmp;
  char dir_name[sizeof(LOG_DIR_PREFIX)+1] = LOG_DIR_PREFIX;
 800358a:	4b22      	ldr	r3, [pc, #136]	; (8003614 <SDM_GetLastDirNumber+0x8c>)
  
  dir_name[sizeof(LOG_DIR_PREFIX)-1] = '*';  /* wildcard */
  dir_name[sizeof(LOG_DIR_PREFIX)] = 0;
  
  fr = f_findfirst(&dj, &fno, "", dir_name);  /* Start to search for matching directories */
 800358c:	4a22      	ldr	r2, [pc, #136]	; (8003618 <SDM_GetLastDirNumber+0x90>)
  char dir_name[sizeof(LOG_DIR_PREFIX)+1] = LOG_DIR_PREFIX;
 800358e:	e893 0003 	ldmia.w	r3, {r0, r1}
{
 8003592:	b0d7      	sub	sp, #348	; 0x15c
  fr = f_findfirst(&dj, &fno, "", dir_name);  /* Start to search for matching directories */
 8003594:	466b      	mov	r3, sp
  char dir_name[sizeof(LOG_DIR_PREFIX)+1] = LOG_DIR_PREFIX;
 8003596:	9000      	str	r0, [sp, #0]
  dir_name[sizeof(LOG_DIR_PREFIX)-1] = '*';  /* wildcard */
 8003598:	202a      	movs	r0, #42	; 0x2a
  char dir_name[sizeof(LOG_DIR_PREFIX)+1] = LOG_DIR_PREFIX;
 800359a:	f8ad 1004 	strh.w	r1, [sp, #4]
  dir_name[sizeof(LOG_DIR_PREFIX)-1] = '*';  /* wildcard */
 800359e:	f8ad 0006 	strh.w	r0, [sp, #6]
  fr = f_findfirst(&dj, &fno, "", dir_name);  /* Start to search for matching directories */
 80035a2:	a910      	add	r1, sp, #64	; 0x40
 80035a4:	a802      	add	r0, sp, #8
 80035a6:	f00e fd87 	bl	80120b8 <f_findfirst>
  if(fno.fname[0])
 80035aa:	f89d 5056 	ldrb.w	r5, [sp, #86]	; 0x56
 80035ae:	b92d      	cbnz	r5, 80035bc <SDM_GetLastDirNumber+0x34>
        dir_n = tmp;
      }
    }
  }
  
  f_closedir(&dj);
 80035b0:	a802      	add	r0, sp, #8
 80035b2:	f00e fc9d 	bl	8011ef0 <f_closedir>
  return (uint32_t)dir_n;
}
 80035b6:	4628      	mov	r0, r5
 80035b8:	b057      	add	sp, #348	; 0x15c
 80035ba:	bd30      	pop	{r4, r5, pc}
    tmp = strtol(&fno.fname[sizeof(LOG_DIR_PREFIX)],NULL,10);
 80035bc:	4604      	mov	r4, r0
 80035be:	2100      	movs	r1, #0
 80035c0:	f10d 005d 	add.w	r0, sp, #93	; 0x5d
 80035c4:	220a      	movs	r2, #10
 80035c6:	f015 fd8d 	bl	80190e4 <strtol>
    if(dir_n<tmp)
 80035ca:	ea20 75e0 	bic.w	r5, r0, r0, asr #31
  while (fr == FR_OK && fno.fname[0])
 80035ce:	2c00      	cmp	r4, #0
 80035d0:	d1ee      	bne.n	80035b0 <SDM_GetLastDirNumber+0x28>
 80035d2:	f89d 3056 	ldrb.w	r3, [sp, #86]	; 0x56
    fr = f_findnext(&dj, &fno);   /* Search for next item */
 80035d6:	a910      	add	r1, sp, #64	; 0x40
 80035d8:	a802      	add	r0, sp, #8
  while (fr == FR_OK && fno.fname[0])
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d0e8      	beq.n	80035b0 <SDM_GetLastDirNumber+0x28>
    fr = f_findnext(&dj, &fno);   /* Search for next item */
 80035de:	f00e fced 	bl	8011fbc <f_findnext>
    if(fno.fname[0])
 80035e2:	f89d 3056 	ldrb.w	r3, [sp, #86]	; 0x56
    fr = f_findnext(&dj, &fno);   /* Search for next item */
 80035e6:	4604      	mov	r4, r0
    if(fno.fname[0])
 80035e8:	b93b      	cbnz	r3, 80035fa <SDM_GetLastDirNumber+0x72>
  while (fr == FR_OK && fno.fname[0])
 80035ea:	2c00      	cmp	r4, #0
 80035ec:	d0f1      	beq.n	80035d2 <SDM_GetLastDirNumber+0x4a>
  f_closedir(&dj);
 80035ee:	a802      	add	r0, sp, #8
 80035f0:	f00e fc7e 	bl	8011ef0 <f_closedir>
}
 80035f4:	4628      	mov	r0, r5
 80035f6:	b057      	add	sp, #348	; 0x15c
 80035f8:	bd30      	pop	{r4, r5, pc}
      tmp = strtol(&fno.fname[sizeof(LOG_DIR_PREFIX)],NULL,10);
 80035fa:	220a      	movs	r2, #10
 80035fc:	2100      	movs	r1, #0
 80035fe:	f10d 005d 	add.w	r0, sp, #93	; 0x5d
 8003602:	f015 fd6f 	bl	80190e4 <strtol>
      if(tmp > dir_n)
 8003606:	4285      	cmp	r5, r0
 8003608:	bfb8      	it	lt
 800360a:	4605      	movlt	r5, r0
  while (fr == FR_OK && fno.fname[0])
 800360c:	2c00      	cmp	r4, #0
 800360e:	d0e0      	beq.n	80035d2 <SDM_GetLastDirNumber+0x4a>
 8003610:	e7ed      	b.n	80035ee <SDM_GetLastDirNumber+0x66>
 8003612:	bf00      	nop
 8003614:	0801b830 	.word	0x0801b830
 8003618:	0801c3e8 	.word	0x0801c3e8

0800361c <SDM_Flush_Buffer>:
  return 1;
}

/* Write remaining data to file */
uint8_t SDM_Flush_Buffer(uint32_t id)
{
 800361c:	b5f0      	push	{r4, r5, r6, r7, lr}
  COM_SensorStatus_t * sensor_status;   
  
  sensor_status = COM_GetSensorStatus(id);
  buf_size = sensor_status->sdWriteBufferSize;
  
  if(SD_WriteBufferIdx[id]>0 && SD_WriteBufferIdx[id]<(buf_size-1))
 800361e:	4d28      	ldr	r5, [pc, #160]	; (80036c0 <SDM_Flush_Buffer+0xa4>)
{
 8003620:	4604      	mov	r4, r0
 8003622:	b083      	sub	sp, #12
  sensor_status = COM_GetSensorStatus(id);
 8003624:	b2c0      	uxtb	r0, r0
 8003626:	f7fe f9a3 	bl	8001970 <COM_GetSensorStatus>
  if(SD_WriteBufferIdx[id]>0 && SD_WriteBufferIdx[id]<(buf_size-1))
 800362a:	eb05 0284 	add.w	r2, r5, r4, lsl #2
  buf_size = sensor_status->sdWriteBufferSize;
 800362e:	6943      	ldr	r3, [r0, #20]
  if(SD_WriteBufferIdx[id]>0 && SD_WriteBufferIdx[id]<(buf_size-1))
 8003630:	6851      	ldr	r1, [r2, #4]
 8003632:	00a6      	lsls	r6, r4, #2
 8003634:	b169      	cbz	r1, 8003652 <SDM_Flush_Buffer+0x36>
 8003636:	6850      	ldr	r0, [r2, #4]
 8003638:	1e59      	subs	r1, r3, #1
 800363a:	4288      	cmp	r0, r1
 800363c:	d32a      	bcc.n	8003694 <SDM_Flush_Buffer+0x78>
  {
    /* flush from the beginning */
    ret = SDM_WriteBuffer(id, SD_WriteBuffer[id], SD_WriteBufferIdx[id]+1);
  }
  else if (SD_WriteBufferIdx[id]>(buf_size-1) && SD_WriteBufferIdx[id]<(buf_size*2-1))
 800363e:	19a8      	adds	r0, r5, r6
 8003640:	6842      	ldr	r2, [r0, #4]
 8003642:	428a      	cmp	r2, r1
 8003644:	d80a      	bhi.n	800365c <SDM_Flush_Buffer+0x40>
  {
    /* flush from half buffer */
    ret =  SDM_WriteBuffer(id, (uint8_t *)(SD_WriteBuffer[id]+buf_size), SD_WriteBufferIdx[id]+1-buf_size);
  }
  
  SD_WriteBufferIdx[id] = 0;
 8003646:	4435      	add	r5, r6
  uint8_t ret = 0;
 8003648:	2000      	movs	r0, #0
  SD_WriteBufferIdx[id] = 0;
 800364a:	2300      	movs	r3, #0
 800364c:	606b      	str	r3, [r5, #4]
  return ret;
}
 800364e:	b003      	add	sp, #12
 8003650:	bdf0      	pop	{r4, r5, r6, r7, pc}
  else if (SD_WriteBufferIdx[id]>(buf_size-1) && SD_WriteBufferIdx[id]<(buf_size*2-1))
 8003652:	19a8      	adds	r0, r5, r6
 8003654:	1e59      	subs	r1, r3, #1
 8003656:	6842      	ldr	r2, [r0, #4]
 8003658:	428a      	cmp	r2, r1
 800365a:	d9f4      	bls.n	8003646 <SDM_Flush_Buffer+0x2a>
 800365c:	6841      	ldr	r1, [r0, #4]
 800365e:	005a      	lsls	r2, r3, #1
 8003660:	3a01      	subs	r2, #1
 8003662:	4291      	cmp	r1, r2
 8003664:	d2ef      	bcs.n	8003646 <SDM_Flush_Buffer+0x2a>
    ret =  SDM_WriteBuffer(id, (uint8_t *)(SD_WriteBuffer[id]+buf_size), SD_WriteBufferIdx[id]+1-buf_size);
 8003666:	4917      	ldr	r1, [pc, #92]	; (80036c4 <SDM_Flush_Buffer+0xa8>)
 8003668:	6842      	ldr	r2, [r0, #4]
 800366a:	f851 1024 	ldr.w	r1, [r1, r4, lsl #2]
  if(f_write(&FileHandler[id], buffer, size, (void *)&byteswritten) != FR_OK)
 800366e:	4816      	ldr	r0, [pc, #88]	; (80036c8 <SDM_Flush_Buffer+0xac>)
 8003670:	f44f 770c 	mov.w	r7, #560	; 0x230
    ret =  SDM_WriteBuffer(id, (uint8_t *)(SD_WriteBuffer[id]+buf_size), SD_WriteBufferIdx[id]+1-buf_size);
 8003674:	3201      	adds	r2, #1
  if(f_write(&FileHandler[id], buffer, size, (void *)&byteswritten) != FR_OK)
 8003676:	1ad2      	subs	r2, r2, r3
 8003678:	4419      	add	r1, r3
 800367a:	fb07 0004 	mla	r0, r7, r4, r0
 800367e:	ab01      	add	r3, sp, #4
 8003680:	f00e f9b8 	bl	80119f4 <f_write>
  SD_WriteBufferIdx[id] = 0;
 8003684:	4435      	add	r5, r6
  return 1;
 8003686:	fab0 f080 	clz	r0, r0
 800368a:	0940      	lsrs	r0, r0, #5
  SD_WriteBufferIdx[id] = 0;
 800368c:	2300      	movs	r3, #0
 800368e:	606b      	str	r3, [r5, #4]
}
 8003690:	b003      	add	sp, #12
 8003692:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ret = SDM_WriteBuffer(id, SD_WriteBuffer[id], SD_WriteBufferIdx[id]+1);
 8003694:	6852      	ldr	r2, [r2, #4]
  if(f_write(&FileHandler[id], buffer, size, (void *)&byteswritten) != FR_OK)
 8003696:	4b0c      	ldr	r3, [pc, #48]	; (80036c8 <SDM_Flush_Buffer+0xac>)
    ret = SDM_WriteBuffer(id, SD_WriteBuffer[id], SD_WriteBufferIdx[id]+1);
 8003698:	490a      	ldr	r1, [pc, #40]	; (80036c4 <SDM_Flush_Buffer+0xa8>)
  if(f_write(&FileHandler[id], buffer, size, (void *)&byteswritten) != FR_OK)
 800369a:	f44f 700c 	mov.w	r0, #560	; 0x230
 800369e:	fb00 3004 	mla	r0, r0, r4, r3
 80036a2:	f851 1024 	ldr.w	r1, [r1, r4, lsl #2]
 80036a6:	ab01      	add	r3, sp, #4
 80036a8:	3201      	adds	r2, #1
 80036aa:	f00e f9a3 	bl	80119f4 <f_write>
  SD_WriteBufferIdx[id] = 0;
 80036ae:	4435      	add	r5, r6
  return 1;
 80036b0:	fab0 f080 	clz	r0, r0
 80036b4:	0940      	lsrs	r0, r0, #5
  SD_WriteBufferIdx[id] = 0;
 80036b6:	2300      	movs	r3, #0
 80036b8:	606b      	str	r3, [r5, #4]
}
 80036ba:	b003      	add	sp, #12
 80036bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80036be:	bf00      	nop
 80036c0:	2000177c 	.word	0x2000177c
 80036c4:	20019790 	.word	0x20019790
 80036c8:	20017f4c 	.word	0x20017f4c

080036cc <SDM_Fill_Buffer>:

/* Fill SD buffer with new data */
uint8_t SDM_Fill_Buffer(uint8_t id, uint8_t *src, uint16_t srcSize)
{
 80036cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint32_t dstSize, sdBufSize;
  
  
  sensor_status = COM_GetSensorStatus(id);
  dst = SD_WriteBuffer[id];
  dstP = SD_WriteBufferIdx[id];
 80036d0:	f8df 8090 	ldr.w	r8, [pc, #144]	; 8003764 <SDM_Fill_Buffer+0x98>
{
 80036d4:	4607      	mov	r7, r0
 80036d6:	460d      	mov	r5, r1
 80036d8:	4616      	mov	r6, r2
  sensor_status = COM_GetSensorStatus(id);
 80036da:	f7fe f949 	bl	8001970 <COM_GetSensorStatus>
  dst = SD_WriteBuffer[id];
 80036de:	4b1f      	ldr	r3, [pc, #124]	; (800375c <SDM_Fill_Buffer+0x90>)
  sdBufSize = sensor_status->sdWriteBufferSize;
 80036e0:	6941      	ldr	r1, [r0, #20]
  dst = SD_WriteBuffer[id];
 80036e2:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
  dstP = SD_WriteBufferIdx[id];
 80036e6:	eb08 0287 	add.w	r2, r8, r7, lsl #2
 80036ea:	ea4f 0987 	mov.w	r9, r7, lsl #2
 80036ee:	6854      	ldr	r4, [r2, #4]
  dstSize = sdBufSize*2;
  
  /* byte per byte copy */
  while(srcP < srcSize)
 80036f0:	b166      	cbz	r6, 800370c <SDM_Fill_Buffer+0x40>
 80036f2:	462b      	mov	r3, r5
 80036f4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80036f8:	4435      	add	r5, r6
  {
    dst[dstP] = src[srcP];
 80036fa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80036fe:	5502      	strb	r2, [r0, r4]
    dstP++;
 8003700:	3401      	adds	r4, #1
    srcP++;
    if(dstP>=dstSize)
    {
      dstP=0;
 8003702:	45a4      	cmp	ip, r4
 8003704:	bf98      	it	ls
 8003706:	2400      	movls	r4, #0
  while(srcP < srcSize)
 8003708:	429d      	cmp	r5, r3
 800370a:	d1f6      	bne.n	80036fa <SDM_Fill_Buffer+0x2e>
    }
  }
  
  if(SD_WriteBufferIdx[id]<(dstSize/2) && dstP>=(dstSize/2)) // first half full
 800370c:	eb08 0209 	add.w	r2, r8, r9
 8003710:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8003714:	6852      	ldr	r2, [r2, #4]
 8003716:	429a      	cmp	r2, r3
 8003718:	d201      	bcs.n	800371e <SDM_Fill_Buffer+0x52>
 800371a:	42a3      	cmp	r3, r4
 800371c:	d914      	bls.n	8003748 <SDM_Fill_Buffer+0x7c>
      _Error_Handler();
    }
    
    // check for buffer consistency
  }
  else if(dstP<SD_WriteBufferIdx[id])  // second half full
 800371e:	eb08 0309 	add.w	r3, r8, r9
 8003722:	685b      	ldr	r3, [r3, #4]
 8003724:	42a3      	cmp	r3, r4
 8003726:	d805      	bhi.n	8003734 <SDM_Fill_Buffer+0x68>
    if(osMessagePut(sdThreadQueue_id, id|SDM_DATA_READY_MASK|SDM_DATA_SECOND_HALF_MASK, 0) != osOK)
    {
      _Error_Handler();
    }
  }
  SD_WriteBufferIdx[id] = dstP;
 8003728:	44c8      	add	r8, r9
  return 0;
}
 800372a:	2000      	movs	r0, #0
  SD_WriteBufferIdx[id] = dstP;
 800372c:	f8c8 4004 	str.w	r4, [r8, #4]
}
 8003730:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if(osMessagePut(sdThreadQueue_id, id|SDM_DATA_READY_MASK|SDM_DATA_SECOND_HALF_MASK, 0) != osOK)
 8003734:	4b0a      	ldr	r3, [pc, #40]	; (8003760 <SDM_Fill_Buffer+0x94>)
 8003736:	f447 4180 	orr.w	r1, r7, #16384	; 0x4000
 800373a:	6818      	ldr	r0, [r3, #0]
 800373c:	2200      	movs	r2, #0
 800373e:	f00f f897 	bl	8012870 <osMessagePut>
 8003742:	2800      	cmp	r0, #0
 8003744:	d0f0      	beq.n	8003728 <SDM_Fill_Buffer+0x5c>
* @param  None
* @retval None
*/
static void _Error_Handler( void )
{
  while (1)
 8003746:	e7fe      	b.n	8003746 <SDM_Fill_Buffer+0x7a>
    if(osMessagePut(sdThreadQueue_id, id|SDM_DATA_READY_MASK|SDM_DATA_FIRST_HALF_MASK, 0) != osOK)
 8003748:	4b05      	ldr	r3, [pc, #20]	; (8003760 <SDM_Fill_Buffer+0x94>)
 800374a:	f447 41c0 	orr.w	r1, r7, #24576	; 0x6000
 800374e:	6818      	ldr	r0, [r3, #0]
 8003750:	2200      	movs	r2, #0
 8003752:	f00f f88d 	bl	8012870 <osMessagePut>
 8003756:	2800      	cmp	r0, #0
 8003758:	d0e6      	beq.n	8003728 <SDM_Fill_Buffer+0x5c>
  while (1)
 800375a:	e7fe      	b.n	800375a <SDM_Fill_Buffer+0x8e>
 800375c:	20019790 	.word	0x20019790
 8003760:	2001952c 	.word	0x2001952c
 8003764:	2000177c 	.word	0x2000177c

08003768 <SDM_StartSensorThread>:
{
 8003768:	b510      	push	{r4, lr}
  if(id == iis3dwb_com_id)
 800376a:	4b28      	ldr	r3, [pc, #160]	; (800380c <SDM_StartSensorThread+0xa4>)
 800376c:	781b      	ldrb	r3, [r3, #0]
 800376e:	4283      	cmp	r3, r0
{
 8003770:	4604      	mov	r4, r0
  if(id == iis3dwb_com_id)
 8003772:	d022      	beq.n	80037ba <SDM_StartSensorThread+0x52>
  else if(id == hts221_com_id)
 8003774:	4b26      	ldr	r3, [pc, #152]	; (8003810 <SDM_StartSensorThread+0xa8>)
 8003776:	781b      	ldrb	r3, [r3, #0]
 8003778:	4283      	cmp	r3, r0
 800377a:	d02c      	beq.n	80037d6 <SDM_StartSensorThread+0x6e>
  else if(id == iis2dh_com_id)
 800377c:	4b25      	ldr	r3, [pc, #148]	; (8003814 <SDM_StartSensorThread+0xac>)
 800377e:	781b      	ldrb	r3, [r3, #0]
 8003780:	4283      	cmp	r3, r0
 8003782:	d02f      	beq.n	80037e4 <SDM_StartSensorThread+0x7c>
  else if(id == iis2mdc_com_id)
 8003784:	4b24      	ldr	r3, [pc, #144]	; (8003818 <SDM_StartSensorThread+0xb0>)
 8003786:	781b      	ldrb	r3, [r3, #0]
 8003788:	4283      	cmp	r3, r0
 800378a:	d01d      	beq.n	80037c8 <SDM_StartSensorThread+0x60>
  else if(id == imp34dt05_com_id)
 800378c:	4b23      	ldr	r3, [pc, #140]	; (800381c <SDM_StartSensorThread+0xb4>)
 800378e:	781b      	ldrb	r3, [r3, #0]
 8003790:	4283      	cmp	r3, r0
 8003792:	d02e      	beq.n	80037f2 <SDM_StartSensorThread+0x8a>
  else if(id == mp23abs1_com_id)
 8003794:	4b22      	ldr	r3, [pc, #136]	; (8003820 <SDM_StartSensorThread+0xb8>)
 8003796:	781b      	ldrb	r3, [r3, #0]
 8003798:	4283      	cmp	r3, r0
 800379a:	d02d      	beq.n	80037f8 <SDM_StartSensorThread+0x90>
  else if(id == ism330dhcx_com_id)
 800379c:	4b21      	ldr	r3, [pc, #132]	; (8003824 <SDM_StartSensorThread+0xbc>)
 800379e:	781b      	ldrb	r3, [r3, #0]
 80037a0:	4283      	cmp	r3, r0
 80037a2:	d02c      	beq.n	80037fe <SDM_StartSensorThread+0x96>
  else if(id == lps22hh_com_id)
 80037a4:	4b20      	ldr	r3, [pc, #128]	; (8003828 <SDM_StartSensorThread+0xc0>)
 80037a6:	781b      	ldrb	r3, [r3, #0]
 80037a8:	4283      	cmp	r3, r0
 80037aa:	d02b      	beq.n	8003804 <SDM_StartSensorThread+0x9c>
  else if(id == stts751_com_id)
 80037ac:	4b1f      	ldr	r3, [pc, #124]	; (800382c <SDM_StartSensorThread+0xc4>)
 80037ae:	781b      	ldrb	r3, [r3, #0]
 80037b0:	4283      	cmp	r3, r0
 80037b2:	d104      	bne.n	80037be <SDM_StartSensorThread+0x56>
    STTS751_Start();
 80037b4:	f001 f898 	bl	80048e8 <STTS751_Start>
 80037b8:	e001      	b.n	80037be <SDM_StartSensorThread+0x56>
    IIS3DWB_Start();
 80037ba:	f7ff f8bd 	bl	8002938 <IIS3DWB_Start>
  sensor_first_dataReady[id] = 1;
 80037be:	4b1c      	ldr	r3, [pc, #112]	; (8003830 <SDM_StartSensorThread+0xc8>)
 80037c0:	2201      	movs	r2, #1
 80037c2:	551a      	strb	r2, [r3, r4]
}
 80037c4:	2000      	movs	r0, #0
 80037c6:	bd10      	pop	{r4, pc}
    IIS2MDC_Start();
 80037c8:	f7ff f806 	bl	80027d8 <IIS2MDC_Start>
  sensor_first_dataReady[id] = 1;
 80037cc:	4b18      	ldr	r3, [pc, #96]	; (8003830 <SDM_StartSensorThread+0xc8>)
 80037ce:	2201      	movs	r2, #1
 80037d0:	551a      	strb	r2, [r3, r4]
}
 80037d2:	2000      	movs	r0, #0
 80037d4:	bd10      	pop	{r4, pc}
    HTS221_Start();
 80037d6:	f7fe ffdb 	bl	8002790 <HTS221_Start>
  sensor_first_dataReady[id] = 1;
 80037da:	4b15      	ldr	r3, [pc, #84]	; (8003830 <SDM_StartSensorThread+0xc8>)
 80037dc:	2201      	movs	r2, #1
 80037de:	551a      	strb	r2, [r3, r4]
}
 80037e0:	2000      	movs	r0, #0
 80037e2:	bd10      	pop	{r4, pc}
    IIS2DH_Start();
 80037e4:	f7fe ffe6 	bl	80027b4 <IIS2DH_Start>
  sensor_first_dataReady[id] = 1;
 80037e8:	4b11      	ldr	r3, [pc, #68]	; (8003830 <SDM_StartSensorThread+0xc8>)
 80037ea:	2201      	movs	r2, #1
 80037ec:	551a      	strb	r2, [r3, r4]
}
 80037ee:	2000      	movs	r0, #0
 80037f0:	bd10      	pop	{r4, pc}
    IMP34DT05_Start();
 80037f2:	f7ff f9e5 	bl	8002bc0 <IMP34DT05_Start>
 80037f6:	e7e2      	b.n	80037be <SDM_StartSensorThread+0x56>
    MP23ABS1_Start();
 80037f8:	f7ff fd7c 	bl	80032f4 <MP23ABS1_Start>
 80037fc:	e7df      	b.n	80037be <SDM_StartSensorThread+0x56>
    ISM330DHCX_Start();
 80037fe:	f7ff f9f1 	bl	8002be4 <ISM330DHCX_Start>
 8003802:	e7dc      	b.n	80037be <SDM_StartSensorThread+0x56>
    LPS22HH_Start();
 8003804:	f7ff fa00 	bl	8002c08 <LPS22HH_Start>
 8003808:	e7d9      	b.n	80037be <SDM_StartSensorThread+0x56>
 800380a:	bf00      	nop
 800380c:	20017330 	.word	0x20017330
 8003810:	20017644 	.word	0x20017644
 8003814:	20017654 	.word	0x20017654
 8003818:	20017605 	.word	0x20017605
 800381c:	2001764c 	.word	0x2001764c
 8003820:	20017604 	.word	0x20017604
 8003824:	20017645 	.word	0x20017645
 8003828:	2001765d 	.word	0x2001765d
 800382c:	2001765c 	.word	0x2001765c
 8003830:	200000c8 	.word	0x200000c8

08003834 <SDM_InitFiles>:
{
 8003834:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003838:	b09e      	sub	sp, #120	; 0x78
  device_descriptor = COM_GetDeviceDescriptor();  
 800383a:	f7fe f885 	bl	8001948 <COM_GetDeviceDescriptor>
 800383e:	4606      	mov	r6, r0
  dir_n = SDM_GetLastDirNumber();
 8003840:	f7ff fea2 	bl	8003588 <SDM_GetLastDirNumber>
  sprintf(dir_name, "%s%03ld", LOG_DIR_PREFIX, dir_n);
 8003844:	4a3d      	ldr	r2, [pc, #244]	; (800393c <SDM_InitFiles+0x108>)
 8003846:	493e      	ldr	r1, [pc, #248]	; (8003940 <SDM_InitFiles+0x10c>)
 8003848:	1c43      	adds	r3, r0, #1
 800384a:	a801      	add	r0, sp, #4
 800384c:	f014 fcfe 	bl	801824c <siprintf>
  FRESULT test = f_mkdir(dir_name);
 8003850:	a801      	add	r0, sp, #4
 8003852:	f00e fcbd 	bl	80121d0 <f_mkdir>
  if(test != FR_OK)
 8003856:	bb78      	cbnz	r0, 80038b8 <SDM_InitFiles+0x84>
  for(i=0;i<device_descriptor->nSensor;i++)
 8003858:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 800385a:	4607      	mov	r7, r0
 800385c:	b38b      	cbz	r3, 80038c2 <SDM_InitFiles+0x8e>
      sprintf(file_name, "%s/%s", dir_name, sensor_descriptor->name);
 800385e:	f8df a0e8 	ldr.w	sl, [pc, #232]	; 8003948 <SDM_InitFiles+0x114>
  sprintf(file_name, "%s%s", sensorName, ".dat");
 8003862:	f8df 90e8 	ldr.w	r9, [pc, #232]	; 800394c <SDM_InitFiles+0x118>
 8003866:	f8df 80e8 	ldr.w	r8, [pc, #232]	; 8003950 <SDM_InitFiles+0x11c>
  for(i=0;i<device_descriptor->nSensor;i++)
 800386a:	4604      	mov	r4, r0
 800386c:	e003      	b.n	8003876 <SDM_InitFiles+0x42>
 800386e:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 8003870:	3401      	adds	r4, #1
 8003872:	42a3      	cmp	r3, r4
 8003874:	d925      	bls.n	80038c2 <SDM_InitFiles+0x8e>
    sensor_status = COM_GetSensorStatus(i);
 8003876:	b2e5      	uxtb	r5, r4
 8003878:	4628      	mov	r0, r5
 800387a:	f7fe f879 	bl	8001970 <COM_GetSensorStatus>
    if(sensor_status->isActive)
 800387e:	7b83      	ldrb	r3, [r0, #14]
 8003880:	2b00      	cmp	r3, #0
 8003882:	d0f4      	beq.n	800386e <SDM_InitFiles+0x3a>
      sensor_descriptor = COM_GetSensorDescriptor(i);
 8003884:	4628      	mov	r0, r5
 8003886:	f7fe f86b 	bl	8001960 <COM_GetSensorDescriptor>
      sprintf(file_name, "%s/%s", dir_name, sensor_descriptor->name);
 800388a:	aa01      	add	r2, sp, #4
 800388c:	1c43      	adds	r3, r0, #1
 800388e:	4651      	mov	r1, sl
 8003890:	a804      	add	r0, sp, #16
 8003892:	f014 fcdb 	bl	801824c <siprintf>
  sprintf(file_name, "%s%s", sensorName, ".dat");
 8003896:	aa04      	add	r2, sp, #16
 8003898:	464b      	mov	r3, r9
 800389a:	4641      	mov	r1, r8
 800389c:	a811      	add	r0, sp, #68	; 0x44
 800389e:	f014 fcd5 	bl	801824c <siprintf>
  if(f_open(&FileHandler[id], (char const*)file_name, FA_CREATE_ALWAYS | FA_WRITE) != FR_OK)
 80038a2:	4b28      	ldr	r3, [pc, #160]	; (8003944 <SDM_InitFiles+0x110>)
 80038a4:	f44f 700c 	mov.w	r0, #560	; 0x230
 80038a8:	a911      	add	r1, sp, #68	; 0x44
 80038aa:	fb00 3004 	mla	r0, r0, r4, r3
 80038ae:	220a      	movs	r2, #10
 80038b0:	f00d fd84 	bl	80113bc <f_open>
 80038b4:	2800      	cmp	r0, #0
 80038b6:	d0da      	beq.n	800386e <SDM_InitFiles+0x3a>
    return 1;
 80038b8:	2701      	movs	r7, #1
}
 80038ba:	4638      	mov	r0, r7
 80038bc:	b01e      	add	sp, #120	; 0x78
 80038be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  device_descriptor = COM_GetDeviceDescriptor();
 80038c2:	f7fe f841 	bl	8001948 <COM_GetDeviceDescriptor>
  for(i=0;i<device_descriptor->nSensor;i++)
 80038c6:	6a83      	ldr	r3, [r0, #40]	; 0x28
  device_descriptor = COM_GetDeviceDescriptor();
 80038c8:	4605      	mov	r5, r0
  for(i=0;i<device_descriptor->nSensor;i++)
 80038ca:	b1c3      	cbz	r3, 80038fe <SDM_InitFiles+0xca>
 80038cc:	f8df 8084 	ldr.w	r8, [pc, #132]	; 8003954 <SDM_InitFiles+0x120>
 80038d0:	2400      	movs	r4, #0
 80038d2:	e005      	b.n	80038e0 <SDM_InitFiles+0xac>
      SD_WriteBuffer[i] = 0;
 80038d4:	f848 3024 	str.w	r3, [r8, r4, lsl #2]
  for(i=0;i<device_descriptor->nSensor;i++)
 80038d8:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80038da:	3401      	adds	r4, #1
 80038dc:	429c      	cmp	r4, r3
 80038de:	d20e      	bcs.n	80038fe <SDM_InitFiles+0xca>
    sensor_status = COM_GetSensorStatus(i);
 80038e0:	b2e0      	uxtb	r0, r4
 80038e2:	f7fe f845 	bl	8001970 <COM_GetSensorStatus>
    if(sensor_status->isActive)
 80038e6:	7b83      	ldrb	r3, [r0, #14]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d0f3      	beq.n	80038d4 <SDM_InitFiles+0xa0>
      SD_WriteBuffer[i] = HSD_malloc(sensor_status->sdWriteBufferSize*2);
 80038ec:	6940      	ldr	r0, [r0, #20]
 80038ee:	0040      	lsls	r0, r0, #1
 80038f0:	f013 ff38 	bl	8017764 <malloc>
 80038f4:	f848 0024 	str.w	r0, [r8, r4, lsl #2]
      if(!SD_WriteBuffer[i])
 80038f8:	2800      	cmp	r0, #0
 80038fa:	d1ed      	bne.n	80038d8 <SDM_InitFiles+0xa4>
  while (1)
 80038fc:	e7fe      	b.n	80038fc <SDM_InitFiles+0xc8>
  for(i=0;i<device_descriptor->nSensor;i++)
 80038fe:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 8003900:	2b00      	cmp	r3, #0
 8003902:	d0da      	beq.n	80038ba <SDM_InitFiles+0x86>
 8003904:	2400      	movs	r4, #0
    sensor_status = COM_GetSensorStatus(i);
 8003906:	b2e0      	uxtb	r0, r4
 8003908:	f7fe f832 	bl	8001970 <COM_GetSensorStatus>
    if(sensor_status->isActive)
 800390c:	7b83      	ldrb	r3, [r0, #14]
 800390e:	b94b      	cbnz	r3, 8003924 <SDM_InitFiles+0xf0>
  for(i=0;i<device_descriptor->nSensor;i++)
 8003910:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 8003912:	3401      	adds	r4, #1
 8003914:	42a3      	cmp	r3, r4
 8003916:	d9d0      	bls.n	80038ba <SDM_InitFiles+0x86>
    sensor_status = COM_GetSensorStatus(i);
 8003918:	b2e0      	uxtb	r0, r4
 800391a:	f7fe f829 	bl	8001970 <COM_GetSensorStatus>
    if(sensor_status->isActive)
 800391e:	7b83      	ldrb	r3, [r0, #14]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d0f5      	beq.n	8003910 <SDM_InitFiles+0xdc>
      SDM_StartSensorThread(i);
 8003924:	4620      	mov	r0, r4
 8003926:	f7ff ff1f 	bl	8003768 <SDM_StartSensorThread>
  for(i=0;i<device_descriptor->nSensor;i++)
 800392a:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 800392c:	3401      	adds	r4, #1
 800392e:	42a3      	cmp	r3, r4
 8003930:	d8e9      	bhi.n	8003906 <SDM_InitFiles+0xd2>
}
 8003932:	4638      	mov	r0, r7
 8003934:	b01e      	add	sp, #120	; 0x78
 8003936:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800393a:	bf00      	nop
 800393c:	0801c1d0 	.word	0x0801c1d0
 8003940:	0801c1d8 	.word	0x0801c1d8
 8003944:	20017f4c 	.word	0x20017f4c
 8003948:	0801c1e0 	.word	0x0801c1e0
 800394c:	0801c1c0 	.word	0x0801c1c0
 8003950:	0801c1c8 	.word	0x0801c1c8
 8003954:	20019790 	.word	0x20019790

08003958 <SDM_StopSensorThread>:
{
 8003958:	b510      	push	{r4, lr}
  if(id == iis3dwb_com_id)
 800395a:	4b26      	ldr	r3, [pc, #152]	; (80039f4 <SDM_StopSensorThread+0x9c>)
 800395c:	781b      	ldrb	r3, [r3, #0]
 800395e:	4283      	cmp	r3, r0
{
 8003960:	4604      	mov	r4, r0
  if(id == iis3dwb_com_id)
 8003962:	d022      	beq.n	80039aa <SDM_StopSensorThread+0x52>
  else if(id == hts221_com_id)
 8003964:	4b24      	ldr	r3, [pc, #144]	; (80039f8 <SDM_StopSensorThread+0xa0>)
 8003966:	781b      	ldrb	r3, [r3, #0]
 8003968:	4283      	cmp	r3, r0
 800396a:	d02a      	beq.n	80039c2 <SDM_StopSensorThread+0x6a>
  else if(id == iis2dh_com_id)
 800396c:	4b23      	ldr	r3, [pc, #140]	; (80039fc <SDM_StopSensorThread+0xa4>)
 800396e:	781b      	ldrb	r3, [r3, #0]
 8003970:	4283      	cmp	r3, r0
 8003972:	d02c      	beq.n	80039ce <SDM_StopSensorThread+0x76>
  else if(id == iis2mdc_com_id)
 8003974:	4b22      	ldr	r3, [pc, #136]	; (8003a00 <SDM_StopSensorThread+0xa8>)
 8003976:	781b      	ldrb	r3, [r3, #0]
 8003978:	4283      	cmp	r3, r0
 800397a:	d01c      	beq.n	80039b6 <SDM_StopSensorThread+0x5e>
  else if(id == imp34dt05_com_id)
 800397c:	4b21      	ldr	r3, [pc, #132]	; (8003a04 <SDM_StopSensorThread+0xac>)
 800397e:	781b      	ldrb	r3, [r3, #0]
 8003980:	4283      	cmp	r3, r0
 8003982:	d02a      	beq.n	80039da <SDM_StopSensorThread+0x82>
  else if(id == mp23abs1_com_id)
 8003984:	4b20      	ldr	r3, [pc, #128]	; (8003a08 <SDM_StopSensorThread+0xb0>)
 8003986:	781b      	ldrb	r3, [r3, #0]
 8003988:	4283      	cmp	r3, r0
 800398a:	d029      	beq.n	80039e0 <SDM_StopSensorThread+0x88>
  else if(id == ism330dhcx_com_id)
 800398c:	4b1f      	ldr	r3, [pc, #124]	; (8003a0c <SDM_StopSensorThread+0xb4>)
 800398e:	781b      	ldrb	r3, [r3, #0]
 8003990:	4283      	cmp	r3, r0
 8003992:	d028      	beq.n	80039e6 <SDM_StopSensorThread+0x8e>
  else if(id == lps22hh_com_id)
 8003994:	4b1e      	ldr	r3, [pc, #120]	; (8003a10 <SDM_StopSensorThread+0xb8>)
 8003996:	781b      	ldrb	r3, [r3, #0]
 8003998:	4283      	cmp	r3, r0
 800399a:	d027      	beq.n	80039ec <SDM_StopSensorThread+0x94>
  else if(id == stts751_com_id)
 800399c:	4b1d      	ldr	r3, [pc, #116]	; (8003a14 <SDM_StopSensorThread+0xbc>)
 800399e:	781b      	ldrb	r3, [r3, #0]
 80039a0:	4283      	cmp	r3, r0
 80039a2:	d104      	bne.n	80039ae <SDM_StopSensorThread+0x56>
    STTS751_Stop();
 80039a4:	f000 ffac 	bl	8004900 <STTS751_Stop>
 80039a8:	e001      	b.n	80039ae <SDM_StopSensorThread+0x56>
    IIS3DWB_Stop();
 80039aa:	f7fe ffd1 	bl	8002950 <IIS3DWB_Stop>
  sensor_first_dataReady[id] = 0;
 80039ae:	4b1a      	ldr	r3, [pc, #104]	; (8003a18 <SDM_StopSensorThread+0xc0>)
 80039b0:	2000      	movs	r0, #0
 80039b2:	5518      	strb	r0, [r3, r4]
}
 80039b4:	bd10      	pop	{r4, pc}
    IIS2MDC_Stop();
 80039b6:	f7fe ff1b 	bl	80027f0 <IIS2MDC_Stop>
  sensor_first_dataReady[id] = 0;
 80039ba:	4b17      	ldr	r3, [pc, #92]	; (8003a18 <SDM_StopSensorThread+0xc0>)
 80039bc:	2000      	movs	r0, #0
 80039be:	5518      	strb	r0, [r3, r4]
}
 80039c0:	bd10      	pop	{r4, pc}
    HTS221_Stop();
 80039c2:	f7fe fef1 	bl	80027a8 <HTS221_Stop>
  sensor_first_dataReady[id] = 0;
 80039c6:	4b14      	ldr	r3, [pc, #80]	; (8003a18 <SDM_StopSensorThread+0xc0>)
 80039c8:	2000      	movs	r0, #0
 80039ca:	5518      	strb	r0, [r3, r4]
}
 80039cc:	bd10      	pop	{r4, pc}
    IIS2DH_Stop();
 80039ce:	f7fe fefd 	bl	80027cc <IIS2DH_Stop>
  sensor_first_dataReady[id] = 0;
 80039d2:	4b11      	ldr	r3, [pc, #68]	; (8003a18 <SDM_StopSensorThread+0xc0>)
 80039d4:	2000      	movs	r0, #0
 80039d6:	5518      	strb	r0, [r3, r4]
}
 80039d8:	bd10      	pop	{r4, pc}
    IMP34DT05_Stop();
 80039da:	f7ff f8fd 	bl	8002bd8 <IMP34DT05_Stop>
 80039de:	e7e6      	b.n	80039ae <SDM_StopSensorThread+0x56>
    MP23ABS1_Stop();
 80039e0:	f7ff fc94 	bl	800330c <MP23ABS1_Stop>
 80039e4:	e7e3      	b.n	80039ae <SDM_StopSensorThread+0x56>
    ISM330DHCX_Stop();
 80039e6:	f7ff f909 	bl	8002bfc <ISM330DHCX_Stop>
 80039ea:	e7e0      	b.n	80039ae <SDM_StopSensorThread+0x56>
    LPS22HH_Stop();
 80039ec:	f7ff f918 	bl	8002c20 <LPS22HH_Stop>
 80039f0:	e7dd      	b.n	80039ae <SDM_StopSensorThread+0x56>
 80039f2:	bf00      	nop
 80039f4:	20017330 	.word	0x20017330
 80039f8:	20017644 	.word	0x20017644
 80039fc:	20017654 	.word	0x20017654
 8003a00:	20017605 	.word	0x20017605
 8003a04:	2001764c 	.word	0x2001764c
 8003a08:	20017604 	.word	0x20017604
 8003a0c:	20017645 	.word	0x20017645
 8003a10:	2001765d 	.word	0x2001765d
 8003a14:	2001765c 	.word	0x2001765c
 8003a18:	200000c8 	.word	0x200000c8

08003a1c <SDM_CloseFiles>:
{
 8003a1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a1e:	b095      	sub	sp, #84	; 0x54
  char* JSON_string = NULL;
 8003a20:	2400      	movs	r4, #0
 8003a22:	9402      	str	r4, [sp, #8]
  device_descriptor = COM_GetDeviceDescriptor();
 8003a24:	f7fd ff90 	bl	8001948 <COM_GetDeviceDescriptor>
  for(id=0;id<device_descriptor->nSensor;id++)
 8003a28:	6a83      	ldr	r3, [r0, #40]	; 0x28
  device_descriptor = COM_GetDeviceDescriptor();
 8003a2a:	4605      	mov	r5, r0
  for(id=0;id<device_descriptor->nSensor;id++)
 8003a2c:	b36b      	cbz	r3, 8003a8a <SDM_CloseFiles+0x6e>
    sensor_status = COM_GetSensorStatus(id);
 8003a2e:	b2e0      	uxtb	r0, r4
 8003a30:	f7fd ff9e 	bl	8001970 <COM_GetSensorStatus>
    if(sensor_status->isActive)
 8003a34:	7b83      	ldrb	r3, [r0, #14]
 8003a36:	bb03      	cbnz	r3, 8003a7a <SDM_CloseFiles+0x5e>
  for(id=0;id<device_descriptor->nSensor;id++)
 8003a38:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8003a3a:	3401      	adds	r4, #1
 8003a3c:	42a3      	cmp	r3, r4
 8003a3e:	d8f6      	bhi.n	8003a2e <SDM_CloseFiles+0x12>
  for(id=0;id<device_descriptor->nSensor;id++)
 8003a40:	b31b      	cbz	r3, 8003a8a <SDM_CloseFiles+0x6e>
  return f_close(&FileHandler[id]);
 8003a42:	4f2a      	ldr	r7, [pc, #168]	; (8003aec <SDM_CloseFiles+0xd0>)
  for(id=0;id<device_descriptor->nSensor;id++)
 8003a44:	2400      	movs	r4, #0
  return f_close(&FileHandler[id]);
 8003a46:	f44f 760c 	mov.w	r6, #560	; 0x230
 8003a4a:	e003      	b.n	8003a54 <SDM_CloseFiles+0x38>
  for(id=0;id<device_descriptor->nSensor;id++)
 8003a4c:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8003a4e:	3401      	adds	r4, #1
 8003a50:	42a3      	cmp	r3, r4
 8003a52:	d91a      	bls.n	8003a8a <SDM_CloseFiles+0x6e>
    sensor_status = COM_GetSensorStatus(id);
 8003a54:	b2e0      	uxtb	r0, r4
 8003a56:	f7fd ff8b 	bl	8001970 <COM_GetSensorStatus>
    if(sensor_status->isActive)
 8003a5a:	7b83      	ldrb	r3, [r0, #14]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d0f5      	beq.n	8003a4c <SDM_CloseFiles+0x30>
      SDM_Flush_Buffer(id);
 8003a60:	4620      	mov	r0, r4
 8003a62:	f7ff fddb 	bl	800361c <SDM_Flush_Buffer>
  return f_close(&FileHandler[id]);
 8003a66:	fb06 7004 	mla	r0, r6, r4, r7
 8003a6a:	f00e f925 	bl	8011cb8 <f_close>
      if(SDM_CloseFile(id)!=0)
 8003a6e:	2800      	cmp	r0, #0
 8003a70:	d0ec      	beq.n	8003a4c <SDM_CloseFiles+0x30>
        return 1;
 8003a72:	2401      	movs	r4, #1
}
 8003a74:	4620      	mov	r0, r4
 8003a76:	b015      	add	sp, #84	; 0x54
 8003a78:	bdf0      	pop	{r4, r5, r6, r7, pc}
      SDM_StopSensorThread(id);
 8003a7a:	4620      	mov	r0, r4
 8003a7c:	f7ff ff6c 	bl	8003958 <SDM_StopSensorThread>
  for(id=0;id<device_descriptor->nSensor;id++)
 8003a80:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8003a82:	3401      	adds	r4, #1
 8003a84:	429c      	cmp	r4, r3
 8003a86:	d3d2      	bcc.n	8003a2e <SDM_CloseFiles+0x12>
 8003a88:	e7da      	b.n	8003a40 <SDM_CloseFiles+0x24>
  dir_n = SDM_GetLastDirNumber();
 8003a8a:	f7ff fd7d 	bl	8003588 <SDM_GetLastDirNumber>
  sprintf(dir_name, "%s%03ld", LOG_DIR_PREFIX, dir_n);
 8003a8e:	4a18      	ldr	r2, [pc, #96]	; (8003af0 <SDM_CloseFiles+0xd4>)
 8003a90:	4918      	ldr	r1, [pc, #96]	; (8003af4 <SDM_CloseFiles+0xd8>)
  dir_n = SDM_GetLastDirNumber();
 8003a92:	4603      	mov	r3, r0
  sprintf(dir_name, "%s%03ld", LOG_DIR_PREFIX, dir_n);
 8003a94:	a804      	add	r0, sp, #16
 8003a96:	f014 fbd9 	bl	801824c <siprintf>
  sprintf(file_name, "%s/DeviceConfig.json", dir_name);
 8003a9a:	4917      	ldr	r1, [pc, #92]	; (8003af8 <SDM_CloseFiles+0xdc>)
 8003a9c:	aa04      	add	r2, sp, #16
 8003a9e:	a807      	add	r0, sp, #28
 8003aa0:	f014 fbd4 	bl	801824c <siprintf>
  if(f_open(&FileConfigHandler, (char const*)file_name, FA_CREATE_ALWAYS | FA_WRITE) != FR_OK)
 8003aa4:	4815      	ldr	r0, [pc, #84]	; (8003afc <SDM_CloseFiles+0xe0>)
 8003aa6:	a907      	add	r1, sp, #28
 8003aa8:	220a      	movs	r2, #10
 8003aaa:	f00d fc87 	bl	80113bc <f_open>
 8003aae:	2800      	cmp	r0, #0
 8003ab0:	d1df      	bne.n	8003a72 <SDM_CloseFiles+0x56>
  device = COM_GetDevice();  
 8003ab2:	f7fd ff45 	bl	8001940 <COM_GetDevice>
  size = HSD_JSON_serialize_Device(device, serialized_string, PRETTY_JSON);
 8003ab6:	2201      	movs	r2, #1
 8003ab8:	a902      	add	r1, sp, #8
 8003aba:	f7fd fd09 	bl	80014d0 <HSD_JSON_serialize_Device>
  SDM_WriteConfigBuffer((uint8_t*)JSON_string, strlen(JSON_string));  
 8003abe:	9902      	ldr	r1, [sp, #8]
 8003ac0:	9101      	str	r1, [sp, #4]
 8003ac2:	4608      	mov	r0, r1
 8003ac4:	f7fc fba6 	bl	8000214 <strlen>
  returnWrite = f_write(&FileConfigHandler, buffer, size, (void *)&byteswritten);
 8003ac8:	9901      	ldr	r1, [sp, #4]
  SDM_WriteConfigBuffer((uint8_t*)JSON_string, strlen(JSON_string));  
 8003aca:	4602      	mov	r2, r0
  returnWrite = f_write(&FileConfigHandler, buffer, size, (void *)&byteswritten);
 8003acc:	ab03      	add	r3, sp, #12
 8003ace:	480b      	ldr	r0, [pc, #44]	; (8003afc <SDM_CloseFiles+0xe0>)
 8003ad0:	f00d ff90 	bl	80119f4 <f_write>
  if (f_close(&FileConfigHandler)!= FR_OK)
 8003ad4:	4809      	ldr	r0, [pc, #36]	; (8003afc <SDM_CloseFiles+0xe0>)
 8003ad6:	f00e f8ef 	bl	8011cb8 <f_close>
 8003ada:	4604      	mov	r4, r0
 8003adc:	2800      	cmp	r0, #0
 8003ade:	d1c8      	bne.n	8003a72 <SDM_CloseFiles+0x56>
  HSD_JSON_free(JSON_string);
 8003ae0:	9802      	ldr	r0, [sp, #8]
 8003ae2:	f7fd fced 	bl	80014c0 <HSD_JSON_free>
}
 8003ae6:	4620      	mov	r0, r4
 8003ae8:	b015      	add	sp, #84	; 0x54
 8003aea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003aec:	20017f4c 	.word	0x20017f4c
 8003af0:	0801c1d0 	.word	0x0801c1d0
 8003af4:	0801c1d8 	.word	0x0801c1d8
 8003af8:	0801c1e8 	.word	0x0801c1e8
 8003afc:	20017d1c 	.word	0x20017d1c

08003b00 <SDM_ReadJSON>:
{  
 8003b00:	b570      	push	{r4, r5, r6, lr}
 8003b02:	4604      	mov	r4, r0
  local_device = COM_GetDevice();  
 8003b04:	f7fd ff1c 	bl	8001940 <COM_GetDevice>
  memcpy(&JSON_device, local_device, size);       
 8003b08:	4d13      	ldr	r5, [pc, #76]	; (8003b58 <SDM_ReadJSON+0x58>)
 8003b0a:	4601      	mov	r1, r0
 8003b0c:	2254      	movs	r2, #84	; 0x54
  local_device = COM_GetDevice();  
 8003b0e:	4606      	mov	r6, r0
  memcpy(&JSON_device, local_device, size);       
 8003b10:	f105 002c 	add.w	r0, r5, #44	; 0x2c
 8003b14:	f013 fe36 	bl	8017784 <memcpy>
  HSD_JSON_parse_Device(serialized_string, &JSON_device);      
 8003b18:	4620      	mov	r0, r4
 8003b1a:	f105 012c 	add.w	r1, r5, #44	; 0x2c
 8003b1e:	f7fd fded 	bl	80016fc <HSD_JSON_parse_Device>
  for (ii = 0; ii < JSON_device.deviceDescriptor.nSensor; ii++)
 8003b22:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 8003b24:	b1a3      	cbz	r3, 8003b50 <SDM_ReadJSON+0x50>
 8003b26:	2400      	movs	r4, #0
    update_sensorStatus(&local_device->sensors[ii]->sensorStatus, &JSON_device.sensors[ii]->sensorStatus, ii);
 8003b28:	f104 030a 	add.w	r3, r4, #10
 8003b2c:	eb05 0283 	add.w	r2, r5, r3, lsl #2
 8003b30:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8003b34:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8003b36:	6858      	ldr	r0, [r3, #4]
 8003b38:	4622      	mov	r2, r4
 8003b3a:	f501 71d6 	add.w	r1, r1, #428	; 0x1ac
 8003b3e:	f500 70d6 	add.w	r0, r0, #428	; 0x1ac
 8003b42:	f7fe fc47 	bl	80023d4 <update_sensorStatus>
  for (ii = 0; ii < JSON_device.deviceDescriptor.nSensor; ii++)
 8003b46:	3401      	adds	r4, #1
 8003b48:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 8003b4a:	b2e4      	uxtb	r4, r4
 8003b4c:	429c      	cmp	r4, r3
 8003b4e:	d3eb      	bcc.n	8003b28 <SDM_ReadJSON+0x28>
  update_sensors_config();  
 8003b50:	f7fe fd64 	bl	800261c <update_sensors_config>
}
 8003b54:	2000      	movs	r0, #0
 8003b56:	bd70      	pop	{r4, r5, r6, pc}
 8003b58:	2000177c 	.word	0x2000177c

08003b5c <SDM_Thread>:
{
 8003b5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b60:	b095      	sub	sp, #84	; 0x54
  if (BSP_SD_IsDetected())
 8003b62:	f002 f96b 	bl	8005e3c <BSP_SD_IsDetected>
    if (init_SD_peripheral != 1)
 8003b66:	4cbc      	ldr	r4, [pc, #752]	; (8003e58 <SDM_Thread+0x2fc>)
  if (BSP_SD_IsDetected())
 8003b68:	2800      	cmp	r0, #0
 8003b6a:	f040 80ef 	bne.w	8003d4c <SDM_Thread+0x1f0>
 8003b6e:	f10d 080c 	add.w	r8, sp, #12
  vTaskSetApplicationTaskTag( NULL, (TaskHookFunction_t)TASK_SDM_DEBUG_PIN );
 8003b72:	2102      	movs	r1, #2
 8003b74:	2000      	movs	r0, #0
 8003b76:	f010 fa97 	bl	80140a8 <vTaskSetApplicationTaskTag>
 8003b7a:	4eb8      	ldr	r6, [pc, #736]	; (8003e5c <SDM_Thread+0x300>)
 8003b7c:	f8df a324 	ldr.w	sl, [pc, #804]	; 8003ea4 <SDM_Thread+0x348>
 8003b80:	4fb7      	ldr	r7, [pc, #732]	; (8003e60 <SDM_Thread+0x304>)
  if(FATFS_UnLinkDriver(SDPath) == 0)
 8003b82:	f8df b324 	ldr.w	fp, [pc, #804]	; 8003ea8 <SDM_Thread+0x34c>
    BSP_LED_Off(LED1); 
 8003b86:	2000      	movs	r0, #0
 8003b88:	f001 fdc0 	bl	800570c <BSP_LED_Off>
    if(BatteryLow == 1)
 8003b8c:	7823      	ldrb	r3, [r4, #0]
 8003b8e:	2b01      	cmp	r3, #1
 8003b90:	d033      	beq.n	8003bfa <SDM_Thread+0x9e>
    evt = osMessageGet(sdThreadQueue_id, osWaitForever);  // wait for message      
 8003b92:	f8da 1000 	ldr.w	r1, [sl]
 8003b96:	f04f 32ff 	mov.w	r2, #4294967295
 8003b9a:	4640      	mov	r0, r8
 8003b9c:	f00e fe94 	bl	80128c8 <osMessageGet>
    if (com_status == HS_DATALOG_IDLE || com_status == HS_DATALOG_SD_STARTED )
 8003ba0:	783b      	ldrb	r3, [r7, #0]
 8003ba2:	b113      	cbz	r3, 8003baa <SDM_Thread+0x4e>
 8003ba4:	783b      	ldrb	r3, [r7, #0]
 8003ba6:	2b02      	cmp	r3, #2
 8003ba8:	d1ed      	bne.n	8003b86 <SDM_Thread+0x2a>
      BSP_LED_On(LED1);
 8003baa:	2000      	movs	r0, #0
    evt = osMessageGet(sdThreadQueue_id, osWaitForever);  // wait for message      
 8003bac:	9d04      	ldr	r5, [sp, #16]
      BSP_LED_On(LED1);
 8003bae:	f001 fd9f 	bl	80056f0 <BSP_LED_On>
      if (evt.status == osEventMessage)
 8003bb2:	9b03      	ldr	r3, [sp, #12]
 8003bb4:	2b10      	cmp	r3, #16
 8003bb6:	d1e6      	bne.n	8003b86 <SDM_Thread+0x2a>
        if(evt.value.v == SDM_START_STOP)
 8003bb8:	f248 0301 	movw	r3, #32769	; 0x8001
 8003bbc:	429d      	cmp	r5, r3
 8003bbe:	d044      	beq.n	8003c4a <SDM_Thread+0xee>
          if(evt.value.v & SDM_DATA_READY_MASK)
 8003bc0:	046b      	lsls	r3, r5, #17
 8003bc2:	d5e0      	bpl.n	8003b86 <SDM_Thread+0x2a>
            sensor_status = COM_GetSensorStatus(sensor_id);
 8003bc4:	b2eb      	uxtb	r3, r5
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	9301      	str	r3, [sp, #4]
 8003bca:	f7fd fed1 	bl	8001970 <COM_GetSensorStatus>
            if(evt.value.v & SDM_DATA_FIRST_HALF_MASK) // Data available on first half of the circular buffer
 8003bce:	f415 5f00 	tst.w	r5, #8192	; 0x2000
            buf_size = sensor_status->sdWriteBufferSize;
 8003bd2:	6942      	ldr	r2, [r0, #20]
            if(evt.value.v & SDM_DATA_FIRST_HALF_MASK) // Data available on first half of the circular buffer
 8003bd4:	9b01      	ldr	r3, [sp, #4]
 8003bd6:	f000 8097 	beq.w	8003d08 <SDM_Thread+0x1ac>
  if(f_write(&FileHandler[id], buffer, size, (void *)&byteswritten) != FR_OK)
 8003bda:	49a2      	ldr	r1, [pc, #648]	; (8003e64 <SDM_Thread+0x308>)
 8003bdc:	f44f 700c 	mov.w	r0, #560	; 0x230
 8003be0:	fb00 1003 	mla	r0, r0, r3, r1
 8003be4:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 8003be8:	ab02      	add	r3, sp, #8
 8003bea:	f00d ff03 	bl	80119f4 <f_write>
    BSP_LED_Off(LED1); 
 8003bee:	2000      	movs	r0, #0
 8003bf0:	f001 fd8c 	bl	800570c <BSP_LED_Off>
    if(BatteryLow == 1)
 8003bf4:	7823      	ldrb	r3, [r4, #0]
 8003bf6:	2b01      	cmp	r3, #1
 8003bf8:	d1cb      	bne.n	8003b92 <SDM_Thread+0x36>
      SM_TIM_Stop();
 8003bfa:	f000 fdeb 	bl	80047d4 <SM_TIM_Stop>
      if(SDM_CloseFiles() == 0)
 8003bfe:	f7ff ff0d 	bl	8003a1c <SDM_CloseFiles>
 8003c02:	b908      	cbnz	r0, 8003c08 <SDM_Thread+0xac>
        SD_Logging_Active = 0;
 8003c04:	f884 019c 	strb.w	r0, [r4, #412]	; 0x19c
  device_descriptor = COM_GetDeviceDescriptor();
 8003c08:	f7fd fe9e 	bl	8001948 <COM_GetDeviceDescriptor>
  for(i=0;i<device_descriptor->nSensor;i++)
 8003c0c:	6a83      	ldr	r3, [r0, #40]	; 0x28
  device_descriptor = COM_GetDeviceDescriptor();
 8003c0e:	4605      	mov	r5, r0
  for(i=0;i<device_descriptor->nSensor;i++)
 8003c10:	b1a3      	cbz	r3, 8003c3c <SDM_Thread+0xe0>
 8003c12:	f04f 0900 	mov.w	r9, #0
    sensor_status = COM_GetSensorStatus(i);
 8003c16:	fa5f f089 	uxtb.w	r0, r9
 8003c1a:	f7fd fea9 	bl	8001970 <COM_GetSensorStatus>
    if(sensor_status->isActive && SD_WriteBuffer[i]!=0)
 8003c1e:	7b82      	ldrb	r2, [r0, #14]
 8003c20:	b13a      	cbz	r2, 8003c32 <SDM_Thread+0xd6>
 8003c22:	f856 0029 	ldr.w	r0, [r6, r9, lsl #2]
 8003c26:	b120      	cbz	r0, 8003c32 <SDM_Thread+0xd6>
      HSD_free(SD_WriteBuffer[i]);
 8003c28:	f013 fda4 	bl	8017774 <free>
      SD_WriteBuffer[i] = NULL;
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	f846 3029 	str.w	r3, [r6, r9, lsl #2]
  for(i=0;i<device_descriptor->nSensor;i++)
 8003c32:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8003c34:	f109 0901 	add.w	r9, r9, #1
 8003c38:	4591      	cmp	r9, r2
 8003c3a:	d3ec      	bcc.n	8003c16 <SDM_Thread+0xba>
      if (init_SD_peripheral != 0)
 8003c3c:	f894 3080 	ldrb.w	r3, [r4, #128]	; 0x80
 8003c40:	bb53      	cbnz	r3, 8003c98 <SDM_Thread+0x13c>
      BSP_BC_CmdSend(SHIPPING_MODE_ON);
 8003c42:	2017      	movs	r0, #23
 8003c44:	f001 fd70 	bl	8005728 <BSP_BC_CmdSend>
 8003c48:	e7a3      	b.n	8003b92 <SDM_Thread+0x36>
          if(SD_Logging_Active == 0)
 8003c4a:	f894 319c 	ldrb.w	r3, [r4, #412]	; 0x19c
 8003c4e:	bb73      	cbnz	r3, 8003cae <SDM_Thread+0x152>
            com_status = HS_DATALOG_SD_STARTED;            
 8003c50:	2302      	movs	r3, #2
 8003c52:	703b      	strb	r3, [r7, #0]
            SM_TIM_Start();
 8003c54:	f000 fdb8 	bl	80047c8 <SM_TIM_Start>
            if (BSP_SD_IsDetected())
 8003c58:	f002 f8f0 	bl	8005e3c <BSP_SD_IsDetected>
 8003c5c:	2800      	cmp	r0, #0
 8003c5e:	d072      	beq.n	8003d46 <SDM_Thread+0x1ea>
              if (init_SD_peripheral != 1)
 8003c60:	f894 3080 	ldrb.w	r3, [r4, #128]	; 0x80
 8003c64:	2b01      	cmp	r3, #1
 8003c66:	d00a      	beq.n	8003c7e <SDM_Thread+0x122>
  if(FATFS_LinkDriver(&SD_Driver, SDPath) == 0)
 8003c68:	487f      	ldr	r0, [pc, #508]	; (8003e68 <SDM_Thread+0x30c>)
 8003c6a:	4659      	mov	r1, fp
 8003c6c:	f00e fc2c 	bl	80124c8 <FATFS_LinkDriver>
 8003c70:	4602      	mov	r2, r0
 8003c72:	2800      	cmp	r0, #0
 8003c74:	f000 80b4 	beq.w	8003de0 <SDM_Thread+0x284>
                init_SD_peripheral = 1;
 8003c78:	2301      	movs	r3, #1
 8003c7a:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
              SD_present = 1;
 8003c7e:	2501      	movs	r5, #1
 8003c80:	f884 519d 	strb.w	r5, [r4, #413]	; 0x19d
              if(SDM_InitFiles() == 0)
 8003c84:	f7ff fdd6 	bl	8003834 <SDM_InitFiles>
 8003c88:	2800      	cmp	r0, #0
 8003c8a:	f000 810f 	beq.w	8003eac <SDM_Thread+0x350>
              testTime = HAL_GetTick();
 8003c8e:	f002 f9d3 	bl	8006038 <HAL_GetTick>
 8003c92:	f8c4 01a0 	str.w	r0, [r4, #416]	; 0x1a0
 8003c96:	e776      	b.n	8003b86 <SDM_Thread+0x2a>
  if(FATFS_UnLinkDriver(SDPath) == 0)
 8003c98:	4658      	mov	r0, fp
 8003c9a:	f00e fc37 	bl	801250c <FATFS_UnLinkDriver>
 8003c9e:	4602      	mov	r2, r0
 8003ca0:	2800      	cmp	r0, #0
 8003ca2:	d03d      	beq.n	8003d20 <SDM_Thread+0x1c4>
        init_SD_peripheral = 0;
 8003ca4:	f04f 0300 	mov.w	r3, #0
 8003ca8:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
 8003cac:	e7c9      	b.n	8003c42 <SDM_Thread+0xe6>
          else if (SD_Logging_Active == 1)
 8003cae:	2b01      	cmp	r3, #1
 8003cb0:	f47f af69 	bne.w	8003b86 <SDM_Thread+0x2a>
            SM_TIM_Stop();
 8003cb4:	f000 fd8e 	bl	80047d4 <SM_TIM_Stop>
            if(SDM_CloseFiles() == 0)
 8003cb8:	f7ff feb0 	bl	8003a1c <SDM_CloseFiles>
 8003cbc:	2800      	cmp	r0, #0
 8003cbe:	f000 80fb 	beq.w	8003eb8 <SDM_Thread+0x35c>
  device_descriptor = COM_GetDeviceDescriptor();
 8003cc2:	f7fd fe41 	bl	8001948 <COM_GetDeviceDescriptor>
  for(i=0;i<device_descriptor->nSensor;i++)
 8003cc6:	6a82      	ldr	r2, [r0, #40]	; 0x28
  device_descriptor = COM_GetDeviceDescriptor();
 8003cc8:	4603      	mov	r3, r0
  for(i=0;i<device_descriptor->nSensor;i++)
 8003cca:	b1a2      	cbz	r2, 8003cf6 <SDM_Thread+0x19a>
 8003ccc:	2500      	movs	r5, #0
    sensor_status = COM_GetSensorStatus(i);
 8003cce:	b2e8      	uxtb	r0, r5
 8003cd0:	9301      	str	r3, [sp, #4]
 8003cd2:	f7fd fe4d 	bl	8001970 <COM_GetSensorStatus>
    if(sensor_status->isActive && SD_WriteBuffer[i]!=0)
 8003cd6:	7b82      	ldrb	r2, [r0, #14]
 8003cd8:	9b01      	ldr	r3, [sp, #4]
 8003cda:	b142      	cbz	r2, 8003cee <SDM_Thread+0x192>
 8003cdc:	f856 0025 	ldr.w	r0, [r6, r5, lsl #2]
 8003ce0:	b128      	cbz	r0, 8003cee <SDM_Thread+0x192>
      HSD_free(SD_WriteBuffer[i]);
 8003ce2:	f013 fd47 	bl	8017774 <free>
      SD_WriteBuffer[i] = NULL;
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	f846 3025 	str.w	r3, [r6, r5, lsl #2]
 8003cec:	9b01      	ldr	r3, [sp, #4]
  for(i=0;i<device_descriptor->nSensor;i++)
 8003cee:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003cf0:	3501      	adds	r5, #1
 8003cf2:	4295      	cmp	r5, r2
 8003cf4:	d3eb      	bcc.n	8003cce <SDM_Thread+0x172>
            if (init_SD_peripheral != 0)
 8003cf6:	f894 3080 	ldrb.w	r3, [r4, #128]	; 0x80
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	f040 80df 	bne.w	8003ebe <SDM_Thread+0x362>
            com_status = HS_DATALOG_IDLE;
 8003d00:	f04f 0300 	mov.w	r3, #0
 8003d04:	703b      	strb	r3, [r7, #0]
 8003d06:	e73e      	b.n	8003b86 <SDM_Thread+0x2a>
              SDM_WriteBuffer(sensor_id, (uint8_t *)(SD_WriteBuffer[sensor_id]+buf_size), buf_size);
 8003d08:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
  if(f_write(&FileHandler[id], buffer, size, (void *)&byteswritten) != FR_OK)
 8003d0c:	4d55      	ldr	r5, [pc, #340]	; (8003e64 <SDM_Thread+0x308>)
 8003d0e:	f44f 700c 	mov.w	r0, #560	; 0x230
 8003d12:	fb00 5003 	mla	r0, r0, r3, r5
 8003d16:	4411      	add	r1, r2
 8003d18:	ab02      	add	r3, sp, #8
 8003d1a:	f00d fe6b 	bl	80119f4 <f_write>
 8003d1e:	e732      	b.n	8003b86 <SDM_Thread+0x2a>
    if(f_mount(NULL, (TCHAR const*)SDPath, 0) != FR_OK)
 8003d20:	4659      	mov	r1, fp
 8003d22:	f00d fb0d 	bl	8011340 <f_mount>
 8003d26:	2800      	cmp	r0, #0
 8003d28:	d0bc      	beq.n	8003ca4 <SDM_Thread+0x148>
        BSP_LED_On(LED1);
 8003d2a:	2000      	movs	r0, #0
 8003d2c:	f001 fce0 	bl	80056f0 <BSP_LED_On>
        HAL_Delay(500);
 8003d30:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003d34:	f002 f986 	bl	8006044 <HAL_Delay>
        BSP_LED_Off(LED1);
 8003d38:	2000      	movs	r0, #0
 8003d3a:	f001 fce7 	bl	800570c <BSP_LED_Off>
        HAL_Delay(100);
 8003d3e:	2064      	movs	r0, #100	; 0x64
 8003d40:	f002 f980 	bl	8006044 <HAL_Delay>
      while(1)
 8003d44:	e7f1      	b.n	8003d2a <SDM_Thread+0x1ce>
              SD_present = 0;
 8003d46:	f884 019d 	strb.w	r0, [r4, #413]	; 0x19d
 8003d4a:	e71c      	b.n	8003b86 <SDM_Thread+0x2a>
    if (init_SD_peripheral != 1)
 8003d4c:	f894 3080 	ldrb.w	r3, [r4, #128]	; 0x80
 8003d50:	2b01      	cmp	r3, #1
 8003d52:	d17a      	bne.n	8003e4a <SDM_Thread+0x2ee>
    (void)f_opendir(&dir, "/"); /* Open the root directory */
 8003d54:	4945      	ldr	r1, [pc, #276]	; (8003e6c <SDM_Thread+0x310>)
      (void)f_readdir(&dir, &fno); /* Read files in root folder */
 8003d56:	4d46      	ldr	r5, [pc, #280]	; (8003e70 <SDM_Thread+0x314>)
    (void)f_opendir(&dir, "/"); /* Open the root directory */
 8003d58:	a806      	add	r0, sp, #24
 8003d5a:	f00e f843 	bl	8011de4 <f_opendir>
 8003d5e:	e003      	b.n	8003d68 <SDM_Thread+0x20c>
      if (fno.fattrib & AM_ARC) /* It is a file. */
 8003d60:	f894 308c 	ldrb.w	r3, [r4, #140]	; 0x8c
 8003d64:	069a      	lsls	r2, r3, #26
 8003d66:	d450      	bmi.n	8003e0a <SDM_Thread+0x2ae>
      (void)f_readdir(&dir, &fno); /* Read files in root folder */
 8003d68:	4629      	mov	r1, r5
 8003d6a:	a806      	add	r0, sp, #24
 8003d6c:	f00e f8f8 	bl	8011f60 <f_readdir>
      if (fno.fname[0] == 0) break;
 8003d70:	f894 309a 	ldrb.w	r3, [r4, #154]	; 0x9a
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d1f3      	bne.n	8003d60 <SDM_Thread+0x204>
    f_closedir(&dir);
 8003d78:	a806      	add	r0, sp, #24
 8003d7a:	f00e f8b9 	bl	8011ef0 <f_closedir>
  Activate_Sensor(iis3dwb_com_id);
 8003d7e:	4b3d      	ldr	r3, [pc, #244]	; (8003e74 <SDM_Thread+0x318>)
  COM_SensorStatus_t * sensor_status = COM_GetSensorStatus(id);  
 8003d80:	7818      	ldrb	r0, [r3, #0]
 8003d82:	f7fd fdf5 	bl	8001970 <COM_GetSensorStatus>
  Activate_Sensor(hts221_com_id);
 8003d86:	4b3c      	ldr	r3, [pc, #240]	; (8003e78 <SDM_Thread+0x31c>)
  sensor_status->isActive = 1;
 8003d88:	2501      	movs	r5, #1
 8003d8a:	7385      	strb	r5, [r0, #14]
  COM_SensorStatus_t * sensor_status = COM_GetSensorStatus(id);  
 8003d8c:	7818      	ldrb	r0, [r3, #0]
 8003d8e:	f7fd fdef 	bl	8001970 <COM_GetSensorStatus>
  Activate_Sensor(iis2dh_com_id);
 8003d92:	4b3a      	ldr	r3, [pc, #232]	; (8003e7c <SDM_Thread+0x320>)
  sensor_status->isActive = 1;
 8003d94:	7385      	strb	r5, [r0, #14]
  COM_SensorStatus_t * sensor_status = COM_GetSensorStatus(id);  
 8003d96:	7818      	ldrb	r0, [r3, #0]
 8003d98:	f7fd fdea 	bl	8001970 <COM_GetSensorStatus>
  Activate_Sensor(iis2mdc_com_id);
 8003d9c:	4b38      	ldr	r3, [pc, #224]	; (8003e80 <SDM_Thread+0x324>)
  sensor_status->isActive = 1;
 8003d9e:	7385      	strb	r5, [r0, #14]
  COM_SensorStatus_t * sensor_status = COM_GetSensorStatus(id);  
 8003da0:	7818      	ldrb	r0, [r3, #0]
 8003da2:	f7fd fde5 	bl	8001970 <COM_GetSensorStatus>
  Activate_Sensor(imp34dt05_com_id);
 8003da6:	4b37      	ldr	r3, [pc, #220]	; (8003e84 <SDM_Thread+0x328>)
  sensor_status->isActive = 1;
 8003da8:	7385      	strb	r5, [r0, #14]
  COM_SensorStatus_t * sensor_status = COM_GetSensorStatus(id);  
 8003daa:	7818      	ldrb	r0, [r3, #0]
 8003dac:	f7fd fde0 	bl	8001970 <COM_GetSensorStatus>
  Activate_Sensor(mp23abs1_com_id);
 8003db0:	4b35      	ldr	r3, [pc, #212]	; (8003e88 <SDM_Thread+0x32c>)
  sensor_status->isActive = 1;
 8003db2:	7385      	strb	r5, [r0, #14]
  COM_SensorStatus_t * sensor_status = COM_GetSensorStatus(id);  
 8003db4:	7818      	ldrb	r0, [r3, #0]
 8003db6:	f7fd fddb 	bl	8001970 <COM_GetSensorStatus>
  Activate_Sensor(ism330dhcx_com_id);
 8003dba:	4b34      	ldr	r3, [pc, #208]	; (8003e8c <SDM_Thread+0x330>)
  sensor_status->isActive = 1;
 8003dbc:	7385      	strb	r5, [r0, #14]
  COM_SensorStatus_t * sensor_status = COM_GetSensorStatus(id);  
 8003dbe:	7818      	ldrb	r0, [r3, #0]
 8003dc0:	f7fd fdd6 	bl	8001970 <COM_GetSensorStatus>
  Activate_Sensor(lps22hh_com_id);
 8003dc4:	4b32      	ldr	r3, [pc, #200]	; (8003e90 <SDM_Thread+0x334>)
  sensor_status->isActive = 1;
 8003dc6:	7385      	strb	r5, [r0, #14]
  COM_SensorStatus_t * sensor_status = COM_GetSensorStatus(id);  
 8003dc8:	7818      	ldrb	r0, [r3, #0]
 8003dca:	f7fd fdd1 	bl	8001970 <COM_GetSensorStatus>
  Activate_Sensor(stts751_com_id);
 8003dce:	4b31      	ldr	r3, [pc, #196]	; (8003e94 <SDM_Thread+0x338>)
  sensor_status->isActive = 1;
 8003dd0:	7385      	strb	r5, [r0, #14]
  COM_SensorStatus_t * sensor_status = COM_GetSensorStatus(id);  
 8003dd2:	7818      	ldrb	r0, [r3, #0]
 8003dd4:	f7fd fdcc 	bl	8001970 <COM_GetSensorStatus>
  sensor_status->isActive = 1;
 8003dd8:	f10d 080c 	add.w	r8, sp, #12
 8003ddc:	7385      	strb	r5, [r0, #14]
}
 8003dde:	e029      	b.n	8003e34 <SDM_Thread+0x2d8>
    if(f_mount(&SDFatFs, (TCHAR const*)SDPath, 0) != FR_OK)
 8003de0:	482d      	ldr	r0, [pc, #180]	; (8003e98 <SDM_Thread+0x33c>)
 8003de2:	4659      	mov	r1, fp
 8003de4:	f00d faac 	bl	8011340 <f_mount>
 8003de8:	2800      	cmp	r0, #0
 8003dea:	f43f af45 	beq.w	8003c78 <SDM_Thread+0x11c>
        BSP_LED_On(LED1);
 8003dee:	2000      	movs	r0, #0
 8003df0:	f001 fc7e 	bl	80056f0 <BSP_LED_On>
        HAL_Delay(500);
 8003df4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003df8:	f002 f924 	bl	8006044 <HAL_Delay>
        BSP_LED_Off(LED1);
 8003dfc:	2000      	movs	r0, #0
 8003dfe:	f001 fc85 	bl	800570c <BSP_LED_Off>
        HAL_Delay(100);
 8003e02:	2064      	movs	r0, #100	; 0x64
 8003e04:	f002 f91e 	bl	8006044 <HAL_Delay>
      while(1)
 8003e08:	e7f1      	b.n	8003dee <SDM_Thread+0x292>
        isJSON = strcmp(".json",fno.fname);
 8003e0a:	f104 019a 	add.w	r1, r4, #154	; 0x9a
 8003e0e:	4823      	ldr	r0, [pc, #140]	; (8003e9c <SDM_Thread+0x340>)
 8003e10:	9101      	str	r1, [sp, #4]
 8003e12:	f7fc f9f5 	bl	8000200 <strcmp>
        if (isJSON)
 8003e16:	9901      	ldr	r1, [sp, #4]
 8003e18:	2800      	cmp	r0, #0
 8003e1a:	d0ad      	beq.n	8003d78 <SDM_Thread+0x21c>
          if(f_open(&FileConfigJSON, fno.fname, FA_OPEN_EXISTING | FA_READ) == FR_OK)
 8003e1c:	4e20      	ldr	r6, [pc, #128]	; (8003ea0 <SDM_Thread+0x344>)
 8003e1e:	2201      	movs	r2, #1
 8003e20:	4630      	mov	r0, r6
 8003e22:	f00d facb 	bl	80113bc <f_open>
 8003e26:	2800      	cmp	r0, #0
 8003e28:	d066      	beq.n	8003ef8 <SDM_Thread+0x39c>
 8003e2a:	f10d 080c 	add.w	r8, sp, #12
    f_closedir(&dir);
 8003e2e:	a806      	add	r0, sp, #24
 8003e30:	f00e f85e 	bl	8011ef0 <f_closedir>
    if (init_SD_peripheral != 0)
 8003e34:	f894 3080 	ldrb.w	r3, [r4, #128]	; 0x80
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	f43f ae9a 	beq.w	8003b72 <SDM_Thread+0x16>
      SDM_SD_DeInit();
 8003e3e:	f7ff fb87 	bl	8003550 <SDM_SD_DeInit>
      init_SD_peripheral = 0;
 8003e42:	2300      	movs	r3, #0
 8003e44:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
 8003e48:	e693      	b.n	8003b72 <SDM_Thread+0x16>
      SDM_SD_Init();
 8003e4a:	f7ff fb5f 	bl	800350c <SDM_SD_Init>
      init_SD_peripheral = 1;
 8003e4e:	2301      	movs	r3, #1
 8003e50:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
 8003e54:	e77e      	b.n	8003d54 <SDM_Thread+0x1f8>
 8003e56:	bf00      	nop
 8003e58:	2000177c 	.word	0x2000177c
 8003e5c:	20019790 	.word	0x20019790
 8003e60:	200005b4 	.word	0x200005b4
 8003e64:	20017f4c 	.word	0x20017f4c
 8003e68:	0801b7fc 	.word	0x0801b7fc
 8003e6c:	0801c200 	.word	0x0801c200
 8003e70:	20001800 	.word	0x20001800
 8003e74:	20017330 	.word	0x20017330
 8003e78:	20017644 	.word	0x20017644
 8003e7c:	20017654 	.word	0x20017654
 8003e80:	20017605 	.word	0x20017605
 8003e84:	2001764c 	.word	0x2001764c
 8003e88:	20017604 	.word	0x20017604
 8003e8c:	20017645 	.word	0x20017645
 8003e90:	2001765d 	.word	0x2001765d
 8003e94:	2001765c 	.word	0x2001765c
 8003e98:	200178b8 	.word	0x200178b8
 8003e9c:	0801c204 	.word	0x0801c204
 8003ea0:	20019534 	.word	0x20019534
 8003ea4:	2001952c 	.word	0x2001952c
 8003ea8:	20019530 	.word	0x20019530
                BSP_LED_Off(LED_ORANGE);
 8003eac:	4628      	mov	r0, r5
                SD_Logging_Active = 1;
 8003eae:	f884 519c 	strb.w	r5, [r4, #412]	; 0x19c
                BSP_LED_Off(LED_ORANGE);
 8003eb2:	f001 fc2b 	bl	800570c <BSP_LED_Off>
 8003eb6:	e6ea      	b.n	8003c8e <SDM_Thread+0x132>
              SD_Logging_Active = 0;
 8003eb8:	f884 019c 	strb.w	r0, [r4, #412]	; 0x19c
 8003ebc:	e701      	b.n	8003cc2 <SDM_Thread+0x166>
  if(FATFS_UnLinkDriver(SDPath) == 0)
 8003ebe:	4658      	mov	r0, fp
 8003ec0:	f00e fb24 	bl	801250c <FATFS_UnLinkDriver>
 8003ec4:	4602      	mov	r2, r0
 8003ec6:	b120      	cbz	r0, 8003ed2 <SDM_Thread+0x376>
              init_SD_peripheral = 0;
 8003ec8:	f04f 0300 	mov.w	r3, #0
 8003ecc:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
 8003ed0:	e716      	b.n	8003d00 <SDM_Thread+0x1a4>
    if(f_mount(NULL, (TCHAR const*)SDPath, 0) != FR_OK)
 8003ed2:	4659      	mov	r1, fp
 8003ed4:	f00d fa34 	bl	8011340 <f_mount>
 8003ed8:	2800      	cmp	r0, #0
 8003eda:	d0f5      	beq.n	8003ec8 <SDM_Thread+0x36c>
        BSP_LED_On(LED1);
 8003edc:	2000      	movs	r0, #0
 8003ede:	f001 fc07 	bl	80056f0 <BSP_LED_On>
        HAL_Delay(500);
 8003ee2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003ee6:	f002 f8ad 	bl	8006044 <HAL_Delay>
        BSP_LED_Off(LED1);
 8003eea:	2000      	movs	r0, #0
 8003eec:	f001 fc0e 	bl	800570c <BSP_LED_Off>
        HAL_Delay(100);
 8003ef0:	2064      	movs	r0, #100	; 0x64
 8003ef2:	f002 f8a7 	bl	8006044 <HAL_Delay>
      while(1)
 8003ef6:	e7f1      	b.n	8003edc <SDM_Thread+0x380>
            sizeFile = f_size(&FileConfigJSON)+1;
 8003ef8:	68f2      	ldr	r2, [r6, #12]
 8003efa:	3201      	adds	r2, #1
            config_JSON_string = HSD_malloc(sizeFile);
 8003efc:	4610      	mov	r0, r2
 8003efe:	9201      	str	r2, [sp, #4]
 8003f00:	f013 fc30 	bl	8017764 <malloc>
            f_read (&FileConfigJSON, config_JSON_string, sizeFile, &br);
 8003f04:	f10d 080c 	add.w	r8, sp, #12
 8003f08:	4601      	mov	r1, r0
 8003f0a:	9a01      	ldr	r2, [sp, #4]
            config_JSON_string = HSD_malloc(sizeFile);
 8003f0c:	4605      	mov	r5, r0
            f_read (&FileConfigJSON, config_JSON_string, sizeFile, &br);
 8003f0e:	4643      	mov	r3, r8
 8003f10:	4630      	mov	r0, r6
 8003f12:	f00d fc37 	bl	8011784 <f_read>
            SDM_ReadJSON(config_JSON_string);
 8003f16:	4628      	mov	r0, r5
 8003f18:	f7ff fdf2 	bl	8003b00 <SDM_ReadJSON>
            HSD_JSON_free(config_JSON_string);
 8003f1c:	4628      	mov	r0, r5
 8003f1e:	f7fd facf 	bl	80014c0 <HSD_JSON_free>
            f_close(&FileConfigJSON);
 8003f22:	4630      	mov	r0, r6
 8003f24:	f00d fec8 	bl	8011cb8 <f_close>
 8003f28:	e781      	b.n	8003e2e <SDM_Thread+0x2d2>
 8003f2a:	bf00      	nop

08003f2c <HAL_GPIO_EXTI_Callback>:
  switch(GPIO_Pin)
 8003f2c:	2801      	cmp	r0, #1
 8003f2e:	d000      	beq.n	8003f32 <HAL_GPIO_EXTI_Callback+0x6>
 8003f30:	4770      	bx	lr
{
 8003f32:	b538      	push	{r3, r4, r5, lr}
    if( HAL_GetTick() - t_start > 1000 )
 8003f34:	4c16      	ldr	r4, [pc, #88]	; (8003f90 <HAL_GPIO_EXTI_Callback+0x64>)
 8003f36:	f002 f87f 	bl	8006038 <HAL_GetTick>
 8003f3a:	f8d4 31a4 	ldr.w	r3, [r4, #420]	; 0x1a4
 8003f3e:	1ac0      	subs	r0, r0, r3
 8003f40:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8003f44:	d905      	bls.n	8003f52 <HAL_GPIO_EXTI_Callback+0x26>
      if (com_status == HS_DATALOG_IDLE || com_status == HS_DATALOG_SD_STARTED )
 8003f46:	4b13      	ldr	r3, [pc, #76]	; (8003f94 <HAL_GPIO_EXTI_Callback+0x68>)
 8003f48:	781a      	ldrb	r2, [r3, #0]
 8003f4a:	b11a      	cbz	r2, 8003f54 <HAL_GPIO_EXTI_Callback+0x28>
 8003f4c:	781b      	ldrb	r3, [r3, #0]
 8003f4e:	2b02      	cmp	r3, #2
 8003f50:	d000      	beq.n	8003f54 <HAL_GPIO_EXTI_Callback+0x28>
}
 8003f52:	bd38      	pop	{r3, r4, r5, pc}
        if(osMessagePut(sdThreadQueue_id, SDM_START_STOP, 0) != osOK)
 8003f54:	4b10      	ldr	r3, [pc, #64]	; (8003f98 <HAL_GPIO_EXTI_Callback+0x6c>)
 8003f56:	2200      	movs	r2, #0
 8003f58:	6818      	ldr	r0, [r3, #0]
 8003f5a:	f248 0101 	movw	r1, #32769	; 0x8001
 8003f5e:	f00e fc87 	bl	8012870 <osMessagePut>
 8003f62:	4605      	mov	r5, r0
 8003f64:	b100      	cbz	r0, 8003f68 <HAL_GPIO_EXTI_Callback+0x3c>
  while (1)
 8003f66:	e7fe      	b.n	8003f66 <HAL_GPIO_EXTI_Callback+0x3a>
        t_start = HAL_GetTick();
 8003f68:	f002 f866 	bl	8006038 <HAL_GetTick>
 8003f6c:	f8c4 01a4 	str.w	r0, [r4, #420]	; 0x1a4
        t_start = SD_Logging_Time_Start = HAL_GetTick();
 8003f70:	f002 f862 	bl	8006038 <HAL_GetTick>
        if (SD_Logging_Enabled == 1)
 8003f74:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac
 8003f78:	2b01      	cmp	r3, #1
          SD_Logging_Enabled = 1;
 8003f7a:	bf18      	it	ne
 8003f7c:	2301      	movne	r3, #1
        t_start = SD_Logging_Time_Start = HAL_GetTick();
 8003f7e:	e9c4 0069 	strd	r0, r0, [r4, #420]	; 0x1a4
          SD_Logging_Enabled = 0;
 8003f82:	bf0c      	ite	eq
 8003f84:	f8c4 51ac 	streq.w	r5, [r4, #428]	; 0x1ac
          SD_Logging_Enabled = 1;
 8003f88:	f8c4 31ac 	strne.w	r3, [r4, #428]	; 0x1ac
}
 8003f8c:	bd38      	pop	{r3, r4, r5, pc}
 8003f8e:	bf00      	nop
 8003f90:	2000177c 	.word	0x2000177c
 8003f94:	200005b4 	.word	0x200005b4
 8003f98:	2001952c 	.word	0x2001952c

08003f9c <SDM_AutosaveFile>:
{
 8003f9c:	b538      	push	{r3, r4, r5, lr}
  if (SD_Logging_Active)
 8003f9e:	4c17      	ldr	r4, [pc, #92]	; (8003ffc <SDM_AutosaveFile+0x60>)
 8003fa0:	f894 519c 	ldrb.w	r5, [r4, #412]	; 0x19c
 8003fa4:	b14d      	cbz	r5, 8003fba <SDM_AutosaveFile+0x1e>
    if( (HAL_GetTick() - SD_Logging_Time_Start) > HSD_LOGGING_TIME_SECONDS_ACTIVE*1000 )
 8003fa6:	f002 f847 	bl	8006038 <HAL_GetTick>
 8003faa:	f8d4 21a8 	ldr.w	r2, [r4, #424]	; 0x1a8
 8003fae:	f64e 2360 	movw	r3, #60000	; 0xea60
 8003fb2:	1a80      	subs	r0, r0, r2
 8003fb4:	4298      	cmp	r0, r3
 8003fb6:	d812      	bhi.n	8003fde <SDM_AutosaveFile+0x42>
}
 8003fb8:	bd38      	pop	{r3, r4, r5, pc}
    if( (HAL_GetTick() - SD_Logging_Time_Start) > HSD_LOGGING_TIME_SECONDS_IDLE*1000 )
 8003fba:	f002 f83d 	bl	8006038 <HAL_GetTick>
 8003fbe:	f8d4 21a8 	ldr.w	r2, [r4, #424]	; 0x1a8
 8003fc2:	f242 7310 	movw	r3, #10000	; 0x2710
 8003fc6:	1a80      	subs	r0, r0, r2
 8003fc8:	4298      	cmp	r0, r3
 8003fca:	d9f5      	bls.n	8003fb8 <SDM_AutosaveFile+0x1c>
      if(osMessagePut(sdThreadQueue_id, SDM_START_STOP, 0) != osOK)
 8003fcc:	4b0c      	ldr	r3, [pc, #48]	; (8004000 <SDM_AutosaveFile+0x64>)
 8003fce:	462a      	mov	r2, r5
 8003fd0:	6818      	ldr	r0, [r3, #0]
 8003fd2:	f248 0101 	movw	r1, #32769	; 0x8001
 8003fd6:	f00e fc4b 	bl	8012870 <osMessagePut>
 8003fda:	b148      	cbz	r0, 8003ff0 <SDM_AutosaveFile+0x54>
  while (1)
 8003fdc:	e7fe      	b.n	8003fdc <SDM_AutosaveFile+0x40>
      if(osMessagePut(sdThreadQueue_id, SDM_START_STOP, 0) != osOK)
 8003fde:	4b08      	ldr	r3, [pc, #32]	; (8004000 <SDM_AutosaveFile+0x64>)
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	6818      	ldr	r0, [r3, #0]
 8003fe4:	f248 0101 	movw	r1, #32769	; 0x8001
 8003fe8:	f00e fc42 	bl	8012870 <osMessagePut>
 8003fec:	b100      	cbz	r0, 8003ff0 <SDM_AutosaveFile+0x54>
  while (1)
 8003fee:	e7fe      	b.n	8003fee <SDM_AutosaveFile+0x52>
      t_start = SD_Logging_Time_Start = HAL_GetTick();
 8003ff0:	f002 f822 	bl	8006038 <HAL_GetTick>
 8003ff4:	e9c4 0069 	strd	r0, r0, [r4, #420]	; 0x1a4
}
 8003ff8:	bd38      	pop	{r3, r4, r5, pc}
 8003ffa:	bf00      	nop
 8003ffc:	2000177c 	.word	0x2000177c
 8004000:	2001952c 	.word	0x2001952c

08004004 <SM_I2C_ErrorCallback>:
}


void SM_I2C_ErrorCallback(I2C_HandleTypeDef *I2cHandle)
{
  errors++;
 8004004:	4a02      	ldr	r2, [pc, #8]	; (8004010 <SM_I2C_ErrorCallback+0xc>)
 8004006:	6813      	ldr	r3, [r2, #0]
 8004008:	3301      	adds	r3, #1
 800400a:	6013      	str	r3, [r2, #0]
}
 800400c:	4770      	bx	lr
 800400e:	bf00      	nop
 8004010:	200019a8 	.word	0x200019a8

08004014 <i2c_Thread>:
{
 8004014:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  vTaskSetApplicationTaskTag( NULL, (TaskHookFunction_t)TASK_SM_I2C_DEBUG_PIN );
 8004018:	210b      	movs	r1, #11
{
 800401a:	b087      	sub	sp, #28
  vTaskSetApplicationTaskTag( NULL, (TaskHookFunction_t)TASK_SM_I2C_DEBUG_PIN );
 800401c:	2000      	movs	r0, #0
 800401e:	f010 f843 	bl	80140a8 <vTaskSetApplicationTaskTag>
 8004022:	f8df 909c 	ldr.w	r9, [pc, #156]	; 80040c0 <i2c_Thread+0xac>
 8004026:	f8df 809c 	ldr.w	r8, [pc, #156]	; 80040c4 <i2c_Thread+0xb0>
 800402a:	4f23      	ldr	r7, [pc, #140]	; (80040b8 <i2c_Thread+0xa4>)
      HAL_I2C_Mem_Write_DMA( &hsm_i2c,  ((sensor_handle_t *)msg->sensorHandler)->I2C_address, ( uint16_t )msg->regAddr|autoInc, I2C_MEMADD_SIZE_8BIT, msg->dataPtr, msg->readSize);
 800402c:	4e23      	ldr	r6, [pc, #140]	; (80040bc <i2c_Thread+0xa8>)
 800402e:	e020      	b.n	8004072 <i2c_Thread+0x5e>
    if (msg->isRead)
 8004030:	f894 c004 	ldrb.w	ip, [r4, #4]
    uint8_t autoInc = 0;
 8004034:	2200      	movs	r2, #0
      HAL_I2C_Mem_Read_DMA( &hsm_i2c,  ((sensor_handle_t *)msg->sensorHandler)->I2C_address, ( uint16_t )msg->regAddr|autoInc, I2C_MEMADD_SIZE_8BIT, msg->dataPtr, msg->readSize);
 8004036:	2301      	movs	r3, #1
 8004038:	4630      	mov	r0, r6
    if (msg->isRead)
 800403a:	f1bc 0f00 	cmp.w	ip, #0
 800403e:	d030      	beq.n	80040a2 <i2c_Thread+0x8e>
      HAL_I2C_Mem_Read_DMA( &hsm_i2c,  ((sensor_handle_t *)msg->sensorHandler)->I2C_address, ( uint16_t )msg->regAddr|autoInc, I2C_MEMADD_SIZE_8BIT, msg->dataPtr, msg->readSize);
 8004040:	f894 c00c 	ldrb.w	ip, [r4, #12]
 8004044:	7849      	ldrb	r1, [r1, #1]
 8004046:	9501      	str	r5, [sp, #4]
 8004048:	68a5      	ldr	r5, [r4, #8]
 800404a:	9500      	str	r5, [sp, #0]
 800404c:	ea42 020c 	orr.w	r2, r2, ip
 8004050:	f004 f864 	bl	800811c <HAL_I2C_Mem_Read_DMA>
    osSemaphoreWait(i2cThreadSem_id, osWaitForever);  
 8004054:	f04f 31ff 	mov.w	r1, #4294967295
 8004058:	f8d8 0000 	ldr.w	r0, [r8]
 800405c:	f00e fb16 	bl	801268c <osSemaphoreWait>
    osSemaphoreId * sem = ((sensor_handle_t *)msg->sensorHandler)->sem;
 8004060:	6823      	ldr	r3, [r4, #0]
    osPoolFree(i2cPool_id, msg);
 8004062:	6838      	ldr	r0, [r7, #0]
    osSemaphoreId * sem = ((sensor_handle_t *)msg->sensorHandler)->sem;
 8004064:	68dd      	ldr	r5, [r3, #12]
    osPoolFree(i2cPool_id, msg);
 8004066:	4621      	mov	r1, r4
 8004068:	f00e fbe6 	bl	8012838 <osPoolFree>
    osSemaphoreRelease(*sem);           
 800406c:	6828      	ldr	r0, [r5, #0]
 800406e:	f00e fb39 	bl	80126e4 <osSemaphoreRelease>
    evt = osMessageGet(i2cReqQueue_id, osWaitForever);
 8004072:	f8d9 1000 	ldr.w	r1, [r9]
 8004076:	f04f 32ff 	mov.w	r2, #4294967295
 800407a:	a803      	add	r0, sp, #12
 800407c:	f00e fc24 	bl	80128c8 <osMessageGet>
    SM_Message_t * msg = evt.value.p;
 8004080:	9c04      	ldr	r4, [sp, #16]
    if (msg->sensorHandler->WhoAmI == 0xBCU && msg->readSize > 1)
 8004082:	6821      	ldr	r1, [r4, #0]
 8004084:	89e5      	ldrh	r5, [r4, #14]
 8004086:	780b      	ldrb	r3, [r1, #0]
 8004088:	2bbc      	cmp	r3, #188	; 0xbc
 800408a:	d1d1      	bne.n	8004030 <i2c_Thread+0x1c>
    if (msg->isRead)
 800408c:	f894 c004 	ldrb.w	ip, [r4, #4]
    uint8_t autoInc = 0;
 8004090:	2d01      	cmp	r5, #1
 8004092:	bf8c      	ite	hi
 8004094:	2280      	movhi	r2, #128	; 0x80
 8004096:	2200      	movls	r2, #0
      HAL_I2C_Mem_Read_DMA( &hsm_i2c,  ((sensor_handle_t *)msg->sensorHandler)->I2C_address, ( uint16_t )msg->regAddr|autoInc, I2C_MEMADD_SIZE_8BIT, msg->dataPtr, msg->readSize);
 8004098:	2301      	movs	r3, #1
 800409a:	4630      	mov	r0, r6
    if (msg->isRead)
 800409c:	f1bc 0f00 	cmp.w	ip, #0
 80040a0:	d1ce      	bne.n	8004040 <i2c_Thread+0x2c>
      HAL_I2C_Mem_Write_DMA( &hsm_i2c,  ((sensor_handle_t *)msg->sensorHandler)->I2C_address, ( uint16_t )msg->regAddr|autoInc, I2C_MEMADD_SIZE_8BIT, msg->dataPtr, msg->readSize);
 80040a2:	7b20      	ldrb	r0, [r4, #12]
 80040a4:	7849      	ldrb	r1, [r1, #1]
 80040a6:	9501      	str	r5, [sp, #4]
 80040a8:	68a5      	ldr	r5, [r4, #8]
 80040aa:	9500      	str	r5, [sp, #0]
 80040ac:	4302      	orrs	r2, r0
 80040ae:	2301      	movs	r3, #1
 80040b0:	4630      	mov	r0, r6
 80040b2:	f003 ff4b 	bl	8007f4c <HAL_I2C_Mem_Write_DMA>
 80040b6:	e7cd      	b.n	8004054 <i2c_Thread+0x40>
 80040b8:	20019958 	.word	0x20019958
 80040bc:	2001995c 	.word	0x2001995c
 80040c0:	20019aa0 	.word	0x20019aa0
 80040c4:	200199d8 	.word	0x200199d8

080040c8 <SM_I2C_MemTxCpltCallback>:
  osSemaphoreRelease(i2cThreadSem_id);    
 80040c8:	4b01      	ldr	r3, [pc, #4]	; (80040d0 <SM_I2C_MemTxCpltCallback+0x8>)
 80040ca:	6818      	ldr	r0, [r3, #0]
 80040cc:	f00e bb0a 	b.w	80126e4 <osSemaphoreRelease>
 80040d0:	200199d8 	.word	0x200199d8

080040d4 <SM_I2C_MemRxCpltCallback>:
{
 80040d4:	b508      	push	{r3, lr}
  osSemaphoreRelease(i2cThreadSem_id);    
 80040d6:	4b06      	ldr	r3, [pc, #24]	; (80040f0 <SM_I2C_MemRxCpltCallback+0x1c>)
 80040d8:	6818      	ldr	r0, [r3, #0]
 80040da:	f00e fb03 	bl	80126e4 <osSemaphoreRelease>
  reg_after_release =  hsm_i2c.Instance->CR1 & 0x00000040;
 80040de:	4b05      	ldr	r3, [pc, #20]	; (80040f4 <SM_I2C_MemRxCpltCallback+0x20>)
 80040e0:	4a05      	ldr	r2, [pc, #20]	; (80040f8 <SM_I2C_MemRxCpltCallback+0x24>)
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040ea:	6053      	str	r3, [r2, #4]
}
 80040ec:	bd08      	pop	{r3, pc}
 80040ee:	bf00      	nop
 80040f0:	200199d8 	.word	0x200199d8
 80040f4:	2001995c 	.word	0x2001995c
 80040f8:	200019a8 	.word	0x200019a8

080040fc <SM_SPI_TxRxCpltCallback>:
  osSemaphoreRelease(spiThreadSem_id);    
 80040fc:	4b01      	ldr	r3, [pc, #4]	; (8004104 <SM_SPI_TxRxCpltCallback+0x8>)
 80040fe:	6818      	ldr	r0, [r3, #0]
 8004100:	f00e baf0 	b.w	80126e4 <osSemaphoreRelease>
 8004104:	200197c8 	.word	0x200197c8

08004108 <spi_Thread>:
{
 8004108:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  vTaskSetApplicationTaskTag( NULL, (TaskHookFunction_t)TASK_SM_SPI_DEBUG_PIN );
 800410c:	210a      	movs	r1, #10
{
 800410e:	b085      	sub	sp, #20
  vTaskSetApplicationTaskTag( NULL, (TaskHookFunction_t)TASK_SM_SPI_DEBUG_PIN );
 8004110:	2000      	movs	r0, #0
 8004112:	f00f ffc9 	bl	80140a8 <vTaskSetApplicationTaskTag>
 8004116:	f8df 9078 	ldr.w	r9, [pc, #120]	; 8004190 <spi_Thread+0x88>
 800411a:	f8df 8078 	ldr.w	r8, [pc, #120]	; 8004194 <spi_Thread+0x8c>
 800411e:	4f1a      	ldr	r7, [pc, #104]	; (8004188 <spi_Thread+0x80>)
    HAL_SPI_Transmit(&hsm_spi, &msg->regAddr, 1, 1000);
 8004120:	4e1a      	ldr	r6, [pc, #104]	; (800418c <spi_Thread+0x84>)
    evt = osMessageGet(spiReqQueue_id, osWaitForever); 
 8004122:	f8d9 1000 	ldr.w	r1, [r9]
 8004126:	a801      	add	r0, sp, #4
 8004128:	f04f 32ff 	mov.w	r2, #4294967295
 800412c:	f00e fbcc 	bl	80128c8 <osMessageGet>
    SM_Message_t * msg = evt.value.p;
 8004130:	9c02      	ldr	r4, [sp, #8]
    HAL_GPIO_WritePin(((sensor_handle_t *)msg->sensorHandler)->GPIOx, ((sensor_handle_t *)msg->sensorHandler)->GPIO_Pin , GPIO_PIN_RESET);
 8004132:	4625      	mov	r5, r4
 8004134:	2200      	movs	r2, #0
 8004136:	f855 3b0c 	ldr.w	r3, [r5], #12
 800413a:	8919      	ldrh	r1, [r3, #8]
 800413c:	6858      	ldr	r0, [r3, #4]
 800413e:	f003 f83d 	bl	80071bc <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hsm_spi, &msg->regAddr, 1, 1000);
 8004142:	4629      	mov	r1, r5
 8004144:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004148:	2201      	movs	r2, #1
 800414a:	4630      	mov	r0, r6
 800414c:	f007 f994 	bl	800b478 <HAL_SPI_Transmit>
    HAL_SPI_TransmitReceive_DMA(&hsm_spi, msg->dataPtr, msg->dataPtr, msg->readSize);
 8004150:	68a2      	ldr	r2, [r4, #8]
 8004152:	89e3      	ldrh	r3, [r4, #14]
 8004154:	4611      	mov	r1, r2
 8004156:	4630      	mov	r0, r6
 8004158:	f007 faaa 	bl	800b6b0 <HAL_SPI_TransmitReceive_DMA>
    osSemaphoreWait(spiThreadSem_id, osWaitForever);
 800415c:	f8d8 0000 	ldr.w	r0, [r8]
 8004160:	f04f 31ff 	mov.w	r1, #4294967295
 8004164:	f00e fa92 	bl	801268c <osSemaphoreWait>
    HAL_GPIO_WritePin(((sensor_handle_t *)msg->sensorHandler)->GPIOx, ((sensor_handle_t *)msg->sensorHandler)->GPIO_Pin , GPIO_PIN_SET); 
 8004168:	6823      	ldr	r3, [r4, #0]
 800416a:	2201      	movs	r2, #1
 800416c:	8919      	ldrh	r1, [r3, #8]
 800416e:	6858      	ldr	r0, [r3, #4]
 8004170:	f003 f824 	bl	80071bc <HAL_GPIO_WritePin>
    osSemaphoreId * sem = ((sensor_handle_t *)msg->sensorHandler)->sem;
 8004174:	6823      	ldr	r3, [r4, #0]
    osPoolFree(spiPool_id, msg);
 8004176:	6838      	ldr	r0, [r7, #0]
    osSemaphoreId * sem = ((sensor_handle_t *)msg->sensorHandler)->sem;
 8004178:	68dd      	ldr	r5, [r3, #12]
    osPoolFree(spiPool_id, msg);
 800417a:	4621      	mov	r1, r4
 800417c:	f00e fb5c 	bl	8012838 <osPoolFree>
    osSemaphoreRelease(*sem);
 8004180:	6828      	ldr	r0, [r5, #0]
 8004182:	f00e faaf 	bl	80126e4 <osSemaphoreRelease>
  for (;;)
 8004186:	e7cc      	b.n	8004122 <spi_Thread+0x1a>
 8004188:	200197c0 	.word	0x200197c0
 800418c:	200198cc 	.word	0x200198cc
 8004190:	200197bc 	.word	0x200197bc
 8004194:	200197c8 	.word	0x200197c8

08004198 <SM_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
static void SM_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004198:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  
  SM_I2C_SCL_PIN_CLK_ENABLE();
 800419c:	4c3a      	ldr	r4, [pc, #232]	; (8004288 <SM_I2C_MspInit+0xf0>)
  /* Peripheral clock enable */
  SM_I2Cx_CLK_ENABLE();
  
  /* I2C DMA Init */
  /* I2C_RX Init */
  hdma_sm_i2c_rx.Instance = SM_I2C_RX_DMA_CHANNEL;
 800419e:	4d3b      	ldr	r5, [pc, #236]	; (800428c <SM_I2C_MspInit+0xf4>)
  SM_I2C_SCL_PIN_CLK_ENABLE();
 80041a0:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80041a2:	f043 0320 	orr.w	r3, r3, #32
 80041a6:	64e3      	str	r3, [r4, #76]	; 0x4c
 80041a8:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
{
 80041aa:	b08d      	sub	sp, #52	; 0x34
  SM_I2C_SCL_PIN_CLK_ENABLE();
 80041ac:	f003 0320 	and.w	r3, r3, #32
 80041b0:	9303      	str	r3, [sp, #12]
 80041b2:	9b03      	ldr	r3, [sp, #12]
  SM_I2C_SDA_PIN_CLK_ENABLE();
 80041b4:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80041b6:	f043 0320 	orr.w	r3, r3, #32
 80041ba:	64e3      	str	r3, [r4, #76]	; 0x4c
 80041bc:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80041be:	f003 0320 	and.w	r3, r3, #32
 80041c2:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pin = SM_I2C_SCL_PIN;
 80041c4:	2202      	movs	r2, #2
 80041c6:	2312      	movs	r3, #18
 80041c8:	e9cd 2306 	strd	r2, r3, [sp, #24]
  HAL_GPIO_Init(SM_I2C_SCL_GPIO_PORT, &GPIO_InitStruct);	
 80041cc:	a906      	add	r1, sp, #24
  GPIO_InitStruct.Pin = SM_I2C_SCL_PIN;
 80041ce:	2201      	movs	r2, #1
 80041d0:	2303      	movs	r3, #3
  GPIO_InitStruct.Alternate = SM_I2C_SCL_AF;
 80041d2:	2704      	movs	r7, #4
{
 80041d4:	4606      	mov	r6, r0
  SM_I2C_SDA_PIN_CLK_ENABLE();
 80041d6:	9804      	ldr	r0, [sp, #16]
  HAL_GPIO_Init(SM_I2C_SCL_GPIO_PORT, &GPIO_InitStruct);	
 80041d8:	482d      	ldr	r0, [pc, #180]	; (8004290 <SM_I2C_MspInit+0xf8>)
  GPIO_InitStruct.Alternate = SM_I2C_SCL_AF;
 80041da:	970a      	str	r7, [sp, #40]	; 0x28
  GPIO_InitStruct.Pin = SM_I2C_SCL_PIN;
 80041dc:	e9cd 2308 	strd	r2, r3, [sp, #32]
  HAL_GPIO_Init(SM_I2C_SCL_GPIO_PORT, &GPIO_InitStruct);	
 80041e0:	f002 fec6 	bl	8006f70 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = SM_I2C_SDA_PIN;
 80041e4:	2301      	movs	r3, #1
  HAL_GPIO_Init(SM_I2C_SDA_GPIO_PORT, &GPIO_InitStruct);
 80041e6:	482a      	ldr	r0, [pc, #168]	; (8004290 <SM_I2C_MspInit+0xf8>)
  GPIO_InitStruct.Pin = SM_I2C_SDA_PIN;
 80041e8:	9306      	str	r3, [sp, #24]
  HAL_GPIO_Init(SM_I2C_SDA_GPIO_PORT, &GPIO_InitStruct);
 80041ea:	a906      	add	r1, sp, #24
  GPIO_InitStruct.Alternate = SM_I2C_SDA_AF;
 80041ec:	970a      	str	r7, [sp, #40]	; 0x28
  HAL_GPIO_Init(SM_I2C_SDA_GPIO_PORT, &GPIO_InitStruct);
 80041ee:	f002 febf 	bl	8006f70 <HAL_GPIO_Init>
  SM_I2Cx_CLK_ENABLE();
 80041f2:	6da3      	ldr	r3, [r4, #88]	; 0x58
  hdma_sm_i2c_rx.Instance = SM_I2C_RX_DMA_CHANNEL;
 80041f4:	4a27      	ldr	r2, [pc, #156]	; (8004294 <SM_I2C_MspInit+0xfc>)
  SM_I2Cx_CLK_ENABLE();
 80041f6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80041fa:	65a3      	str	r3, [r4, #88]	; 0x58
 80041fc:	6da3      	ldr	r3, [r4, #88]	; 0x58
  hdma_sm_i2c_rx.Instance = SM_I2C_RX_DMA_CHANNEL;
 80041fe:	602a      	str	r2, [r5, #0]
  SM_I2Cx_CLK_ENABLE();
 8004200:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004204:	9305      	str	r3, [sp, #20]
  hdma_sm_i2c_rx.Init.Request = SM_I2C_RX_DMA_REQUEST;
 8004206:	2212      	movs	r2, #18
  hdma_sm_i2c_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004208:	2300      	movs	r3, #0
  hdma_sm_i2c_rx.Init.PeriphInc = DMA_PINC_DISABLE;
  hdma_sm_i2c_rx.Init.MemInc = DMA_MINC_ENABLE;
 800420a:	f04f 0980 	mov.w	r9, #128	; 0x80
  hdma_sm_i2c_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
  hdma_sm_i2c_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
  hdma_sm_i2c_rx.Init.Mode = DMA_NORMAL;
  hdma_sm_i2c_rx.Init.Priority = DMA_PRIORITY_HIGH;
 800420e:	f44f 5800 	mov.w	r8, #8192	; 0x2000
  if (HAL_DMA_Init(&hdma_sm_i2c_rx) != HAL_OK)
 8004212:	4628      	mov	r0, r5
  hdma_sm_i2c_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004214:	e9c5 2301 	strd	r2, r3, [r5, #4]
  hdma_sm_i2c_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004218:	e9c5 3305 	strd	r3, r3, [r5, #20]
  SM_I2Cx_CLK_ENABLE();
 800421c:	9905      	ldr	r1, [sp, #20]
  hdma_sm_i2c_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800421e:	60eb      	str	r3, [r5, #12]
  hdma_sm_i2c_rx.Init.Mode = DMA_NORMAL;
 8004220:	61eb      	str	r3, [r5, #28]
  hdma_sm_i2c_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004222:	f8c5 9010 	str.w	r9, [r5, #16]
  hdma_sm_i2c_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8004226:	f8c5 8020 	str.w	r8, [r5, #32]
  if (HAL_DMA_Init(&hdma_sm_i2c_rx) != HAL_OK)
 800422a:	f002 fd0b 	bl	8006c44 <HAL_DMA_Init>
 800422e:	b100      	cbz	r0, 8004232 <SM_I2C_MspInit+0x9a>
  while (1)
 8004230:	e7fe      	b.n	8004230 <SM_I2C_MspInit+0x98>
  }
  
  __HAL_LINKDMA(hi2c,hdmarx,hdma_sm_i2c_rx);
  
  /* I2C_TX Init */
  hdma_sm_i2c_tx.Instance = SM_I2C_TX_DMA_CHANNEL;
 8004232:	4c19      	ldr	r4, [pc, #100]	; (8004298 <SM_I2C_MspInit+0x100>)
 8004234:	4919      	ldr	r1, [pc, #100]	; (800429c <SM_I2C_MspInit+0x104>)
  hdma_sm_i2c_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
  hdma_sm_i2c_tx.Init.PeriphInc = DMA_PINC_DISABLE;
  hdma_sm_i2c_tx.Init.MemInc = DMA_MINC_ENABLE;
  hdma_sm_i2c_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
  hdma_sm_i2c_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
  hdma_sm_i2c_tx.Init.Mode = DMA_NORMAL;
 8004236:	61e0      	str	r0, [r4, #28]
  hdma_sm_i2c_tx.Init.Request = SM_I2C_TX_DMA_REQUEST;
 8004238:	2213      	movs	r2, #19
  hdma_sm_i2c_tx.Init.MemInc = DMA_MINC_ENABLE;
 800423a:	e9c4 0903 	strd	r0, r9, [r4, #12]
  hdma_sm_i2c_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800423e:	e9c4 0005 	strd	r0, r0, [r4, #20]
  hdma_sm_i2c_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004242:	2310      	movs	r3, #16
  __HAL_LINKDMA(hi2c,hdmarx,hdma_sm_i2c_rx);
 8004244:	63f5      	str	r5, [r6, #60]	; 0x3c
  hdma_sm_i2c_tx.Init.Priority = DMA_PRIORITY_HIGH;
  if (HAL_DMA_Init(&hdma_sm_i2c_tx) != HAL_OK)
 8004246:	4620      	mov	r0, r4
  hdma_sm_i2c_tx.Init.Request = SM_I2C_TX_DMA_REQUEST;
 8004248:	e9c4 1200 	strd	r1, r2, [r4]
  __HAL_LINKDMA(hi2c,hdmarx,hdma_sm_i2c_rx);
 800424c:	62ae      	str	r6, [r5, #40]	; 0x28
  hdma_sm_i2c_tx.Init.Priority = DMA_PRIORITY_HIGH;
 800424e:	f8c4 8020 	str.w	r8, [r4, #32]
  hdma_sm_i2c_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004252:	60a3      	str	r3, [r4, #8]
  if (HAL_DMA_Init(&hdma_sm_i2c_tx) != HAL_OK)
 8004254:	f002 fcf6 	bl	8006c44 <HAL_DMA_Init>
 8004258:	4602      	mov	r2, r0
 800425a:	b100      	cbz	r0, 800425e <SM_I2C_MspInit+0xc6>
  while (1)
 800425c:	e7fe      	b.n	800425c <SM_I2C_MspInit+0xc4>
  }
  
  __HAL_LINKDMA(hi2c,hdmatx,hdma_sm_i2c_tx);
  
  /* I2C2 interrupt Init */
  HAL_NVIC_SetPriority(I2C2_EV_IRQn, 4, 0); /*defines*/
 800425e:	4639      	mov	r1, r7
 8004260:	9001      	str	r0, [sp, #4]
  __HAL_LINKDMA(hi2c,hdmatx,hdma_sm_i2c_tx);
 8004262:	63b4      	str	r4, [r6, #56]	; 0x38
  HAL_NVIC_SetPriority(I2C2_EV_IRQn, 4, 0); /*defines*/
 8004264:	2021      	movs	r0, #33	; 0x21
  __HAL_LINKDMA(hi2c,hdmatx,hdma_sm_i2c_tx);
 8004266:	62a6      	str	r6, [r4, #40]	; 0x28
  HAL_NVIC_SetPriority(I2C2_EV_IRQn, 4, 0); /*defines*/
 8004268:	f002 fc8c 	bl	8006b84 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 800426c:	2021      	movs	r0, #33	; 0x21
 800426e:	f002 fcc1 	bl	8006bf4 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(I2C2_ER_IRQn, 4, 0);
 8004272:	9a01      	ldr	r2, [sp, #4]
 8004274:	4639      	mov	r1, r7
 8004276:	2022      	movs	r0, #34	; 0x22
 8004278:	f002 fc84 	bl	8006b84 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);  
 800427c:	2022      	movs	r0, #34	; 0x22
 800427e:	f002 fcb9 	bl	8006bf4 <HAL_NVIC_EnableIRQ>
}
 8004282:	b00d      	add	sp, #52	; 0x34
 8004284:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004288:	40021000 	.word	0x40021000
 800428c:	2001982c 	.word	0x2001982c
 8004290:	48001400 	.word	0x48001400
 8004294:	40020030 	.word	0x40020030
 8004298:	200199e0 	.word	0x200199e0
 800429c:	40020044 	.word	0x40020044

080042a0 <SM_SPI_MspInit>:
{
 80042a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  SM_SPI_CLK_PIN_CLK_ENABLE(); 
 80042a4:	4c38      	ldr	r4, [pc, #224]	; (8004388 <SM_SPI_MspInit+0xe8>)
  hdma_sm_spi_rx.Instance = SM_SPI_RX_DMA_CHANNEL;
 80042a6:	4d39      	ldr	r5, [pc, #228]	; (800438c <SM_SPI_MspInit+0xec>)
  SM_SPI_CLK_PIN_CLK_ENABLE(); 
 80042a8:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80042aa:	f043 0308 	orr.w	r3, r3, #8
 80042ae:	64e3      	str	r3, [r4, #76]	; 0x4c
 80042b0:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
{
 80042b2:	b08a      	sub	sp, #40	; 0x28
  SM_SPI_CLK_PIN_CLK_ENABLE(); 
 80042b4:	f003 0308 	and.w	r3, r3, #8
 80042b8:	9300      	str	r3, [sp, #0]
 80042ba:	9b00      	ldr	r3, [sp, #0]
  SM_SPI_MISO_PIN_CLK_ENABLE(); 
 80042bc:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80042be:	f043 0308 	orr.w	r3, r3, #8
 80042c2:	64e3      	str	r3, [r4, #76]	; 0x4c
 80042c4:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80042c6:	f003 0308 	and.w	r3, r3, #8
 80042ca:	9301      	str	r3, [sp, #4]
 80042cc:	9b01      	ldr	r3, [sp, #4]
  SM_SPI_MOSI_PIN_CLK_ENABLE(); 
 80042ce:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80042d0:	f043 0304 	orr.w	r3, r3, #4
 80042d4:	64e3      	str	r3, [r4, #76]	; 0x4c
 80042d6:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80042d8:	f003 0304 	and.w	r3, r3, #4
 80042dc:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Pin = SM_SPI_CLK_PIN;
 80042de:	2202      	movs	r2, #2
 80042e0:	2302      	movs	r3, #2
  GPIO_InitStruct.Alternate = SM_SPI_CLK_AF;
 80042e2:	2705      	movs	r7, #5
  GPIO_InitStruct.Pin = SM_SPI_CLK_PIN;
 80042e4:	e9cd 2304 	strd	r2, r3, [sp, #16]
  HAL_GPIO_Init(SM_SPI_CLK_GPIO_PORT, &GPIO_InitStruct);
 80042e8:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Pin = SM_SPI_CLK_PIN;
 80042ea:	2200      	movs	r2, #0
 80042ec:	2303      	movs	r3, #3
{
 80042ee:	4606      	mov	r6, r0
  SM_SPI_MOSI_PIN_CLK_ENABLE(); 
 80042f0:	9802      	ldr	r0, [sp, #8]
  HAL_GPIO_Init(SM_SPI_CLK_GPIO_PORT, &GPIO_InitStruct);
 80042f2:	4827      	ldr	r0, [pc, #156]	; (8004390 <SM_SPI_MspInit+0xf0>)
  GPIO_InitStruct.Alternate = SM_SPI_CLK_AF;
 80042f4:	9708      	str	r7, [sp, #32]
  GPIO_InitStruct.Pin = SM_SPI_CLK_PIN;
 80042f6:	e9cd 2306 	strd	r2, r3, [sp, #24]
  GPIO_InitStruct.Pin = SM_SPI_MISO_PIN;
 80042fa:	f04f 0808 	mov.w	r8, #8
  HAL_GPIO_Init(SM_SPI_CLK_GPIO_PORT, &GPIO_InitStruct);
 80042fe:	f002 fe37 	bl	8006f70 <HAL_GPIO_Init>
  HAL_GPIO_Init(SM_SPI_MISO_GPIO_PORT, &GPIO_InitStruct);
 8004302:	4823      	ldr	r0, [pc, #140]	; (8004390 <SM_SPI_MspInit+0xf0>)
  GPIO_InitStruct.Alternate = SM_SPI_MISO_AF;
 8004304:	9708      	str	r7, [sp, #32]
  HAL_GPIO_Init(SM_SPI_MISO_GPIO_PORT, &GPIO_InitStruct);
 8004306:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Pin = SM_SPI_MISO_PIN;
 8004308:	f8cd 8010 	str.w	r8, [sp, #16]
  HAL_GPIO_Init(SM_SPI_MISO_GPIO_PORT, &GPIO_InitStruct);
 800430c:	f002 fe30 	bl	8006f70 <HAL_GPIO_Init>
  HAL_GPIO_Init(SM_SPI_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8004310:	4820      	ldr	r0, [pc, #128]	; (8004394 <SM_SPI_MspInit+0xf4>)
  GPIO_InitStruct.Alternate = SM_SPI_MOSI_AF;
 8004312:	9708      	str	r7, [sp, #32]
  HAL_GPIO_Init(SM_SPI_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8004314:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Pin = SM_SPI_MOSI_PIN;
 8004316:	f8cd 8010 	str.w	r8, [sp, #16]
  HAL_GPIO_Init(SM_SPI_MOSI_GPIO_PORT, &GPIO_InitStruct);
 800431a:	f002 fe29 	bl	8006f70 <HAL_GPIO_Init>
  SM_SPIx_CLK_ENABLE();
 800431e:	6da3      	ldr	r3, [r4, #88]	; 0x58
  hdma_sm_spi_rx.Instance = SM_SPI_RX_DMA_CHANNEL;
 8004320:	4a1d      	ldr	r2, [pc, #116]	; (8004398 <SM_SPI_MspInit+0xf8>)
  SM_SPIx_CLK_ENABLE();
 8004322:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004326:	65a3      	str	r3, [r4, #88]	; 0x58
 8004328:	6da3      	ldr	r3, [r4, #88]	; 0x58
  hdma_sm_spi_rx.Instance = SM_SPI_RX_DMA_CHANNEL;
 800432a:	602a      	str	r2, [r5, #0]
  SM_SPIx_CLK_ENABLE();
 800432c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004330:	9303      	str	r3, [sp, #12]
  hdma_sm_spi_rx.Init.Request = SM_SPI_RX_DMA_REQUEST;
 8004332:	220c      	movs	r2, #12
  hdma_sm_spi_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004334:	2300      	movs	r3, #0
  hdma_sm_spi_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004336:	2780      	movs	r7, #128	; 0x80
  if (HAL_DMA_Init(&hdma_sm_spi_rx) != HAL_OK)
 8004338:	4628      	mov	r0, r5
  hdma_sm_spi_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800433a:	e9c5 2301 	strd	r2, r3, [r5, #4]
  hdma_sm_spi_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800433e:	e9c5 3305 	strd	r3, r3, [r5, #20]
  hdma_sm_spi_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004342:	e9c5 3307 	strd	r3, r3, [r5, #28]
  SM_SPIx_CLK_ENABLE();
 8004346:	9903      	ldr	r1, [sp, #12]
  hdma_sm_spi_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004348:	60eb      	str	r3, [r5, #12]
  hdma_sm_spi_rx.Init.MemInc = DMA_MINC_ENABLE;
 800434a:	612f      	str	r7, [r5, #16]
  if (HAL_DMA_Init(&hdma_sm_spi_rx) != HAL_OK)
 800434c:	f002 fc7a 	bl	8006c44 <HAL_DMA_Init>
 8004350:	b100      	cbz	r0, 8004354 <SM_SPI_MspInit+0xb4>
  while (1)
 8004352:	e7fe      	b.n	8004352 <SM_SPI_MspInit+0xb2>
  hdma_sm_spi_tx.Instance = SM_SPI_TX_DMA_CHANNEL;
 8004354:	4c11      	ldr	r4, [pc, #68]	; (800439c <SM_SPI_MspInit+0xfc>)
 8004356:	f8df c048 	ldr.w	ip, [pc, #72]	; 80043a0 <SM_SPI_MspInit+0x100>
  __HAL_LINKDMA(hspi,hdmarx,hdma_sm_spi_rx);
 800435a:	65b5      	str	r5, [r6, #88]	; 0x58
  hdma_sm_spi_tx.Init.MemInc = DMA_MINC_ENABLE;
 800435c:	e9c4 0703 	strd	r0, r7, [r4, #12]
  hdma_sm_spi_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004360:	e9c4 0005 	strd	r0, r0, [r4, #20]
  hdma_sm_spi_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004364:	e9c4 0007 	strd	r0, r0, [r4, #28]
  hdma_sm_spi_tx.Init.Request = SM_SPI_TX_DMA_REQUEST;
 8004368:	210d      	movs	r1, #13
  hdma_sm_spi_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800436a:	2210      	movs	r2, #16
  if (HAL_DMA_Init(&hdma_sm_spi_tx) != HAL_OK)
 800436c:	4620      	mov	r0, r4
  hdma_sm_spi_tx.Init.Request = SM_SPI_TX_DMA_REQUEST;
 800436e:	e9c4 c100 	strd	ip, r1, [r4]
  __HAL_LINKDMA(hspi,hdmarx,hdma_sm_spi_rx);
 8004372:	62ae      	str	r6, [r5, #40]	; 0x28
  hdma_sm_spi_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004374:	60a2      	str	r2, [r4, #8]
  if (HAL_DMA_Init(&hdma_sm_spi_tx) != HAL_OK)
 8004376:	f002 fc65 	bl	8006c44 <HAL_DMA_Init>
 800437a:	b100      	cbz	r0, 800437e <SM_SPI_MspInit+0xde>
  while (1)
 800437c:	e7fe      	b.n	800437c <SM_SPI_MspInit+0xdc>
  __HAL_LINKDMA(hspi,hdmatx,hdma_sm_spi_tx);
 800437e:	6574      	str	r4, [r6, #84]	; 0x54
 8004380:	62a6      	str	r6, [r4, #40]	; 0x28
}
 8004382:	b00a      	add	sp, #40	; 0x28
 8004384:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004388:	40021000 	.word	0x40021000
 800438c:	200197cc 	.word	0x200197cc
 8004390:	48000c00 	.word	0x48000c00
 8004394:	48000800 	.word	0x48000800
 8004398:	40020008 	.word	0x40020008
 800439c:	20019a40 	.word	0x20019a40
 80043a0:	4002001c 	.word	0x4002001c

080043a4 <SM_OS_Init>:
{
 80043a4:	b5f0      	push	{r4, r5, r6, r7, lr}
  spiThreadSem_id = osSemaphoreCreate(osSemaphore(spiThreadSem), 1);
 80043a6:	4c2a      	ldr	r4, [pc, #168]	; (8004450 <SM_OS_Init+0xac>)
  spiReqQueue_id = osMessageCreate(osMessageQ(spireqqueue), NULL);
 80043a8:	4d2a      	ldr	r5, [pc, #168]	; (8004454 <SM_OS_Init+0xb0>)
{
 80043aa:	b08b      	sub	sp, #44	; 0x2c
  spiThreadSem_id = osSemaphoreCreate(osSemaphore(spiThreadSem), 1);
 80043ac:	4620      	mov	r0, r4
 80043ae:	2101      	movs	r1, #1
 80043b0:	f00e f958 	bl	8012664 <osSemaphoreCreate>
 80043b4:	4b28      	ldr	r3, [pc, #160]	; (8004458 <SM_OS_Init+0xb4>)
  osSemaphoreWait(spiThreadSem_id,osWaitForever);
 80043b6:	f04f 31ff 	mov.w	r1, #4294967295
  spiThreadSem_id = osSemaphoreCreate(osSemaphore(spiThreadSem), 1);
 80043ba:	6018      	str	r0, [r3, #0]
  osSemaphoreWait(spiThreadSem_id,osWaitForever);
 80043bc:	f00e f966 	bl	801268c <osSemaphoreWait>
  i2cThreadSem_id = osSemaphoreCreate(osSemaphore(i2cThreadSem), 1);
 80043c0:	1d20      	adds	r0, r4, #4
 80043c2:	2101      	movs	r1, #1
 80043c4:	f00e f94e 	bl	8012664 <osSemaphoreCreate>
 80043c8:	4b24      	ldr	r3, [pc, #144]	; (800445c <SM_OS_Init+0xb8>)
  osSemaphoreWait(i2cThreadSem_id,osWaitForever);    
 80043ca:	f04f 31ff 	mov.w	r1, #4294967295
  i2cThreadSem_id = osSemaphoreCreate(osSemaphore(i2cThreadSem), 1);
 80043ce:	6018      	str	r0, [r3, #0]
  osSemaphoreWait(i2cThreadSem_id,osWaitForever);    
 80043d0:	f00e f95c 	bl	801268c <osSemaphoreWait>
  spiPool_id = osPoolCreate(osPool(spiPool));  
 80043d4:	f104 0008 	add.w	r0, r4, #8
 80043d8:	f00e f9ac 	bl	8012734 <osPoolCreate>
 80043dc:	4b20      	ldr	r3, [pc, #128]	; (8004460 <SM_OS_Init+0xbc>)
 80043de:	4602      	mov	r2, r0
  i2cPool_id = osPoolCreate(osPool(i2cPool));    
 80043e0:	f104 0014 	add.w	r0, r4, #20
  spiPool_id = osPoolCreate(osPool(spiPool));  
 80043e4:	601a      	str	r2, [r3, #0]
  i2cPool_id = osPoolCreate(osPool(i2cPool));    
 80043e6:	f00e f9a5 	bl	8012734 <osPoolCreate>
 80043ea:	4b1e      	ldr	r3, [pc, #120]	; (8004464 <SM_OS_Init+0xc0>)
 80043ec:	4602      	mov	r2, r0
  spiReqQueue_id = osMessageCreate(osMessageQ(spireqqueue), NULL);
 80043ee:	2100      	movs	r1, #0
 80043f0:	f104 0020 	add.w	r0, r4, #32
  i2cPool_id = osPoolCreate(osPool(i2cPool));    
 80043f4:	601a      	str	r2, [r3, #0]
  spiReqQueue_id = osMessageCreate(osMessageQ(spireqqueue), NULL);
 80043f6:	f00e fa35 	bl	8012864 <osMessageCreate>
  i2cReqQueue_id = osMessageCreate(osMessageQ(i2creqqueue), NULL);
 80043fa:	2100      	movs	r1, #0
  spiReqQueue_id = osMessageCreate(osMessageQ(spireqqueue), NULL);
 80043fc:	4603      	mov	r3, r0
  i2cReqQueue_id = osMessageCreate(osMessageQ(i2creqqueue), NULL);
 80043fe:	f104 0028 	add.w	r0, r4, #40	; 0x28
  spiReqQueue_id = osMessageCreate(osMessageQ(spireqqueue), NULL);
 8004402:	602b      	str	r3, [r5, #0]
  i2cReqQueue_id = osMessageCreate(osMessageQ(i2creqqueue), NULL);
 8004404:	f00e fa2e 	bl	8012864 <osMessageCreate>
 8004408:	4b17      	ldr	r3, [pc, #92]	; (8004468 <SM_OS_Init+0xc4>)
  vQueueAddToRegistry( spiReqQueue_id, "spiReqQueue_id" );
 800440a:	4918      	ldr	r1, [pc, #96]	; (800446c <SM_OS_Init+0xc8>)
  i2cReqQueue_id = osMessageCreate(osMessageQ(i2creqqueue), NULL);
 800440c:	4602      	mov	r2, r0
  osThreadDef(SPI_THREAD, spi_Thread, SPI_RD_THREAD_PRIO, 1, configMINIMAL_STACK_SIZE);
 800440e:	f104 0730 	add.w	r7, r4, #48	; 0x30
  vQueueAddToRegistry( spiReqQueue_id, "spiReqQueue_id" );
 8004412:	6828      	ldr	r0, [r5, #0]
  i2cReqQueue_id = osMessageCreate(osMessageQ(i2creqqueue), NULL);
 8004414:	601a      	str	r2, [r3, #0]
  vQueueAddToRegistry( spiReqQueue_id, "spiReqQueue_id" );
 8004416:	f00f f98f 	bl	8013738 <vQueueAddToRegistry>
  osThreadDef(SPI_THREAD, spi_Thread, SPI_RD_THREAD_PRIO, 1, configMINIMAL_STACK_SIZE);
 800441a:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800441c:	466e      	mov	r6, sp
  osThreadDef(I2C_THREAD, i2c_Thread, I2C_RD_THREAD_PRIO, 1, configMINIMAL_STACK_SIZE);
 800441e:	3444      	adds	r4, #68	; 0x44
  osThreadDef(SPI_THREAD, spi_Thread, SPI_RD_THREAD_PRIO, 1, configMINIMAL_STACK_SIZE);
 8004420:	c60f      	stmia	r6!, {r0, r1, r2, r3}
  osThreadDef(I2C_THREAD, i2c_Thread, I2C_RD_THREAD_PRIO, 1, configMINIMAL_STACK_SIZE);
 8004422:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004424:	ad05      	add	r5, sp, #20
 8004426:	c50f      	stmia	r5!, {r0, r1, r2, r3}
  osThreadDef(SPI_THREAD, spi_Thread, SPI_RD_THREAD_PRIO, 1, configMINIMAL_STACK_SIZE);
 8004428:	683a      	ldr	r2, [r7, #0]
  osThreadDef(I2C_THREAD, i2c_Thread, I2C_RD_THREAD_PRIO, 1, configMINIMAL_STACK_SIZE);
 800442a:	6823      	ldr	r3, [r4, #0]
  osThreadDef(SPI_THREAD, spi_Thread, SPI_RD_THREAD_PRIO, 1, configMINIMAL_STACK_SIZE);
 800442c:	6032      	str	r2, [r6, #0]
  spiThreadId = osThreadCreate(osThread(SPI_THREAD), NULL);
 800442e:	2100      	movs	r1, #0
 8004430:	4668      	mov	r0, sp
  osThreadDef(I2C_THREAD, i2c_Thread, I2C_RD_THREAD_PRIO, 1, configMINIMAL_STACK_SIZE);
 8004432:	602b      	str	r3, [r5, #0]
  spiThreadId = osThreadCreate(osThread(SPI_THREAD), NULL);
 8004434:	f00e f8fe 	bl	8012634 <osThreadCreate>
 8004438:	4b0d      	ldr	r3, [pc, #52]	; (8004470 <SM_OS_Init+0xcc>)
 800443a:	4602      	mov	r2, r0
  i2cThreadId = osThreadCreate(osThread(I2C_THREAD), NULL);  
 800443c:	2100      	movs	r1, #0
 800443e:	a805      	add	r0, sp, #20
  spiThreadId = osThreadCreate(osThread(SPI_THREAD), NULL);
 8004440:	601a      	str	r2, [r3, #0]
  i2cThreadId = osThreadCreate(osThread(I2C_THREAD), NULL);  
 8004442:	f00e f8f7 	bl	8012634 <osThreadCreate>
 8004446:	4b0b      	ldr	r3, [pc, #44]	; (8004474 <SM_OS_Init+0xd0>)
 8004448:	6018      	str	r0, [r3, #0]
}
 800444a:	b00b      	add	sp, #44	; 0x2c
 800444c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800444e:	bf00      	nop
 8004450:	0801b838 	.word	0x0801b838
 8004454:	200197bc 	.word	0x200197bc
 8004458:	200197c8 	.word	0x200197c8
 800445c:	200199d8 	.word	0x200199d8
 8004460:	200197c0 	.word	0x200197c0
 8004464:	20019958 	.word	0x20019958
 8004468:	20019aa0 	.word	0x20019aa0
 800446c:	0801c224 	.word	0x0801c224
 8004470:	200197c4 	.word	0x200197c4
 8004474:	200199dc 	.word	0x200199dc

08004478 <SM_SPI_Write>:
{
 8004478:	b570      	push	{r4, r5, r6, lr}
 800447a:	4604      	mov	r4, r0
 800447c:	b082      	sub	sp, #8
 800447e:	461d      	mov	r5, r3
 8004480:	f88d 1007 	strb.w	r1, [sp, #7]
 8004484:	4616      	mov	r6, r2
  taskENTER_CRITICAL();
 8004486:	f010 fb7d 	bl	8014b84 <vPortEnterCritical>
  if (((sensor_handle_t *)handle)->WhoAmI == IIS2DH_ID && len > 1) 
 800448a:	7823      	ldrb	r3, [r4, #0]
 800448c:	2b33      	cmp	r3, #51	; 0x33
 800448e:	d01d      	beq.n	80044cc <SM_SPI_Write+0x54>
  HAL_GPIO_WritePin(((sensor_handle_t *)handle)->GPIOx  , ((sensor_handle_t *)handle)->GPIO_Pin , GPIO_PIN_RESET);
 8004490:	8921      	ldrh	r1, [r4, #8]
 8004492:	6860      	ldr	r0, [r4, #4]
 8004494:	2200      	movs	r2, #0
 8004496:	f002 fe91 	bl	80071bc <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hsm_spi, &reg, 1, 1000);
 800449a:	f10d 0107 	add.w	r1, sp, #7
 800449e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80044a2:	2201      	movs	r2, #1
 80044a4:	480e      	ldr	r0, [pc, #56]	; (80044e0 <SM_SPI_Write+0x68>)
 80044a6:	f006 ffe7 	bl	800b478 <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hsm_spi, data, len, 1000);  
 80044aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80044ae:	462a      	mov	r2, r5
 80044b0:	4631      	mov	r1, r6
 80044b2:	480b      	ldr	r0, [pc, #44]	; (80044e0 <SM_SPI_Write+0x68>)
 80044b4:	f006 ffe0 	bl	800b478 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(((sensor_handle_t *)handle)->GPIOx  , ((sensor_handle_t *)handle)->GPIO_Pin , GPIO_PIN_SET);
 80044b8:	6860      	ldr	r0, [r4, #4]
 80044ba:	8921      	ldrh	r1, [r4, #8]
 80044bc:	2201      	movs	r2, #1
 80044be:	f002 fe7d 	bl	80071bc <HAL_GPIO_WritePin>
  taskEXIT_CRITICAL();
 80044c2:	f010 fb81 	bl	8014bc8 <vPortExitCritical>
}
 80044c6:	2000      	movs	r0, #0
 80044c8:	b002      	add	sp, #8
 80044ca:	bd70      	pop	{r4, r5, r6, pc}
  if (((sensor_handle_t *)handle)->WhoAmI == IIS2DH_ID && len > 1) 
 80044cc:	2d01      	cmp	r5, #1
 80044ce:	d9df      	bls.n	8004490 <SM_SPI_Write+0x18>
    reg = reg|0x40;
 80044d0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80044d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80044d8:	f88d 3007 	strb.w	r3, [sp, #7]
 80044dc:	e7d8      	b.n	8004490 <SM_SPI_Write+0x18>
 80044de:	bf00      	nop
 80044e0:	200198cc 	.word	0x200198cc

080044e4 <SM_SPI_Read_Os>:
{
 80044e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  msg = osPoolAlloc(spiPool_id);
 80044e6:	4c12      	ldr	r4, [pc, #72]	; (8004530 <SM_SPI_Read_Os+0x4c>)
{
 80044e8:	4605      	mov	r5, r0
  msg = osPoolAlloc(spiPool_id);
 80044ea:	6820      	ldr	r0, [r4, #0]
{
 80044ec:	461e      	mov	r6, r3
 80044ee:	460c      	mov	r4, r1
 80044f0:	4617      	mov	r7, r2
  msg = osPoolAlloc(spiPool_id);
 80044f2:	f00e f959 	bl	80127a8 <osPoolAlloc>
  if (((sensor_handle_t *)handle)->WhoAmI == IIS2DH_ID && len > 1) 
 80044f6:	782b      	ldrb	r3, [r5, #0]
 80044f8:	2b33      	cmp	r3, #51	; 0x33
  msg = osPoolAlloc(spiPool_id);
 80044fa:	4601      	mov	r1, r0
  if (((sensor_handle_t *)handle)->WhoAmI == IIS2DH_ID && len > 1) 
 80044fc:	d103      	bne.n	8004506 <SM_SPI_Read_Os+0x22>
 80044fe:	2e01      	cmp	r6, #1
 8004500:	bf88      	it	hi
 8004502:	f044 0440 	orrhi.w	r4, r4, #64	; 0x40
  osMessagePut(spiReqQueue_id, (uint32_t)(msg), osWaitForever);  
 8004506:	4b0b      	ldr	r3, [pc, #44]	; (8004534 <SM_SPI_Read_Os+0x50>)
  msg->sensorHandler = handle;
 8004508:	600d      	str	r5, [r1, #0]
  msg->regAddr = reg | 0x80 | autoInc;
 800450a:	f064 047f 	orn	r4, r4, #127	; 0x7f
 800450e:	730c      	strb	r4, [r1, #12]
  msg->readSize = len;
 8004510:	81ce      	strh	r6, [r1, #14]
  msg->dataPtr = data;
 8004512:	608f      	str	r7, [r1, #8]
  osMessagePut(spiReqQueue_id, (uint32_t)(msg), osWaitForever);  
 8004514:	f04f 32ff 	mov.w	r2, #4294967295
 8004518:	6818      	ldr	r0, [r3, #0]
 800451a:	f00e f9a9 	bl	8012870 <osMessagePut>
  osSemaphoreWait(*(((sensor_handle_t *)handle)->sem), osWaitForever);    
 800451e:	68eb      	ldr	r3, [r5, #12]
 8004520:	f04f 31ff 	mov.w	r1, #4294967295
 8004524:	6818      	ldr	r0, [r3, #0]
 8004526:	f00e f8b1 	bl	801268c <osSemaphoreWait>
}
 800452a:	2000      	movs	r0, #0
 800452c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800452e:	bf00      	nop
 8004530:	200197c0 	.word	0x200197c0
 8004534:	200197bc 	.word	0x200197bc

08004538 <SM_SPI_Write_Os>:
{
 8004538:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800453a:	4604      	mov	r4, r0
  if (((sensor_handle_t *)handle)->WhoAmI == IIS2DH_ID && len > 1) 
 800453c:	7800      	ldrb	r0, [r0, #0]
 800453e:	2833      	cmp	r0, #51	; 0x33
{
 8004540:	460d      	mov	r5, r1
 8004542:	4617      	mov	r7, r2
 8004544:	461e      	mov	r6, r3
  if (((sensor_handle_t *)handle)->WhoAmI == IIS2DH_ID && len > 1) 
 8004546:	d103      	bne.n	8004550 <SM_SPI_Write_Os+0x18>
 8004548:	2b01      	cmp	r3, #1
 800454a:	bf88      	it	hi
 800454c:	f041 0540 	orrhi.w	r5, r1, #64	; 0x40
  msg = osPoolAlloc(spiPool_id);
 8004550:	4b0b      	ldr	r3, [pc, #44]	; (8004580 <SM_SPI_Write_Os+0x48>)
 8004552:	6818      	ldr	r0, [r3, #0]
 8004554:	f00e f928 	bl	80127a8 <osPoolAlloc>
  osMessagePut(spiReqQueue_id, (uint32_t)(msg), osWaitForever);  
 8004558:	4b0a      	ldr	r3, [pc, #40]	; (8004584 <SM_SPI_Write_Os+0x4c>)
  msg->sensorHandler = handle;
 800455a:	6004      	str	r4, [r0, #0]
  msg = osPoolAlloc(spiPool_id);
 800455c:	4601      	mov	r1, r0
  msg->regAddr = reg|autoInc ;
 800455e:	7305      	strb	r5, [r0, #12]
  msg->readSize = len;
 8004560:	81c6      	strh	r6, [r0, #14]
  msg->dataPtr = data;
 8004562:	6087      	str	r7, [r0, #8]
  osMessagePut(spiReqQueue_id, (uint32_t)(msg), osWaitForever);  
 8004564:	f04f 32ff 	mov.w	r2, #4294967295
 8004568:	6818      	ldr	r0, [r3, #0]
 800456a:	f00e f981 	bl	8012870 <osMessagePut>
  osSemaphoreWait(*(((sensor_handle_t *)handle)->sem), osWaitForever);    
 800456e:	68e3      	ldr	r3, [r4, #12]
 8004570:	f04f 31ff 	mov.w	r1, #4294967295
 8004574:	6818      	ldr	r0, [r3, #0]
 8004576:	f00e f889 	bl	801268c <osSemaphoreWait>
}
 800457a:	2000      	movs	r0, #0
 800457c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800457e:	bf00      	nop
 8004580:	200197c0 	.word	0x200197c0
 8004584:	200197bc 	.word	0x200197bc

08004588 <SM_I2C_Read_Os>:
{
 8004588:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  msg = osPoolAlloc(i2cPool_id);
 800458a:	4d0e      	ldr	r5, [pc, #56]	; (80045c4 <SM_I2C_Read_Os+0x3c>)
{
 800458c:	4604      	mov	r4, r0
  msg = osPoolAlloc(i2cPool_id);
 800458e:	6828      	ldr	r0, [r5, #0]
{
 8004590:	460f      	mov	r7, r1
 8004592:	4615      	mov	r5, r2
 8004594:	461e      	mov	r6, r3
  msg = osPoolAlloc(i2cPool_id);
 8004596:	f00e f907 	bl	80127a8 <osPoolAlloc>
  osMessagePut(i2cReqQueue_id, (uint32_t)(msg), osWaitForever); 
 800459a:	4b0b      	ldr	r3, [pc, #44]	; (80045c8 <SM_I2C_Read_Os+0x40>)
  msg->regAddr = reg ;
 800459c:	7307      	strb	r7, [r0, #12]
  msg->isRead = 1;
 800459e:	2201      	movs	r2, #1
  msg = osPoolAlloc(i2cPool_id);
 80045a0:	4601      	mov	r1, r0
  msg->sensorHandler = handle;
 80045a2:	6004      	str	r4, [r0, #0]
  msg->readSize = len;
 80045a4:	81c6      	strh	r6, [r0, #14]
  msg->dataPtr = data;
 80045a6:	6085      	str	r5, [r0, #8]
  msg->isRead = 1;
 80045a8:	7102      	strb	r2, [r0, #4]
  osMessagePut(i2cReqQueue_id, (uint32_t)(msg), osWaitForever); 
 80045aa:	f04f 32ff 	mov.w	r2, #4294967295
 80045ae:	6818      	ldr	r0, [r3, #0]
 80045b0:	f00e f95e 	bl	8012870 <osMessagePut>
  osSemaphoreWait(*(((sensor_handle_t *)handle)->sem), osWaitForever);  
 80045b4:	68e3      	ldr	r3, [r4, #12]
 80045b6:	f04f 31ff 	mov.w	r1, #4294967295
 80045ba:	6818      	ldr	r0, [r3, #0]
 80045bc:	f00e f866 	bl	801268c <osSemaphoreWait>
}
 80045c0:	2000      	movs	r0, #0
 80045c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80045c4:	20019958 	.word	0x20019958
 80045c8:	20019aa0 	.word	0x20019aa0

080045cc <SM_I2C_Write_Os>:
{
 80045cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  msg = osPoolAlloc(i2cPool_id);
 80045ce:	4d0e      	ldr	r5, [pc, #56]	; (8004608 <SM_I2C_Write_Os+0x3c>)
{
 80045d0:	4604      	mov	r4, r0
  msg = osPoolAlloc(i2cPool_id);
 80045d2:	6828      	ldr	r0, [r5, #0]
{
 80045d4:	460f      	mov	r7, r1
 80045d6:	4615      	mov	r5, r2
 80045d8:	461e      	mov	r6, r3
  msg = osPoolAlloc(i2cPool_id);
 80045da:	f00e f8e5 	bl	80127a8 <osPoolAlloc>
  osMessagePut(i2cReqQueue_id, (uint32_t)(msg), osWaitForever); 
 80045de:	4b0b      	ldr	r3, [pc, #44]	; (800460c <SM_I2C_Write_Os+0x40>)
  msg->regAddr = reg ;
 80045e0:	7307      	strb	r7, [r0, #12]
  msg->isRead = 0;
 80045e2:	2700      	movs	r7, #0
  msg = osPoolAlloc(i2cPool_id);
 80045e4:	4601      	mov	r1, r0
  msg->sensorHandler = handle;
 80045e6:	6004      	str	r4, [r0, #0]
  msg->readSize = len;
 80045e8:	81c6      	strh	r6, [r0, #14]
  msg->dataPtr = data;
 80045ea:	6085      	str	r5, [r0, #8]
  msg->isRead = 0;
 80045ec:	7107      	strb	r7, [r0, #4]
  osMessagePut(i2cReqQueue_id, (uint32_t)(msg), osWaitForever); 
 80045ee:	f04f 32ff 	mov.w	r2, #4294967295
 80045f2:	6818      	ldr	r0, [r3, #0]
 80045f4:	f00e f93c 	bl	8012870 <osMessagePut>
  osSemaphoreWait(*(((sensor_handle_t *)handle)->sem), osWaitForever);  
 80045f8:	68e3      	ldr	r3, [r4, #12]
 80045fa:	f04f 31ff 	mov.w	r1, #4294967295
 80045fe:	6818      	ldr	r0, [r3, #0]
 8004600:	f00e f844 	bl	801268c <osSemaphoreWait>
}
 8004604:	4638      	mov	r0, r7
 8004606:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004608:	20019958 	.word	0x20019958
 800460c:	20019aa0 	.word	0x20019aa0

08004610 <SM_Peripheral_Init>:
{
 8004610:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8004614:	4d5e      	ldr	r5, [pc, #376]	; (8004790 <SM_Peripheral_Init+0x180>)
  hsm_i2c.Instance = SM_I2C_x;
 8004616:	4c5f      	ldr	r4, [pc, #380]	; (8004794 <SM_Peripheral_Init+0x184>)
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8004618:	6cab      	ldr	r3, [r5, #72]	; 0x48
 800461a:	f043 0304 	orr.w	r3, r3, #4
 800461e:	64ab      	str	r3, [r5, #72]	; 0x48
 8004620:	6cab      	ldr	r3, [r5, #72]	; 0x48
{
 8004622:	b085      	sub	sp, #20
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8004624:	f003 0304 	and.w	r3, r3, #4
 8004628:	9301      	str	r3, [sp, #4]
 800462a:	9b01      	ldr	r3, [sp, #4]
  SM_SPIx_DMA_CLK_ENABLE();
 800462c:	6cab      	ldr	r3, [r5, #72]	; 0x48
 800462e:	f043 0301 	orr.w	r3, r3, #1
 8004632:	64ab      	str	r3, [r5, #72]	; 0x48
 8004634:	6cab      	ldr	r3, [r5, #72]	; 0x48
 8004636:	f003 0301 	and.w	r3, r3, #1
 800463a:	9302      	str	r3, [sp, #8]
 800463c:	9b02      	ldr	r3, [sp, #8]
  SM_I2Cx_DMA_CLK_ENABLE();
 800463e:	6cab      	ldr	r3, [r5, #72]	; 0x48
 8004640:	f043 0301 	orr.w	r3, r3, #1
 8004644:	64ab      	str	r3, [r5, #72]	; 0x48
 8004646:	6cab      	ldr	r3, [r5, #72]	; 0x48
 8004648:	f003 0301 	and.w	r3, r3, #1
  HAL_NVIC_SetPriority(SM_I2C_TX_DMA_IRQn, 3, 0);
 800464c:	2200      	movs	r2, #0
 800464e:	2103      	movs	r1, #3
  SM_I2Cx_DMA_CLK_ENABLE();
 8004650:	9303      	str	r3, [sp, #12]
  HAL_NVIC_SetPriority(SM_I2C_TX_DMA_IRQn, 3, 0);
 8004652:	200e      	movs	r0, #14
  SM_I2Cx_DMA_CLK_ENABLE();
 8004654:	9b03      	ldr	r3, [sp, #12]
  HAL_NVIC_SetPriority(SM_I2C_TX_DMA_IRQn, 3, 0);
 8004656:	f002 fa95 	bl	8006b84 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SM_I2C_TX_DMA_IRQn);
 800465a:	200e      	movs	r0, #14
 800465c:	f002 faca 	bl	8006bf4 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(SM_I2C_RX_DMA_IRQn, 3, 0);
 8004660:	2200      	movs	r2, #0
 8004662:	2103      	movs	r1, #3
 8004664:	200d      	movs	r0, #13
 8004666:	f002 fa8d 	bl	8006b84 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SM_I2C_RX_DMA_IRQn);
 800466a:	200d      	movs	r0, #13
 800466c:	f002 fac2 	bl	8006bf4 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(SM_SPI_RX_DMA_IRQn, 3, 0);
 8004670:	2200      	movs	r2, #0
 8004672:	2103      	movs	r1, #3
 8004674:	200b      	movs	r0, #11
 8004676:	f002 fa85 	bl	8006b84 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SM_SPI_RX_DMA_IRQn);
 800467a:	200b      	movs	r0, #11
 800467c:	f002 faba 	bl	8006bf4 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(SM_SPI_TX_DMA_IRQn, 3, 0);
 8004680:	2200      	movs	r2, #0
 8004682:	2103      	movs	r1, #3
 8004684:	200c      	movs	r0, #12
 8004686:	f002 fa7d 	bl	8006b84 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SM_SPI_TX_DMA_IRQn);
 800468a:	200c      	movs	r0, #12
 800468c:	f002 fab2 	bl	8006bf4 <HAL_NVIC_EnableIRQ>
  hsm_i2c.Instance = SM_I2C_x;
 8004690:	4b41      	ldr	r3, [pc, #260]	; (8004798 <SM_Peripheral_Init+0x188>)
  hsm_i2c.Init.Timing = 0x00B03FDB;
 8004692:	4942      	ldr	r1, [pc, #264]	; (800479c <SM_Peripheral_Init+0x18c>)
  hsm_i2c.Instance = SM_I2C_x;
 8004694:	6023      	str	r3, [r4, #0]
  hsm_i2c.Init.Timing = 0x00B03FDB;
 8004696:	6061      	str	r1, [r4, #4]
  hsm_i2c.Init.OwnAddress1 = 0;
 8004698:	2300      	movs	r3, #0
  HAL_I2C_RegisterCallback(&hsm_i2c, HAL_I2C_MSPINIT_CB_ID, SM_I2C_MspInit);
 800469a:	4a41      	ldr	r2, [pc, #260]	; (80047a0 <SM_Peripheral_Init+0x190>)
  hsm_i2c.Init.OwnAddress1 = 0;
 800469c:	60a3      	str	r3, [r4, #8]
  hsm_i2c.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800469e:	2601      	movs	r6, #1
  HAL_I2C_RegisterCallback(&hsm_i2c, HAL_I2C_MSPINIT_CB_ID, SM_I2C_MspInit);
 80046a0:	4620      	mov	r0, r4
 80046a2:	2109      	movs	r1, #9
  hsm_i2c.Init.OwnAddress2 = 0;
 80046a4:	e9c4 3304 	strd	r3, r3, [r4, #16]
  hsm_i2c.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80046a8:	e9c4 3306 	strd	r3, r3, [r4, #24]
  hsm_i2c.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;    
 80046ac:	6223      	str	r3, [r4, #32]
  hsm_i2c.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80046ae:	60e6      	str	r6, [r4, #12]
  HAL_I2C_RegisterCallback(&hsm_i2c, HAL_I2C_MSPINIT_CB_ID, SM_I2C_MspInit);
 80046b0:	f003 fbf4 	bl	8007e9c <HAL_I2C_RegisterCallback>
  if (HAL_I2C_Init(&hsm_i2c) != HAL_OK)
 80046b4:	4620      	mov	r0, r4
 80046b6:	f003 fb6d 	bl	8007d94 <HAL_I2C_Init>
 80046ba:	b100      	cbz	r0, 80046be <SM_Peripheral_Init+0xae>
  while (1)
 80046bc:	e7fe      	b.n	80046bc <SM_Peripheral_Init+0xac>
  if (HAL_I2CEx_ConfigAnalogFilter(&hsm_i2c, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80046be:	4601      	mov	r1, r0
 80046c0:	4620      	mov	r0, r4
 80046c2:	f003 fe5b 	bl	800837c <HAL_I2CEx_ConfigAnalogFilter>
 80046c6:	b100      	cbz	r0, 80046ca <SM_Peripheral_Init+0xba>
  while (1)
 80046c8:	e7fe      	b.n	80046c8 <SM_Peripheral_Init+0xb8>
  if (HAL_I2CEx_ConfigDigitalFilter(&hsm_i2c, 0) != HAL_OK)
 80046ca:	4601      	mov	r1, r0
 80046cc:	4620      	mov	r0, r4
 80046ce:	f003 fe81 	bl	80083d4 <HAL_I2CEx_ConfigDigitalFilter>
 80046d2:	4607      	mov	r7, r0
 80046d4:	b100      	cbz	r0, 80046d8 <SM_Peripheral_Init+0xc8>
  while (1)
 80046d6:	e7fe      	b.n	80046d6 <SM_Peripheral_Init+0xc6>
  HAL_I2C_RegisterCallback(&hsm_i2c, HAL_I2C_MEM_RX_COMPLETE_CB_ID, SM_I2C_MemRxCpltCallback);
 80046d8:	4a32      	ldr	r2, [pc, #200]	; (80047a4 <SM_Peripheral_Init+0x194>)
  hsm_spi.Instance = SM_SPI_x;
 80046da:	f8df 80e8 	ldr.w	r8, [pc, #232]	; 80047c4 <SM_Peripheral_Init+0x1b4>
  HAL_I2C_RegisterCallback(&hsm_i2c, HAL_I2C_MEM_RX_COMPLETE_CB_ID, SM_I2C_MemRxCpltCallback);
 80046de:	2106      	movs	r1, #6
 80046e0:	4620      	mov	r0, r4
 80046e2:	f003 fbdb 	bl	8007e9c <HAL_I2C_RegisterCallback>
  HAL_I2C_RegisterCallback(&hsm_i2c, HAL_I2C_MEM_TX_COMPLETE_CB_ID, SM_I2C_MemTxCpltCallback);
 80046e6:	4a30      	ldr	r2, [pc, #192]	; (80047a8 <SM_Peripheral_Init+0x198>)
 80046e8:	2105      	movs	r1, #5
 80046ea:	4620      	mov	r0, r4
 80046ec:	f003 fbd6 	bl	8007e9c <HAL_I2C_RegisterCallback>
  HAL_I2C_RegisterCallback(&hsm_i2c, HAL_I2C_ERROR_CB_ID, SM_I2C_ErrorCallback);
 80046f0:	4a2e      	ldr	r2, [pc, #184]	; (80047ac <SM_Peripheral_Init+0x19c>)
 80046f2:	4620      	mov	r0, r4
 80046f4:	2107      	movs	r1, #7
 80046f6:	f003 fbd1 	bl	8007e9c <HAL_I2C_RegisterCallback>
  hsm_spi.Instance = SM_SPI_x;
 80046fa:	4c2d      	ldr	r4, [pc, #180]	; (80047b0 <SM_Peripheral_Init+0x1a0>)
  HAL_SPI_RegisterCallback(&hsm_spi, HAL_SPI_MSPINIT_CB_ID, SM_SPI_MspInit);
 80046fc:	4a2d      	ldr	r2, [pc, #180]	; (80047b4 <SM_Peripheral_Init+0x1a4>)
  hsm_spi.Instance = SM_SPI_x;
 80046fe:	f8c8 4000 	str.w	r4, [r8]
  hsm_spi.Init.Mode = SPI_MODE_MASTER;
 8004702:	f44f 7382 	mov.w	r3, #260	; 0x104
  hsm_spi.Init.DataSize = SPI_DATASIZE_8BIT;
 8004706:	f44f 60e0 	mov.w	r0, #1792	; 0x700
  hsm_spi.Init.NSS = SPI_NSS_SOFT;
 800470a:	f44f 7100 	mov.w	r1, #512	; 0x200
  hsm_spi.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16; /*SPI running @ 10 MHz */ /*stwin*/
 800470e:	2418      	movs	r4, #24
  hsm_spi.Init.Mode = SPI_MODE_MASTER;
 8004710:	f8c8 3004 	str.w	r3, [r8, #4]
  hsm_spi.Init.DataSize = SPI_DATASIZE_8BIT;
 8004714:	f8c8 000c 	str.w	r0, [r8, #12]
  hsm_spi.Init.CRCPolynomial = 7;
 8004718:	2307      	movs	r3, #7
  hsm_spi.Init.NSS = SPI_NSS_SOFT;
 800471a:	f8c8 1018 	str.w	r1, [r8, #24]
  hsm_spi.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800471e:	f04f 0902 	mov.w	r9, #2
  HAL_SPI_RegisterCallback(&hsm_spi, HAL_SPI_MSPINIT_CB_ID, SM_SPI_MspInit);
 8004722:	2108      	movs	r1, #8
 8004724:	4640      	mov	r0, r8
  hsm_spi.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16; /*SPI running @ 10 MHz */ /*stwin*/
 8004726:	f8c8 401c 	str.w	r4, [r8, #28]
  hsm_spi.Init.CRCPolynomial = 7;
 800472a:	f8c8 302c 	str.w	r3, [r8, #44]	; 0x2c
  hsm_spi.Init.TIMode = SPI_TIMODE_DISABLE;
 800472e:	e9c8 7708 	strd	r7, r7, [r8, #32]
  hsm_spi.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8004732:	e9c8 770c 	strd	r7, r7, [r8, #48]	; 0x30
  hsm_spi.Init.Direction = SPI_DIRECTION_2LINES;
 8004736:	f8c8 7008 	str.w	r7, [r8, #8]
  hsm_spi.Init.CLKPhase = SPI_PHASE_2EDGE;
 800473a:	f8c8 6014 	str.w	r6, [r8, #20]
  hsm_spi.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800473e:	f8c8 7028 	str.w	r7, [r8, #40]	; 0x28
  hsm_spi.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8004742:	f8c8 9010 	str.w	r9, [r8, #16]
  HAL_SPI_RegisterCallback(&hsm_spi, HAL_SPI_MSPINIT_CB_ID, SM_SPI_MspInit);
 8004746:	f006 fe33 	bl	800b3b0 <HAL_SPI_RegisterCallback>
  if (HAL_SPI_Init(&hsm_spi) != HAL_OK)
 800474a:	4640      	mov	r0, r8
 800474c:	f006 fd9a 	bl	800b284 <HAL_SPI_Init>
 8004750:	4604      	mov	r4, r0
 8004752:	b100      	cbz	r0, 8004756 <SM_Peripheral_Init+0x146>
  while (1)
 8004754:	e7fe      	b.n	8004754 <SM_Peripheral_Init+0x144>
  HAL_SPI_RegisterCallback(&hsm_spi, HAL_SPI_TX_RX_COMPLETE_CB_ID, SM_SPI_TxRxCpltCallback);
 8004756:	4a18      	ldr	r2, [pc, #96]	; (80047b8 <SM_Peripheral_Init+0x1a8>)
 8004758:	4649      	mov	r1, r9
 800475a:	4640      	mov	r0, r8
 800475c:	f006 fe28 	bl	800b3b0 <HAL_SPI_RegisterCallback>

void SM_TIM_Init(void)
{
  SM_TIMx_CLK_ENABLE();
 8004760:	6dab      	ldr	r3, [r5, #88]	; 0x58
  /* Set TIMx instance */
  hsm_tim.Instance = SM_TIMx;
 8004762:	4816      	ldr	r0, [pc, #88]	; (80047bc <SM_Peripheral_Init+0x1ac>)
 8004764:	4a16      	ldr	r2, [pc, #88]	; (80047c0 <SM_Peripheral_Init+0x1b0>)
       + Prescaler = (SystemCoreClock/10000) - 1
       + ClockDivision = 0
       + Counter direction = Up
  */
  hsm_tim.Init.Period            = 0xFFFFFFFF;
  hsm_tim.Init.Prescaler         = 0;
 8004766:	6044      	str	r4, [r0, #4]
  SM_TIMx_CLK_ENABLE();
 8004768:	f043 0308 	orr.w	r3, r3, #8
 800476c:	65ab      	str	r3, [r5, #88]	; 0x58
 800476e:	6dab      	ldr	r3, [r5, #88]	; 0x58
  hsm_tim.Init.ClockDivision     = 0;
 8004770:	6104      	str	r4, [r0, #16]
  SM_TIMx_CLK_ENABLE();
 8004772:	f003 0308 	and.w	r3, r3, #8
 8004776:	9300      	str	r3, [sp, #0]
 8004778:	9b00      	ldr	r3, [sp, #0]
  hsm_tim.Init.CounterMode       = TIM_COUNTERMODE_UP;
 800477a:	6084      	str	r4, [r0, #8]
  hsm_tim.Init.Period            = 0xFFFFFFFF;
 800477c:	f04f 33ff 	mov.w	r3, #4294967295
  hsm_tim.Init.RepetitionCounter = 0;
 8004780:	6144      	str	r4, [r0, #20]
  hsm_tim.Instance = SM_TIMx;
 8004782:	6002      	str	r2, [r0, #0]
  hsm_tim.Init.Period            = 0xFFFFFFFF;
 8004784:	60c3      	str	r3, [r0, #12]
}
 8004786:	b005      	add	sp, #20
 8004788:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}

  if (HAL_TIM_Base_Init(&hsm_tim) != HAL_OK)
 800478c:	f007 b86a 	b.w	800b864 <HAL_TIM_Base_Init>
 8004790:	40021000 	.word	0x40021000
 8004794:	2001995c 	.word	0x2001995c
 8004798:	40005800 	.word	0x40005800
 800479c:	00b03fdb 	.word	0x00b03fdb
 80047a0:	08004199 	.word	0x08004199
 80047a4:	080040d5 	.word	0x080040d5
 80047a8:	080040c9 	.word	0x080040c9
 80047ac:	08004005 	.word	0x08004005
 80047b0:	40003800 	.word	0x40003800
 80047b4:	080042a1 	.word	0x080042a1
 80047b8:	080040fd 	.word	0x080040fd
 80047bc:	2001988c 	.word	0x2001988c
 80047c0:	40000c00 	.word	0x40000c00
 80047c4:	200198cc 	.word	0x200198cc

080047c8 <SM_TIM_Start>:
}

void SM_TIM_Start(void)
{
  /*##-2- Start the TIM Base generation ####################*/
  if (HAL_TIM_Base_Start(&hsm_tim) != HAL_OK)
 80047c8:	4801      	ldr	r0, [pc, #4]	; (80047d0 <SM_TIM_Start+0x8>)
 80047ca:	f007 b8bd 	b.w	800b948 <HAL_TIM_Base_Start>
 80047ce:	bf00      	nop
 80047d0:	2001988c 	.word	0x2001988c

080047d4 <SM_TIM_Stop>:
//    Error_Handler();
  }
}

void SM_TIM_Stop(void)
{
 80047d4:	b510      	push	{r4, lr}
  /*##-2- Start the TIM Base generation ####################*/
  if (HAL_TIM_Base_Stop(&hsm_tim) != HAL_OK)
 80047d6:	4c04      	ldr	r4, [pc, #16]	; (80047e8 <SM_TIM_Stop+0x14>)
 80047d8:	4620      	mov	r0, r4
 80047da:	f007 f8cd 	bl	800b978 <HAL_TIM_Base_Stop>
  {
    /* Starting Error */
//    Error_Handler();
  }
  hsm_tim.Instance->CNT = 0;
 80047de:	6823      	ldr	r3, [r4, #0]
 80047e0:	2200      	movs	r2, #0
 80047e2:	625a      	str	r2, [r3, #36]	; 0x24
}
 80047e4:	bd10      	pop	{r4, pc}
 80047e6:	bf00      	nop
 80047e8:	2001988c 	.word	0x2001988c

080047ec <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80047ec:	4770      	bx	lr
 80047ee:	bf00      	nop

080047f0 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80047f0:	e7fe      	b.n	80047f0 <HardFault_Handler>
 80047f2:	bf00      	nop

080047f4 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80047f4:	e7fe      	b.n	80047f4 <MemManage_Handler>
 80047f6:	bf00      	nop

080047f8 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80047f8:	e7fe      	b.n	80047f8 <BusFault_Handler>
 80047fa:	bf00      	nop

080047fc <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80047fc:	e7fe      	b.n	80047fc <UsageFault_Handler>
 80047fe:	bf00      	nop

08004800 <DebugMon_Handler>:
 8004800:	4770      	bx	lr
 8004802:	bf00      	nop

08004804 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004804:	b508      	push	{r3, lr}
 HAL_IncTick();
 8004806:	f001 fc0b 	bl	8006020 <HAL_IncTick>
 osSystickHandler();
}
 800480a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 osSystickHandler();
 800480e:	f00e b89f 	b.w	8012950 <osSystickHandler>
 8004812:	bf00      	nop

08004814 <PVD_PVM_IRQHandler>:
/* For the available peripheral interrupt handler names,                      */
/* please refer to the startup file (startup_stm32l4xx.s).                    */
/******************************************************************************/
void PVD_PVM_IRQHandler(void)
{
  HAL_PWREx_PVD_PVM_IRQHandler();
 8004814:	f004 bbe2 	b.w	8008fdc <HAL_PWREx_PVD_PVM_IRQHandler>

08004818 <DMA1_Channel1_IRQHandler>:
/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
  HAL_DMA_IRQHandler(&hdma_sm_spi_rx);
 8004818:	4801      	ldr	r0, [pc, #4]	; (8004820 <DMA1_Channel1_IRQHandler+0x8>)
 800481a:	f002 bb37 	b.w	8006e8c <HAL_DMA_IRQHandler>
 800481e:	bf00      	nop
 8004820:	200197cc 	.word	0x200197cc

08004824 <DMA1_Channel2_IRQHandler>:
/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
  HAL_DMA_IRQHandler(&hdma_sm_spi_tx);
 8004824:	4801      	ldr	r0, [pc, #4]	; (800482c <DMA1_Channel2_IRQHandler+0x8>)
 8004826:	f002 bb31 	b.w	8006e8c <HAL_DMA_IRQHandler>
 800482a:	bf00      	nop
 800482c:	20019a40 	.word	0x20019a40

08004830 <DMA1_Channel3_IRQHandler>:
/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
  HAL_DMA_IRQHandler(&hdma_sm_i2c_rx);
 8004830:	4801      	ldr	r0, [pc, #4]	; (8004838 <DMA1_Channel3_IRQHandler+0x8>)
 8004832:	f002 bb2b 	b.w	8006e8c <HAL_DMA_IRQHandler>
 8004836:	bf00      	nop
 8004838:	2001982c 	.word	0x2001982c

0800483c <DMA1_Channel4_IRQHandler>:
/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
  HAL_DMA_IRQHandler(&hdma_sm_i2c_tx);
 800483c:	4801      	ldr	r0, [pc, #4]	; (8004844 <DMA1_Channel4_IRQHandler+0x8>)
 800483e:	f002 bb25 	b.w	8006e8c <HAL_DMA_IRQHandler>
 8004842:	bf00      	nop
 8004844:	200199e0 	.word	0x200199e0

08004848 <DMA1_Channel5_IRQHandler>:
/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
  HAL_DMA_IRQHandler(&hdma_dfsdm1_flt0);
 8004848:	4801      	ldr	r0, [pc, #4]	; (8004850 <DMA1_Channel5_IRQHandler+0x8>)
 800484a:	f002 bb1f 	b.w	8006e8c <HAL_DMA_IRQHandler>
 800484e:	bf00      	nop
 8004850:	2001209c 	.word	0x2001209c

08004854 <DMA1_Channel6_IRQHandler>:
/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
  HAL_DMA_IRQHandler(&hdma_dfsdm1_flt1);
 8004854:	4801      	ldr	r0, [pc, #4]	; (800485c <DMA1_Channel6_IRQHandler+0x8>)
 8004856:	f002 bb19 	b.w	8006e8c <HAL_DMA_IRQHandler>
 800485a:	bf00      	nop
 800485c:	20017668 	.word	0x20017668

08004860 <EXTI0_IRQHandler>:
/**
  * @brief This function handles EXTI line[0] interrupts.
  */
void EXTI0_IRQHandler(void)
{
  HAL_GPIO_EXTI_IRQHandler(USER_BUTTON_PIN);
 8004860:	2001      	movs	r0, #1
 8004862:	f002 bcb7 	b.w	80071d4 <HAL_GPIO_EXTI_IRQHandler>
 8004866:	bf00      	nop

08004868 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8004868:	b508      	push	{r3, lr}
   HAL_EXTI_IRQHandler(&hts221_exti);  
 800486a:	4805      	ldr	r0, [pc, #20]	; (8004880 <EXTI9_5_IRQHandler+0x18>)
 800486c:	f002 fb68 	bl	8006f40 <HAL_EXTI_IRQHandler>
   HAL_EXTI_IRQHandler(&ism330dhcx_exti);  
 8004870:	4804      	ldr	r0, [pc, #16]	; (8004884 <EXTI9_5_IRQHandler+0x1c>)
 8004872:	f002 fb65 	bl	8006f40 <HAL_EXTI_IRQHandler>
   HAL_EXTI_IRQHandler(&iis2mdc_exti);
}
 8004876:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   HAL_EXTI_IRQHandler(&iis2mdc_exti);
 800487a:	4803      	ldr	r0, [pc, #12]	; (8004888 <EXTI9_5_IRQHandler+0x20>)
 800487c:	f002 bb60 	b.w	8006f40 <HAL_EXTI_IRQHandler>
 8004880:	20011200 	.word	0x20011200
 8004884:	200171e8 	.word	0x200171e8
 8004888:	20011268 	.word	0x20011268

0800488c <I2C2_EV_IRQHandler>:
/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
  HAL_I2C_EV_IRQHandler(&hsm_i2c);
 800488c:	4801      	ldr	r0, [pc, #4]	; (8004894 <I2C2_EV_IRQHandler+0x8>)
 800488e:	f003 bd2f 	b.w	80082f0 <HAL_I2C_EV_IRQHandler>
 8004892:	bf00      	nop
 8004894:	2001995c 	.word	0x2001995c

08004898 <I2C2_ER_IRQHandler>:
/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
  HAL_I2C_ER_IRQHandler(&hsm_i2c);
 8004898:	4801      	ldr	r0, [pc, #4]	; (80048a0 <I2C2_ER_IRQHandler+0x8>)
 800489a:	f003 bd31 	b.w	8008300 <HAL_I2C_ER_IRQHandler>
 800489e:	bf00      	nop
 80048a0:	2001995c 	.word	0x2001995c

080048a4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80048a4:	b508      	push	{r3, lr}
  HAL_EXTI_IRQHandler(&iis3dwb_exti);  
 80048a6:	4804      	ldr	r0, [pc, #16]	; (80048b8 <EXTI15_10_IRQHandler+0x14>)
 80048a8:	f002 fb4a 	bl	8006f40 <HAL_EXTI_IRQHandler>
  HAL_EXTI_IRQHandler(&BC_exti);
}
 80048ac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_EXTI_IRQHandler(&BC_exti);
 80048b0:	4802      	ldr	r0, [pc, #8]	; (80048bc <EXTI15_10_IRQHandler+0x18>)
 80048b2:	f002 bb45 	b.w	8006f40 <HAL_EXTI_IRQHandler>
 80048b6:	bf00      	nop
 80048b8:	20011290 	.word	0x20011290
 80048bc:	20017608 	.word	0x20017608

080048c0 <EXTI2_IRQHandler>:
/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI2_IRQHandler(void)
{
  HAL_EXTI_IRQHandler(&iis2dh_exti);
 80048c0:	4801      	ldr	r0, [pc, #4]	; (80048c8 <EXTI2_IRQHandler+0x8>)
 80048c2:	f002 bb3d 	b.w	8006f40 <HAL_EXTI_IRQHandler>
 80048c6:	bf00      	nop
 80048c8:	20011244 	.word	0x20011244

080048cc <DMA2_Channel1_IRQHandler>:
 80048cc:	4770      	bx	lr
 80048ce:	bf00      	nop

080048d0 <OTG_FS_IRQHandler>:
/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80048d0:	4801      	ldr	r0, [pc, #4]	; (80048d8 <OTG_FS_IRQHandler+0x8>)
 80048d2:	f003 be59 	b.w	8008588 <HAL_PCD_IRQHandler>
 80048d6:	bf00      	nop
 80048d8:	20019ac8 	.word	0x20019ac8

080048dc <SDMMC1_IRQHandler>:
}

void SDMMC1_IRQHandler(void)
{
  HAL_SD_IRQHandler(&hsd1);
 80048dc:	4801      	ldr	r0, [pc, #4]	; (80048e4 <SDMMC1_IRQHandler+0x8>)
 80048de:	f005 bdb3 	b.w	800a448 <HAL_SD_IRQHandler>
 80048e2:	bf00      	nop
 80048e4:	20017838 	.word	0x20017838

080048e8 <STTS751_Start>:
}

void STTS751_Start(void)
{
  STTS751_Set_State(SM_SENSOR_STATE_INITIALIZING);
  osThreadResume(STTS751_Thread_Id);
 80048e8:	4a03      	ldr	r2, [pc, #12]	; (80048f8 <STTS751_Start+0x10>)
  STTS751_Sensor_State = newState;
 80048ea:	4b04      	ldr	r3, [pc, #16]	; (80048fc <STTS751_Start+0x14>)
  osThreadResume(STTS751_Thread_Id);
 80048ec:	6810      	ldr	r0, [r2, #0]
  STTS751_Sensor_State = newState;
 80048ee:	2203      	movs	r2, #3
 80048f0:	701a      	strb	r2, [r3, #0]
  osThreadResume(STTS751_Thread_Id);
 80048f2:	f00e b83d 	b.w	8012970 <osThreadResume>
 80048f6:	bf00      	nop
 80048f8:	20019ac4 	.word	0x20019ac4
 80048fc:	200000d8 	.word	0x200000d8

08004900 <STTS751_Stop>:
  STTS751_Sensor_State = newState;
 8004900:	4b01      	ldr	r3, [pc, #4]	; (8004908 <STTS751_Stop+0x8>)
 8004902:	2201      	movs	r2, #1
 8004904:	701a      	strb	r2, [r3, #0]
}

void STTS751_Stop(void)
{
  STTS751_Set_State(SM_SENSOR_STATE_SUSPENDING);
}
 8004906:	4770      	bx	lr
 8004908:	200000d8 	.word	0x200000d8

0800490c <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800490c:	4911      	ldr	r1, [pc, #68]	; (8004954 <SystemInit+0x48>)
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800490e:	4b12      	ldr	r3, [pc, #72]	; (8004958 <SystemInit+0x4c>)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004910:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8004914:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
{
 8004918:	b410      	push	{r4}
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800491a:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  RCC->CR |= RCC_CR_MSION;
 800491e:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8004920:	2000      	movs	r0, #0
  RCC->CR |= RCC_CR_MSION;
 8004922:	f042 0201 	orr.w	r2, r2, #1
 8004926:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8004928:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= (uint32_t)0xEAF6FFFF;
 800492a:	681a      	ldr	r2, [r3, #0]
 800492c:	f022 52a8 	bic.w	r2, r2, #352321536	; 0x15000000
 8004930:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000;
 8004934:	f44f 5480 	mov.w	r4, #4096	; 0x1000
  RCC->CR &= (uint32_t)0xEAF6FFFF;
 8004938:	601a      	str	r2, [r3, #0]
  RCC->PLLCFGR = 0x00001000;
 800493a:	60dc      	str	r4, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800493c:	681a      	ldr	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800493e:	f04f 6400 	mov.w	r4, #134217728	; 0x8000000
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8004942:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004946:	601a      	str	r2, [r3, #0]
  RCC->CIER = 0x00000000;
 8004948:	6198      	str	r0, [r3, #24]
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800494a:	608c      	str	r4, [r1, #8]
#endif
}
 800494c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004950:	4770      	bx	lr
 8004952:	bf00      	nop
 8004954:	e000ed00 	.word	0xe000ed00
 8004958:	40021000 	.word	0x40021000

0800495c <HAL_PCD_MspInit>:
  * @brief  Initializes the PCD MSP.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_MspInit(PCD_HandleTypeDef *hpcd)
{
 800495c:	b5d0      	push	{r4, r6, r7, lr}
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Configure USB FS GPIOs */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800495e:	4c17      	ldr	r4, [pc, #92]	; (80049bc <HAL_PCD_MspInit+0x60>)
 8004960:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8004962:	f043 0301 	orr.w	r3, r3, #1
 8004966:	64e3      	str	r3, [r4, #76]	; 0x4c
 8004968:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
{
 800496a:	b088      	sub	sp, #32
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800496c:	f003 0301 	and.w	r3, r3, #1
 8004970:	9300      	str	r3, [sp, #0]
  /* Configure DM DP Pins */
  GPIO_InitStruct.Pin = (GPIO_PIN_11 | GPIO_PIN_12);
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8004972:	210a      	movs	r1, #10
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004974:	9800      	ldr	r0, [sp, #0]
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8004976:	9106      	str	r1, [sp, #24]
  GPIO_InitStruct.Pin = (GPIO_PIN_11 | GPIO_PIN_12);
 8004978:	2200      	movs	r2, #0
 800497a:	2303      	movs	r3, #3
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); 
 800497c:	a902      	add	r1, sp, #8
  GPIO_InitStruct.Pin = (GPIO_PIN_11 | GPIO_PIN_12);
 800497e:	f44f 56c0 	mov.w	r6, #6144	; 0x1800
 8004982:	2702      	movs	r7, #2
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); 
 8004984:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pin = (GPIO_PIN_11 | GPIO_PIN_12);
 8004988:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800498c:	e9cd 6702 	strd	r6, r7, [sp, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); 
 8004990:	f002 faee 	bl	8006f70 <HAL_GPIO_Init>
  
  /* Enable USB FS Clock */
  __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8004994:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8004996:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800499a:	64e3      	str	r3, [r4, #76]	; 0x4c
 800499c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800499e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80049a2:	9301      	str	r3, [sp, #4]
  
  /* Set USB FS Interrupt priority */
  HAL_NVIC_SetPriority(OTG_FS_IRQn, 2, 0);
 80049a4:	2200      	movs	r2, #0
 80049a6:	2102      	movs	r1, #2
 80049a8:	2043      	movs	r0, #67	; 0x43
  __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80049aa:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(OTG_FS_IRQn, 2, 0);
 80049ac:	f002 f8ea 	bl	8006b84 <HAL_NVIC_SetPriority>
  
  /* Enable USB FS Interrupt */
  HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80049b0:	2043      	movs	r0, #67	; 0x43
 80049b2:	f002 f91f 	bl	8006bf4 <HAL_NVIC_EnableIRQ>
    
}
 80049b6:	b008      	add	sp, #32
 80049b8:	bdd0      	pop	{r4, r6, r7, pc}
 80049ba:	bf00      	nop
 80049bc:	40021000 	.word	0x40021000

080049c0 <HAL_PCD_SetupStageCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_SetupStage(hpcd->pData, (uint8_t *)hpcd->Setup);
 80049c0:	f500 7171 	add.w	r1, r0, #964	; 0x3c4
 80049c4:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 80049c8:	f009 be22 	b.w	800e610 <USBD_LL_SetupStage>

080049cc <HAL_PCD_DataOutStageCallback>:
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_DataOutStage(hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80049cc:	ebc1 03c1 	rsb	r3, r1, r1, lsl #3
 80049d0:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 80049d4:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 80049d8:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80049dc:	f009 be48 	b.w	800e670 <USBD_LL_DataOutStage>

080049e0 <HAL_PCD_DataInStageCallback>:
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_DataInStage(hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80049e0:	ebc1 03c1 	rsb	r3, r1, r1, lsl #3
 80049e4:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 80049e8:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 80049ec:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80049ee:	f009 be7d 	b.w	800e6ec <USBD_LL_DataInStage>
 80049f2:	bf00      	nop

080049f4 <HAL_PCD_SOFCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_SOF(hpcd->pData);
 80049f4:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 80049f8:	f009 bf1a 	b.w	800e830 <USBD_LL_SOF>

080049fc <HAL_PCD_ResetCallback>:
  * @brief  Reset callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{   
 80049fc:	b510      	push	{r4, lr}
 80049fe:	4604      	mov	r4, r0
  /* Reset Device */
  USBD_LL_Reset(hpcd->pData);
 8004a00:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8004a04:	f009 fed4 	bl	800e7b0 <USBD_LL_Reset>
  
  /* Set USB Current Speed */ 
  USBD_LL_SetSpeed(hpcd->pData, USBD_SPEED_FULL);
 8004a08:	f8d4 0404 	ldr.w	r0, [r4, #1028]	; 0x404
 8004a0c:	2101      	movs	r1, #1
}
 8004a0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_SetSpeed(hpcd->pData, USBD_SPEED_FULL);
 8004a12:	f009 bef5 	b.w	800e800 <USBD_LL_SetSpeed>
 8004a16:	bf00      	nop

08004a18 <HAL_PCD_SuspendCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{ 
  USBD_LL_Suspend(hpcd->pData);
 8004a18:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8004a1c:	f009 bef4 	b.w	800e808 <USBD_LL_Suspend>

08004a20 <HAL_PCD_ResumeCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_Resume(hpcd->pData);
 8004a20:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8004a24:	f009 befa 	b.w	800e81c <USBD_LL_Resume>

08004a28 <HAL_PCD_ISOOUTIncompleteCallback>:
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_IsoOUTIncomplete(hpcd->pData, epnum);
 8004a28:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8004a2c:	f009 bf10 	b.w	800e850 <USBD_LL_IsoOUTIncomplete>

08004a30 <HAL_PCD_ISOINIncompleteCallback>:
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_IsoINIncomplete(hpcd->pData, epnum);
 8004a30:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8004a34:	f009 bf0a 	b.w	800e84c <USBD_LL_IsoINIncomplete>

08004a38 <HAL_PCD_ConnectCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_DevConnected(hpcd->pData);
 8004a38:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8004a3c:	f009 bf0a 	b.w	800e854 <USBD_LL_DevConnected>

08004a40 <HAL_PCD_DisconnectCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_DevDisconnected(hpcd->pData);
 8004a40:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8004a44:	f009 bf08 	b.w	800e858 <USBD_LL_DevDisconnected>

08004a48 <USBD_LL_Init>:
  * @brief  Initializes the Low Level portion of the Device driver.
  * @param  pdev: Device handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8004a48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  /* Set LL Driver parameters */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8004a4c:	4c20      	ldr	r4, [pc, #128]	; (8004ad0 <USBD_LL_Init+0x88>)
  hpcd_USB_OTG_FS.Init.dev_endpoints = 8;
 8004a4e:	2308      	movs	r3, #8
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = 0;
 8004a50:	2500      	movs	r5, #0
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8004a52:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
  hpcd_USB_OTG_FS.Init.Sof_enable = 1;
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = 0;
  /* Link The driver to the stack */
  hpcd_USB_OTG_FS.pData = pdev;
 8004a56:	f8c4 0404 	str.w	r0, [r4, #1028]	; 0x404
  hpcd_USB_OTG_FS.Init.ep0_mps = 0x40;
 8004a5a:	2740      	movs	r7, #64	; 0x40
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8004a5c:	2602      	movs	r6, #2
  pdev->pData = &hpcd_USB_OTG_FS;
 8004a5e:	f8c0 42c0 	str.w	r4, [r0, #704]	; 0x2c0
  hpcd_USB_OTG_FS.Init.Sof_enable = 1;
 8004a62:	f04f 0801 	mov.w	r8, #1
  /* Initialize LL Driver */
  HAL_PCD_Init(&hpcd_USB_OTG_FS);
 8004a66:	4620      	mov	r0, r4
  hpcd_USB_OTG_FS.Init.dev_endpoints = 8;
 8004a68:	e9c4 2300 	strd	r2, r3, [r4]
  hpcd_USB_OTG_FS.Init.lpm_enable = 0;
 8004a6c:	e9c4 5508 	strd	r5, r5, [r4, #32]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = 0;
 8004a70:	e9c4 550a 	strd	r5, r5, [r4, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8004a74:	e9c4 7605 	strd	r7, r6, [r4, #20]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = 0;
 8004a78:	6325      	str	r5, [r4, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.dma_enable = 0;
 8004a7a:	6125      	str	r5, [r4, #16]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8004a7c:	60e6      	str	r6, [r4, #12]
  hpcd_USB_OTG_FS.Init.Sof_enable = 1;
 8004a7e:	f8c4 801c 	str.w	r8, [r4, #28]
  HAL_PCD_Init(&hpcd_USB_OTG_FS);
 8004a82:	f003 fcd1 	bl	8008428 <HAL_PCD_Init>
  
  HAL_PCD_SetRxFiFo(&hpcd_USB_OTG_FS, 0x40);
 8004a86:	4639      	mov	r1, r7
 8004a88:	4620      	mov	r0, r4
 8004a8a:	f004 f99d 	bl	8008dc8 <HAL_PCDEx_SetRxFiFo>
  HAL_PCD_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8004a8e:	463a      	mov	r2, r7
 8004a90:	4629      	mov	r1, r5
 8004a92:	4620      	mov	r0, r4
 8004a94:	f004 f974 	bl	8008d80 <HAL_PCDEx_SetTxFiFo>
  This may be not the optimal solution, depending on the 
  datarate flowing on each eandpoint */
  
  uint16_t fifoSizePerEp = (320 - 2*(0x40)) / (N_IN_ENDPOINTS);

  HAL_PCD_SetTxFiFo(&hpcd_USB_OTG_FS, 1, fifoSizePerEp);
 8004a98:	4641      	mov	r1, r8
 8004a9a:	4620      	mov	r0, r4
 8004a9c:	2226      	movs	r2, #38	; 0x26
 8004a9e:	f004 f96f 	bl	8008d80 <HAL_PCDEx_SetTxFiFo>
#if (N_IN_ENDPOINTS >1)  
  HAL_PCD_SetTxFiFo(&hpcd_USB_OTG_FS, 2, fifoSizePerEp);
 8004aa2:	4631      	mov	r1, r6
 8004aa4:	4620      	mov	r0, r4
 8004aa6:	2226      	movs	r2, #38	; 0x26
 8004aa8:	f004 f96a 	bl	8008d80 <HAL_PCDEx_SetTxFiFo>
#if (N_IN_ENDPOINTS >2)    
  HAL_PCD_SetTxFiFo(&hpcd_USB_OTG_FS, 3, fifoSizePerEp);
 8004aac:	4620      	mov	r0, r4
 8004aae:	2226      	movs	r2, #38	; 0x26
 8004ab0:	2103      	movs	r1, #3
 8004ab2:	f004 f965 	bl	8008d80 <HAL_PCDEx_SetTxFiFo>
#if (N_IN_ENDPOINTS >3)  
  HAL_PCD_SetTxFiFo(&hpcd_USB_OTG_FS, 4, fifoSizePerEp);
 8004ab6:	4620      	mov	r0, r4
 8004ab8:	2226      	movs	r2, #38	; 0x26
 8004aba:	2104      	movs	r1, #4
 8004abc:	f004 f960 	bl	8008d80 <HAL_PCDEx_SetTxFiFo>
#if (N_IN_ENDPOINTS >4)  
  HAL_PCD_SetTxFiFo(&hpcd_USB_OTG_FS, 5, fifoSizePerEp);
 8004ac0:	4620      	mov	r0, r4
 8004ac2:	2226      	movs	r2, #38	; 0x26
 8004ac4:	2105      	movs	r1, #5
 8004ac6:	f004 f95b 	bl	8008d80 <HAL_PCDEx_SetTxFiFo>
#endif  
#endif
#endif

  return USBD_OK;
}
 8004aca:	4628      	mov	r0, r5
 8004acc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004ad0:	20019ac8 	.word	0x20019ac8

08004ad4 <USBD_LL_Start>:
  * @brief  Starts the Low Level portion of the Device driver. 
  * @param  pdev: Device handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8004ad4:	b508      	push	{r3, lr}
  HAL_PCD_Start(pdev->pData);
 8004ad6:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8004ada:	f003 fd39 	bl	8008550 <HAL_PCD_Start>
  return USBD_OK;
}
 8004ade:	2000      	movs	r0, #0
 8004ae0:	bd08      	pop	{r3, pc}
 8004ae2:	bf00      	nop

08004ae4 <USBD_LL_OpenEP>:
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev,
                                  uint8_t ep_addr,
                                  uint8_t ep_type,
                                  uint16_t ep_mps)
{
 8004ae4:	b510      	push	{r4, lr}
 8004ae6:	4614      	mov	r4, r2
  HAL_PCD_EP_Open(pdev->pData,
 8004ae8:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
{
 8004aec:	461a      	mov	r2, r3
  HAL_PCD_EP_Open(pdev->pData,
 8004aee:	4623      	mov	r3, r4
 8004af0:	f004 f81a 	bl	8008b28 <HAL_PCD_EP_Open>
                  ep_addr,
                  ep_mps,
                  ep_type);
  
  return USBD_OK;
}
 8004af4:	2000      	movs	r0, #0
 8004af6:	bd10      	pop	{r4, pc}

08004af8 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8004af8:	b508      	push	{r3, lr}
  HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8004afa:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8004afe:	f004 f849 	bl	8008b94 <HAL_PCD_EP_Close>
  return USBD_OK;
}
 8004b02:	2000      	movs	r0, #0
 8004b04:	bd08      	pop	{r3, pc}
 8004b06:	bf00      	nop

08004b08 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8004b08:	b508      	push	{r3, lr}
  HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8004b0a:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8004b0e:	f004 f8bb 	bl	8008c88 <HAL_PCD_EP_SetStall>
  return USBD_OK;
}
 8004b12:	2000      	movs	r0, #0
 8004b14:	bd08      	pop	{r3, pc}
 8004b16:	bf00      	nop

08004b18 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8004b18:	b508      	push	{r3, lr}
  HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8004b1a:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8004b1e:	f004 f8f5 	bl	8008d0c <HAL_PCD_EP_ClrStall>
  return USBD_OK; 
}
 8004b22:	2000      	movs	r0, #0
 8004b24:	bd08      	pop	{r3, pc}
 8004b26:	bf00      	nop

08004b28 <USBD_LL_IsStallEP>:
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
  PCD_HandleTypeDef *hpcd = pdev->pData;
  
  if((ep_addr & 0x80) == 0x80)
 8004b28:	060a      	lsls	r2, r1, #24
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8004b2a:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
  if((ep_addr & 0x80) == 0x80)
 8004b2e:	d406      	bmi.n	8004b3e <USBD_LL_IsStallEP+0x16>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8004b30:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8004b34:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8004b38:	f891 01fe 	ldrb.w	r0, [r1, #510]	; 0x1fe
  }
}
 8004b3c:	4770      	bx	lr
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8004b3e:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8004b42:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8004b46:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8004b4a:	f891 003e 	ldrb.w	r0, [r1, #62]	; 0x3e
 8004b4e:	4770      	bx	lr

08004b50 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8004b50:	b508      	push	{r3, lr}
  HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8004b52:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8004b56:	f003 ffd3 	bl	8008b00 <HAL_PCD_SetAddress>
  return USBD_OK; 
}
 8004b5a:	2000      	movs	r0, #0
 8004b5c:	bd08      	pop	{r3, pc}
 8004b5e:	bf00      	nop

08004b60 <USBD_LL_Transmit>:
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, 
                                    uint8_t ep_addr,
                                    uint8_t *pbuf,
                                    uint16_t size)
{
 8004b60:	b508      	push	{r3, lr}
  HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8004b62:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8004b66:	f004 f871 	bl	8008c4c <HAL_PCD_EP_Transmit>
  return USBD_OK;
}
 8004b6a:	2000      	movs	r0, #0
 8004b6c:	bd08      	pop	{r3, pc}
 8004b6e:	bf00      	nop

08004b70 <USBD_LL_PrepareReceive>:
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, 
                                          uint8_t ep_addr,
                                          uint8_t *pbuf,
                                          uint16_t size)
{
 8004b70:	b508      	push	{r3, lr}
  HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8004b72:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8004b76:	f004 f83d 	bl	8008bf4 <HAL_PCD_EP_Receive>
  return USBD_OK;
}
 8004b7a:	2000      	movs	r0, #0
 8004b7c:	bd08      	pop	{r3, pc}
 8004b7e:	bf00      	nop

08004b80 <USBD_LL_GetRxDataSize>:
  * @param  ep_addr: Endpoint Number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
  return HAL_PCD_EP_GetRxCount(pdev->pData, ep_addr);
 8004b80:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8004b84:	f004 b858 	b.w	8008c38 <HAL_PCD_EP_GetRxCount>

08004b88 <USBD_WCID_STREAMING_DeviceDescriptor>:
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_WCID_STREAMING_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  *length = sizeof(USBD_DeviceDesc);
 8004b88:	2312      	movs	r3, #18
  return (uint8_t*)USBD_DeviceDesc;
}
 8004b8a:	4801      	ldr	r0, [pc, #4]	; (8004b90 <USBD_WCID_STREAMING_DeviceDescriptor+0x8>)
  *length = sizeof(USBD_DeviceDesc);
 8004b8c:	800b      	strh	r3, [r1, #0]
}
 8004b8e:	4770      	bx	lr
 8004b90:	200000fc 	.word	0x200000fc

08004b94 <USBD_WCID_STREAMING_LangIDStrDescriptor>:
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_WCID_STREAMING_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  *length = sizeof(USBD_LangIDDesc);  
 8004b94:	2304      	movs	r3, #4
  return (uint8_t*)USBD_LangIDDesc;
}
 8004b96:	4801      	ldr	r0, [pc, #4]	; (8004b9c <USBD_WCID_STREAMING_LangIDStrDescriptor+0x8>)
  *length = sizeof(USBD_LangIDDesc);  
 8004b98:	800b      	strh	r3, [r1, #0]
}
 8004b9a:	4770      	bx	lr
 8004b9c:	20000110 	.word	0x20000110

08004ba0 <USBD_WCID_STREAMING_ProductStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_WCID_STREAMING_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{  
 8004ba0:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_PRODUCT_FS_STRING, USBD_StrDesc, length);
 8004ba2:	4c04      	ldr	r4, [pc, #16]	; (8004bb4 <USBD_WCID_STREAMING_ProductStrDescriptor+0x14>)
 8004ba4:	4804      	ldr	r0, [pc, #16]	; (8004bb8 <USBD_WCID_STREAMING_ProductStrDescriptor+0x18>)
{  
 8004ba6:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_PRODUCT_FS_STRING, USBD_StrDesc, length);
 8004ba8:	4621      	mov	r1, r4
 8004baa:	f00a f8bd 	bl	800ed28 <USBD_GetString>
  return USBD_StrDesc;
}
 8004bae:	4620      	mov	r0, r4
 8004bb0:	bd10      	pop	{r4, pc}
 8004bb2:	bf00      	nop
 8004bb4:	20019ed0 	.word	0x20019ed0
 8004bb8:	0801c234 	.word	0x0801c234

08004bbc <USBD_WCID_STREAMING_ManufacturerStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_WCID_STREAMING_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8004bbc:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8004bbe:	4c04      	ldr	r4, [pc, #16]	; (8004bd0 <USBD_WCID_STREAMING_ManufacturerStrDescriptor+0x14>)
 8004bc0:	4804      	ldr	r0, [pc, #16]	; (8004bd4 <USBD_WCID_STREAMING_ManufacturerStrDescriptor+0x18>)
{
 8004bc2:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8004bc4:	4621      	mov	r1, r4
 8004bc6:	f00a f8af 	bl	800ed28 <USBD_GetString>
  return USBD_StrDesc;
}
 8004bca:	4620      	mov	r0, r4
 8004bcc:	bd10      	pop	{r4, pc}
 8004bce:	bf00      	nop
 8004bd0:	20019ed0 	.word	0x20019ed0
 8004bd4:	0801c254 	.word	0x0801c254

08004bd8 <USBD_WCID_STREAMING_ConfigStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_WCID_STREAMING_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{ 
 8004bd8:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_CONFIGURATION_FS_STRING, USBD_StrDesc, length);
 8004bda:	4c04      	ldr	r4, [pc, #16]	; (8004bec <USBD_WCID_STREAMING_ConfigStrDescriptor+0x14>)
 8004bdc:	4804      	ldr	r0, [pc, #16]	; (8004bf0 <USBD_WCID_STREAMING_ConfigStrDescriptor+0x18>)
{ 
 8004bde:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_CONFIGURATION_FS_STRING, USBD_StrDesc, length);
 8004be0:	4621      	mov	r1, r4
 8004be2:	f00a f8a1 	bl	800ed28 <USBD_GetString>
  return USBD_StrDesc;  
}
 8004be6:	4620      	mov	r0, r4
 8004be8:	bd10      	pop	{r4, pc}
 8004bea:	bf00      	nop
 8004bec:	20019ed0 	.word	0x20019ed0
 8004bf0:	0801c268 	.word	0x0801c268

08004bf4 <USBD_WCID_STREAMING_InterfaceStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_WCID_STREAMING_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8004bf4:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_INTERFACE_FS_STRING, USBD_StrDesc, length);
 8004bf6:	4c04      	ldr	r4, [pc, #16]	; (8004c08 <USBD_WCID_STREAMING_InterfaceStrDescriptor+0x14>)
 8004bf8:	4804      	ldr	r0, [pc, #16]	; (8004c0c <USBD_WCID_STREAMING_InterfaceStrDescriptor+0x18>)
{
 8004bfa:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_INTERFACE_FS_STRING, USBD_StrDesc, length);
 8004bfc:	4621      	mov	r1, r4
 8004bfe:	f00a f893 	bl	800ed28 <USBD_GetString>
  return USBD_StrDesc;  
}
 8004c02:	4620      	mov	r0, r4
 8004c04:	bd10      	pop	{r4, pc}
 8004c06:	bf00      	nop
 8004c08:	20019ed0 	.word	0x20019ed0
 8004c0c:	0801c278 	.word	0x0801c278

08004c10 <USBD_WCID_STREAMING_SerialStrDescriptor>:
  */
static void Get_SerialNum(void)
{
  uint32_t deviceserial0, deviceserial1, deviceserial2;
  
  deviceserial0 = *(uint32_t*)DEVICE_ID1;
 8004c10:	4a4a      	ldr	r2, [pc, #296]	; (8004d3c <USBD_WCID_STREAMING_SerialStrDescriptor+0x12c>)
  deviceserial1 = *(uint32_t*)DEVICE_ID2;
  deviceserial2 = *(uint32_t*)DEVICE_ID3;
 8004c12:	4b4b      	ldr	r3, [pc, #300]	; (8004d40 <USBD_WCID_STREAMING_SerialStrDescriptor+0x130>)
  deviceserial0 = *(uint32_t*)DEVICE_ID1;
 8004c14:	6812      	ldr	r2, [r2, #0]
  
  deviceserial0 += deviceserial2;
 8004c16:	681b      	ldr	r3, [r3, #0]
  *length = USB_SIZ_STRING_SERIAL;
 8004c18:	201a      	movs	r0, #26
  
  if (deviceserial0 != 0)
 8004c1a:	18d3      	adds	r3, r2, r3
  *length = USB_SIZ_STRING_SERIAL;
 8004c1c:	8008      	strh	r0, [r1, #0]
  if (deviceserial0 != 0)
 8004c1e:	d101      	bne.n	8004c24 <USBD_WCID_STREAMING_SerialStrDescriptor+0x14>
}
 8004c20:	4848      	ldr	r0, [pc, #288]	; (8004d44 <USBD_WCID_STREAMING_SerialStrDescriptor+0x134>)
 8004c22:	4770      	bx	lr
  deviceserial1 = *(uint32_t*)DEVICE_ID2;
 8004c24:	4a48      	ldr	r2, [pc, #288]	; (8004d48 <USBD_WCID_STREAMING_SerialStrDescriptor+0x138>)
{
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
  {
    if( ((value >> 28)) < 0xA )
 8004c26:	0f18      	lsrs	r0, r3, #28
  deviceserial1 = *(uint32_t*)DEVICE_ID2;
 8004c28:	6811      	ldr	r1, [r2, #0]
    {
      pbuf[ 2* idx] = (value >> 28) + '0';
 8004c2a:	4a48      	ldr	r2, [pc, #288]	; (8004d4c <USBD_WCID_STREAMING_SerialStrDescriptor+0x13c>)
    if( ((value >> 28)) < 0xA )
 8004c2c:	f1b3 4f20 	cmp.w	r3, #2684354560	; 0xa0000000
    }
    else
    {
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
 8004c30:	bf2c      	ite	cs
 8004c32:	3037      	addcs	r0, #55	; 0x37
      pbuf[ 2* idx] = (value >> 28) + '0';
 8004c34:	3030      	addcc	r0, #48	; 0x30
{
 8004c36:	b410      	push	{r4}
      pbuf[ 2* idx] = (value >> 28) + '0';
 8004c38:	7690      	strb	r0, [r2, #26]
    if( ((value >> 28)) < 0xA )
 8004c3a:	f3c3 6003 	ubfx	r0, r3, #24, #4
 8004c3e:	2809      	cmp	r0, #9
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
 8004c40:	bf8c      	ite	hi
 8004c42:	3037      	addhi	r0, #55	; 0x37
      pbuf[ 2* idx] = (value >> 28) + '0';
 8004c44:	3030      	addls	r0, #48	; 0x30
 8004c46:	7710      	strb	r0, [r2, #28]
    if( ((value >> 28)) < 0xA )
 8004c48:	f3c3 5003 	ubfx	r0, r3, #20, #4
 8004c4c:	2809      	cmp	r0, #9
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
 8004c4e:	bf8c      	ite	hi
 8004c50:	3037      	addhi	r0, #55	; 0x37
      pbuf[ 2* idx] = (value >> 28) + '0';
 8004c52:	3030      	addls	r0, #48	; 0x30
 8004c54:	7790      	strb	r0, [r2, #30]
    if( ((value >> 28)) < 0xA )
 8004c56:	f3c3 4003 	ubfx	r0, r3, #16, #4
 8004c5a:	2809      	cmp	r0, #9
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
 8004c5c:	bf8c      	ite	hi
 8004c5e:	3037      	addhi	r0, #55	; 0x37
      pbuf[ 2* idx] = (value >> 28) + '0';
 8004c60:	3030      	addls	r0, #48	; 0x30
 8004c62:	f882 0020 	strb.w	r0, [r2, #32]
    if( ((value >> 28)) < 0xA )
 8004c66:	f3c3 3003 	ubfx	r0, r3, #12, #4
 8004c6a:	2809      	cmp	r0, #9
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
 8004c6c:	bf8c      	ite	hi
 8004c6e:	3037      	addhi	r0, #55	; 0x37
      pbuf[ 2* idx] = (value >> 28) + '0';
 8004c70:	3030      	addls	r0, #48	; 0x30
 8004c72:	f882 0022 	strb.w	r0, [r2, #34]	; 0x22
    if( ((value >> 28)) < 0xA )
 8004c76:	f3c3 2003 	ubfx	r0, r3, #8, #4
 8004c7a:	2809      	cmp	r0, #9
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
 8004c7c:	bf8c      	ite	hi
 8004c7e:	3037      	addhi	r0, #55	; 0x37
      pbuf[ 2* idx] = (value >> 28) + '0';
 8004c80:	3030      	addls	r0, #48	; 0x30
 8004c82:	f882 0024 	strb.w	r0, [r2, #36]	; 0x24
    if( ((value >> 28)) < 0xA )
 8004c86:	f3c3 1003 	ubfx	r0, r3, #4, #4
 8004c8a:	2809      	cmp	r0, #9
 8004c8c:	f003 030f 	and.w	r3, r3, #15
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
 8004c90:	bf8c      	ite	hi
 8004c92:	3037      	addhi	r0, #55	; 0x37
      pbuf[ 2* idx] = (value >> 28) + '0';
 8004c94:	3030      	addls	r0, #48	; 0x30
    if( ((value >> 28)) < 0xA )
 8004c96:	2b09      	cmp	r3, #9
      pbuf[ 2* idx] = (value >> 28) + '0';
 8004c98:	bf94      	ite	ls
 8004c9a:	3330      	addls	r3, #48	; 0x30
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
 8004c9c:	3337      	addhi	r3, #55	; 0x37
 8004c9e:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
    }
    
    value = value << 4;
    
    pbuf[ 2* idx + 1] = 0;
 8004ca2:	2300      	movs	r3, #0
    if( ((value >> 28)) < 0xA )
 8004ca4:	f1b1 4f20 	cmp.w	r1, #2684354560	; 0xa0000000
    pbuf[ 2* idx + 1] = 0;
 8004ca8:	f882 3029 	strb.w	r3, [r2, #41]	; 0x29
    if( ((value >> 28)) < 0xA )
 8004cac:	ea4f 7311 	mov.w	r3, r1, lsr #28
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
 8004cb0:	bf2c      	ite	cs
 8004cb2:	3337      	addcs	r3, #55	; 0x37
      pbuf[ 2* idx] = (value >> 28) + '0';
 8004cb4:	3330      	addcc	r3, #48	; 0x30
 8004cb6:	f882 302a 	strb.w	r3, [r2, #42]	; 0x2a
    if( ((value >> 28)) < 0xA )
 8004cba:	f3c1 6303 	ubfx	r3, r1, #24, #4
 8004cbe:	2b09      	cmp	r3, #9
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
 8004cc0:	bf8c      	ite	hi
 8004cc2:	3337      	addhi	r3, #55	; 0x37
      pbuf[ 2* idx] = (value >> 28) + '0';
 8004cc4:	3330      	addls	r3, #48	; 0x30
 8004cc6:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
    if( ((value >> 28)) < 0xA )
 8004cca:	f3c1 5303 	ubfx	r3, r1, #20, #4
 8004cce:	2b09      	cmp	r3, #9
    pbuf[ 2* idx + 1] = 0;
 8004cd0:	f04f 0400 	mov.w	r4, #0
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
 8004cd4:	bf8c      	ite	hi
 8004cd6:	3337      	addhi	r3, #55	; 0x37
      pbuf[ 2* idx] = (value >> 28) + '0';
 8004cd8:	3330      	addls	r3, #48	; 0x30
    pbuf[ 2* idx + 1] = 0;
 8004cda:	76d4      	strb	r4, [r2, #27]
 8004cdc:	2400      	movs	r4, #0
 8004cde:	7754      	strb	r4, [r2, #29]
      pbuf[ 2* idx] = (value >> 28) + '0';
 8004ce0:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
    pbuf[ 2* idx + 1] = 0;
 8004ce4:	2400      	movs	r4, #0
    if( ((value >> 28)) < 0xA )
 8004ce6:	f3c1 4303 	ubfx	r3, r1, #16, #4
 8004cea:	2b09      	cmp	r3, #9
    pbuf[ 2* idx + 1] = 0;
 8004cec:	77d4      	strb	r4, [r2, #31]
      pbuf[ 2* idx] = (value >> 28) + '0';
 8004cee:	f882 0026 	strb.w	r0, [r2, #38]	; 0x26
    pbuf[ 2* idx + 1] = 0;
 8004cf2:	f04f 0400 	mov.w	r4, #0
 8004cf6:	f04f 0000 	mov.w	r0, #0
 8004cfa:	f882 4021 	strb.w	r4, [r2, #33]	; 0x21
 8004cfe:	f882 0027 	strb.w	r0, [r2, #39]	; 0x27
 8004d02:	f04f 0400 	mov.w	r4, #0
 8004d06:	f04f 0000 	mov.w	r0, #0
      pbuf[ 2* idx] = (value >> 28) + '0';
 8004d0a:	bf94      	ite	ls
 8004d0c:	3330      	addls	r3, #48	; 0x30
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
 8004d0e:	3337      	addhi	r3, #55	; 0x37
    pbuf[ 2* idx + 1] = 0;
 8004d10:	f882 4023 	strb.w	r4, [r2, #35]	; 0x23
 8004d14:	f882 002b 	strb.w	r0, [r2, #43]	; 0x2b
 8004d18:	2400      	movs	r4, #0
 8004d1a:	2000      	movs	r0, #0
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
 8004d1c:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
    pbuf[ 2* idx + 1] = 0;
 8004d20:	2100      	movs	r1, #0
 8004d22:	2300      	movs	r3, #0
 8004d24:	f882 002d 	strb.w	r0, [r2, #45]	; 0x2d
 8004d28:	f882 4025 	strb.w	r4, [r2, #37]	; 0x25
 8004d2c:	f882 102f 	strb.w	r1, [r2, #47]	; 0x2f
 8004d30:	f882 3031 	strb.w	r3, [r2, #49]	; 0x31
}
 8004d34:	4803      	ldr	r0, [pc, #12]	; (8004d44 <USBD_WCID_STREAMING_SerialStrDescriptor+0x134>)
 8004d36:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004d3a:	4770      	bx	lr
 8004d3c:	1fff7590 	.word	0x1fff7590
 8004d40:	1fff7598 	.word	0x1fff7598
 8004d44:	20000114 	.word	0x20000114
 8004d48:	1fff7594 	.word	0x1fff7594
 8004d4c:	200000fc 	.word	0x200000fc

08004d50 <WCID_STREAMING_Itf_Receive>:
* @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
*/
static int8_t WCID_STREAMING_Itf_Receive(uint8_t* Buf, uint32_t Len)
{  
  return (USBD_OK);
}
 8004d50:	2000      	movs	r0, #0
 8004d52:	4770      	bx	lr

08004d54 <WCID_STREAMING_Itf_DeInit>:
{
 8004d54:	b510      	push	{r4, lr}
  if( USB_RxBuffer != NULL)
 8004d56:	4c04      	ldr	r4, [pc, #16]	; (8004d68 <WCID_STREAMING_Itf_DeInit+0x14>)
 8004d58:	6820      	ldr	r0, [r4, #0]
 8004d5a:	b118      	cbz	r0, 8004d64 <WCID_STREAMING_Itf_DeInit+0x10>
    HSD_free(USB_RxBuffer);
 8004d5c:	f012 fd0a 	bl	8017774 <free>
    USB_RxBuffer = NULL;
 8004d60:	2300      	movs	r3, #0
 8004d62:	6023      	str	r3, [r4, #0]
}
 8004d64:	2000      	movs	r0, #0
 8004d66:	bd10      	pop	{r4, pc}
 8004d68:	200019b0 	.word	0x200019b0

08004d6c <WCID_STREAMING_Itf_Control>:
{ 
 8004d6c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (com_status != HS_DATALOG_IDLE && com_status != HS_DATALOG_USB_STARTED )
 8004d70:	4fbb      	ldr	r7, [pc, #748]	; (8005060 <WCID_STREAMING_Itf_Control+0x2f4>)
{ 
 8004d72:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  if (com_status != HS_DATALOG_IDLE && com_status != HS_DATALOG_USB_STARTED )
 8004d74:	783a      	ldrb	r2, [r7, #0]
{ 
 8004d76:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
  if (com_status != HS_DATALOG_IDLE && com_status != HS_DATALOG_USB_STARTED )
 8004d7a:	b11a      	cbz	r2, 8004d84 <WCID_STREAMING_Itf_Control+0x18>
 8004d7c:	783a      	ldrb	r2, [r7, #0]
 8004d7e:	2a01      	cmp	r2, #1
 8004d80:	f040 808c 	bne.w	8004e9c <WCID_STREAMING_Itf_Control+0x130>
    switch(state)
 8004d84:	4db7      	ldr	r5, [pc, #732]	; (8005064 <WCID_STREAMING_Itf_Control+0x2f8>)
  if(isHostToDevice)
 8004d86:	2800      	cmp	r0, #0
 8004d88:	d043      	beq.n	8004e12 <WCID_STREAMING_Itf_Control+0xa6>
    switch(state)
 8004d8a:	792c      	ldrb	r4, [r5, #4]
 8004d8c:	2c00      	cmp	r4, #0
 8004d8e:	f000 8089 	beq.w	8004ea4 <WCID_STREAMING_Itf_Control+0x138>
 8004d92:	2c05      	cmp	r4, #5
 8004d94:	d139      	bne.n	8004e0a <WCID_STREAMING_Itf_Control+0x9e>
      if(cmd != CMD_DATA_SET)
 8004d96:	2904      	cmp	r1, #4
 8004d98:	f040 8140 	bne.w	800501c <WCID_STREAMING_Itf_Control+0x2b0>
      for (i = 0; i < length; i ++)
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	f000 8155 	beq.w	800504c <WCID_STREAMING_Itf_Control+0x2e0>
 8004da2:	f8d5 c00c 	ldr.w	ip, [r5, #12]
 8004da6:	f8b5 e006 	ldrh.w	lr, [r5, #6]
 8004daa:	f10c 0203 	add.w	r2, ip, #3
 8004dae:	1b92      	subs	r2, r2, r6
 8004db0:	2a06      	cmp	r2, #6
 8004db2:	f240 8141 	bls.w	8005038 <WCID_STREAMING_Itf_Control+0x2cc>
 8004db6:	1e5a      	subs	r2, r3, #1
 8004db8:	2a07      	cmp	r2, #7
 8004dba:	f240 813d 	bls.w	8005038 <WCID_STREAMING_Itf_Control+0x2cc>
 8004dbe:	089c      	lsrs	r4, r3, #2
 8004dc0:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 8004dc4:	4632      	mov	r2, r6
 8004dc6:	4661      	mov	r1, ip
        *p++ = pbuf[i];
 8004dc8:	f852 0b04 	ldr.w	r0, [r2], #4
 8004dcc:	f841 0b04 	str.w	r0, [r1], #4
      for (i = 0; i < length; i ++)
 8004dd0:	42a2      	cmp	r2, r4
 8004dd2:	d1f9      	bne.n	8004dc8 <WCID_STREAMING_Itf_Control+0x5c>
 8004dd4:	f023 0203 	bic.w	r2, r3, #3
 8004dd8:	429a      	cmp	r2, r3
 8004dda:	eb0c 0102 	add.w	r1, ip, r2
 8004dde:	d00c      	beq.n	8004dfa <WCID_STREAMING_Itf_Control+0x8e>
        *p++ = pbuf[i];
 8004de0:	5cb0      	ldrb	r0, [r6, r2]
 8004de2:	f80c 0002 	strb.w	r0, [ip, r2]
      for (i = 0; i < length; i ++)
 8004de6:	1c50      	adds	r0, r2, #1
 8004de8:	4298      	cmp	r0, r3
 8004dea:	d206      	bcs.n	8004dfa <WCID_STREAMING_Itf_Control+0x8e>
 8004dec:	3202      	adds	r2, #2
        *p++ = pbuf[i];
 8004dee:	5c30      	ldrb	r0, [r6, r0]
 8004df0:	7048      	strb	r0, [r1, #1]
      for (i = 0; i < length; i ++)
 8004df2:	429a      	cmp	r2, r3
 8004df4:	d201      	bcs.n	8004dfa <WCID_STREAMING_Itf_Control+0x8e>
        *p++ = pbuf[i];
 8004df6:	5cb2      	ldrb	r2, [r6, r2]
 8004df8:	708a      	strb	r2, [r1, #2]
      if (size == 0)
 8004dfa:	ebae 0403 	sub.w	r4, lr, r3
 8004dfe:	b2a6      	uxth	r6, r4
 8004e00:	4463      	add	r3, ip
 8004e02:	80ee      	strh	r6, [r5, #6]
 8004e04:	60eb      	str	r3, [r5, #12]
 8004e06:	2e00      	cmp	r6, #0
 8004e08:	d069      	beq.n	8004ede <WCID_STREAMING_Itf_Control+0x172>
  return (USBD_OK);
 8004e0a:	2400      	movs	r4, #0
}
 8004e0c:	4620      	mov	r0, r4
 8004e0e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    switch(state)
 8004e12:	792a      	ldrb	r2, [r5, #4]
 8004e14:	2a01      	cmp	r2, #1
 8004e16:	d053      	beq.n	8004ec0 <WCID_STREAMING_Itf_Control+0x154>
 8004e18:	2a02      	cmp	r2, #2
 8004e1a:	d1f6      	bne.n	8004e0a <WCID_STREAMING_Itf_Control+0x9e>
      if(cmd != CMD_DATA_GET)
 8004e1c:	2902      	cmp	r1, #2
 8004e1e:	f040 80fd 	bne.w	800501c <WCID_STREAMING_Itf_Control+0x2b0>
      for (i = 0; i < length; i++)
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	f000 8117 	beq.w	8005056 <WCID_STREAMING_Itf_Control+0x2ea>
 8004e28:	68e9      	ldr	r1, [r5, #12]
 8004e2a:	88ef      	ldrh	r7, [r5, #6]
 8004e2c:	1cca      	adds	r2, r1, #3
 8004e2e:	1b92      	subs	r2, r2, r6
 8004e30:	2a06      	cmp	r2, #6
 8004e32:	f240 80f6 	bls.w	8005022 <WCID_STREAMING_Itf_Control+0x2b6>
 8004e36:	1e5a      	subs	r2, r3, #1
 8004e38:	2a07      	cmp	r2, #7
 8004e3a:	f240 80f2 	bls.w	8005022 <WCID_STREAMING_Itf_Control+0x2b6>
 8004e3e:	ea4f 0c93 	mov.w	ip, r3, lsr #2
 8004e42:	eb01 0c8c 	add.w	ip, r1, ip, lsl #2
 8004e46:	460a      	mov	r2, r1
 8004e48:	4630      	mov	r0, r6
        pbuf[i] = *p++;
 8004e4a:	f852 4b04 	ldr.w	r4, [r2], #4
 8004e4e:	f840 4b04 	str.w	r4, [r0], #4
      for (i = 0; i < length; i++)
 8004e52:	4562      	cmp	r2, ip
 8004e54:	d1f9      	bne.n	8004e4a <WCID_STREAMING_Itf_Control+0xde>
 8004e56:	f023 0203 	bic.w	r2, r3, #3
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	eb01 0002 	add.w	r0, r1, r2
 8004e60:	f000 80e8 	beq.w	8005034 <WCID_STREAMING_Itf_Control+0x2c8>
        pbuf[i] = *p++;
 8004e64:	5c8c      	ldrb	r4, [r1, r2]
 8004e66:	54b4      	strb	r4, [r6, r2]
      for (i = 0; i < length; i++)
 8004e68:	1c54      	adds	r4, r2, #1
 8004e6a:	42a3      	cmp	r3, r4
 8004e6c:	d908      	bls.n	8004e80 <WCID_STREAMING_Itf_Control+0x114>
        pbuf[i] = *p++;
 8004e6e:	f890 c001 	ldrb.w	ip, [r0, #1]
 8004e72:	f806 c004 	strb.w	ip, [r6, r4]
      for (i = 0; i < length; i++)
 8004e76:	3202      	adds	r2, #2
 8004e78:	4293      	cmp	r3, r2
        pbuf[i] = *p++;
 8004e7a:	bf84      	itt	hi
 8004e7c:	7880      	ldrbhi	r0, [r0, #2]
 8004e7e:	54b0      	strbhi	r0, [r6, r2]
      for (i = 0; i < length; i++)
 8004e80:	18ca      	adds	r2, r1, r3
      if(size == 0)
 8004e82:	1afb      	subs	r3, r7, r3
 8004e84:	b29e      	uxth	r6, r3
 8004e86:	80ee      	strh	r6, [r5, #6]
 8004e88:	60ea      	str	r2, [r5, #12]
 8004e8a:	2e00      	cmp	r6, #0
 8004e8c:	d1bd      	bne.n	8004e0a <WCID_STREAMING_Itf_Control+0x9e>
        HSD_JSON_free(serialized);
 8004e8e:	68a8      	ldr	r0, [r5, #8]
 8004e90:	f7fc fb16 	bl	80014c0 <HSD_JSON_free>
  return (USBD_OK);
 8004e94:	4634      	mov	r4, r6
        serialized = NULL;
 8004e96:	60ae      	str	r6, [r5, #8]
        state = STATE_WAITING;         
 8004e98:	712e      	strb	r6, [r5, #4]
 8004e9a:	e7b7      	b.n	8004e0c <WCID_STREAMING_Itf_Control+0xa0>
    return USBD_FAIL;
 8004e9c:	2402      	movs	r4, #2
}
 8004e9e:	4620      	mov	r0, r4
 8004ea0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if(cmd != CMD_SIZE_SET)
 8004ea4:	2903      	cmp	r1, #3
 8004ea6:	f040 80b9 	bne.w	800501c <WCID_STREAMING_Itf_Control+0x2b0>
      size = *(uint16_t *)pbuf;
 8004eaa:	8830      	ldrh	r0, [r6, #0]
 8004eac:	80e8      	strh	r0, [r5, #6]
      serialized = HSD_malloc(size);
 8004eae:	f012 fc59 	bl	8017764 <malloc>
      state = STATE_SIZE_RCVD;     
 8004eb2:	2305      	movs	r3, #5
      p = serialized;
 8004eb4:	e9c5 0002 	strd	r0, r0, [r5, #8]
      state = STATE_SIZE_RCVD;     
 8004eb8:	712b      	strb	r3, [r5, #4]
}
 8004eba:	4620      	mov	r0, r4
 8004ebc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if(cmd != CMD_SIZE_GET)
 8004ec0:	2901      	cmp	r1, #1
 8004ec2:	f040 80ab 	bne.w	800501c <WCID_STREAMING_Itf_Control+0x2b0>
      HSD_JSON_free(serialized);
 8004ec6:	68a8      	ldr	r0, [r5, #8]
 8004ec8:	f7fc fafa 	bl	80014c0 <HSD_JSON_free>
      switch(outCommand.request)
 8004ecc:	f995 3011 	ldrsb.w	r3, [r5, #17]
 8004ed0:	2b03      	cmp	r3, #3
 8004ed2:	f200 81ad 	bhi.w	8005230 <WCID_STREAMING_Itf_Control+0x4c4>
 8004ed6:	e8df f003 	tbb	[pc, r3]
 8004eda:	9098      	.short	0x9098
 8004edc:	6e82      	.short	0x6e82
        HSD_JSON_parse_Command((char *)serialized, &outCommand);
 8004ede:	4962      	ldr	r1, [pc, #392]	; (8005068 <WCID_STREAMING_Itf_Control+0x2fc>)
 8004ee0:	68a8      	ldr	r0, [r5, #8]
 8004ee2:	f7fc fc4d 	bl	8001780 <HSD_JSON_parse_Command>
        if(outCommand.command == COM_COMMAND_SET) 
 8004ee6:	f995 4010 	ldrsb.w	r4, [r5, #16]
        state = STATE_REQUEST_SET;     
 8004eea:	2301      	movs	r3, #1
 8004eec:	712b      	strb	r3, [r5, #4]
        if(outCommand.command == COM_COMMAND_SET) 
 8004eee:	2c00      	cmp	r4, #0
 8004ef0:	f000 80d6 	beq.w	80050a0 <WCID_STREAMING_Itf_Control+0x334>
        else if(outCommand.command == COM_COMMAND_START) 
 8004ef4:	2c02      	cmp	r4, #2
 8004ef6:	f000 80fe 	beq.w	80050f6 <WCID_STREAMING_Itf_Control+0x38a>
        else if(outCommand.command == COM_COMMAND_STOP) 
 8004efa:	2c03      	cmp	r4, #3
 8004efc:	d185      	bne.n	8004e0a <WCID_STREAMING_Itf_Control+0x9e>
          USBD_WCID_STREAMING_StopStreaming(&USBD_Device);
 8004efe:	4c5b      	ldr	r4, [pc, #364]	; (800506c <WCID_STREAMING_Itf_Control+0x300>)
 8004f00:	485b      	ldr	r0, [pc, #364]	; (8005070 <WCID_STREAMING_Itf_Control+0x304>)
 8004f02:	f009 fb47 	bl	800e594 <USBD_WCID_STREAMING_StopStreaming>
              TxBuffer[i] = NULL;
 8004f06:	46b0      	mov	r8, r6
          com_status = HS_DATALOG_IDLE;
 8004f08:	703e      	strb	r6, [r7, #0]
          for (int i = 0; i < N_CHANNELS_MAX; i++)
 8004f0a:	f104 0624 	add.w	r6, r4, #36	; 0x24
            if( TxBuffer[i] != NULL)
 8004f0e:	f854 0f04 	ldr.w	r0, [r4, #4]!
 8004f12:	b118      	cbz	r0, 8004f1c <WCID_STREAMING_Itf_Control+0x1b0>
              HSD_free(TxBuffer[i]);
 8004f14:	f012 fc2e 	bl	8017774 <free>
              TxBuffer[i] = NULL;
 8004f18:	f8c4 8000 	str.w	r8, [r4]
          for (int i = 0; i < N_CHANNELS_MAX; i++)
 8004f1c:	42b4      	cmp	r4, r6
 8004f1e:	d1f6      	bne.n	8004f0e <WCID_STREAMING_Itf_Control+0x1a2>
          myDeviceDescriptor = COM_GetDeviceDescriptor();
 8004f20:	f7fc fd12 	bl	8001948 <COM_GetDeviceDescriptor>
          for (int i = 0; i < myDeviceDescriptor->nSensor; i++)
 8004f24:	6a83      	ldr	r3, [r0, #40]	; 0x28
          myDeviceDescriptor = COM_GetDeviceDescriptor();
 8004f26:	4606      	mov	r6, r0
          for (int i = 0; i < myDeviceDescriptor->nSensor; i++)
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	f000 8149 	beq.w	80051c0 <WCID_STREAMING_Itf_Control+0x454>
              if(i == iis3dwb_com_id)
 8004f2e:	f8df 8168 	ldr.w	r8, [pc, #360]	; 8005098 <WCID_STREAMING_Itf_Control+0x32c>
              sensor_first_dataReady[i] = 0;
 8004f32:	4f50      	ldr	r7, [pc, #320]	; (8005074 <WCID_STREAMING_Itf_Control+0x308>)
              else if(i == hts221_com_id)
 8004f34:	f8df 9164 	ldr.w	r9, [pc, #356]	; 800509c <WCID_STREAMING_Itf_Control+0x330>
          for (int i = 0; i < myDeviceDescriptor->nSensor; i++)
 8004f38:	2400      	movs	r4, #0
 8004f3a:	e02e      	b.n	8004f9a <WCID_STREAMING_Itf_Control+0x22e>
              else if(i == hts221_com_id)
 8004f3c:	f899 3000 	ldrb.w	r3, [r9]
 8004f40:	42a3      	cmp	r3, r4
 8004f42:	f000 8145 	beq.w	80051d0 <WCID_STREAMING_Itf_Control+0x464>
              else if(i == iis2dh_com_id)
 8004f46:	4b4c      	ldr	r3, [pc, #304]	; (8005078 <WCID_STREAMING_Itf_Control+0x30c>)
 8004f48:	781b      	ldrb	r3, [r3, #0]
 8004f4a:	42a3      	cmp	r3, r4
 8004f4c:	f000 8146 	beq.w	80051dc <WCID_STREAMING_Itf_Control+0x470>
              else if(i == iis2mdc_com_id)
 8004f50:	4b4a      	ldr	r3, [pc, #296]	; (800507c <WCID_STREAMING_Itf_Control+0x310>)
 8004f52:	781b      	ldrb	r3, [r3, #0]
 8004f54:	42a3      	cmp	r3, r4
 8004f56:	f000 8147 	beq.w	80051e8 <WCID_STREAMING_Itf_Control+0x47c>
              else if(i == imp34dt05_com_id)
 8004f5a:	4b49      	ldr	r3, [pc, #292]	; (8005080 <WCID_STREAMING_Itf_Control+0x314>)
 8004f5c:	781b      	ldrb	r3, [r3, #0]
 8004f5e:	42a3      	cmp	r3, r4
 8004f60:	f000 8148 	beq.w	80051f4 <WCID_STREAMING_Itf_Control+0x488>
              else if(i == mp23abs1_com_id)
 8004f64:	4b47      	ldr	r3, [pc, #284]	; (8005084 <WCID_STREAMING_Itf_Control+0x318>)
 8004f66:	781b      	ldrb	r3, [r3, #0]
 8004f68:	42a3      	cmp	r3, r4
 8004f6a:	f000 8149 	beq.w	8005200 <WCID_STREAMING_Itf_Control+0x494>
              else if(i == ism330dhcx_com_id)
 8004f6e:	4b46      	ldr	r3, [pc, #280]	; (8005088 <WCID_STREAMING_Itf_Control+0x31c>)
 8004f70:	781b      	ldrb	r3, [r3, #0]
 8004f72:	42a3      	cmp	r3, r4
 8004f74:	f000 814a 	beq.w	800520c <WCID_STREAMING_Itf_Control+0x4a0>
              else if(i == lps22hh_com_id)
 8004f78:	4b44      	ldr	r3, [pc, #272]	; (800508c <WCID_STREAMING_Itf_Control+0x320>)
 8004f7a:	781b      	ldrb	r3, [r3, #0]
 8004f7c:	42a3      	cmp	r3, r4
 8004f7e:	f000 814b 	beq.w	8005218 <WCID_STREAMING_Itf_Control+0x4ac>
              else if(i == stts751_com_id)
 8004f82:	4b43      	ldr	r3, [pc, #268]	; (8005090 <WCID_STREAMING_Itf_Control+0x324>)
 8004f84:	781b      	ldrb	r3, [r3, #0]
 8004f86:	42a3      	cmp	r3, r4
 8004f88:	f000 814c 	beq.w	8005224 <WCID_STREAMING_Itf_Control+0x4b8>
              sensor_first_dataReady[i] = 0;
 8004f8c:	2300      	movs	r3, #0
 8004f8e:	55e3      	strb	r3, [r4, r7]
          for (int i = 0; i < myDeviceDescriptor->nSensor; i++)
 8004f90:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 8004f92:	3401      	adds	r4, #1
 8004f94:	42a3      	cmp	r3, r4
 8004f96:	f240 8113 	bls.w	80051c0 <WCID_STREAMING_Itf_Control+0x454>
            myStatus = COM_GetSensorStatus(i);  
 8004f9a:	b2e0      	uxtb	r0, r4
 8004f9c:	f7fc fce8 	bl	8001970 <COM_GetSensorStatus>
            if(myStatus->comChannelNumber != -1)
 8004fa0:	f9b0 3018 	ldrsh.w	r3, [r0, #24]
 8004fa4:	3301      	adds	r3, #1
 8004fa6:	d0f3      	beq.n	8004f90 <WCID_STREAMING_Itf_Control+0x224>
              if(i == iis3dwb_com_id)
 8004fa8:	f898 3000 	ldrb.w	r3, [r8]
 8004fac:	42a3      	cmp	r3, r4
 8004fae:	d1c5      	bne.n	8004f3c <WCID_STREAMING_Itf_Control+0x1d0>
                IIS3DWB_Stop();
 8004fb0:	f7fd fcce 	bl	8002950 <IIS3DWB_Stop>
 8004fb4:	e7ea      	b.n	8004f8c <WCID_STREAMING_Itf_Control+0x220>
        if (outCommand.subSensorId < 0) /* Request is for Sensor, since subSensor was not present in the Json */
 8004fb6:	f995 1013 	ldrsb.w	r1, [r5, #19]
 8004fba:	2900      	cmp	r1, #0
 8004fbc:	f2c0 8089 	blt.w	80050d2 <WCID_STREAMING_Itf_Control+0x366>
          COM_SubSensorStatus_t * mySubSensorStatus = COM_GetSubSensorStatus(outCommand.sensorId, outCommand.subSensorId);           
 8004fc0:	b2c9      	uxtb	r1, r1
 8004fc2:	7ca8      	ldrb	r0, [r5, #18]
 8004fc4:	f7fc fcea 	bl	800199c <COM_GetSubSensorStatus>
          size = HSD_JSON_serialize_SubSensorStatus(mySubSensorStatus, &serialized);     
 8004fc8:	4932      	ldr	r1, [pc, #200]	; (8005094 <WCID_STREAMING_Itf_Control+0x328>)
 8004fca:	f7fc fb63 	bl	8001694 <HSD_JSON_serialize_SubSensorStatus>
 8004fce:	b280      	uxth	r0, r0
 8004fd0:	80e8      	strh	r0, [r5, #6]
      p = serialized;       
 8004fd2:	68aa      	ldr	r2, [r5, #8]
 8004fd4:	60ea      	str	r2, [r5, #12]
      state = STATE_SIZE_SENT;       
 8004fd6:	2302      	movs	r3, #2
      *(uint16_t *)pbuf = size;           
 8004fd8:	8030      	strh	r0, [r6, #0]
      state = STATE_SIZE_SENT;       
 8004fda:	712b      	strb	r3, [r5, #4]
 8004fdc:	e715      	b.n	8004e0a <WCID_STREAMING_Itf_Control+0x9e>
        if (outCommand.subSensorId < 0) /* Request is for Sensor, since subSensor was not present in the Json */
 8004fde:	f995 1013 	ldrsb.w	r1, [r5, #19]
 8004fe2:	2900      	cmp	r1, #0
 8004fe4:	db7e      	blt.n	80050e4 <WCID_STREAMING_Itf_Control+0x378>
          COM_SubSensorDescriptor_t * mySubSensorDescriptor =  COM_GetSubSensorDescriptor(outCommand.sensorId, outCommand.subSensorId);
 8004fe6:	b2c9      	uxtb	r1, r1
 8004fe8:	7ca8      	ldrb	r0, [r5, #18]
 8004fea:	f7fc fccb 	bl	8001984 <COM_GetSubSensorDescriptor>
          size = HSD_JSON_serialize_SubSensorDescriptor(mySubSensorDescriptor, &serialized);
 8004fee:	4929      	ldr	r1, [pc, #164]	; (8005094 <WCID_STREAMING_Itf_Control+0x328>)
 8004ff0:	f7fc fb38 	bl	8001664 <HSD_JSON_serialize_SubSensorDescriptor>
 8004ff4:	b280      	uxth	r0, r0
 8004ff6:	80e8      	strh	r0, [r5, #6]
 8004ff8:	e7eb      	b.n	8004fd2 <WCID_STREAMING_Itf_Control+0x266>
        myDeviceDescriptor = COM_GetDeviceDescriptor();
 8004ffa:	f7fc fca5 	bl	8001948 <COM_GetDeviceDescriptor>
        size = HSD_JSON_serialize_DeviceInfo(myDeviceDescriptor, &serialized);
 8004ffe:	4925      	ldr	r1, [pc, #148]	; (8005094 <WCID_STREAMING_Itf_Control+0x328>)
 8005000:	f7fc fad0 	bl	80015a4 <HSD_JSON_serialize_DeviceInfo>
 8005004:	b280      	uxth	r0, r0
 8005006:	80e8      	strh	r0, [r5, #6]
        break;       
 8005008:	e7e3      	b.n	8004fd2 <WCID_STREAMING_Itf_Control+0x266>
        myDevice = COM_GetDevice();
 800500a:	f7fc fc99 	bl	8001940 <COM_GetDevice>
        size = HSD_JSON_serialize_Device(myDevice, &serialized, SHORT_JSON);
 800500e:	4921      	ldr	r1, [pc, #132]	; (8005094 <WCID_STREAMING_Itf_Control+0x328>)
 8005010:	2200      	movs	r2, #0
 8005012:	f7fc fa5d 	bl	80014d0 <HSD_JSON_serialize_Device>
 8005016:	b280      	uxth	r0, r0
 8005018:	80e8      	strh	r0, [r5, #6]
        break;
 800501a:	e7da      	b.n	8004fd2 <WCID_STREAMING_Itf_Control+0x266>
        return -1; /* error */      
 800501c:	f04f 34ff 	mov.w	r4, #4294967295
 8005020:	e6f4      	b.n	8004e0c <WCID_STREAMING_Itf_Control+0xa0>
 8005022:	3e01      	subs	r6, #1
 8005024:	18ca      	adds	r2, r1, r3
        pbuf[i] = *p++;
 8005026:	f811 0b01 	ldrb.w	r0, [r1], #1
 800502a:	f806 0f01 	strb.w	r0, [r6, #1]!
      for (i = 0; i < length; i++)
 800502e:	4291      	cmp	r1, r2
 8005030:	d1f9      	bne.n	8005026 <WCID_STREAMING_Itf_Control+0x2ba>
 8005032:	e726      	b.n	8004e82 <WCID_STREAMING_Itf_Control+0x116>
 8005034:	4602      	mov	r2, r0
 8005036:	e724      	b.n	8004e82 <WCID_STREAMING_Itf_Control+0x116>
 8005038:	18f0      	adds	r0, r6, r3
 800503a:	f10c 32ff 	add.w	r2, ip, #4294967295
        *p++ = pbuf[i];
 800503e:	f816 1b01 	ldrb.w	r1, [r6], #1
 8005042:	f802 1f01 	strb.w	r1, [r2, #1]!
      for (i = 0; i < length; i ++)
 8005046:	4286      	cmp	r6, r0
 8005048:	d1f9      	bne.n	800503e <WCID_STREAMING_Itf_Control+0x2d2>
 800504a:	e6d6      	b.n	8004dfa <WCID_STREAMING_Itf_Control+0x8e>
 800504c:	88ee      	ldrh	r6, [r5, #6]
      if (size == 0)
 800504e:	2e00      	cmp	r6, #0
 8005050:	f47f aedb 	bne.w	8004e0a <WCID_STREAMING_Itf_Control+0x9e>
 8005054:	e743      	b.n	8004ede <WCID_STREAMING_Itf_Control+0x172>
 8005056:	88ee      	ldrh	r6, [r5, #6]
      if(size == 0)
 8005058:	2e00      	cmp	r6, #0
 800505a:	f47f aed6 	bne.w	8004e0a <WCID_STREAMING_Itf_Control+0x9e>
 800505e:	e716      	b.n	8004e8e <WCID_STREAMING_Itf_Control+0x122>
 8005060:	200005b4 	.word	0x200005b4
 8005064:	200019b0 	.word	0x200019b0
 8005068:	200019c0 	.word	0x200019c0
 800506c:	2001dfcc 	.word	0x2001dfcc
 8005070:	20017340 	.word	0x20017340
 8005074:	200000c8 	.word	0x200000c8
 8005078:	20017654 	.word	0x20017654
 800507c:	20017605 	.word	0x20017605
 8005080:	2001764c 	.word	0x2001764c
 8005084:	20017604 	.word	0x20017604
 8005088:	20017645 	.word	0x20017645
 800508c:	2001765d 	.word	0x2001765d
 8005090:	2001765c 	.word	0x2001765c
 8005094:	200019b8 	.word	0x200019b8
 8005098:	20017330 	.word	0x20017330
 800509c:	20017644 	.word	0x20017644
          myStatus = COM_GetSensorStatus(outCommand.sensorId);
 80050a0:	7ca8      	ldrb	r0, [r5, #18]
 80050a2:	f7fc fc65 	bl	8001970 <COM_GetSensorStatus>
          memcpy(&tempSensor.sensorStatus, myStatus, sizeof(COM_SensorStatus_t));               
 80050a6:	224c      	movs	r2, #76	; 0x4c
 80050a8:	4601      	mov	r1, r0
          myStatus = COM_GetSensorStatus(outCommand.sensorId);
 80050aa:	4607      	mov	r7, r0
          memcpy(&tempSensor.sensorStatus, myStatus, sizeof(COM_SensorStatus_t));               
 80050ac:	4861      	ldr	r0, [pc, #388]	; (8005234 <WCID_STREAMING_Itf_Control+0x4c8>)
 80050ae:	f012 fb69 	bl	8017784 <memcpy>
          HSD_JSON_parse_Status((char *)serialized, &tempSensor.sensorStatus);    
 80050b2:	4960      	ldr	r1, [pc, #384]	; (8005234 <WCID_STREAMING_Itf_Control+0x4c8>)
 80050b4:	68a8      	ldr	r0, [r5, #8]
 80050b6:	f7fc fc25 	bl	8001904 <HSD_JSON_parse_Status>
          HSD_JSON_free(serialized);
 80050ba:	68a8      	ldr	r0, [r5, #8]
 80050bc:	f7fc fa00 	bl	80014c0 <HSD_JSON_free>
          update_sensorStatus(myStatus, &tempSensor.sensorStatus, outCommand.sensorId);
 80050c0:	7caa      	ldrb	r2, [r5, #18]
 80050c2:	495c      	ldr	r1, [pc, #368]	; (8005234 <WCID_STREAMING_Itf_Control+0x4c8>)
 80050c4:	4638      	mov	r0, r7
 80050c6:	f7fd f985 	bl	80023d4 <update_sensorStatus>
          update_sensors_config();        
 80050ca:	f7fd faa7 	bl	800261c <update_sensors_config>
          state = STATE_WAITING;
 80050ce:	712e      	strb	r6, [r5, #4]
 80050d0:	e69c      	b.n	8004e0c <WCID_STREAMING_Itf_Control+0xa0>
          COM_SensorStatus_t * mySensorStatus =  COM_GetSensorStatus(outCommand.sensorId);
 80050d2:	7ca8      	ldrb	r0, [r5, #18]
 80050d4:	f7fc fc4c 	bl	8001970 <COM_GetSensorStatus>
          size = HSD_JSON_serialize_SensorStatus(mySensorStatus, &serialized);
 80050d8:	4957      	ldr	r1, [pc, #348]	; (8005238 <WCID_STREAMING_Itf_Control+0x4cc>)
 80050da:	f7fc faab 	bl	8001634 <HSD_JSON_serialize_SensorStatus>
 80050de:	b280      	uxth	r0, r0
 80050e0:	80e8      	strh	r0, [r5, #6]
 80050e2:	e776      	b.n	8004fd2 <WCID_STREAMING_Itf_Control+0x266>
          COM_SensorDescriptor_t * mySensorDescriptor =  COM_GetSensorDescriptor(outCommand.sensorId);
 80050e4:	7ca8      	ldrb	r0, [r5, #18]
 80050e6:	f7fc fc3b 	bl	8001960 <COM_GetSensorDescriptor>
          size = HSD_JSON_serialize_SensorDescriptor(mySensorDescriptor, &serialized);           
 80050ea:	4953      	ldr	r1, [pc, #332]	; (8005238 <WCID_STREAMING_Itf_Control+0x4cc>)
 80050ec:	f7fc fa8a 	bl	8001604 <HSD_JSON_serialize_SensorDescriptor>
 80050f0:	b280      	uxth	r0, r0
 80050f2:	80e8      	strh	r0, [r5, #6]
 80050f4:	e76d      	b.n	8004fd2 <WCID_STREAMING_Itf_Control+0x266>
          com_status = HS_DATALOG_USB_STARTED;
 80050f6:	703b      	strb	r3, [r7, #0]
          myDeviceDescriptor = COM_GetDeviceDescriptor();
 80050f8:	f7fc fc26 	bl	8001948 <COM_GetDeviceDescriptor>
 80050fc:	4607      	mov	r7, r0
          SM_TIM_Start();
 80050fe:	f7ff fb63 	bl	80047c8 <SM_TIM_Start>
          for (int i = 0; i < myDeviceDescriptor->nSensor; i++)
 8005102:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005104:	2b00      	cmp	r3, #0
 8005106:	d055      	beq.n	80051b4 <WCID_STREAMING_Itf_Control+0x448>
              TxBuffer[myStatus->comChannelNumber] = HSD_calloc((myStatus->usbDataPacketSize *2 +2), sizeof(uint8_t));
 8005108:	f8df a15c 	ldr.w	sl, [pc, #348]	; 8005268 <WCID_STREAMING_Itf_Control+0x4fc>
              USBD_WCID_STREAMING_SetTxDataBuffer(&USBD_Device, myStatus->comChannelNumber, TxBuffer[myStatus->comChannelNumber], myStatus->usbDataPacketSize);
 800510c:	f8df 8154 	ldr.w	r8, [pc, #340]	; 8005264 <WCID_STREAMING_Itf_Control+0x4f8>
          for (int i = 0; i < myDeviceDescriptor->nSensor; i++)
 8005110:	4634      	mov	r4, r6
 8005112:	e003      	b.n	800511c <WCID_STREAMING_Itf_Control+0x3b0>
 8005114:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005116:	3401      	adds	r4, #1
 8005118:	42a3      	cmp	r3, r4
 800511a:	d94b      	bls.n	80051b4 <WCID_STREAMING_Itf_Control+0x448>
            myStatus = COM_GetSensorStatus(i);  
 800511c:	b2e0      	uxtb	r0, r4
 800511e:	f7fc fc27 	bl	8001970 <COM_GetSensorStatus>
            if(myStatus->comChannelNumber != -1 && myStatus->isActive)
 8005122:	f9b0 b018 	ldrsh.w	fp, [r0, #24]
 8005126:	f1bb 3fff 	cmp.w	fp, #4294967295
            myStatus = COM_GetSensorStatus(i);  
 800512a:	4606      	mov	r6, r0
            if(myStatus->comChannelNumber != -1 && myStatus->isActive)
 800512c:	d0f2      	beq.n	8005114 <WCID_STREAMING_Itf_Control+0x3a8>
 800512e:	7b83      	ldrb	r3, [r0, #14]
 8005130:	2b00      	cmp	r3, #0
 8005132:	d0ef      	beq.n	8005114 <WCID_STREAMING_Itf_Control+0x3a8>
              TxBuffer[myStatus->comChannelNumber] = HSD_calloc((myStatus->usbDataPacketSize *2 +2), sizeof(uint8_t));
 8005134:	f8b0 9010 	ldrh.w	r9, [r0, #16]
 8005138:	f109 0001 	add.w	r0, r9, #1
 800513c:	0040      	lsls	r0, r0, #1
 800513e:	2101      	movs	r1, #1
 8005140:	f012 f8be 	bl	80172c0 <calloc>
 8005144:	f84a 002b 	str.w	r0, [sl, fp, lsl #2]
 8005148:	4602      	mov	r2, r0
              if(TxBuffer[myStatus->comChannelNumber] == NULL)
 800514a:	2800      	cmp	r0, #0
 800514c:	d031      	beq.n	80051b2 <WCID_STREAMING_Itf_Control+0x446>
              USBD_WCID_STREAMING_SetTxDataBuffer(&USBD_Device, myStatus->comChannelNumber, TxBuffer[myStatus->comChannelNumber], myStatus->usbDataPacketSize);
 800514e:	464b      	mov	r3, r9
 8005150:	fa5f f18b 	uxtb.w	r1, fp
 8005154:	4640      	mov	r0, r8
 8005156:	f009 f9eb 	bl	800e530 <USBD_WCID_STREAMING_SetTxDataBuffer>
              USBD_WCID_STREAMING_CleanTxDataBuffer(&USBD_Device, myStatus->comChannelNumber);
 800515a:	7e31      	ldrb	r1, [r6, #24]
 800515c:	4640      	mov	r0, r8
 800515e:	f009 f9df 	bl	800e520 <USBD_WCID_STREAMING_CleanTxDataBuffer>
              if(i == iis3dwb_com_id)
 8005162:	4b36      	ldr	r3, [pc, #216]	; (800523c <WCID_STREAMING_Itf_Control+0x4d0>)
 8005164:	781b      	ldrb	r3, [r3, #0]
 8005166:	42a3      	cmp	r3, r4
 8005168:	d02f      	beq.n	80051ca <WCID_STREAMING_Itf_Control+0x45e>
              else if(i == hts221_com_id)
 800516a:	4b35      	ldr	r3, [pc, #212]	; (8005240 <WCID_STREAMING_Itf_Control+0x4d4>)
 800516c:	781b      	ldrb	r3, [r3, #0]
 800516e:	42a3      	cmp	r3, r4
 8005170:	d031      	beq.n	80051d6 <WCID_STREAMING_Itf_Control+0x46a>
              else if(i == iis2dh_com_id)
 8005172:	4b34      	ldr	r3, [pc, #208]	; (8005244 <WCID_STREAMING_Itf_Control+0x4d8>)
 8005174:	781b      	ldrb	r3, [r3, #0]
 8005176:	42a3      	cmp	r3, r4
 8005178:	d033      	beq.n	80051e2 <WCID_STREAMING_Itf_Control+0x476>
              else if(i == iis2mdc_com_id)
 800517a:	4b33      	ldr	r3, [pc, #204]	; (8005248 <WCID_STREAMING_Itf_Control+0x4dc>)
 800517c:	781b      	ldrb	r3, [r3, #0]
 800517e:	42a3      	cmp	r3, r4
 8005180:	d035      	beq.n	80051ee <WCID_STREAMING_Itf_Control+0x482>
              else if(i == imp34dt05_com_id)
 8005182:	4b32      	ldr	r3, [pc, #200]	; (800524c <WCID_STREAMING_Itf_Control+0x4e0>)
 8005184:	781b      	ldrb	r3, [r3, #0]
 8005186:	42a3      	cmp	r3, r4
 8005188:	d037      	beq.n	80051fa <WCID_STREAMING_Itf_Control+0x48e>
              else if(i == mp23abs1_com_id)
 800518a:	4b31      	ldr	r3, [pc, #196]	; (8005250 <WCID_STREAMING_Itf_Control+0x4e4>)
 800518c:	781b      	ldrb	r3, [r3, #0]
 800518e:	42a3      	cmp	r3, r4
 8005190:	d039      	beq.n	8005206 <WCID_STREAMING_Itf_Control+0x49a>
              else if(i == ism330dhcx_com_id)
 8005192:	4b30      	ldr	r3, [pc, #192]	; (8005254 <WCID_STREAMING_Itf_Control+0x4e8>)
 8005194:	781b      	ldrb	r3, [r3, #0]
 8005196:	42a3      	cmp	r3, r4
 8005198:	d03b      	beq.n	8005212 <WCID_STREAMING_Itf_Control+0x4a6>
              else if(i == lps22hh_com_id)
 800519a:	4b2f      	ldr	r3, [pc, #188]	; (8005258 <WCID_STREAMING_Itf_Control+0x4ec>)
 800519c:	781b      	ldrb	r3, [r3, #0]
 800519e:	42a3      	cmp	r3, r4
 80051a0:	d03d      	beq.n	800521e <WCID_STREAMING_Itf_Control+0x4b2>
              else if(i == stts751_com_id)
 80051a2:	4b2e      	ldr	r3, [pc, #184]	; (800525c <WCID_STREAMING_Itf_Control+0x4f0>)
 80051a4:	781b      	ldrb	r3, [r3, #0]
 80051a6:	42a3      	cmp	r3, r4
 80051a8:	d03f      	beq.n	800522a <WCID_STREAMING_Itf_Control+0x4be>
              sensor_first_dataReady[i] = 1;
 80051aa:	4b2d      	ldr	r3, [pc, #180]	; (8005260 <WCID_STREAMING_Itf_Control+0x4f4>)
 80051ac:	2201      	movs	r2, #1
 80051ae:	54e2      	strb	r2, [r4, r3]
 80051b0:	e7b0      	b.n	8005114 <WCID_STREAMING_Itf_Control+0x3a8>
* @param  None
* @retval None
*/
static void _Error_Handler( void )
{
  while (1)
 80051b2:	e7fe      	b.n	80051b2 <WCID_STREAMING_Itf_Control+0x446>
          USBD_WCID_STREAMING_StartStreaming(&USBD_Device);
 80051b4:	482b      	ldr	r0, [pc, #172]	; (8005264 <WCID_STREAMING_Itf_Control+0x4f8>)
          state = STATE_WAITING;
 80051b6:	2400      	movs	r4, #0
          USBD_WCID_STREAMING_StartStreaming(&USBD_Device);
 80051b8:	f009 f9dc 	bl	800e574 <USBD_WCID_STREAMING_StartStreaming>
          state = STATE_WAITING;
 80051bc:	712c      	strb	r4, [r5, #4]
 80051be:	e625      	b.n	8004e0c <WCID_STREAMING_Itf_Control+0xa0>
          state = STATE_WAITING;
 80051c0:	2400      	movs	r4, #0
          SM_TIM_Stop(); 
 80051c2:	f7ff fb07 	bl	80047d4 <SM_TIM_Stop>
          state = STATE_WAITING;
 80051c6:	712c      	strb	r4, [r5, #4]
 80051c8:	e620      	b.n	8004e0c <WCID_STREAMING_Itf_Control+0xa0>
                IIS3DWB_Start();
 80051ca:	f7fd fbb5 	bl	8002938 <IIS3DWB_Start>
 80051ce:	e7ec      	b.n	80051aa <WCID_STREAMING_Itf_Control+0x43e>
                HTS221_Stop();
 80051d0:	f7fd faea 	bl	80027a8 <HTS221_Stop>
 80051d4:	e6da      	b.n	8004f8c <WCID_STREAMING_Itf_Control+0x220>
                HTS221_Start();
 80051d6:	f7fd fadb 	bl	8002790 <HTS221_Start>
 80051da:	e7e6      	b.n	80051aa <WCID_STREAMING_Itf_Control+0x43e>
                IIS2DH_Stop();
 80051dc:	f7fd faf6 	bl	80027cc <IIS2DH_Stop>
 80051e0:	e6d4      	b.n	8004f8c <WCID_STREAMING_Itf_Control+0x220>
                IIS2DH_Start();
 80051e2:	f7fd fae7 	bl	80027b4 <IIS2DH_Start>
 80051e6:	e7e0      	b.n	80051aa <WCID_STREAMING_Itf_Control+0x43e>
                IIS2MDC_Stop();
 80051e8:	f7fd fb02 	bl	80027f0 <IIS2MDC_Stop>
 80051ec:	e6ce      	b.n	8004f8c <WCID_STREAMING_Itf_Control+0x220>
                IIS2MDC_Start();
 80051ee:	f7fd faf3 	bl	80027d8 <IIS2MDC_Start>
 80051f2:	e7da      	b.n	80051aa <WCID_STREAMING_Itf_Control+0x43e>
                IMP34DT05_Stop();
 80051f4:	f7fd fcf0 	bl	8002bd8 <IMP34DT05_Stop>
 80051f8:	e6c8      	b.n	8004f8c <WCID_STREAMING_Itf_Control+0x220>
                IMP34DT05_Start();
 80051fa:	f7fd fce1 	bl	8002bc0 <IMP34DT05_Start>
 80051fe:	e7d4      	b.n	80051aa <WCID_STREAMING_Itf_Control+0x43e>
                MP23ABS1_Stop();              
 8005200:	f7fe f884 	bl	800330c <MP23ABS1_Stop>
 8005204:	e6c2      	b.n	8004f8c <WCID_STREAMING_Itf_Control+0x220>
                MP23ABS1_Start();
 8005206:	f7fe f875 	bl	80032f4 <MP23ABS1_Start>
 800520a:	e7ce      	b.n	80051aa <WCID_STREAMING_Itf_Control+0x43e>
                ISM330DHCX_Stop();
 800520c:	f7fd fcf6 	bl	8002bfc <ISM330DHCX_Stop>
 8005210:	e6bc      	b.n	8004f8c <WCID_STREAMING_Itf_Control+0x220>
                ISM330DHCX_Start();
 8005212:	f7fd fce7 	bl	8002be4 <ISM330DHCX_Start>
 8005216:	e7c8      	b.n	80051aa <WCID_STREAMING_Itf_Control+0x43e>
                LPS22HH_Stop();              
 8005218:	f7fd fd02 	bl	8002c20 <LPS22HH_Stop>
 800521c:	e6b6      	b.n	8004f8c <WCID_STREAMING_Itf_Control+0x220>
                LPS22HH_Start();
 800521e:	f7fd fcf3 	bl	8002c08 <LPS22HH_Start>
 8005222:	e7c2      	b.n	80051aa <WCID_STREAMING_Itf_Control+0x43e>
                STTS751_Stop();          
 8005224:	f7ff fb6c 	bl	8004900 <STTS751_Stop>
 8005228:	e6b0      	b.n	8004f8c <WCID_STREAMING_Itf_Control+0x220>
                STTS751_Start();          
 800522a:	f7ff fb5d 	bl	80048e8 <STTS751_Start>
 800522e:	e7bc      	b.n	80051aa <WCID_STREAMING_Itf_Control+0x43e>
 8005230:	88e8      	ldrh	r0, [r5, #6]
 8005232:	e6ce      	b.n	8004fd2 <WCID_STREAMING_Itf_Control+0x266>
 8005234:	20001b70 	.word	0x20001b70
 8005238:	200019b8 	.word	0x200019b8
 800523c:	20017330 	.word	0x20017330
 8005240:	20017644 	.word	0x20017644
 8005244:	20017654 	.word	0x20017654
 8005248:	20017605 	.word	0x20017605
 800524c:	2001764c 	.word	0x2001764c
 8005250:	20017604 	.word	0x20017604
 8005254:	20017645 	.word	0x20017645
 8005258:	2001765d 	.word	0x2001765d
 800525c:	2001765c 	.word	0x2001765c
 8005260:	200000c8 	.word	0x200000c8
 8005264:	20017340 	.word	0x20017340
 8005268:	2001dfd0 	.word	0x2001dfd0

0800526c <WCID_STREAMING_Itf_Init>:
{
 800526c:	b508      	push	{r3, lr}
  USB_RxBuffer = HSD_calloc(512, sizeof(uint8_t));
 800526e:	2101      	movs	r1, #1
 8005270:	f44f 7000 	mov.w	r0, #512	; 0x200
 8005274:	f012 f824 	bl	80172c0 <calloc>
 8005278:	4b03      	ldr	r3, [pc, #12]	; (8005288 <WCID_STREAMING_Itf_Init+0x1c>)
 800527a:	4601      	mov	r1, r0
  USBD_WCID_STREAMING_SetRxDataBuffer(&USBD_Device, (uint8_t *)USB_RxBuffer);  
 800527c:	4803      	ldr	r0, [pc, #12]	; (800528c <WCID_STREAMING_Itf_Init+0x20>)
  USB_RxBuffer = HSD_calloc(512, sizeof(uint8_t));
 800527e:	6019      	str	r1, [r3, #0]
  USBD_WCID_STREAMING_SetRxDataBuffer(&USBD_Device, (uint8_t *)USB_RxBuffer);  
 8005280:	f009 f8ca 	bl	800e418 <USBD_WCID_STREAMING_SetRxDataBuffer>
}
 8005284:	2000      	movs	r0, #0
 8005286:	bd08      	pop	{r3, pc}
 8005288:	200019b0 	.word	0x200019b0
 800528c:	20017340 	.word	0x20017340

08005290 <iis3dwb_read_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis3dwb_read_reg(stmdev_ctx_t* ctx, uint8_t reg, uint8_t* data,
                           uint16_t len)
{
 8005290:	b410      	push	{r4}
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8005292:	e9d0 4001 	ldrd	r4, r0, [r0, #4]
 8005296:	46a4      	mov	ip, r4
  return ret;
}
 8005298:	f85d 4b04 	ldr.w	r4, [sp], #4
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800529c:	4760      	bx	ip
 800529e:	bf00      	nop

080052a0 <iis3dwb_write_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis3dwb_write_reg(stmdev_ctx_t* ctx, uint8_t reg, uint8_t* data,
                            uint16_t len)
{
 80052a0:	b410      	push	{r4}
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80052a2:	6804      	ldr	r4, [r0, #0]
 80052a4:	6880      	ldr	r0, [r0, #8]
 80052a6:	46a4      	mov	ip, r4
  return ret;
}
 80052a8:	f85d 4b04 	ldr.w	r4, [sp], #4
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80052ac:	4760      	bx	ip
 80052ae:	bf00      	nop

080052b0 <iis3dwb_xl_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t iis3dwb_xl_full_scale_set(stmdev_ctx_t *ctx,
                                    iis3dwb_fs_xl_t val)
{
 80052b0:	b570      	push	{r4, r5, r6, lr}
 80052b2:	b082      	sub	sp, #8
 80052b4:	4604      	mov	r4, r0
 80052b6:	460d      	mov	r5, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80052b8:	e9d0 6001 	ldrd	r6, r0, [r0, #4]
 80052bc:	aa01      	add	r2, sp, #4
 80052be:	2301      	movs	r3, #1
 80052c0:	2110      	movs	r1, #16
 80052c2:	47b0      	blx	r6
  iis3dwb_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = iis3dwb_read_reg(ctx, IIS3DWB_CTRL1_XL, (uint8_t*)&ctrl1_xl, 1);
  if(ret == 0){
 80052c4:	b958      	cbnz	r0, 80052de <iis3dwb_xl_full_scale_set+0x2e>
    ctrl1_xl.fs_xl = (uint8_t)val;
 80052c6:	f89d 3004 	ldrb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80052ca:	6826      	ldr	r6, [r4, #0]
 80052cc:	68a0      	ldr	r0, [r4, #8]
    ctrl1_xl.fs_xl = (uint8_t)val;
 80052ce:	f365 0383 	bfi	r3, r5, #2, #2
 80052d2:	f88d 3004 	strb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80052d6:	aa01      	add	r2, sp, #4
 80052d8:	2301      	movs	r3, #1
 80052da:	2110      	movs	r1, #16
 80052dc:	47b0      	blx	r6
    ret = iis3dwb_write_reg(ctx, IIS3DWB_CTRL1_XL,
                              (uint8_t*)&ctrl1_xl, 1);
  }
  return ret;
}
 80052de:	b002      	add	sp, #8
 80052e0:	bd70      	pop	{r4, r5, r6, pc}
 80052e2:	bf00      	nop

080052e4 <iis3dwb_data_ready_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t iis3dwb_data_ready_mode_set(stmdev_ctx_t *ctx,
                                      iis3dwb_dataready_pulsed_t val)
{
 80052e4:	b570      	push	{r4, r5, r6, lr}
 80052e6:	b082      	sub	sp, #8
 80052e8:	4604      	mov	r4, r0
 80052ea:	460d      	mov	r5, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80052ec:	e9d0 6001 	ldrd	r6, r0, [r0, #4]
 80052f0:	aa01      	add	r2, sp, #4
 80052f2:	2301      	movs	r3, #1
 80052f4:	210b      	movs	r1, #11
 80052f6:	47b0      	blx	r6
  iis3dwb_counter_bdr_reg1_t counter_bdr_reg1;
  int32_t ret;

  ret = iis3dwb_read_reg(ctx, IIS3DWB_COUNTER_BDR_REG1,
                           (uint8_t*)&counter_bdr_reg1, 1);
  if(ret == 0){
 80052f8:	b958      	cbnz	r0, 8005312 <iis3dwb_data_ready_mode_set+0x2e>
    counter_bdr_reg1.dataready_pulsed= (uint8_t)val;
 80052fa:	f89d 3004 	ldrb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80052fe:	6826      	ldr	r6, [r4, #0]
 8005300:	68a0      	ldr	r0, [r4, #8]
    counter_bdr_reg1.dataready_pulsed= (uint8_t)val;
 8005302:	f365 13c7 	bfi	r3, r5, #7, #1
 8005306:	f88d 3004 	strb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800530a:	aa01      	add	r2, sp, #4
 800530c:	2301      	movs	r3, #1
 800530e:	210b      	movs	r1, #11
 8005310:	47b0      	blx	r6
    ret = iis3dwb_write_reg(ctx, IIS3DWB_COUNTER_BDR_REG1,
                              (uint8_t*)&counter_bdr_reg1, 1);
  }
  return ret;
}
 8005312:	b002      	add	sp, #8
 8005314:	bd70      	pop	{r4, r5, r6, pc}
 8005316:	bf00      	nop

08005318 <iis3dwb_device_id_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t iis3dwb_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8005318:	b410      	push	{r4}
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800531a:	e9d0 4001 	ldrd	r4, r0, [r0, #4]
{
 800531e:	460a      	mov	r2, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8005320:	46a4      	mov	ip, r4
 8005322:	2301      	movs	r3, #1
  int32_t ret;
  ret = iis3dwb_read_reg(ctx, IIS3DWB_WHO_AM_I, buff, 1);
  return ret;
}
 8005324:	f85d 4b04 	ldr.w	r4, [sp], #4
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8005328:	210f      	movs	r1, #15
 800532a:	4760      	bx	ip

0800532c <iis3dwb_reset_set>:
  * @param  val    Change the values of sw_reset in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t iis3dwb_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800532c:	b570      	push	{r4, r5, r6, lr}
 800532e:	b082      	sub	sp, #8
 8005330:	4604      	mov	r4, r0
 8005332:	460d      	mov	r5, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8005334:	e9d0 6001 	ldrd	r6, r0, [r0, #4]
 8005338:	aa01      	add	r2, sp, #4
 800533a:	2301      	movs	r3, #1
 800533c:	2112      	movs	r1, #18
 800533e:	47b0      	blx	r6
  iis3dwb_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = iis3dwb_read_reg(ctx, IIS3DWB_CTRL3_C, (uint8_t*)&ctrl3_c, 1);
  if(ret == 0){
 8005340:	b958      	cbnz	r0, 800535a <iis3dwb_reset_set+0x2e>
    ctrl3_c.sw_reset= (uint8_t)val;
 8005342:	f89d 3004 	ldrb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8005346:	6826      	ldr	r6, [r4, #0]
 8005348:	68a0      	ldr	r0, [r4, #8]
    ctrl3_c.sw_reset= (uint8_t)val;
 800534a:	f365 0300 	bfi	r3, r5, #0, #1
 800534e:	f88d 3004 	strb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8005352:	aa01      	add	r2, sp, #4
 8005354:	2301      	movs	r3, #1
 8005356:	2112      	movs	r1, #18
 8005358:	47b0      	blx	r6
    ret = iis3dwb_write_reg(ctx, IIS3DWB_CTRL3_C, (uint8_t*)&ctrl3_c, 1);
  }
  return ret;
}
 800535a:	b002      	add	sp, #8
 800535c:	bd70      	pop	{r4, r5, r6, pc}
 800535e:	bf00      	nop

08005360 <iis3dwb_xl_hp_path_on_out_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t iis3dwb_xl_hp_path_on_out_set(stmdev_ctx_t *ctx,
                                        iis3dwb_hp_slope_xl_en_t val)
{
 8005360:	b570      	push	{r4, r5, r6, lr}
 8005362:	b082      	sub	sp, #8
 8005364:	4604      	mov	r4, r0
 8005366:	460d      	mov	r5, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8005368:	e9d0 6001 	ldrd	r6, r0, [r0, #4]
 800536c:	466a      	mov	r2, sp
 800536e:	2301      	movs	r3, #1
 8005370:	2110      	movs	r1, #16
 8005372:	47b0      	blx	r6
  iis3dwb_ctrl1_xl_t ctrl1_xl;
  iis3dwb_ctrl8_xl_t ctrl8_xl;
  int32_t ret;

  ret = iis3dwb_read_reg(ctx, IIS3DWB_CTRL1_XL, (uint8_t*)&ctrl1_xl, 1);
  if(ret == 0){
 8005374:	bb50      	cbnz	r0, 80053cc <iis3dwb_xl_hp_path_on_out_set+0x6c>
    ctrl1_xl.lpf2_xl_en = ((uint8_t)val & 0x80U) >> 7;
 8005376:	f89d 3000 	ldrb.w	r3, [sp]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800537a:	6826      	ldr	r6, [r4, #0]
 800537c:	68a0      	ldr	r0, [r4, #8]
    ctrl1_xl.lpf2_xl_en = ((uint8_t)val & 0x80U) >> 7;
 800537e:	09ea      	lsrs	r2, r5, #7
 8005380:	f362 0341 	bfi	r3, r2, #1, #1
 8005384:	f88d 3000 	strb.w	r3, [sp]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8005388:	466a      	mov	r2, sp
 800538a:	2301      	movs	r3, #1
 800538c:	2110      	movs	r1, #16
 800538e:	47b0      	blx	r6
    ret = iis3dwb_write_reg(ctx, IIS3DWB_CTRL1_XL, (uint8_t*)&ctrl1_xl, 1);
  }
  if(ret == 0){
 8005390:	b9e0      	cbnz	r0, 80053cc <iis3dwb_xl_hp_path_on_out_set+0x6c>
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8005392:	e9d4 6001 	ldrd	r6, r0, [r4, #4]
 8005396:	aa01      	add	r2, sp, #4
 8005398:	2301      	movs	r3, #1
 800539a:	2117      	movs	r1, #23
 800539c:	47b0      	blx	r6
    ret = iis3dwb_read_reg(ctx, IIS3DWB_CTRL8_XL, (uint8_t*)&ctrl8_xl, 1);
  }
  if(ret == 0){
 800539e:	b9a8      	cbnz	r0, 80053cc <iis3dwb_xl_hp_path_on_out_set+0x6c>
    ctrl8_xl.fds = ((uint8_t)val & 0x10U) >> 4;
 80053a0:	f3c5 1300 	ubfx	r3, r5, #4, #1
 80053a4:	f89d 2004 	ldrb.w	r2, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80053a8:	68a0      	ldr	r0, [r4, #8]
    ctrl8_xl.fds = ((uint8_t)val & 0x10U) >> 4;
 80053aa:	f3c5 1140 	ubfx	r1, r5, #5, #1
 80053ae:	009b      	lsls	r3, r3, #2
 80053b0:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 80053b4:	ea43 1145 	orr.w	r1, r3, r5, lsl #5
 80053b8:	f002 030b 	and.w	r3, r2, #11
 80053bc:	4319      	orrs	r1, r3
 80053be:	f88d 1004 	strb.w	r1, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80053c2:	6825      	ldr	r5, [r4, #0]
 80053c4:	aa01      	add	r2, sp, #4
 80053c6:	2301      	movs	r3, #1
 80053c8:	2117      	movs	r1, #23
 80053ca:	47a8      	blx	r5
    ctrl8_xl.hp_ref_mode_xl = ((uint8_t)val & 0x20U) >> 5;
    ctrl8_xl.hpcf_xl = (uint8_t)val & 0x07U;
    ret = iis3dwb_write_reg(ctx, IIS3DWB_CTRL8_XL, (uint8_t*)&ctrl8_xl, 1);
  }
  return ret;
}
 80053cc:	b002      	add	sp, #8
 80053ce:	bd70      	pop	{r4, r5, r6, pc}

080053d0 <iis3dwb_i2c_interface_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t iis3dwb_i2c_interface_set(stmdev_ctx_t *ctx,
                                    iis3dwb_i2c_disable_t val)
{
 80053d0:	b570      	push	{r4, r5, r6, lr}
 80053d2:	b082      	sub	sp, #8
 80053d4:	4604      	mov	r4, r0
 80053d6:	460d      	mov	r5, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80053d8:	e9d0 6001 	ldrd	r6, r0, [r0, #4]
 80053dc:	aa01      	add	r2, sp, #4
 80053de:	2301      	movs	r3, #1
 80053e0:	2113      	movs	r1, #19
 80053e2:	47b0      	blx	r6
  iis3dwb_ctrl4_c_t ctrl4_c;
  int32_t ret;

  ret = iis3dwb_read_reg(ctx, IIS3DWB_CTRL4_C, (uint8_t*)&ctrl4_c, 1);
  if(ret == 0){
 80053e4:	b958      	cbnz	r0, 80053fe <iis3dwb_i2c_interface_set+0x2e>
    ctrl4_c.i2c_disable= (uint8_t)val;
 80053e6:	f89d 3004 	ldrb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80053ea:	6826      	ldr	r6, [r4, #0]
 80053ec:	68a0      	ldr	r0, [r4, #8]
    ctrl4_c.i2c_disable= (uint8_t)val;
 80053ee:	f365 0382 	bfi	r3, r5, #2, #1
 80053f2:	f88d 3004 	strb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80053f6:	aa01      	add	r2, sp, #4
 80053f8:	2301      	movs	r3, #1
 80053fa:	2113      	movs	r1, #19
 80053fc:	47b0      	blx	r6
    ret = iis3dwb_write_reg(ctx, IIS3DWB_CTRL4_C, (uint8_t*)&ctrl4_c, 1);
  }
  return ret;
}
 80053fe:	b002      	add	sp, #8
 8005400:	bd70      	pop	{r4, r5, r6, pc}
 8005402:	bf00      	nop

08005404 <iis3dwb_pin_int1_route_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t iis3dwb_pin_int1_route_set(stmdev_ctx_t *ctx,
                                     iis3dwb_pin_int1_route_t *val)
{
 8005404:	b570      	push	{r4, r5, r6, lr}
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8005406:	460a      	mov	r2, r1
 8005408:	6806      	ldr	r6, [r0, #0]
{
 800540a:	4604      	mov	r4, r0
 800540c:	460d      	mov	r5, r1
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800540e:	6880      	ldr	r0, [r0, #8]
 8005410:	2301      	movs	r3, #1
 8005412:	210d      	movs	r1, #13
 8005414:	47b0      	blx	r6
  int32_t ret;
  
  ret = iis3dwb_write_reg(ctx, IIS3DWB_INT1_CTRL,
                            (uint8_t*)&val->int1_ctrl, 1);
  if(ret == 0){
 8005416:	b940      	cbnz	r0, 800542a <iis3dwb_pin_int1_route_set+0x26>
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8005418:	1c6a      	adds	r2, r5, #1
 800541a:	6825      	ldr	r5, [r4, #0]
 800541c:	68a0      	ldr	r0, [r4, #8]
 800541e:	46ac      	mov	ip, r5
 8005420:	2301      	movs	r3, #1
    ret = iis3dwb_write_reg(ctx, IIS3DWB_MD1_CFG,
                              (uint8_t*)&val->md1_cfg, 1);
  }
  return ret;
}
 8005422:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8005426:	215e      	movs	r1, #94	; 0x5e
 8005428:	4760      	bx	ip
}
 800542a:	bd70      	pop	{r4, r5, r6, pc}

0800542c <iis3dwb_fifo_watermark_set>:
  * @param  val    Change the values of wtm in reg FIFO_CTRL1
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t iis3dwb_fifo_watermark_set(stmdev_ctx_t *ctx, uint16_t val)
{
 800542c:	b570      	push	{r4, r5, r6, lr}
 800542e:	b082      	sub	sp, #8
 8005430:	4604      	mov	r4, r0
 8005432:	460d      	mov	r5, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8005434:	e9d0 6001 	ldrd	r6, r0, [r0, #4]
 8005438:	aa01      	add	r2, sp, #4
 800543a:	2301      	movs	r3, #1
 800543c:	2108      	movs	r1, #8
 800543e:	47b0      	blx	r6
  iis3dwb_fifo_ctrl2_t fifo_ctrl2;
  int32_t ret;

  ret = iis3dwb_read_reg(ctx, IIS3DWB_FIFO_CTRL2,
                           (uint8_t*)&fifo_ctrl2, 1);
  if(ret == 0){
 8005440:	b9a8      	cbnz	r0, 800546e <iis3dwb_fifo_watermark_set+0x42>
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8005442:	6826      	ldr	r6, [r4, #0]
 8005444:	68a0      	ldr	r0, [r4, #8]
    fifo_ctrl1.wtm = (uint8_t)(0x00FFU & val);
 8005446:	f88d 5000 	strb.w	r5, [sp]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800544a:	2301      	movs	r3, #1
 800544c:	466a      	mov	r2, sp
 800544e:	2107      	movs	r1, #7
 8005450:	47b0      	blx	r6
    ret = iis3dwb_write_reg(ctx, IIS3DWB_FIFO_CTRL1,
                              (uint8_t*)&fifo_ctrl1, 1);
  }
  if(ret == 0){
 8005452:	b960      	cbnz	r0, 800546e <iis3dwb_fifo_watermark_set+0x42>
    fifo_ctrl2.wtm = (uint8_t)(( 0x0100U & val ) >> 8);
 8005454:	f89d 3004 	ldrb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8005458:	6826      	ldr	r6, [r4, #0]
 800545a:	68a0      	ldr	r0, [r4, #8]
    fifo_ctrl2.wtm = (uint8_t)(( 0x0100U & val ) >> 8);
 800545c:	0a2d      	lsrs	r5, r5, #8
 800545e:	f365 0300 	bfi	r3, r5, #0, #1
 8005462:	f88d 3004 	strb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8005466:	aa01      	add	r2, sp, #4
 8005468:	2301      	movs	r3, #1
 800546a:	2108      	movs	r1, #8
 800546c:	47b0      	blx	r6
    ret = iis3dwb_write_reg(ctx, IIS3DWB_FIFO_CTRL2,
                              (uint8_t*)&fifo_ctrl2, 1);
  }
  return ret;
}
 800546e:	b002      	add	sp, #8
 8005470:	bd70      	pop	{r4, r5, r6, pc}
 8005472:	bf00      	nop

08005474 <iis3dwb_fifo_xl_batch_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t iis3dwb_fifo_xl_batch_set(stmdev_ctx_t *ctx,
                                    iis3dwb_bdr_xl_t val)
{
 8005474:	b570      	push	{r4, r5, r6, lr}
 8005476:	b082      	sub	sp, #8
 8005478:	4604      	mov	r4, r0
 800547a:	460d      	mov	r5, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800547c:	e9d0 6001 	ldrd	r6, r0, [r0, #4]
 8005480:	aa01      	add	r2, sp, #4
 8005482:	2301      	movs	r3, #1
 8005484:	2109      	movs	r1, #9
 8005486:	47b0      	blx	r6
  iis3dwb_fifo_ctrl3_t fifo_ctrl3;
  int32_t ret;

  ret = iis3dwb_read_reg(ctx, IIS3DWB_FIFO_CTRL3,
                           (uint8_t*)&fifo_ctrl3, 1);
  if(ret == 0){
 8005488:	b958      	cbnz	r0, 80054a2 <iis3dwb_fifo_xl_batch_set+0x2e>
    fifo_ctrl3.bdr_xl= (uint8_t)val;
 800548a:	f89d 3004 	ldrb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800548e:	6826      	ldr	r6, [r4, #0]
 8005490:	68a0      	ldr	r0, [r4, #8]
    fifo_ctrl3.bdr_xl= (uint8_t)val;
 8005492:	f365 0303 	bfi	r3, r5, #0, #4
 8005496:	f88d 3004 	strb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800549a:	aa01      	add	r2, sp, #4
 800549c:	2301      	movs	r3, #1
 800549e:	2109      	movs	r1, #9
 80054a0:	47b0      	blx	r6
    ret = iis3dwb_write_reg(ctx, IIS3DWB_FIFO_CTRL3,
                              (uint8_t*)&fifo_ctrl3, 1);
  }
  return ret;
}
 80054a2:	b002      	add	sp, #8
 80054a4:	bd70      	pop	{r4, r5, r6, pc}
 80054a6:	bf00      	nop

080054a8 <iis3dwb_fifo_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t iis3dwb_fifo_mode_set(stmdev_ctx_t *ctx,
                                iis3dwb_fifo_mode_t val)
{
 80054a8:	b570      	push	{r4, r5, r6, lr}
 80054aa:	b082      	sub	sp, #8
 80054ac:	4604      	mov	r4, r0
 80054ae:	460d      	mov	r5, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80054b0:	e9d0 6001 	ldrd	r6, r0, [r0, #4]
 80054b4:	aa01      	add	r2, sp, #4
 80054b6:	2301      	movs	r3, #1
 80054b8:	210a      	movs	r1, #10
 80054ba:	47b0      	blx	r6
  iis3dwb_fifo_ctrl4_t fifo_ctrl4;
  int32_t ret;

  ret = iis3dwb_read_reg(ctx, IIS3DWB_FIFO_CTRL4,
                           (uint8_t*)&fifo_ctrl4, 1);
  if(ret == 0){
 80054bc:	b958      	cbnz	r0, 80054d6 <iis3dwb_fifo_mode_set+0x2e>
    fifo_ctrl4.fifo_mode= (uint8_t)val;
 80054be:	f89d 3004 	ldrb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80054c2:	6826      	ldr	r6, [r4, #0]
 80054c4:	68a0      	ldr	r0, [r4, #8]
    fifo_ctrl4.fifo_mode= (uint8_t)val;
 80054c6:	f365 0302 	bfi	r3, r5, #0, #3
 80054ca:	f88d 3004 	strb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80054ce:	aa01      	add	r2, sp, #4
 80054d0:	2301      	movs	r3, #1
 80054d2:	210a      	movs	r1, #10
 80054d4:	47b0      	blx	r6
    ret = iis3dwb_write_reg(ctx, IIS3DWB_FIFO_CTRL4,
                              (uint8_t*)&fifo_ctrl4, 1);
  }
  return ret;
}
 80054d6:	b002      	add	sp, #8
 80054d8:	bd70      	pop	{r4, r5, r6, pc}
 80054da:	bf00      	nop

080054dc <BSP_ADC1_Initialization>:
* @param  ADC_InitFor who wants to Init the ADC: Audio or Battery Charger
* @retval BSP_ERROR_NONE in case of success
* @retval BSP_ERROR_PERIPH_FAILURE in case of failures
*/
int32_t BSP_ADC1_Initialization(ADC_InitUsedDef ADC_InitFor)
{
 80054dc:	b570      	push	{r4, r5, r6, lr}
  /* If the ADC is not yet initialized */
  if(ADC_UsedFor == ADC1_NOT_USED){
 80054de:	4e1a      	ldr	r6, [pc, #104]	; (8005548 <BSP_ADC1_Initialization+0x6c>)
 80054e0:	7833      	ldrb	r3, [r6, #0]
{
 80054e2:	4605      	mov	r5, r0
  if(ADC_UsedFor == ADC1_NOT_USED){
 80054e4:	b123      	cbz	r3, 80054f0 <BSP_ADC1_Initialization+0x14>
      return BSP_ERROR_PERIPH_FAILURE;
    } 
  }

  /* Set that we had Initiliazed the ADC for Audio or For Battery Charger */
  ADC_UsedFor |= ADC_InitFor;
 80054e6:	ea45 0003 	orr.w	r0, r5, r3
 80054ea:	7030      	strb	r0, [r6, #0]

  return BSP_ERROR_NONE;
 80054ec:	2000      	movs	r0, #0
}
 80054ee:	bd70      	pop	{r4, r5, r6, pc}
    ADC1_Handle.Instance = ADC1;
 80054f0:	4c16      	ldr	r4, [pc, #88]	; (800554c <BSP_ADC1_Initialization+0x70>)
 80054f2:	4917      	ldr	r1, [pc, #92]	; (8005550 <BSP_ADC1_Initialization+0x74>)
    ADC1_Handle.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80054f4:	6063      	str	r3, [r4, #4]
    ADC1_Handle.Init.LowPowerAutoWait = DISABLE;
 80054f6:	f44f 7280 	mov.w	r2, #256	; 0x100
    ADC1_Handle.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80054fa:	e9c4 3302 	strd	r3, r3, [r4, #8]
    ADC1_Handle.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80054fe:	e9c4 330a 	strd	r3, r3, [r4, #40]	; 0x28
    ADC1_Handle.Init.Oversampling.TriggeredMode         = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;         /* Specifies whether or not a trigger is needed for each sample */
 8005502:	e9c4 3310 	strd	r3, r3, [r4, #64]	; 0x40
    ADC1_Handle.Init.ScanConvMode = (uint32_t)DISABLE;
 8005506:	6123      	str	r3, [r4, #16]
    ADC1_Handle.Init.DiscontinuousConvMode = DISABLE;
 8005508:	f884 3020 	strb.w	r3, [r4, #32]
    ADC1_Handle.Init.DMAContinuousRequests = DISABLE;
 800550c:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
    ADC1_Handle.Init.OversamplingMode = DISABLE;
 8005510:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
    ADC1_Handle.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8005514:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    ADC1_Handle.Init.LowPowerAutoWait = DISABLE;
 8005518:	8322      	strh	r2, [r4, #24]
    ADC1_Handle.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800551a:	6363      	str	r3, [r4, #52]	; 0x34
    ADC1_Handle.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800551c:	2204      	movs	r2, #4
    ADC1_Handle.Init.NbrOfConversion = 1; 
 800551e:	2301      	movs	r3, #1
    if(HAL_ADC_Init(&ADC1_Handle) != HAL_OK)
 8005520:	4620      	mov	r0, r4
    ADC1_Handle.Instance = ADC1;
 8005522:	6021      	str	r1, [r4, #0]
    ADC1_Handle.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8005524:	6162      	str	r2, [r4, #20]
    ADC1_Handle.Init.DFSDMConfig = ADC_DFSDM_MODE_ENABLE;
 8005526:	64e2      	str	r2, [r4, #76]	; 0x4c
    ADC1_Handle.Init.NbrOfConversion = 1; 
 8005528:	61e3      	str	r3, [r4, #28]
    ADC1_Handle.Init.NbrOfDiscConversion      = 1;
 800552a:	6263      	str	r3, [r4, #36]	; 0x24
    ADC1_Handle.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE; /* Specifies whether or not the oversampling buffer is maintained during injection sequence */    
 800552c:	64a3      	str	r3, [r4, #72]	; 0x48
    if(HAL_ADC_Init(&ADC1_Handle) != HAL_OK)
 800552e:	f000 fda3 	bl	8006078 <HAL_ADC_Init>
 8005532:	b930      	cbnz	r0, 8005542 <BSP_ADC1_Initialization+0x66>
    if (HAL_ADCEx_Calibration_Start(&ADC1_Handle, ADC_SINGLE_ENDED) != HAL_OK)
 8005534:	4620      	mov	r0, r4
 8005536:	217f      	movs	r1, #127	; 0x7f
 8005538:	f001 f806 	bl	8006548 <HAL_ADCEx_Calibration_Start>
 800553c:	b908      	cbnz	r0, 8005542 <BSP_ADC1_Initialization+0x66>
 800553e:	7833      	ldrb	r3, [r6, #0]
 8005540:	e7d1      	b.n	80054e6 <BSP_ADC1_Initialization+0xa>
      return BSP_ERROR_PERIPH_FAILURE;
 8005542:	f06f 0003 	mvn.w	r0, #3
}
 8005546:	bd70      	pop	{r4, r5, r6, pc}
 8005548:	20001bbc 	.word	0x20001bbc
 800554c:	2001dff4 	.word	0x2001dff4
 8005550:	50040000 	.word	0x50040000

08005554 <HAL_ADC_MspInit>:
void HAL_ADC_MspInit(ADC_HandleTypeDef *hadc)
{ 
  UNUSED(hadc);
  /*##-1- Enable peripherals  ################################################*/
  /* ADC Periph clock enable */
  __HAL_RCC_ADC_CLK_ENABLE();
 8005554:	4b0a      	ldr	r3, [pc, #40]	; (8005580 <HAL_ADC_MspInit+0x2c>)
 8005556:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005558:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800555c:	64da      	str	r2, [r3, #76]	; 0x4c
 800555e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
{ 
 8005560:	b082      	sub	sp, #8
  __HAL_RCC_ADC_CLK_ENABLE();
 8005562:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8005566:	9201      	str	r2, [sp, #4]
 8005568:	9a01      	ldr	r2, [sp, #4]
  /* ADC Periph interface clock configuration */
  __HAL_RCC_ADC_CONFIG(RCC_ADCCLKSOURCE_PLLSAI1);
 800556a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800556e:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005572:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005576:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 800557a:	b002      	add	sp, #8
 800557c:	4770      	bx	lr
 800557e:	bf00      	nop
 8005580:	40021000 	.word	0x40021000

08005584 <BSP_PB_PWR_Init>:
*/
void BSP_PB_PWR_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct;
  
  POWER_BUTTON_GPIO_CLK_ENABLE();
 8005584:	4b11      	ldr	r3, [pc, #68]	; (80055cc <BSP_PB_PWR_Init+0x48>)
  GPIO_InitStruct.Pin = POWER_BUTTON_PIN;
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  
  HAL_GPIO_Init(POWER_BUTTON_GPIO_PORT, &GPIO_InitStruct);
 8005586:	4812      	ldr	r0, [pc, #72]	; (80055d0 <BSP_PB_PWR_Init+0x4c>)
  POWER_BUTTON_GPIO_CLK_ENABLE();
 8005588:	6cda      	ldr	r2, [r3, #76]	; 0x4c
{
 800558a:	b570      	push	{r4, r5, r6, lr}
  POWER_BUTTON_GPIO_CLK_ENABLE();
 800558c:	f042 0208 	orr.w	r2, r2, #8
 8005590:	64da      	str	r2, [r3, #76]	; 0x4c
 8005592:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
  GPIO_InitStruct.Pin = POWER_BUTTON_PIN;
 8005594:	4d0f      	ldr	r5, [pc, #60]	; (80055d4 <BSP_PB_PWR_Init+0x50>)
{
 8005596:	b088      	sub	sp, #32
  POWER_BUTTON_GPIO_CLK_ENABLE();
 8005598:	f003 0308 	and.w	r3, r3, #8
 800559c:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Pin = POWER_BUTTON_PIN;
 800559e:	2202      	movs	r2, #2
 80055a0:	2302      	movs	r3, #2
  HAL_GPIO_Init(POWER_BUTTON_GPIO_PORT, &GPIO_InitStruct);
 80055a2:	a902      	add	r1, sp, #8
  GPIO_InitStruct.Pin = POWER_BUTTON_PIN;
 80055a4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80055a8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80055ac:	e9cd 4502 	strd	r4, r5, [sp, #8]
  POWER_BUTTON_GPIO_CLK_ENABLE();
 80055b0:	9e01      	ldr	r6, [sp, #4]
  HAL_GPIO_Init(POWER_BUTTON_GPIO_PORT, &GPIO_InitStruct);
 80055b2:	f001 fcdd 	bl	8006f70 <HAL_GPIO_Init>
  
  /* Enable and set Button EXTI Interrupt to the lowest priority */
  HAL_NVIC_SetPriority((IRQn_Type) POWER_BUTTON_EXTI_IRQn, 0x0F, 0x00);
 80055b6:	2200      	movs	r2, #0
 80055b8:	210f      	movs	r1, #15
 80055ba:	2028      	movs	r0, #40	; 0x28
 80055bc:	f001 fae2 	bl	8006b84 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ((IRQn_Type) POWER_BUTTON_EXTI_IRQn);
 80055c0:	2028      	movs	r0, #40	; 0x28
 80055c2:	f001 fb17 	bl	8006bf4 <HAL_NVIC_EnableIRQ>
  
}
 80055c6:	b008      	add	sp, #32
 80055c8:	bd70      	pop	{r4, r5, r6, pc}
 80055ca:	bf00      	nop
 80055cc:	40021000 	.word	0x40021000
 80055d0:	48000c00 	.word	0x48000c00
 80055d4:	10110000 	.word	0x10110000

080055d8 <BSP_Enable_DCDC2>:
*/
void BSP_Enable_DCDC2(void)
{
  GPIO_InitTypeDef  GPIO_InitStruct;

  __HAL_RCC_GPIOE_CLK_ENABLE();
 80055d8:	4b10      	ldr	r3, [pc, #64]	; (800561c <BSP_Enable_DCDC2+0x44>)
  GPIO_InitStruct.Pin = GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
  
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80055da:	4811      	ldr	r0, [pc, #68]	; (8005620 <BSP_Enable_DCDC2+0x48>)
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80055dc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
{
 80055de:	b510      	push	{r4, lr}
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80055e0:	f042 0210 	orr.w	r2, r2, #16
 80055e4:	64da      	str	r2, [r3, #76]	; 0x4c
 80055e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
{
 80055e8:	b088      	sub	sp, #32
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80055ea:	f003 0310 	and.w	r3, r3, #16
 80055ee:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80055f0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80055f4:	2301      	movs	r3, #1
 80055f6:	e9cd 2302 	strd	r2, r3, [sp, #8]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80055fa:	a902      	add	r1, sp, #8
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80055fc:	2302      	movs	r3, #2
 80055fe:	2200      	movs	r2, #0
 8005600:	e9cd 2304 	strd	r2, r3, [sp, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8005604:	9c01      	ldr	r4, [sp, #4]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005606:	f001 fcb3 	bl	8006f70 <HAL_GPIO_Init>
  
   HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, GPIO_PIN_SET);
 800560a:	4805      	ldr	r0, [pc, #20]	; (8005620 <BSP_Enable_DCDC2+0x48>)
 800560c:	2201      	movs	r2, #1
 800560e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005612:	f001 fdd3 	bl	80071bc <HAL_GPIO_WritePin>
}
 8005616:	b008      	add	sp, #32
 8005618:	bd10      	pop	{r4, pc}
 800561a:	bf00      	nop
 800561c:	40021000 	.word	0x40021000
 8005620:	48001000 	.word	0x48001000

08005624 <BSP_PB_Init>:
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
  GPIO_InitTypeDef GPIO_InitStruct;

  /* Enable the BUTTON Clock */
  BUTTONx_GPIO_CLK_ENABLE(Button);
 8005624:	4b18      	ldr	r3, [pc, #96]	; (8005688 <BSP_PB_Init+0x64>)
{
 8005626:	b530      	push	{r4, r5, lr}
  BUTTONx_GPIO_CLK_ENABLE(Button);
 8005628:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800562a:	f042 0210 	orr.w	r2, r2, #16
 800562e:	64da      	str	r2, [r3, #76]	; 0x4c
 8005630:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
{
 8005632:	b089      	sub	sp, #36	; 0x24
  BUTTONx_GPIO_CLK_ENABLE(Button);
 8005634:	f003 0310 	and.w	r3, r3, #16
 8005638:	9301      	str	r3, [sp, #4]
 800563a:	9b01      	ldr	r3, [sp, #4]

  if (ButtonMode == BUTTON_MODE_GPIO)
 800563c:	b971      	cbnz	r1, 800565c <BSP_PB_Init+0x38>
  {
    /* Configure Button pin as input */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 800563e:	2202      	movs	r2, #2
 8005640:	2302      	movs	r3, #2
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 8005642:	4812      	ldr	r0, [pc, #72]	; (800568c <BSP_PB_Init+0x68>)
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 8005644:	2401      	movs	r4, #1
 8005646:	2500      	movs	r5, #0
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 8005648:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 800564a:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800564e:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 8005652:	f001 fc8d 	bl	8006f70 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
  }

  return BSP_ERROR_NONE;  
}
 8005656:	2000      	movs	r0, #0
 8005658:	b009      	add	sp, #36	; 0x24
 800565a:	bd30      	pop	{r4, r5, pc}
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 800565c:	4b0c      	ldr	r3, [pc, #48]	; (8005690 <BSP_PB_Init+0x6c>)
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 800565e:	480b      	ldr	r0, [pc, #44]	; (800568c <BSP_PB_Init+0x68>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005660:	2400      	movs	r4, #0
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 8005662:	2201      	movs	r2, #1
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 8005664:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 8005666:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800566a:	9404      	str	r4, [sp, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 800566c:	f001 fc80 	bl	8006f70 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 8005670:	4622      	mov	r2, r4
 8005672:	210f      	movs	r1, #15
 8005674:	2006      	movs	r0, #6
 8005676:	f001 fa85 	bl	8006b84 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 800567a:	2006      	movs	r0, #6
 800567c:	f001 faba 	bl	8006bf4 <HAL_NVIC_EnableIRQ>
}
 8005680:	2000      	movs	r0, #0
 8005682:	b009      	add	sp, #36	; 0x24
 8005684:	bd30      	pop	{r4, r5, pc}
 8005686:	bf00      	nop
 8005688:	40021000 	.word	0x40021000
 800568c:	48001000 	.word	0x48001000
 8005690:	10210000 	.word	0x10210000

08005694 <BSP_LED_Init>:
*          This parameter can be one of the following values:
*            @arg  LED1
* @retval None
*/
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8005694:	b510      	push	{r4, lr}
  GPIO_InitTypeDef  GPIO_InitStruct;

  /* Enable the GPIO_LED clock */
  LEDx_GPIO_CLK_ENABLE((int8_t)Led);
 8005696:	4b14      	ldr	r3, [pc, #80]	; (80056e8 <BSP_LED_Init+0x54>)
{
 8005698:	b088      	sub	sp, #32
  LEDx_GPIO_CLK_ENABLE((int8_t)Led);
 800569a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800569c:	b9d0      	cbnz	r0, 80056d4 <BSP_LED_Init+0x40>
 800569e:	f042 0210 	orr.w	r2, r2, #16
 80056a2:	64da      	str	r2, [r3, #76]	; 0x4c
 80056a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80056a6:	f003 0310 	and.w	r3, r3, #16
 80056aa:	9301      	str	r3, [sp, #4]
 80056ac:	9b01      	ldr	r3, [sp, #4]
  
  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 80056ae:	4b0f      	ldr	r3, [pc, #60]	; (80056ec <BSP_LED_Init+0x58>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
  
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 80056b0:	eb03 0280 	add.w	r2, r3, r0, lsl #2
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 80056b4:	f833 3010 	ldrh.w	r3, [r3, r0, lsl #1]
 80056b8:	9303      	str	r3, [sp, #12]
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 80056ba:	6850      	ldr	r0, [r2, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80056bc:	2400      	movs	r4, #0
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80056be:	2201      	movs	r2, #1
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 80056c0:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 80056c2:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80056c4:	e9cd 2404 	strd	r2, r4, [sp, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 80056c8:	9306      	str	r3, [sp, #24]
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 80056ca:	f001 fc51 	bl	8006f70 <HAL_GPIO_Init>
  
  return BSP_ERROR_NONE;    
}
 80056ce:	4620      	mov	r0, r4
 80056d0:	b008      	add	sp, #32
 80056d2:	bd10      	pop	{r4, pc}
  LEDx_GPIO_CLK_ENABLE((int8_t)Led);
 80056d4:	f042 0208 	orr.w	r2, r2, #8
 80056d8:	64da      	str	r2, [r3, #76]	; 0x4c
 80056da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80056dc:	f003 0308 	and.w	r3, r3, #8
 80056e0:	9302      	str	r3, [sp, #8]
 80056e2:	9b02      	ldr	r3, [sp, #8]
 80056e4:	e7e3      	b.n	80056ae <BSP_LED_Init+0x1a>
 80056e6:	bf00      	nop
 80056e8:	40021000 	.word	0x40021000
 80056ec:	0801b8d8 	.word	0x0801b8d8

080056f0 <BSP_LED_On>:
*            @arg  LED1
*            @arg  LED2
* @retval None
*/
int32_t BSP_LED_On(Led_TypeDef Led)
{
 80056f0:	b508      	push	{r3, lr}
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET);
 80056f2:	4b05      	ldr	r3, [pc, #20]	; (8005708 <BSP_LED_On+0x18>)
 80056f4:	eb03 0280 	add.w	r2, r3, r0, lsl #2
 80056f8:	f833 1010 	ldrh.w	r1, [r3, r0, lsl #1]
 80056fc:	6850      	ldr	r0, [r2, #4]
 80056fe:	2201      	movs	r2, #1
 8005700:	f001 fd5c 	bl	80071bc <HAL_GPIO_WritePin>
  return BSP_ERROR_NONE;    
}
 8005704:	2000      	movs	r0, #0
 8005706:	bd08      	pop	{r3, pc}
 8005708:	0801b8d8 	.word	0x0801b8d8

0800570c <BSP_LED_Off>:
*            @arg  LED1
*            @arg  LED2
* @retval None
*/
int32_t BSP_LED_Off(Led_TypeDef Led)
{
 800570c:	b508      	push	{r3, lr}
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET);
 800570e:	4b05      	ldr	r3, [pc, #20]	; (8005724 <BSP_LED_Off+0x18>)
 8005710:	eb03 0280 	add.w	r2, r3, r0, lsl #2
 8005714:	f833 1010 	ldrh.w	r1, [r3, r0, lsl #1]
 8005718:	6850      	ldr	r0, [r2, #4]
 800571a:	2200      	movs	r2, #0
 800571c:	f001 fd4e 	bl	80071bc <HAL_GPIO_WritePin>
  return BSP_ERROR_NONE;    
}
 8005720:	2000      	movs	r0, #0
 8005722:	bd08      	pop	{r3, pc}
 8005724:	0801b8d8 	.word	0x0801b8d8

08005728 <BSP_BC_CmdSend>:
  * @param stbc02_SwCmd The command to be sent
  * @retval 0 in case of success
  * @retval 1 in case of failure
  */
int32_t BSP_BC_CmdSend(stbc02_SwCmd_TypeDef stbc02_SwCmd)
{
 8005728:	b570      	push	{r4, r5, r6, lr}
 800572a:	4604      	mov	r4, r0
  uint32_t tk = STBC02_GetTick();
 800572c:	f000 fc84 	bl	8006038 <HAL_GetTick>
  
  stbc02_SwCmdSel = stbc02_SwCmd;
 8005730:	4d0d      	ldr	r5, [pc, #52]	; (8005768 <BSP_BC_CmdSend+0x40>)
  uint32_t tk = STBC02_GetTick();
 8005732:	4606      	mov	r6, r0
  stbc02_SwState = start;
 8005734:	2301      	movs	r3, #1
  
  /* Start the time base */
  (void)HAL_TIM_Base_Start_IT(&hstbc02_UsedTim);
 8005736:	480d      	ldr	r0, [pc, #52]	; (800576c <BSP_BC_CmdSend+0x44>)
  stbc02_SwCmdSel = stbc02_SwCmd;
 8005738:	f885 4040 	strb.w	r4, [r5, #64]	; 0x40
  stbc02_SwState = start;
 800573c:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
  (void)HAL_TIM_Base_Start_IT(&hstbc02_UsedTim);
 8005740:	f006 f932 	bl	800b9a8 <HAL_TIM_Base_Start_IT>
    
  while(stbc02_SwState != idle)
 8005744:	e004      	b.n	8005750 <BSP_BC_CmdSend+0x28>
  {
    if ( (STBC02_GetTick() - tk) > 10U )
 8005746:	f000 fc77 	bl	8006038 <HAL_GetTick>
 800574a:	1b80      	subs	r0, r0, r6
 800574c:	280a      	cmp	r0, #10
 800574e:	d808      	bhi.n	8005762 <BSP_BC_CmdSend+0x3a>
  while(stbc02_SwState != idle)
 8005750:	f895 4041 	ldrb.w	r4, [r5, #65]	; 0x41
 8005754:	2c00      	cmp	r4, #0
 8005756:	d1f6      	bne.n	8005746 <BSP_BC_CmdSend+0x1e>
    {
      return 1;
    }
  }
    /* Stop the time base */
  (void)HAL_TIM_Base_Stop_IT(&hstbc02_UsedTim);
 8005758:	4804      	ldr	r0, [pc, #16]	; (800576c <BSP_BC_CmdSend+0x44>)
 800575a:	f006 f93b 	bl	800b9d4 <HAL_TIM_Base_Stop_IT>
  
  return 0;
 800575e:	4620      	mov	r0, r4
}
 8005760:	bd70      	pop	{r4, r5, r6, pc}
      return 1;
 8005762:	2001      	movs	r0, #1
}
 8005764:	bd70      	pop	{r4, r5, r6, pc}
 8005766:	bf00      	nop
 8005768:	20001c50 	.word	0x20001c50
 800576c:	2001e088 	.word	0x2001e088

08005770 <BSP_BC_BatMS_Init>:
* @param  None
* @retval BSP_ERROR_NONE in case of success
* @retval BSP_ERROR_COMPONENT_FAILURE in case of failures
*/
int32_t BSP_BC_BatMS_Init(void)
{
 8005770:	b530      	push	{r4, r5, lr}
   /* Enable ADC1 if it's necessary */
  (void)BSP_ADC1_Initialization(ADC1_FOR_BC);
 8005772:	2002      	movs	r0, #2
{
 8005774:	b097      	sub	sp, #92	; 0x5c
  (void)BSP_ADC1_Initialization(ADC1_FOR_BC);
 8005776:	f7ff feb1 	bl	80054dc <BSP_ADC1_Initialization>
  * @retval 0 in case of success
  * @retval 1 in case of failure
*/
static int32_t Channel_ADC1_Init(void)
{
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 800577a:	2234      	movs	r2, #52	; 0x34
 800577c:	2100      	movs	r1, #0
 800577e:	a808      	add	r0, sp, #32
 8005780:	f012 f828 	bl	80177d4 <memset>
  static uint8_t ADC_stopped=0;
  uint32_t ADC_Status;
  
  
  ADC_Status= HAL_ADC_GetState(&ADC1_Handle);
 8005784:	4827      	ldr	r0, [pc, #156]	; (8005824 <BSP_BC_BatMS_Init+0xb4>)
 8005786:	f000 fd85 	bl	8006294 <HAL_ADC_GetState>
  if ((ADC_Status & HAL_ADC_STATE_REG_BUSY) == HAL_ADC_STATE_REG_BUSY)
 800578a:	05c3      	lsls	r3, r0, #23
 800578c:	d43c      	bmi.n	8005808 <BSP_BC_BatMS_Init+0x98>
 800578e:	4c26      	ldr	r4, [pc, #152]	; (8005828 <BSP_BC_BatMS_Init+0xb8>)
    ADC_stopped=1;
  }

    
  /* Configure ADC injected channel */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_13;
 8005790:	4826      	ldr	r0, [pc, #152]	; (800582c <BSP_BC_BatMS_Init+0xbc>)
 8005792:	2108      	movs	r1, #8
 8005794:	2207      	movs	r2, #7
 8005796:	237f      	movs	r3, #127	; 0x7f
 8005798:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800579c:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80057a0:	2004      	movs	r0, #4
 80057a2:	2100      	movs	r1, #0
  sConfigInjected.InjectedOffset = 0;
  sConfigInjected.InjectedNbrOfConversion = 1;
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
  sConfigInjected.AutoInjectedConv = DISABLE;
  sConfigInjected.QueueInjectedContext = DISABLE;
  sConfigInjected.ExternalTrigInjecConv = ADC_INJECTED_SOFTWARE_START;
 80057a4:	2200      	movs	r2, #0
 80057a6:	2300      	movs	r3, #0
  sConfigInjected.InjectedChannel = ADC_CHANNEL_13;
 80057a8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
  sConfigInjected.ExternalTrigInjecConv = ADC_INJECTED_SOFTWARE_START;
 80057ac:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
  STBC02_BATMS_GPIO_CLK_ENABLE();
 80057b0:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 80057b4:	2300      	movs	r3, #0
  STBC02_BATMS_GPIO_CLK_ENABLE();
 80057b6:	f502 3204 	add.w	r2, r2, #135168	; 0x21000
  sConfigInjected.InjectedNbrOfConversion = 1;
 80057ba:	2101      	movs	r1, #1
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80057bc:	9306      	str	r3, [sp, #24]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 80057be:	f8ad 303c 	strh.w	r3, [sp, #60]	; 0x3c
  sConfigInjected.QueueInjectedContext = DISABLE;
 80057c2:	f88d 303e 	strb.w	r3, [sp, #62]	; 0x3e
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_NONE;
  sConfigInjected.InjecOversamplingMode = DISABLE; 
 80057c6:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80057ca:	9305      	str	r3, [sp, #20]
  sConfigInjected.InjectedNbrOfConversion = 1;
 80057cc:	910e      	str	r1, [sp, #56]	; 0x38
  STBC02_BATMS_GPIO_CLK_ENABLE();
 80057ce:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
  HAL_GPIO_Init(STBC02_BATMS_GPIO_PORT, &GPIO_InitStruct);
 80057d0:	4817      	ldr	r0, [pc, #92]	; (8005830 <BSP_BC_BatMS_Init+0xc0>)
  STBC02_BATMS_GPIO_CLK_ENABLE();
 80057d2:	f041 0104 	orr.w	r1, r1, #4
 80057d6:	64d1      	str	r1, [r2, #76]	; 0x4c
 80057d8:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80057da:	9304      	str	r3, [sp, #16]
  STBC02_BATMS_GPIO_CLK_ENABLE();
 80057dc:	f002 0204 	and.w	r2, r2, #4
  GPIO_InitStruct.Pin = STBC02_BATMS_PIN;
 80057e0:	230b      	movs	r3, #11
  STBC02_BATMS_GPIO_CLK_ENABLE();
 80057e2:	9201      	str	r2, [sp, #4]
  HAL_GPIO_Init(STBC02_BATMS_GPIO_PORT, &GPIO_InitStruct);
 80057e4:	a902      	add	r1, sp, #8
  GPIO_InitStruct.Pin = STBC02_BATMS_PIN;
 80057e6:	2210      	movs	r2, #16
 80057e8:	e9cd 2302 	strd	r2, r3, [sp, #8]
  STBC02_BATMS_GPIO_CLK_ENABLE();
 80057ec:	9d01      	ldr	r5, [sp, #4]
  HAL_GPIO_Init(STBC02_BATMS_GPIO_PORT, &GPIO_InitStruct);
 80057ee:	f001 fbbf 	bl	8006f70 <HAL_GPIO_Init>
  
  HAL_ADC_BC_MspInit();
  
  
  (void)HAL_ADCEx_InjectedConfigChannel(&ADC1_Handle, &sConfigInjected);
 80057f2:	480c      	ldr	r0, [pc, #48]	; (8005824 <BSP_BC_BatMS_Init+0xb4>)
 80057f4:	a908      	add	r1, sp, #32
 80057f6:	f000 fefd 	bl	80065f4 <HAL_ADCEx_InjectedConfigChannel>
    
  if (ADC_stopped == 1U)
 80057fa:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
 80057fe:	2b01      	cmp	r3, #1
 8005800:	d00a      	beq.n	8005818 <BSP_BC_BatMS_Init+0xa8>
}
 8005802:	2000      	movs	r0, #0
 8005804:	b017      	add	sp, #92	; 0x5c
 8005806:	bd30      	pop	{r4, r5, pc}
    (void)HAL_ADC_Stop(&ADC1_Handle);
 8005808:	4806      	ldr	r0, [pc, #24]	; (8005824 <BSP_BC_BatMS_Init+0xb4>)
    ADC_stopped=1;
 800580a:	4c07      	ldr	r4, [pc, #28]	; (8005828 <BSP_BC_BatMS_Init+0xb8>)
    (void)HAL_ADC_Stop(&ADC1_Handle);
 800580c:	f000 fe78 	bl	8006500 <HAL_ADC_Stop>
    ADC_stopped=1;
 8005810:	2301      	movs	r3, #1
 8005812:	f884 3055 	strb.w	r3, [r4, #85]	; 0x55
 8005816:	e7bb      	b.n	8005790 <BSP_BC_BatMS_Init+0x20>
  {
    (void)HAL_ADC_Start(&ADC1_Handle);
 8005818:	4802      	ldr	r0, [pc, #8]	; (8005824 <BSP_BC_BatMS_Init+0xb4>)
 800581a:	f000 fdfd 	bl	8006418 <HAL_ADC_Start>
}
 800581e:	2000      	movs	r0, #0
 8005820:	b017      	add	sp, #92	; 0x5c
 8005822:	bd30      	pop	{r4, r5, pc}
 8005824:	2001dff4 	.word	0x2001dff4
 8005828:	20001c50 	.word	0x20001c50
 800582c:	36902000 	.word	0x36902000
 8005830:	48000800 	.word	0x48000800
 8005834:	00000000 	.word	0x00000000

08005838 <BC_TIMx_Init>:
{
 8005838:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800583c:	b084      	sub	sp, #16
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800583e:	2300      	movs	r3, #0
 8005840:	e9cd 3301 	strd	r3, r3, [sp, #4]
 8005844:	9303      	str	r3, [sp, #12]
  uint32_t freq = STBC02_USED_TIM_CLKFreq;
 8005846:	f004 f8c3 	bl	80099d0 <HAL_RCC_GetPCLK1Freq>
 800584a:	4b23      	ldr	r3, [pc, #140]	; (80058d8 <BC_TIMx_Init+0xa0>)
 800584c:	689b      	ldr	r3, [r3, #8]
    period = (uint32_t)(freq/(prescaler) * STBC02_USED_TIM_PERIOD);
 800584e:	a720      	add	r7, pc, #128	; (adr r7, 80058d0 <BC_TIMx_Init+0x98>)
 8005850:	e9d7 6700 	ldrd	r6, r7, [r7]
  uint32_t freq = STBC02_USED_TIM_CLKFreq;
 8005854:	055b      	lsls	r3, r3, #21
 8005856:	4605      	mov	r5, r0
  uint32_t prescaler = 0;
 8005858:	f04f 0400 	mov.w	r4, #0
 800585c:	bf48      	it	mi
 800585e:	0045      	lslmi	r5, r0, #1
    prescaler++;
 8005860:	46a0      	mov	r8, r4
 8005862:	3401      	adds	r4, #1
    period = (uint32_t)(freq/(prescaler) * STBC02_USED_TIM_PERIOD);
 8005864:	fbb5 f0f4 	udiv	r0, r5, r4
 8005868:	f7fa fe74 	bl	8000554 <__aeabi_ui2d>
 800586c:	4632      	mov	r2, r6
 800586e:	463b      	mov	r3, r7
 8005870:	f7fa feea 	bl	8000648 <__aeabi_dmul>
 8005874:	f7fb f9c0 	bl	8000bf8 <__aeabi_d2uiz>
  } while (period > 65535U);
 8005878:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 800587c:	d2f0      	bcs.n	8005860 <BC_TIMx_Init+0x28>
  hstbc02_UsedTim.Instance = STBC02_USED_TIM;
 800587e:	4c17      	ldr	r4, [pc, #92]	; (80058dc <BC_TIMx_Init+0xa4>)
    STBC02_USED_TIM_CLK_ENABLE();
 8005880:	4b15      	ldr	r3, [pc, #84]	; (80058d8 <BC_TIMx_Init+0xa0>)
  hstbc02_UsedTim.Instance = STBC02_USED_TIM;
 8005882:	4a17      	ldr	r2, [pc, #92]	; (80058e0 <BC_TIMx_Init+0xa8>)
 8005884:	6022      	str	r2, [r4, #0]
    STBC02_USED_TIM_CLK_ENABLE();
 8005886:	6d9a      	ldr	r2, [r3, #88]	; 0x58
  hstbc02_UsedTim.Init.Prescaler = (prescaler-1U);
 8005888:	f8c4 8004 	str.w	r8, [r4, #4]
    STBC02_USED_TIM_CLK_ENABLE();
 800588c:	f042 0220 	orr.w	r2, r2, #32
 8005890:	659a      	str	r2, [r3, #88]	; 0x58
 8005892:	6d9b      	ldr	r3, [r3, #88]	; 0x58
  hstbc02_UsedTim.Init.Period = period;
 8005894:	60e0      	str	r0, [r4, #12]
  hstbc02_UsedTim.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005896:	2500      	movs	r5, #0
    STBC02_USED_TIM_CLK_ENABLE();
 8005898:	f003 0320 	and.w	r3, r3, #32
    HAL_NVIC_SetPriority(STBC02_USED_TIM_IRQn, STBC02_USED_TIM_IRQ_PP, STBC02_USED_TIM_IRQ_SP);
 800589c:	462a      	mov	r2, r5
 800589e:	2103      	movs	r1, #3
    STBC02_USED_TIM_CLK_ENABLE();
 80058a0:	9300      	str	r3, [sp, #0]
    HAL_NVIC_SetPriority(STBC02_USED_TIM_IRQn, STBC02_USED_TIM_IRQ_PP, STBC02_USED_TIM_IRQ_SP);
 80058a2:	2037      	movs	r0, #55	; 0x37
    STBC02_USED_TIM_CLK_ENABLE();
 80058a4:	9b00      	ldr	r3, [sp, #0]
  hstbc02_UsedTim.Init.CounterMode = TIM_COUNTERMODE_UP;
 80058a6:	60a5      	str	r5, [r4, #8]
    HAL_NVIC_SetPriority(STBC02_USED_TIM_IRQn, STBC02_USED_TIM_IRQ_PP, STBC02_USED_TIM_IRQ_SP);
 80058a8:	f001 f96c 	bl	8006b84 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(STBC02_USED_TIM_IRQn);
 80058ac:	2037      	movs	r0, #55	; 0x37
 80058ae:	f001 f9a1 	bl	8006bf4 <HAL_NVIC_EnableIRQ>
  (void)HAL_TIM_Base_Init(&hstbc02_UsedTim);
 80058b2:	4620      	mov	r0, r4
 80058b4:	f005 ffd6 	bl	800b864 <HAL_TIM_Base_Init>
  (void)HAL_TIMEx_MasterConfigSynchronization(&hstbc02_UsedTim, &sMasterConfig);
 80058b8:	4620      	mov	r0, r4
 80058ba:	a901      	add	r1, sp, #4
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80058bc:	9501      	str	r5, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80058be:	9503      	str	r5, [sp, #12]
  (void)HAL_TIMEx_MasterConfigSynchronization(&hstbc02_UsedTim, &sMasterConfig);
 80058c0:	f006 f95c 	bl	800bb7c <HAL_TIMEx_MasterConfigSynchronization>
}
 80058c4:	b004      	add	sp, #16
 80058c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80058ca:	bf00      	nop
 80058cc:	f3af 8000 	nop.w
 80058d0:	88e368f1 	.word	0x88e368f1
 80058d4:	3ed4f8b5 	.word	0x3ed4f8b5
 80058d8:	40021000 	.word	0x40021000
 80058dc:	2001e088 	.word	0x2001e088
 80058e0:	40001400 	.word	0x40001400

080058e4 <BSP_BC_Init>:
{
 80058e4:	b530      	push	{r4, r5, lr}
 80058e6:	b089      	sub	sp, #36	; 0x24
  BC_TIMx_Init();
 80058e8:	f7ff ffa6 	bl	8005838 <BC_TIMx_Init>
  STBC02_SW_SEL_GPIO_CLK_ENABLE();
 80058ec:	4b0e      	ldr	r3, [pc, #56]	; (8005928 <BSP_BC_Init+0x44>)
  HAL_GPIO_WritePin(STBC02_SW_SEL_GPIO_PORT, STBC02_SW_SEL_PIN, GPIO_PIN_RESET);
 80058ee:	480f      	ldr	r0, [pc, #60]	; (800592c <BSP_BC_Init+0x48>)
  STBC02_SW_SEL_GPIO_CLK_ENABLE();
 80058f0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80058f2:	f042 0220 	orr.w	r2, r2, #32
 80058f6:	64da      	str	r2, [r3, #76]	; 0x4c
 80058f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
  GPIO_InitStruct.Pin = STBC02_SW_SEL_PIN;
 80058fa:	2440      	movs	r4, #64	; 0x40
  STBC02_SW_SEL_GPIO_CLK_ENABLE();
 80058fc:	f003 0320 	and.w	r3, r3, #32
  GPIO_InitStruct.Pin = STBC02_SW_SEL_PIN;
 8005900:	2501      	movs	r5, #1
 8005902:	e9cd 4502 	strd	r4, r5, [sp, #8]
  STBC02_SW_SEL_GPIO_CLK_ENABLE();
 8005906:	9301      	str	r3, [sp, #4]
  HAL_GPIO_WritePin(STBC02_SW_SEL_GPIO_PORT, STBC02_SW_SEL_PIN, GPIO_PIN_RESET);
 8005908:	2200      	movs	r2, #0
 800590a:	2140      	movs	r1, #64	; 0x40
  GPIO_InitStruct.Pin = STBC02_SW_SEL_PIN;
 800590c:	2400      	movs	r4, #0
 800590e:	2502      	movs	r5, #2
  STBC02_SW_SEL_GPIO_CLK_ENABLE();
 8005910:	9b01      	ldr	r3, [sp, #4]
  GPIO_InitStruct.Pin = STBC02_SW_SEL_PIN;
 8005912:	e9cd 4504 	strd	r4, r5, [sp, #16]
  HAL_GPIO_WritePin(STBC02_SW_SEL_GPIO_PORT, STBC02_SW_SEL_PIN, GPIO_PIN_RESET);
 8005916:	f001 fc51 	bl	80071bc <HAL_GPIO_WritePin>
  HAL_GPIO_Init(STBC02_SW_SEL_GPIO_PORT, &GPIO_InitStruct);
 800591a:	4804      	ldr	r0, [pc, #16]	; (800592c <BSP_BC_Init+0x48>)
 800591c:	a902      	add	r1, sp, #8
 800591e:	f001 fb27 	bl	8006f70 <HAL_GPIO_Init>
}
 8005922:	b009      	add	sp, #36	; 0x24
 8005924:	bd30      	pop	{r4, r5, pc}
 8005926:	bf00      	nop
 8005928:	40021000 	.word	0x40021000
 800592c:	48001400 	.word	0x48001400

08005930 <HAL_TIM_PeriodElapsedCallback>:
  * @param  htim TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  if (htim->Instance == STBC02_USED_TIM)
 8005930:	4b3b      	ldr	r3, [pc, #236]	; (8005a20 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8005932:	6802      	ldr	r2, [r0, #0]
 8005934:	429a      	cmp	r2, r3
 8005936:	d000      	beq.n	800593a <HAL_TIM_PeriodElapsedCallback+0xa>
 8005938:	4770      	bx	lr
{
 800593a:	b510      	push	{r4, lr}
  TIMx_Pulse++;
 800593c:	4c39      	ldr	r4, [pc, #228]	; (8005a24 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 800593e:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	; 0xa4
 8005942:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 8005946:	3301      	adds	r3, #1
 8005948:	b29b      	uxth	r3, r3
 800594a:	3a01      	subs	r2, #1
 800594c:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
  switch (stbc02_SwState)
 8005950:	2a05      	cmp	r2, #5
 8005952:	d814      	bhi.n	800597e <HAL_TIM_PeriodElapsedCallback+0x4e>
 8005954:	e8df f002 	tbb	[pc, r2]
 8005958:	03030335 	.word	0x03030335
 800595c:	1424      	.short	0x1424
    HAL_GPIO_TogglePin(STBC02_SW_SEL_GPIO_PORT, STBC02_SW_SEL_PIN);
 800595e:	4832      	ldr	r0, [pc, #200]	; (8005a28 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8005960:	2140      	movs	r1, #64	; 0x40
 8005962:	f001 fc31 	bl	80071c8 <HAL_GPIO_TogglePin>
    TIMx_PulseTCS = TIMx_Pulse + (uint16_t)(100/5);
 8005966:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	; 0xa4
    stbc02_sw_state_prv = stbc02_SwState;
 800596a:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 800596e:	f884 20a8 	strb.w	r2, [r4, #168]	; 0xa8
    TIMx_PulseTCS = TIMx_Pulse + (uint16_t)(100/5);
 8005972:	3314      	adds	r3, #20
    stbc02_SwState = wait;
 8005974:	2206      	movs	r2, #6
    TIMx_PulseTCS = TIMx_Pulse + (uint16_t)(100/5);
 8005976:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
    stbc02_SwState = wait;
 800597a:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
  {
    BC_CmdMng();
  }
}
 800597e:	bd10      	pop	{r4, pc}
    if ( TIMx_Pulse > TIMx_PulseTCS )
 8005980:	f8b4 20a6 	ldrh.w	r2, [r4, #166]	; 0xa6
 8005984:	429a      	cmp	r2, r3
 8005986:	d2fa      	bcs.n	800597e <HAL_TIM_PeriodElapsedCallback+0x4e>
      if ( stbc02_sw_state_prv == stop_h )
 8005988:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
 800598c:	2b05      	cmp	r3, #5
 800598e:	d038      	beq.n	8005a02 <HAL_TIM_PeriodElapsedCallback+0xd2>
        if ( stbc02_sw_state_prv == pulse_h )
 8005990:	2b03      	cmp	r3, #3
 8005992:	d027      	beq.n	80059e4 <HAL_TIM_PeriodElapsedCallback+0xb4>
 8005994:	3301      	adds	r3, #1
 8005996:	b2db      	uxtb	r3, r3
        stbc02_SwState = (stbc02_SwState_TypeDef)(stbc02_sw_state_prv + 1);
 8005998:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        __NOP();
 800599c:	bf00      	nop
}
 800599e:	bd10      	pop	{r4, pc}
    HAL_GPIO_TogglePin(STBC02_SW_SEL_GPIO_PORT, STBC02_SW_SEL_PIN);
 80059a0:	4821      	ldr	r0, [pc, #132]	; (8005a28 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 80059a2:	2140      	movs	r1, #64	; 0x40
 80059a4:	f001 fc10 	bl	80071c8 <HAL_GPIO_TogglePin>
    TIMx_PulseTCS = TIMx_Pulse + (uint16_t)(500/5);
 80059a8:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	; 0xa4
    stbc02_sw_state_prv = stbc02_SwState;
 80059ac:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 80059b0:	f884 20a8 	strb.w	r2, [r4, #168]	; 0xa8
    TIMx_PulseTCS = TIMx_Pulse + (uint16_t)(500/5);
 80059b4:	3364      	adds	r3, #100	; 0x64
    stbc02_SwState = wait;
 80059b6:	2206      	movs	r2, #6
    TIMx_PulseTCS = TIMx_Pulse + (uint16_t)(500/5);
 80059b8:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
    stbc02_SwState = wait;
 80059bc:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
}
 80059c0:	bd10      	pop	{r4, pc}
    HAL_GPIO_TogglePin(STBC02_SW_SEL_GPIO_PORT, STBC02_SW_SEL_PIN);
 80059c2:	4819      	ldr	r0, [pc, #100]	; (8005a28 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 80059c4:	2140      	movs	r1, #64	; 0x40
 80059c6:	f001 fbff 	bl	80071c8 <HAL_GPIO_TogglePin>
    TIMx_PulseTCS = TIMx_Pulse + (uint16_t)(350/5);
 80059ca:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	; 0xa4
    stbc02_sw_state_prv = stbc02_SwState;
 80059ce:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 80059d2:	f884 20a8 	strb.w	r2, [r4, #168]	; 0xa8
    TIMx_PulseTCS = TIMx_Pulse + (uint16_t)(350/5);
 80059d6:	3346      	adds	r3, #70	; 0x46
    stbc02_SwState = wait;
 80059d8:	2206      	movs	r2, #6
    TIMx_PulseTCS = TIMx_Pulse + (uint16_t)(350/5);
 80059da:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
    stbc02_SwState = wait;
 80059de:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
}
 80059e2:	bd10      	pop	{r4, pc}
          CmdPulse++;
 80059e4:	f894 30a9 	ldrb.w	r3, [r4, #169]	; 0xa9
          if ( CmdPulse < (uint8_t)stbc02_SwCmdSel )
 80059e8:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
          CmdPulse++;
 80059ec:	3301      	adds	r3, #1
 80059ee:	b2db      	uxtb	r3, r3
          if ( CmdPulse < (uint8_t)stbc02_SwCmdSel )
 80059f0:	429a      	cmp	r2, r3
          CmdPulse++;
 80059f2:	f884 30a9 	strb.w	r3, [r4, #169]	; 0xa9
          if ( CmdPulse < (uint8_t)stbc02_SwCmdSel )
 80059f6:	d90f      	bls.n	8005a18 <HAL_TIM_PeriodElapsedCallback+0xe8>
            stbc02_sw_state_prv = start;
 80059f8:	2301      	movs	r3, #1
 80059fa:	f884 30a8 	strb.w	r3, [r4, #168]	; 0xa8
 80059fe:	2302      	movs	r3, #2
 8005a00:	e7ca      	b.n	8005998 <HAL_TIM_PeriodElapsedCallback+0x68>
        CmdPulse = 0;
 8005a02:	2200      	movs	r2, #0
 8005a04:	f884 20a9 	strb.w	r2, [r4, #169]	; 0xa9
        stbc02_SwState = idle;
 8005a08:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
        HAL_GPIO_WritePin(STBC02_SW_SEL_GPIO_PORT, STBC02_SW_SEL_PIN, GPIO_PIN_RESET);
 8005a0c:	4806      	ldr	r0, [pc, #24]	; (8005a28 <HAL_TIM_PeriodElapsedCallback+0xf8>)
}
 8005a0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        HAL_GPIO_WritePin(STBC02_SW_SEL_GPIO_PORT, STBC02_SW_SEL_PIN, GPIO_PIN_RESET);
 8005a12:	2140      	movs	r1, #64	; 0x40
 8005a14:	f001 bbd2 	b.w	80071bc <HAL_GPIO_WritePin>
            __NOP();
 8005a18:	bf00      	nop
 8005a1a:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
 8005a1e:	e7b9      	b.n	8005994 <HAL_TIM_PeriodElapsedCallback+0x64>
 8005a20:	40001400 	.word	0x40001400
 8005a24:	20001c50 	.word	0x20001c50
 8005a28:	48001400 	.word	0x48001400

08005a2c <HAL_TIM_IC_CaptureCallback>:
  * @param  htim : hadc handle
  * @retval None
  */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
  if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3)
 8005a2c:	7f03      	ldrb	r3, [r0, #28]
 8005a2e:	2b04      	cmp	r3, #4
 8005a30:	d000      	beq.n	8005a34 <HAL_TIM_IC_CaptureCallback+0x8>
 8005a32:	4770      	bx	lr
{
 8005a34:	b510      	push	{r4, lr}
  if(uhCaptureIndex == 0U)
 8005a36:	4c10      	ldr	r4, [pc, #64]	; (8005a78 <HAL_TIM_IC_CaptureCallback+0x4c>)
 8005a38:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
 8005a3c:	b12b      	cbz	r3, 8005a4a <HAL_TIM_IC_CaptureCallback+0x1e>
   if(uhCaptureIndex == 1U)
 8005a3e:	2b01      	cmp	r3, #1
 8005a40:	d009      	beq.n	8005a56 <HAL_TIM_IC_CaptureCallback+0x2a>
  stbc02_ChgPinToggledTime = STBC02_GetTick();
 8005a42:	f000 faf9 	bl	8006038 <HAL_GetTick>
 8005a46:	6520      	str	r0, [r4, #80]	; 0x50
  {
    BSP_BC_ChgPinHasToggled();
  }
}
 8005a48:	bd10      	pop	{r4, pc}
    uwIC2Value1 = HAL_GetTick();
 8005a4a:	f000 faf5 	bl	8006038 <HAL_GetTick>
    uhCaptureIndex = 1;
 8005a4e:	2301      	movs	r3, #1
    uwIC2Value1 = HAL_GetTick();
 8005a50:	6460      	str	r0, [r4, #68]	; 0x44
    uhCaptureIndex = 1;
 8005a52:	f8a4 3042 	strh.w	r3, [r4, #66]	; 0x42
    uwIC2Value2 = HAL_GetTick();
 8005a56:	f000 faef 	bl	8006038 <HAL_GetTick>
      uwDiffCapture = ((0xFFFFFFFF - uwIC2Value1) + uwIC2Value2) + 1U;
 8005a5a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005a5c:	1ac0      	subs	r0, r0, r3
 8005a5e:	64a0      	str	r0, [r4, #72]	; 0x48
    if (uwDiffCapture != 0U)
 8005a60:	2800      	cmp	r0, #0
 8005a62:	d0ee      	beq.n	8005a42 <HAL_TIM_IC_CaptureCallback+0x16>
      uhCaptureIndex = 0U;
 8005a64:	2200      	movs	r2, #0
      uwFrequency = 10000U / uwDiffCapture;
 8005a66:	f242 7310 	movw	r3, #10000	; 0x2710
      uhCaptureIndex = 0U;
 8005a6a:	f8a4 2042 	strh.w	r2, [r4, #66]	; 0x42
      uwFrequency = 10000U / uwDiffCapture;
 8005a6e:	fbb3 f0f0 	udiv	r0, r3, r0
 8005a72:	64e0      	str	r0, [r4, #76]	; 0x4c
      uhCaptureIndex = 0U;
 8005a74:	e7e5      	b.n	8005a42 <HAL_TIM_IC_CaptureCallback+0x16>
 8005a76:	bf00      	nop
 8005a78:	20001c50 	.word	0x20001c50

08005a7c <TIM7_IRQHandler>:
/**
* @brief This function handles STBC02_USED_TIM global interrupt.
*/
void STBC02_USED_TIM_IRQHandler(void)
{
  HAL_TIM_IRQHandler(&hstbc02_UsedTim);
 8005a7c:	4801      	ldr	r0, [pc, #4]	; (8005a84 <TIM7_IRQHandler+0x8>)
 8005a7e:	f005 bfc5 	b.w	800ba0c <HAL_TIM_IRQHandler>
 8005a82:	bf00      	nop
 8005a84:	2001e088 	.word	0x2001e088

08005a88 <TIM3_IRQHandler>:
  * @param  None
  * @retval None
  */
void TIM3_IRQHandler(void)
{
  HAL_TIM_IRQHandler(&TimBCHandle);
 8005a88:	4801      	ldr	r0, [pc, #4]	; (8005a90 <TIM3_IRQHandler+0x8>)
 8005a8a:	f005 bfbf 	b.w	800ba0c <HAL_TIM_IRQHandler>
 8005a8e:	bf00      	nop
 8005a90:	20001c50 	.word	0x20001c50

08005a94 <BSP_DEBUG_PIN_Init_All>:
*         Pin name also identifies the pin number on STMOD+.
* @param  None
* @retval None
*/  
void BSP_DEBUG_PIN_Init_All(void)
{
 8005a94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  HAL_GPIO_WritePin(DEBUG_PIN_PORT[Pin], DEBUG_PIN[Pin], GPIO_PIN_SET);
}

void BSP_DEBUG_PIN_Off(Debug_Pin_TypeDef Pin)
{
  HAL_GPIO_WritePin(DEBUG_PIN_PORT[Pin], DEBUG_PIN[Pin], GPIO_PIN_RESET);
 8005a98:	4cc6      	ldr	r4, [pc, #792]	; (8005db4 <BSP_DEBUG_PIN_Init_All+0x320>)
  DEBUG_PINx_GPIO_CLK_ENABLE(Pin);
 8005a9a:	4dc7      	ldr	r5, [pc, #796]	; (8005db8 <BSP_DEBUG_PIN_Init_All+0x324>)
  HAL_GPIO_WritePin(DEBUG_PIN_PORT[Pin], DEBUG_PIN[Pin], GPIO_PIN_RESET);
 8005a9c:	6820      	ldr	r0, [r4, #0]
{
 8005a9e:	b093      	sub	sp, #76	; 0x4c
  HAL_GPIO_WritePin(DEBUG_PIN_PORT[Pin], DEBUG_PIN[Pin], GPIO_PIN_RESET);
 8005aa0:	2200      	movs	r2, #0
 8005aa2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005aa6:	f001 fb89 	bl	80071bc <HAL_GPIO_WritePin>
 8005aaa:	6860      	ldr	r0, [r4, #4]
 8005aac:	2200      	movs	r2, #0
 8005aae:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005ab2:	f001 fb83 	bl	80071bc <HAL_GPIO_WritePin>
 8005ab6:	68a0      	ldr	r0, [r4, #8]
 8005ab8:	2200      	movs	r2, #0
 8005aba:	2104      	movs	r1, #4
 8005abc:	f001 fb7e 	bl	80071bc <HAL_GPIO_WritePin>
 8005ac0:	68e0      	ldr	r0, [r4, #12]
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005ac8:	f001 fb78 	bl	80071bc <HAL_GPIO_WritePin>
 8005acc:	6920      	ldr	r0, [r4, #16]
 8005ace:	2200      	movs	r2, #0
 8005ad0:	2120      	movs	r1, #32
 8005ad2:	f001 fb73 	bl	80071bc <HAL_GPIO_WritePin>
 8005ad6:	6960      	ldr	r0, [r4, #20]
 8005ad8:	2200      	movs	r2, #0
 8005ada:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005ade:	f001 fb6d 	bl	80071bc <HAL_GPIO_WritePin>
 8005ae2:	69a0      	ldr	r0, [r4, #24]
 8005ae4:	2200      	movs	r2, #0
 8005ae6:	2120      	movs	r1, #32
 8005ae8:	f001 fb68 	bl	80071bc <HAL_GPIO_WritePin>
 8005aec:	69e0      	ldr	r0, [r4, #28]
 8005aee:	2200      	movs	r2, #0
 8005af0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005af4:	f001 fb62 	bl	80071bc <HAL_GPIO_WritePin>
 8005af8:	6a20      	ldr	r0, [r4, #32]
 8005afa:	2200      	movs	r2, #0
 8005afc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005b00:	f001 fb5c 	bl	80071bc <HAL_GPIO_WritePin>
 8005b04:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8005b06:	2200      	movs	r2, #0
 8005b08:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005b0c:	f001 fb56 	bl	80071bc <HAL_GPIO_WritePin>
 8005b10:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8005b12:	2200      	movs	r2, #0
 8005b14:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005b18:	f001 fb50 	bl	80071bc <HAL_GPIO_WritePin>
 8005b1c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8005b1e:	2200      	movs	r2, #0
 8005b20:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005b24:	f001 fb4a 	bl	80071bc <HAL_GPIO_WritePin>
  DEBUG_PINx_GPIO_CLK_ENABLE(Pin);
 8005b28:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
  HAL_GPIO_WritePin(DEBUG_PIN_PORT[Pin], GPIO_InitStructure.Pin, GPIO_PIN_RESET);  
 8005b2a:	6820      	ldr	r0, [r4, #0]
  DEBUG_PINx_GPIO_CLK_ENABLE(Pin);
 8005b2c:	f043 0308 	orr.w	r3, r3, #8
 8005b30:	64eb      	str	r3, [r5, #76]	; 0x4c
 8005b32:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8005b34:	f003 0308 	and.w	r3, r3, #8
  GPIO_InitStructure.Pin = DEBUG_PIN[Pin];
 8005b38:	2600      	movs	r6, #0
 8005b3a:	2703      	movs	r7, #3
  DEBUG_PINx_GPIO_CLK_ENABLE(Pin);
 8005b3c:	930b      	str	r3, [sp, #44]	; 0x2c
  HAL_GPIO_WritePin(DEBUG_PIN_PORT[Pin], GPIO_InitStructure.Pin, GPIO_PIN_RESET);  
 8005b3e:	2200      	movs	r2, #0
 8005b40:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  GPIO_InitStructure.Pin = DEBUG_PIN[Pin];
 8005b44:	f44f 5880 	mov.w	r8, #4096	; 0x1000
 8005b48:	f04f 0901 	mov.w	r9, #1
 8005b4c:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
  DEBUG_PINx_GPIO_CLK_ENABLE(Pin);
 8005b50:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  GPIO_InitStructure.Pin = DEBUG_PIN[Pin];
 8005b52:	e9cd 670e 	strd	r6, r7, [sp, #56]	; 0x38
  HAL_GPIO_WritePin(DEBUG_PIN_PORT[Pin], GPIO_InitStructure.Pin, GPIO_PIN_RESET);  
 8005b56:	f001 fb31 	bl	80071bc <HAL_GPIO_WritePin>
  HAL_GPIO_Init(DEBUG_PIN_PORT[Pin], &GPIO_InitStructure);
 8005b5a:	6820      	ldr	r0, [r4, #0]
 8005b5c:	a90c      	add	r1, sp, #48	; 0x30
 8005b5e:	f001 fa07 	bl	8006f70 <HAL_GPIO_Init>
  DEBUG_PINx_GPIO_CLK_ENABLE(Pin);
 8005b62:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
  HAL_GPIO_WritePin(DEBUG_PIN_PORT[Pin], GPIO_InitStructure.Pin, GPIO_PIN_RESET);  
 8005b64:	6860      	ldr	r0, [r4, #4]
  DEBUG_PINx_GPIO_CLK_ENABLE(Pin);
 8005b66:	f043 0302 	orr.w	r3, r3, #2
 8005b6a:	64eb      	str	r3, [r5, #76]	; 0x4c
 8005b6c:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8005b6e:	f003 0302 	and.w	r3, r3, #2
 8005b72:	930a      	str	r3, [sp, #40]	; 0x28
  HAL_GPIO_WritePin(DEBUG_PIN_PORT[Pin], GPIO_InitStructure.Pin, GPIO_PIN_RESET);  
 8005b74:	2200      	movs	r2, #0
 8005b76:	f44f 4100 	mov.w	r1, #32768	; 0x8000
  GPIO_InitStructure.Pin = DEBUG_PIN[Pin];
 8005b7a:	f44f 4800 	mov.w	r8, #32768	; 0x8000
 8005b7e:	f04f 0901 	mov.w	r9, #1
 8005b82:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
  DEBUG_PINx_GPIO_CLK_ENABLE(Pin);
 8005b86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  GPIO_InitStructure.Pin = DEBUG_PIN[Pin];
 8005b88:	e9cd 670e 	strd	r6, r7, [sp, #56]	; 0x38
  HAL_GPIO_WritePin(DEBUG_PIN_PORT[Pin], GPIO_InitStructure.Pin, GPIO_PIN_RESET);  
 8005b8c:	f001 fb16 	bl	80071bc <HAL_GPIO_WritePin>
  HAL_GPIO_Init(DEBUG_PIN_PORT[Pin], &GPIO_InitStructure);
 8005b90:	6860      	ldr	r0, [r4, #4]
 8005b92:	a90c      	add	r1, sp, #48	; 0x30
 8005b94:	f001 f9ec 	bl	8006f70 <HAL_GPIO_Init>
  DEBUG_PINx_GPIO_CLK_ENABLE(Pin);
 8005b98:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
  HAL_GPIO_WritePin(DEBUG_PIN_PORT[Pin], GPIO_InitStructure.Pin, GPIO_PIN_RESET);  
 8005b9a:	68a0      	ldr	r0, [r4, #8]
  DEBUG_PINx_GPIO_CLK_ENABLE(Pin);
 8005b9c:	f043 0304 	orr.w	r3, r3, #4
 8005ba0:	64eb      	str	r3, [r5, #76]	; 0x4c
 8005ba2:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8005ba4:	f003 0304 	and.w	r3, r3, #4
 8005ba8:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_WritePin(DEBUG_PIN_PORT[Pin], GPIO_InitStructure.Pin, GPIO_PIN_RESET);  
 8005baa:	2200      	movs	r2, #0
  GPIO_InitStructure.Pin = DEBUG_PIN[Pin];
 8005bac:	f04f 0804 	mov.w	r8, #4
 8005bb0:	f04f 0901 	mov.w	r9, #1
  HAL_GPIO_WritePin(DEBUG_PIN_PORT[Pin], GPIO_InitStructure.Pin, GPIO_PIN_RESET);  
 8005bb4:	2104      	movs	r1, #4
  GPIO_InitStructure.Pin = DEBUG_PIN[Pin];
 8005bb6:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
  DEBUG_PINx_GPIO_CLK_ENABLE(Pin);
 8005bba:	9b09      	ldr	r3, [sp, #36]	; 0x24
  GPIO_InitStructure.Pin = DEBUG_PIN[Pin];
 8005bbc:	e9cd 670e 	strd	r6, r7, [sp, #56]	; 0x38
  HAL_GPIO_WritePin(DEBUG_PIN_PORT[Pin], GPIO_InitStructure.Pin, GPIO_PIN_RESET);  
 8005bc0:	f001 fafc 	bl	80071bc <HAL_GPIO_WritePin>
  HAL_GPIO_Init(DEBUG_PIN_PORT[Pin], &GPIO_InitStructure);
 8005bc4:	68a0      	ldr	r0, [r4, #8]
 8005bc6:	a90c      	add	r1, sp, #48	; 0x30
 8005bc8:	f001 f9d2 	bl	8006f70 <HAL_GPIO_Init>
  DEBUG_PINx_GPIO_CLK_ENABLE(Pin);
 8005bcc:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
  HAL_GPIO_WritePin(DEBUG_PIN_PORT[Pin], GPIO_InitStructure.Pin, GPIO_PIN_RESET);  
 8005bce:	68e0      	ldr	r0, [r4, #12]
  DEBUG_PINx_GPIO_CLK_ENABLE(Pin);
 8005bd0:	f043 0308 	orr.w	r3, r3, #8
 8005bd4:	64eb      	str	r3, [r5, #76]	; 0x4c
 8005bd6:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8005bd8:	f003 0308 	and.w	r3, r3, #8
 8005bdc:	9308      	str	r3, [sp, #32]
  HAL_GPIO_WritePin(DEBUG_PIN_PORT[Pin], GPIO_InitStructure.Pin, GPIO_PIN_RESET);  
 8005bde:	2200      	movs	r2, #0
  GPIO_InitStructure.Pin = DEBUG_PIN[Pin];
 8005be0:	f44f 5800 	mov.w	r8, #8192	; 0x2000
 8005be4:	f04f 0901 	mov.w	r9, #1
  HAL_GPIO_WritePin(DEBUG_PIN_PORT[Pin], GPIO_InitStructure.Pin, GPIO_PIN_RESET);  
 8005be8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  GPIO_InitStructure.Pin = DEBUG_PIN[Pin];
 8005bec:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
  DEBUG_PINx_GPIO_CLK_ENABLE(Pin);
 8005bf0:	9b08      	ldr	r3, [sp, #32]
  GPIO_InitStructure.Pin = DEBUG_PIN[Pin];
 8005bf2:	e9cd 670e 	strd	r6, r7, [sp, #56]	; 0x38
  HAL_GPIO_WritePin(DEBUG_PIN_PORT[Pin], GPIO_InitStructure.Pin, GPIO_PIN_RESET);  
 8005bf6:	f001 fae1 	bl	80071bc <HAL_GPIO_WritePin>
  HAL_GPIO_Init(DEBUG_PIN_PORT[Pin], &GPIO_InitStructure);
 8005bfa:	68e0      	ldr	r0, [r4, #12]
 8005bfc:	a90c      	add	r1, sp, #48	; 0x30
 8005bfe:	f001 f9b7 	bl	8006f70 <HAL_GPIO_Init>
  DEBUG_PINx_GPIO_CLK_ENABLE(Pin);
 8005c02:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
  HAL_GPIO_WritePin(DEBUG_PIN_PORT[Pin], GPIO_InitStructure.Pin, GPIO_PIN_RESET);  
 8005c04:	6920      	ldr	r0, [r4, #16]
  DEBUG_PINx_GPIO_CLK_ENABLE(Pin);
 8005c06:	f043 0304 	orr.w	r3, r3, #4
 8005c0a:	64eb      	str	r3, [r5, #76]	; 0x4c
 8005c0c:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8005c0e:	f003 0304 	and.w	r3, r3, #4
 8005c12:	9307      	str	r3, [sp, #28]
  GPIO_InitStructure.Pin = DEBUG_PIN[Pin];
 8005c14:	f04f 0820 	mov.w	r8, #32
 8005c18:	f04f 0901 	mov.w	r9, #1
  HAL_GPIO_WritePin(DEBUG_PIN_PORT[Pin], GPIO_InitStructure.Pin, GPIO_PIN_RESET);  
 8005c1c:	2200      	movs	r2, #0
 8005c1e:	2120      	movs	r1, #32
  GPIO_InitStructure.Pin = DEBUG_PIN[Pin];
 8005c20:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
  DEBUG_PINx_GPIO_CLK_ENABLE(Pin);
 8005c24:	9b07      	ldr	r3, [sp, #28]
  GPIO_InitStructure.Pin = DEBUG_PIN[Pin];
 8005c26:	e9cd 670e 	strd	r6, r7, [sp, #56]	; 0x38
  HAL_GPIO_WritePin(DEBUG_PIN_PORT[Pin], GPIO_InitStructure.Pin, GPIO_PIN_RESET);  
 8005c2a:	f001 fac7 	bl	80071bc <HAL_GPIO_WritePin>
  HAL_GPIO_Init(DEBUG_PIN_PORT[Pin], &GPIO_InitStructure);
 8005c2e:	6920      	ldr	r0, [r4, #16]
 8005c30:	a90c      	add	r1, sp, #48	; 0x30
 8005c32:	f001 f99d 	bl	8006f70 <HAL_GPIO_Init>
  DEBUG_PINx_GPIO_CLK_ENABLE(Pin);
 8005c36:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
  HAL_GPIO_WritePin(DEBUG_PIN_PORT[Pin], GPIO_InitStructure.Pin, GPIO_PIN_RESET);  
 8005c38:	6960      	ldr	r0, [r4, #20]
  DEBUG_PINx_GPIO_CLK_ENABLE(Pin);
 8005c3a:	f043 0308 	orr.w	r3, r3, #8
 8005c3e:	64eb      	str	r3, [r5, #76]	; 0x4c
 8005c40:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8005c42:	f003 0308 	and.w	r3, r3, #8
 8005c46:	9306      	str	r3, [sp, #24]
  HAL_GPIO_WritePin(DEBUG_PIN_PORT[Pin], GPIO_InitStructure.Pin, GPIO_PIN_RESET);  
 8005c48:	2200      	movs	r2, #0
  GPIO_InitStructure.Pin = DEBUG_PIN[Pin];
 8005c4a:	f44f 6a00 	mov.w	sl, #2048	; 0x800
 8005c4e:	f04f 0b01 	mov.w	fp, #1
  HAL_GPIO_WritePin(DEBUG_PIN_PORT[Pin], GPIO_InitStructure.Pin, GPIO_PIN_RESET);  
 8005c52:	f44f 6100 	mov.w	r1, #2048	; 0x800
  DEBUG_PINx_GPIO_CLK_ENABLE(Pin);
 8005c56:	9b06      	ldr	r3, [sp, #24]
  GPIO_InitStructure.Pin = DEBUG_PIN[Pin];
 8005c58:	e9cd 670e 	strd	r6, r7, [sp, #56]	; 0x38
 8005c5c:	e9cd ab0c 	strd	sl, fp, [sp, #48]	; 0x30
  HAL_GPIO_WritePin(DEBUG_PIN_PORT[Pin], GPIO_InitStructure.Pin, GPIO_PIN_RESET);  
 8005c60:	f001 faac 	bl	80071bc <HAL_GPIO_WritePin>
  HAL_GPIO_Init(DEBUG_PIN_PORT[Pin], &GPIO_InitStructure);
 8005c64:	6960      	ldr	r0, [r4, #20]
 8005c66:	a90c      	add	r1, sp, #48	; 0x30
 8005c68:	f001 f982 	bl	8006f70 <HAL_GPIO_Init>
  DEBUG_PINx_GPIO_CLK_ENABLE(Pin);
 8005c6c:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
  HAL_GPIO_WritePin(DEBUG_PIN_PORT[Pin], GPIO_InitStructure.Pin, GPIO_PIN_RESET);  
 8005c6e:	69a0      	ldr	r0, [r4, #24]
  DEBUG_PINx_GPIO_CLK_ENABLE(Pin);
 8005c70:	f043 0301 	orr.w	r3, r3, #1
 8005c74:	64eb      	str	r3, [r5, #76]	; 0x4c
 8005c76:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8005c78:	f003 0301 	and.w	r3, r3, #1
 8005c7c:	9305      	str	r3, [sp, #20]
  HAL_GPIO_WritePin(DEBUG_PIN_PORT[Pin], GPIO_InitStructure.Pin, GPIO_PIN_RESET);  
 8005c7e:	2200      	movs	r2, #0
 8005c80:	2120      	movs	r1, #32
  GPIO_InitStructure.Pin = DEBUG_PIN[Pin];
 8005c82:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
  DEBUG_PINx_GPIO_CLK_ENABLE(Pin);
 8005c86:	9b05      	ldr	r3, [sp, #20]
  GPIO_InitStructure.Pin = DEBUG_PIN[Pin];
 8005c88:	e9cd 670e 	strd	r6, r7, [sp, #56]	; 0x38
  HAL_GPIO_WritePin(DEBUG_PIN_PORT[Pin], GPIO_InitStructure.Pin, GPIO_PIN_RESET);  
 8005c8c:	f001 fa96 	bl	80071bc <HAL_GPIO_WritePin>
  HAL_GPIO_Init(DEBUG_PIN_PORT[Pin], &GPIO_InitStructure);
 8005c90:	69a0      	ldr	r0, [r4, #24]
 8005c92:	a90c      	add	r1, sp, #48	; 0x30
 8005c94:	f001 f96c 	bl	8006f70 <HAL_GPIO_Init>
  DEBUG_PINx_GPIO_CLK_ENABLE(Pin);
 8005c98:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
  HAL_GPIO_WritePin(DEBUG_PIN_PORT[Pin], GPIO_InitStructure.Pin, GPIO_PIN_RESET);  
 8005c9a:	69e0      	ldr	r0, [r4, #28]
  DEBUG_PINx_GPIO_CLK_ENABLE(Pin);
 8005c9c:	f043 0301 	orr.w	r3, r3, #1
 8005ca0:	64eb      	str	r3, [r5, #76]	; 0x4c
 8005ca2:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8005ca4:	f003 0301 	and.w	r3, r3, #1
 8005ca8:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(DEBUG_PIN_PORT[Pin], GPIO_InitStructure.Pin, GPIO_PIN_RESET);  
 8005caa:	2200      	movs	r2, #0
 8005cac:	f44f 4100 	mov.w	r1, #32768	; 0x8000
  GPIO_InitStructure.Pin = DEBUG_PIN[Pin];
 8005cb0:	f44f 4800 	mov.w	r8, #32768	; 0x8000
 8005cb4:	f04f 0901 	mov.w	r9, #1
 8005cb8:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
  DEBUG_PINx_GPIO_CLK_ENABLE(Pin);
 8005cbc:	9b04      	ldr	r3, [sp, #16]
  GPIO_InitStructure.Pin = DEBUG_PIN[Pin];
 8005cbe:	e9cd 670e 	strd	r6, r7, [sp, #56]	; 0x38
  HAL_GPIO_WritePin(DEBUG_PIN_PORT[Pin], GPIO_InitStructure.Pin, GPIO_PIN_RESET);  
 8005cc2:	f001 fa7b 	bl	80071bc <HAL_GPIO_WritePin>
  HAL_GPIO_Init(DEBUG_PIN_PORT[Pin], &GPIO_InitStructure);
 8005cc6:	69e0      	ldr	r0, [r4, #28]
 8005cc8:	a90c      	add	r1, sp, #48	; 0x30
 8005cca:	f001 f951 	bl	8006f70 <HAL_GPIO_Init>
  DEBUG_PINx_GPIO_CLK_ENABLE(Pin);
 8005cce:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
  HAL_GPIO_WritePin(DEBUG_PIN_PORT[Pin], GPIO_InitStructure.Pin, GPIO_PIN_RESET);  
 8005cd0:	6a20      	ldr	r0, [r4, #32]
  DEBUG_PINx_GPIO_CLK_ENABLE(Pin);
 8005cd2:	f043 0302 	orr.w	r3, r3, #2
 8005cd6:	64eb      	str	r3, [r5, #76]	; 0x4c
 8005cd8:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8005cda:	f003 0302 	and.w	r3, r3, #2
  HAL_GPIO_WritePin(DEBUG_PIN_PORT[Pin], GPIO_InitStructure.Pin, GPIO_PIN_RESET);  
 8005cde:	2200      	movs	r2, #0
  DEBUG_PINx_GPIO_CLK_ENABLE(Pin);
 8005ce0:	9303      	str	r3, [sp, #12]
  GPIO_InitStructure.Pin = DEBUG_PIN[Pin];
 8005ce2:	f44f 4880 	mov.w	r8, #16384	; 0x4000
 8005ce6:	f04f 0901 	mov.w	r9, #1
  HAL_GPIO_WritePin(DEBUG_PIN_PORT[Pin], GPIO_InitStructure.Pin, GPIO_PIN_RESET);  
 8005cea:	f44f 4180 	mov.w	r1, #16384	; 0x4000
  DEBUG_PINx_GPIO_CLK_ENABLE(Pin);
 8005cee:	9b03      	ldr	r3, [sp, #12]
  GPIO_InitStructure.Pin = DEBUG_PIN[Pin];
 8005cf0:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 8005cf4:	e9cd 670e 	strd	r6, r7, [sp, #56]	; 0x38
  HAL_GPIO_WritePin(DEBUG_PIN_PORT[Pin], GPIO_InitStructure.Pin, GPIO_PIN_RESET);  
 8005cf8:	f001 fa60 	bl	80071bc <HAL_GPIO_WritePin>
  HAL_GPIO_Init(DEBUG_PIN_PORT[Pin], &GPIO_InitStructure);
 8005cfc:	6a20      	ldr	r0, [r4, #32]
 8005cfe:	a90c      	add	r1, sp, #48	; 0x30
 8005d00:	f001 f936 	bl	8006f70 <HAL_GPIO_Init>
  DEBUG_PINx_GPIO_CLK_ENABLE(Pin);
 8005d04:	f003 f95a 	bl	8008fbc <HAL_PWREx_EnableVddIO2>
 8005d08:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
  HAL_GPIO_WritePin(DEBUG_PIN_PORT[Pin], GPIO_InitStructure.Pin, GPIO_PIN_RESET);  
 8005d0a:	6a60      	ldr	r0, [r4, #36]	; 0x24
  DEBUG_PINx_GPIO_CLK_ENABLE(Pin);
 8005d0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005d10:	64eb      	str	r3, [r5, #76]	; 0x4c
 8005d12:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8005d14:	f003 0340 	and.w	r3, r3, #64	; 0x40
  HAL_GPIO_WritePin(DEBUG_PIN_PORT[Pin], GPIO_InitStructure.Pin, GPIO_PIN_RESET);  
 8005d18:	2200      	movs	r2, #0
  DEBUG_PINx_GPIO_CLK_ENABLE(Pin);
 8005d1a:	9302      	str	r3, [sp, #8]
  GPIO_InitStructure.Pin = DEBUG_PIN[Pin];
 8005d1c:	f44f 7800 	mov.w	r8, #512	; 0x200
 8005d20:	f04f 0901 	mov.w	r9, #1
  HAL_GPIO_WritePin(DEBUG_PIN_PORT[Pin], GPIO_InitStructure.Pin, GPIO_PIN_RESET);  
 8005d24:	f44f 7100 	mov.w	r1, #512	; 0x200
  DEBUG_PINx_GPIO_CLK_ENABLE(Pin);
 8005d28:	9b02      	ldr	r3, [sp, #8]
  GPIO_InitStructure.Pin = DEBUG_PIN[Pin];
 8005d2a:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 8005d2e:	e9cd 670e 	strd	r6, r7, [sp, #56]	; 0x38
  HAL_GPIO_WritePin(DEBUG_PIN_PORT[Pin], GPIO_InitStructure.Pin, GPIO_PIN_RESET);  
 8005d32:	f001 fa43 	bl	80071bc <HAL_GPIO_WritePin>
  HAL_GPIO_Init(DEBUG_PIN_PORT[Pin], &GPIO_InitStructure);
 8005d36:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8005d38:	a90c      	add	r1, sp, #48	; 0x30
 8005d3a:	f001 f919 	bl	8006f70 <HAL_GPIO_Init>
  DEBUG_PINx_GPIO_CLK_ENABLE(Pin);
 8005d3e:	f003 f93d 	bl	8008fbc <HAL_PWREx_EnableVddIO2>
 8005d42:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
  HAL_GPIO_WritePin(DEBUG_PIN_PORT[Pin], GPIO_InitStructure.Pin, GPIO_PIN_RESET);  
 8005d44:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  DEBUG_PINx_GPIO_CLK_ENABLE(Pin);
 8005d46:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005d4a:	64eb      	str	r3, [r5, #76]	; 0x4c
 8005d4c:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8005d4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
  HAL_GPIO_WritePin(DEBUG_PIN_PORT[Pin], GPIO_InitStructure.Pin, GPIO_PIN_RESET);  
 8005d52:	2200      	movs	r2, #0
  DEBUG_PINx_GPIO_CLK_ENABLE(Pin);
 8005d54:	9301      	str	r3, [sp, #4]
  GPIO_InitStructure.Pin = DEBUG_PIN[Pin];
 8005d56:	f44f 6880 	mov.w	r8, #1024	; 0x400
 8005d5a:	f04f 0901 	mov.w	r9, #1
  HAL_GPIO_WritePin(DEBUG_PIN_PORT[Pin], GPIO_InitStructure.Pin, GPIO_PIN_RESET);  
 8005d5e:	f44f 6180 	mov.w	r1, #1024	; 0x400
  DEBUG_PINx_GPIO_CLK_ENABLE(Pin);
 8005d62:	9b01      	ldr	r3, [sp, #4]
  GPIO_InitStructure.Pin = DEBUG_PIN[Pin];
 8005d64:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 8005d68:	e9cd 670e 	strd	r6, r7, [sp, #56]	; 0x38
  HAL_GPIO_WritePin(DEBUG_PIN_PORT[Pin], GPIO_InitStructure.Pin, GPIO_PIN_RESET);  
 8005d6c:	f001 fa26 	bl	80071bc <HAL_GPIO_WritePin>
  HAL_GPIO_Init(DEBUG_PIN_PORT[Pin], &GPIO_InitStructure);
 8005d70:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8005d72:	a90c      	add	r1, sp, #48	; 0x30
 8005d74:	f001 f8fc 	bl	8006f70 <HAL_GPIO_Init>
  DEBUG_PINx_GPIO_CLK_ENABLE(Pin);
 8005d78:	f003 f920 	bl	8008fbc <HAL_PWREx_EnableVddIO2>
 8005d7c:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
  HAL_GPIO_WritePin(DEBUG_PIN_PORT[Pin], GPIO_InitStructure.Pin, GPIO_PIN_RESET);  
 8005d7e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  DEBUG_PINx_GPIO_CLK_ENABLE(Pin);
 8005d80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005d84:	64eb      	str	r3, [r5, #76]	; 0x4c
 8005d86:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8005d88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d8c:	9300      	str	r3, [sp, #0]
  HAL_GPIO_WritePin(DEBUG_PIN_PORT[Pin], GPIO_InitStructure.Pin, GPIO_PIN_RESET);  
 8005d8e:	2200      	movs	r2, #0
 8005d90:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  GPIO_InitStructure.Pin = DEBUG_PIN[Pin];
 8005d94:	f44f 5880 	mov.w	r8, #4096	; 0x1000
 8005d98:	f04f 0901 	mov.w	r9, #1
  DEBUG_PINx_GPIO_CLK_ENABLE(Pin);
 8005d9c:	9b00      	ldr	r3, [sp, #0]
  GPIO_InitStructure.Pin = DEBUG_PIN[Pin];
 8005d9e:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 8005da2:	e9cd 670e 	strd	r6, r7, [sp, #56]	; 0x38
  HAL_GPIO_WritePin(DEBUG_PIN_PORT[Pin], GPIO_InitStructure.Pin, GPIO_PIN_RESET);  
 8005da6:	f001 fa09 	bl	80071bc <HAL_GPIO_WritePin>
  HAL_GPIO_Init(DEBUG_PIN_PORT[Pin], &GPIO_InitStructure);
 8005daa:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8005dac:	a90c      	add	r1, sp, #48	; 0x30
 8005dae:	f001 f8df 	bl	8006f70 <HAL_GPIO_Init>
}
 8005db2:	e003      	b.n	8005dbc <BSP_DEBUG_PIN_Init_All+0x328>
 8005db4:	2000015c 	.word	0x2000015c
 8005db8:	40021000 	.word	0x40021000
 8005dbc:	b013      	add	sp, #76	; 0x4c
 8005dbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005dc2:	bf00      	nop

08005dc4 <BSP_DEBUG_PIN_On>:
  HAL_GPIO_WritePin(DEBUG_PIN_PORT[Pin], DEBUG_PIN[Pin], GPIO_PIN_SET);
 8005dc4:	4a04      	ldr	r2, [pc, #16]	; (8005dd8 <BSP_DEBUG_PIN_On+0x14>)
 8005dc6:	4b05      	ldr	r3, [pc, #20]	; (8005ddc <BSP_DEBUG_PIN_On+0x18>)
 8005dc8:	f832 1010 	ldrh.w	r1, [r2, r0, lsl #1]
 8005dcc:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8005dd0:	2201      	movs	r2, #1
 8005dd2:	f001 b9f3 	b.w	80071bc <HAL_GPIO_WritePin>
 8005dd6:	bf00      	nop
 8005dd8:	0801b8e4 	.word	0x0801b8e4
 8005ddc:	2000015c 	.word	0x2000015c

08005de0 <BSP_DEBUG_PIN_Off>:
  HAL_GPIO_WritePin(DEBUG_PIN_PORT[Pin], DEBUG_PIN[Pin], GPIO_PIN_RESET);
 8005de0:	4a04      	ldr	r2, [pc, #16]	; (8005df4 <BSP_DEBUG_PIN_Off+0x14>)
 8005de2:	4b05      	ldr	r3, [pc, #20]	; (8005df8 <BSP_DEBUG_PIN_Off+0x18>)
 8005de4:	f832 1010 	ldrh.w	r1, [r2, r0, lsl #1]
 8005de8:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8005dec:	2200      	movs	r2, #0
 8005dee:	f001 b9e5 	b.w	80071bc <HAL_GPIO_WritePin>
 8005df2:	bf00      	nop
 8005df4:	0801b8e4 	.word	0x0801b8e4
 8005df8:	2000015c 	.word	0x2000015c

08005dfc <BSP_SD_Detect_Init>:
 */
void BSP_SD_Detect_Init(void)
{
  GPIO_InitTypeDef gpio_init_structure;
  
  SD_DETECT_GPIO_CLK_ENABLE();
 8005dfc:	4b0d      	ldr	r3, [pc, #52]	; (8005e34 <BSP_SD_Detect_Init+0x38>)
  /* Configure MFX Interrupt GPIO */
  gpio_init_structure.Pin   = SD_DETECT_GPIO_PIN;
  gpio_init_structure.Pull  = GPIO_PULLUP;
  gpio_init_structure.Speed = GPIO_SPEED_LOW;
  gpio_init_structure.Mode  = GPIO_MODE_INPUT;
  HAL_GPIO_Init(SD_DETECT_GPIO_PORT, &gpio_init_structure);
 8005dfe:	480e      	ldr	r0, [pc, #56]	; (8005e38 <BSP_SD_Detect_Init+0x3c>)
  SD_DETECT_GPIO_CLK_ENABLE();
 8005e00:	6cda      	ldr	r2, [r3, #76]	; 0x4c
{
 8005e02:	b570      	push	{r4, r5, r6, lr}
  SD_DETECT_GPIO_CLK_ENABLE();
 8005e04:	f042 0202 	orr.w	r2, r2, #2
 8005e08:	64da      	str	r2, [r3, #76]	; 0x4c
 8005e0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
{
 8005e0c:	b088      	sub	sp, #32
  SD_DETECT_GPIO_CLK_ENABLE();
 8005e0e:	f003 0302 	and.w	r3, r3, #2
 8005e12:	9301      	str	r3, [sp, #4]
  gpio_init_structure.Pin   = SD_DETECT_GPIO_PIN;
 8005e14:	2201      	movs	r2, #1
 8005e16:	2300      	movs	r3, #0
 8005e18:	f44f 5480 	mov.w	r4, #4096	; 0x1000
 8005e1c:	2500      	movs	r5, #0
  HAL_GPIO_Init(SD_DETECT_GPIO_PORT, &gpio_init_structure);
 8005e1e:	a902      	add	r1, sp, #8
  gpio_init_structure.Pin   = SD_DETECT_GPIO_PIN;
 8005e20:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8005e24:	e9cd 2304 	strd	r2, r3, [sp, #16]
  SD_DETECT_GPIO_CLK_ENABLE();
 8005e28:	9e01      	ldr	r6, [sp, #4]
  HAL_GPIO_Init(SD_DETECT_GPIO_PORT, &gpio_init_structure);
 8005e2a:	f001 f8a1 	bl	8006f70 <HAL_GPIO_Init>
}
 8005e2e:	b008      	add	sp, #32
 8005e30:	bd70      	pop	{r4, r5, r6, pc}
 8005e32:	bf00      	nop
 8005e34:	40021000 	.word	0x40021000
 8005e38:	48000400 	.word	0x48000400

08005e3c <BSP_SD_IsDetected>:
/**
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @retval Return 1 if SD is detected, 0 if not
 */
uint8_t BSP_SD_IsDetected(void)
{
 8005e3c:	b508      	push	{r3, lr}
  /* Check SD card detect pin */
  if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_GPIO_PIN) == GPIO_PIN_RESET)
 8005e3e:	4807      	ldr	r0, [pc, #28]	; (8005e5c <BSP_SD_IsDetected+0x20>)
 8005e40:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005e44:	f001 f9b4 	bl	80071b0 <HAL_GPIO_ReadPin>
  {
    SD_Status = SD_NOT_PRESENT;
 8005e48:	4b05      	ldr	r3, [pc, #20]	; (8005e60 <BSP_SD_IsDetected+0x24>)
  if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_GPIO_PIN) == GPIO_PIN_RESET)
 8005e4a:	b910      	cbnz	r0, 8005e52 <BSP_SD_IsDetected+0x16>
    SD_Status = SD_NOT_PRESENT;
 8005e4c:	7018      	strb	r0, [r3, #0]
  else
  {
    SD_Status = SD_PRESENT;
  }
  
  return SD_Status;
 8005e4e:	7818      	ldrb	r0, [r3, #0]
}
 8005e50:	bd08      	pop	{r3, pc}
    SD_Status = SD_PRESENT;
 8005e52:	2201      	movs	r2, #1
 8005e54:	701a      	strb	r2, [r3, #0]
  return SD_Status;
 8005e56:	7818      	ldrb	r0, [r3, #0]
}
 8005e58:	bd08      	pop	{r3, pc}
 8005e5a:	bf00      	nop
 8005e5c:	48000400 	.word	0x48000400
 8005e60:	20001cfa 	.word	0x20001cfa

08005e64 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read 
  * @retval SD status
  */
uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8005e64:	b510      	push	{r4, lr}
 8005e66:	460c      	mov	r4, r1
 8005e68:	4613      	mov	r3, r2
  uint8_t sd_state = MSD_OK;
  
  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8005e6a:	4601      	mov	r1, r0
 8005e6c:	4622      	mov	r2, r4
 8005e6e:	4803      	ldr	r0, [pc, #12]	; (8005e7c <BSP_SD_ReadBlocks_DMA+0x18>)
 8005e70:	f004 f9ee 	bl	800a250 <HAL_SD_ReadBlocks_DMA>
  {
    sd_state = MSD_ERROR;
  }
  
  return sd_state; 
}
 8005e74:	3800      	subs	r0, #0
 8005e76:	bf18      	it	ne
 8005e78:	2001      	movne	r0, #1
 8005e7a:	bd10      	pop	{r4, pc}
 8005e7c:	20017838 	.word	0x20017838

08005e80 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write 
  * @retval SD status
  */
uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8005e80:	b510      	push	{r4, lr}
 8005e82:	460c      	mov	r4, r1
 8005e84:	4613      	mov	r3, r2
  uint8_t sd_state = MSD_OK;
  
  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8005e86:	4601      	mov	r1, r0
 8005e88:	4622      	mov	r2, r4
 8005e8a:	4803      	ldr	r0, [pc, #12]	; (8005e98 <BSP_SD_WriteBlocks_DMA+0x18>)
 8005e8c:	f004 fa5e 	bl	800a34c <HAL_SD_WriteBlocks_DMA>
  {
    sd_state = MSD_ERROR;
  }
  
  return sd_state; 
}
 8005e90:	3800      	subs	r0, #0
 8005e92:	bf18      	it	ne
 8005e94:	2001      	movne	r0, #1
 8005e96:	bd10      	pop	{r4, pc}
 8005e98:	20017838 	.word	0x20017838

08005e9c <BSP_SD_MspInit>:
{
  UNUSED(hsd);
  GPIO_InitTypeDef gpioinitstruct = {0};
  
  /* Enable SDMMC1 clock */
  __HAL_RCC_SDMMC1_CLK_ENABLE();
 8005e9c:	4b1e      	ldr	r3, [pc, #120]	; (8005f18 <BSP_SD_MspInit+0x7c>)
  gpioinitstruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
  gpioinitstruct.Alternate = GPIO_AF12_SDMMC1;

  /* GPIOC configuration */
  gpioinitstruct.Pin = GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12;
  HAL_GPIO_Init(GPIOC, &gpioinitstruct);
 8005e9e:	481f      	ldr	r0, [pc, #124]	; (8005f1c <BSP_SD_MspInit+0x80>)
  __HAL_RCC_SDMMC1_CLK_ENABLE();
 8005ea0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
{
 8005ea2:	b530      	push	{r4, r5, lr}
  __HAL_RCC_SDMMC1_CLK_ENABLE();
 8005ea4:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8005ea8:	64da      	str	r2, [r3, #76]	; 0x4c
 8005eaa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
{
 8005eac:	b08b      	sub	sp, #44	; 0x2c
  __HAL_RCC_SDMMC1_CLK_ENABLE();
 8005eae:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 8005eb2:	9201      	str	r2, [sp, #4]
 8005eb4:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005eb6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005eb8:	f042 0204 	orr.w	r2, r2, #4
 8005ebc:	64da      	str	r2, [r3, #76]	; 0x4c
 8005ebe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005ec0:	f002 0204 	and.w	r2, r2, #4
 8005ec4:	9202      	str	r2, [sp, #8]
 8005ec6:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8005ec8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005eca:	f042 0208 	orr.w	r2, r2, #8
 8005ece:	64da      	str	r2, [r3, #76]	; 0x4c
 8005ed0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ed2:	f003 0308 	and.w	r3, r3, #8
 8005ed6:	9303      	str	r3, [sp, #12]
  gpioinitstruct.Pin = GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12;
 8005ed8:	f44f 52f8 	mov.w	r2, #7936	; 0x1f00
 8005edc:	2302      	movs	r3, #2
 8005ede:	e9cd 2304 	strd	r2, r3, [sp, #16]
  HAL_GPIO_Init(GPIOC, &gpioinitstruct);
 8005ee2:	a904      	add	r1, sp, #16
  gpioinitstruct.Pin = GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12;
 8005ee4:	2201      	movs	r2, #1
 8005ee6:	2303      	movs	r3, #3
  gpioinitstruct.Alternate = GPIO_AF12_SDMMC1;
 8005ee8:	240c      	movs	r4, #12
  gpioinitstruct.Pin = GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12;
 8005eea:	e9cd 2306 	strd	r2, r3, [sp, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8005eee:	9d03      	ldr	r5, [sp, #12]
  gpioinitstruct.Alternate = GPIO_AF12_SDMMC1;
 8005ef0:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOC, &gpioinitstruct);
 8005ef2:	f001 f83d 	bl	8006f70 <HAL_GPIO_Init>

  /* GPIOD configuration */
  gpioinitstruct.Pin = GPIO_PIN_2;
 8005ef6:	2304      	movs	r3, #4
  HAL_GPIO_Init(GPIOD, &gpioinitstruct);
 8005ef8:	a904      	add	r1, sp, #16
 8005efa:	4809      	ldr	r0, [pc, #36]	; (8005f20 <BSP_SD_MspInit+0x84>)
  gpioinitstruct.Pin = GPIO_PIN_2;
 8005efc:	9304      	str	r3, [sp, #16]
  HAL_GPIO_Init(GPIOD, &gpioinitstruct);
 8005efe:	f001 f837 	bl	8006f70 <HAL_GPIO_Init>

  /* NVIC configuration for SDMMC1 interrupts */
  HAL_NVIC_SetPriority(SDMMCx_IRQn, 5, 0);
 8005f02:	2200      	movs	r2, #0
 8005f04:	2105      	movs	r1, #5
 8005f06:	2031      	movs	r0, #49	; 0x31
 8005f08:	f000 fe3c 	bl	8006b84 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDMMCx_IRQn);
 8005f0c:	2031      	movs	r0, #49	; 0x31
 8005f0e:	f000 fe71 	bl	8006bf4 <HAL_NVIC_EnableIRQ>


}
 8005f12:	b00b      	add	sp, #44	; 0x2c
 8005f14:	bd30      	pop	{r4, r5, pc}
 8005f16:	bf00      	nop
 8005f18:	40021000 	.word	0x40021000
 8005f1c:	48000800 	.word	0x48000800
 8005f20:	48000c00 	.word	0x48000c00

08005f24 <BSP_SD_Init>:
  hsd1.Instance = SDMMC1;
 8005f24:	4813      	ldr	r0, [pc, #76]	; (8005f74 <BSP_SD_Init+0x50>)
 8005f26:	4b14      	ldr	r3, [pc, #80]	; (8005f78 <BSP_SD_Init+0x54>)
{
 8005f28:	b510      	push	{r4, lr}
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8005f2a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
  hsd1.Instance = SDMMC1;
 8005f2e:	6003      	str	r3, [r0, #0]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_ENABLE;
 8005f30:	f44f 3200 	mov.w	r2, #131072	; 0x20000
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8005f34:	2300      	movs	r3, #0
  hsd1.Init.ClockDiv = 1;
 8005f36:	2401      	movs	r4, #1
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_ENABLE;
 8005f38:	e9c0 1203 	strd	r1, r2, [r0, #12]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8005f3c:	e9c0 3301 	strd	r3, r3, [r0, #4]
  hsd1.Init.ClockDiv = 1;
 8005f40:	e9c0 4305 	strd	r4, r3, [r0, #20]
  BSP_SD_MspInit(&hsd1);
 8005f44:	f7ff ffaa 	bl	8005e9c <BSP_SD_MspInit>
  if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_GPIO_PIN) == GPIO_PIN_RESET)
 8005f48:	480c      	ldr	r0, [pc, #48]	; (8005f7c <BSP_SD_Init+0x58>)
 8005f4a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005f4e:	f001 f92f 	bl	80071b0 <HAL_GPIO_ReadPin>
    SD_Status = SD_NOT_PRESENT;
 8005f52:	4b0b      	ldr	r3, [pc, #44]	; (8005f80 <BSP_SD_Init+0x5c>)
  if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_GPIO_PIN) == GPIO_PIN_RESET)
 8005f54:	b928      	cbnz	r0, 8005f62 <BSP_SD_Init+0x3e>
    SD_Status = SD_NOT_PRESENT;
 8005f56:	7018      	strb	r0, [r3, #0]
  return SD_Status;
 8005f58:	781b      	ldrb	r3, [r3, #0]
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8005f5a:	2b01      	cmp	r3, #1
 8005f5c:	d005      	beq.n	8005f6a <BSP_SD_Init+0x46>
}
 8005f5e:	2002      	movs	r0, #2
 8005f60:	bd10      	pop	{r4, pc}
    SD_Status = SD_PRESENT;
 8005f62:	701c      	strb	r4, [r3, #0]
  return SD_Status;
 8005f64:	781b      	ldrb	r3, [r3, #0]
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8005f66:	2b01      	cmp	r3, #1
 8005f68:	d1f9      	bne.n	8005f5e <BSP_SD_Init+0x3a>
}
 8005f6a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  sd_state = (uint8_t)HAL_SD_Init(&hsd1);
 8005f6e:	4801      	ldr	r0, [pc, #4]	; (8005f74 <BSP_SD_Init+0x50>)
 8005f70:	f004 bf5e 	b.w	800ae30 <HAL_SD_Init>
 8005f74:	20017838 	.word	0x20017838
 8005f78:	50062400 	.word	0x50062400
 8005f7c:	48000400 	.word	0x48000400
 8005f80:	20001cfa 	.word	0x20001cfa

08005f84 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
uint8_t BSP_SD_GetCardState(void)
{
 8005f84:	b508      	push	{r3, lr}
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8005f86:	4803      	ldr	r0, [pc, #12]	; (8005f94 <BSP_SD_GetCardState+0x10>)
 8005f88:	f004 ffb6 	bl	800aef8 <HAL_SD_GetCardState>
}
 8005f8c:	3804      	subs	r0, #4
 8005f8e:	bf18      	it	ne
 8005f90:	2001      	movne	r0, #1
 8005f92:	bd08      	pop	{r3, pc}
 8005f94:	20017838 	.word	0x20017838

08005f98 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None 
  */
void BSP_SD_GetCardInfo(BSP_SD_CardInfo *CardInfo)
{
 8005f98:	4601      	mov	r1, r0
  /* Get SD card Information */
  (void)HAL_SD_GetCardInfo(&hsd1, CardInfo);
 8005f9a:	4801      	ldr	r0, [pc, #4]	; (8005fa0 <BSP_SD_GetCardInfo+0x8>)
 8005f9c:	f004 be8e 	b.w	800acbc <HAL_SD_GetCardInfo>
 8005fa0:	20017838 	.word	0x20017838

08005fa4 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8005fa4:	b508      	push	{r3, lr}
  UNUSED(hsd);
  BSP_SD_WriteCpltCallback();
 8005fa6:	f7fd fa69 	bl	800347c <BSP_SD_WriteCpltCallback>
}
 8005faa:	bd08      	pop	{r3, pc}

08005fac <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8005fac:	b508      	push	{r3, lr}
  UNUSED(hsd);
  BSP_SD_ReadCpltCallback();
 8005fae:	f7fd fa71 	bl	8003494 <BSP_SD_ReadCpltCallback>
}
 8005fb2:	bd08      	pop	{r3, pc}

08005fb4 <HAL_MspInit>:
__weak void HAL_MspInit(void)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 8005fb4:	4770      	bx	lr
 8005fb6:	bf00      	nop

08005fb8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005fb8:	b570      	push	{r4, r5, r6, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  if (uwTickFreq != 0U)
 8005fba:	4e0f      	ldr	r6, [pc, #60]	; (8005ff8 <HAL_InitTick+0x40>)
 8005fbc:	6833      	ldr	r3, [r6, #0]
 8005fbe:	b90b      	cbnz	r3, 8005fc4 <HAL_InitTick+0xc>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 8005fc0:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 8005fc2:	bd70      	pop	{r4, r5, r6, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8005fc4:	490d      	ldr	r1, [pc, #52]	; (8005ffc <HAL_InitTick+0x44>)
 8005fc6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005fca:	4605      	mov	r5, r0
 8005fcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fd0:	6808      	ldr	r0, [r1, #0]
 8005fd2:	fbb0 f0f3 	udiv	r0, r0, r3
 8005fd6:	f000 fe1b 	bl	8006c10 <HAL_SYSTICK_Config>
 8005fda:	4604      	mov	r4, r0
 8005fdc:	2800      	cmp	r0, #0
 8005fde:	d1ef      	bne.n	8005fc0 <HAL_InitTick+0x8>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005fe0:	2d0f      	cmp	r5, #15
 8005fe2:	d8ed      	bhi.n	8005fc0 <HAL_InitTick+0x8>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005fe4:	4602      	mov	r2, r0
 8005fe6:	4629      	mov	r1, r5
 8005fe8:	f04f 30ff 	mov.w	r0, #4294967295
 8005fec:	f000 fdca 	bl	8006b84 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8005ff0:	6075      	str	r5, [r6, #4]
 8005ff2:	4620      	mov	r0, r4
}
 8005ff4:	bd70      	pop	{r4, r5, r6, pc}
 8005ff6:	bf00      	nop
 8005ff8:	2000018c 	.word	0x2000018c
 8005ffc:	200000f8 	.word	0x200000f8

08006000 <HAL_Init>:
{
 8006000:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006002:	2003      	movs	r0, #3
 8006004:	f000 fdaa 	bl	8006b5c <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8006008:	2000      	movs	r0, #0
 800600a:	f7ff ffd5 	bl	8005fb8 <HAL_InitTick>
 800600e:	b110      	cbz	r0, 8006016 <HAL_Init+0x16>
    status = HAL_ERROR;
 8006010:	2401      	movs	r4, #1
}
 8006012:	4620      	mov	r0, r4
 8006014:	bd10      	pop	{r4, pc}
 8006016:	4604      	mov	r4, r0
    HAL_MspInit();
 8006018:	f7ff ffcc 	bl	8005fb4 <HAL_MspInit>
}
 800601c:	4620      	mov	r0, r4
 800601e:	bd10      	pop	{r4, pc}

08006020 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8006020:	4a03      	ldr	r2, [pc, #12]	; (8006030 <HAL_IncTick+0x10>)
 8006022:	4904      	ldr	r1, [pc, #16]	; (8006034 <HAL_IncTick+0x14>)
 8006024:	6813      	ldr	r3, [r2, #0]
 8006026:	6809      	ldr	r1, [r1, #0]
 8006028:	440b      	add	r3, r1
 800602a:	6013      	str	r3, [r2, #0]
}
 800602c:	4770      	bx	lr
 800602e:	bf00      	nop
 8006030:	2001e0c8 	.word	0x2001e0c8
 8006034:	2000018c 	.word	0x2000018c

08006038 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8006038:	4b01      	ldr	r3, [pc, #4]	; (8006040 <HAL_GetTick+0x8>)
 800603a:	6818      	ldr	r0, [r3, #0]
}
 800603c:	4770      	bx	lr
 800603e:	bf00      	nop
 8006040:	2001e0c8 	.word	0x2001e0c8

08006044 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006044:	b538      	push	{r3, r4, r5, lr}
 8006046:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8006048:	f7ff fff6 	bl	8006038 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800604c:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 800604e:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 8006050:	d002      	beq.n	8006058 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8006052:	4b04      	ldr	r3, [pc, #16]	; (8006064 <HAL_Delay+0x20>)
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8006058:	f7ff ffee 	bl	8006038 <HAL_GetTick>
 800605c:	1b43      	subs	r3, r0, r5
 800605e:	42a3      	cmp	r3, r4
 8006060:	d3fa      	bcc.n	8006058 <HAL_Delay+0x14>
  {
  }
}
 8006062:	bd38      	pop	{r3, r4, r5, pc}
 8006064:	2000018c 	.word	0x2000018c

08006068 <HAL_ADC_ErrorCallback>:
 8006068:	4770      	bx	lr
 800606a:	bf00      	nop

0800606c <HAL_ADC_ConvCpltCallback>:
 800606c:	4770      	bx	lr
 800606e:	bf00      	nop

08006070 <HAL_ADC_ConvHalfCpltCallback>:
 8006070:	4770      	bx	lr
 8006072:	bf00      	nop

08006074 <HAL_ADC_LevelOutOfWindowCallback>:
 8006074:	4770      	bx	lr
 8006076:	bf00      	nop

08006078 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8006078:	b570      	push	{r4, r5, r6, lr}
 800607a:	b082      	sub	sp, #8
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800607c:	2300      	movs	r3, #0
 800607e:	9301      	str	r3, [sp, #4]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8006080:	2800      	cmp	r0, #0
 8006082:	f000 80c8 	beq.w	8006216 <HAL_ADC_Init+0x19e>
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8006086:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8006088:	4604      	mov	r4, r0
 800608a:	b9e3      	cbnz	r3, 80060c6 <HAL_ADC_Init+0x4e>
  {
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    /* Init the ADC Callback settings */
    hadc->ConvCpltCallback              = HAL_ADC_ConvCpltCallback;                 /* Legacy weak callback */
 800608c:	4a72      	ldr	r2, [pc, #456]	; (8006258 <HAL_ADC_Init+0x1e0>)
    hadc->InjectedQueueOverflowCallback = HAL_ADCEx_InjectedQueueOverflowCallback;  /* Legacy weak callback */
    hadc->LevelOutOfWindow2Callback     = HAL_ADCEx_LevelOutOfWindow2Callback;      /* Legacy weak callback */
    hadc->LevelOutOfWindow3Callback     = HAL_ADCEx_LevelOutOfWindow3Callback;      /* Legacy weak callback */
    hadc->EndOfSamplingCallback         = HAL_ADCEx_EndOfSamplingCallback;          /* Legacy weak callback */

    if (hadc->MspInitCallback == NULL)
 800608e:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
    hadc->ConvHalfCpltCallback          = HAL_ADC_ConvHalfCpltCallback;             /* Legacy weak callback */
 8006092:	4d72      	ldr	r5, [pc, #456]	; (800625c <HAL_ADC_Init+0x1e4>)
    hadc->LevelOutOfWindowCallback      = HAL_ADC_LevelOutOfWindowCallback;         /* Legacy weak callback */
 8006094:	4872      	ldr	r0, [pc, #456]	; (8006260 <HAL_ADC_Init+0x1e8>)
    hadc->ErrorCallback                 = HAL_ADC_ErrorCallback;                    /* Legacy weak callback */
 8006096:	4973      	ldr	r1, [pc, #460]	; (8006264 <HAL_ADC_Init+0x1ec>)
    hadc->ConvCpltCallback              = HAL_ADC_ConvCpltCallback;                 /* Legacy weak callback */
 8006098:	66a2      	str	r2, [r4, #104]	; 0x68
    hadc->InjectedConvCpltCallback      = HAL_ADCEx_InjectedConvCpltCallback;       /* Legacy weak callback */
 800609a:	4a73      	ldr	r2, [pc, #460]	; (8006268 <HAL_ADC_Init+0x1f0>)
    hadc->ConvHalfCpltCallback          = HAL_ADC_ConvHalfCpltCallback;             /* Legacy weak callback */
 800609c:	66e5      	str	r5, [r4, #108]	; 0x6c
    hadc->LevelOutOfWindowCallback      = HAL_ADC_LevelOutOfWindowCallback;         /* Legacy weak callback */
 800609e:	6720      	str	r0, [r4, #112]	; 0x70
    hadc->InjectedQueueOverflowCallback = HAL_ADCEx_InjectedQueueOverflowCallback;  /* Legacy weak callback */
 80060a0:	4d72      	ldr	r5, [pc, #456]	; (800626c <HAL_ADC_Init+0x1f4>)
    hadc->LevelOutOfWindow2Callback     = HAL_ADCEx_LevelOutOfWindow2Callback;      /* Legacy weak callback */
 80060a2:	4873      	ldr	r0, [pc, #460]	; (8006270 <HAL_ADC_Init+0x1f8>)
    hadc->ErrorCallback                 = HAL_ADC_ErrorCallback;                    /* Legacy weak callback */
 80060a4:	6761      	str	r1, [r4, #116]	; 0x74
    hadc->InjectedConvCpltCallback      = HAL_ADCEx_InjectedConvCpltCallback;       /* Legacy weak callback */
 80060a6:	67a2      	str	r2, [r4, #120]	; 0x78
    hadc->LevelOutOfWindow3Callback     = HAL_ADCEx_LevelOutOfWindow3Callback;      /* Legacy weak callback */
 80060a8:	4972      	ldr	r1, [pc, #456]	; (8006274 <HAL_ADC_Init+0x1fc>)
    hadc->EndOfSamplingCallback         = HAL_ADCEx_EndOfSamplingCallback;          /* Legacy weak callback */
 80060aa:	4a73      	ldr	r2, [pc, #460]	; (8006278 <HAL_ADC_Init+0x200>)
    hadc->LevelOutOfWindow2Callback     = HAL_ADCEx_LevelOutOfWindow2Callback;      /* Legacy weak callback */
 80060ac:	e9c4 501f 	strd	r5, r0, [r4, #124]	; 0x7c
    hadc->EndOfSamplingCallback         = HAL_ADCEx_EndOfSamplingCallback;          /* Legacy weak callback */
 80060b0:	e9c4 1221 	strd	r1, r2, [r4, #132]	; 0x84
    if (hadc->MspInitCallback == NULL)
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	f000 80b1 	beq.w	800621c <HAL_ADC_Init+0x1a4>
    {
      hadc->MspInitCallback = HAL_ADC_MspInit; /* Legacy weak MspInit  */
    }

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
 80060ba:	4620      	mov	r0, r4
 80060bc:	4798      	blx	r3
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80060be:	2300      	movs	r3, #0
 80060c0:	65e3      	str	r3, [r4, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80060c2:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80060c6:	6822      	ldr	r2, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80060c8:	6893      	ldr	r3, [r2, #8]
 80060ca:	009d      	lsls	r5, r3, #2
 80060cc:	d505      	bpl.n	80060da <HAL_ADC_Init+0x62>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80060ce:	6893      	ldr	r3, [r2, #8]
 80060d0:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80060d4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80060d8:	6093      	str	r3, [r2, #8]
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80060da:	6893      	ldr	r3, [r2, #8]
 80060dc:	00d8      	lsls	r0, r3, #3
 80060de:	d417      	bmi.n	8006110 <HAL_ADC_Init+0x98>
    LL_ADC_EnableInternalRegulator(hadc->Instance);

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80060e0:	4b66      	ldr	r3, [pc, #408]	; (800627c <HAL_ADC_Init+0x204>)
  MODIFY_REG(ADCx->CR,
 80060e2:	6891      	ldr	r1, [r2, #8]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	4866      	ldr	r0, [pc, #408]	; (8006280 <HAL_ADC_Init+0x208>)
 80060e8:	099b      	lsrs	r3, r3, #6
 80060ea:	f021 4110 	bic.w	r1, r1, #2415919104	; 0x90000000
 80060ee:	fba0 0303 	umull	r0, r3, r0, r3
 80060f2:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 80060f6:	099b      	lsrs	r3, r3, #6
 80060f8:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 80060fc:	6091      	str	r1, [r2, #8]
 80060fe:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8006100:	9b01      	ldr	r3, [sp, #4]
 8006102:	b12b      	cbz	r3, 8006110 <HAL_ADC_Init+0x98>
    {
      wait_loop_index--;
 8006104:	9b01      	ldr	r3, [sp, #4]
 8006106:	3b01      	subs	r3, #1
 8006108:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 800610a:	9b01      	ldr	r3, [sp, #4]
 800610c:	2b00      	cmp	r3, #0
 800610e:	d1f9      	bne.n	8006104 <HAL_ADC_Init+0x8c>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8006110:	6893      	ldr	r3, [r2, #8]
 8006112:	00d9      	lsls	r1, r3, #3
 8006114:	d451      	bmi.n	80061ba <HAL_ADC_Init+0x142>
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006116:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006118:	f043 0310 	orr.w	r3, r3, #16
 800611c:	65a3      	str	r3, [r4, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800611e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8006120:	f043 0301 	orr.w	r3, r3, #1
 8006124:	65e3      	str	r3, [r4, #92]	; 0x5c
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006126:	6893      	ldr	r3, [r2, #8]
 8006128:	f013 0f04 	tst.w	r3, #4

    tmp_hal_status = HAL_ERROR;
 800612c:	f04f 0001 	mov.w	r0, #1
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8006130:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006132:	d149      	bne.n	80061c8 <HAL_ADC_Init+0x150>
 8006134:	06db      	lsls	r3, r3, #27
 8006136:	d447      	bmi.n	80061c8 <HAL_ADC_Init+0x150>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006138:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800613a:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800613e:	f043 0302 	orr.w	r3, r3, #2
 8006142:	65a3      	str	r3, [r4, #88]	; 0x58
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006144:	6893      	ldr	r3, [r2, #8]
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006146:	07de      	lsls	r6, r3, #31
 8006148:	d40a      	bmi.n	8006160 <HAL_ADC_Init+0xe8>
 800614a:	4b4e      	ldr	r3, [pc, #312]	; (8006284 <HAL_ADC_Init+0x20c>)
 800614c:	689b      	ldr	r3, [r3, #8]
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800614e:	07dd      	lsls	r5, r3, #31
 8006150:	d406      	bmi.n	8006160 <HAL_ADC_Init+0xe8>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8006152:	494d      	ldr	r1, [pc, #308]	; (8006288 <HAL_ADC_Init+0x210>)
 8006154:	6865      	ldr	r5, [r4, #4]
 8006156:	688b      	ldr	r3, [r1, #8]
 8006158:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 800615c:	432b      	orrs	r3, r5
 800615e:	608b      	str	r3, [r1, #8]
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
                hadc->Init.Overrun                                                     |
                hadc->Init.DataAlign                                                   |
 8006160:	e9d4 1502 	ldrd	r1, r5, [r4, #8]
 8006164:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006166:	432b      	orrs	r3, r5
 8006168:	430b      	orrs	r3, r1
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800616a:	7e65      	ldrb	r5, [r4, #25]
                hadc->Init.Resolution                                                  |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800616c:	f894 1020 	ldrb.w	r1, [r4, #32]
                hadc->Init.DataAlign                                                   |
 8006170:	ea43 3345 	orr.w	r3, r3, r5, lsl #13

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8006174:	2901      	cmp	r1, #1
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8006176:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800617a:	d047      	beq.n	800620c <HAL_ADC_Init+0x194>
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800617c:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800617e:	b121      	cbz	r1, 800618a <HAL_ADC_Init+0x112>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
                  | hadc->Init.ExternalTrigConvEdge
 8006180:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8006182:	f401 7170 	and.w	r1, r1, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8006186:	4329      	orrs	r1, r5
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8006188:	430b      	orrs	r3, r1
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800618a:	68d5      	ldr	r5, [r2, #12]
 800618c:	493f      	ldr	r1, [pc, #252]	; (800628c <HAL_ADC_Init+0x214>)
 800618e:	4029      	ands	r1, r5
 8006190:	430b      	orrs	r3, r1
 8006192:	60d3      	str	r3, [r2, #12]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006194:	6893      	ldr	r3, [r2, #8]
 8006196:	0759      	lsls	r1, r3, #29
 8006198:	d51d      	bpl.n	80061d6 <HAL_ADC_Init+0x15e>
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800619a:	6893      	ldr	r3, [r2, #8]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800619c:	6923      	ldr	r3, [r4, #16]
 800619e:	2b01      	cmp	r3, #1
 80061a0:	d040      	beq.n	8006224 <HAL_ADC_Init+0x1ac>
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80061a2:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80061a4:	f023 030f 	bic.w	r3, r3, #15
 80061a8:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80061aa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80061ac:	f023 0303 	bic.w	r3, r3, #3
 80061b0:	f043 0301 	orr.w	r3, r3, #1
 80061b4:	65a3      	str	r3, [r4, #88]	; 0x58
    tmp_hal_status = HAL_ERROR;
  }

  /* Return function status */
  return tmp_hal_status;
}
 80061b6:	b002      	add	sp, #8
 80061b8:	bd70      	pop	{r4, r5, r6, pc}
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80061ba:	6893      	ldr	r3, [r2, #8]
 80061bc:	f013 0f04 	tst.w	r3, #4
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80061c0:	f04f 0000 	mov.w	r0, #0
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80061c4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80061c6:	d0b5      	beq.n	8006134 <HAL_ADC_Init+0xbc>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80061c8:	6da3      	ldr	r3, [r4, #88]	; 0x58
    tmp_hal_status = HAL_ERROR;
 80061ca:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80061cc:	f043 0310 	orr.w	r3, r3, #16
 80061d0:	65a3      	str	r3, [r4, #88]	; 0x58
}
 80061d2:	b002      	add	sp, #8
 80061d4:	bd70      	pop	{r4, r5, r6, pc}
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80061d6:	6893      	ldr	r3, [r2, #8]
 80061d8:	071b      	lsls	r3, r3, #28
 80061da:	d4df      	bmi.n	800619c <HAL_ADC_Init+0x124>
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80061dc:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80061e0:	7e26      	ldrb	r6, [r4, #24]
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80061e2:	68d1      	ldr	r1, [r2, #12]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80061e4:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80061e6:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80061e8:	ea43 3386 	orr.w	r3, r3, r6, lsl #14
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80061ec:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80061f0:	432b      	orrs	r3, r5
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80061f2:	f021 0106 	bic.w	r1, r1, #6
 80061f6:	430b      	orrs	r3, r1
 80061f8:	60d3      	str	r3, [r2, #12]
      if (hadc->Init.OversamplingMode == ENABLE)
 80061fa:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 80061fe:	2b01      	cmp	r3, #1
 8006200:	d018      	beq.n	8006234 <HAL_ADC_Init+0x1bc>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8006202:	6913      	ldr	r3, [r2, #16]
 8006204:	f023 0301 	bic.w	r3, r3, #1
 8006208:	6113      	str	r3, [r2, #16]
 800620a:	e7c7      	b.n	800619c <HAL_ADC_Init+0x124>
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800620c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800620e:	3901      	subs	r1, #1
 8006210:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
 8006214:	e7b2      	b.n	800617c <HAL_ADC_Init+0x104>
    return HAL_ERROR;
 8006216:	2001      	movs	r0, #1
}
 8006218:	b002      	add	sp, #8
 800621a:	bd70      	pop	{r4, r5, r6, pc}
      hadc->MspInitCallback = HAL_ADC_MspInit; /* Legacy weak MspInit  */
 800621c:	4b1c      	ldr	r3, [pc, #112]	; (8006290 <HAL_ADC_Init+0x218>)
 800621e:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 8006222:	e74a      	b.n	80060ba <HAL_ADC_Init+0x42>
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8006224:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8006226:	69e3      	ldr	r3, [r4, #28]
 8006228:	f021 010f 	bic.w	r1, r1, #15
 800622c:	3b01      	subs	r3, #1
 800622e:	430b      	orrs	r3, r1
 8006230:	6313      	str	r3, [r2, #48]	; 0x30
 8006232:	e7ba      	b.n	80061aa <HAL_ADC_Init+0x132>
        MODIFY_REG(hadc->Instance->CFGR2,
 8006234:	e9d4 360f 	ldrd	r3, r6, [r4, #60]	; 0x3c
 8006238:	6911      	ldr	r1, [r2, #16]
 800623a:	6c65      	ldr	r5, [r4, #68]	; 0x44
 800623c:	f421 61ff 	bic.w	r1, r1, #2040	; 0x7f8
 8006240:	f021 0104 	bic.w	r1, r1, #4
 8006244:	4333      	orrs	r3, r6
 8006246:	430b      	orrs	r3, r1
 8006248:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800624a:	432b      	orrs	r3, r5
 800624c:	430b      	orrs	r3, r1
 800624e:	f043 0301 	orr.w	r3, r3, #1
 8006252:	6113      	str	r3, [r2, #16]
 8006254:	e7a2      	b.n	800619c <HAL_ADC_Init+0x124>
 8006256:	bf00      	nop
 8006258:	0800606d 	.word	0x0800606d
 800625c:	08006071 	.word	0x08006071
 8006260:	08006075 	.word	0x08006075
 8006264:	08006069 	.word	0x08006069
 8006268:	080065e1 	.word	0x080065e1
 800626c:	080065e5 	.word	0x080065e5
 8006270:	080065e9 	.word	0x080065e9
 8006274:	080065ed 	.word	0x080065ed
 8006278:	080065f1 	.word	0x080065f1
 800627c:	200000f8 	.word	0x200000f8
 8006280:	053e2d63 	.word	0x053e2d63
 8006284:	50040000 	.word	0x50040000
 8006288:	50040300 	.word	0x50040300
 800628c:	fff0c007 	.word	0xfff0c007
 8006290:	08005555 	.word	0x08005555

08006294 <HAL_ADC_GetState>:
{
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Return ADC handle state */
  return hadc->State;
 8006294:	6d80      	ldr	r0, [r0, #88]	; 0x58
}
 8006296:	4770      	bx	lr

08006298 <ADC_ConversionStop>:
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8006298:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800629a:	689a      	ldr	r2, [r3, #8]
 800629c:	0752      	lsls	r2, r2, #29
{
 800629e:	b570      	push	{r4, r5, r6, lr}
 80062a0:	4604      	mov	r4, r0
 80062a2:	d51a      	bpl.n	80062da <ADC_ConversionStop+0x42>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80062a4:	689a      	ldr	r2, [r3, #8]
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 80062a6:	68da      	ldr	r2, [r3, #12]
 80062a8:	0195      	lsls	r5, r2, #6
 80062aa:	d504      	bpl.n	80062b6 <ADC_ConversionStop+0x1e>
        && (hadc->Init.ContinuousConvMode == ENABLE)
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 80062ac:	8b20      	ldrh	r0, [r4, #24]
 80062ae:	f240 1201 	movw	r2, #257	; 0x101
 80062b2:	4290      	cmp	r0, r2
 80062b4:	d031      	beq.n	800631a <ADC_ConversionStop+0x82>
      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 80062b6:	2902      	cmp	r1, #2
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80062b8:	689a      	ldr	r2, [r3, #8]
 80062ba:	d013      	beq.n	80062e4 <ADC_ConversionStop+0x4c>
 80062bc:	0755      	lsls	r5, r2, #29
 80062be:	d502      	bpl.n	80062c6 <ADC_ConversionStop+0x2e>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80062c0:	689a      	ldr	r2, [r3, #8]
 80062c2:	0790      	lsls	r0, r2, #30
 80062c4:	d55d      	bpl.n	8006382 <ADC_ConversionStop+0xea>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 80062c6:	2901      	cmp	r1, #1
 80062c8:	d041      	beq.n	800634e <ADC_ConversionStop+0xb6>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80062ca:	689a      	ldr	r2, [r3, #8]
 80062cc:	0712      	lsls	r2, r2, #28
 80062ce:	d440      	bmi.n	8006352 <ADC_ConversionStop+0xba>

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 80062d0:	2903      	cmp	r1, #3
 80062d2:	bf14      	ite	ne
 80062d4:	2604      	movne	r6, #4
 80062d6:	260c      	moveq	r6, #12
 80062d8:	e007      	b.n	80062ea <ADC_ConversionStop+0x52>
 80062da:	689a      	ldr	r2, [r3, #8]
 80062dc:	0715      	lsls	r5, r2, #28
 80062de:	d4e2      	bmi.n	80062a6 <ADC_ConversionStop+0xe>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 80062e0:	2000      	movs	r0, #0
}
 80062e2:	bd70      	pop	{r4, r5, r6, pc}
 80062e4:	0710      	lsls	r0, r2, #28
 80062e6:	d440      	bmi.n	800636a <ADC_ConversionStop+0xd2>
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 80062e8:	2608      	movs	r6, #8
    tickstart = HAL_GetTick();
 80062ea:	f7ff fea5 	bl	8006038 <HAL_GetTick>
 80062ee:	4605      	mov	r5, r0
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80062f0:	e004      	b.n	80062fc <ADC_ConversionStop+0x64>
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80062f2:	f7ff fea1 	bl	8006038 <HAL_GetTick>
 80062f6:	1b43      	subs	r3, r0, r5
 80062f8:	2b05      	cmp	r3, #5
 80062fa:	d804      	bhi.n	8006306 <ADC_ConversionStop+0x6e>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80062fc:	6823      	ldr	r3, [r4, #0]
 80062fe:	689b      	ldr	r3, [r3, #8]
 8006300:	4233      	tst	r3, r6
 8006302:	d1f6      	bne.n	80062f2 <ADC_ConversionStop+0x5a>
 8006304:	e7ec      	b.n	80062e0 <ADC_ConversionStop+0x48>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006306:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006308:	f043 0310 	orr.w	r3, r3, #16
 800630c:	65a3      	str	r3, [r4, #88]	; 0x58
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800630e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8006310:	f043 0301 	orr.w	r3, r3, #1
 8006314:	65e3      	str	r3, [r4, #92]	; 0x5c
        return HAL_ERROR;
 8006316:	2001      	movs	r0, #1
}
 8006318:	bd70      	pop	{r4, r5, r6, pc}
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800631a:	681a      	ldr	r2, [r3, #0]
 800631c:	0650      	lsls	r0, r2, #25
 800631e:	d406      	bmi.n	800632e <ADC_ConversionStop+0x96>
 8006320:	4a1c      	ldr	r2, [pc, #112]	; (8006394 <ADC_ConversionStop+0xfc>)
 8006322:	e001      	b.n	8006328 <ADC_ConversionStop+0x90>
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8006324:	3a01      	subs	r2, #1
 8006326:	d0ee      	beq.n	8006306 <ADC_ConversionStop+0x6e>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8006328:	6819      	ldr	r1, [r3, #0]
 800632a:	0649      	lsls	r1, r1, #25
 800632c:	d5fa      	bpl.n	8006324 <ADC_ConversionStop+0x8c>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 800632e:	2240      	movs	r2, #64	; 0x40
 8006330:	601a      	str	r2, [r3, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006332:	689a      	ldr	r2, [r3, #8]
 8006334:	0756      	lsls	r6, r2, #29
 8006336:	d50a      	bpl.n	800634e <ADC_ConversionStop+0xb6>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8006338:	689a      	ldr	r2, [r3, #8]
 800633a:	0796      	lsls	r6, r2, #30
 800633c:	d407      	bmi.n	800634e <ADC_ConversionStop+0xb6>
  MODIFY_REG(ADCx->CR,
 800633e:	689a      	ldr	r2, [r3, #8]
 8006340:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8006344:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8006348:	f042 0210 	orr.w	r2, r2, #16
 800634c:	609a      	str	r2, [r3, #8]
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 800634e:	2604      	movs	r6, #4
 8006350:	e7cb      	b.n	80062ea <ADC_ConversionStop+0x52>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8006352:	689a      	ldr	r2, [r3, #8]
 8006354:	0792      	lsls	r2, r2, #30
 8006356:	d4bb      	bmi.n	80062d0 <ADC_ConversionStop+0x38>
  MODIFY_REG(ADCx->CR,
 8006358:	689a      	ldr	r2, [r3, #8]
 800635a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800635e:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8006362:	f042 0220 	orr.w	r2, r2, #32
 8006366:	609a      	str	r2, [r3, #8]
    switch (conversion_group_reassigned)
 8006368:	e7b2      	b.n	80062d0 <ADC_ConversionStop+0x38>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800636a:	689a      	ldr	r2, [r3, #8]
 800636c:	0791      	lsls	r1, r2, #30
 800636e:	d4bb      	bmi.n	80062e8 <ADC_ConversionStop+0x50>
  MODIFY_REG(ADCx->CR,
 8006370:	689a      	ldr	r2, [r3, #8]
 8006372:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8006376:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 800637a:	f042 0220 	orr.w	r2, r2, #32
 800637e:	609a      	str	r2, [r3, #8]
 8006380:	e7b2      	b.n	80062e8 <ADC_ConversionStop+0x50>
  MODIFY_REG(ADCx->CR,
 8006382:	689a      	ldr	r2, [r3, #8]
 8006384:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8006388:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 800638c:	f042 0210 	orr.w	r2, r2, #16
 8006390:	609a      	str	r2, [r3, #8]
}
 8006392:	e798      	b.n	80062c6 <ADC_ConversionStop+0x2e>
 8006394:	a3400000 	.word	0xa3400000

08006398 <ADC_Enable>:

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006398:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800639a:	689a      	ldr	r2, [r3, #8]
 800639c:	07d2      	lsls	r2, r2, #31
 800639e:	d501      	bpl.n	80063a4 <ADC_Enable+0xc>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80063a0:	2000      	movs	r0, #0
}
 80063a2:	4770      	bx	lr
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80063a4:	6899      	ldr	r1, [r3, #8]
 80063a6:	4a1a      	ldr	r2, [pc, #104]	; (8006410 <ADC_Enable+0x78>)
 80063a8:	4211      	tst	r1, r2
{
 80063aa:	b570      	push	{r4, r5, r6, lr}
 80063ac:	4604      	mov	r4, r0
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80063ae:	d119      	bne.n	80063e4 <ADC_Enable+0x4c>
  MODIFY_REG(ADCx->CR,
 80063b0:	689a      	ldr	r2, [r3, #8]
 80063b2:	4e18      	ldr	r6, [pc, #96]	; (8006414 <ADC_Enable+0x7c>)
 80063b4:	4032      	ands	r2, r6
 80063b6:	f042 0201 	orr.w	r2, r2, #1
 80063ba:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 80063bc:	f7ff fe3c 	bl	8006038 <HAL_GetTick>
 80063c0:	4605      	mov	r5, r0
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80063c2:	6823      	ldr	r3, [r4, #0]
 80063c4:	681a      	ldr	r2, [r3, #0]
 80063c6:	07d2      	lsls	r2, r2, #31
 80063c8:	d41f      	bmi.n	800640a <ADC_Enable+0x72>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80063ca:	689a      	ldr	r2, [r3, #8]
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80063cc:	07d1      	lsls	r1, r2, #31
 80063ce:	d413      	bmi.n	80063f8 <ADC_Enable+0x60>
  MODIFY_REG(ADCx->CR,
 80063d0:	689a      	ldr	r2, [r3, #8]
 80063d2:	4032      	ands	r2, r6
 80063d4:	f042 0201 	orr.w	r2, r2, #1
 80063d8:	609a      	str	r2, [r3, #8]
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80063da:	f7ff fe2d 	bl	8006038 <HAL_GetTick>
 80063de:	1b40      	subs	r0, r0, r5
 80063e0:	2802      	cmp	r0, #2
 80063e2:	d9ee      	bls.n	80063c2 <ADC_Enable+0x2a>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80063e4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80063e6:	f043 0310 	orr.w	r3, r3, #16
 80063ea:	65a3      	str	r3, [r4, #88]	; 0x58
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80063ec:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80063ee:	f043 0301 	orr.w	r3, r3, #1
 80063f2:	65e3      	str	r3, [r4, #92]	; 0x5c
        return HAL_ERROR;
 80063f4:	2001      	movs	r0, #1
}
 80063f6:	bd70      	pop	{r4, r5, r6, pc}
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80063f8:	f7ff fe1e 	bl	8006038 <HAL_GetTick>
 80063fc:	1b40      	subs	r0, r0, r5
 80063fe:	2802      	cmp	r0, #2
 8006400:	d8f0      	bhi.n	80063e4 <ADC_Enable+0x4c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006402:	6823      	ldr	r3, [r4, #0]
 8006404:	681a      	ldr	r2, [r3, #0]
 8006406:	07d2      	lsls	r2, r2, #31
 8006408:	d5df      	bpl.n	80063ca <ADC_Enable+0x32>
  return HAL_OK;
 800640a:	2000      	movs	r0, #0
}
 800640c:	bd70      	pop	{r4, r5, r6, pc}
 800640e:	bf00      	nop
 8006410:	8000003f 	.word	0x8000003f
 8006414:	7fffffc0 	.word	0x7fffffc0

08006418 <HAL_ADC_Start>:
{
 8006418:	b538      	push	{r3, r4, r5, lr}
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800641a:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800641c:	689d      	ldr	r5, [r3, #8]
 800641e:	f015 0504 	ands.w	r5, r5, #4
 8006422:	d133      	bne.n	800648c <HAL_ADC_Start+0x74>
    __HAL_LOCK(hadc);
 8006424:	f890 3054 	ldrb.w	r3, [r0, #84]	; 0x54
 8006428:	2b01      	cmp	r3, #1
 800642a:	4604      	mov	r4, r0
 800642c:	d02e      	beq.n	800648c <HAL_ADC_Start+0x74>
 800642e:	2301      	movs	r3, #1
 8006430:	f880 3054 	strb.w	r3, [r0, #84]	; 0x54
    tmp_hal_status = ADC_Enable(hadc);
 8006434:	f7ff ffb0 	bl	8006398 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8006438:	bb50      	cbnz	r0, 8006490 <HAL_ADC_Start+0x78>
      ADC_STATE_CLR_SET(hadc->State,
 800643a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800643c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006440:	f023 0301 	bic.w	r3, r3, #1
 8006444:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006448:	65a3      	str	r3, [r4, #88]	; 0x58
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800644a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800644c:	04da      	lsls	r2, r3, #19
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800644e:	bf48      	it	mi
 8006450:	6de3      	ldrmi	r3, [r4, #92]	; 0x5c
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8006452:	6822      	ldr	r2, [r4, #0]
        ADC_CLEAR_ERRORCODE(hadc);
 8006454:	bf52      	itee	pl
 8006456:	65e0      	strpl	r0, [r4, #92]	; 0x5c
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8006458:	f023 0306 	bicmi.w	r3, r3, #6
 800645c:	65e3      	strmi	r3, [r4, #92]	; 0x5c
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800645e:	211c      	movs	r1, #28
      __HAL_UNLOCK(hadc);
 8006460:	2300      	movs	r3, #0
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8006462:	6011      	str	r1, [r2, #0]
      __HAL_UNLOCK(hadc);
 8006464:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8006468:	68d3      	ldr	r3, [r2, #12]
 800646a:	019b      	lsls	r3, r3, #6
 800646c:	d505      	bpl.n	800647a <HAL_ADC_Start+0x62>
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800646e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006470:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8006474:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006478:	65a3      	str	r3, [r4, #88]	; 0x58
  MODIFY_REG(ADCx->CR,
 800647a:	6893      	ldr	r3, [r2, #8]
 800647c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006480:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006484:	f043 0304 	orr.w	r3, r3, #4
 8006488:	6093      	str	r3, [r2, #8]
}
 800648a:	bd38      	pop	{r3, r4, r5, pc}
    tmp_hal_status = HAL_BUSY;
 800648c:	2002      	movs	r0, #2
}
 800648e:	bd38      	pop	{r3, r4, r5, pc}
      __HAL_UNLOCK(hadc);
 8006490:	f884 5054 	strb.w	r5, [r4, #84]	; 0x54
}
 8006494:	bd38      	pop	{r3, r4, r5, pc}
 8006496:	bf00      	nop

08006498 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8006498:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 800649a:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800649c:	689a      	ldr	r2, [r3, #8]
 800649e:	0791      	lsls	r1, r2, #30
 80064a0:	d502      	bpl.n	80064a8 <ADC_Disable+0x10>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80064a2:	689b      	ldr	r3, [r3, #8]
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80064a4:	2000      	movs	r0, #0
}
 80064a6:	bd38      	pop	{r3, r4, r5, pc}
 80064a8:	689a      	ldr	r2, [r3, #8]
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80064aa:	07d2      	lsls	r2, r2, #31
 80064ac:	d526      	bpl.n	80064fc <ADC_Disable+0x64>
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80064ae:	689a      	ldr	r2, [r3, #8]
 80064b0:	f002 020d 	and.w	r2, r2, #13
 80064b4:	2a01      	cmp	r2, #1
 80064b6:	4604      	mov	r4, r0
 80064b8:	d009      	beq.n	80064ce <ADC_Disable+0x36>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80064ba:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80064bc:	f043 0310 	orr.w	r3, r3, #16
 80064c0:	65a3      	str	r3, [r4, #88]	; 0x58
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80064c2:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80064c4:	f043 0301 	orr.w	r3, r3, #1
 80064c8:	65e3      	str	r3, [r4, #92]	; 0x5c
        return HAL_ERROR;
 80064ca:	2001      	movs	r0, #1
}
 80064cc:	bd38      	pop	{r3, r4, r5, pc}
  MODIFY_REG(ADCx->CR,
 80064ce:	689a      	ldr	r2, [r3, #8]
 80064d0:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80064d4:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 80064d8:	f042 0202 	orr.w	r2, r2, #2
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80064dc:	2103      	movs	r1, #3
 80064de:	609a      	str	r2, [r3, #8]
 80064e0:	6019      	str	r1, [r3, #0]
    tickstart = HAL_GetTick();
 80064e2:	f7ff fda9 	bl	8006038 <HAL_GetTick>
 80064e6:	4605      	mov	r5, r0
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80064e8:	e004      	b.n	80064f4 <ADC_Disable+0x5c>
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80064ea:	f7ff fda5 	bl	8006038 <HAL_GetTick>
 80064ee:	1b40      	subs	r0, r0, r5
 80064f0:	2802      	cmp	r0, #2
 80064f2:	d8e2      	bhi.n	80064ba <ADC_Disable+0x22>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80064f4:	6823      	ldr	r3, [r4, #0]
 80064f6:	689b      	ldr	r3, [r3, #8]
 80064f8:	07db      	lsls	r3, r3, #31
 80064fa:	d4f6      	bmi.n	80064ea <ADC_Disable+0x52>
  return HAL_OK;
 80064fc:	2000      	movs	r0, #0
}
 80064fe:	bd38      	pop	{r3, r4, r5, pc}

08006500 <HAL_ADC_Stop>:
  __HAL_LOCK(hadc);
 8006500:	f890 3054 	ldrb.w	r3, [r0, #84]	; 0x54
 8006504:	2b01      	cmp	r3, #1
 8006506:	d01d      	beq.n	8006544 <HAL_ADC_Stop+0x44>
 8006508:	2301      	movs	r3, #1
{
 800650a:	b510      	push	{r4, lr}
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 800650c:	2103      	movs	r1, #3
  __HAL_LOCK(hadc);
 800650e:	f880 3054 	strb.w	r3, [r0, #84]	; 0x54
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8006512:	4604      	mov	r4, r0
 8006514:	f7ff fec0 	bl	8006298 <ADC_ConversionStop>
  if (tmp_hal_status == HAL_OK)
 8006518:	b118      	cbz	r0, 8006522 <HAL_ADC_Stop+0x22>
  __HAL_UNLOCK(hadc);
 800651a:	2300      	movs	r3, #0
 800651c:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
}
 8006520:	bd10      	pop	{r4, pc}
    tmp_hal_status = ADC_Disable(hadc);
 8006522:	4620      	mov	r0, r4
 8006524:	f7ff ffb8 	bl	8006498 <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 8006528:	2800      	cmp	r0, #0
 800652a:	d1f6      	bne.n	800651a <HAL_ADC_Stop+0x1a>
      ADC_STATE_CLR_SET(hadc->State,
 800652c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800652e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8006532:	f023 0301 	bic.w	r3, r3, #1
 8006536:	f043 0301 	orr.w	r3, r3, #1
 800653a:	65a3      	str	r3, [r4, #88]	; 0x58
  __HAL_UNLOCK(hadc);
 800653c:	2300      	movs	r3, #0
 800653e:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
}
 8006542:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hadc);
 8006544:	2002      	movs	r0, #2
}
 8006546:	4770      	bx	lr

08006548 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8006548:	b530      	push	{r4, r5, lr}
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 800654a:	f890 3054 	ldrb.w	r3, [r0, #84]	; 0x54
{
 800654e:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0UL;
 8006550:	2200      	movs	r2, #0
  __HAL_LOCK(hadc);
 8006552:	2b01      	cmp	r3, #1
  __IO uint32_t wait_loop_index = 0UL;
 8006554:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 8006556:	d03f      	beq.n	80065d8 <HAL_ADCEx_Calibration_Start+0x90>
 8006558:	2301      	movs	r3, #1
 800655a:	f880 3054 	strb.w	r3, [r0, #84]	; 0x54

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 800655e:	4604      	mov	r4, r0
 8006560:	460d      	mov	r5, r1
 8006562:	f7ff ff99 	bl	8006498 <ADC_Disable>

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006566:	6da3      	ldr	r3, [r4, #88]	; 0x58
  if (tmp_hal_status == HAL_OK)
 8006568:	b9e0      	cbnz	r0, 80065a4 <HAL_ADCEx_Calibration_Start+0x5c>
    ADC_STATE_CLR_SET(hadc->State,
 800656a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800656e:	f023 0302 	bic.w	r3, r3, #2
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8006572:	6822      	ldr	r2, [r4, #0]
    ADC_STATE_CLR_SET(hadc->State,
 8006574:	f043 0302 	orr.w	r3, r3, #2
 8006578:	65a3      	str	r3, [r4, #88]	; 0x58
  MODIFY_REG(ADCx->CR,
 800657a:	6893      	ldr	r3, [r2, #8]
 800657c:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8006580:	f005 4580 	and.w	r5, r5, #1073741824	; 0x40000000
 8006584:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006588:	432b      	orrs	r3, r5
 800658a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800658e:	6093      	str	r3, [r2, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8006590:	6893      	ldr	r3, [r2, #8]
 8006592:	2b00      	cmp	r3, #0
 8006594:	db0e      	blt.n	80065b4 <HAL_ADCEx_Calibration_Start+0x6c>
        return HAL_ERROR;
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006596:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006598:	f023 0303 	bic.w	r3, r3, #3
 800659c:	f043 0301 	orr.w	r3, r3, #1
 80065a0:	65a3      	str	r3, [r4, #88]	; 0x58
 80065a2:	e002      	b.n	80065aa <HAL_ADCEx_Calibration_Start+0x62>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80065a4:	f043 0310 	orr.w	r3, r3, #16
 80065a8:	65a3      	str	r3, [r4, #88]	; 0x58
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80065aa:	2300      	movs	r3, #0
 80065ac:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
}
 80065b0:	b003      	add	sp, #12
 80065b2:	bd30      	pop	{r4, r5, pc}
      wait_loop_index++;
 80065b4:	9b01      	ldr	r3, [sp, #4]
 80065b6:	3301      	adds	r3, #1
 80065b8:	9301      	str	r3, [sp, #4]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80065ba:	9b01      	ldr	r3, [sp, #4]
 80065bc:	f5b3 2f91 	cmp.w	r3, #296960	; 0x48800
 80065c0:	d3e6      	bcc.n	8006590 <HAL_ADCEx_Calibration_Start+0x48>
        ADC_STATE_CLR_SET(hadc->State,
 80065c2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80065c4:	f023 0312 	bic.w	r3, r3, #18
 80065c8:	f043 0310 	orr.w	r3, r3, #16
        __HAL_UNLOCK(hadc);
 80065cc:	2200      	movs	r2, #0
        ADC_STATE_CLR_SET(hadc->State,
 80065ce:	65a3      	str	r3, [r4, #88]	; 0x58
        __HAL_UNLOCK(hadc);
 80065d0:	f884 2054 	strb.w	r2, [r4, #84]	; 0x54
        return HAL_ERROR;
 80065d4:	2001      	movs	r0, #1
 80065d6:	e7eb      	b.n	80065b0 <HAL_ADCEx_Calibration_Start+0x68>
  __HAL_LOCK(hadc);
 80065d8:	2002      	movs	r0, #2
}
 80065da:	b003      	add	sp, #12
 80065dc:	bd30      	pop	{r4, r5, pc}
 80065de:	bf00      	nop

080065e0 <HAL_ADCEx_InjectedConvCpltCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 80065e0:	4770      	bx	lr
 80065e2:	bf00      	nop

080065e4 <HAL_ADCEx_InjectedQueueOverflowCallback>:
 80065e4:	4770      	bx	lr
 80065e6:	bf00      	nop

080065e8 <HAL_ADCEx_LevelOutOfWindow2Callback>:
 80065e8:	4770      	bx	lr
 80065ea:	bf00      	nop

080065ec <HAL_ADCEx_LevelOutOfWindow3Callback>:
 80065ec:	4770      	bx	lr
 80065ee:	bf00      	nop

080065f0 <HAL_ADCEx_EndOfSamplingCallback>:
 80065f0:	4770      	bx	lr
 80065f2:	bf00      	nop

080065f4 <HAL_ADCEx_InjectedConfigChannel>:
  * @param sConfigInjected Structure of ADC injected group and ADC channel for
  *         injected group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef *hadc, ADC_InjectionConfTypeDef *sConfigInjected)
{
 80065f4:	b5f0      	push	{r4, r5, r6, r7, lr}
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfigInjected->InjectedChannel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80065f6:	f890 3054 	ldrb.w	r3, [r0, #84]	; 0x54
  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80065fa:	6904      	ldr	r4, [r0, #16]
{
 80065fc:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0;
 80065fe:	2200      	movs	r2, #0
  __HAL_LOCK(hadc);
 8006600:	2b01      	cmp	r3, #1
  __IO uint32_t wait_loop_index = 0;
 8006602:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 8006604:	f000 8152 	beq.w	80068ac <HAL_ADCEx_InjectedConfigChannel+0x2b8>
 8006608:	2301      	movs	r3, #1
 800660a:	f880 3054 	strb.w	r3, [r0, #84]	; 0x54
  /*      injected channel rank. It is entered into queue only when all       */
  /*      injected ranks have been set.                                       */
  /*   Note: Scan mode is not present by hardware on this device, but used    */
  /*   by software for alignment over all STM32 devices.                      */

  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 800660e:	b1e4      	cbz	r4, 800664a <HAL_ADCEx_InjectedConfigChannel+0x56>
      (sConfigInjected->InjectedNbrOfConversion == 1U))
 8006610:	698b      	ldr	r3, [r1, #24]
  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 8006612:	2b01      	cmp	r3, #1
 8006614:	d019      	beq.n	800664a <HAL_ADCEx_InjectedConfigChannel+0x56>
    /* 1. Start new context and set parameters related to all injected        */
    /*    channels: injected sequence length and trigger.                     */

    /* if hadc->InjectionConfig.ChannelCount is equal to 0, this is the first */
    /*   call of the context under setting                                    */
    if (hadc->InjectionConfig.ChannelCount == 0U)
 8006616:	6e44      	ldr	r4, [r0, #100]	; 0x64
 8006618:	2c00      	cmp	r4, #0
 800661a:	f040 80db 	bne.w	80067d4 <HAL_ADCEx_InjectedConfigChannel+0x1e0>
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 800661e:	6a0a      	ldr	r2, [r1, #32]
 8006620:	2a00      	cmp	r2, #0
 8006622:	f000 8204 	beq.w	8006a2e <HAL_ADCEx_InjectedConfigChannel+0x43a>
      {
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U)
 8006626:	1e5c      	subs	r4, r3, #1
                                           | (sConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 8006628:	f002 023c 	and.w	r2, r2, #60	; 0x3c
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U)
 800662c:	6a4b      	ldr	r3, [r1, #36]	; 0x24
                                           | (sConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 800662e:	4322      	orrs	r2, r4
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U)
 8006630:	4313      	orrs	r3, r2
    /*    related to each channel: channel rank sequence                    */
    /* Clear the old JSQx bits for the selected rank */
    tmp_JSQR_ContextQueueBeingBuilt &= ~ADC_JSQR_RK(ADC_SQR3_SQ10, sConfigInjected->InjectedRank);

    /* Set the JSQx bits for the selected rank */
    tmp_JSQR_ContextQueueBeingBuilt |= ADC_JSQR_RK(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank);
 8006632:	e9d1 2500 	ldrd	r2, r5, [r1]

    /* Decrease channel count  */
    hadc->InjectionConfig.ChannelCount--;
 8006636:	6644      	str	r4, [r0, #100]	; 0x64
    tmp_JSQR_ContextQueueBeingBuilt |= ADC_JSQR_RK(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank);
 8006638:	f005 051f 	and.w	r5, r5, #31
 800663c:	f3c2 6484 	ubfx	r4, r2, #26, #5
 8006640:	40ac      	lsls	r4, r5

    /* 3. tmp_JSQR_ContextQueueBeingBuilt is fully built for this HAL_ADCEx_InjectedConfigChannel()
          call, aggregate the setting to those already built during the previous
          HAL_ADCEx_InjectedConfigChannel() calls (for the same context of course)  */
    hadc->InjectionConfig.ContextQueue |= tmp_JSQR_ContextQueueBeingBuilt;
 8006642:	4323      	orrs	r3, r4
 8006644:	6603      	str	r3, [r0, #96]	; 0x60

    /* 4. End of context setting: if this is the last channel set, then write context
        into register JSQR and make it enter into queue                   */
    if (hadc->InjectionConfig.ChannelCount == 0U)
 8006646:	6803      	ldr	r3, [r0, #0]
 8006648:	e005      	b.n	8006656 <HAL_ADCEx_InjectedConfigChannel+0x62>
    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 800664a:	684b      	ldr	r3, [r1, #4]
 800664c:	2b08      	cmp	r3, #8
 800664e:	f000 80ad 	beq.w	80067ac <HAL_ADCEx_InjectedConfigChannel+0x1b8>
 8006652:	680a      	ldr	r2, [r1, #0]
 8006654:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8006656:	689c      	ldr	r4, [r3, #8]
 8006658:	0724      	lsls	r4, r4, #28
 800665a:	d40d      	bmi.n	8006678 <HAL_ADCEx_InjectedConfigChannel+0x84>
  /*  - Injected discontinuous mode: can be enabled only if auto-injected     */
  /*    mode is disabled.                                                     */
  if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
  {
    /* If auto-injected mode is disabled: no constraint                       */
    if (sConfigInjected->AutoInjectedConv == DISABLE)
 800665c:	7f4c      	ldrb	r4, [r1, #29]
 800665e:	2c00      	cmp	r4, #0
 8006660:	f040 809c 	bne.w	800679c <HAL_ADCEx_InjectedConfigChannel+0x1a8>
    {
      MODIFY_REG(hadc->Instance->CFGR,
 8006664:	7f0c      	ldrb	r4, [r1, #28]
 8006666:	7f8e      	ldrb	r6, [r1, #30]
 8006668:	68dd      	ldr	r5, [r3, #12]
 800666a:	0524      	lsls	r4, r4, #20
 800666c:	ea44 5446 	orr.w	r4, r4, r6, lsl #21
 8006670:	f425 1540 	bic.w	r5, r5, #3145728	; 0x300000
 8006674:	432c      	orrs	r4, r5
 8006676:	60dc      	str	r4, [r3, #12]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006678:	689c      	ldr	r4, [r3, #8]
 800667a:	f014 0404 	ands.w	r4, r4, #4
 800667e:	d037      	beq.n	80066f0 <HAL_ADCEx_InjectedConfigChannel+0xfc>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8006680:	689c      	ldr	r4, [r3, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006682:	2400      	movs	r4, #0
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006684:	689d      	ldr	r5, [r3, #8]
  }

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006686:	07ef      	lsls	r7, r5, #31
 8006688:	d414      	bmi.n	80066b4 <HAL_ADCEx_InjectedConfigChannel+0xc0>
  {
    /* Set mode single-ended or differential input of the selected ADC channel */
    LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfigInjected->InjectedChannel, sConfigInjected->InjectedSingleDiff);
 800668a:	68cf      	ldr	r7, [r1, #12]
  MODIFY_REG(ADCx->DIFSEL,
 800668c:	4dab      	ldr	r5, [pc, #684]	; (800693c <HAL_ADCEx_InjectedConfigChannel+0x348>)
 800668e:	f8d3 60b0 	ldr.w	r6, [r3, #176]	; 0xb0

    /* Configuration of differential mode */
    /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
    if (sConfigInjected->InjectedSingleDiff == ADC_DIFFERENTIAL_ENDED)
 8006692:	f8df e2d0 	ldr.w	lr, [pc, #720]	; 8006964 <HAL_ADCEx_InjectedConfigChannel+0x370>
 8006696:	f007 0c18 	and.w	ip, r7, #24
 800669a:	fa25 f50c 	lsr.w	r5, r5, ip
 800669e:	f3c2 0c12 	ubfx	ip, r2, #0, #19
 80066a2:	4015      	ands	r5, r2
 80066a4:	ea26 060c 	bic.w	r6, r6, ip
 80066a8:	4335      	orrs	r5, r6
 80066aa:	4577      	cmp	r7, lr
 80066ac:	f8c3 50b0 	str.w	r5, [r3, #176]	; 0xb0
 80066b0:	f000 80c3 	beq.w	800683a <HAL_ADCEx_InjectedConfigChannel+0x246>
  /* internal measurement paths enable: If internal channel selected,       */
  /* enable dedicated internal buffers and path.                            */
  /* Note: these internal measurement paths can be disabled using           */
  /* HAL_ADC_DeInit().                                                      */

  if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfigInjected->InjectedChannel))
 80066b4:	49a2      	ldr	r1, [pc, #648]	; (8006940 <HAL_ADCEx_InjectedConfigChannel+0x34c>)
 80066b6:	420a      	tst	r2, r1
 80066b8:	d014      	beq.n	80066e4 <HAL_ADCEx_InjectedConfigChannel+0xf0>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80066ba:	4da2      	ldr	r5, [pc, #648]	; (8006944 <HAL_ADCEx_InjectedConfigChannel+0x350>)
  {
    tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));

    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR)
 80066bc:	4ea2      	ldr	r6, [pc, #648]	; (8006948 <HAL_ADCEx_InjectedConfigChannel+0x354>)
 80066be:	68a9      	ldr	r1, [r5, #8]
 80066c0:	42b2      	cmp	r2, r6
 80066c2:	f001 77e0 	and.w	r7, r1, #29360128	; 0x1c00000
 80066c6:	f000 80cd 	beq.w	8006864 <HAL_ADCEx_InjectedConfigChannel+0x270>
        {
          wait_loop_index--;
        }
      }
    }
    else if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT)
 80066ca:	4ea0      	ldr	r6, [pc, #640]	; (800694c <HAL_ADCEx_InjectedConfigChannel+0x358>)
 80066cc:	42b2      	cmp	r2, r6
 80066ce:	f000 8097 	beq.w	8006800 <HAL_ADCEx_InjectedConfigChannel+0x20c>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
                                       LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
      }
    }
    else if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)
 80066d2:	4e9f      	ldr	r6, [pc, #636]	; (8006950 <HAL_ADCEx_InjectedConfigChannel+0x35c>)
 80066d4:	42b2      	cmp	r2, r6
 80066d6:	d105      	bne.n	80066e4 <HAL_ADCEx_InjectedConfigChannel+0xf0>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80066d8:	024a      	lsls	r2, r1, #9
 80066da:	d403      	bmi.n	80066e4 <HAL_ADCEx_InjectedConfigChannel+0xf0>
    {
      if (ADC_VREFINT_INSTANCE(hadc))
 80066dc:	4a9d      	ldr	r2, [pc, #628]	; (8006954 <HAL_ADCEx_InjectedConfigChannel+0x360>)
 80066de:	4293      	cmp	r3, r2
 80066e0:	f000 81f6 	beq.w	8006ad0 <HAL_ADCEx_InjectedConfigChannel+0x4dc>
      /* nothing to do */
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80066e4:	2300      	movs	r3, #0
 80066e6:	f880 3054 	strb.w	r3, [r0, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
}
 80066ea:	4620      	mov	r0, r4
 80066ec:	b003      	add	sp, #12
 80066ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80066f0:	689d      	ldr	r5, [r3, #8]
 80066f2:	f015 0508 	ands.w	r5, r5, #8
 80066f6:	d1c5      	bne.n	8006684 <HAL_ADCEx_InjectedConfigChannel+0x90>
    if ((sConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 80066f8:	6a0c      	ldr	r4, [r1, #32]
 80066fa:	2c00      	cmp	r4, #0
 80066fc:	f040 808f 	bne.w	800681e <HAL_ADCEx_InjectedConfigChannel+0x22a>
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 8006700:	7f4c      	ldrb	r4, [r1, #29]
 8006702:	2c01      	cmp	r4, #1
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8006704:	68dc      	ldr	r4, [r3, #12]
 8006706:	bf0c      	ite	eq
 8006708:	f044 7400 	orreq.w	r4, r4, #33554432	; 0x2000000
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 800670c:	f024 7400 	bicne.w	r4, r4, #33554432	; 0x2000000
 8006710:	60dc      	str	r4, [r3, #12]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006712:	2400      	movs	r4, #0
    if (sConfigInjected->InjecOversamplingMode == ENABLE)
 8006714:	f891 5028 	ldrb.w	r5, [r1, #40]	; 0x28
 8006718:	2d01      	cmp	r5, #1
 800671a:	f000 817d 	beq.w	8006a18 <HAL_ADCEx_InjectedConfigChannel+0x424>
      CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_JOVSE);
 800671e:	691d      	ldr	r5, [r3, #16]
 8006720:	f025 0502 	bic.w	r5, r5, #2
 8006724:	611d      	str	r5, [r3, #16]
    if (sConfigInjected->InjectedSamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8006726:	688d      	ldr	r5, [r1, #8]
 8006728:	f1b5 4f00 	cmp.w	r5, #2147483648	; 0x80000000
 800672c:	f000 8161 	beq.w	80069f2 <HAL_ADCEx_InjectedConfigChannel+0x3fe>
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8006730:	ea4f 5cd2 	mov.w	ip, r2, lsr #23
 8006734:	f00c 0c04 	and.w	ip, ip, #4
 8006738:	f103 0714 	add.w	r7, r3, #20
  MODIFY_REG(*preg,
 800673c:	f3c2 5204 	ubfx	r2, r2, #20, #5
 8006740:	f85c 6007 	ldr.w	r6, [ip, r7]
 8006744:	f04f 0e07 	mov.w	lr, #7
 8006748:	fa0e fe02 	lsl.w	lr, lr, r2
 800674c:	4095      	lsls	r5, r2
 800674e:	ea26 020e 	bic.w	r2, r6, lr
 8006752:	4315      	orrs	r5, r2
 8006754:	f84c 5007 	str.w	r5, [ip, r7]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8006758:	695a      	ldr	r2, [r3, #20]
 800675a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800675e:	615a      	str	r2, [r3, #20]
    if (sConfigInjected->InjectedOffsetNumber != ADC_OFFSET_NONE)
 8006760:	690f      	ldr	r7, [r1, #16]
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfigInjected->InjectedOffset);
 8006762:	68dd      	ldr	r5, [r3, #12]
    if (sConfigInjected->InjectedOffsetNumber != ADC_OFFSET_NONE)
 8006764:	2f04      	cmp	r7, #4
 8006766:	f000 80a9 	beq.w	80068bc <HAL_ADCEx_InjectedConfigChannel+0x2c8>
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800676a:	f103 0c60 	add.w	ip, r3, #96	; 0x60
  MODIFY_REG(*preg,
 800676e:	f8df e1f8 	ldr.w	lr, [pc, #504]	; 8006968 <HAL_ADCEx_InjectedConfigChannel+0x374>
 8006772:	f85c 2027 	ldr.w	r2, [ip, r7, lsl #2]
 8006776:	680e      	ldr	r6, [r1, #0]
 8006778:	ea02 0e0e 	and.w	lr, r2, lr
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfigInjected->InjectedOffset);
 800677c:	f3c5 05c1 	ubfx	r5, r5, #3, #2
 8006780:	694a      	ldr	r2, [r1, #20]
 8006782:	006d      	lsls	r5, r5, #1
 8006784:	f006 46f8 	and.w	r6, r6, #2080374784	; 0x7c000000
 8006788:	40aa      	lsls	r2, r5
 800678a:	ea46 060e 	orr.w	r6, r6, lr
 800678e:	4332      	orrs	r2, r6
 8006790:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8006794:	f84c 2027 	str.w	r2, [ip, r7, lsl #2]
 8006798:	680a      	ldr	r2, [r1, #0]
}
 800679a:	e773      	b.n	8006684 <HAL_ADCEx_InjectedConfigChannel+0x90>
      MODIFY_REG(hadc->Instance->CFGR,
 800679c:	68dc      	ldr	r4, [r3, #12]
 800679e:	7f8d      	ldrb	r5, [r1, #30]
 80067a0:	f424 1440 	bic.w	r4, r4, #3145728	; 0x300000
 80067a4:	ea44 5445 	orr.w	r4, r4, r5, lsl #21
 80067a8:	60dc      	str	r4, [r3, #12]
 80067aa:	e765      	b.n	8006678 <HAL_ADCEx_InjectedConfigChannel+0x84>
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 80067ac:	6a0b      	ldr	r3, [r1, #32]
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 80067ae:	680a      	ldr	r2, [r1, #0]
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d07f      	beq.n	80068b4 <HAL_ADCEx_InjectedConfigChannel+0x2c0>
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 80067b4:	6a4c      	ldr	r4, [r1, #36]	; 0x24
                                           | (sConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 80067b6:	f003 033c 	and.w	r3, r3, #60	; 0x3c
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 80067ba:	0c95      	lsrs	r5, r2, #18
 80067bc:	4323      	orrs	r3, r4
 80067be:	f405 55f8 	and.w	r5, r5, #7936	; 0x1f00
 80067c2:	431d      	orrs	r5, r3
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, tmp_JSQR_ContextQueueBeingBuilt);
 80067c4:	6803      	ldr	r3, [r0, #0]
 80067c6:	4e64      	ldr	r6, [pc, #400]	; (8006958 <HAL_ADCEx_InjectedConfigChannel+0x364>)
 80067c8:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 80067ca:	4034      	ands	r4, r6
 80067cc:	432c      	orrs	r4, r5
 80067ce:	64dc      	str	r4, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = tmp_JSQR_ContextQueueBeingBuilt;
 80067d0:	6605      	str	r5, [r0, #96]	; 0x60
 80067d2:	e740      	b.n	8006656 <HAL_ADCEx_InjectedConfigChannel+0x62>
    tmp_JSQR_ContextQueueBeingBuilt |= ADC_JSQR_RK(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank);
 80067d4:	e9d1 2600 	ldrd	r2, r6, [r1]
    hadc->InjectionConfig.ContextQueue |= tmp_JSQR_ContextQueueBeingBuilt;
 80067d8:	6e03      	ldr	r3, [r0, #96]	; 0x60
    tmp_JSQR_ContextQueueBeingBuilt |= ADC_JSQR_RK(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank);
 80067da:	f3c2 6584 	ubfx	r5, r2, #26, #5
 80067de:	f006 061f 	and.w	r6, r6, #31
 80067e2:	40b5      	lsls	r5, r6
    hadc->InjectionConfig.ContextQueue |= tmp_JSQR_ContextQueueBeingBuilt;
 80067e4:	431d      	orrs	r5, r3
    hadc->InjectionConfig.ChannelCount--;
 80067e6:	3c01      	subs	r4, #1
    hadc->InjectionConfig.ContextQueue |= tmp_JSQR_ContextQueueBeingBuilt;
 80067e8:	e9c0 5418 	strd	r5, r4, [r0, #96]	; 0x60
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, hadc->InjectionConfig.ContextQueue);
 80067ec:	6803      	ldr	r3, [r0, #0]
    if (hadc->InjectionConfig.ChannelCount == 0U)
 80067ee:	2c00      	cmp	r4, #0
 80067f0:	f47f af31 	bne.w	8006656 <HAL_ADCEx_InjectedConfigChannel+0x62>
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, hadc->InjectionConfig.ContextQueue);
 80067f4:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 80067f6:	4e58      	ldr	r6, [pc, #352]	; (8006958 <HAL_ADCEx_InjectedConfigChannel+0x364>)
 80067f8:	4034      	ands	r4, r6
 80067fa:	4325      	orrs	r5, r4
 80067fc:	64dd      	str	r5, [r3, #76]	; 0x4c
 80067fe:	e72a      	b.n	8006656 <HAL_ADCEx_InjectedConfigChannel+0x62>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8006800:	01c9      	lsls	r1, r1, #7
 8006802:	f53f af6f 	bmi.w	80066e4 <HAL_ADCEx_InjectedConfigChannel+0xf0>
      if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8006806:	4a53      	ldr	r2, [pc, #332]	; (8006954 <HAL_ADCEx_InjectedConfigChannel+0x360>)
 8006808:	4293      	cmp	r3, r2
 800680a:	f47f af6b 	bne.w	80066e4 <HAL_ADCEx_InjectedConfigChannel+0xf0>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800680e:	68ab      	ldr	r3, [r5, #8]
 8006810:	f023 73e0 	bic.w	r3, r3, #29360128	; 0x1c00000
 8006814:	431f      	orrs	r7, r3
 8006816:	f047 7780 	orr.w	r7, r7, #16777216	; 0x1000000
 800681a:	60af      	str	r7, [r5, #8]
}
 800681c:	e762      	b.n	80066e4 <HAL_ADCEx_InjectedConfigChannel+0xf0>
        || (sConfigInjected->ExternalTrigInjecConvEdge == ADC_EXTERNALTRIGINJECCONV_EDGE_NONE))
 800681e:	6a4c      	ldr	r4, [r1, #36]	; 0x24
 8006820:	2c00      	cmp	r4, #0
 8006822:	f43f af6d 	beq.w	8006700 <HAL_ADCEx_InjectedConfigChannel+0x10c>
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 8006826:	7f4c      	ldrb	r4, [r1, #29]
 8006828:	2c01      	cmp	r4, #1
 800682a:	f000 814c 	beq.w	8006ac6 <HAL_ADCEx_InjectedConfigChannel+0x4d2>
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 800682e:	68de      	ldr	r6, [r3, #12]
 8006830:	f026 7600 	bic.w	r6, r6, #33554432	; 0x2000000
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006834:	462c      	mov	r4, r5
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8006836:	60de      	str	r6, [r3, #12]
 8006838:	e76c      	b.n	8006714 <HAL_ADCEx_InjectedConfigChannel+0x120>
      LL_ADC_SetChannelSamplingTime(hadc->Instance, (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel) + 1UL) & 0x1FUL)), sConfigInjected->InjectedSamplingTime);
 800683a:	f1bc 0f00 	cmp.w	ip, #0
 800683e:	f040 8095 	bne.w	800696c <HAL_ADCEx_InjectedConfigChannel+0x378>
 8006842:	0e92      	lsrs	r2, r2, #26
 8006844:	1c55      	adds	r5, r2, #1
 8006846:	f005 071f 	and.w	r7, r5, #31
 800684a:	2f09      	cmp	r7, #9
 800684c:	f200 812d 	bhi.w	8006aaa <HAL_ADCEx_InjectedConfigChannel+0x4b6>
 8006850:	06ad      	lsls	r5, r5, #26
 8006852:	2601      	movs	r6, #1
 8006854:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
 8006858:	40be      	lsls	r6, r7
 800685a:	eb07 0247 	add.w	r2, r7, r7, lsl #1
 800685e:	4335      	orrs	r5, r6
 8006860:	0512      	lsls	r2, r2, #20
 8006862:	e104      	b.n	8006a6e <HAL_ADCEx_InjectedConfigChannel+0x47a>
        && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8006864:	020e      	lsls	r6, r1, #8
 8006866:	f53f af3d 	bmi.w	80066e4 <HAL_ADCEx_InjectedConfigChannel+0xf0>
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800686a:	4a3a      	ldr	r2, [pc, #232]	; (8006954 <HAL_ADCEx_InjectedConfigChannel+0x360>)
 800686c:	4293      	cmp	r3, r2
 800686e:	f47f af39 	bne.w	80066e4 <HAL_ADCEx_InjectedConfigChannel+0xf0>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8006872:	68ab      	ldr	r3, [r5, #8]
        wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8006874:	4a39      	ldr	r2, [pc, #228]	; (800695c <HAL_ADCEx_InjectedConfigChannel+0x368>)
 8006876:	f023 73e0 	bic.w	r3, r3, #29360128	; 0x1c00000
 800687a:	431f      	orrs	r7, r3
 800687c:	f447 0700 	orr.w	r7, r7, #8388608	; 0x800000
 8006880:	60af      	str	r7, [r5, #8]
 8006882:	6813      	ldr	r3, [r2, #0]
 8006884:	4a36      	ldr	r2, [pc, #216]	; (8006960 <HAL_ADCEx_InjectedConfigChannel+0x36c>)
 8006886:	099b      	lsrs	r3, r3, #6
 8006888:	fba2 2303 	umull	r2, r3, r2, r3
 800688c:	099b      	lsrs	r3, r3, #6
 800688e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8006892:	009b      	lsls	r3, r3, #2
 8006894:	9301      	str	r3, [sp, #4]
        while (wait_loop_index != 0UL)
 8006896:	9b01      	ldr	r3, [sp, #4]
 8006898:	2b00      	cmp	r3, #0
 800689a:	f43f af23 	beq.w	80066e4 <HAL_ADCEx_InjectedConfigChannel+0xf0>
          wait_loop_index--;
 800689e:	9b01      	ldr	r3, [sp, #4]
 80068a0:	3b01      	subs	r3, #1
 80068a2:	9301      	str	r3, [sp, #4]
        while (wait_loop_index != 0UL)
 80068a4:	9b01      	ldr	r3, [sp, #4]
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d1f9      	bne.n	800689e <HAL_ADCEx_InjectedConfigChannel+0x2aa>
 80068aa:	e71b      	b.n	80066e4 <HAL_ADCEx_InjectedConfigChannel+0xf0>
  __HAL_LOCK(hadc);
 80068ac:	2402      	movs	r4, #2
}
 80068ae:	4620      	mov	r0, r4
 80068b0:	b003      	add	sp, #12
 80068b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1));
 80068b4:	0c95      	lsrs	r5, r2, #18
 80068b6:	f405 55f8 	and.w	r5, r5, #7936	; 0x1f00
 80068ba:	e783      	b.n	80067c4 <HAL_ADCEx_InjectedConfigChannel+0x1d0>
      if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 80068bc:	680a      	ldr	r2, [r1, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80068be:	6e1d      	ldr	r5, [r3, #96]	; 0x60
 80068c0:	6e1d      	ldr	r5, [r3, #96]	; 0x60
 80068c2:	f3c2 0612 	ubfx	r6, r2, #0, #19
 80068c6:	f3c5 6584 	ubfx	r5, r5, #26, #5
 80068ca:	2e00      	cmp	r6, #0
 80068cc:	f000 80d1 	beq.w	8006a72 <HAL_ADCEx_InjectedConfigChannel+0x47e>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80068d0:	fa92 f6a2 	rbit	r6, r2
 80068d4:	fab6 f686 	clz	r6, r6
 80068d8:	42b5      	cmp	r5, r6
 80068da:	f000 812a 	beq.w	8006b32 <HAL_ADCEx_InjectedConfigChannel+0x53e>
 80068de:	6e5d      	ldr	r5, [r3, #100]	; 0x64
 80068e0:	6e5f      	ldr	r7, [r3, #100]	; 0x64
  register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80068e2:	f103 0560 	add.w	r5, r3, #96	; 0x60
      if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 80068e6:	f3c7 6784 	ubfx	r7, r7, #26, #5
 80068ea:	f103 0c64 	add.w	ip, r3, #100	; 0x64
 80068ee:	fa92 f6a2 	rbit	r6, r2
 80068f2:	fab6 f686 	clz	r6, r6
 80068f6:	42be      	cmp	r6, r7
 80068f8:	f000 8106 	beq.w	8006b08 <HAL_ADCEx_InjectedConfigChannel+0x514>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80068fc:	68ae      	ldr	r6, [r5, #8]
 80068fe:	68af      	ldr	r7, [r5, #8]
  register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006900:	f105 0c08 	add.w	ip, r5, #8
      if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8006904:	f3c7 6784 	ubfx	r7, r7, #26, #5
 8006908:	fa92 f6a2 	rbit	r6, r2
 800690c:	fab6 f686 	clz	r6, r6
 8006910:	42be      	cmp	r6, r7
 8006912:	f000 80e5 	beq.w	8006ae0 <HAL_ADCEx_InjectedConfigChannel+0x4ec>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8006916:	68ee      	ldr	r6, [r5, #12]
 8006918:	68ef      	ldr	r7, [r5, #12]
  register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800691a:	350c      	adds	r5, #12
      if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 800691c:	f3c7 6784 	ubfx	r7, r7, #26, #5
 8006920:	fa92 f6a2 	rbit	r6, r2
 8006924:	fab6 f686 	clz	r6, r6
 8006928:	42be      	cmp	r6, r7
 800692a:	f47f aeab 	bne.w	8006684 <HAL_ADCEx_InjectedConfigChannel+0x90>
  MODIFY_REG(*preg,
 800692e:	682a      	ldr	r2, [r5, #0]
 8006930:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8006934:	602a      	str	r2, [r5, #0]
 8006936:	680a      	ldr	r2, [r1, #0]
}
 8006938:	e6a4      	b.n	8006684 <HAL_ADCEx_InjectedConfigChannel+0x90>
 800693a:	bf00      	nop
 800693c:	0007ffff 	.word	0x0007ffff
 8006940:	80080000 	.word	0x80080000
 8006944:	50040300 	.word	0x50040300
 8006948:	c7520000 	.word	0xc7520000
 800694c:	cb840000 	.word	0xcb840000
 8006950:	80000001 	.word	0x80000001
 8006954:	50040000 	.word	0x50040000
 8006958:	82082000 	.word	0x82082000
 800695c:	200000f8 	.word	0x200000f8
 8006960:	053e2d63 	.word	0x053e2d63
 8006964:	407f0000 	.word	0x407f0000
 8006968:	03fff000 	.word	0x03fff000
 800696c:	fa92 f5a2 	rbit	r5, r2
      LL_ADC_SetChannelSamplingTime(hadc->Instance, (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel) + 1UL) & 0x1FUL)), sConfigInjected->InjectedSamplingTime);
 8006970:	fab5 f585 	clz	r5, r5
 8006974:	3501      	adds	r5, #1
 8006976:	f005 051f 	and.w	r5, r5, #31
 800697a:	2d09      	cmp	r5, #9
 800697c:	d95a      	bls.n	8006a34 <HAL_ADCEx_InjectedConfigChannel+0x440>
 800697e:	fa92 f6a2 	rbit	r6, r2
 8006982:	fab6 f686 	clz	r6, r6
 8006986:	fa92 f5a2 	rbit	r5, r2
 800698a:	fab5 f585 	clz	r5, r5
 800698e:	3501      	adds	r5, #1
 8006990:	3601      	adds	r6, #1
 8006992:	2701      	movs	r7, #1
 8006994:	f005 051f 	and.w	r5, r5, #31
 8006998:	06b6      	lsls	r6, r6, #26
 800699a:	fa07 f505 	lsl.w	r5, r7, r5
 800699e:	f006 46f8 	and.w	r6, r6, #2080374784	; 0x7c000000
 80069a2:	432e      	orrs	r6, r5
 80069a4:	fa92 f5a2 	rbit	r5, r2
 80069a8:	fab5 f585 	clz	r5, r5
 80069ac:	443d      	add	r5, r7
 80069ae:	f005 051f 	and.w	r5, r5, #31
 80069b2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80069b6:	f1a5 021e 	sub.w	r2, r5, #30
 80069ba:	0512      	lsls	r2, r2, #20
 80069bc:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 80069c0:	4332      	orrs	r2, r6
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80069c2:	ea4f 5cd2 	mov.w	ip, r2, lsr #23
 80069c6:	f00c 0c04 	and.w	ip, ip, #4
 80069ca:	f103 0714 	add.w	r7, r3, #20
  MODIFY_REG(*preg,
 80069ce:	688e      	ldr	r6, [r1, #8]
 80069d0:	f85c 5007 	ldr.w	r5, [ip, r7]
 80069d4:	f3c2 5204 	ubfx	r2, r2, #20, #5
 80069d8:	f04f 0e07 	mov.w	lr, #7
 80069dc:	fa0e fe02 	lsl.w	lr, lr, r2
 80069e0:	ea25 050e 	bic.w	r5, r5, lr
 80069e4:	fa06 f202 	lsl.w	r2, r6, r2
 80069e8:	432a      	orrs	r2, r5
 80069ea:	f84c 2007 	str.w	r2, [ip, r7]
 80069ee:	680a      	ldr	r2, [r1, #0]
}
 80069f0:	e660      	b.n	80066b4 <HAL_ADCEx_InjectedConfigChannel+0xc0>
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80069f2:	0dd6      	lsrs	r6, r2, #23
 80069f4:	f006 0604 	and.w	r6, r6, #4
 80069f8:	f103 0514 	add.w	r5, r3, #20
  MODIFY_REG(*preg,
 80069fc:	f3c2 5c04 	ubfx	ip, r2, #20, #5
 8006a00:	5977      	ldr	r7, [r6, r5]
 8006a02:	2207      	movs	r2, #7
 8006a04:	fa02 f20c 	lsl.w	r2, r2, ip
 8006a08:	ea27 0202 	bic.w	r2, r7, r2
 8006a0c:	5172      	str	r2, [r6, r5]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8006a0e:	695a      	ldr	r2, [r3, #20]
 8006a10:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8006a14:	615a      	str	r2, [r3, #20]
}
 8006a16:	e6a3      	b.n	8006760 <HAL_ADCEx_InjectedConfigChannel+0x16c>
      MODIFY_REG(hadc->Instance->CFGR2,
 8006a18:	e9d1 570b 	ldrd	r5, r7, [r1, #44]	; 0x2c
 8006a1c:	691e      	ldr	r6, [r3, #16]
 8006a1e:	433d      	orrs	r5, r7
 8006a20:	f426 76ff 	bic.w	r6, r6, #510	; 0x1fe
 8006a24:	4335      	orrs	r5, r6
 8006a26:	f045 0502 	orr.w	r5, r5, #2
 8006a2a:	611d      	str	r5, [r3, #16]
 8006a2c:	e67b      	b.n	8006726 <HAL_ADCEx_InjectedConfigChannel+0x132>
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U));
 8006a2e:	3b01      	subs	r3, #1
 8006a30:	461c      	mov	r4, r3
 8006a32:	e5fe      	b.n	8006632 <HAL_ADCEx_InjectedConfigChannel+0x3e>
 8006a34:	fa92 f5a2 	rbit	r5, r2
      LL_ADC_SetChannelSamplingTime(hadc->Instance, (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel) + 1UL) & 0x1FUL)), sConfigInjected->InjectedSamplingTime);
 8006a38:	fab5 f585 	clz	r5, r5
 8006a3c:	fa92 f6a2 	rbit	r6, r2
 8006a40:	fab6 f686 	clz	r6, r6
 8006a44:	3601      	adds	r6, #1
 8006a46:	3501      	adds	r5, #1
 8006a48:	2701      	movs	r7, #1
 8006a4a:	f006 061f 	and.w	r6, r6, #31
 8006a4e:	06ad      	lsls	r5, r5, #26
 8006a50:	fa07 f606 	lsl.w	r6, r7, r6
 8006a54:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
 8006a58:	4335      	orrs	r5, r6
 8006a5a:	fa92 f2a2 	rbit	r2, r2
 8006a5e:	fab2 f282 	clz	r2, r2
 8006a62:	443a      	add	r2, r7
 8006a64:	f002 021f 	and.w	r2, r2, #31
 8006a68:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8006a6c:	0512      	lsls	r2, r2, #20
 8006a6e:	432a      	orrs	r2, r5
 8006a70:	e7a7      	b.n	80069c2 <HAL_ADCEx_InjectedConfigChannel+0x3ce>
      if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8006a72:	f3c2 6684 	ubfx	r6, r2, #26, #5
 8006a76:	42b5      	cmp	r5, r6
 8006a78:	d05b      	beq.n	8006b32 <HAL_ADCEx_InjectedConfigChannel+0x53e>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8006a7a:	6e5d      	ldr	r5, [r3, #100]	; 0x64
 8006a7c:	6e5f      	ldr	r7, [r3, #100]	; 0x64
  register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006a7e:	f103 0560 	add.w	r5, r3, #96	; 0x60
      if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8006a82:	f3c7 6784 	ubfx	r7, r7, #26, #5
 8006a86:	f103 0c64 	add.w	ip, r3, #100	; 0x64
 8006a8a:	42b7      	cmp	r7, r6
 8006a8c:	d03c      	beq.n	8006b08 <HAL_ADCEx_InjectedConfigChannel+0x514>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8006a8e:	68af      	ldr	r7, [r5, #8]
 8006a90:	68af      	ldr	r7, [r5, #8]
  register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006a92:	f105 0c08 	add.w	ip, r5, #8
      if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8006a96:	f3c7 6784 	ubfx	r7, r7, #26, #5
 8006a9a:	42b7      	cmp	r7, r6
 8006a9c:	d020      	beq.n	8006ae0 <HAL_ADCEx_InjectedConfigChannel+0x4ec>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8006a9e:	68ef      	ldr	r7, [r5, #12]
 8006aa0:	68ef      	ldr	r7, [r5, #12]
  register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006aa2:	350c      	adds	r5, #12
      if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8006aa4:	f3c7 6784 	ubfx	r7, r7, #26, #5
 8006aa8:	e73e      	b.n	8006928 <HAL_ADCEx_InjectedConfigChannel+0x334>
      LL_ADC_SetChannelSamplingTime(hadc->Instance, (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel) + 1UL) & 0x1FUL)), sConfigInjected->InjectedSamplingTime);
 8006aaa:	eb07 0247 	add.w	r2, r7, r7, lsl #1
 8006aae:	06ae      	lsls	r6, r5, #26
 8006ab0:	3a1e      	subs	r2, #30
 8006ab2:	2501      	movs	r5, #1
 8006ab4:	f006 46f8 	and.w	r6, r6, #2080374784	; 0x7c000000
 8006ab8:	fa05 f707 	lsl.w	r7, r5, r7
 8006abc:	0512      	lsls	r2, r2, #20
 8006abe:	433e      	orrs	r6, r7
 8006ac0:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8006ac4:	e77c      	b.n	80069c0 <HAL_ADCEx_InjectedConfigChannel+0x3cc>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006ac6:	6d85      	ldr	r5, [r0, #88]	; 0x58
 8006ac8:	f045 0520 	orr.w	r5, r5, #32
 8006acc:	6585      	str	r5, [r0, #88]	; 0x58
        tmp_hal_status = HAL_ERROR;
 8006ace:	e621      	b.n	8006714 <HAL_ADCEx_InjectedConfigChannel+0x120>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8006ad0:	68ab      	ldr	r3, [r5, #8]
 8006ad2:	f023 73e0 	bic.w	r3, r3, #29360128	; 0x1c00000
 8006ad6:	433b      	orrs	r3, r7
 8006ad8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006adc:	60ab      	str	r3, [r5, #8]
}
 8006ade:	e601      	b.n	80066e4 <HAL_ADCEx_InjectedConfigChannel+0xf0>
  MODIFY_REG(*preg,
 8006ae0:	f8dc 2000 	ldr.w	r2, [ip]
 8006ae4:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8006ae8:	f8cc 2000 	str.w	r2, [ip]
      if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8006aec:	680a      	ldr	r2, [r1, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8006aee:	68ee      	ldr	r6, [r5, #12]
 8006af0:	68ef      	ldr	r7, [r5, #12]
 8006af2:	f3c2 0612 	ubfx	r6, r2, #0, #19
 8006af6:	f3c7 6784 	ubfx	r7, r7, #26, #5
  register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006afa:	350c      	adds	r5, #12
 8006afc:	2e00      	cmp	r6, #0
 8006afe:	f47f af0f 	bne.w	8006920 <HAL_ADCEx_InjectedConfigChannel+0x32c>
 8006b02:	f3c2 6684 	ubfx	r6, r2, #26, #5
 8006b06:	e70f      	b.n	8006928 <HAL_ADCEx_InjectedConfigChannel+0x334>
  MODIFY_REG(*preg,
 8006b08:	f8dc 2000 	ldr.w	r2, [ip]
 8006b0c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8006b10:	f8cc 2000 	str.w	r2, [ip]
      if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8006b14:	680a      	ldr	r2, [r1, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8006b16:	68ae      	ldr	r6, [r5, #8]
 8006b18:	68af      	ldr	r7, [r5, #8]
 8006b1a:	f3c2 0612 	ubfx	r6, r2, #0, #19
 8006b1e:	f3c7 6784 	ubfx	r7, r7, #26, #5
  register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006b22:	f105 0c08 	add.w	ip, r5, #8
 8006b26:	2e00      	cmp	r6, #0
 8006b28:	f47f aeee 	bne.w	8006908 <HAL_ADCEx_InjectedConfigChannel+0x314>
 8006b2c:	f3c2 6684 	ubfx	r6, r2, #26, #5
 8006b30:	e7b3      	b.n	8006a9a <HAL_ADCEx_InjectedConfigChannel+0x4a6>
  MODIFY_REG(*preg,
 8006b32:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8006b34:	461d      	mov	r5, r3
 8006b36:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8006b3a:	f845 2f60 	str.w	r2, [r5, #96]!
      if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8006b3e:	680a      	ldr	r2, [r1, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8006b40:	6e5e      	ldr	r6, [r3, #100]	; 0x64
 8006b42:	6e5f      	ldr	r7, [r3, #100]	; 0x64
 8006b44:	f3c2 0612 	ubfx	r6, r2, #0, #19
 8006b48:	f3c7 6784 	ubfx	r7, r7, #26, #5
  register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006b4c:	f103 0c64 	add.w	ip, r3, #100	; 0x64
 8006b50:	2e00      	cmp	r6, #0
 8006b52:	f47f aecc 	bne.w	80068ee <HAL_ADCEx_InjectedConfigChannel+0x2fa>
 8006b56:	f3c2 6684 	ubfx	r6, r2, #26, #5
 8006b5a:	e796      	b.n	8006a8a <HAL_ADCEx_InjectedConfigChannel+0x496>

08006b5c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006b5c:	4908      	ldr	r1, [pc, #32]	; (8006b80 <HAL_NVIC_SetPriorityGrouping+0x24>)
 8006b5e:	68ca      	ldr	r2, [r1, #12]
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006b60:	b410      	push	{r4}
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006b62:	0200      	lsls	r0, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006b64:	f64f 04ff 	movw	r4, #63743	; 0xf8ff
 8006b68:	4022      	ands	r2, r4
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006b6a:	f400 63e0 	and.w	r3, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006b6e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006b70:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006b74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8006b78:	f85d 4b04 	ldr.w	r4, [sp], #4
  SCB->AIRCR =  reg_value;
 8006b7c:	60cb      	str	r3, [r1, #12]
 8006b7e:	4770      	bx	lr
 8006b80:	e000ed00 	.word	0xe000ed00

08006b84 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006b84:	4b19      	ldr	r3, [pc, #100]	; (8006bec <HAL_NVIC_SetPriority+0x68>)
 8006b86:	68db      	ldr	r3, [r3, #12]
 8006b88:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006b8c:	b430      	push	{r4, r5}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006b8e:	f1c3 0507 	rsb	r5, r3, #7
 8006b92:	2d04      	cmp	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006b94:	f103 0404 	add.w	r4, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006b98:	bf28      	it	cs
 8006b9a:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006b9c:	2c06      	cmp	r4, #6
 8006b9e:	d919      	bls.n	8006bd4 <HAL_NVIC_SetPriority+0x50>
 8006ba0:	3b03      	subs	r3, #3
 8006ba2:	f04f 34ff 	mov.w	r4, #4294967295
 8006ba6:	409c      	lsls	r4, r3
 8006ba8:	ea22 0204 	bic.w	r2, r2, r4

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006bac:	f04f 34ff 	mov.w	r4, #4294967295
 8006bb0:	40ac      	lsls	r4, r5
 8006bb2:	ea21 0104 	bic.w	r1, r1, r4
 8006bb6:	4099      	lsls	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8006bb8:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006bba:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 8006bbe:	db0c      	blt.n	8006bda <HAL_NVIC_SetPriority+0x56>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006bc0:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8006bc4:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8006bc8:	0109      	lsls	r1, r1, #4
 8006bca:	b2c9      	uxtb	r1, r1
 8006bcc:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8006bd0:	bc30      	pop	{r4, r5}
 8006bd2:	4770      	bx	lr
 8006bd4:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006bd6:	4613      	mov	r3, r2
 8006bd8:	e7e8      	b.n	8006bac <HAL_NVIC_SetPriority+0x28>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006bda:	4b05      	ldr	r3, [pc, #20]	; (8006bf0 <HAL_NVIC_SetPriority+0x6c>)
 8006bdc:	f000 000f 	and.w	r0, r0, #15
 8006be0:	0109      	lsls	r1, r1, #4
 8006be2:	4403      	add	r3, r0
 8006be4:	b2c9      	uxtb	r1, r1
 8006be6:	7619      	strb	r1, [r3, #24]
 8006be8:	bc30      	pop	{r4, r5}
 8006bea:	4770      	bx	lr
 8006bec:	e000ed00 	.word	0xe000ed00
 8006bf0:	e000ecfc 	.word	0xe000ecfc

08006bf4 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8006bf4:	2800      	cmp	r0, #0
 8006bf6:	db07      	blt.n	8006c08 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006bf8:	f000 011f 	and.w	r1, r0, #31
 8006bfc:	4a03      	ldr	r2, [pc, #12]	; (8006c0c <HAL_NVIC_EnableIRQ+0x18>)
 8006bfe:	0940      	lsrs	r0, r0, #5
 8006c00:	2301      	movs	r3, #1
 8006c02:	408b      	lsls	r3, r1
 8006c04:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8006c08:	4770      	bx	lr
 8006c0a:	bf00      	nop
 8006c0c:	e000e100 	.word	0xe000e100

08006c10 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006c10:	3801      	subs	r0, #1
 8006c12:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8006c16:	d20e      	bcs.n	8006c36 <HAL_SYSTICK_Config+0x26>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006c18:	4b08      	ldr	r3, [pc, #32]	; (8006c3c <HAL_SYSTICK_Config+0x2c>)
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006c1a:	b410      	push	{r4}
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006c1c:	4c08      	ldr	r4, [pc, #32]	; (8006c40 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006c1e:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006c20:	20f0      	movs	r0, #240	; 0xf0
 8006c22:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006c26:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006c28:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006c2a:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006c2c:	609a      	str	r2, [r3, #8]
   return SysTick_Config(TicksNumb);
}
 8006c2e:	f85d 4b04 	ldr.w	r4, [sp], #4
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006c32:	6019      	str	r1, [r3, #0]
 8006c34:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8006c36:	2001      	movs	r0, #1
 8006c38:	4770      	bx	lr
 8006c3a:	bf00      	nop
 8006c3c:	e000e010 	.word	0xe000e010
 8006c40:	e000ed00 	.word	0xe000ed00

08006c44 <HAL_DMA_Init>:
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8006c44:	2800      	cmp	r0, #0
 8006c46:	d076      	beq.n	8006d36 <HAL_DMA_Init+0xf2>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8006c48:	6802      	ldr	r2, [r0, #0]
 8006c4a:	493c      	ldr	r1, [pc, #240]	; (8006d3c <HAL_DMA_Init+0xf8>)
 8006c4c:	428a      	cmp	r2, r1
{
 8006c4e:	b4f0      	push	{r4, r5, r6, r7}
 8006c50:	4603      	mov	r3, r0
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8006c52:	d95e      	bls.n	8006d12 <HAL_DMA_Init+0xce>
    hdma->DmaBaseAddress = DMA1;
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8006c54:	4c3a      	ldr	r4, [pc, #232]	; (8006d40 <HAL_DMA_Init+0xfc>)
 8006c56:	493b      	ldr	r1, [pc, #236]	; (8006d44 <HAL_DMA_Init+0x100>)
    hdma->DmaBaseAddress = DMA2;
 8006c58:	4d3b      	ldr	r5, [pc, #236]	; (8006d48 <HAL_DMA_Init+0x104>)
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8006c5a:	4414      	add	r4, r2
 8006c5c:	fba1 1404 	umull	r1, r4, r1, r4
 8006c60:	0924      	lsrs	r4, r4, #4
 8006c62:	00a4      	lsls	r4, r4, #2
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8006c64:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006c68:	691e      	ldr	r6, [r3, #16]
 8006c6a:	641d      	str	r5, [r3, #64]	; 0x40
  tmp |=  hdma->Init.Direction        |
 8006c6c:	4301      	orrs	r1, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006c6e:	695d      	ldr	r5, [r3, #20]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006c70:	699f      	ldr	r7, [r3, #24]
 8006c72:	645c      	str	r4, [r3, #68]	; 0x44
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006c74:	4331      	orrs	r1, r6
  hdma->State = HAL_DMA_STATE_BUSY;
 8006c76:	2602      	movs	r6, #2
 8006c78:	f883 6025 	strb.w	r6, [r3, #37]	; 0x25
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006c7c:	4329      	orrs	r1, r5
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006c7e:	69de      	ldr	r6, [r3, #28]
  tmp = hdma->Instance->CCR;
 8006c80:	6815      	ldr	r5, [r2, #0]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006c82:	4339      	orrs	r1, r7
 8006c84:	4331      	orrs	r1, r6
          hdma->Init.Mode                | hdma->Init.Priority;
 8006c86:	6a1e      	ldr	r6, [r3, #32]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8006c88:	f425 45ff 	bic.w	r5, r5, #32640	; 0x7f80
          hdma->Init.Mode                | hdma->Init.Priority;
 8006c8c:	4331      	orrs	r1, r6
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8006c8e:	4e2b      	ldr	r6, [pc, #172]	; (8006d3c <HAL_DMA_Init+0xf8>)
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8006c90:	f025 0570 	bic.w	r5, r5, #112	; 0x70
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8006c94:	42b2      	cmp	r2, r6
  tmp |=  hdma->Init.Direction        |
 8006c96:	ea41 0105 	orr.w	r1, r1, r5
  hdma->Instance->CCR = tmp;
 8006c9a:	6011      	str	r1, [r2, #0]
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8006c9c:	bf88      	it	hi
 8006c9e:	492b      	ldrhi	r1, [pc, #172]	; (8006d4c <HAL_DMA_Init+0x108>)
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8006ca0:	4e2b      	ldr	r6, [pc, #172]	; (8006d50 <HAL_DMA_Init+0x10c>)
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8006ca2:	bf94      	ite	ls
 8006ca4:	f104 4180 	addls.w	r1, r4, #1073741824	; 0x40000000
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8006ca8:	1909      	addhi	r1, r1, r4
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8006caa:	b2d2      	uxtb	r2, r2
 8006cac:	4c25      	ldr	r4, [pc, #148]	; (8006d44 <HAL_DMA_Init+0x100>)
 8006cae:	f1a2 0208 	sub.w	r2, r2, #8
 8006cb2:	fba4 4202 	umull	r4, r2, r4, r2
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8006cb6:	f3c2 1204 	ubfx	r2, r2, #4, #5
 8006cba:	f04f 0401 	mov.w	r4, #1
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8006cbe:	bf98      	it	ls
 8006cc0:	f501 3102 	addls.w	r1, r1, #133120	; 0x20800
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8006cc4:	fa04 f202 	lsl.w	r2, r4, r2
  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8006cc8:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8006ccc:	e9c3 6213 	strd	r6, r2, [r3, #76]	; 0x4c
 8006cd0:	6499      	str	r1, [r3, #72]	; 0x48
  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8006cd2:	d027      	beq.n	8006d24 <HAL_DMA_Init+0xe0>
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8006cd4:	685d      	ldr	r5, [r3, #4]
 8006cd6:	b2e8      	uxtb	r0, r5
  if(((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8006cd8:	3d01      	subs	r5, #1
 8006cda:	2d03      	cmp	r5, #3
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8006cdc:	6008      	str	r0, [r1, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006cde:	6072      	str	r2, [r6, #4]
  if(((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8006ce0:	d824      	bhi.n	8006d2c <HAL_DMA_Init+0xe8>
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8006ce2:	4a1c      	ldr	r2, [pc, #112]	; (8006d54 <HAL_DMA_Init+0x110>)

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8006ce4:	491c      	ldr	r1, [pc, #112]	; (8006d58 <HAL_DMA_Init+0x114>)
 8006ce6:	6599      	str	r1, [r3, #88]	; 0x58
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8006ce8:	4402      	add	r2, r0

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8006cea:	3801      	subs	r0, #1
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8006cec:	0092      	lsls	r2, r2, #2
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8006cee:	f000 0003 	and.w	r0, r0, #3
 8006cf2:	fa04 f000 	lsl.w	r0, r4, r0
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8006cf6:	2400      	movs	r4, #0
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8006cf8:	655a      	str	r2, [r3, #84]	; 0x54
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8006cfa:	65d8      	str	r0, [r3, #92]	; 0x5c
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8006cfc:	6014      	str	r4, [r2, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006cfe:	6048      	str	r0, [r1, #4]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006d00:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 8006d02:	2201      	movs	r2, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006d04:	63d8      	str	r0, [r3, #60]	; 0x3c
  hdma->Lock = HAL_UNLOCKED;
 8006d06:	f883 0024 	strb.w	r0, [r3, #36]	; 0x24
  hdma->State = HAL_DMA_STATE_READY;
 8006d0a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
}
 8006d0e:	bcf0      	pop	{r4, r5, r6, r7}
 8006d10:	4770      	bx	lr
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8006d12:	4c12      	ldr	r4, [pc, #72]	; (8006d5c <HAL_DMA_Init+0x118>)
 8006d14:	490b      	ldr	r1, [pc, #44]	; (8006d44 <HAL_DMA_Init+0x100>)
    hdma->DmaBaseAddress = DMA1;
 8006d16:	4d12      	ldr	r5, [pc, #72]	; (8006d60 <HAL_DMA_Init+0x11c>)
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8006d18:	4414      	add	r4, r2
 8006d1a:	fba1 1404 	umull	r1, r4, r1, r4
 8006d1e:	0924      	lsrs	r4, r4, #4
 8006d20:	00a4      	lsls	r4, r4, #2
    hdma->DmaBaseAddress = DMA1;
 8006d22:	e79f      	b.n	8006c64 <HAL_DMA_Init+0x20>
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8006d24:	2000      	movs	r0, #0
 8006d26:	6058      	str	r0, [r3, #4]
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8006d28:	6008      	str	r0, [r1, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006d2a:	6072      	str	r2, [r6, #4]
    hdma->DMAmuxRequestGen = 0U;
 8006d2c:	2200      	movs	r2, #0
    hdma->DMAmuxRequestGenStatus = 0U;
 8006d2e:	e9c3 2215 	strd	r2, r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8006d32:	65da      	str	r2, [r3, #92]	; 0x5c
 8006d34:	e7e4      	b.n	8006d00 <HAL_DMA_Init+0xbc>
    return HAL_ERROR;
 8006d36:	2001      	movs	r0, #1
}
 8006d38:	4770      	bx	lr
 8006d3a:	bf00      	nop
 8006d3c:	40020407 	.word	0x40020407
 8006d40:	bffdfbf8 	.word	0xbffdfbf8
 8006d44:	cccccccd 	.word	0xcccccccd
 8006d48:	40020400 	.word	0x40020400
 8006d4c:	4002081c 	.word	0x4002081c
 8006d50:	40020880 	.word	0x40020880
 8006d54:	1000823f 	.word	0x1000823f
 8006d58:	40020940 	.word	0x40020940
 8006d5c:	bffdfff8 	.word	0xbffdfff8
 8006d60:	40020000 	.word	0x40020000

08006d64 <HAL_DMA_Start_IT>:
{
 8006d64:	b4f0      	push	{r4, r5, r6, r7}
  __HAL_LOCK(hdma);
 8006d66:	f890 4024 	ldrb.w	r4, [r0, #36]	; 0x24
 8006d6a:	2c01      	cmp	r4, #1
 8006d6c:	d053      	beq.n	8006e16 <HAL_DMA_Start_IT+0xb2>
  if(HAL_DMA_STATE_READY == hdma->State)
 8006d6e:	f890 4025 	ldrb.w	r4, [r0, #37]	; 0x25
  __HAL_LOCK(hdma);
 8006d72:	2501      	movs	r5, #1
  if(HAL_DMA_STATE_READY == hdma->State)
 8006d74:	42ac      	cmp	r4, r5
  __HAL_LOCK(hdma);
 8006d76:	f880 5024 	strb.w	r5, [r0, #36]	; 0x24
  if(HAL_DMA_STATE_READY == hdma->State)
 8006d7a:	d005      	beq.n	8006d88 <HAL_DMA_Start_IT+0x24>
    __HAL_UNLOCK(hdma);
 8006d7c:	2300      	movs	r3, #0
 8006d7e:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
}
 8006d82:	bcf0      	pop	{r4, r5, r6, r7}
    status = HAL_BUSY;
 8006d84:	2002      	movs	r0, #2
}
 8006d86:	4770      	bx	lr
    __HAL_DMA_DISABLE(hdma);
 8006d88:	6804      	ldr	r4, [r0, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006d8a:	6cc7      	ldr	r7, [r0, #76]	; 0x4c
    hdma->State = HAL_DMA_STATE_BUSY;
 8006d8c:	2602      	movs	r6, #2
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006d8e:	2500      	movs	r5, #0
    hdma->State = HAL_DMA_STATE_BUSY;
 8006d90:	f880 6025 	strb.w	r6, [r0, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006d94:	63c5      	str	r5, [r0, #60]	; 0x3c
    __HAL_DMA_DISABLE(hdma);
 8006d96:	6826      	ldr	r6, [r4, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006d98:	e9d0 c514 	ldrd	ip, r5, [r0, #80]	; 0x50
    __HAL_DMA_DISABLE(hdma);
 8006d9c:	f026 0601 	bic.w	r6, r6, #1
 8006da0:	6026      	str	r6, [r4, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006da2:	f8c7 c004 	str.w	ip, [r7, #4]
  if(hdma->DMAmuxRequestGen != 0U)
 8006da6:	b115      	cbz	r5, 8006dae <HAL_DMA_Start_IT+0x4a>
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006da8:	e9d0 6716 	ldrd	r6, r7, [r0, #88]	; 0x58
 8006dac:	6077      	str	r7, [r6, #4]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8006dae:	6c46      	ldr	r6, [r0, #68]	; 0x44
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006db0:	6887      	ldr	r7, [r0, #8]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8006db2:	f006 0c1c 	and.w	ip, r6, #28
 8006db6:	2601      	movs	r6, #1
 8006db8:	fa06 fc0c 	lsl.w	ip, r6, ip
 8006dbc:	6c06      	ldr	r6, [r0, #64]	; 0x40
 8006dbe:	f8c6 c004 	str.w	ip, [r6, #4]
  hdma->Instance->CNDTR = DataLength;
 8006dc2:	6063      	str	r3, [r4, #4]
    if(NULL != hdma->XferHalfCpltCallback )
 8006dc4:	6b03      	ldr	r3, [r0, #48]	; 0x30
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006dc6:	2f10      	cmp	r7, #16
    hdma->Instance->CPAR = DstAddress;
 8006dc8:	bf0b      	itete	eq
 8006dca:	60a2      	streq	r2, [r4, #8]
    hdma->Instance->CPAR = SrcAddress;
 8006dcc:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 8006dce:	60e1      	streq	r1, [r4, #12]
    hdma->Instance->CMAR = DstAddress;
 8006dd0:	60e2      	strne	r2, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback )
 8006dd2:	b1bb      	cbz	r3, 8006e04 <HAL_DMA_Start_IT+0xa0>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006dd4:	6823      	ldr	r3, [r4, #0]
 8006dd6:	f043 030e 	orr.w	r3, r3, #14
 8006dda:	6023      	str	r3, [r4, #0]
    if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8006ddc:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8006dde:	681a      	ldr	r2, [r3, #0]
 8006de0:	03d2      	lsls	r2, r2, #15
 8006de2:	d503      	bpl.n	8006dec <HAL_DMA_Start_IT+0x88>
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8006de4:	681a      	ldr	r2, [r3, #0]
 8006de6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006dea:	601a      	str	r2, [r3, #0]
    if(hdma->DMAmuxRequestGen != 0U)
 8006dec:	b11d      	cbz	r5, 8006df6 <HAL_DMA_Start_IT+0x92>
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8006dee:	682b      	ldr	r3, [r5, #0]
 8006df0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006df4:	602b      	str	r3, [r5, #0]
    __HAL_DMA_ENABLE(hdma);
 8006df6:	6823      	ldr	r3, [r4, #0]
 8006df8:	f043 0301 	orr.w	r3, r3, #1
 8006dfc:	6023      	str	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006dfe:	2000      	movs	r0, #0
}
 8006e00:	bcf0      	pop	{r4, r5, r6, r7}
 8006e02:	4770      	bx	lr
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006e04:	6823      	ldr	r3, [r4, #0]
 8006e06:	f023 0304 	bic.w	r3, r3, #4
 8006e0a:	6023      	str	r3, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8006e0c:	6823      	ldr	r3, [r4, #0]
 8006e0e:	f043 030a 	orr.w	r3, r3, #10
 8006e12:	6023      	str	r3, [r4, #0]
 8006e14:	e7e2      	b.n	8006ddc <HAL_DMA_Start_IT+0x78>
  __HAL_LOCK(hdma);
 8006e16:	2002      	movs	r0, #2
}
 8006e18:	bcf0      	pop	{r4, r5, r6, r7}
 8006e1a:	4770      	bx	lr

08006e1c <HAL_DMA_Abort_IT>:
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8006e1c:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8006e20:	2b02      	cmp	r3, #2
 8006e22:	d003      	beq.n	8006e2c <HAL_DMA_Abort_IT+0x10>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006e24:	2304      	movs	r3, #4
 8006e26:	63c3      	str	r3, [r0, #60]	; 0x3c
    status = HAL_ERROR;
 8006e28:	2001      	movs	r0, #1
}
 8006e2a:	4770      	bx	lr
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006e2c:	6803      	ldr	r3, [r0, #0]
 8006e2e:	6819      	ldr	r1, [r3, #0]
 8006e30:	f021 010e 	bic.w	r1, r1, #14
{
 8006e34:	b570      	push	{r4, r5, r6, lr}
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8006e36:	e9d0 4210 	ldrd	r4, r2, [r0, #64]	; 0x40
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006e3a:	6c85      	ldr	r5, [r0, #72]	; 0x48
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006e3c:	6019      	str	r1, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 8006e3e:	6819      	ldr	r1, [r3, #0]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006e40:	6cc6      	ldr	r6, [r0, #76]	; 0x4c
    __HAL_DMA_DISABLE(hdma);
 8006e42:	f021 0101 	bic.w	r1, r1, #1
 8006e46:	6019      	str	r1, [r3, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006e48:	682b      	ldr	r3, [r5, #0]
    if(hdma->DMAmuxRequestGen != 0U)
 8006e4a:	6d41      	ldr	r1, [r0, #84]	; 0x54
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006e4c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006e50:	602b      	str	r3, [r5, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8006e52:	f002 021c 	and.w	r2, r2, #28
 8006e56:	2301      	movs	r3, #1
 8006e58:	4093      	lsls	r3, r2
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006e5a:	6d02      	ldr	r2, [r0, #80]	; 0x50
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8006e5c:	6063      	str	r3, [r4, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006e5e:	6072      	str	r2, [r6, #4]
    if(hdma->DMAmuxRequestGen != 0U)
 8006e60:	b131      	cbz	r1, 8006e70 <HAL_DMA_Abort_IT+0x54>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006e62:	680b      	ldr	r3, [r1, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006e64:	e9d0 2416 	ldrd	r2, r4, [r0, #88]	; 0x58
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006e68:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006e6c:	600b      	str	r3, [r1, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006e6e:	6054      	str	r4, [r2, #4]
    if(hdma->XferAbortCallback != NULL)
 8006e70:	6b83      	ldr	r3, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;
 8006e72:	2201      	movs	r2, #1
    __HAL_UNLOCK(hdma);
 8006e74:	2400      	movs	r4, #0
    hdma->State = HAL_DMA_STATE_READY;
 8006e76:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8006e7a:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
    if(hdma->XferAbortCallback != NULL)
 8006e7e:	b113      	cbz	r3, 8006e86 <HAL_DMA_Abort_IT+0x6a>
      hdma->XferAbortCallback(hdma);
 8006e80:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8006e82:	4620      	mov	r0, r4
}
 8006e84:	bd70      	pop	{r4, r5, r6, pc}
  HAL_StatusTypeDef status = HAL_OK;
 8006e86:	4618      	mov	r0, r3
}
 8006e88:	bd70      	pop	{r4, r5, r6, pc}
 8006e8a:	bf00      	nop

08006e8c <HAL_DMA_IRQHandler>:
{
 8006e8c:	b470      	push	{r4, r5, r6}
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8006e8e:	e9d0 6310 	ldrd	r6, r3, [r0, #64]	; 0x40
 8006e92:	2204      	movs	r2, #4
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8006e94:	6831      	ldr	r1, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8006e96:	6805      	ldr	r5, [r0, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8006e98:	f003 031c 	and.w	r3, r3, #28
 8006e9c:	409a      	lsls	r2, r3
 8006e9e:	420a      	tst	r2, r1
  uint32_t source_it = hdma->Instance->CCR;
 8006ea0:	682c      	ldr	r4, [r5, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8006ea2:	d00e      	beq.n	8006ec2 <HAL_DMA_IRQHandler+0x36>
 8006ea4:	f014 0f04 	tst.w	r4, #4
 8006ea8:	d00b      	beq.n	8006ec2 <HAL_DMA_IRQHandler+0x36>
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006eaa:	682b      	ldr	r3, [r5, #0]
 8006eac:	069b      	lsls	r3, r3, #26
 8006eae:	d403      	bmi.n	8006eb8 <HAL_DMA_IRQHandler+0x2c>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006eb0:	682b      	ldr	r3, [r5, #0]
 8006eb2:	f023 0304 	bic.w	r3, r3, #4
 8006eb6:	602b      	str	r3, [r5, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 8006eb8:	6b03      	ldr	r3, [r0, #48]	; 0x30
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8006eba:	6072      	str	r2, [r6, #4]
      if(hdma->XferHalfCpltCallback != NULL)
 8006ebc:	b1cb      	cbz	r3, 8006ef2 <HAL_DMA_IRQHandler+0x66>
}
 8006ebe:	bc70      	pop	{r4, r5, r6}
      hdma->XferCpltCallback(hdma);
 8006ec0:	4718      	bx	r3
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8006ec2:	2202      	movs	r2, #2
 8006ec4:	409a      	lsls	r2, r3
 8006ec6:	420a      	tst	r2, r1
 8006ec8:	d015      	beq.n	8006ef6 <HAL_DMA_IRQHandler+0x6a>
 8006eca:	f014 0f02 	tst.w	r4, #2
 8006ece:	d012      	beq.n	8006ef6 <HAL_DMA_IRQHandler+0x6a>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006ed0:	682b      	ldr	r3, [r5, #0]
 8006ed2:	0699      	lsls	r1, r3, #26
 8006ed4:	d406      	bmi.n	8006ee4 <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006ed6:	682b      	ldr	r3, [r5, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8006ed8:	2101      	movs	r1, #1
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006eda:	f023 030a 	bic.w	r3, r3, #10
 8006ede:	602b      	str	r3, [r5, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8006ee0:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
    if(hdma->XferCpltCallback != NULL)
 8006ee4:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8006ee6:	6072      	str	r2, [r6, #4]
    __HAL_UNLOCK(hdma);
 8006ee8:	2200      	movs	r2, #0
 8006eea:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
    if(hdma->XferCpltCallback != NULL)
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d1e5      	bne.n	8006ebe <HAL_DMA_IRQHandler+0x32>
}
 8006ef2:	bc70      	pop	{r4, r5, r6}
 8006ef4:	4770      	bx	lr
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8006ef6:	2208      	movs	r2, #8
 8006ef8:	409a      	lsls	r2, r3
 8006efa:	420a      	tst	r2, r1
 8006efc:	d0f9      	beq.n	8006ef2 <HAL_DMA_IRQHandler+0x66>
 8006efe:	0722      	lsls	r2, r4, #28
 8006f00:	d5f7      	bpl.n	8006ef2 <HAL_DMA_IRQHandler+0x66>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006f02:	682a      	ldr	r2, [r5, #0]
    if (hdma->XferErrorCallback != NULL)
 8006f04:	6b41      	ldr	r1, [r0, #52]	; 0x34
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006f06:	f022 020e 	bic.w	r2, r2, #14
 8006f0a:	602a      	str	r2, [r5, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8006f0c:	2201      	movs	r2, #1
 8006f0e:	fa02 f303 	lsl.w	r3, r2, r3
    __HAL_UNLOCK(hdma);
 8006f12:	2400      	movs	r4, #0
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8006f14:	6073      	str	r3, [r6, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006f16:	63c2      	str	r2, [r0, #60]	; 0x3c
    __HAL_UNLOCK(hdma);
 8006f18:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
    hdma->State = HAL_DMA_STATE_READY;
 8006f1c:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
    if (hdma->XferErrorCallback != NULL)
 8006f20:	2900      	cmp	r1, #0
 8006f22:	d0e6      	beq.n	8006ef2 <HAL_DMA_IRQHandler+0x66>
}
 8006f24:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 8006f26:	4708      	bx	r1

08006f28 <HAL_EXTI_RegisterCallback>:
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
  HAL_StatusTypeDef status = HAL_OK;

  switch (CallbackID)
 8006f28:	b911      	cbnz	r1, 8006f30 <HAL_EXTI_RegisterCallback+0x8>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8006f2a:	6042      	str	r2, [r0, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006f2c:	4608      	mov	r0, r1
      break;
 8006f2e:	4770      	bx	lr

    default:
      status = HAL_ERROR;
 8006f30:	2001      	movs	r0, #1
      break;
  }

  return status;
}
 8006f32:	4770      	bx	lr

08006f34 <HAL_EXTI_GetHandle>:
{
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8006f34:	b110      	cbz	r0, 8006f3c <HAL_EXTI_GetHandle+0x8>
    return HAL_ERROR;
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8006f36:	6001      	str	r1, [r0, #0]

    return HAL_OK;
 8006f38:	2000      	movs	r0, #0
 8006f3a:	4770      	bx	lr
    return HAL_ERROR;
 8006f3c:	2001      	movs	r0, #1
  }
}
 8006f3e:	4770      	bx	lr

08006f40 <HAL_EXTI_IRQHandler>:
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8006f40:	6803      	ldr	r3, [r0, #0]
 8006f42:	f3c3 4200 	ubfx	r2, r3, #16, #1
{
 8006f46:	b430      	push	{r4, r5}
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));

  /* Get pending bit  */
  regaddr = (&EXTI->PR1 + (EXTI_CONFIG_OFFSET * offset));
 8006f48:	0152      	lsls	r2, r2, #5
 8006f4a:	4c08      	ldr	r4, [pc, #32]	; (8006f6c <HAL_EXTI_IRQHandler+0x2c>)
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8006f4c:	f003 031f 	and.w	r3, r3, #31
  regval = (*regaddr & maskline);
 8006f50:	5915      	ldr	r5, [r2, r4]
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8006f52:	2101      	movs	r1, #1
 8006f54:	fa01 f303 	lsl.w	r3, r1, r3

  if (regval != 0x00u)
 8006f58:	421d      	tst	r5, r3
 8006f5a:	d004      	beq.n	8006f66 <HAL_EXTI_IRQHandler+0x26>
  {
    /* Clear pending bit */
    *regaddr = maskline;

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 8006f5c:	6841      	ldr	r1, [r0, #4]
    *regaddr = maskline;
 8006f5e:	5113      	str	r3, [r2, r4]
    if (hexti->PendingCallback != NULL)
 8006f60:	b109      	cbz	r1, 8006f66 <HAL_EXTI_IRQHandler+0x26>
    {
      hexti->PendingCallback();
    }
  }
}
 8006f62:	bc30      	pop	{r4, r5}
      hexti->PendingCallback();
 8006f64:	4708      	bx	r1
}
 8006f66:	bc30      	pop	{r4, r5}
 8006f68:	4770      	bx	lr
 8006f6a:	bf00      	nop
 8006f6c:	40010414 	.word	0x40010414

08006f70 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006f70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006f74:	680e      	ldr	r6, [r1, #0]
{
 8006f76:	b083      	sub	sp, #12
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006f78:	2e00      	cmp	r6, #0
 8006f7a:	f000 80a0 	beq.w	80070be <HAL_GPIO_Init+0x14e>
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006f7e:	f8df 8228 	ldr.w	r8, [pc, #552]	; 80071a8 <HAL_GPIO_Init+0x238>
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8006f82:	f8df c228 	ldr.w	ip, [pc, #552]	; 80071ac <HAL_GPIO_Init+0x23c>
  uint32_t position = 0x00u;
 8006f86:	2300      	movs	r3, #0
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8006f88:	2201      	movs	r2, #1
 8006f8a:	409a      	lsls	r2, r3
    if (iocurrent != 0x00u)
 8006f8c:	ea12 0e06 	ands.w	lr, r2, r6
 8006f90:	f000 8090 	beq.w	80070b4 <HAL_GPIO_Init+0x144>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006f94:	684d      	ldr	r5, [r1, #4]
 8006f96:	f025 0a10 	bic.w	sl, r5, #16
 8006f9a:	f1ba 0f02 	cmp.w	sl, #2
 8006f9e:	f000 8091 	beq.w	80070c4 <HAL_GPIO_Init+0x154>
      temp = GPIOx->MODER;
 8006fa2:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8006fa6:	ea4f 0943 	mov.w	r9, r3, lsl #1
 8006faa:	2403      	movs	r4, #3
 8006fac:	fa04 f409 	lsl.w	r4, r4, r9
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8006fb0:	f005 0703 	and.w	r7, r5, #3
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8006fb4:	ea2b 0b04 	bic.w	fp, fp, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8006fb8:	fa07 f709 	lsl.w	r7, r7, r9
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006fbc:	f10a 3aff 	add.w	sl, sl, #4294967295
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8006fc0:	ea47 070b 	orr.w	r7, r7, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006fc4:	f1ba 0f01 	cmp.w	sl, #1
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8006fc8:	ea6f 0404 	mvn.w	r4, r4
      GPIOx->MODER = temp;
 8006fcc:	6007      	str	r7, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006fce:	f240 809f 	bls.w	8007110 <HAL_GPIO_Init+0x1a0>
      temp = GPIOx->PUPDR;
 8006fd2:	68c7      	ldr	r7, [r0, #12]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8006fd4:	688a      	ldr	r2, [r1, #8]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8006fd6:	403c      	ands	r4, r7
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8006fd8:	fa02 f209 	lsl.w	r2, r2, r9
 8006fdc:	4322      	orrs	r2, r4
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8006fde:	00ef      	lsls	r7, r5, #3
      GPIOx->PUPDR = temp;
 8006fe0:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8006fe2:	d567      	bpl.n	80070b4 <HAL_GPIO_Init+0x144>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006fe4:	f8d8 2060 	ldr.w	r2, [r8, #96]	; 0x60
 8006fe8:	f042 0201 	orr.w	r2, r2, #1
 8006fec:	f8c8 2060 	str.w	r2, [r8, #96]	; 0x60
 8006ff0:	f8d8 2060 	ldr.w	r2, [r8, #96]	; 0x60
 8006ff4:	f023 0403 	bic.w	r4, r3, #3
 8006ff8:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 8006ffc:	f002 0201 	and.w	r2, r2, #1
 8007000:	f504 3480 	add.w	r4, r4, #65536	; 0x10000
 8007004:	9201      	str	r2, [sp, #4]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8007006:	f003 0703 	and.w	r7, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800700a:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2u];
 800700c:	f8d4 9008 	ldr.w	r9, [r4, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8007010:	00bf      	lsls	r7, r7, #2
 8007012:	220f      	movs	r2, #15
 8007014:	40ba      	lsls	r2, r7
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8007016:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800701a:	ea29 0a02 	bic.w	sl, r9, r2
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800701e:	d021      	beq.n	8007064 <HAL_GPIO_Init+0xf4>
 8007020:	4a5a      	ldr	r2, [pc, #360]	; (800718c <HAL_GPIO_Init+0x21c>)
 8007022:	4290      	cmp	r0, r2
 8007024:	f000 808e 	beq.w	8007144 <HAL_GPIO_Init+0x1d4>
 8007028:	4a59      	ldr	r2, [pc, #356]	; (8007190 <HAL_GPIO_Init+0x220>)
 800702a:	4290      	cmp	r0, r2
 800702c:	f000 8091 	beq.w	8007152 <HAL_GPIO_Init+0x1e2>
 8007030:	4a58      	ldr	r2, [pc, #352]	; (8007194 <HAL_GPIO_Init+0x224>)
 8007032:	4290      	cmp	r0, r2
 8007034:	d07f      	beq.n	8007136 <HAL_GPIO_Init+0x1c6>
 8007036:	4a58      	ldr	r2, [pc, #352]	; (8007198 <HAL_GPIO_Init+0x228>)
 8007038:	4290      	cmp	r0, r2
 800703a:	f000 8098 	beq.w	800716e <HAL_GPIO_Init+0x1fe>
 800703e:	4a57      	ldr	r2, [pc, #348]	; (800719c <HAL_GPIO_Init+0x22c>)
 8007040:	4290      	cmp	r0, r2
 8007042:	f000 809b 	beq.w	800717c <HAL_GPIO_Init+0x20c>
 8007046:	4a56      	ldr	r2, [pc, #344]	; (80071a0 <HAL_GPIO_Init+0x230>)
 8007048:	4290      	cmp	r0, r2
 800704a:	f000 8089 	beq.w	8007160 <HAL_GPIO_Init+0x1f0>
 800704e:	4a55      	ldr	r2, [pc, #340]	; (80071a4 <HAL_GPIO_Init+0x234>)
 8007050:	4290      	cmp	r0, r2
 8007052:	bf0c      	ite	eq
 8007054:	f04f 0907 	moveq.w	r9, #7
 8007058:	f04f 0908 	movne.w	r9, #8
 800705c:	fa09 f707 	lsl.w	r7, r9, r7
 8007060:	ea4a 0a07 	orr.w	sl, sl, r7
        SYSCFG->EXTICR[position >> 2u] = temp;
 8007064:	f8c4 a008 	str.w	sl, [r4, #8]
        temp = EXTI->IMR1;
 8007068:	f8dc 2000 	ldr.w	r2, [ip]
        temp &= ~(iocurrent);
 800706c:	ea6f 070e 	mvn.w	r7, lr
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8007070:	03ec      	lsls	r4, r5, #15
        temp &= ~(iocurrent);
 8007072:	bf54      	ite	pl
 8007074:	403a      	andpl	r2, r7
        {
          temp |= iocurrent;
 8007076:	ea4e 0202 	orrmi.w	r2, lr, r2
        }
        EXTI->IMR1 = temp;
 800707a:	f8cc 2000 	str.w	r2, [ip]

        temp = EXTI->EMR1;
 800707e:	f8dc 4004 	ldr.w	r4, [ip, #4]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8007082:	03aa      	lsls	r2, r5, #14
        temp &= ~(iocurrent);
 8007084:	bf54      	ite	pl
 8007086:	403c      	andpl	r4, r7
        {
          temp |= iocurrent;
 8007088:	ea4e 0404 	orrmi.w	r4, lr, r4
        }
        EXTI->EMR1 = temp;
 800708c:	f8cc 4004 	str.w	r4, [ip, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007090:	f8dc 4008 	ldr.w	r4, [ip, #8]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8007094:	02ea      	lsls	r2, r5, #11
        temp &= ~(iocurrent);
 8007096:	bf54      	ite	pl
 8007098:	403c      	andpl	r4, r7
        {
          temp |= iocurrent;
 800709a:	ea4e 0404 	orrmi.w	r4, lr, r4
        }
        EXTI->RTSR1 = temp;
 800709e:	f8cc 4008 	str.w	r4, [ip, #8]

        temp = EXTI->FTSR1;
 80070a2:	f8dc 200c 	ldr.w	r2, [ip, #12]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80070a6:	02ac      	lsls	r4, r5, #10
        temp &= ~(iocurrent);
 80070a8:	bf54      	ite	pl
 80070aa:	403a      	andpl	r2, r7
        {
          temp |= iocurrent;
 80070ac:	ea4e 0202 	orrmi.w	r2, lr, r2
        }
        EXTI->FTSR1 = temp;
 80070b0:	f8cc 200c 	str.w	r2, [ip, #12]
      }
    }

    position++;
 80070b4:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80070b6:	fa36 f203 	lsrs.w	r2, r6, r3
 80070ba:	f47f af65 	bne.w	8006f88 <HAL_GPIO_Init+0x18>
  }
}
 80070be:	b003      	add	sp, #12
 80070c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->AFR[position >> 3u];
 80070c4:	ea4f 09d3 	mov.w	r9, r3, lsr #3
 80070c8:	eb00 0989 	add.w	r9, r0, r9, lsl #2
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80070cc:	f003 0707 	and.w	r7, r3, #7
        temp = GPIOx->AFR[position >> 3u];
 80070d0:	f8d9 4020 	ldr.w	r4, [r9, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80070d4:	00bf      	lsls	r7, r7, #2
 80070d6:	f04f 0b0f 	mov.w	fp, #15
 80070da:	fa0b fb07 	lsl.w	fp, fp, r7
 80070de:	ea24 0a0b 	bic.w	sl, r4, fp
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80070e2:	690c      	ldr	r4, [r1, #16]
 80070e4:	40bc      	lsls	r4, r7
 80070e6:	ea44 040a 	orr.w	r4, r4, sl
        GPIOx->AFR[position >> 3u] = temp;
 80070ea:	f8c9 4020 	str.w	r4, [r9, #32]
      temp = GPIOx->MODER;
 80070ee:	f8d0 a000 	ldr.w	sl, [r0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80070f2:	ea4f 0943 	mov.w	r9, r3, lsl #1
 80070f6:	2403      	movs	r4, #3
 80070f8:	fa04 f409 	lsl.w	r4, r4, r9
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80070fc:	f005 0703 	and.w	r7, r5, #3
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8007100:	ea2a 0a04 	bic.w	sl, sl, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8007104:	fa07 f709 	lsl.w	r7, r7, r9
 8007108:	ea47 070a 	orr.w	r7, r7, sl
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800710c:	43e4      	mvns	r4, r4
      GPIOx->MODER = temp;
 800710e:	6007      	str	r7, [r0, #0]
        temp = GPIOx->OSPEEDR;
 8007110:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8007112:	ea04 0a07 	and.w	sl, r4, r7
        temp |= (GPIO_Init->Speed << (position * 2u));
 8007116:	68cf      	ldr	r7, [r1, #12]
 8007118:	fa07 f709 	lsl.w	r7, r7, r9
 800711c:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OSPEEDR = temp;
 8007120:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8007122:	f8d0 a004 	ldr.w	sl, [r0, #4]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8007126:	f3c5 1700 	ubfx	r7, r5, #4, #1
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800712a:	ea2a 0202 	bic.w	r2, sl, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800712e:	409f      	lsls	r7, r3
 8007130:	4317      	orrs	r7, r2
        GPIOx->OTYPER = temp;
 8007132:	6047      	str	r7, [r0, #4]
 8007134:	e74d      	b.n	8006fd2 <HAL_GPIO_Init+0x62>
 8007136:	f04f 0903 	mov.w	r9, #3
 800713a:	fa09 f707 	lsl.w	r7, r9, r7
 800713e:	ea4a 0a07 	orr.w	sl, sl, r7
 8007142:	e78f      	b.n	8007064 <HAL_GPIO_Init+0xf4>
 8007144:	f04f 0901 	mov.w	r9, #1
 8007148:	fa09 f707 	lsl.w	r7, r9, r7
 800714c:	ea4a 0a07 	orr.w	sl, sl, r7
 8007150:	e788      	b.n	8007064 <HAL_GPIO_Init+0xf4>
 8007152:	f04f 0902 	mov.w	r9, #2
 8007156:	fa09 f707 	lsl.w	r7, r9, r7
 800715a:	ea4a 0a07 	orr.w	sl, sl, r7
 800715e:	e781      	b.n	8007064 <HAL_GPIO_Init+0xf4>
 8007160:	f04f 0906 	mov.w	r9, #6
 8007164:	fa09 f707 	lsl.w	r7, r9, r7
 8007168:	ea4a 0a07 	orr.w	sl, sl, r7
 800716c:	e77a      	b.n	8007064 <HAL_GPIO_Init+0xf4>
 800716e:	f04f 0904 	mov.w	r9, #4
 8007172:	fa09 f707 	lsl.w	r7, r9, r7
 8007176:	ea4a 0a07 	orr.w	sl, sl, r7
 800717a:	e773      	b.n	8007064 <HAL_GPIO_Init+0xf4>
 800717c:	f04f 0905 	mov.w	r9, #5
 8007180:	fa09 f707 	lsl.w	r7, r9, r7
 8007184:	ea4a 0a07 	orr.w	sl, sl, r7
 8007188:	e76c      	b.n	8007064 <HAL_GPIO_Init+0xf4>
 800718a:	bf00      	nop
 800718c:	48000400 	.word	0x48000400
 8007190:	48000800 	.word	0x48000800
 8007194:	48000c00 	.word	0x48000c00
 8007198:	48001000 	.word	0x48001000
 800719c:	48001400 	.word	0x48001400
 80071a0:	48001800 	.word	0x48001800
 80071a4:	48001c00 	.word	0x48001c00
 80071a8:	40021000 	.word	0x40021000
 80071ac:	40010400 	.word	0x40010400

080071b0 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80071b0:	6903      	ldr	r3, [r0, #16]
 80071b2:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 80071b4:	bf14      	ite	ne
 80071b6:	2001      	movne	r0, #1
 80071b8:	2000      	moveq	r0, #0
 80071ba:	4770      	bx	lr

080071bc <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80071bc:	b10a      	cbz	r2, 80071c2 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80071be:	6181      	str	r1, [r0, #24]
 80071c0:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80071c2:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 80071c4:	4770      	bx	lr
 80071c6:	bf00      	nop

080071c8 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 80071c8:	6943      	ldr	r3, [r0, #20]
 80071ca:	420b      	tst	r3, r1
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80071cc:	bf14      	ite	ne
 80071ce:	6281      	strne	r1, [r0, #40]	; 0x28
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80071d0:	6181      	streq	r1, [r0, #24]
  }
}
 80071d2:	4770      	bx	lr

080071d4 <HAL_GPIO_EXTI_IRQHandler>:
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80071d4:	4a04      	ldr	r2, [pc, #16]	; (80071e8 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 80071d6:	6951      	ldr	r1, [r2, #20]
 80071d8:	4201      	tst	r1, r0
 80071da:	d100      	bne.n	80071de <HAL_GPIO_EXTI_IRQHandler+0xa>
 80071dc:	4770      	bx	lr
{
 80071de:	b508      	push	{r3, lr}
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80071e0:	6150      	str	r0, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80071e2:	f7fc fea3 	bl	8003f2c <HAL_GPIO_EXTI_Callback>
  }
}
 80071e6:	bd08      	pop	{r3, pc}
 80071e8:	40010400 	.word	0x40010400

080071ec <HAL_I2C_MspInit>:
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 80071ec:	4770      	bx	lr
 80071ee:	bf00      	nop

080071f0 <HAL_I2C_AddrCallback>:
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80071f0:	4770      	bx	lr
 80071f2:	bf00      	nop

080071f4 <I2C_DMAAbort>:
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80071f4:	6a80      	ldr	r0, [r0, #40]	; 0x28

  /* Reset AbortCpltCallback */
  hi2c->hdmatx->XferAbortCallback = NULL;
  hi2c->hdmarx->XferAbortCallback = NULL;
 80071f6:	e9d0 120e 	ldrd	r1, r2, [r0, #56]	; 0x38
  hi2c->hdmatx->XferAbortCallback = NULL;
 80071fa:	2300      	movs	r3, #0
 80071fc:	638b      	str	r3, [r1, #56]	; 0x38
  hi2c->hdmarx->XferAbortCallback = NULL;
 80071fe:	6393      	str	r3, [r2, #56]	; 0x38

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8007200:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8007204:	2b60      	cmp	r3, #96	; 0x60
 8007206:	d001      	beq.n	800720c <I2C_DMAAbort+0x18>
  }
  else
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
 8007208:	6e83      	ldr	r3, [r0, #104]	; 0x68
 800720a:	4718      	bx	r3
    hi2c->State = HAL_I2C_STATE_READY;
 800720c:	2320      	movs	r3, #32
 800720e:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    hi2c->AbortCpltCallback(hi2c);
 8007212:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8007214:	4718      	bx	r3
 8007216:	bf00      	nop

08007218 <I2C_ITError>:
{
 8007218:	b570      	push	{r4, r5, r6, lr}
 800721a:	4604      	mov	r4, r0
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800721c:	4a40      	ldr	r2, [pc, #256]	; (8007320 <I2C_ITError+0x108>)
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800721e:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007222:	2000      	movs	r0, #0
 8007224:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8007228:	62e2      	str	r2, [r4, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 800722a:	8560      	strh	r0, [r4, #42]	; 0x2a
  hi2c->ErrorCode |= ErrorCode;
 800722c:	6c62      	ldr	r2, [r4, #68]	; 0x44
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800722e:	3b28      	subs	r3, #40	; 0x28
  hi2c->ErrorCode |= ErrorCode;
 8007230:	4311      	orrs	r1, r2
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8007232:	2b02      	cmp	r3, #2
  hi2c->ErrorCode |= ErrorCode;
 8007234:	6461      	str	r1, [r4, #68]	; 0x44
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8007236:	d83d      	bhi.n	80072b4 <I2C_ITError+0x9c>
  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8007238:	f894 1041 	ldrb.w	r1, [r4, #65]	; 0x41
  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800723c:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8007240:	6823      	ldr	r3, [r4, #0]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8007242:	4d38      	ldr	r5, [pc, #224]	; (8007324 <I2C_ITError+0x10c>)
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8007244:	f001 0128 	and.w	r1, r1, #40	; 0x28
 8007248:	2928      	cmp	r1, #40	; 0x28
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800724a:	f002 0228 	and.w	r2, r2, #40	; 0x28
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800724e:	bf14      	ite	ne
 8007250:	f06f 01f6 	mvnne.w	r1, #246	; 0xf6
 8007254:	f06f 0146 	mvneq.w	r1, #70	; 0x46
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8007258:	2a28      	cmp	r2, #40	; 0x28
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800725a:	681a      	ldr	r2, [r3, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800725c:	bf18      	it	ne
 800725e:	f06f 01f6 	mvnne.w	r1, #246	; 0xf6
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8007262:	400a      	ands	r2, r1
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8007264:	2128      	movs	r1, #40	; 0x28
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8007266:	601a      	str	r2, [r3, #0]
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8007268:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 800726c:	6365      	str	r5, [r4, #52]	; 0x34
    hi2c->PreviousState = I2C_STATE_NONE;
 800726e:	6320      	str	r0, [r4, #48]	; 0x30
  if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8007270:	681a      	ldr	r2, [r3, #0]
 8007272:	f412 4280 	ands.w	r2, r2, #16384	; 0x4000
 8007276:	d012      	beq.n	800729e <I2C_ITError+0x86>
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8007278:	681a      	ldr	r2, [r3, #0]
    if (hi2c->hdmatx != NULL)
 800727a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800727c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007280:	601a      	str	r2, [r3, #0]
    if (hi2c->hdmatx != NULL)
 8007282:	b1b0      	cbz	r0, 80072b2 <I2C_ITError+0x9a>
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8007284:	4b28      	ldr	r3, [pc, #160]	; (8007328 <I2C_ITError+0x110>)
 8007286:	6383      	str	r3, [r0, #56]	; 0x38
      __HAL_UNLOCK(hi2c);
 8007288:	2300      	movs	r3, #0
 800728a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800728e:	f7ff fdc5 	bl	8006e1c <HAL_DMA_Abort_IT>
 8007292:	b170      	cbz	r0, 80072b2 <I2C_ITError+0x9a>
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8007294:	6ba0      	ldr	r0, [r4, #56]	; 0x38
}
 8007296:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800729a:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800729c:	4718      	bx	r3
  else if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800729e:	6819      	ldr	r1, [r3, #0]
 80072a0:	f411 4100 	ands.w	r1, r1, #32768	; 0x8000
 80072a4:	d01a      	beq.n	80072dc <I2C_ITError+0xc4>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80072a6:	6819      	ldr	r1, [r3, #0]
    if (hi2c->hdmarx != NULL)
 80072a8:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80072aa:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
 80072ae:	6019      	str	r1, [r3, #0]
    if (hi2c->hdmarx != NULL)
 80072b0:	b9f8      	cbnz	r0, 80072f2 <I2C_ITError+0xda>
}
 80072b2:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80072b4:	6823      	ldr	r3, [r4, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80072b6:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80072ba:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80072be:	681a      	ldr	r2, [r3, #0]
 80072c0:	f022 02fe 	bic.w	r2, r2, #254	; 0xfe
 80072c4:	601a      	str	r2, [r3, #0]
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80072c6:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 80072ca:	2a60      	cmp	r2, #96	; 0x60
      hi2c->State         = HAL_I2C_STATE_READY;
 80072cc:	bf1c      	itt	ne
 80072ce:	2220      	movne	r2, #32
 80072d0:	f884 2041 	strbne.w	r2, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80072d4:	2200      	movs	r2, #0
 80072d6:	6322      	str	r2, [r4, #48]	; 0x30
    hi2c->XferISR       = NULL;
 80072d8:	6362      	str	r2, [r4, #52]	; 0x34
 80072da:	e7c9      	b.n	8007270 <I2C_ITError+0x58>
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80072dc:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 80072e0:	2b60      	cmp	r3, #96	; 0x60
 80072e2:	d013      	beq.n	800730c <I2C_ITError+0xf4>
    __HAL_UNLOCK(hi2c);
 80072e4:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
    hi2c->ErrorCallback(hi2c);
 80072e8:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 80072ea:	4620      	mov	r0, r4
}
 80072ec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    hi2c->ErrorCallback(hi2c);
 80072f0:	4718      	bx	r3
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80072f2:	4b0d      	ldr	r3, [pc, #52]	; (8007328 <I2C_ITError+0x110>)
 80072f4:	6383      	str	r3, [r0, #56]	; 0x38
      __HAL_UNLOCK(hi2c);
 80072f6:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80072fa:	f7ff fd8f 	bl	8006e1c <HAL_DMA_Abort_IT>
 80072fe:	2800      	cmp	r0, #0
 8007300:	d0d7      	beq.n	80072b2 <I2C_ITError+0x9a>
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8007302:	6be0      	ldr	r0, [r4, #60]	; 0x3c
}
 8007304:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8007308:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800730a:	4718      	bx	r3
    hi2c->State = HAL_I2C_STATE_READY;
 800730c:	2320      	movs	r3, #32
 800730e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8007312:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
    hi2c->AbortCpltCallback(hi2c);
 8007316:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8007318:	4620      	mov	r0, r4
}
 800731a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    hi2c->AbortCpltCallback(hi2c);
 800731e:	4718      	bx	r3
 8007320:	ffff0000 	.word	0xffff0000
 8007324:	08007a2d 	.word	0x08007a2d
 8007328:	080071f5 	.word	0x080071f5

0800732c <I2C_DMAMasterTransmitCplt>:
{
 800732c:	b510      	push	{r4, lr}
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800732e:	6a84      	ldr	r4, [r0, #40]	; 0x28
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8007330:	6822      	ldr	r2, [r4, #0]
 8007332:	6813      	ldr	r3, [r2, #0]
 8007334:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007338:	6013      	str	r3, [r2, #0]
  if (hi2c->XferCount == 0U)
 800733a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800733c:	b29b      	uxth	r3, r3
 800733e:	b963      	cbnz	r3, 800735a <I2C_DMAMasterTransmitCplt+0x2e>
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8007340:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007342:	491c      	ldr	r1, [pc, #112]	; (80073b4 <I2C_DMAMasterTransmitCplt+0x88>)
 8007344:	428b      	cmp	r3, r1
 8007346:	d02a      	beq.n	800739e <I2C_DMAMasterTransmitCplt+0x72>
 8007348:	491b      	ldr	r1, [pc, #108]	; (80073b8 <I2C_DMAMasterTransmitCplt+0x8c>)
      tmpisr |= I2C_IT_STOPI;
 800734a:	428b      	cmp	r3, r1
 800734c:	bf0c      	ite	eq
 800734e:	2360      	moveq	r3, #96	; 0x60
 8007350:	23f4      	movne	r3, #244	; 0xf4
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8007352:	6811      	ldr	r1, [r2, #0]
 8007354:	430b      	orrs	r3, r1
 8007356:	6013      	str	r3, [r2, #0]
}
 8007358:	bd10      	pop	{r4, pc}
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800735a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->pBuffPtr += hi2c->XferSize;
 800735c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800735e:	8d20      	ldrh	r0, [r4, #40]	; 0x28
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007360:	b29b      	uxth	r3, r3
    hi2c->pBuffPtr += hi2c->XferSize;
 8007362:	4401      	add	r1, r0
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007364:	2bff      	cmp	r3, #255	; 0xff
    hi2c->pBuffPtr += hi2c->XferSize;
 8007366:	6261      	str	r1, [r4, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007368:	d816      	bhi.n	8007398 <I2C_DMAMasterTransmitCplt+0x6c>
      hi2c->XferSize = hi2c->XferCount;
 800736a:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
 800736c:	b280      	uxth	r0, r0
 800736e:	4603      	mov	r3, r0
 8007370:	8520      	strh	r0, [r4, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize) != HAL_OK)
 8007372:	3228      	adds	r2, #40	; 0x28
 8007374:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8007376:	f7ff fcf5 	bl	8006d64 <HAL_DMA_Start_IT>
 800737a:	b990      	cbnz	r0, 80073a2 <I2C_DMAMasterTransmitCplt+0x76>
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 800737c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800737e:	4a0d      	ldr	r2, [pc, #52]	; (80073b4 <I2C_DMAMasterTransmitCplt+0x88>)
 8007380:	4293      	cmp	r3, r2
 8007382:	d014      	beq.n	80073ae <I2C_DMAMasterTransmitCplt+0x82>
 8007384:	4a0c      	ldr	r2, [pc, #48]	; (80073b8 <I2C_DMAMasterTransmitCplt+0x8c>)
      tmpisr |= I2C_IT_STOPI;
 8007386:	4293      	cmp	r3, r2
 8007388:	bf0c      	ite	eq
 800738a:	2360      	moveq	r3, #96	; 0x60
 800738c:	23f4      	movne	r3, #244	; 0xf4
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 800738e:	6821      	ldr	r1, [r4, #0]
 8007390:	680a      	ldr	r2, [r1, #0]
 8007392:	4313      	orrs	r3, r2
 8007394:	600b      	str	r3, [r1, #0]
}
 8007396:	bd10      	pop	{r4, pc}
 8007398:	23ff      	movs	r3, #255	; 0xff
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800739a:	4618      	mov	r0, r3
 800739c:	e7e8      	b.n	8007370 <I2C_DMAMasterTransmitCplt+0x44>
      tmpisr |= I2C_IT_TCI;
 800739e:	2360      	movs	r3, #96	; 0x60
 80073a0:	e7d7      	b.n	8007352 <I2C_DMAMasterTransmitCplt+0x26>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 80073a2:	4620      	mov	r0, r4
 80073a4:	2110      	movs	r1, #16
}
 80073a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 80073aa:	f7ff bf35 	b.w	8007218 <I2C_ITError>
      tmpisr |= I2C_IT_TCI;
 80073ae:	2360      	movs	r3, #96	; 0x60
 80073b0:	e7ed      	b.n	800738e <I2C_DMAMasterTransmitCplt+0x62>
 80073b2:	bf00      	nop
 80073b4:	08007749 	.word	0x08007749
 80073b8:	08007b71 	.word	0x08007b71

080073bc <I2C_DMAMasterReceiveCplt>:
{
 80073bc:	b510      	push	{r4, lr}
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80073be:	6a84      	ldr	r4, [r0, #40]	; 0x28
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80073c0:	6821      	ldr	r1, [r4, #0]
 80073c2:	680b      	ldr	r3, [r1, #0]
 80073c4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80073c8:	600b      	str	r3, [r1, #0]
  if (hi2c->XferCount == 0U)
 80073ca:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80073cc:	b29b      	uxth	r3, r3
 80073ce:	b963      	cbnz	r3, 80073ea <I2C_DMAMasterReceiveCplt+0x2e>
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 80073d0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80073d2:	4a1d      	ldr	r2, [pc, #116]	; (8007448 <I2C_DMAMasterReceiveCplt+0x8c>)
 80073d4:	4293      	cmp	r3, r2
 80073d6:	d02a      	beq.n	800742e <I2C_DMAMasterReceiveCplt+0x72>
 80073d8:	4a1c      	ldr	r2, [pc, #112]	; (800744c <I2C_DMAMasterReceiveCplt+0x90>)
      tmpisr |= I2C_IT_STOPI;
 80073da:	4293      	cmp	r3, r2
 80073dc:	bf0c      	ite	eq
 80073de:	2360      	moveq	r3, #96	; 0x60
 80073e0:	23f4      	movne	r3, #244	; 0xf4
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 80073e2:	680a      	ldr	r2, [r1, #0]
 80073e4:	4313      	orrs	r3, r2
 80073e6:	600b      	str	r3, [r1, #0]
}
 80073e8:	bd10      	pop	{r4, pc}
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80073ea:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->pBuffPtr += hi2c->XferSize;
 80073ec:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80073ee:	8d20      	ldrh	r0, [r4, #40]	; 0x28
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80073f0:	b29b      	uxth	r3, r3
    hi2c->pBuffPtr += hi2c->XferSize;
 80073f2:	4402      	add	r2, r0
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80073f4:	2bff      	cmp	r3, #255	; 0xff
    hi2c->pBuffPtr += hi2c->XferSize;
 80073f6:	6262      	str	r2, [r4, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80073f8:	d816      	bhi.n	8007428 <I2C_DMAMasterReceiveCplt+0x6c>
      hi2c->XferSize = hi2c->XferCount;
 80073fa:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
 80073fc:	b280      	uxth	r0, r0
 80073fe:	4603      	mov	r3, r0
 8007400:	8520      	strh	r0, [r4, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize) != HAL_OK)
 8007402:	3124      	adds	r1, #36	; 0x24
 8007404:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8007406:	f7ff fcad 	bl	8006d64 <HAL_DMA_Start_IT>
 800740a:	b9a8      	cbnz	r0, 8007438 <I2C_DMAMasterReceiveCplt+0x7c>
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 800740c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800740e:	4a0e      	ldr	r2, [pc, #56]	; (8007448 <I2C_DMAMasterReceiveCplt+0x8c>)
 8007410:	4293      	cmp	r3, r2
 8007412:	d017      	beq.n	8007444 <I2C_DMAMasterReceiveCplt+0x88>
 8007414:	4a0d      	ldr	r2, [pc, #52]	; (800744c <I2C_DMAMasterReceiveCplt+0x90>)
      tmpisr |= I2C_IT_STOPI;
 8007416:	4293      	cmp	r3, r2
 8007418:	bf0c      	ite	eq
 800741a:	2360      	moveq	r3, #96	; 0x60
 800741c:	23f4      	movne	r3, #244	; 0xf4
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 800741e:	6821      	ldr	r1, [r4, #0]
 8007420:	680a      	ldr	r2, [r1, #0]
 8007422:	4313      	orrs	r3, r2
 8007424:	600b      	str	r3, [r1, #0]
}
 8007426:	bd10      	pop	{r4, pc}
 8007428:	23ff      	movs	r3, #255	; 0xff
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800742a:	4618      	mov	r0, r3
 800742c:	e7e8      	b.n	8007400 <I2C_DMAMasterReceiveCplt+0x44>
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 800742e:	680a      	ldr	r2, [r1, #0]
      tmpisr |= I2C_IT_TCI;
 8007430:	2360      	movs	r3, #96	; 0x60
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8007432:	4313      	orrs	r3, r2
 8007434:	600b      	str	r3, [r1, #0]
}
 8007436:	bd10      	pop	{r4, pc}
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8007438:	4620      	mov	r0, r4
 800743a:	2110      	movs	r1, #16
}
 800743c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8007440:	f7ff beea 	b.w	8007218 <I2C_ITError>
      tmpisr |= I2C_IT_TCI;
 8007444:	2360      	movs	r3, #96	; 0x60
 8007446:	e7ea      	b.n	800741e <I2C_DMAMasterReceiveCplt+0x62>
 8007448:	08007749 	.word	0x08007749
 800744c:	08007b71 	.word	0x08007b71

08007450 <HAL_I2C_AbortCpltCallback>:
 8007450:	4770      	bx	lr
 8007452:	bf00      	nop

08007454 <HAL_I2C_MasterTxCpltCallback>:
 8007454:	4770      	bx	lr
 8007456:	bf00      	nop

08007458 <HAL_I2C_MasterRxCpltCallback>:
 8007458:	4770      	bx	lr
 800745a:	bf00      	nop

0800745c <HAL_I2C_SlaveTxCpltCallback>:
 800745c:	4770      	bx	lr
 800745e:	bf00      	nop

08007460 <HAL_I2C_SlaveRxCpltCallback>:
 8007460:	4770      	bx	lr
 8007462:	bf00      	nop

08007464 <HAL_I2C_ListenCpltCallback>:
 8007464:	4770      	bx	lr
 8007466:	bf00      	nop

08007468 <HAL_I2C_MemTxCpltCallback>:
 8007468:	4770      	bx	lr
 800746a:	bf00      	nop

0800746c <HAL_I2C_MemRxCpltCallback>:
 800746c:	4770      	bx	lr
 800746e:	bf00      	nop

08007470 <HAL_I2C_ErrorCallback>:
 8007470:	4770      	bx	lr
 8007472:	bf00      	nop

08007474 <I2C_ITMasterCplt>:
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007474:	6803      	ldr	r3, [r0, #0]
 8007476:	2220      	movs	r2, #32
{
 8007478:	b430      	push	{r4, r5}
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800747a:	61da      	str	r2, [r3, #28]
  I2C_RESET_CR2(hi2c);
 800747c:	685a      	ldr	r2, [r3, #4]
 800747e:	4c33      	ldr	r4, [pc, #204]	; (800754c <I2C_ITMasterCplt+0xd8>)
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8007480:	4d33      	ldr	r5, [pc, #204]	; (8007550 <I2C_ITMasterCplt+0xdc>)
  I2C_RESET_CR2(hi2c);
 8007482:	4022      	ands	r2, r4
  hi2c->PreviousState = I2C_STATE_NONE;
 8007484:	2400      	movs	r4, #0
  I2C_RESET_CR2(hi2c);
 8007486:	605a      	str	r2, [r3, #4]
  hi2c->PreviousState = I2C_STATE_NONE;
 8007488:	6304      	str	r4, [r0, #48]	; 0x30
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800748a:	62c5      	str	r5, [r0, #44]	; 0x2c
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET)
 800748c:	06cd      	lsls	r5, r1, #27
  hi2c->XferISR       = NULL;
 800748e:	6344      	str	r4, [r0, #52]	; 0x34
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET)
 8007490:	d505      	bpl.n	800749e <I2C_ITMasterCplt+0x2a>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007492:	2210      	movs	r2, #16
 8007494:	61da      	str	r2, [r3, #28]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007496:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007498:	f042 0204 	orr.w	r2, r2, #4
 800749c:	6442      	str	r2, [r0, #68]	; 0x44
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800749e:	699a      	ldr	r2, [r3, #24]
 80074a0:	0794      	lsls	r4, r2, #30
    hi2c->Instance->TXDR = 0x00U;
 80074a2:	bf44      	itt	mi
 80074a4:	2200      	movmi	r2, #0
 80074a6:	629a      	strmi	r2, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80074a8:	699a      	ldr	r2, [r3, #24]
 80074aa:	07d1      	lsls	r1, r2, #31
 80074ac:	d403      	bmi.n	80074b6 <I2C_ITMasterCplt+0x42>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80074ae:	699a      	ldr	r2, [r3, #24]
 80074b0:	f042 0201 	orr.w	r2, r2, #1
 80074b4:	619a      	str	r2, [r3, #24]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80074b6:	f890 4041 	ldrb.w	r4, [r0, #65]	; 0x41
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80074ba:	f890 1041 	ldrb.w	r1, [r0, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80074be:	681d      	ldr	r5, [r3, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80074c0:	f004 0428 	and.w	r4, r4, #40	; 0x28
 80074c4:	2c28      	cmp	r4, #40	; 0x28
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80074c6:	f001 0128 	and.w	r1, r1, #40	; 0x28
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80074ca:	bf14      	ite	ne
 80074cc:	f06f 02f6 	mvnne.w	r2, #246	; 0xf6
 80074d0:	f06f 0246 	mvneq.w	r2, #70	; 0x46
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80074d4:	2928      	cmp	r1, #40	; 0x28
 80074d6:	bf18      	it	ne
 80074d8:	f06f 02f6 	mvnne.w	r2, #246	; 0xf6
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80074dc:	402a      	ands	r2, r5
 80074de:	601a      	str	r2, [r3, #0]
  tmperror = hi2c->ErrorCode;
 80074e0:	6c43      	ldr	r3, [r0, #68]	; 0x44
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 80074e2:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 80074e6:	2a60      	cmp	r2, #96	; 0x60
 80074e8:	d00a      	beq.n	8007500 <I2C_ITMasterCplt+0x8c>
 80074ea:	b94b      	cbnz	r3, 8007500 <I2C_ITMasterCplt+0x8c>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80074ec:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 80074f0:	2a21      	cmp	r2, #33	; 0x21
 80074f2:	d017      	beq.n	8007524 <I2C_ITMasterCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80074f4:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 80074f8:	2a22      	cmp	r2, #34	; 0x22
 80074fa:	d005      	beq.n	8007508 <I2C_ITMasterCplt+0x94>
}
 80074fc:	bc30      	pop	{r4, r5}
 80074fe:	4770      	bx	lr
 8007500:	bc30      	pop	{r4, r5}
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8007502:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8007504:	f7ff be88 	b.w	8007218 <I2C_ITError>
    hi2c->State = HAL_I2C_STATE_READY;
 8007508:	2220      	movs	r2, #32
 800750a:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800750e:	f890 2042 	ldrb.w	r2, [r0, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8007512:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007516:	2a40      	cmp	r2, #64	; 0x40
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007518:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800751c:	d013      	beq.n	8007546 <I2C_ITMasterCplt+0xd2>
}
 800751e:	bc30      	pop	{r4, r5}
      hi2c->MasterRxCpltCallback(hi2c);
 8007520:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8007522:	4718      	bx	r3
    hi2c->State = HAL_I2C_STATE_READY;
 8007524:	2220      	movs	r2, #32
 8007526:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800752a:	f890 2042 	ldrb.w	r2, [r0, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800752e:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007532:	2a40      	cmp	r2, #64	; 0x40
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007534:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007538:	d002      	beq.n	8007540 <I2C_ITMasterCplt+0xcc>
}
 800753a:	bc30      	pop	{r4, r5}
      hi2c->MasterTxCpltCallback(hi2c);
 800753c:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800753e:	4718      	bx	r3
}
 8007540:	bc30      	pop	{r4, r5}
      hi2c->MemTxCpltCallback(hi2c);
 8007542:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8007544:	4718      	bx	r3
}
 8007546:	bc30      	pop	{r4, r5}
      hi2c->MemRxCpltCallback(hi2c);
 8007548:	6e43      	ldr	r3, [r0, #100]	; 0x64
 800754a:	4718      	bx	r3
 800754c:	fe00e800 	.word	0xfe00e800
 8007550:	ffff0000 	.word	0xffff0000

08007554 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8007554:	b570      	push	{r4, r5, r6, lr}
 8007556:	4604      	mov	r4, r0
 8007558:	460d      	mov	r5, r1
 800755a:	4616      	mov	r6, r2
 800755c:	1c6a      	adds	r2, r5, #1
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800755e:	6823      	ldr	r3, [r4, #0]
 8007560:	d12c      	bne.n	80075bc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
 8007562:	699a      	ldr	r2, [r3, #24]
 8007564:	0790      	lsls	r0, r2, #30
 8007566:	d427      	bmi.n	80075b8 <I2C_WaitOnTXISFlagUntilTimeout+0x64>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007568:	699a      	ldr	r2, [r3, #24]
 800756a:	06d1      	lsls	r1, r2, #27
 800756c:	d5f9      	bpl.n	8007562 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800756e:	699a      	ldr	r2, [r3, #24]
 8007570:	0691      	lsls	r1, r2, #26
 8007572:	d5fc      	bpl.n	800756e <I2C_WaitOnTXISFlagUntilTimeout+0x1a>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007574:	2110      	movs	r1, #16
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007576:	2220      	movs	r2, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007578:	61d9      	str	r1, [r3, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800757a:	61da      	str	r2, [r3, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800757c:	699a      	ldr	r2, [r3, #24]
 800757e:	0790      	lsls	r0, r2, #30
    hi2c->Instance->TXDR = 0x00U;
 8007580:	bf44      	itt	mi
 8007582:	2200      	movmi	r2, #0
 8007584:	629a      	strmi	r2, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007586:	699a      	ldr	r2, [r3, #24]
 8007588:	07d1      	lsls	r1, r2, #31
 800758a:	d403      	bmi.n	8007594 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800758c:	699a      	ldr	r2, [r3, #24]
 800758e:	f042 0201 	orr.w	r2, r2, #1
 8007592:	619a      	str	r2, [r3, #24]
    I2C_RESET_CR2(hi2c);
 8007594:	685a      	ldr	r2, [r3, #4]
 8007596:	4918      	ldr	r1, [pc, #96]	; (80075f8 <I2C_WaitOnTXISFlagUntilTimeout+0xa4>)
 8007598:	400a      	ands	r2, r1
 800759a:	605a      	str	r2, [r3, #4]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800759c:	6c63      	ldr	r3, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800759e:	2120      	movs	r1, #32
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80075a0:	f043 0304 	orr.w	r3, r3, #4
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80075a4:	2200      	movs	r2, #0
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80075a6:	6463      	str	r3, [r4, #68]	; 0x44
    __HAL_UNLOCK(hi2c);
 80075a8:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 80075ac:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80075b0:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
      return HAL_ERROR;
 80075b4:	2001      	movs	r0, #1
}
 80075b6:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 80075b8:	2000      	movs	r0, #0
}
 80075ba:	bd70      	pop	{r4, r5, r6, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80075bc:	699a      	ldr	r2, [r3, #24]
 80075be:	0792      	lsls	r2, r2, #30
 80075c0:	d4fa      	bmi.n	80075b8 <I2C_WaitOnTXISFlagUntilTimeout+0x64>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80075c2:	699a      	ldr	r2, [r3, #24]
 80075c4:	06d0      	lsls	r0, r2, #27
 80075c6:	d412      	bmi.n	80075ee <I2C_WaitOnTXISFlagUntilTimeout+0x9a>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80075c8:	f7fe fd36 	bl	8006038 <HAL_GetTick>
 80075cc:	1b80      	subs	r0, r0, r6
 80075ce:	42a8      	cmp	r0, r5
 80075d0:	d801      	bhi.n	80075d6 <I2C_WaitOnTXISFlagUntilTimeout+0x82>
 80075d2:	2d00      	cmp	r5, #0
 80075d4:	d1c2      	bne.n	800755c <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80075d6:	6c63      	ldr	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80075d8:	2120      	movs	r1, #32
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80075da:	430b      	orrs	r3, r1
 80075dc:	e7e2      	b.n	80075a4 <I2C_WaitOnTXISFlagUntilTimeout+0x50>
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80075de:	f7fe fd2b 	bl	8006038 <HAL_GetTick>
 80075e2:	1b80      	subs	r0, r0, r6
 80075e4:	4285      	cmp	r5, r0
 80075e6:	d3f6      	bcc.n	80075d6 <I2C_WaitOnTXISFlagUntilTimeout+0x82>
 80075e8:	2d00      	cmp	r5, #0
 80075ea:	d0f4      	beq.n	80075d6 <I2C_WaitOnTXISFlagUntilTimeout+0x82>
 80075ec:	6823      	ldr	r3, [r4, #0]
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80075ee:	6999      	ldr	r1, [r3, #24]
 80075f0:	068a      	lsls	r2, r1, #26
 80075f2:	d5f4      	bpl.n	80075de <I2C_WaitOnTXISFlagUntilTimeout+0x8a>
 80075f4:	e7be      	b.n	8007574 <I2C_WaitOnTXISFlagUntilTimeout+0x20>
 80075f6:	bf00      	nop
 80075f8:	fe00e800 	.word	0xfe00e800

080075fc <I2C_ITListenCplt>:
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80075fc:	4b18      	ldr	r3, [pc, #96]	; (8007660 <I2C_ITListenCplt+0x64>)
 80075fe:	62c3      	str	r3, [r0, #44]	; 0x2c
  hi2c->State = HAL_I2C_STATE_READY;
 8007600:	2220      	movs	r2, #32
  hi2c->PreviousState = I2C_STATE_NONE;
 8007602:	2300      	movs	r3, #0
 8007604:	6303      	str	r3, [r0, #48]	; 0x30
  hi2c->XferISR = NULL;
 8007606:	6343      	str	r3, [r0, #52]	; 0x34
  hi2c->State = HAL_I2C_STATE_READY;
 8007608:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800760c:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8007610:	074b      	lsls	r3, r1, #29
{
 8007612:	b430      	push	{r4, r5}
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8007614:	d512      	bpl.n	800763c <I2C_ITListenCplt+0x40>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007616:	6802      	ldr	r2, [r0, #0]
 8007618:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800761a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800761c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800761e:	6a43      	ldr	r3, [r0, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 8007620:	8d02      	ldrh	r2, [r0, #40]	; 0x28
    hi2c->pBuffPtr++;
 8007622:	3301      	adds	r3, #1
 8007624:	6243      	str	r3, [r0, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 8007626:	b14a      	cbz	r2, 800763c <I2C_ITListenCplt+0x40>
      hi2c->XferCount--;
 8007628:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 800762a:	3b01      	subs	r3, #1
 800762c:	b29b      	uxth	r3, r3
 800762e:	8543      	strh	r3, [r0, #42]	; 0x2a
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007630:	6c43      	ldr	r3, [r0, #68]	; 0x44
      hi2c->XferSize--;
 8007632:	3a01      	subs	r2, #1
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007634:	f043 0304 	orr.w	r3, r3, #4
      hi2c->XferSize--;
 8007638:	8502      	strh	r2, [r0, #40]	; 0x28
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800763a:	6443      	str	r3, [r0, #68]	; 0x44
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800763c:	6803      	ldr	r3, [r0, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800763e:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8007642:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8007646:	681a      	ldr	r2, [r3, #0]
  hi2c->ListenCpltCallback(hi2c);
 8007648:	6dc1      	ldr	r1, [r0, #92]	; 0x5c
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800764a:	2510      	movs	r5, #16
  __HAL_UNLOCK(hi2c);
 800764c:	2400      	movs	r4, #0
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800764e:	f022 02fe 	bic.w	r2, r2, #254	; 0xfe
 8007652:	601a      	str	r2, [r3, #0]
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007654:	61dd      	str	r5, [r3, #28]
  __HAL_UNLOCK(hi2c);
 8007656:	f880 4040 	strb.w	r4, [r0, #64]	; 0x40
}
 800765a:	bc30      	pop	{r4, r5}
  hi2c->ListenCpltCallback(hi2c);
 800765c:	4708      	bx	r1
 800765e:	bf00      	nop
 8007660:	ffff0000 	.word	0xffff0000

08007664 <I2C_ITAddrCplt.isra.0.part.0>:
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
 8007664:	b4f0      	push	{r4, r5, r6, r7}
    transferdirection = I2C_GET_DIR(hi2c);
 8007666:	6805      	ldr	r5, [r0, #0]
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007668:	68c3      	ldr	r3, [r0, #12]
    transferdirection = I2C_GET_DIR(hi2c);
 800766a:	69a9      	ldr	r1, [r5, #24]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800766c:	69aa      	ldr	r2, [r5, #24]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800766e:	68ae      	ldr	r6, [r5, #8]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8007670:	68ef      	ldr	r7, [r5, #12]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8007672:	0c12      	lsrs	r2, r2, #16
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007674:	2b02      	cmp	r3, #2
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
 8007676:	4604      	mov	r4, r0
    transferdirection = I2C_GET_DIR(hi2c);
 8007678:	f3c1 4100 	ubfx	r1, r1, #16, #1
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800767c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007680:	d10e      	bne.n	80076a0 <I2C_ITAddrCplt.isra.0.part.0+0x3c>
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 8007682:	ea82 13d6 	eor.w	r3, r2, r6, lsr #7
 8007686:	f013 0306 	ands.w	r3, r3, #6
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800768a:	f3c6 0209 	ubfx	r2, r6, #0, #10
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 800768e:	d112      	bne.n	80076b6 <I2C_ITAddrCplt.isra.0.part.0+0x52>
        hi2c->AddrEventCount++;
 8007690:	6c86      	ldr	r6, [r0, #72]	; 0x48
 8007692:	3601      	adds	r6, #1
 8007694:	6486      	str	r6, [r0, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8007696:	6c86      	ldr	r6, [r0, #72]	; 0x48
 8007698:	2e02      	cmp	r6, #2
 800769a:	d013      	beq.n	80076c4 <I2C_ITAddrCplt.isra.0.part.0+0x60>
}
 800769c:	bcf0      	pop	{r4, r5, r6, r7}
 800769e:	4770      	bx	lr
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80076a0:	682b      	ldr	r3, [r5, #0]
      hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80076a2:	6f06      	ldr	r6, [r0, #112]	; 0x70
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80076a4:	f023 03b8 	bic.w	r3, r3, #184	; 0xb8
 80076a8:	602b      	str	r3, [r5, #0]
      __HAL_UNLOCK(hi2c);
 80076aa:	2300      	movs	r3, #0
 80076ac:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80076b0:	4633      	mov	r3, r6
}
 80076b2:	bcf0      	pop	{r4, r5, r6, r7}
      hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80076b4:	4718      	bx	r3
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80076b6:	682b      	ldr	r3, [r5, #0]
        hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80076b8:	6f06      	ldr	r6, [r0, #112]	; 0x70
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80076ba:	f023 03b8 	bic.w	r3, r3, #184	; 0xb8
        hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80076be:	f007 02fe 	and.w	r2, r7, #254	; 0xfe
 80076c2:	e7f1      	b.n	80076a8 <I2C_ITAddrCplt.isra.0.part.0+0x44>
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80076c4:	2608      	movs	r6, #8
          hi2c->AddrEventCount = 0U;
 80076c6:	6483      	str	r3, [r0, #72]	; 0x48
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80076c8:	61ee      	str	r6, [r5, #28]
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80076ca:	6f05      	ldr	r5, [r0, #112]	; 0x70
          __HAL_UNLOCK(hi2c);
 80076cc:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80076d0:	462b      	mov	r3, r5
}
 80076d2:	bcf0      	pop	{r4, r5, r6, r7}
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80076d4:	4718      	bx	r3
 80076d6:	bf00      	nop

080076d8 <I2C_ITMasterSeqCplt>:
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80076d8:	2100      	movs	r1, #0
 80076da:	f880 1042 	strb.w	r1, [r0, #66]	; 0x42
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80076de:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 80076e2:	2a21      	cmp	r2, #33	; 0x21
{
 80076e4:	b470      	push	{r4, r5, r6}
 80076e6:	4603      	mov	r3, r0
    hi2c->State         = HAL_I2C_STATE_READY;
 80076e8:	f04f 0420 	mov.w	r4, #32
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80076ec:	d018      	beq.n	8007720 <I2C_ITMasterSeqCplt+0x48>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80076ee:	2212      	movs	r2, #18
    hi2c->State         = HAL_I2C_STATE_READY;
 80076f0:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80076f4:	6302      	str	r2, [r0, #48]	; 0x30
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80076f6:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80076fa:	6804      	ldr	r4, [r0, #0]
    hi2c->MasterRxCpltCallback(hi2c);
 80076fc:	6d05      	ldr	r5, [r0, #80]	; 0x50
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80076fe:	6826      	ldr	r6, [r4, #0]
    hi2c->XferISR       = NULL;
 8007700:	6341      	str	r1, [r0, #52]	; 0x34
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8007702:	f002 0228 	and.w	r2, r2, #40	; 0x28
 8007706:	2a28      	cmp	r2, #40	; 0x28
 8007708:	bf0c      	ite	eq
 800770a:	f06f 0244 	mvneq.w	r2, #68	; 0x44
 800770e:	f06f 02f4 	mvnne.w	r2, #244	; 0xf4
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8007712:	4032      	ands	r2, r6
 8007714:	6022      	str	r2, [r4, #0]
    __HAL_UNLOCK(hi2c);
 8007716:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
    hi2c->MasterRxCpltCallback(hi2c);
 800771a:	462b      	mov	r3, r5
}
 800771c:	bc70      	pop	{r4, r5, r6}
    hi2c->MasterRxCpltCallback(hi2c);
 800771e:	4718      	bx	r3
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8007720:	2211      	movs	r2, #17
    hi2c->State         = HAL_I2C_STATE_READY;
 8007722:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8007726:	6302      	str	r2, [r0, #48]	; 0x30
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8007728:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800772c:	6804      	ldr	r4, [r0, #0]
    hi2c->MasterTxCpltCallback(hi2c);
 800772e:	6cc5      	ldr	r5, [r0, #76]	; 0x4c
    hi2c->XferISR       = NULL;
 8007730:	6341      	str	r1, [r0, #52]	; 0x34
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8007732:	f002 0228 	and.w	r2, r2, #40	; 0x28
 8007736:	2a28      	cmp	r2, #40	; 0x28
 8007738:	bf08      	it	eq
 800773a:	f06f 0642 	mvneq.w	r6, #66	; 0x42
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800773e:	6822      	ldr	r2, [r4, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8007740:	bf18      	it	ne
 8007742:	f06f 06f2 	mvnne.w	r6, #242	; 0xf2
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8007746:	e7e4      	b.n	8007712 <I2C_ITMasterSeqCplt+0x3a>

08007748 <I2C_Master_ISR_DMA>:
{
 8007748:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hi2c);
 800774a:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800774e:	2b01      	cmp	r3, #1
 8007750:	d07c      	beq.n	800784c <I2C_Master_ISR_DMA+0x104>
 8007752:	2301      	movs	r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8007754:	06cd      	lsls	r5, r1, #27
 8007756:	4604      	mov	r4, r0
  __HAL_LOCK(hi2c);
 8007758:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800775c:	d524      	bpl.n	80077a8 <I2C_Master_ISR_DMA+0x60>
 800775e:	06d0      	lsls	r0, r2, #27
 8007760:	d522      	bpl.n	80077a8 <I2C_Master_ISR_DMA+0x60>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007762:	6823      	ldr	r3, [r4, #0]
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8007764:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8007766:	4847      	ldr	r0, [pc, #284]	; (8007884 <I2C_Master_ISR_DMA+0x13c>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007768:	2110      	movs	r1, #16
 800776a:	61d9      	str	r1, [r3, #28]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800776c:	6c61      	ldr	r1, [r4, #68]	; 0x44
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 800776e:	4282      	cmp	r2, r0
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007770:	f041 0104 	orr.w	r1, r1, #4
 8007774:	6461      	str	r1, [r4, #68]	; 0x44
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8007776:	d067      	beq.n	8007848 <I2C_Master_ISR_DMA+0x100>
 8007778:	4943      	ldr	r1, [pc, #268]	; (8007888 <I2C_Master_ISR_DMA+0x140>)
      tmpisr |= I2C_IT_STOPI;
 800777a:	428a      	cmp	r2, r1
 800777c:	bf0c      	ite	eq
 800777e:	2260      	moveq	r2, #96	; 0x60
 8007780:	22f4      	movne	r2, #244	; 0xf4
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8007782:	6819      	ldr	r1, [r3, #0]
 8007784:	430a      	orrs	r2, r1
 8007786:	601a      	str	r2, [r3, #0]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8007788:	699a      	ldr	r2, [r3, #24]
 800778a:	0791      	lsls	r1, r2, #30
    hi2c->Instance->TXDR = 0x00U;
 800778c:	bf44      	itt	mi
 800778e:	2200      	movmi	r2, #0
 8007790:	629a      	strmi	r2, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007792:	699a      	ldr	r2, [r3, #24]
 8007794:	07d2      	lsls	r2, r2, #31
 8007796:	d403      	bmi.n	80077a0 <I2C_Master_ISR_DMA+0x58>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8007798:	699a      	ldr	r2, [r3, #24]
 800779a:	f042 0201 	orr.w	r2, r2, #1
 800779e:	619a      	str	r2, [r3, #24]
  __HAL_UNLOCK(hi2c);
 80077a0:	2000      	movs	r0, #0
 80077a2:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
}
 80077a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80077a8:	060b      	lsls	r3, r1, #24
 80077aa:	d531      	bpl.n	8007810 <I2C_Master_ISR_DMA+0xc8>
 80077ac:	0657      	lsls	r7, r2, #25
 80077ae:	d543      	bpl.n	8007838 <I2C_Master_ISR_DMA+0xf0>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 80077b0:	6823      	ldr	r3, [r4, #0]
 80077b2:	681a      	ldr	r2, [r3, #0]
 80077b4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80077b8:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80077ba:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80077bc:	b292      	uxth	r2, r2
 80077be:	2a00      	cmp	r2, #0
 80077c0:	d046      	beq.n	8007850 <I2C_Master_ISR_DMA+0x108>
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 80077c2:	6858      	ldr	r0, [r3, #4]
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80077c4:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
 80077c6:	b289      	uxth	r1, r1
 80077c8:	29ff      	cmp	r1, #255	; 0xff
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 80077ca:	f3c0 0009 	ubfx	r0, r0, #0, #10
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80077ce:	d84b      	bhi.n	8007868 <I2C_Master_ISR_DMA+0x120>
        hi2c->XferSize = hi2c->XferCount;
 80077d0:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80077d2:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
        hi2c->XferSize = hi2c->XferCount;
 80077d4:	b291      	uxth	r1, r2
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80077d6:	f515 3f80 	cmn.w	r5, #65536	; 0x10000
        hi2c->XferSize = hi2c->XferCount;
 80077da:	8521      	strh	r1, [r4, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80077dc:	d04c      	beq.n	8007878 <I2C_Master_ISR_DMA+0x130>
          xfermode = hi2c->XferOptions;
 80077de:	b2cd      	uxtb	r5, r1
 80077e0:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80077e2:	042d      	lsls	r5, r5, #16
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 80077e4:	685a      	ldr	r2, [r3, #4]
 80077e6:	4e29      	ldr	r6, [pc, #164]	; (800788c <I2C_Master_ISR_DMA+0x144>)
 80077e8:	4032      	ands	r2, r6
 80077ea:	4302      	orrs	r2, r0
 80077ec:	433a      	orrs	r2, r7
 80077ee:	432a      	orrs	r2, r5
 80077f0:	605a      	str	r2, [r3, #4]
      hi2c->XferCount -= hi2c->XferSize;
 80077f2:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80077f4:	1a52      	subs	r2, r2, r1
 80077f6:	b292      	uxth	r2, r2
 80077f8:	8562      	strh	r2, [r4, #42]	; 0x2a
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80077fa:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 80077fe:	2a22      	cmp	r2, #34	; 0x22
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8007800:	681a      	ldr	r2, [r3, #0]
 8007802:	bf0c      	ite	eq
 8007804:	f442 4200 	orreq.w	r2, r2, #32768	; 0x8000
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8007808:	f442 4280 	orrne.w	r2, r2, #16384	; 0x4000
 800780c:	601a      	str	r2, [r3, #0]
 800780e:	e7c7      	b.n	80077a0 <I2C_Master_ISR_DMA+0x58>
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8007810:	064d      	lsls	r5, r1, #25
 8007812:	d511      	bpl.n	8007838 <I2C_Master_ISR_DMA+0xf0>
 8007814:	0650      	lsls	r0, r2, #25
 8007816:	d50f      	bpl.n	8007838 <I2C_Master_ISR_DMA+0xf0>
    if (hi2c->XferCount == 0U)
 8007818:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800781a:	b29b      	uxth	r3, r3
 800781c:	b9fb      	cbnz	r3, 800785e <I2C_Master_ISR_DMA+0x116>
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800781e:	6823      	ldr	r3, [r4, #0]
 8007820:	685a      	ldr	r2, [r3, #4]
 8007822:	0191      	lsls	r1, r2, #6
 8007824:	d4bc      	bmi.n	80077a0 <I2C_Master_ISR_DMA+0x58>
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8007826:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8007828:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 800782c:	d113      	bne.n	8007856 <I2C_Master_ISR_DMA+0x10e>
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800782e:	685a      	ldr	r2, [r3, #4]
 8007830:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007834:	605a      	str	r2, [r3, #4]
 8007836:	e7b3      	b.n	80077a0 <I2C_Master_ISR_DMA+0x58>
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8007838:	068b      	lsls	r3, r1, #26
 800783a:	d5b1      	bpl.n	80077a0 <I2C_Master_ISR_DMA+0x58>
 800783c:	0692      	lsls	r2, r2, #26
 800783e:	d5af      	bpl.n	80077a0 <I2C_Master_ISR_DMA+0x58>
    I2C_ITMasterCplt(hi2c, ITFlags);
 8007840:	4620      	mov	r0, r4
 8007842:	f7ff fe17 	bl	8007474 <I2C_ITMasterCplt>
 8007846:	e7ab      	b.n	80077a0 <I2C_Master_ISR_DMA+0x58>
      tmpisr |= I2C_IT_TCI;
 8007848:	2260      	movs	r2, #96	; 0x60
 800784a:	e79a      	b.n	8007782 <I2C_Master_ISR_DMA+0x3a>
  __HAL_LOCK(hi2c);
 800784c:	2002      	movs	r0, #2
}
 800784e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8007850:	685b      	ldr	r3, [r3, #4]
 8007852:	019e      	lsls	r6, r3, #6
 8007854:	d403      	bmi.n	800785e <I2C_Master_ISR_DMA+0x116>
        I2C_ITMasterSeqCplt(hi2c);
 8007856:	4620      	mov	r0, r4
 8007858:	f7ff ff3e 	bl	80076d8 <I2C_ITMasterSeqCplt>
 800785c:	e7a0      	b.n	80077a0 <I2C_Master_ISR_DMA+0x58>
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800785e:	2140      	movs	r1, #64	; 0x40
 8007860:	4620      	mov	r0, r4
 8007862:	f7ff fcd9 	bl	8007218 <I2C_ITError>
 8007866:	e79b      	b.n	80077a0 <I2C_Master_ISR_DMA+0x58>
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8007868:	22ff      	movs	r2, #255	; 0xff
 800786a:	8522      	strh	r2, [r4, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 800786c:	4611      	mov	r1, r2
 800786e:	f44f 057f 	mov.w	r5, #16711680	; 0xff0000
 8007872:	f04f 7780 	mov.w	r7, #16777216	; 0x1000000
 8007876:	e7b5      	b.n	80077e4 <I2C_Master_ISR_DMA+0x9c>
 8007878:	b2ca      	uxtb	r2, r1
 800787a:	0415      	lsls	r5, r2, #16
          xfermode = I2C_AUTOEND_MODE;
 800787c:	f04f 7700 	mov.w	r7, #33554432	; 0x2000000
 8007880:	e7b0      	b.n	80077e4 <I2C_Master_ISR_DMA+0x9c>
 8007882:	bf00      	nop
 8007884:	08007749 	.word	0x08007749
 8007888:	08007b71 	.word	0x08007b71
 800788c:	fc009c00 	.word	0xfc009c00

08007890 <I2C_ITSlaveSeqCplt>:
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007890:	2100      	movs	r1, #0
 8007892:	f880 1042 	strb.w	r1, [r0, #66]	; 0x42
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8007896:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 800789a:	2a29      	cmp	r2, #41	; 0x29
{
 800789c:	b4f0      	push	{r4, r5, r6, r7}
 800789e:	4603      	mov	r3, r0
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80078a0:	d005      	beq.n	80078ae <I2C_ITSlaveSeqCplt+0x1e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80078a2:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 80078a6:	2a2a      	cmp	r2, #42	; 0x2a
 80078a8:	d01a      	beq.n	80078e0 <I2C_ITSlaveSeqCplt+0x50>
}
 80078aa:	bcf0      	pop	{r4, r5, r6, r7}
 80078ac:	4770      	bx	lr
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80078ae:	2428      	movs	r4, #40	; 0x28
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80078b0:	2221      	movs	r2, #33	; 0x21
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80078b2:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80078b6:	6302      	str	r2, [r0, #48]	; 0x30
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80078b8:	f890 4041 	ldrb.w	r4, [r0, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80078bc:	6805      	ldr	r5, [r0, #0]
    hi2c->SlaveTxCpltCallback(hi2c);
 80078be:	6d46      	ldr	r6, [r0, #84]	; 0x54
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80078c0:	682a      	ldr	r2, [r5, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80078c2:	f004 0428 	and.w	r4, r4, #40	; 0x28
 80078c6:	2c28      	cmp	r4, #40	; 0x28
 80078c8:	bf0c      	ite	eq
 80078ca:	f06f 0442 	mvneq.w	r4, #66	; 0x42
 80078ce:	f06f 04f2 	mvnne.w	r4, #242	; 0xf2
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80078d2:	4022      	ands	r2, r4
 80078d4:	602a      	str	r2, [r5, #0]
    __HAL_UNLOCK(hi2c);
 80078d6:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
    hi2c->SlaveRxCpltCallback(hi2c);
 80078da:	4633      	mov	r3, r6
}
 80078dc:	bcf0      	pop	{r4, r5, r6, r7}
    hi2c->SlaveRxCpltCallback(hi2c);
 80078de:	4718      	bx	r3
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80078e0:	2222      	movs	r2, #34	; 0x22
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80078e2:	2428      	movs	r4, #40	; 0x28
 80078e4:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80078e8:	6302      	str	r2, [r0, #48]	; 0x30
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80078ea:	f890 4041 	ldrb.w	r4, [r0, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80078ee:	6805      	ldr	r5, [r0, #0]
    hi2c->SlaveRxCpltCallback(hi2c);
 80078f0:	6d86      	ldr	r6, [r0, #88]	; 0x58
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80078f2:	682f      	ldr	r7, [r5, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80078f4:	f004 0428 	and.w	r4, r4, #40	; 0x28
 80078f8:	2c28      	cmp	r4, #40	; 0x28
 80078fa:	bf0c      	ite	eq
 80078fc:	f06f 0244 	mvneq.w	r2, #68	; 0x44
 8007900:	f06f 02f4 	mvnne.w	r2, #244	; 0xf4
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8007904:	403a      	ands	r2, r7
 8007906:	602a      	str	r2, [r5, #0]
    __HAL_UNLOCK(hi2c);
 8007908:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
    hi2c->SlaveRxCpltCallback(hi2c);
 800790c:	4633      	mov	r3, r6
}
 800790e:	bcf0      	pop	{r4, r5, r6, r7}
    hi2c->SlaveRxCpltCallback(hi2c);
 8007910:	4718      	bx	r3
 8007912:	bf00      	nop

08007914 <I2C_ITSlaveCplt>:
{
 8007914:	b570      	push	{r4, r5, r6, lr}
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8007916:	6803      	ldr	r3, [r0, #0]
  I2C_RESET_CR2(hi2c);
 8007918:	4d42      	ldr	r5, [pc, #264]	; (8007a24 <I2C_ITSlaveCplt+0x110>)
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800791a:	681e      	ldr	r6, [r3, #0]
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800791c:	2220      	movs	r2, #32
 800791e:	61da      	str	r2, [r3, #28]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8007920:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8007924:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
{
 8007928:	4604      	mov	r4, r0
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800792a:	6818      	ldr	r0, [r3, #0]
 800792c:	f020 00fe 	bic.w	r0, r0, #254	; 0xfe
 8007930:	6018      	str	r0, [r3, #0]
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8007932:	6858      	ldr	r0, [r3, #4]
 8007934:	f440 4000 	orr.w	r0, r0, #32768	; 0x8000
 8007938:	6058      	str	r0, [r3, #4]
  I2C_RESET_CR2(hi2c);
 800793a:	685a      	ldr	r2, [r3, #4]
 800793c:	402a      	ands	r2, r5
 800793e:	605a      	str	r2, [r3, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8007940:	699a      	ldr	r2, [r3, #24]
{
 8007942:	460d      	mov	r5, r1
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8007944:	0791      	lsls	r1, r2, #30
    hi2c->Instance->TXDR = 0x00U;
 8007946:	bf44      	itt	mi
 8007948:	2200      	movmi	r2, #0
 800794a:	629a      	strmi	r2, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800794c:	699a      	ldr	r2, [r3, #24]
 800794e:	07d2      	lsls	r2, r2, #31
 8007950:	d403      	bmi.n	800795a <I2C_ITSlaveCplt+0x46>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8007952:	699a      	ldr	r2, [r3, #24]
 8007954:	f042 0201 	orr.w	r2, r2, #1
 8007958:	619a      	str	r2, [r3, #24]
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800795a:	0470      	lsls	r0, r6, #17
 800795c:	d547      	bpl.n	80079ee <I2C_ITSlaveCplt+0xda>
    if (hi2c->hdmatx != NULL)
 800795e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8007960:	b11a      	cbz	r2, 800796a <I2C_ITSlaveCplt+0x56>
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 8007962:	6812      	ldr	r2, [r2, #0]
 8007964:	6852      	ldr	r2, [r2, #4]
 8007966:	b292      	uxth	r2, r2
 8007968:	8562      	strh	r2, [r4, #42]	; 0x2a
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800796a:	076a      	lsls	r2, r5, #29
 800796c:	d509      	bpl.n	8007982 <I2C_ITSlaveCplt+0x6e>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800796e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8007970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007972:	7013      	strb	r3, [r2, #0]
    hi2c->pBuffPtr++;
 8007974:	6a63      	ldr	r3, [r4, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 8007976:	8d22      	ldrh	r2, [r4, #40]	; 0x28
    hi2c->pBuffPtr++;
 8007978:	3301      	adds	r3, #1
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800797a:	f025 0504 	bic.w	r5, r5, #4
    hi2c->pBuffPtr++;
 800797e:	6263      	str	r3, [r4, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 8007980:	bb72      	cbnz	r2, 80079e0 <I2C_ITSlaveCplt+0xcc>
  if (hi2c->XferCount != 0U)
 8007982:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8007984:	b29b      	uxth	r3, r3
 8007986:	b11b      	cbz	r3, 8007990 <I2C_ITSlaveCplt+0x7c>
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007988:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800798a:	f043 0304 	orr.w	r3, r3, #4
 800798e:	6463      	str	r3, [r4, #68]	; 0x44
  hi2c->PreviousState = I2C_STATE_NONE;
 8007990:	2300      	movs	r3, #0
 8007992:	6323      	str	r3, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007994:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8007998:	6c66      	ldr	r6, [r4, #68]	; 0x44
  hi2c->XferISR = NULL;
 800799a:	6363      	str	r3, [r4, #52]	; 0x34
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800799c:	bb6e      	cbnz	r6, 80079fa <I2C_ITSlaveCplt+0xe6>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800799e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80079a0:	4d21      	ldr	r5, [pc, #132]	; (8007a28 <I2C_ITSlaveCplt+0x114>)
 80079a2:	42ab      	cmp	r3, r5
 80079a4:	d10e      	bne.n	80079c4 <I2C_ITSlaveCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80079a6:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80079aa:	f884 6040 	strb.w	r6, [r4, #64]	; 0x40
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80079ae:	2b22      	cmp	r3, #34	; 0x22
    hi2c->State = HAL_I2C_STATE_READY;
 80079b0:	f04f 0320 	mov.w	r3, #32
 80079b4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80079b8:	d028      	beq.n	8007a0c <I2C_ITSlaveCplt+0xf8>
    hi2c->SlaveTxCpltCallback(hi2c);
 80079ba:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80079bc:	4620      	mov	r0, r4
}
 80079be:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    hi2c->SlaveTxCpltCallback(hi2c);
 80079c2:	4718      	bx	r3
    I2C_ITSlaveSeqCplt(hi2c);
 80079c4:	4620      	mov	r0, r4
 80079c6:	f7ff ff63 	bl	8007890 <I2C_ITSlaveSeqCplt>
    hi2c->State = HAL_I2C_STATE_READY;
 80079ca:	2320      	movs	r3, #32
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80079cc:	62e5      	str	r5, [r4, #44]	; 0x2c
    __HAL_UNLOCK(hi2c);
 80079ce:	f884 6040 	strb.w	r6, [r4, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 80079d2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->ListenCpltCallback(hi2c);
 80079d6:	4620      	mov	r0, r4
 80079d8:	6de3      	ldr	r3, [r4, #92]	; 0x5c
}
 80079da:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    hi2c->ListenCpltCallback(hi2c);
 80079de:	4718      	bx	r3
      hi2c->XferCount--;
 80079e0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80079e2:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 80079e4:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 80079e6:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 80079e8:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 80079ea:	8563      	strh	r3, [r4, #42]	; 0x2a
 80079ec:	e7c9      	b.n	8007982 <I2C_ITSlaveCplt+0x6e>
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80079ee:	0431      	lsls	r1, r6, #16
 80079f0:	d5bb      	bpl.n	800796a <I2C_ITSlaveCplt+0x56>
    if (hi2c->hdmarx != NULL)
 80079f2:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80079f4:	2a00      	cmp	r2, #0
 80079f6:	d1b4      	bne.n	8007962 <I2C_ITSlaveCplt+0x4e>
 80079f8:	e7b7      	b.n	800796a <I2C_ITSlaveCplt+0x56>
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80079fa:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80079fc:	4620      	mov	r0, r4
 80079fe:	f7ff fc0b 	bl	8007218 <I2C_ITError>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8007a02:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8007a06:	2b28      	cmp	r3, #40	; 0x28
 8007a08:	d005      	beq.n	8007a16 <I2C_ITSlaveCplt+0x102>
}
 8007a0a:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->SlaveRxCpltCallback(hi2c);
 8007a0c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007a0e:	4620      	mov	r0, r4
}
 8007a10:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    hi2c->SlaveRxCpltCallback(hi2c);
 8007a14:	4718      	bx	r3
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8007a16:	4629      	mov	r1, r5
 8007a18:	4620      	mov	r0, r4
}
 8007a1a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8007a1e:	f7ff bded 	b.w	80075fc <I2C_ITListenCplt>
 8007a22:	bf00      	nop
 8007a24:	fe00e800 	.word	0xfe00e800
 8007a28:	ffff0000 	.word	0xffff0000

08007a2c <I2C_Slave_ISR_IT>:
{
 8007a2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hi2c);
 8007a2e:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
  uint32_t tmpoptions = hi2c->XferOptions;
 8007a32:	6ac6      	ldr	r6, [r0, #44]	; 0x2c
  __HAL_LOCK(hi2c);
 8007a34:	2b01      	cmp	r3, #1
 8007a36:	d078      	beq.n	8007b2a <I2C_Slave_ISR_IT+0xfe>
 8007a38:	4617      	mov	r7, r2
 8007a3a:	2301      	movs	r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8007a3c:	068a      	lsls	r2, r1, #26
 8007a3e:	4604      	mov	r4, r0
 8007a40:	460d      	mov	r5, r1
  __HAL_LOCK(hi2c);
 8007a42:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8007a46:	d501      	bpl.n	8007a4c <I2C_Slave_ISR_IT+0x20>
 8007a48:	06bb      	lsls	r3, r7, #26
 8007a4a:	d45a      	bmi.n	8007b02 <I2C_Slave_ISR_IT+0xd6>
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8007a4c:	06ea      	lsls	r2, r5, #27
 8007a4e:	d515      	bpl.n	8007a7c <I2C_Slave_ISR_IT+0x50>
 8007a50:	06fb      	lsls	r3, r7, #27
 8007a52:	d513      	bpl.n	8007a7c <I2C_Slave_ISR_IT+0x50>
    if (hi2c->XferCount == 0U)
 8007a54:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8007a56:	b29b      	uxth	r3, r3
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d157      	bne.n	8007b0c <I2C_Slave_ISR_IT+0xe0>
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME)) /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
 8007a5c:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8007a60:	2b28      	cmp	r3, #40	; 0x28
 8007a62:	d07c      	beq.n	8007b5e <I2C_Slave_ISR_IT+0x132>
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8007a64:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8007a68:	2b29      	cmp	r3, #41	; 0x29
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007a6a:	6823      	ldr	r3, [r4, #0]
 8007a6c:	f04f 0210 	mov.w	r2, #16
 8007a70:	61da      	str	r2, [r3, #28]
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8007a72:	d060      	beq.n	8007b36 <I2C_Slave_ISR_IT+0x10a>
  __HAL_UNLOCK(hi2c);
 8007a74:	2000      	movs	r0, #0
 8007a76:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
}
 8007a7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8007a7c:	076a      	lsls	r2, r5, #29
 8007a7e:	d40d      	bmi.n	8007a9c <I2C_Slave_ISR_IT+0x70>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8007a80:	0728      	lsls	r0, r5, #28
 8007a82:	d529      	bpl.n	8007ad8 <I2C_Slave_ISR_IT+0xac>
 8007a84:	0739      	lsls	r1, r7, #28
 8007a86:	d527      	bpl.n	8007ad8 <I2C_Slave_ISR_IT+0xac>
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8007a88:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8007a8c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007a90:	2b28      	cmp	r3, #40	; 0x28
 8007a92:	d060      	beq.n	8007b56 <I2C_Slave_ISR_IT+0x12a>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8007a94:	6823      	ldr	r3, [r4, #0]
 8007a96:	2208      	movs	r2, #8
 8007a98:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8007a9a:	e7eb      	b.n	8007a74 <I2C_Slave_ISR_IT+0x48>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8007a9c:	077b      	lsls	r3, r7, #29
 8007a9e:	d5ef      	bpl.n	8007a80 <I2C_Slave_ISR_IT+0x54>
    if (hi2c->XferCount > 0U)
 8007aa0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8007aa2:	b29b      	uxth	r3, r3
 8007aa4:	b16b      	cbz	r3, 8007ac2 <I2C_Slave_ISR_IT+0x96>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007aa6:	6822      	ldr	r2, [r4, #0]
 8007aa8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007aaa:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007aac:	701a      	strb	r2, [r3, #0]
      hi2c->XferCount--;
 8007aae:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->pBuffPtr++;
 8007ab0:	6a61      	ldr	r1, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8007ab2:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8007ab4:	3b01      	subs	r3, #1
 8007ab6:	b29b      	uxth	r3, r3
      hi2c->pBuffPtr++;
 8007ab8:	3101      	adds	r1, #1
      hi2c->XferSize--;
 8007aba:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 8007abc:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->pBuffPtr++;
 8007abe:	6261      	str	r1, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8007ac0:	8522      	strh	r2, [r4, #40]	; 0x28
    if ((hi2c->XferCount == 0U) && \
 8007ac2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8007ac4:	b29b      	uxth	r3, r3
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d1d4      	bne.n	8007a74 <I2C_Slave_ISR_IT+0x48>
 8007aca:	f516 3f80 	cmn.w	r6, #65536	; 0x10000
 8007ace:	d0d1      	beq.n	8007a74 <I2C_Slave_ISR_IT+0x48>
        I2C_ITSlaveSeqCplt(hi2c);
 8007ad0:	4620      	mov	r0, r4
 8007ad2:	f7ff fedd 	bl	8007890 <I2C_ITSlaveSeqCplt>
 8007ad6:	e7cd      	b.n	8007a74 <I2C_Slave_ISR_IT+0x48>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8007ad8:	07aa      	lsls	r2, r5, #30
 8007ada:	d5cb      	bpl.n	8007a74 <I2C_Slave_ISR_IT+0x48>
 8007adc:	07bb      	lsls	r3, r7, #30
 8007ade:	d5c9      	bpl.n	8007a74 <I2C_Slave_ISR_IT+0x48>
    if (hi2c->XferCount > 0U)
 8007ae0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8007ae2:	b29b      	uxth	r3, r3
 8007ae4:	b31b      	cbz	r3, 8007b2e <I2C_Slave_ISR_IT+0x102>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007ae6:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8007ae8:	6823      	ldr	r3, [r4, #0]
 8007aea:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007aee:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8007af0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8007af2:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->pBuffPtr++;
 8007af4:	6261      	str	r1, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8007af6:	3b01      	subs	r3, #1
 8007af8:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 8007afa:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 8007afc:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8007afe:	8522      	strh	r2, [r4, #40]	; 0x28
 8007b00:	e7b8      	b.n	8007a74 <I2C_Slave_ISR_IT+0x48>
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8007b02:	f7ff ff07 	bl	8007914 <I2C_ITSlaveCplt>
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8007b06:	06ea      	lsls	r2, r5, #27
 8007b08:	d5b8      	bpl.n	8007a7c <I2C_Slave_ISR_IT+0x50>
 8007b0a:	e7a1      	b.n	8007a50 <I2C_Slave_ISR_IT+0x24>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007b0c:	6823      	ldr	r3, [r4, #0]
 8007b0e:	2210      	movs	r2, #16
 8007b10:	61da      	str	r2, [r3, #28]
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007b12:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8007b14:	f043 0304 	orr.w	r3, r3, #4
 8007b18:	6463      	str	r3, [r4, #68]	; 0x44
      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8007b1a:	f036 7380 	bics.w	r3, r6, #16777216	; 0x1000000
 8007b1e:	d1a9      	bne.n	8007a74 <I2C_Slave_ISR_IT+0x48>
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8007b20:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8007b22:	4620      	mov	r0, r4
 8007b24:	f7ff fb78 	bl	8007218 <I2C_ITError>
 8007b28:	e7a4      	b.n	8007a74 <I2C_Slave_ISR_IT+0x48>
  __HAL_LOCK(hi2c);
 8007b2a:	2002      	movs	r0, #2
}
 8007b2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8007b2e:	f036 7380 	bics.w	r3, r6, #16777216	; 0x1000000
 8007b32:	d0cd      	beq.n	8007ad0 <I2C_Slave_ISR_IT+0xa4>
 8007b34:	e79e      	b.n	8007a74 <I2C_Slave_ISR_IT+0x48>
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8007b36:	f516 3f80 	cmn.w	r6, #65536	; 0x10000
 8007b3a:	d09b      	beq.n	8007a74 <I2C_Slave_ISR_IT+0x48>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8007b3c:	699a      	ldr	r2, [r3, #24]
 8007b3e:	0790      	lsls	r0, r2, #30
    hi2c->Instance->TXDR = 0x00U;
 8007b40:	bf44      	itt	mi
 8007b42:	2200      	movmi	r2, #0
 8007b44:	629a      	strmi	r2, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007b46:	699a      	ldr	r2, [r3, #24]
 8007b48:	07d1      	lsls	r1, r2, #31
 8007b4a:	d4c1      	bmi.n	8007ad0 <I2C_Slave_ISR_IT+0xa4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8007b4c:	699a      	ldr	r2, [r3, #24]
 8007b4e:	f042 0201 	orr.w	r2, r2, #1
 8007b52:	619a      	str	r2, [r3, #24]
 8007b54:	e7bc      	b.n	8007ad0 <I2C_Slave_ISR_IT+0xa4>
 8007b56:	4620      	mov	r0, r4
 8007b58:	f7ff fd84 	bl	8007664 <I2C_ITAddrCplt.isra.0.part.0>
 8007b5c:	e78a      	b.n	8007a74 <I2C_Slave_ISR_IT+0x48>
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME)) /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
 8007b5e:	f1b6 7f00 	cmp.w	r6, #33554432	; 0x2000000
 8007b62:	f47f af7f 	bne.w	8007a64 <I2C_Slave_ISR_IT+0x38>
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8007b66:	4629      	mov	r1, r5
 8007b68:	4620      	mov	r0, r4
 8007b6a:	f7ff fd47 	bl	80075fc <I2C_ITListenCplt>
 8007b6e:	e781      	b.n	8007a74 <I2C_Slave_ISR_IT+0x48>

08007b70 <I2C_Slave_ISR_DMA>:
{
 8007b70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hi2c);
 8007b72:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
  uint32_t tmpoptions = hi2c->XferOptions;
 8007b76:	6ac6      	ldr	r6, [r0, #44]	; 0x2c
  __HAL_LOCK(hi2c);
 8007b78:	2b01      	cmp	r3, #1
 8007b7a:	d06f      	beq.n	8007c5c <I2C_Slave_ISR_DMA+0xec>
 8007b7c:	2301      	movs	r3, #1
 8007b7e:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8007b82:	068b      	lsls	r3, r1, #26
 8007b84:	4604      	mov	r4, r0
 8007b86:	4617      	mov	r7, r2
 8007b88:	460d      	mov	r5, r1
 8007b8a:	d501      	bpl.n	8007b90 <I2C_Slave_ISR_DMA+0x20>
 8007b8c:	06ba      	lsls	r2, r7, #26
 8007b8e:	d428      	bmi.n	8007be2 <I2C_Slave_ISR_DMA+0x72>
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8007b90:	06eb      	lsls	r3, r5, #27
 8007b92:	d515      	bpl.n	8007bc0 <I2C_Slave_ISR_DMA+0x50>
 8007b94:	06f8      	lsls	r0, r7, #27
 8007b96:	d513      	bpl.n	8007bc0 <I2C_Slave_ISR_DMA+0x50>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8007b98:	0bfb      	lsrs	r3, r7, #15
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8007b9a:	ea43 3197 	orr.w	r1, r3, r7, lsr #14
 8007b9e:	07c9      	lsls	r1, r1, #31
 8007ba0:	f3c7 3280 	ubfx	r2, r7, #14, #1
 8007ba4:	d522      	bpl.n	8007bec <I2C_Slave_ISR_DMA+0x7c>
      if (hi2c->hdmarx != NULL)
 8007ba6:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8007ba8:	b321      	cbz	r1, 8007bf4 <I2C_Slave_ISR_DMA+0x84>
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8007baa:	07df      	lsls	r7, r3, #31
 8007bac:	d522      	bpl.n	8007bf4 <I2C_Slave_ISR_DMA+0x84>
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmarx) == 0U)
 8007bae:	680b      	ldr	r3, [r1, #0]
 8007bb0:	685b      	ldr	r3, [r3, #4]
 8007bb2:	b9fb      	cbnz	r3, 8007bf4 <I2C_Slave_ISR_DMA+0x84>
      if (hi2c->hdmatx != NULL)
 8007bb4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007bb6:	b31b      	cbz	r3, 8007c00 <I2C_Slave_ISR_DMA+0x90>
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8007bb8:	b312      	cbz	r2, 8007c00 <I2C_Slave_ISR_DMA+0x90>
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmatx) == 0U)
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	685b      	ldr	r3, [r3, #4]
 8007bbe:	e01f      	b.n	8007c00 <I2C_Slave_ISR_DMA+0x90>
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8007bc0:	072a      	lsls	r2, r5, #28
 8007bc2:	d50a      	bpl.n	8007bda <I2C_Slave_ISR_DMA+0x6a>
 8007bc4:	073b      	lsls	r3, r7, #28
 8007bc6:	d508      	bpl.n	8007bda <I2C_Slave_ISR_DMA+0x6a>
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8007bc8:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8007bcc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007bd0:	2b28      	cmp	r3, #40	; 0x28
 8007bd2:	d045      	beq.n	8007c60 <I2C_Slave_ISR_DMA+0xf0>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8007bd4:	6823      	ldr	r3, [r4, #0]
 8007bd6:	2208      	movs	r2, #8
 8007bd8:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(hi2c);
 8007bda:	2000      	movs	r0, #0
 8007bdc:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
}
 8007be0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8007be2:	f7ff fe97 	bl	8007914 <I2C_ITSlaveCplt>
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8007be6:	06eb      	lsls	r3, r5, #27
 8007be8:	d5ea      	bpl.n	8007bc0 <I2C_Slave_ISR_DMA+0x50>
 8007bea:	e7d3      	b.n	8007b94 <I2C_Slave_ISR_DMA+0x24>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007bec:	6823      	ldr	r3, [r4, #0]
 8007bee:	2210      	movs	r2, #16
 8007bf0:	61da      	str	r2, [r3, #28]
 8007bf2:	e7f2      	b.n	8007bda <I2C_Slave_ISR_DMA+0x6a>
      if (hi2c->hdmatx != NULL)
 8007bf4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007bf6:	b313      	cbz	r3, 8007c3e <I2C_Slave_ISR_DMA+0xce>
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8007bf8:	b30a      	cbz	r2, 8007c3e <I2C_Slave_ISR_DMA+0xce>
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmatx) == 0U)
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	685b      	ldr	r3, [r3, #4]
 8007bfe:	b9f3      	cbnz	r3, 8007c3e <I2C_Slave_ISR_DMA+0xce>
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME)) /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
 8007c00:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8007c04:	2b28      	cmp	r3, #40	; 0x28
 8007c06:	d02f      	beq.n	8007c68 <I2C_Slave_ISR_DMA+0xf8>
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8007c08:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8007c0c:	2b29      	cmp	r3, #41	; 0x29
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007c0e:	6823      	ldr	r3, [r4, #0]
 8007c10:	f04f 0210 	mov.w	r2, #16
 8007c14:	61da      	str	r2, [r3, #28]
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8007c16:	d1e0      	bne.n	8007bda <I2C_Slave_ISR_DMA+0x6a>
 8007c18:	f516 3f80 	cmn.w	r6, #65536	; 0x10000
 8007c1c:	d0dd      	beq.n	8007bda <I2C_Slave_ISR_DMA+0x6a>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8007c1e:	699a      	ldr	r2, [r3, #24]
 8007c20:	0790      	lsls	r0, r2, #30
    hi2c->Instance->TXDR = 0x00U;
 8007c22:	bf44      	itt	mi
 8007c24:	2200      	movmi	r2, #0
 8007c26:	629a      	strmi	r2, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007c28:	699a      	ldr	r2, [r3, #24]
 8007c2a:	07d1      	lsls	r1, r2, #31
 8007c2c:	d403      	bmi.n	8007c36 <I2C_Slave_ISR_DMA+0xc6>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8007c2e:	699a      	ldr	r2, [r3, #24]
 8007c30:	f042 0201 	orr.w	r2, r2, #1
 8007c34:	619a      	str	r2, [r3, #24]
          I2C_ITSlaveSeqCplt(hi2c);
 8007c36:	4620      	mov	r0, r4
 8007c38:	f7ff fe2a 	bl	8007890 <I2C_ITSlaveSeqCplt>
 8007c3c:	e7cd      	b.n	8007bda <I2C_Slave_ISR_DMA+0x6a>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007c3e:	6823      	ldr	r3, [r4, #0]
 8007c40:	2210      	movs	r2, #16
 8007c42:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007c44:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8007c46:	f043 0304 	orr.w	r3, r3, #4
 8007c4a:	6463      	str	r3, [r4, #68]	; 0x44
        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8007c4c:	f036 7380 	bics.w	r3, r6, #16777216	; 0x1000000
 8007c50:	d1c3      	bne.n	8007bda <I2C_Slave_ISR_DMA+0x6a>
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8007c52:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8007c54:	4620      	mov	r0, r4
 8007c56:	f7ff fadf 	bl	8007218 <I2C_ITError>
 8007c5a:	e7be      	b.n	8007bda <I2C_Slave_ISR_DMA+0x6a>
  __HAL_LOCK(hi2c);
 8007c5c:	2002      	movs	r0, #2
}
 8007c5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007c60:	4620      	mov	r0, r4
 8007c62:	f7ff fcff 	bl	8007664 <I2C_ITAddrCplt.isra.0.part.0>
 8007c66:	e7b8      	b.n	8007bda <I2C_Slave_ISR_DMA+0x6a>
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME)) /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
 8007c68:	f1b6 7f00 	cmp.w	r6, #33554432	; 0x2000000
 8007c6c:	d1cc      	bne.n	8007c08 <I2C_Slave_ISR_DMA+0x98>
          I2C_ITListenCplt(hi2c, ITFlags);
 8007c6e:	4629      	mov	r1, r5
 8007c70:	4620      	mov	r0, r4
 8007c72:	f7ff fcc3 	bl	80075fc <I2C_ITListenCplt>
 8007c76:	e7b0      	b.n	8007bda <I2C_Slave_ISR_DMA+0x6a>

08007c78 <I2C_DMAError>:
{
 8007c78:	b570      	push	{r4, r5, r6, lr}
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007c7a:	6a84      	ldr	r4, [r0, #40]	; 0x28
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8007c7c:	4942      	ldr	r1, [pc, #264]	; (8007d88 <I2C_DMAError+0x110>)
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8007c7e:	6823      	ldr	r3, [r4, #0]
 8007c80:	685a      	ldr	r2, [r3, #4]
 8007c82:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007c86:	605a      	str	r2, [r3, #4]
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007c88:	2500      	movs	r5, #0
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8007c8a:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007c8e:	f884 5042 	strb.w	r5, [r4, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8007c92:	62e1      	str	r1, [r4, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8007c94:	8565      	strh	r5, [r4, #42]	; 0x2a
  hi2c->ErrorCode |= ErrorCode;
 8007c96:	6c61      	ldr	r1, [r4, #68]	; 0x44
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8007c98:	3a28      	subs	r2, #40	; 0x28
  hi2c->ErrorCode |= ErrorCode;
 8007c9a:	f041 0110 	orr.w	r1, r1, #16
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8007c9e:	2a02      	cmp	r2, #2
  hi2c->ErrorCode |= ErrorCode;
 8007ca0:	6461      	str	r1, [r4, #68]	; 0x44
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8007ca2:	d83c      	bhi.n	8007d1e <I2C_DMAError+0xa6>
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8007ca4:	f894 1041 	ldrb.w	r1, [r4, #65]	; 0x41
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8007ca8:	f894 0041 	ldrb.w	r0, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8007cac:	681a      	ldr	r2, [r3, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8007cae:	f001 0128 	and.w	r1, r1, #40	; 0x28
 8007cb2:	2928      	cmp	r1, #40	; 0x28
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8007cb4:	f000 0028 	and.w	r0, r0, #40	; 0x28
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8007cb8:	bf14      	ite	ne
 8007cba:	f06f 01f6 	mvnne.w	r1, #246	; 0xf6
 8007cbe:	f06f 0146 	mvneq.w	r1, #70	; 0x46
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8007cc2:	2828      	cmp	r0, #40	; 0x28
 8007cc4:	bf18      	it	ne
 8007cc6:	f06f 01f6 	mvnne.w	r1, #246	; 0xf6
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8007cca:	400a      	ands	r2, r1
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8007ccc:	2028      	movs	r0, #40	; 0x28
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8007cce:	492f      	ldr	r1, [pc, #188]	; (8007d8c <I2C_DMAError+0x114>)
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8007cd0:	601a      	str	r2, [r3, #0]
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8007cd2:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8007cd6:	6361      	str	r1, [r4, #52]	; 0x34
    hi2c->PreviousState = I2C_STATE_NONE;
 8007cd8:	6325      	str	r5, [r4, #48]	; 0x30
  if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8007cda:	681a      	ldr	r2, [r3, #0]
 8007cdc:	f412 4280 	ands.w	r2, r2, #16384	; 0x4000
 8007ce0:	d012      	beq.n	8007d08 <I2C_DMAError+0x90>
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8007ce2:	681a      	ldr	r2, [r3, #0]
    if (hi2c->hdmatx != NULL)
 8007ce4:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8007ce6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007cea:	601a      	str	r2, [r3, #0]
    if (hi2c->hdmatx != NULL)
 8007cec:	b1b0      	cbz	r0, 8007d1c <I2C_DMAError+0xa4>
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8007cee:	4b28      	ldr	r3, [pc, #160]	; (8007d90 <I2C_DMAError+0x118>)
 8007cf0:	6383      	str	r3, [r0, #56]	; 0x38
      __HAL_UNLOCK(hi2c);
 8007cf2:	2300      	movs	r3, #0
 8007cf4:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8007cf8:	f7ff f890 	bl	8006e1c <HAL_DMA_Abort_IT>
 8007cfc:	b170      	cbz	r0, 8007d1c <I2C_DMAError+0xa4>
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8007cfe:	6ba0      	ldr	r0, [r4, #56]	; 0x38
}
 8007d00:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8007d04:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8007d06:	4718      	bx	r3
  else if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8007d08:	6819      	ldr	r1, [r3, #0]
 8007d0a:	f411 4100 	ands.w	r1, r1, #32768	; 0x8000
 8007d0e:	d019      	beq.n	8007d44 <I2C_DMAError+0xcc>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8007d10:	6819      	ldr	r1, [r3, #0]
    if (hi2c->hdmarx != NULL)
 8007d12:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8007d14:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
 8007d18:	6019      	str	r1, [r3, #0]
    if (hi2c->hdmarx != NULL)
 8007d1a:	b9f0      	cbnz	r0, 8007d5a <I2C_DMAError+0xe2>
}
 8007d1c:	bd70      	pop	{r4, r5, r6, pc}
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8007d1e:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8007d22:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8007d26:	681a      	ldr	r2, [r3, #0]
 8007d28:	f022 02fe 	bic.w	r2, r2, #254	; 0xfe
 8007d2c:	601a      	str	r2, [r3, #0]
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8007d2e:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 8007d32:	2a60      	cmp	r2, #96	; 0x60
      hi2c->State         = HAL_I2C_STATE_READY;
 8007d34:	bf1c      	itt	ne
 8007d36:	2220      	movne	r2, #32
 8007d38:	f884 2041 	strbne.w	r2, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8007d3c:	2200      	movs	r2, #0
 8007d3e:	6322      	str	r2, [r4, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8007d40:	6362      	str	r2, [r4, #52]	; 0x34
 8007d42:	e7ca      	b.n	8007cda <I2C_DMAError+0x62>
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8007d44:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8007d48:	2b60      	cmp	r3, #96	; 0x60
 8007d4a:	d013      	beq.n	8007d74 <I2C_DMAError+0xfc>
    __HAL_UNLOCK(hi2c);
 8007d4c:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
    hi2c->ErrorCallback(hi2c);
 8007d50:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8007d52:	4620      	mov	r0, r4
}
 8007d54:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    hi2c->ErrorCallback(hi2c);
 8007d58:	4718      	bx	r3
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8007d5a:	4b0d      	ldr	r3, [pc, #52]	; (8007d90 <I2C_DMAError+0x118>)
 8007d5c:	6383      	str	r3, [r0, #56]	; 0x38
      __HAL_UNLOCK(hi2c);
 8007d5e:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8007d62:	f7ff f85b 	bl	8006e1c <HAL_DMA_Abort_IT>
 8007d66:	2800      	cmp	r0, #0
 8007d68:	d0d8      	beq.n	8007d1c <I2C_DMAError+0xa4>
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8007d6a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
}
 8007d6c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8007d70:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8007d72:	4718      	bx	r3
    hi2c->State = HAL_I2C_STATE_READY;
 8007d74:	2320      	movs	r3, #32
 8007d76:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8007d7a:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
    hi2c->AbortCpltCallback(hi2c);
 8007d7e:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8007d80:	4620      	mov	r0, r4
}
 8007d82:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    hi2c->AbortCpltCallback(hi2c);
 8007d86:	4718      	bx	r3
 8007d88:	ffff0000 	.word	0xffff0000
 8007d8c:	08007a2d 	.word	0x08007a2d
 8007d90:	080071f5 	.word	0x080071f5

08007d94 <HAL_I2C_Init>:
  if (hi2c == NULL)
 8007d94:	2800      	cmp	r0, #0
 8007d96:	d065      	beq.n	8007e64 <HAL_I2C_Init+0xd0>
{
 8007d98:	b570      	push	{r4, r5, r6, lr}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007d9a:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8007d9e:	4604      	mov	r4, r0
 8007da0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d03e      	beq.n	8007e26 <HAL_I2C_Init+0x92>
  __HAL_I2C_DISABLE(hi2c);
 8007da8:	6823      	ldr	r3, [r4, #0]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007daa:	68e0      	ldr	r0, [r4, #12]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8007dac:	2224      	movs	r2, #36	; 0x24
 8007dae:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 8007db2:	6819      	ldr	r1, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8007db4:	6862      	ldr	r2, [r4, #4]
  __HAL_I2C_DISABLE(hi2c);
 8007db6:	f021 0101 	bic.w	r1, r1, #1
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8007dba:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
  __HAL_I2C_DISABLE(hi2c);
 8007dbe:	6019      	str	r1, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8007dc0:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8007dc2:	689a      	ldr	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007dc4:	2801      	cmp	r0, #1
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8007dc6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007dca:	609a      	str	r2, [r3, #8]
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8007dcc:	68a2      	ldr	r2, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007dce:	d045      	beq.n	8007e5c <HAL_I2C_Init+0xc8>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8007dd0:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007dd4:	2802      	cmp	r0, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8007dd6:	609a      	str	r2, [r3, #8]
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8007dd8:	bf04      	itt	eq
 8007dda:	f44f 6200 	moveq.w	r2, #2048	; 0x800
 8007dde:	605a      	streq	r2, [r3, #4]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8007de0:	6859      	ldr	r1, [r3, #4]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8007de2:	69a5      	ldr	r5, [r4, #24]
 8007de4:	e9d4 2604 	ldrd	r2, r6, [r4, #16]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8007de8:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
 8007dec:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8007df0:	6059      	str	r1, [r3, #4]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8007df2:	4332      	orrs	r2, r6
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8007df4:	68d8      	ldr	r0, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8007df6:	69e1      	ldr	r1, [r4, #28]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8007df8:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8007dfc:	6a25      	ldr	r5, [r4, #32]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8007dfe:	f420 4000 	bic.w	r0, r0, #32768	; 0x8000
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8007e02:	4329      	orrs	r1, r5
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8007e04:	60d8      	str	r0, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8007e06:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8007e08:	6019      	str	r1, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 8007e0a:	6819      	ldr	r1, [r3, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007e0c:	2200      	movs	r2, #0
  __HAL_I2C_ENABLE(hi2c);
 8007e0e:	f041 0101 	orr.w	r1, r1, #1
  hi2c->State = HAL_I2C_STATE_READY;
 8007e12:	2520      	movs	r5, #32
  __HAL_I2C_ENABLE(hi2c);
 8007e14:	6019      	str	r1, [r3, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007e16:	6462      	str	r2, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8007e18:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8007e1c:	6322      	str	r2, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007e1e:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
  return HAL_OK;
 8007e22:	4610      	mov	r0, r2
}
 8007e24:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->MasterTxCpltCallback = HAL_I2C_MasterTxCpltCallback; /* Legacy weak MasterTxCpltCallback */
 8007e26:	4912      	ldr	r1, [pc, #72]	; (8007e70 <HAL_I2C_Init+0xdc>)
    hi2c->Lock = HAL_UNLOCKED;
 8007e28:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    if (hi2c->MspInitCallback == NULL)
 8007e2c:	6f43      	ldr	r3, [r0, #116]	; 0x74
    hi2c->SlaveTxCpltCallback  = HAL_I2C_SlaveTxCpltCallback;  /* Legacy weak SlaveTxCpltCallback  */
 8007e2e:	4d11      	ldr	r5, [pc, #68]	; (8007e74 <HAL_I2C_Init+0xe0>)
    hi2c->SlaveRxCpltCallback  = HAL_I2C_SlaveRxCpltCallback;  /* Legacy weak SlaveRxCpltCallback  */
 8007e30:	4811      	ldr	r0, [pc, #68]	; (8007e78 <HAL_I2C_Init+0xe4>)
    hi2c->MemTxCpltCallback    = HAL_I2C_MemTxCpltCallback;    /* Legacy weak MemTxCpltCallback    */
 8007e32:	4a12      	ldr	r2, [pc, #72]	; (8007e7c <HAL_I2C_Init+0xe8>)
    hi2c->MasterTxCpltCallback = HAL_I2C_MasterTxCpltCallback; /* Legacy weak MasterTxCpltCallback */
 8007e34:	64e1      	str	r1, [r4, #76]	; 0x4c
    hi2c->ListenCpltCallback   = HAL_I2C_ListenCpltCallback;   /* Legacy weak ListenCpltCallback   */
 8007e36:	4912      	ldr	r1, [pc, #72]	; (8007e80 <HAL_I2C_Init+0xec>)
    hi2c->SlaveTxCpltCallback  = HAL_I2C_SlaveTxCpltCallback;  /* Legacy weak SlaveTxCpltCallback  */
 8007e38:	6565      	str	r5, [r4, #84]	; 0x54
    hi2c->SlaveRxCpltCallback  = HAL_I2C_SlaveRxCpltCallback;  /* Legacy weak SlaveRxCpltCallback  */
 8007e3a:	65a0      	str	r0, [r4, #88]	; 0x58
    hi2c->MemRxCpltCallback    = HAL_I2C_MemRxCpltCallback;    /* Legacy weak MemRxCpltCallback    */
 8007e3c:	4d11      	ldr	r5, [pc, #68]	; (8007e84 <HAL_I2C_Init+0xf0>)
    hi2c->ErrorCallback        = HAL_I2C_ErrorCallback;        /* Legacy weak ErrorCallback        */
 8007e3e:	4812      	ldr	r0, [pc, #72]	; (8007e88 <HAL_I2C_Init+0xf4>)
    hi2c->ListenCpltCallback   = HAL_I2C_ListenCpltCallback;   /* Legacy weak ListenCpltCallback   */
 8007e40:	65e1      	str	r1, [r4, #92]	; 0x5c
    hi2c->MemTxCpltCallback    = HAL_I2C_MemTxCpltCallback;    /* Legacy weak MemTxCpltCallback    */
 8007e42:	6622      	str	r2, [r4, #96]	; 0x60
    hi2c->AbortCpltCallback    = HAL_I2C_AbortCpltCallback;    /* Legacy weak AbortCpltCallback    */
 8007e44:	4911      	ldr	r1, [pc, #68]	; (8007e8c <HAL_I2C_Init+0xf8>)
    hi2c->AddrCallback         = HAL_I2C_AddrCallback;         /* Legacy weak AddrCallback         */
 8007e46:	4a12      	ldr	r2, [pc, #72]	; (8007e90 <HAL_I2C_Init+0xfc>)
    hi2c->MasterRxCpltCallback = HAL_I2C_MasterRxCpltCallback; /* Legacy weak MasterRxCpltCallback */
 8007e48:	4e12      	ldr	r6, [pc, #72]	; (8007e94 <HAL_I2C_Init+0x100>)
 8007e4a:	6526      	str	r6, [r4, #80]	; 0x50
    hi2c->ErrorCallback        = HAL_I2C_ErrorCallback;        /* Legacy weak ErrorCallback        */
 8007e4c:	e9c4 5019 	strd	r5, r0, [r4, #100]	; 0x64
    hi2c->AddrCallback         = HAL_I2C_AddrCallback;         /* Legacy weak AddrCallback         */
 8007e50:	e9c4 121b 	strd	r1, r2, [r4, #108]	; 0x6c
    if (hi2c->MspInitCallback == NULL)
 8007e54:	b143      	cbz	r3, 8007e68 <HAL_I2C_Init+0xd4>
    hi2c->MspInitCallback(hi2c);
 8007e56:	4620      	mov	r0, r4
 8007e58:	4798      	blx	r3
 8007e5a:	e7a5      	b.n	8007da8 <HAL_I2C_Init+0x14>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8007e5c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007e60:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007e62:	e7bd      	b.n	8007de0 <HAL_I2C_Init+0x4c>
    return HAL_ERROR;
 8007e64:	2001      	movs	r0, #1
}
 8007e66:	4770      	bx	lr
      hi2c->MspInitCallback = HAL_I2C_MspInit; /* Legacy weak MspInit  */
 8007e68:	4b0b      	ldr	r3, [pc, #44]	; (8007e98 <HAL_I2C_Init+0x104>)
 8007e6a:	6763      	str	r3, [r4, #116]	; 0x74
 8007e6c:	e7f3      	b.n	8007e56 <HAL_I2C_Init+0xc2>
 8007e6e:	bf00      	nop
 8007e70:	08007455 	.word	0x08007455
 8007e74:	0800745d 	.word	0x0800745d
 8007e78:	08007461 	.word	0x08007461
 8007e7c:	08007469 	.word	0x08007469
 8007e80:	08007465 	.word	0x08007465
 8007e84:	0800746d 	.word	0x0800746d
 8007e88:	08007471 	.word	0x08007471
 8007e8c:	08007451 	.word	0x08007451
 8007e90:	080071f1 	.word	0x080071f1
 8007e94:	08007459 	.word	0x08007459
 8007e98:	080071ed 	.word	0x080071ed

08007e9c <HAL_I2C_RegisterCallback>:
{
 8007e9c:	4603      	mov	r3, r0
  if (pCallback == NULL)
 8007e9e:	b362      	cbz	r2, 8007efa <HAL_I2C_RegisterCallback+0x5e>
  __HAL_LOCK(hi2c);
 8007ea0:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
 8007ea4:	2801      	cmp	r0, #1
 8007ea6:	d02e      	beq.n	8007f06 <HAL_I2C_RegisterCallback+0x6a>
{
 8007ea8:	b410      	push	{r4}
  if (HAL_I2C_STATE_READY == hi2c->State)
 8007eaa:	f893 4041 	ldrb.w	r4, [r3, #65]	; 0x41
  __HAL_LOCK(hi2c);
 8007eae:	2001      	movs	r0, #1
  if (HAL_I2C_STATE_READY == hi2c->State)
 8007eb0:	2c20      	cmp	r4, #32
  __HAL_LOCK(hi2c);
 8007eb2:	f883 0040 	strb.w	r0, [r3, #64]	; 0x40
  if (HAL_I2C_STATE_READY == hi2c->State)
 8007eb6:	d010      	beq.n	8007eda <HAL_I2C_RegisterCallback+0x3e>
  else if (HAL_I2C_STATE_RESET == hi2c->State)
 8007eb8:	f893 4041 	ldrb.w	r4, [r3, #65]	; 0x41
 8007ebc:	b91c      	cbnz	r4, 8007ec6 <HAL_I2C_RegisterCallback+0x2a>
    switch (CallbackID)
 8007ebe:	2909      	cmp	r1, #9
 8007ec0:	d018      	beq.n	8007ef4 <HAL_I2C_RegisterCallback+0x58>
 8007ec2:	290a      	cmp	r1, #10
 8007ec4:	d013      	beq.n	8007eee <HAL_I2C_RegisterCallback+0x52>
    hi2c->ErrorCode |= HAL_I2C_ERROR_INVALID_CALLBACK;
 8007ec6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007ec8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007ecc:	645a      	str	r2, [r3, #68]	; 0x44
  __HAL_UNLOCK(hi2c);
 8007ece:	2200      	movs	r2, #0
 8007ed0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8007ed4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007ed8:	4770      	bx	lr
    switch (CallbackID)
 8007eda:	290a      	cmp	r1, #10
 8007edc:	d830      	bhi.n	8007f40 <HAL_I2C_RegisterCallback+0xa4>
 8007ede:	e8df f001 	tbb	[pc, r1]
 8007ee2:	2c14      	.short	0x2c14
 8007ee4:	171a1d20 	.word	0x171a1d20
 8007ee8:	09292326 	.word	0x09292326
 8007eec:	06          	.byte	0x06
 8007eed:	00          	.byte	0x00
        hi2c->MspDeInitCallback = pCallback;
 8007eee:	679a      	str	r2, [r3, #120]	; 0x78
  HAL_StatusTypeDef status = HAL_OK;
 8007ef0:	2000      	movs	r0, #0
        break;
 8007ef2:	e7ec      	b.n	8007ece <HAL_I2C_RegisterCallback+0x32>
        hi2c->MspInitCallback = pCallback;
 8007ef4:	675a      	str	r2, [r3, #116]	; 0x74
  HAL_StatusTypeDef status = HAL_OK;
 8007ef6:	2000      	movs	r0, #0
        break;
 8007ef8:	e7e9      	b.n	8007ece <HAL_I2C_RegisterCallback+0x32>
    hi2c->ErrorCode |= HAL_I2C_ERROR_INVALID_CALLBACK;
 8007efa:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007efc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007f00:	6442      	str	r2, [r0, #68]	; 0x44
    return HAL_ERROR;
 8007f02:	2001      	movs	r0, #1
 8007f04:	4770      	bx	lr
  __HAL_LOCK(hi2c);
 8007f06:	2002      	movs	r0, #2
}
 8007f08:	4770      	bx	lr
        hi2c->MasterTxCpltCallback = pCallback;
 8007f0a:	64da      	str	r2, [r3, #76]	; 0x4c
  HAL_StatusTypeDef status = HAL_OK;
 8007f0c:	4608      	mov	r0, r1
        break;
 8007f0e:	e7de      	b.n	8007ece <HAL_I2C_RegisterCallback+0x32>
        hi2c->MemTxCpltCallback = pCallback;
 8007f10:	661a      	str	r2, [r3, #96]	; 0x60
  HAL_StatusTypeDef status = HAL_OK;
 8007f12:	2000      	movs	r0, #0
        break;
 8007f14:	e7db      	b.n	8007ece <HAL_I2C_RegisterCallback+0x32>
        hi2c->ListenCpltCallback = pCallback;
 8007f16:	65da      	str	r2, [r3, #92]	; 0x5c
  HAL_StatusTypeDef status = HAL_OK;
 8007f18:	2000      	movs	r0, #0
        break;
 8007f1a:	e7d8      	b.n	8007ece <HAL_I2C_RegisterCallback+0x32>
        hi2c->SlaveRxCpltCallback = pCallback;
 8007f1c:	659a      	str	r2, [r3, #88]	; 0x58
  HAL_StatusTypeDef status = HAL_OK;
 8007f1e:	2000      	movs	r0, #0
        break;
 8007f20:	e7d5      	b.n	8007ece <HAL_I2C_RegisterCallback+0x32>
        hi2c->SlaveTxCpltCallback = pCallback;
 8007f22:	655a      	str	r2, [r3, #84]	; 0x54
  HAL_StatusTypeDef status = HAL_OK;
 8007f24:	2000      	movs	r0, #0
        break;
 8007f26:	e7d2      	b.n	8007ece <HAL_I2C_RegisterCallback+0x32>
        hi2c->ErrorCallback = pCallback;
 8007f28:	669a      	str	r2, [r3, #104]	; 0x68
  HAL_StatusTypeDef status = HAL_OK;
 8007f2a:	2000      	movs	r0, #0
        break;
 8007f2c:	e7cf      	b.n	8007ece <HAL_I2C_RegisterCallback+0x32>
        hi2c->MemRxCpltCallback = pCallback;
 8007f2e:	665a      	str	r2, [r3, #100]	; 0x64
  HAL_StatusTypeDef status = HAL_OK;
 8007f30:	2000      	movs	r0, #0
        break;
 8007f32:	e7cc      	b.n	8007ece <HAL_I2C_RegisterCallback+0x32>
        hi2c->AbortCpltCallback = pCallback;
 8007f34:	66da      	str	r2, [r3, #108]	; 0x6c
  HAL_StatusTypeDef status = HAL_OK;
 8007f36:	2000      	movs	r0, #0
        break;
 8007f38:	e7c9      	b.n	8007ece <HAL_I2C_RegisterCallback+0x32>
        hi2c->MasterRxCpltCallback = pCallback;
 8007f3a:	651a      	str	r2, [r3, #80]	; 0x50
  HAL_StatusTypeDef status = HAL_OK;
 8007f3c:	2000      	movs	r0, #0
        break;
 8007f3e:	e7c6      	b.n	8007ece <HAL_I2C_RegisterCallback+0x32>
        hi2c->ErrorCode |= HAL_I2C_ERROR_INVALID_CALLBACK;
 8007f40:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007f42:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007f46:	645a      	str	r2, [r3, #68]	; 0x44
        status =  HAL_ERROR;
 8007f48:	2001      	movs	r0, #1
        break;
 8007f4a:	e7c0      	b.n	8007ece <HAL_I2C_RegisterCallback+0x32>

08007f4c <HAL_I2C_Mem_Write_DMA>:
{
 8007f4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f50:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8007f52:	f890 0041 	ldrb.w	r0, [r0, #65]	; 0x41
{
 8007f56:	f8bd 7024 	ldrh.w	r7, [sp, #36]	; 0x24
  if (hi2c->State == HAL_I2C_STATE_READY)
 8007f5a:	2820      	cmp	r0, #32
 8007f5c:	f040 809f 	bne.w	800809e <HAL_I2C_Mem_Write_DMA+0x152>
    if ((pData == NULL) || (Size == 0U))
 8007f60:	469a      	mov	sl, r3
 8007f62:	9b08      	ldr	r3, [sp, #32]
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	f000 8094 	beq.w	8008092 <HAL_I2C_Mem_Write_DMA+0x146>
 8007f6a:	2f00      	cmp	r7, #0
 8007f6c:	f000 8091 	beq.w	8008092 <HAL_I2C_Mem_Write_DMA+0x146>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8007f70:	6823      	ldr	r3, [r4, #0]
 8007f72:	699e      	ldr	r6, [r3, #24]
 8007f74:	f416 4600 	ands.w	r6, r6, #32768	; 0x8000
 8007f78:	f040 8091 	bne.w	800809e <HAL_I2C_Mem_Write_DMA+0x152>
    __HAL_LOCK(hi2c);
 8007f7c:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8007f80:	2b01      	cmp	r3, #1
 8007f82:	f000 808c 	beq.w	800809e <HAL_I2C_Mem_Write_DMA+0x152>
 8007f86:	2301      	movs	r3, #1
 8007f88:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8007f8c:	4691      	mov	r9, r2
    tickstart = HAL_GetTick();
 8007f8e:	460d      	mov	r5, r1
 8007f90:	f7fe f852 	bl	8006038 <HAL_GetTick>
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8007f94:	2321      	movs	r3, #33	; 0x21
 8007f96:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 8007f9a:	2240      	movs	r2, #64	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007f9c:	4b58      	ldr	r3, [pc, #352]	; (8008100 <HAL_I2C_Mem_Write_DMA+0x1b4>)
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 8007f9e:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8007fa2:	6466      	str	r6, [r4, #68]	; 0x44
    hi2c->XferCount   = Size;
 8007fa4:	8567      	strh	r7, [r4, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007fa6:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007fa8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8007faa:	4f56      	ldr	r7, [pc, #344]	; (8008104 <HAL_I2C_Mem_Write_DMA+0x1b8>)
    hi2c->pBuffPtr    = pData;
 8007fac:	9a08      	ldr	r2, [sp, #32]
 8007fae:	6262      	str	r2, [r4, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007fb0:	b29b      	uxth	r3, r3
 8007fb2:	2bff      	cmp	r3, #255	; 0xff
    tickstart = HAL_GetTick();
 8007fb4:	4606      	mov	r6, r0
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8007fb6:	6367      	str	r7, [r4, #52]	; 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007fb8:	d874      	bhi.n	80080a4 <HAL_I2C_Mem_Write_DMA+0x158>
      hi2c->XferSize = hi2c->XferCount;
 8007fba:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
      xfermode = I2C_AUTOEND_MODE;
 8007fbc:	f04f 7800 	mov.w	r8, #33554432	; 0x2000000
      hi2c->XferSize = hi2c->XferCount;
 8007fc0:	b280      	uxth	r0, r0
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8007fc2:	6821      	ldr	r1, [r4, #0]
 8007fc4:	4a50      	ldr	r2, [pc, #320]	; (8008108 <HAL_I2C_Mem_Write_DMA+0x1bc>)
 8007fc6:	684b      	ldr	r3, [r1, #4]
 8007fc8:	8520      	strh	r0, [r4, #40]	; 0x28
 8007fca:	401a      	ands	r2, r3
 8007fcc:	fa5f f38a 	uxtb.w	r3, sl
 8007fd0:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 8007fd4:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8007fd8:	432b      	orrs	r3, r5
 8007fda:	f043 4301 	orr.w	r3, r3, #2164260864	; 0x81000000
 8007fde:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8007fe2:	604b      	str	r3, [r1, #4]
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007fe4:	4632      	mov	r2, r6
 8007fe6:	2119      	movs	r1, #25
 8007fe8:	4620      	mov	r0, r4
 8007fea:	f7ff fab3 	bl	8007554 <I2C_WaitOnTXISFlagUntilTimeout>
 8007fee:	2800      	cmp	r0, #0
 8007ff0:	d164      	bne.n	80080bc <HAL_I2C_Mem_Write_DMA+0x170>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007ff2:	f1ba 0f01 	cmp.w	sl, #1
 8007ff6:	d00a      	beq.n	800800e <HAL_I2C_Mem_Write_DMA+0xc2>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8007ff8:	6823      	ldr	r3, [r4, #0]
 8007ffa:	ea4f 2219 	mov.w	r2, r9, lsr #8
 8007ffe:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008000:	2119      	movs	r1, #25
 8008002:	4632      	mov	r2, r6
 8008004:	4620      	mov	r0, r4
 8008006:	f7ff faa5 	bl	8007554 <I2C_WaitOnTXISFlagUntilTimeout>
 800800a:	2800      	cmp	r0, #0
 800800c:	d156      	bne.n	80080bc <HAL_I2C_Mem_Write_DMA+0x170>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800800e:	6822      	ldr	r2, [r4, #0]
 8008010:	fa5f f389 	uxtb.w	r3, r9
 8008014:	6293      	str	r3, [r2, #40]	; 0x28
 8008016:	e005      	b.n	8008024 <HAL_I2C_Mem_Write_DMA+0xd8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008018:	f7fe f80e 	bl	8006038 <HAL_GetTick>
 800801c:	1b83      	subs	r3, r0, r6
 800801e:	2b19      	cmp	r3, #25
 8008020:	d844      	bhi.n	80080ac <HAL_I2C_Mem_Write_DMA+0x160>
 8008022:	6822      	ldr	r2, [r4, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008024:	6993      	ldr	r3, [r2, #24]
 8008026:	f013 0980 	ands.w	r9, r3, #128	; 0x80
 800802a:	d0f5      	beq.n	8008018 <HAL_I2C_Mem_Write_DMA+0xcc>
    if (hi2c->hdmatx != NULL)
 800802c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800802e:	2800      	cmp	r0, #0
 8008030:	d056      	beq.n	80080e0 <HAL_I2C_Mem_Write_DMA+0x194>
      hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8008032:	4b36      	ldr	r3, [pc, #216]	; (800810c <HAL_I2C_Mem_Write_DMA+0x1c0>)
      hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 8008034:	4936      	ldr	r1, [pc, #216]	; (8008110 <HAL_I2C_Mem_Write_DMA+0x1c4>)
 8008036:	62c1      	str	r1, [r0, #44]	; 0x2c
      hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8008038:	2600      	movs	r6, #0
 800803a:	e9c0 630c 	strd	r6, r3, [r0, #48]	; 0x30
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 800803e:	9908      	ldr	r1, [sp, #32]
 8008040:	8d23      	ldrh	r3, [r4, #40]	; 0x28
      hi2c->hdmatx->XferAbortCallback = NULL;
 8008042:	6386      	str	r6, [r0, #56]	; 0x38
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 8008044:	3228      	adds	r2, #40	; 0x28
 8008046:	f7fe fe8d 	bl	8006d64 <HAL_DMA_Start_IT>
    if (dmaxferstatus == HAL_OK)
 800804a:	2800      	cmp	r0, #0
 800804c:	d13b      	bne.n	80080c6 <HAL_I2C_Mem_Write_DMA+0x17a>
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800804e:	6822      	ldr	r2, [r4, #0]
 8008050:	4930      	ldr	r1, [pc, #192]	; (8008114 <HAL_I2C_Mem_Write_DMA+0x1c8>)
 8008052:	6853      	ldr	r3, [r2, #4]
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8008054:	8d26      	ldrh	r6, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8008056:	400b      	ands	r3, r1
 8008058:	431d      	orrs	r5, r3
 800805a:	b2f3      	uxtb	r3, r6
 800805c:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
 8008060:	ea43 0308 	orr.w	r3, r3, r8
 8008064:	6053      	str	r3, [r2, #4]
      hi2c->XferCount -= hi2c->XferSize;
 8008066:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8008068:	6b61      	ldr	r1, [r4, #52]	; 0x34
      __HAL_UNLOCK(hi2c);
 800806a:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
      hi2c->XferCount -= hi2c->XferSize;
 800806e:	1b9b      	subs	r3, r3, r6
 8008070:	b29b      	uxth	r3, r3
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8008072:	42b9      	cmp	r1, r7
      hi2c->XferCount -= hi2c->XferSize;
 8008074:	8563      	strh	r3, [r4, #42]	; 0x2a
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8008076:	d040      	beq.n	80080fa <HAL_I2C_Mem_Write_DMA+0x1ae>
 8008078:	4b27      	ldr	r3, [pc, #156]	; (8008118 <HAL_I2C_Mem_Write_DMA+0x1cc>)
 800807a:	4299      	cmp	r1, r3
 800807c:	bf0c      	ite	eq
 800807e:	2190      	moveq	r1, #144	; 0x90
 8008080:	21f2      	movne	r1, #242	; 0xf2
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8008082:	6813      	ldr	r3, [r2, #0]
 8008084:	4319      	orrs	r1, r3
 8008086:	6011      	str	r1, [r2, #0]
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8008088:	6813      	ldr	r3, [r2, #0]
 800808a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800808e:	6013      	str	r3, [r2, #0]
    return HAL_OK;
 8008090:	e003      	b.n	800809a <HAL_I2C_Mem_Write_DMA+0x14e>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8008092:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008096:	6463      	str	r3, [r4, #68]	; 0x44
      return  HAL_ERROR;
 8008098:	2001      	movs	r0, #1
}
 800809a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return HAL_BUSY;
 800809e:	2002      	movs	r0, #2
}
 80080a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80080a4:	20ff      	movs	r0, #255	; 0xff
      xfermode = I2C_RELOAD_MODE;
 80080a6:	f04f 7880 	mov.w	r8, #16777216	; 0x1000000
 80080aa:	e78a      	b.n	8007fc2 <HAL_I2C_Mem_Write_DMA+0x76>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80080ac:	6c63      	ldr	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80080ae:	2220      	movs	r2, #32
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80080b0:	4313      	orrs	r3, r2
 80080b2:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80080b4:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80080b8:	f884 9042 	strb.w	r9, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80080bc:	2300      	movs	r3, #0
 80080be:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 80080c2:	2001      	movs	r0, #1
 80080c4:	e7e9      	b.n	800809a <HAL_I2C_Mem_Write_DMA+0x14e>
      hi2c->State     = HAL_I2C_STATE_READY;
 80080c6:	2320      	movs	r3, #32
 80080c8:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 80080cc:	f884 6042 	strb.w	r6, [r4, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80080d0:	6c63      	ldr	r3, [r4, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 80080d2:	f884 6040 	strb.w	r6, [r4, #64]	; 0x40
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80080d6:	f043 0310 	orr.w	r3, r3, #16
 80080da:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 80080dc:	2001      	movs	r0, #1
 80080de:	e7dc      	b.n	800809a <HAL_I2C_Mem_Write_DMA+0x14e>
      hi2c->State     = HAL_I2C_STATE_READY;
 80080e0:	2320      	movs	r3, #32
 80080e2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 80080e6:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 80080ea:	6c63      	ldr	r3, [r4, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 80080ec:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 80080f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80080f4:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 80080f6:	2001      	movs	r0, #1
 80080f8:	e7cf      	b.n	800809a <HAL_I2C_Mem_Write_DMA+0x14e>
 80080fa:	2190      	movs	r1, #144	; 0x90
 80080fc:	e7c1      	b.n	8008082 <HAL_I2C_Mem_Write_DMA+0x136>
 80080fe:	bf00      	nop
 8008100:	ffff0000 	.word	0xffff0000
 8008104:	08007749 	.word	0x08007749
 8008108:	fc009800 	.word	0xfc009800
 800810c:	08007c79 	.word	0x08007c79
 8008110:	0800732d 	.word	0x0800732d
 8008114:	fc009c00 	.word	0xfc009c00
 8008118:	08007b71 	.word	0x08007b71

0800811c <HAL_I2C_Mem_Read_DMA>:
{
 800811c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008120:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8008122:	f890 0041 	ldrb.w	r0, [r0, #65]	; 0x41
{
 8008126:	f8bd 7024 	ldrh.w	r7, [sp, #36]	; 0x24
  if (hi2c->State == HAL_I2C_STATE_READY)
 800812a:	2820      	cmp	r0, #32
 800812c:	f040 80a3 	bne.w	8008276 <HAL_I2C_Mem_Read_DMA+0x15a>
    if ((pData == NULL) || (Size == 0U))
 8008130:	469a      	mov	sl, r3
 8008132:	9b08      	ldr	r3, [sp, #32]
 8008134:	2b00      	cmp	r3, #0
 8008136:	f000 8098 	beq.w	800826a <HAL_I2C_Mem_Read_DMA+0x14e>
 800813a:	2f00      	cmp	r7, #0
 800813c:	f000 8095 	beq.w	800826a <HAL_I2C_Mem_Read_DMA+0x14e>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8008140:	6823      	ldr	r3, [r4, #0]
 8008142:	699e      	ldr	r6, [r3, #24]
 8008144:	f416 4600 	ands.w	r6, r6, #32768	; 0x8000
 8008148:	f040 8095 	bne.w	8008276 <HAL_I2C_Mem_Read_DMA+0x15a>
    __HAL_LOCK(hi2c);
 800814c:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8008150:	2b01      	cmp	r3, #1
 8008152:	f000 8090 	beq.w	8008276 <HAL_I2C_Mem_Read_DMA+0x15a>
 8008156:	2301      	movs	r3, #1
 8008158:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800815c:	4691      	mov	r9, r2
    tickstart = HAL_GetTick();
 800815e:	460d      	mov	r5, r1
 8008160:	f7fd ff6a 	bl	8006038 <HAL_GetTick>
    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8008164:	2322      	movs	r3, #34	; 0x22
 8008166:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 800816a:	2240      	movs	r2, #64	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800816c:	4b5a      	ldr	r3, [pc, #360]	; (80082d8 <HAL_I2C_Mem_Read_DMA+0x1bc>)
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 800816e:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8008172:	6466      	str	r6, [r4, #68]	; 0x44
    hi2c->XferCount   = Size;
 8008174:	8567      	strh	r7, [r4, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008176:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008178:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 800817a:	4f58      	ldr	r7, [pc, #352]	; (80082dc <HAL_I2C_Mem_Read_DMA+0x1c0>)
    hi2c->pBuffPtr    = pData;
 800817c:	9a08      	ldr	r2, [sp, #32]
 800817e:	6262      	str	r2, [r4, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008180:	b29b      	uxth	r3, r3
 8008182:	2bff      	cmp	r3, #255	; 0xff
    tickstart = HAL_GetTick();
 8008184:	4606      	mov	r6, r0
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8008186:	6367      	str	r7, [r4, #52]	; 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008188:	d878      	bhi.n	800827c <HAL_I2C_Mem_Read_DMA+0x160>
      hi2c->XferSize = hi2c->XferCount;
 800818a:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
      xfermode = I2C_AUTOEND_MODE;
 800818c:	f04f 7800 	mov.w	r8, #33554432	; 0x2000000
      hi2c->XferSize = hi2c->XferCount;
 8008190:	b280      	uxth	r0, r0
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8008192:	6821      	ldr	r1, [r4, #0]
 8008194:	4a52      	ldr	r2, [pc, #328]	; (80082e0 <HAL_I2C_Mem_Read_DMA+0x1c4>)
 8008196:	684b      	ldr	r3, [r1, #4]
 8008198:	8520      	strh	r0, [r4, #40]	; 0x28
 800819a:	401a      	ands	r2, r3
 800819c:	fa5f f38a 	uxtb.w	r3, sl
 80081a0:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 80081a4:	f3c5 0509 	ubfx	r5, r5, #0, #10
 80081a8:	432b      	orrs	r3, r5
 80081aa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80081ae:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80081b2:	604b      	str	r3, [r1, #4]
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80081b4:	4632      	mov	r2, r6
 80081b6:	2119      	movs	r1, #25
 80081b8:	4620      	mov	r0, r4
 80081ba:	f7ff f9cb 	bl	8007554 <I2C_WaitOnTXISFlagUntilTimeout>
 80081be:	2800      	cmp	r0, #0
 80081c0:	d168      	bne.n	8008294 <HAL_I2C_Mem_Read_DMA+0x178>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80081c2:	f1ba 0f01 	cmp.w	sl, #1
 80081c6:	d00a      	beq.n	80081de <HAL_I2C_Mem_Read_DMA+0xc2>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80081c8:	6823      	ldr	r3, [r4, #0]
 80081ca:	ea4f 2219 	mov.w	r2, r9, lsr #8
 80081ce:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80081d0:	2119      	movs	r1, #25
 80081d2:	4632      	mov	r2, r6
 80081d4:	4620      	mov	r0, r4
 80081d6:	f7ff f9bd 	bl	8007554 <I2C_WaitOnTXISFlagUntilTimeout>
 80081da:	2800      	cmp	r0, #0
 80081dc:	d15a      	bne.n	8008294 <HAL_I2C_Mem_Read_DMA+0x178>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80081de:	6821      	ldr	r1, [r4, #0]
 80081e0:	fa5f f289 	uxtb.w	r2, r9
 80081e4:	628a      	str	r2, [r1, #40]	; 0x28
 80081e6:	e005      	b.n	80081f4 <HAL_I2C_Mem_Read_DMA+0xd8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80081e8:	f7fd ff26 	bl	8006038 <HAL_GetTick>
 80081ec:	1b83      	subs	r3, r0, r6
 80081ee:	2b19      	cmp	r3, #25
 80081f0:	d848      	bhi.n	8008284 <HAL_I2C_Mem_Read_DMA+0x168>
 80081f2:	6821      	ldr	r1, [r4, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80081f4:	698b      	ldr	r3, [r1, #24]
 80081f6:	f013 0940 	ands.w	r9, r3, #64	; 0x40
 80081fa:	d0f5      	beq.n	80081e8 <HAL_I2C_Mem_Read_DMA+0xcc>
    if (hi2c->hdmarx != NULL)
 80081fc:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80081fe:	2800      	cmp	r0, #0
 8008200:	d05a      	beq.n	80082b8 <HAL_I2C_Mem_Read_DMA+0x19c>
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8008202:	4b38      	ldr	r3, [pc, #224]	; (80082e4 <HAL_I2C_Mem_Read_DMA+0x1c8>)
      hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 8008204:	4a38      	ldr	r2, [pc, #224]	; (80082e8 <HAL_I2C_Mem_Read_DMA+0x1cc>)
 8008206:	62c2      	str	r2, [r0, #44]	; 0x2c
      hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8008208:	2600      	movs	r6, #0
 800820a:	e9c0 630c 	strd	r6, r3, [r0, #48]	; 0x30
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData, hi2c->XferSize);
 800820e:	9a08      	ldr	r2, [sp, #32]
 8008210:	8d23      	ldrh	r3, [r4, #40]	; 0x28
      hi2c->hdmarx->XferAbortCallback = NULL;
 8008212:	6386      	str	r6, [r0, #56]	; 0x38
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData, hi2c->XferSize);
 8008214:	3124      	adds	r1, #36	; 0x24
 8008216:	f7fe fda5 	bl	8006d64 <HAL_DMA_Start_IT>
    if (dmaxferstatus == HAL_OK)
 800821a:	2800      	cmp	r0, #0
 800821c:	d13f      	bne.n	800829e <HAL_I2C_Mem_Read_DMA+0x182>
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800821e:	6822      	ldr	r2, [r4, #0]
 8008220:	4e2f      	ldr	r6, [pc, #188]	; (80082e0 <HAL_I2C_Mem_Read_DMA+0x1c4>)
 8008222:	6853      	ldr	r3, [r2, #4]
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 8008224:	8d21      	ldrh	r1, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8008226:	ea48 0505 	orr.w	r5, r8, r5
 800822a:	4033      	ands	r3, r6
 800822c:	432b      	orrs	r3, r5
 800822e:	b2cd      	uxtb	r5, r1
 8008230:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
 8008234:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008238:	f443 5310 	orr.w	r3, r3, #9216	; 0x2400
 800823c:	6053      	str	r3, [r2, #4]
      hi2c->XferCount -= hi2c->XferSize;
 800823e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8008240:	6b65      	ldr	r5, [r4, #52]	; 0x34
      __HAL_UNLOCK(hi2c);
 8008242:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
      hi2c->XferCount -= hi2c->XferSize;
 8008246:	1a5b      	subs	r3, r3, r1
 8008248:	b29b      	uxth	r3, r3
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 800824a:	42bd      	cmp	r5, r7
      hi2c->XferCount -= hi2c->XferSize;
 800824c:	8563      	strh	r3, [r4, #42]	; 0x2a
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 800824e:	d040      	beq.n	80082d2 <HAL_I2C_Mem_Read_DMA+0x1b6>
 8008250:	4b26      	ldr	r3, [pc, #152]	; (80082ec <HAL_I2C_Mem_Read_DMA+0x1d0>)
 8008252:	429d      	cmp	r5, r3
 8008254:	bf0c      	ite	eq
 8008256:	2590      	moveq	r5, #144	; 0x90
 8008258:	25f2      	movne	r5, #242	; 0xf2
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 800825a:	6813      	ldr	r3, [r2, #0]
 800825c:	431d      	orrs	r5, r3
 800825e:	6015      	str	r5, [r2, #0]
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8008260:	6813      	ldr	r3, [r2, #0]
 8008262:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008266:	6013      	str	r3, [r2, #0]
    return HAL_OK;
 8008268:	e003      	b.n	8008272 <HAL_I2C_Mem_Read_DMA+0x156>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800826a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800826e:	6463      	str	r3, [r4, #68]	; 0x44
      return  HAL_ERROR;
 8008270:	2001      	movs	r0, #1
}
 8008272:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return HAL_BUSY;
 8008276:	2002      	movs	r0, #2
}
 8008278:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800827c:	20ff      	movs	r0, #255	; 0xff
      xfermode = I2C_RELOAD_MODE;
 800827e:	f04f 7880 	mov.w	r8, #16777216	; 0x1000000
 8008282:	e786      	b.n	8008192 <HAL_I2C_Mem_Read_DMA+0x76>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008284:	6c63      	ldr	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8008286:	2220      	movs	r2, #32
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008288:	4313      	orrs	r3, r2
 800828a:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800828c:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008290:	f884 9042 	strb.w	r9, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8008294:	2300      	movs	r3, #0
 8008296:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 800829a:	2001      	movs	r0, #1
 800829c:	e7e9      	b.n	8008272 <HAL_I2C_Mem_Read_DMA+0x156>
      hi2c->State     = HAL_I2C_STATE_READY;
 800829e:	2320      	movs	r3, #32
 80082a0:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 80082a4:	f884 6042 	strb.w	r6, [r4, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80082a8:	6c63      	ldr	r3, [r4, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 80082aa:	f884 6040 	strb.w	r6, [r4, #64]	; 0x40
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80082ae:	f043 0310 	orr.w	r3, r3, #16
 80082b2:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 80082b4:	2001      	movs	r0, #1
 80082b6:	e7dc      	b.n	8008272 <HAL_I2C_Mem_Read_DMA+0x156>
      hi2c->State     = HAL_I2C_STATE_READY;
 80082b8:	2320      	movs	r3, #32
 80082ba:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 80082be:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 80082c2:	6c63      	ldr	r3, [r4, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 80082c4:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 80082c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80082cc:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 80082ce:	2001      	movs	r0, #1
 80082d0:	e7cf      	b.n	8008272 <HAL_I2C_Mem_Read_DMA+0x156>
 80082d2:	2590      	movs	r5, #144	; 0x90
 80082d4:	e7c1      	b.n	800825a <HAL_I2C_Mem_Read_DMA+0x13e>
 80082d6:	bf00      	nop
 80082d8:	ffff0000 	.word	0xffff0000
 80082dc:	08007749 	.word	0x08007749
 80082e0:	fc009800 	.word	0xfc009800
 80082e4:	08007c79 	.word	0x08007c79
 80082e8:	080073bd 	.word	0x080073bd
 80082ec:	08007b71 	.word	0x08007b71

080082f0 <HAL_I2C_EV_IRQHandler>:
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80082f0:	6802      	ldr	r2, [r0, #0]
  if (hi2c->XferISR != NULL)
 80082f2:	6b43      	ldr	r3, [r0, #52]	; 0x34
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80082f4:	6991      	ldr	r1, [r2, #24]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80082f6:	6812      	ldr	r2, [r2, #0]
  if (hi2c->XferISR != NULL)
 80082f8:	b103      	cbz	r3, 80082fc <HAL_I2C_EV_IRQHandler+0xc>
    hi2c->XferISR(hi2c, itflags, itsources);
 80082fa:	4718      	bx	r3
}
 80082fc:	4770      	bx	lr
 80082fe:	bf00      	nop

08008300 <HAL_I2C_ER_IRQHandler>:
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8008300:	6803      	ldr	r3, [r0, #0]
 8008302:	699a      	ldr	r2, [r3, #24]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8008304:	6819      	ldr	r1, [r3, #0]
{
 8008306:	b410      	push	{r4}
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8008308:	05d4      	lsls	r4, r2, #23
 800830a:	d52f      	bpl.n	800836c <HAL_I2C_ER_IRQHandler+0x6c>
 800830c:	060c      	lsls	r4, r1, #24
 800830e:	d51f      	bpl.n	8008350 <HAL_I2C_ER_IRQHandler+0x50>
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8008310:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8008312:	f041 0101 	orr.w	r1, r1, #1
 8008316:	6441      	str	r1, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8008318:	f44f 7480 	mov.w	r4, #256	; 0x100
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800831c:	0551      	lsls	r1, r2, #21
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800831e:	61dc      	str	r4, [r3, #28]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8008320:	d529      	bpl.n	8008376 <HAL_I2C_ER_IRQHandler+0x76>
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8008322:	6c41      	ldr	r1, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8008324:	f44f 6480 	mov.w	r4, #1024	; 0x400
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8008328:	f041 0108 	orr.w	r1, r1, #8
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800832c:	0592      	lsls	r2, r2, #22
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800832e:	6441      	str	r1, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8008330:	61dc      	str	r4, [r3, #28]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8008332:	d506      	bpl.n	8008342 <HAL_I2C_ER_IRQHandler+0x42>
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8008334:	6c42      	ldr	r2, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8008336:	f44f 7100 	mov.w	r1, #512	; 0x200
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 800833a:	f042 0202 	orr.w	r2, r2, #2
 800833e:	6442      	str	r2, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8008340:	61d9      	str	r1, [r3, #28]
  tmperror = hi2c->ErrorCode;
 8008342:	6c41      	ldr	r1, [r0, #68]	; 0x44
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8008344:	f011 0f0b 	tst.w	r1, #11
 8008348:	d10c      	bne.n	8008364 <HAL_I2C_ER_IRQHandler+0x64>
}
 800834a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800834e:	4770      	bx	lr
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8008350:	0554      	lsls	r4, r2, #21
 8008352:	d4f6      	bmi.n	8008342 <HAL_I2C_ER_IRQHandler+0x42>
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8008354:	0594      	lsls	r4, r2, #22
 8008356:	d5f4      	bpl.n	8008342 <HAL_I2C_ER_IRQHandler+0x42>
 8008358:	0609      	lsls	r1, r1, #24
 800835a:	d4eb      	bmi.n	8008334 <HAL_I2C_ER_IRQHandler+0x34>
  tmperror = hi2c->ErrorCode;
 800835c:	6c41      	ldr	r1, [r0, #68]	; 0x44
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 800835e:	f011 0f0b 	tst.w	r1, #11
 8008362:	d0f2      	beq.n	800834a <HAL_I2C_ER_IRQHandler+0x4a>
}
 8008364:	f85d 4b04 	ldr.w	r4, [sp], #4
    I2C_ITError(hi2c, tmperror);
 8008368:	f7fe bf56 	b.w	8007218 <I2C_ITError>
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800836c:	0554      	lsls	r4, r2, #21
 800836e:	d5f1      	bpl.n	8008354 <HAL_I2C_ER_IRQHandler+0x54>
 8008370:	0609      	lsls	r1, r1, #24
 8008372:	d4d6      	bmi.n	8008322 <HAL_I2C_ER_IRQHandler+0x22>
 8008374:	e7e5      	b.n	8008342 <HAL_I2C_ER_IRQHandler+0x42>
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8008376:	0592      	lsls	r2, r2, #22
 8008378:	d4dc      	bmi.n	8008334 <HAL_I2C_ER_IRQHandler+0x34>
 800837a:	e7e2      	b.n	8008342 <HAL_I2C_ER_IRQHandler+0x42>

0800837c <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800837c:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8008380:	2a20      	cmp	r2, #32
 8008382:	d121      	bne.n	80083c8 <HAL_I2CEx_ConfigAnalogFilter+0x4c>
{
 8008384:	b430      	push	{r4, r5}
 8008386:	b2d4      	uxtb	r4, r2
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008388:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
 800838c:	2a01      	cmp	r2, #1
 800838e:	4603      	mov	r3, r0
 8008390:	d01c      	beq.n	80083cc <HAL_I2CEx_ConfigAnalogFilter+0x50>

    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008392:	681a      	ldr	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8008394:	2024      	movs	r0, #36	; 0x24
 8008396:	f883 0041 	strb.w	r0, [r3, #65]	; 0x41
    __HAL_I2C_DISABLE(hi2c);
 800839a:	6810      	ldr	r0, [r2, #0]
 800839c:	f020 0001 	bic.w	r0, r0, #1
 80083a0:	6010      	str	r0, [r2, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80083a2:	6810      	ldr	r0, [r2, #0]
 80083a4:	f420 5080 	bic.w	r0, r0, #4096	; 0x1000
 80083a8:	6010      	str	r0, [r2, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80083aa:	6810      	ldr	r0, [r2, #0]
 80083ac:	4301      	orrs	r1, r0
 80083ae:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 80083b0:	6811      	ldr	r1, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80083b2:	2500      	movs	r5, #0
    __HAL_I2C_ENABLE(hi2c);
 80083b4:	f041 0101 	orr.w	r1, r1, #1
 80083b8:	6011      	str	r1, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 80083ba:	f883 4041 	strb.w	r4, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80083be:	f883 5040 	strb.w	r5, [r3, #64]	; 0x40

    return HAL_OK;
 80083c2:	4628      	mov	r0, r5
  }
  else
  {
    return HAL_BUSY;
  }
}
 80083c4:	bc30      	pop	{r4, r5}
 80083c6:	4770      	bx	lr
    return HAL_BUSY;
 80083c8:	2002      	movs	r0, #2
}
 80083ca:	4770      	bx	lr
    return HAL_BUSY;
 80083cc:	2002      	movs	r0, #2
}
 80083ce:	bc30      	pop	{r4, r5}
 80083d0:	4770      	bx	lr
 80083d2:	bf00      	nop

080083d4 <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80083d4:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 80083d8:	2a20      	cmp	r2, #32
 80083da:	d120      	bne.n	800841e <HAL_I2CEx_ConfigDigitalFilter+0x4a>
{
 80083dc:	b430      	push	{r4, r5}
 80083de:	b2d5      	uxtb	r5, r2
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80083e0:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
 80083e4:	2a01      	cmp	r2, #1
 80083e6:	4603      	mov	r3, r0
 80083e8:	d01b      	beq.n	8008422 <HAL_I2CEx_ConfigDigitalFilter+0x4e>

    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80083ea:	681a      	ldr	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 80083ec:	2024      	movs	r0, #36	; 0x24
 80083ee:	f883 0041 	strb.w	r0, [r3, #65]	; 0x41
    __HAL_I2C_DISABLE(hi2c);
 80083f2:	6810      	ldr	r0, [r2, #0]
 80083f4:	f020 0001 	bic.w	r0, r0, #1
 80083f8:	6010      	str	r0, [r2, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80083fa:	6810      	ldr	r0, [r2, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80083fc:	f420 6070 	bic.w	r0, r0, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8008400:	ea40 2101 	orr.w	r1, r0, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8008404:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008406:	6811      	ldr	r1, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008408:	2400      	movs	r4, #0
    __HAL_I2C_ENABLE(hi2c);
 800840a:	f041 0101 	orr.w	r1, r1, #1
 800840e:	6011      	str	r1, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8008410:	f883 5041 	strb.w	r5, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8008414:	f883 4040 	strb.w	r4, [r3, #64]	; 0x40

    return HAL_OK;
 8008418:	4620      	mov	r0, r4
  }
  else
  {
    return HAL_BUSY;
  }
}
 800841a:	bc30      	pop	{r4, r5}
 800841c:	4770      	bx	lr
    return HAL_BUSY;
 800841e:	2002      	movs	r0, #2
}
 8008420:	4770      	bx	lr
    return HAL_BUSY;
 8008422:	2002      	movs	r0, #2
}
 8008424:	bc30      	pop	{r4, r5}
 8008426:	4770      	bx	lr

08008428 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8008428:	b5f0      	push	{r4, r5, r6, r7, lr}
 800842a:	b08b      	sub	sp, #44	; 0x2c
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800842c:	2800      	cmp	r0, #0
 800842e:	f000 8086 	beq.w	800853e <HAL_PCD_Init+0x116>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8008432:	f890 33bd 	ldrb.w	r3, [r0, #957]	; 0x3bd
  USBx = hpcd->Instance;
 8008436:	6804      	ldr	r4, [r0, #0]
  if (hpcd->State == HAL_PCD_STATE_RESET)
 8008438:	4605      	mov	r5, r0
 800843a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800843e:	2b00      	cmp	r3, #0
 8008440:	d077      	beq.n	8008532 <HAL_PCD_Init+0x10a>
 8008442:	4620      	mov	r0, r4
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8008444:	2303      	movs	r3, #3
 8008446:	f885 33bd 	strb.w	r3, [r5, #957]	; 0x3bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800844a:	6be3      	ldr	r3, [r4, #60]	; 0x3c

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800844c:	462e      	mov	r6, r5
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800844e:	f413 7380 	ands.w	r3, r3, #256	; 0x100
    hpcd->Init.dma_enable = 0U;
 8008452:	bf08      	it	eq
 8008454:	612b      	streq	r3, [r5, #16]
  __HAL_PCD_DISABLE(hpcd);
 8008456:	f004 ff21 	bl	800d29c <USB_DisableGlobalInt>
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800845a:	f856 cb10 	ldr.w	ip, [r6], #16
 800845e:	4637      	mov	r7, r6
 8008460:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8008462:	466c      	mov	r4, sp
 8008464:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008466:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8008468:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800846a:	e897 0003 	ldmia.w	r7, {r0, r1}
 800846e:	e884 0003 	stmia.w	r4, {r0, r1}
 8008472:	1d2f      	adds	r7, r5, #4
 8008474:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 8008478:	4660      	mov	r0, ip
 800847a:	f004 fe2b 	bl	800d0d4 <USB_CoreInit>
 800847e:	4604      	mov	r4, r0
 8008480:	b130      	cbz	r0, 8008490 <HAL_PCD_Init+0x68>

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
    return HAL_ERROR;
 8008482:	2401      	movs	r4, #1
    hpcd->State = HAL_PCD_STATE_ERROR;
 8008484:	2302      	movs	r3, #2
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);

  return HAL_OK;
}
 8008486:	4620      	mov	r0, r4
    hpcd->State = HAL_PCD_STATE_ERROR;
 8008488:	f885 33bd 	strb.w	r3, [r5, #957]	; 0x3bd
}
 800848c:	b00b      	add	sp, #44	; 0x2c
 800848e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8008490:	4601      	mov	r1, r0
 8008492:	6828      	ldr	r0, [r5, #0]
 8008494:	f004 ff0a 	bl	800d2ac <USB_SetCurrentMode>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008498:	6868      	ldr	r0, [r5, #4]
 800849a:	b358      	cbz	r0, 80084f4 <HAL_PCD_Init+0xcc>
 800849c:	4622      	mov	r2, r4
    hpcd->IN_ep[i].is_in = 1U;
 800849e:	f04f 0e01 	mov.w	lr, #1
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80084a2:	4621      	mov	r1, r4
    hpcd->IN_ep[i].is_in = 1U;
 80084a4:	ebc2 03c2 	rsb	r3, r2, r2, lsl #3
 80084a8:	eb05 0383 	add.w	r3, r5, r3, lsl #2
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80084ac:	f102 0c01 	add.w	ip, r2, #1
    hpcd->IN_ep[i].num = i;
 80084b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    hpcd->IN_ep[i].tx_fifo_num = i;
 80084b4:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80084b8:	fa5f f28c 	uxtb.w	r2, ip
 80084bc:	4282      	cmp	r2, r0
    hpcd->IN_ep[i].xfer_buff = 0U;
 80084be:	e9c3 1111 	strd	r1, r1, [r3, #68]	; 0x44
    hpcd->IN_ep[i].is_in = 1U;
 80084c2:	f883 e03d 	strb.w	lr, [r3, #61]	; 0x3d
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80084c6:	f883 103f 	strb.w	r1, [r3, #63]	; 0x3f
    hpcd->IN_ep[i].xfer_len = 0U;
 80084ca:	6519      	str	r1, [r3, #80]	; 0x50
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80084cc:	d3ea      	bcc.n	80084a4 <HAL_PCD_Init+0x7c>
    hpcd->OUT_ep[i].is_in = 0U;
 80084ce:	2200      	movs	r2, #0
 80084d0:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
 80084d4:	eb05 0383 	add.w	r3, r5, r3, lsl #2
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80084d8:	1c61      	adds	r1, r4, #1
    hpcd->OUT_ep[i].num = i;
 80084da:	f883 41fc 	strb.w	r4, [r3, #508]	; 0x1fc
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80084de:	b2cc      	uxtb	r4, r1
 80084e0:	4284      	cmp	r4, r0
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80084e2:	e9c3 2281 	strd	r2, r2, [r3, #516]	; 0x204
    hpcd->OUT_ep[i].is_in = 0U;
 80084e6:	f883 21fd 	strb.w	r2, [r3, #509]	; 0x1fd
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80084ea:	f883 21ff 	strb.w	r2, [r3, #511]	; 0x1ff
    hpcd->OUT_ep[i].xfer_len = 0U;
 80084ee:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80084f2:	d3ed      	bcc.n	80084d0 <HAL_PCD_Init+0xa8>
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80084f4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80084f6:	466c      	mov	r4, sp
 80084f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80084fa:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80084fc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80084fe:	e896 0003 	ldmia.w	r6, {r0, r1}
 8008502:	e884 0003 	stmia.w	r4, {r0, r1}
 8008506:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 800850a:	6828      	ldr	r0, [r5, #0]
 800850c:	f004 fee6 	bl	800d2dc <USB_DevInit>
 8008510:	4604      	mov	r4, r0
 8008512:	2800      	cmp	r0, #0
 8008514:	d1b5      	bne.n	8008482 <HAL_PCD_Init+0x5a>
  if (hpcd->Init.lpm_enable == 1U)
 8008516:	6a6b      	ldr	r3, [r5, #36]	; 0x24
  hpcd->USB_Address = 0U;
 8008518:	f885 0038 	strb.w	r0, [r5, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800851c:	2201      	movs	r2, #1
  if (hpcd->Init.lpm_enable == 1U)
 800851e:	4293      	cmp	r3, r2
  hpcd->State = HAL_PCD_STATE_READY;
 8008520:	f885 23bd 	strb.w	r2, [r5, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
 8008524:	d00f      	beq.n	8008546 <HAL_PCD_Init+0x11e>
  (void)USB_DevDisconnect(hpcd->Instance);
 8008526:	6828      	ldr	r0, [r5, #0]
 8008528:	f005 fa78 	bl	800da1c <USB_DevDisconnect>
}
 800852c:	4620      	mov	r0, r4
 800852e:	b00b      	add	sp, #44	; 0x2c
 8008530:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hpcd->Lock = HAL_UNLOCKED;
 8008532:	f880 23bc 	strb.w	r2, [r0, #956]	; 0x3bc
    HAL_PCD_MspInit(hpcd);
 8008536:	f7fc fa11 	bl	800495c <HAL_PCD_MspInit>
 800853a:	6828      	ldr	r0, [r5, #0]
 800853c:	e782      	b.n	8008444 <HAL_PCD_Init+0x1c>
    return HAL_ERROR;
 800853e:	2401      	movs	r4, #1
}
 8008540:	4620      	mov	r0, r4
 8008542:	b00b      	add	sp, #44	; 0x2c
 8008544:	bdf0      	pop	{r4, r5, r6, r7, pc}
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8008546:	4628      	mov	r0, r5
 8008548:	f000 fc42 	bl	8008dd0 <HAL_PCDEx_ActivateLPM>
 800854c:	e7eb      	b.n	8008526 <HAL_PCD_Init+0xfe>
 800854e:	bf00      	nop

08008550 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8008550:	b510      	push	{r4, lr}
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 8008552:	f890 33bc 	ldrb.w	r3, [r0, #956]	; 0x3bc
 8008556:	2b01      	cmp	r3, #1
{
 8008558:	4604      	mov	r4, r0
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800855a:	6800      	ldr	r0, [r0, #0]
  __HAL_LOCK(hpcd);
 800855c:	d012      	beq.n	8008584 <HAL_PCD_Start+0x34>
#if defined (USB_OTG_FS)
  if (hpcd->Init.battery_charging_enable == 1U)
 800855e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  __HAL_LOCK(hpcd);
 8008560:	2201      	movs	r2, #1
  if (hpcd->Init.battery_charging_enable == 1U)
 8008562:	4293      	cmp	r3, r2
  __HAL_LOCK(hpcd);
 8008564:	f884 23bc 	strb.w	r2, [r4, #956]	; 0x3bc
  if (hpcd->Init.battery_charging_enable == 1U)
 8008568:	d103      	bne.n	8008572 <HAL_PCD_Start+0x22>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800856a:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800856c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008570:	6383      	str	r3, [r0, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) */
  (void)USB_DevConnect(hpcd->Instance);
 8008572:	f005 fa45 	bl	800da00 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8008576:	6820      	ldr	r0, [r4, #0]
 8008578:	f004 fe88 	bl	800d28c <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 800857c:	2000      	movs	r0, #0
 800857e:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
  return HAL_OK;
}
 8008582:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8008584:	2002      	movs	r0, #2
}
 8008586:	bd10      	pop	{r4, pc}

08008588 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8008588:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800858c:	6806      	ldr	r6, [r0, #0]
{
 800858e:	b085      	sub	sp, #20
 8008590:	4604      	mov	r4, r0
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8008592:	4630      	mov	r0, r6
 8008594:	f005 fa82 	bl	800da9c <USB_GetMode>
 8008598:	b110      	cbz	r0, 80085a0 <HAL_PCD_IRQHandler+0x18>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
    }
  }
}
 800859a:	b005      	add	sp, #20
 800859c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80085a0:	4682      	mov	sl, r0
 80085a2:	6820      	ldr	r0, [r4, #0]
 80085a4:	f005 fa48 	bl	800da38 <USB_ReadInterrupts>
 80085a8:	2800      	cmp	r0, #0
 80085aa:	d0f6      	beq.n	800859a <HAL_PCD_IRQHandler+0x12>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80085ac:	6820      	ldr	r0, [r4, #0]
 80085ae:	f005 fa43 	bl	800da38 <USB_ReadInterrupts>
 80085b2:	f010 0f02 	tst.w	r0, #2
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80085b6:	6820      	ldr	r0, [r4, #0]
 80085b8:	bf1e      	ittt	ne
 80085ba:	6943      	ldrne	r3, [r0, #20]
 80085bc:	f003 0302 	andne.w	r3, r3, #2
 80085c0:	6143      	strne	r3, [r0, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80085c2:	f005 fa39 	bl	800da38 <USB_ReadInterrupts>
 80085c6:	f010 0f10 	tst.w	r0, #16
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80085ca:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80085cc:	d012      	beq.n	80085f4 <HAL_PCD_IRQHandler+0x6c>
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80085ce:	6983      	ldr	r3, [r0, #24]
 80085d0:	f023 0310 	bic.w	r3, r3, #16
 80085d4:	6183      	str	r3, [r0, #24]
      temp = USBx->GRXSTSP;
 80085d6:	6a35      	ldr	r5, [r6, #32]
      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80085d8:	f3c5 4343 	ubfx	r3, r5, #17, #4
 80085dc:	2b02      	cmp	r3, #2
      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80085de:	f005 070f 	and.w	r7, r5, #15
      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80085e2:	f000 825a 	beq.w	8008a9a <HAL_PCD_IRQHandler+0x512>
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80085e6:	2b06      	cmp	r3, #6
 80085e8:	f000 81aa 	beq.w	8008940 <HAL_PCD_IRQHandler+0x3b8>
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80085ec:	6983      	ldr	r3, [r0, #24]
 80085ee:	f043 0310 	orr.w	r3, r3, #16
 80085f2:	6183      	str	r3, [r0, #24]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80085f4:	f005 fa20 	bl	800da38 <USB_ReadInterrupts>
 80085f8:	f410 2f00 	tst.w	r0, #524288	; 0x80000
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80085fc:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80085fe:	f040 80c2 	bne.w	8008786 <HAL_PCD_IRQHandler+0x1fe>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8008602:	f005 fa19 	bl	800da38 <USB_ReadInterrupts>
 8008606:	f410 2f80 	tst.w	r0, #262144	; 0x40000
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800860a:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800860c:	d175      	bne.n	80086fa <HAL_PCD_IRQHandler+0x172>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800860e:	f005 fa13 	bl	800da38 <USB_ReadInterrupts>
 8008612:	2800      	cmp	r0, #0
 8008614:	db5d      	blt.n	80086d2 <HAL_PCD_IRQHandler+0x14a>
 8008616:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8008618:	f005 fa0e 	bl	800da38 <USB_ReadInterrupts>
 800861c:	0500      	lsls	r0, r0, #20
 800861e:	d44d      	bmi.n	80086bc <HAL_PCD_IRQHandler+0x134>
 8008620:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8008622:	f005 fa09 	bl	800da38 <USB_ReadInterrupts>
 8008626:	0102      	lsls	r2, r0, #4
 8008628:	d514      	bpl.n	8008654 <HAL_PCD_IRQHandler+0xcc>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800862a:	6822      	ldr	r2, [r4, #0]
 800862c:	6953      	ldr	r3, [r2, #20]
 800862e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008632:	6153      	str	r3, [r2, #20]
      if (hpcd->LPM_State == LPM_L0)
 8008634:	f894 33f4 	ldrb.w	r3, [r4, #1012]	; 0x3f4
 8008638:	2b00      	cmp	r3, #0
 800863a:	f040 816b 	bne.w	8008914 <HAL_PCD_IRQHandler+0x38c>
        hpcd->LPM_State = LPM_L1;
 800863e:	2101      	movs	r1, #1
 8008640:	f884 13f4 	strb.w	r1, [r4, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8008644:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8008646:	f3c3 0383 	ubfx	r3, r3, #2, #4
 800864a:	f8c4 33f8 	str.w	r3, [r4, #1016]	; 0x3f8
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800864e:	4620      	mov	r0, r4
 8008650:	f000 fbd4 	bl	8008dfc <HAL_PCDEx_LPM_Callback>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8008654:	6820      	ldr	r0, [r4, #0]
 8008656:	f005 f9ef 	bl	800da38 <USB_ReadInterrupts>
 800865a:	04c3      	lsls	r3, r0, #19
 800865c:	f100 810a 	bmi.w	8008874 <HAL_PCD_IRQHandler+0x2ec>
 8008660:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8008662:	f005 f9e9 	bl	800da38 <USB_ReadInterrupts>
 8008666:	f410 5f00 	tst.w	r0, #8192	; 0x2000
      (void)USB_ActivateSetup(hpcd->Instance);
 800866a:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800866c:	f040 80eb 	bne.w	8008846 <HAL_PCD_IRQHandler+0x2be>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8008670:	f005 f9e2 	bl	800da38 <USB_ReadInterrupts>
 8008674:	0707      	lsls	r7, r0, #28
 8008676:	f100 80dd 	bmi.w	8008834 <HAL_PCD_IRQHandler+0x2ac>
 800867a:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800867c:	f005 f9dc 	bl	800da38 <USB_ReadInterrupts>
 8008680:	02c6      	lsls	r6, r0, #11
 8008682:	f100 80cd 	bmi.w	8008820 <HAL_PCD_IRQHandler+0x298>
 8008686:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8008688:	f005 f9d6 	bl	800da38 <USB_ReadInterrupts>
 800868c:	0285      	lsls	r5, r0, #10
 800868e:	f100 80bd 	bmi.w	800880c <HAL_PCD_IRQHandler+0x284>
 8008692:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8008694:	f005 f9d0 	bl	800da38 <USB_ReadInterrupts>
 8008698:	0040      	lsls	r0, r0, #1
 800869a:	f100 80ae 	bmi.w	80087fa <HAL_PCD_IRQHandler+0x272>
 800869e:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80086a0:	f005 f9ca 	bl	800da38 <USB_ReadInterrupts>
 80086a4:	0741      	lsls	r1, r0, #29
 80086a6:	f57f af78 	bpl.w	800859a <HAL_PCD_IRQHandler+0x12>
      temp = hpcd->Instance->GOTGINT;
 80086aa:	6823      	ldr	r3, [r4, #0]
 80086ac:	685d      	ldr	r5, [r3, #4]
      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80086ae:	076a      	lsls	r2, r5, #29
 80086b0:	f100 8215 	bmi.w	8008ade <HAL_PCD_IRQHandler+0x556>
      hpcd->Instance->GOTGINT |= temp;
 80086b4:	685a      	ldr	r2, [r3, #4]
 80086b6:	432a      	orrs	r2, r5
 80086b8:	605a      	str	r2, [r3, #4]
 80086ba:	e76e      	b.n	800859a <HAL_PCD_IRQHandler+0x12>
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80086bc:	f8d6 3808 	ldr.w	r3, [r6, #2056]	; 0x808
 80086c0:	07d9      	lsls	r1, r3, #31
 80086c2:	f100 8208 	bmi.w	8008ad6 <HAL_PCD_IRQHandler+0x54e>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80086c6:	6820      	ldr	r0, [r4, #0]
 80086c8:	6943      	ldr	r3, [r0, #20]
 80086ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80086ce:	6143      	str	r3, [r0, #20]
 80086d0:	e7a7      	b.n	8008622 <HAL_PCD_IRQHandler+0x9a>
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80086d2:	f8d6 3804 	ldr.w	r3, [r6, #2052]	; 0x804
 80086d6:	f023 0301 	bic.w	r3, r3, #1
 80086da:	f8c6 3804 	str.w	r3, [r6, #2052]	; 0x804
      if (hpcd->LPM_State == LPM_L1)
 80086de:	f894 33f4 	ldrb.w	r3, [r4, #1012]	; 0x3f4
 80086e2:	2b01      	cmp	r3, #1
 80086e4:	f000 8125 	beq.w	8008932 <HAL_PCD_IRQHandler+0x3aa>
        HAL_PCD_ResumeCallback(hpcd);
 80086e8:	4620      	mov	r0, r4
 80086ea:	f7fc f999 	bl	8004a20 <HAL_PCD_ResumeCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80086ee:	6820      	ldr	r0, [r4, #0]
 80086f0:	6943      	ldr	r3, [r0, #20]
 80086f2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80086f6:	6143      	str	r3, [r0, #20]
 80086f8:	e78e      	b.n	8008618 <HAL_PCD_IRQHandler+0x90>
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80086fa:	f005 f9a9 	bl	800da50 <USB_ReadDevAllInEpInterrupt>
      while (ep_intr != 0U)
 80086fe:	4681      	mov	r9, r0
 8008700:	6820      	ldr	r0, [r4, #0]
 8008702:	f1b9 0f00 	cmp.w	r9, #0
 8008706:	d082      	beq.n	800860e <HAL_PCD_IRQHandler+0x86>
 8008708:	f506 6310 	add.w	r3, r6, #2304	; 0x900
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800870c:	e9cd 3600 	strd	r3, r6, [sp]
 8008710:	4625      	mov	r5, r4
      epnum = 0U;
 8008712:	f04f 0b00 	mov.w	fp, #0
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8008716:	f8cd a008 	str.w	sl, [sp, #8]
 800871a:	e007      	b.n	800872c <HAL_PCD_IRQHandler+0x1a4>
      while (ep_intr != 0U)
 800871c:	ea5f 0959 	movs.w	r9, r9, lsr #1
        epnum++;
 8008720:	f10b 0b01 	add.w	fp, fp, #1
      while (ep_intr != 0U)
 8008724:	f105 051c 	add.w	r5, r5, #28
 8008728:	f000 811d 	beq.w	8008966 <HAL_PCD_IRQHandler+0x3de>
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800872c:	f019 0f01 	tst.w	r9, #1
 8008730:	d0f4      	beq.n	800871c <HAL_PCD_IRQHandler+0x194>
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8008732:	fa5f f78b 	uxtb.w	r7, fp
 8008736:	4639      	mov	r1, r7
 8008738:	f005 f99c 	bl	800da74 <USB_ReadDevInEPInterrupt>
          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800873c:	07c3      	lsls	r3, r0, #31
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800873e:	4606      	mov	r6, r0
          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8008740:	f100 8114 	bmi.w	800896c <HAL_PCD_IRQHandler+0x3e4>
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8008744:	0730      	lsls	r0, r6, #28
 8008746:	d504      	bpl.n	8008752 <HAL_PCD_IRQHandler+0x1ca>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8008748:	9b00      	ldr	r3, [sp, #0]
 800874a:	eb03 134b 	add.w	r3, r3, fp, lsl #5
 800874e:	2208      	movs	r2, #8
 8008750:	609a      	str	r2, [r3, #8]
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8008752:	06f1      	lsls	r1, r6, #27
 8008754:	d504      	bpl.n	8008760 <HAL_PCD_IRQHandler+0x1d8>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8008756:	9b00      	ldr	r3, [sp, #0]
 8008758:	eb03 134b 	add.w	r3, r3, fp, lsl #5
 800875c:	2210      	movs	r2, #16
 800875e:	609a      	str	r2, [r3, #8]
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8008760:	0672      	lsls	r2, r6, #25
 8008762:	d504      	bpl.n	800876e <HAL_PCD_IRQHandler+0x1e6>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8008764:	9b00      	ldr	r3, [sp, #0]
 8008766:	eb03 134b 	add.w	r3, r3, fp, lsl #5
 800876a:	2240      	movs	r2, #64	; 0x40
 800876c:	609a      	str	r2, [r3, #8]
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800876e:	07b3      	lsls	r3, r6, #30
 8008770:	d504      	bpl.n	800877c <HAL_PCD_IRQHandler+0x1f4>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8008772:	9b00      	ldr	r3, [sp, #0]
 8008774:	eb03 134b 	add.w	r3, r3, fp, lsl #5
 8008778:	2202      	movs	r2, #2
 800877a:	609a      	str	r2, [r3, #8]
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800877c:	0636      	lsls	r6, r6, #24
 800877e:	f100 810c 	bmi.w	800899a <HAL_PCD_IRQHandler+0x412>
 8008782:	6820      	ldr	r0, [r4, #0]
 8008784:	e7ca      	b.n	800871c <HAL_PCD_IRQHandler+0x194>
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8008786:	f005 f95b 	bl	800da40 <USB_ReadDevAllOutEpInterrupt>
      while (ep_intr != 0U)
 800878a:	4605      	mov	r5, r0
 800878c:	6820      	ldr	r0, [r4, #0]
 800878e:	2d00      	cmp	r5, #0
 8008790:	f43f af37 	beq.w	8008602 <HAL_PCD_IRQHandler+0x7a>
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8008794:	f8df 9364 	ldr.w	r9, [pc, #868]	; 8008afc <HAL_PCD_IRQHandler+0x574>
      epnum = 0U;
 8008798:	2700      	movs	r7, #0
 800879a:	f506 6830 	add.w	r8, r6, #2816	; 0xb00
 800879e:	e004      	b.n	80087aa <HAL_PCD_IRQHandler+0x222>
      while (ep_intr != 0U)
 80087a0:	086d      	lsrs	r5, r5, #1
        epnum++;
 80087a2:	f107 0701 	add.w	r7, r7, #1
      while (ep_intr != 0U)
 80087a6:	f43f af2c 	beq.w	8008602 <HAL_PCD_IRQHandler+0x7a>
        if ((ep_intr & 0x1U) != 0U)
 80087aa:	07e9      	lsls	r1, r5, #31
 80087ac:	d5f8      	bpl.n	80087a0 <HAL_PCD_IRQHandler+0x218>
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80087ae:	b2f9      	uxtb	r1, r7
 80087b0:	9100      	str	r1, [sp, #0]
 80087b2:	f005 f955 	bl	800da60 <USB_ReadDevOutEPInterrupt>
          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80087b6:	f010 0f01 	tst.w	r0, #1
 80087ba:	9900      	ldr	r1, [sp, #0]
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80087bc:	4683      	mov	fp, r0
          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80087be:	f040 814e 	bne.w	8008a5e <HAL_PCD_IRQHandler+0x4d6>
 80087c2:	6820      	ldr	r0, [r4, #0]
          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80087c4:	f01b 0f08 	tst.w	fp, #8
 80087c8:	f040 8131 	bne.w	8008a2e <HAL_PCD_IRQHandler+0x4a6>
          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80087cc:	f01b 0f10 	tst.w	fp, #16
 80087d0:	d003      	beq.n	80087da <HAL_PCD_IRQHandler+0x252>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80087d2:	eb08 1347 	add.w	r3, r8, r7, lsl #5
 80087d6:	2210      	movs	r2, #16
 80087d8:	609a      	str	r2, [r3, #8]
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80087da:	f01b 0f20 	tst.w	fp, #32
 80087de:	d003      	beq.n	80087e8 <HAL_PCD_IRQHandler+0x260>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80087e0:	eb08 1347 	add.w	r3, r8, r7, lsl #5
 80087e4:	2220      	movs	r2, #32
 80087e6:	609a      	str	r2, [r3, #8]
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80087e8:	f41b 5f00 	tst.w	fp, #8192	; 0x2000
 80087ec:	d0d8      	beq.n	80087a0 <HAL_PCD_IRQHandler+0x218>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80087ee:	eb08 1347 	add.w	r3, r8, r7, lsl #5
 80087f2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80087f6:	609a      	str	r2, [r3, #8]
 80087f8:	e7d2      	b.n	80087a0 <HAL_PCD_IRQHandler+0x218>
      HAL_PCD_ConnectCallback(hpcd);
 80087fa:	4620      	mov	r0, r4
 80087fc:	f7fc f91c 	bl	8004a38 <HAL_PCD_ConnectCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8008800:	6820      	ldr	r0, [r4, #0]
 8008802:	6943      	ldr	r3, [r0, #20]
 8008804:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008808:	6143      	str	r3, [r0, #20]
 800880a:	e749      	b.n	80086a0 <HAL_PCD_IRQHandler+0x118>
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800880c:	4620      	mov	r0, r4
 800880e:	2100      	movs	r1, #0
 8008810:	f7fc f90a 	bl	8004a28 <HAL_PCD_ISOOUTIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8008814:	6820      	ldr	r0, [r4, #0]
 8008816:	6943      	ldr	r3, [r0, #20]
 8008818:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800881c:	6143      	str	r3, [r0, #20]
 800881e:	e739      	b.n	8008694 <HAL_PCD_IRQHandler+0x10c>
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8008820:	4620      	mov	r0, r4
 8008822:	2100      	movs	r1, #0
 8008824:	f7fc f904 	bl	8004a30 <HAL_PCD_ISOINIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8008828:	6820      	ldr	r0, [r4, #0]
 800882a:	6943      	ldr	r3, [r0, #20]
 800882c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008830:	6143      	str	r3, [r0, #20]
 8008832:	e729      	b.n	8008688 <HAL_PCD_IRQHandler+0x100>
      HAL_PCD_SOFCallback(hpcd);
 8008834:	4620      	mov	r0, r4
 8008836:	f7fc f8dd 	bl	80049f4 <HAL_PCD_SOFCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800883a:	6820      	ldr	r0, [r4, #0]
 800883c:	6943      	ldr	r3, [r0, #20]
 800883e:	f003 0308 	and.w	r3, r3, #8
 8008842:	6143      	str	r3, [r0, #20]
 8008844:	e71a      	b.n	800867c <HAL_PCD_IRQHandler+0xf4>
      (void)USB_ActivateSetup(hpcd->Instance);
 8008846:	f005 f92d 	bl	800daa4 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800884a:	6820      	ldr	r0, [r4, #0]
 800884c:	f004 fe2a 	bl	800d4a4 <USB_GetDevSpeed>
 8008850:	60e0      	str	r0, [r4, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8008852:	6825      	ldr	r5, [r4, #0]
 8008854:	f001 f8b6 	bl	80099c4 <HAL_RCC_GetHCLKFreq>
 8008858:	7b22      	ldrb	r2, [r4, #12]
 800885a:	4601      	mov	r1, r0
 800885c:	4628      	mov	r0, r5
 800885e:	f004 fc9d 	bl	800d19c <USB_SetTurnaroundTime>
      HAL_PCD_ResetCallback(hpcd);
 8008862:	4620      	mov	r0, r4
 8008864:	f7fc f8ca 	bl	80049fc <HAL_PCD_ResetCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8008868:	6820      	ldr	r0, [r4, #0]
 800886a:	6943      	ldr	r3, [r0, #20]
 800886c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008870:	6143      	str	r3, [r0, #20]
 8008872:	e6fd      	b.n	8008670 <HAL_PCD_IRQHandler+0xe8>
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8008874:	f8d6 3804 	ldr.w	r3, [r6, #2052]	; 0x804
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8008878:	6820      	ldr	r0, [r4, #0]
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800887a:	f023 0301 	bic.w	r3, r3, #1
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800887e:	2110      	movs	r1, #16
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8008880:	f8c6 3804 	str.w	r3, [r6, #2052]	; 0x804
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8008884:	f004 fdfc 	bl	800d480 <USB_FlushTxFifo>
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008888:	6860      	ldr	r0, [r4, #4]
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800888a:	f506 6500 	add.w	r5, r6, #2048	; 0x800
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800888e:	b300      	cbz	r0, 80088d2 <HAL_PCD_IRQHandler+0x34a>
 8008890:	f506 6310 	add.w	r3, r6, #2304	; 0x900
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8008894:	f64f 317f 	movw	r1, #64383	; 0xfb7f
 8008898:	6099      	str	r1, [r3, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800889a:	681a      	ldr	r2, [r3, #0]
 800889c:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 80088a0:	601a      	str	r2, [r3, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80088a2:	681a      	ldr	r2, [r3, #0]
 80088a4:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 80088a8:	601a      	str	r2, [r3, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80088aa:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80088ae:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80088b2:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 80088b6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80088ba:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80088be:	f10a 0a01 	add.w	sl, sl, #1
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80088c2:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80088c6:	4582      	cmp	sl, r0
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80088c8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80088cc:	f103 0320 	add.w	r3, r3, #32
 80088d0:	d1e2      	bne.n	8008898 <HAL_PCD_IRQHandler+0x310>
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80088d2:	69eb      	ldr	r3, [r5, #28]
      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80088d4:	6b22      	ldr	r2, [r4, #48]	; 0x30
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80088d6:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80088da:	61eb      	str	r3, [r5, #28]
      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80088dc:	b9f2      	cbnz	r2, 800891c <HAL_PCD_IRQHandler+0x394>
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80088de:	696b      	ldr	r3, [r5, #20]
 80088e0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80088e4:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80088e8:	616b      	str	r3, [r5, #20]
        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80088ea:	692b      	ldr	r3, [r5, #16]
 80088ec:	f043 030b 	orr.w	r3, r3, #11
 80088f0:	612b      	str	r3, [r5, #16]
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80088f2:	f8d6 3800 	ldr.w	r3, [r6, #2048]	; 0x800
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80088f6:	6820      	ldr	r0, [r4, #0]
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80088f8:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80088fc:	f8c6 3800 	str.w	r3, [r6, #2048]	; 0x800
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8008900:	f504 7171 	add.w	r1, r4, #964	; 0x3c4
 8008904:	f005 f8de 	bl	800dac4 <USB_EP0_OutStart>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8008908:	6820      	ldr	r0, [r4, #0]
 800890a:	6943      	ldr	r3, [r0, #20]
 800890c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008910:	6143      	str	r3, [r0, #20]
 8008912:	e6a6      	b.n	8008662 <HAL_PCD_IRQHandler+0xda>
        HAL_PCD_SuspendCallback(hpcd);
 8008914:	4620      	mov	r0, r4
 8008916:	f7fc f87f 	bl	8004a18 <HAL_PCD_SuspendCallback>
 800891a:	e69b      	b.n	8008654 <HAL_PCD_IRQHandler+0xcc>
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800891c:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
 8008920:	f043 030b 	orr.w	r3, r3, #11
 8008924:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8008928:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 800892a:	f043 030b 	orr.w	r3, r3, #11
 800892e:	646b      	str	r3, [r5, #68]	; 0x44
 8008930:	e7df      	b.n	80088f2 <HAL_PCD_IRQHandler+0x36a>
        hpcd->LPM_State = LPM_L0;
 8008932:	2100      	movs	r1, #0
 8008934:	f884 13f4 	strb.w	r1, [r4, #1012]	; 0x3f4
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8008938:	4620      	mov	r0, r4
 800893a:	f000 fa5f 	bl	8008dfc <HAL_PCDEx_LPM_Callback>
 800893e:	e6d6      	b.n	80086ee <HAL_PCD_IRQHandler+0x166>
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8008940:	2208      	movs	r2, #8
 8008942:	f504 7171 	add.w	r1, r4, #964	; 0x3c4
 8008946:	4630      	mov	r0, r6
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8008948:	ebc7 07c7 	rsb	r7, r7, r7, lsl #3
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800894c:	f004 ffdc 	bl	800d908 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8008950:	eb04 0287 	add.w	r2, r4, r7, lsl #2
 8008954:	f3c5 130a 	ubfx	r3, r5, #4, #11
 8008958:	f8d2 1214 	ldr.w	r1, [r2, #532]	; 0x214
 800895c:	6820      	ldr	r0, [r4, #0]
 800895e:	440b      	add	r3, r1
 8008960:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214
 8008964:	e642      	b.n	80085ec <HAL_PCD_IRQHandler+0x64>
 8008966:	e9dd 6a01 	ldrd	r6, sl, [sp, #4]
 800896a:	e650      	b.n	800860e <HAL_PCD_IRQHandler+0x86>
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800896c:	9b01      	ldr	r3, [sp, #4]
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800896e:	f00b 000f 	and.w	r0, fp, #15
 8008972:	2201      	movs	r2, #1
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8008974:	f8d3 1834 	ldr.w	r1, [r3, #2100]	; 0x834
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8008978:	fa02 f000 	lsl.w	r0, r2, r0
 800897c:	9a00      	ldr	r2, [sp, #0]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800897e:	ea21 0100 	bic.w	r1, r1, r0
 8008982:	eb02 124b 	add.w	r2, r2, fp, lsl #5
 8008986:	f8c3 1834 	str.w	r1, [r3, #2100]	; 0x834
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800898a:	4613      	mov	r3, r2
 800898c:	2201      	movs	r2, #1
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800898e:	4639      	mov	r1, r7
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8008990:	609a      	str	r2, [r3, #8]
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8008992:	4620      	mov	r0, r4
 8008994:	f7fc f824 	bl	80049e0 <HAL_PCD_DataInStageCallback>
 8008998:	e6d4      	b.n	8008744 <HAL_PCD_IRQHandler+0x1bc>
  if (ep->xfer_count > ep->xfer_len)
 800899a:	e9d5 1314 	ldrd	r1, r3, [r5, #80]	; 0x50
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800899e:	f8d4 8000 	ldr.w	r8, [r4]
  if (ep->xfer_count > ep->xfer_len)
 80089a2:	428b      	cmp	r3, r1
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80089a4:	4640      	mov	r0, r8
  if (ep->xfer_count > ep->xfer_len)
 80089a6:	f63f aeb9 	bhi.w	800871c <HAL_PCD_IRQHandler+0x194>
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80089aa:	f508 6a10 	add.w	sl, r8, #2304	; 0x900
  len32b = (len + 3U) / 4U;
 80089ae:	6c6a      	ldr	r2, [r5, #68]	; 0x44
  uint32_t USBx_BASE = (uint32_t)USBx;
 80089b0:	f8cd 800c 	str.w	r8, [sp, #12]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80089b4:	eb0a 1a4b 	add.w	sl, sl, fp, lsl #5
  len = ep->xfer_len - ep->xfer_count;
 80089b8:	eba1 0c03 	sub.w	ip, r1, r3
  len32b = (len + 3U) / 4U;
 80089bc:	4562      	cmp	r2, ip
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80089be:	f8da 6018 	ldr.w	r6, [sl, #24]
  len32b = (len + 3U) / 4U;
 80089c2:	bf28      	it	cs
 80089c4:	4662      	movcs	r2, ip
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80089c6:	b2b6      	uxth	r6, r6
  len32b = (len + 3U) / 4U;
 80089c8:	3203      	adds	r2, #3
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80089ca:	ebb6 0f92 	cmp.w	r6, r2, lsr #2
 80089ce:	d217      	bcs.n	8008a00 <HAL_PCD_IRQHandler+0x478>
 80089d0:	e08e      	b.n	8008af0 <HAL_PCD_IRQHandler+0x568>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80089d2:	b1d9      	cbz	r1, 8008a0c <HAL_PCD_IRQHandler+0x484>
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 80089d4:	e9d5 3111 	ldrd	r3, r1, [r5, #68]	; 0x44
 80089d8:	429e      	cmp	r6, r3
 80089da:	bf28      	it	cs
 80089dc:	461e      	movcs	r6, r3
 80089de:	b2b3      	uxth	r3, r6
 80089e0:	f004 ff82 	bl	800d8e8 <USB_WritePacket>
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80089e4:	f8da 2018 	ldr.w	r2, [sl, #24]
    ep->xfer_buff  += len;
 80089e8:	6ca9      	ldr	r1, [r5, #72]	; 0x48
    ep->xfer_count += len;
 80089ea:	6d6b      	ldr	r3, [r5, #84]	; 0x54
    ep->xfer_buff  += len;
 80089ec:	4431      	add	r1, r6
    ep->xfer_count += len;
 80089ee:	4433      	add	r3, r6
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80089f0:	b292      	uxth	r2, r2
    len32b = (len + 3U) / 4U;
 80089f2:	3603      	adds	r6, #3
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80089f4:	ebb2 0f96 	cmp.w	r2, r6, lsr #2
    ep->xfer_buff  += len;
 80089f8:	64a9      	str	r1, [r5, #72]	; 0x48
    ep->xfer_count += len;
 80089fa:	656b      	str	r3, [r5, #84]	; 0x54
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80089fc:	d374      	bcc.n	8008ae8 <HAL_PCD_IRQHandler+0x560>
 80089fe:	6d29      	ldr	r1, [r5, #80]	; 0x50
 8008a00:	4299      	cmp	r1, r3
    len = ep->xfer_len - ep->xfer_count;
 8008a02:	eba1 0603 	sub.w	r6, r1, r3
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 8008a06:	463a      	mov	r2, r7
 8008a08:	4640      	mov	r0, r8
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8008a0a:	d8e2      	bhi.n	80089d2 <HAL_PCD_IRQHandler+0x44a>
 8008a0c:	f8d4 8000 	ldr.w	r8, [r4]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8008a10:	9b03      	ldr	r3, [sp, #12]
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8008a12:	2001      	movs	r0, #1
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8008a14:	f503 6100 	add.w	r1, r3, #2048	; 0x800
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8008a18:	f00b 020f 	and.w	r2, fp, #15
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8008a1c:	f8d3 3834 	ldr.w	r3, [r3, #2100]	; 0x834
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8008a20:	fa00 f202 	lsl.w	r2, r0, r2
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8008a24:	ea23 0302 	bic.w	r3, r3, r2
 8008a28:	4640      	mov	r0, r8
 8008a2a:	634b      	str	r3, [r1, #52]	; 0x34
 8008a2c:	e676      	b.n	800871c <HAL_PCD_IRQHandler+0x194>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8008a2e:	eb08 1347 	add.w	r3, r8, r7, lsl #5
 8008a32:	2208      	movs	r2, #8
 8008a34:	609a      	str	r2, [r3, #8]
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8008a36:	6c02      	ldr	r2, [r0, #64]	; 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8008a38:	eb00 1347 	add.w	r3, r0, r7, lsl #5

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008a3c:	482e      	ldr	r0, [pc, #184]	; (8008af8 <HAL_PCD_IRQHandler+0x570>)
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8008a3e:	f8d3 1b08 	ldr.w	r1, [r3, #2824]	; 0xb08
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008a42:	4282      	cmp	r2, r0
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8008a44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008a48:	d904      	bls.n	8008a54 <HAL_PCD_IRQHandler+0x4cc>
 8008a4a:	040a      	lsls	r2, r1, #16
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008a4c:	bf44      	itt	mi
 8008a4e:	f44f 4200 	movmi.w	r2, #32768	; 0x8000
 8008a52:	609a      	strmi	r2, [r3, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8008a54:	4620      	mov	r0, r4
 8008a56:	f7fb ffb3 	bl	80049c0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 8008a5a:	6820      	ldr	r0, [r4, #0]
 8008a5c:	e6b6      	b.n	80087cc <HAL_PCD_IRQHandler+0x244>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8008a5e:	eb08 1347 	add.w	r3, r8, r7, lsl #5
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008a62:	6820      	ldr	r0, [r4, #0]
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8008a64:	2201      	movs	r2, #1
 8008a66:	609a      	str	r2, [r3, #8]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8008a68:	6c02      	ldr	r2, [r0, #64]	; 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8008a6a:	f500 6330 	add.w	r3, r0, #2816	; 0xb00
 8008a6e:	eb03 1347 	add.w	r3, r3, r7, lsl #5
  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8008a72:	454a      	cmp	r2, r9
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8008a74:	f8d3 c008 	ldr.w	ip, [r3, #8]
  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8008a78:	d10b      	bne.n	8008a92 <HAL_PCD_IRQHandler+0x50a>
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8008a7a:	f41c 4f00 	tst.w	ip, #32768	; 0x8000
 8008a7e:	d003      	beq.n	8008a88 <HAL_PCD_IRQHandler+0x500>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008a80:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8008a84:	609a      	str	r2, [r3, #8]
 8008a86:	e69d      	b.n	80087c4 <HAL_PCD_IRQHandler+0x23c>
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8008a88:	f01c 0f20 	tst.w	ip, #32
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8008a8c:	bf1c      	itt	ne
 8008a8e:	2220      	movne	r2, #32
 8008a90:	609a      	strne	r2, [r3, #8]
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8008a92:	4620      	mov	r0, r4
 8008a94:	f7fb ff9a 	bl	80049cc <HAL_PCD_DataOutStageCallback>
 8008a98:	e693      	b.n	80087c2 <HAL_PCD_IRQHandler+0x23a>
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8008a9a:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8008a9e:	421d      	tst	r5, r3
 8008aa0:	f43f ada4 	beq.w	80085ec <HAL_PCD_IRQHandler+0x64>
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8008aa4:	ebc7 07c7 	rsb	r7, r7, r7, lsl #3
 8008aa8:	eb04 0787 	add.w	r7, r4, r7, lsl #2
 8008aac:	f3c5 120a 	ubfx	r2, r5, #4, #11
 8008ab0:	f8d7 1208 	ldr.w	r1, [r7, #520]	; 0x208
 8008ab4:	4630      	mov	r0, r6
 8008ab6:	f004 ff27 	bl	800d908 <USB_ReadPacket>
          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8008aba:	f8d7 2208 	ldr.w	r2, [r7, #520]	; 0x208
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8008abe:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8008ac2:	6820      	ldr	r0, [r4, #0]
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8008ac4:	f3c5 150a 	ubfx	r5, r5, #4, #11
          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8008ac8:	442a      	add	r2, r5
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8008aca:	442b      	add	r3, r5
          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8008acc:	f8c7 2208 	str.w	r2, [r7, #520]	; 0x208
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8008ad0:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
 8008ad4:	e58a      	b.n	80085ec <HAL_PCD_IRQHandler+0x64>
        HAL_PCD_SuspendCallback(hpcd);
 8008ad6:	4620      	mov	r0, r4
 8008ad8:	f7fb ff9e 	bl	8004a18 <HAL_PCD_SuspendCallback>
 8008adc:	e5f3      	b.n	80086c6 <HAL_PCD_IRQHandler+0x13e>
        HAL_PCD_DisconnectCallback(hpcd);
 8008ade:	4620      	mov	r0, r4
 8008ae0:	f7fb ffae 	bl	8004a40 <HAL_PCD_DisconnectCallback>
 8008ae4:	6823      	ldr	r3, [r4, #0]
 8008ae6:	e5e5      	b.n	80086b4 <HAL_PCD_IRQHandler+0x12c>
 8008ae8:	f8d4 8000 	ldr.w	r8, [r4]
 8008aec:	6d29      	ldr	r1, [r5, #80]	; 0x50
 8008aee:	4640      	mov	r0, r8
  if (ep->xfer_len <= ep->xfer_count)
 8008af0:	428b      	cmp	r3, r1
 8008af2:	f4ff ae13 	bcc.w	800871c <HAL_PCD_IRQHandler+0x194>
 8008af6:	e78b      	b.n	8008a10 <HAL_PCD_IRQHandler+0x488>
 8008af8:	4f54300a 	.word	0x4f54300a
 8008afc:	4f54310a 	.word	0x4f54310a

08008b00 <HAL_PCD_SetAddress>:
  __HAL_LOCK(hpcd);
 8008b00:	f890 23bc 	ldrb.w	r2, [r0, #956]	; 0x3bc
 8008b04:	2a01      	cmp	r2, #1
 8008b06:	d00d      	beq.n	8008b24 <HAL_PCD_SetAddress+0x24>
{
 8008b08:	b510      	push	{r4, lr}
  __HAL_LOCK(hpcd);
 8008b0a:	2201      	movs	r2, #1
 8008b0c:	4604      	mov	r4, r0
  hpcd->USB_Address = address;
 8008b0e:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
  __HAL_LOCK(hpcd);
 8008b12:	f880 23bc 	strb.w	r2, [r0, #956]	; 0x3bc
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8008b16:	6800      	ldr	r0, [r0, #0]
 8008b18:	f004 ff62 	bl	800d9e0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8008b1c:	2000      	movs	r0, #0
 8008b1e:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
}
 8008b22:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8008b24:	2002      	movs	r0, #2
}
 8008b26:	4770      	bx	lr

08008b28 <HAL_PCD_EP_Open>:
{
 8008b28:	b570      	push	{r4, r5, r6, lr}
 8008b2a:	f001 050f 	and.w	r5, r1, #15
  if ((ep_addr & 0x80U) == 0x80U)
 8008b2e:	f011 0f80 	tst.w	r1, #128	; 0x80
    ep->is_in = 1U;
 8008b32:	ebc5 01c5 	rsb	r1, r5, r5, lsl #3
{
 8008b36:	4606      	mov	r6, r0
    ep->is_in = 1U;
 8008b38:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008b3c:	f04f 041c 	mov.w	r4, #28
  if ((ep_addr & 0x80U) == 0x80U)
 8008b40:	d11e      	bne.n	8008b80 <HAL_PCD_EP_Open+0x58>
    ep->is_in = 0U;
 8008b42:	2000      	movs	r0, #0
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008b44:	fb04 6405 	mla	r4, r4, r5, r6
    ep->is_in = 0U;
 8008b48:	f881 01fd 	strb.w	r0, [r1, #509]	; 0x1fd
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008b4c:	f504 71fe 	add.w	r1, r4, #508	; 0x1fc
  if (ep->is_in != 0U)
 8008b50:	7848      	ldrb	r0, [r1, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008b52:	700d      	strb	r5, [r1, #0]
  ep->maxpacket = ep_mps;
 8008b54:	608a      	str	r2, [r1, #8]
  ep->type = ep_type;
 8008b56:	70cb      	strb	r3, [r1, #3]
  if (ep->is_in != 0U)
 8008b58:	b100      	cbz	r0, 8008b5c <HAL_PCD_EP_Open+0x34>
    ep->tx_fifo_num = ep->num;
 8008b5a:	80cd      	strh	r5, [r1, #6]
  if (ep_type == EP_TYPE_BULK)
 8008b5c:	2b02      	cmp	r3, #2
    ep->data_pid_start = 0U;
 8008b5e:	bf04      	itt	eq
 8008b60:	2300      	moveq	r3, #0
 8008b62:	710b      	strbeq	r3, [r1, #4]
  __HAL_LOCK(hpcd);
 8008b64:	f896 33bc 	ldrb.w	r3, [r6, #956]	; 0x3bc
 8008b68:	2b01      	cmp	r3, #1
 8008b6a:	d011      	beq.n	8008b90 <HAL_PCD_EP_Open+0x68>
 8008b6c:	2301      	movs	r3, #1
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8008b6e:	6830      	ldr	r0, [r6, #0]
  __HAL_LOCK(hpcd);
 8008b70:	f886 33bc 	strb.w	r3, [r6, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8008b74:	f004 fca0 	bl	800d4b8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8008b78:	2000      	movs	r0, #0
 8008b7a:	f886 03bc 	strb.w	r0, [r6, #956]	; 0x3bc
}
 8008b7e:	bd70      	pop	{r4, r5, r6, pc}
    ep->is_in = 1U;
 8008b80:	2001      	movs	r0, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008b82:	fb04 6405 	mla	r4, r4, r5, r6
    ep->is_in = 1U;
 8008b86:	f881 003d 	strb.w	r0, [r1, #61]	; 0x3d
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008b8a:	f104 013c 	add.w	r1, r4, #60	; 0x3c
    ep->is_in = 1U;
 8008b8e:	e7df      	b.n	8008b50 <HAL_PCD_EP_Open+0x28>
  __HAL_LOCK(hpcd);
 8008b90:	2002      	movs	r0, #2
}
 8008b92:	bd70      	pop	{r4, r5, r6, pc}

08008b94 <HAL_PCD_EP_Close>:
  if ((ep_addr & 0x80U) == 0x80U)
 8008b94:	f001 030f 	and.w	r3, r1, #15
    ep->is_in = 1U;
 8008b98:	ebc3 02c3 	rsb	r2, r3, r3, lsl #3
  if ((ep_addr & 0x80U) == 0x80U)
 8008b9c:	f011 0f80 	tst.w	r1, #128	; 0x80
{
 8008ba0:	b510      	push	{r4, lr}
    ep->is_in = 1U;
 8008ba2:	eb00 0282 	add.w	r2, r0, r2, lsl #2
{
 8008ba6:	4604      	mov	r4, r0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008ba8:	f04f 011c 	mov.w	r1, #28
  if ((ep_addr & 0x80U) == 0x80U)
 8008bac:	d115      	bne.n	8008bda <HAL_PCD_EP_Close+0x46>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008bae:	fb01 4103 	mla	r1, r1, r3, r4
 8008bb2:	f501 71fe 	add.w	r1, r1, #508	; 0x1fc
    ep->is_in = 0U;
 8008bb6:	2000      	movs	r0, #0
 8008bb8:	f882 01fd 	strb.w	r0, [r2, #509]	; 0x1fd
  ep->num   = ep_addr & EP_ADDR_MSK;
 8008bbc:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 8008bbe:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 8008bc2:	2b01      	cmp	r3, #1
 8008bc4:	d014      	beq.n	8008bf0 <HAL_PCD_EP_Close+0x5c>
 8008bc6:	2301      	movs	r3, #1
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8008bc8:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8008bca:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8008bce:	f004 fcbf 	bl	800d550 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8008bd2:	2000      	movs	r0, #0
 8008bd4:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
}
 8008bd8:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008bda:	fb01 4103 	mla	r1, r1, r3, r4
 8008bde:	313c      	adds	r1, #60	; 0x3c
    ep->is_in = 1U;
 8008be0:	2001      	movs	r0, #1
 8008be2:	f882 003d 	strb.w	r0, [r2, #61]	; 0x3d
  ep->num   = ep_addr & EP_ADDR_MSK;
 8008be6:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 8008be8:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 8008bec:	2b01      	cmp	r3, #1
 8008bee:	d1ea      	bne.n	8008bc6 <HAL_PCD_EP_Close+0x32>
 8008bf0:	2002      	movs	r0, #2
}
 8008bf2:	bd10      	pop	{r4, pc}

08008bf4 <HAL_PCD_EP_Receive>:
{
 8008bf4:	b538      	push	{r3, r4, r5, lr}
 8008bf6:	f001 040f 	and.w	r4, r1, #15
  ep->xfer_buff = pBuf;
 8008bfa:	ebc4 05c4 	rsb	r5, r4, r4, lsl #3
 8008bfe:	eb00 0585 	add.w	r5, r0, r5, lsl #2
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008c02:	211c      	movs	r1, #28
 8008c04:	fb01 0104 	mla	r1, r1, r4, r0
  ep->xfer_buff = pBuf;
 8008c08:	f8c5 2208 	str.w	r2, [r5, #520]	; 0x208
  ep->xfer_count = 0U;
 8008c0c:	2200      	movs	r2, #0
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8008c0e:	6800      	ldr	r0, [r0, #0]
  ep->xfer_len = len;
 8008c10:	f8c5 3210 	str.w	r3, [r5, #528]	; 0x210
  ep->num = ep_addr & EP_ADDR_MSK;
 8008c14:	f885 41fc 	strb.w	r4, [r5, #508]	; 0x1fc
  ep->xfer_count = 0U;
 8008c18:	f8c5 2214 	str.w	r2, [r5, #532]	; 0x214
  ep->is_in = 0U;
 8008c1c:	f885 21fd 	strb.w	r2, [r5, #509]	; 0x1fd
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008c20:	f501 71fe 	add.w	r1, r1, #508	; 0x1fc
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8008c24:	b91c      	cbnz	r4, 8008c2e <HAL_PCD_EP_Receive+0x3a>
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8008c26:	f004 fdcf 	bl	800d7c8 <USB_EP0StartXfer>
}
 8008c2a:	2000      	movs	r0, #0
 8008c2c:	bd38      	pop	{r3, r4, r5, pc}
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8008c2e:	f004 fcf1 	bl	800d614 <USB_EPStartXfer>
}
 8008c32:	2000      	movs	r0, #0
 8008c34:	bd38      	pop	{r3, r4, r5, pc}
 8008c36:	bf00      	nop

08008c38 <HAL_PCD_EP_GetRxCount>:
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8008c38:	f001 010f 	and.w	r1, r1, #15
 8008c3c:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8008c40:	eb00 0181 	add.w	r1, r0, r1, lsl #2
}
 8008c44:	f8d1 0214 	ldr.w	r0, [r1, #532]	; 0x214
 8008c48:	4770      	bx	lr
 8008c4a:	bf00      	nop

08008c4c <HAL_PCD_EP_Transmit>:
{
 8008c4c:	b538      	push	{r3, r4, r5, lr}
 8008c4e:	f001 040f 	and.w	r4, r1, #15
  ep->xfer_buff = pBuf;
 8008c52:	ebc4 05c4 	rsb	r5, r4, r4, lsl #3
 8008c56:	eb00 0585 	add.w	r5, r0, r5, lsl #2
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008c5a:	211c      	movs	r1, #28
 8008c5c:	fb01 0104 	mla	r1, r1, r4, r0
  ep->xfer_buff = pBuf;
 8008c60:	64aa      	str	r2, [r5, #72]	; 0x48
  ep->xfer_len = len;
 8008c62:	652b      	str	r3, [r5, #80]	; 0x50
  ep->xfer_count = 0U;
 8008c64:	2200      	movs	r2, #0
  ep->is_in = 1U;
 8008c66:	2301      	movs	r3, #1
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8008c68:	6800      	ldr	r0, [r0, #0]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008c6a:	f885 403c 	strb.w	r4, [r5, #60]	; 0x3c
  ep->xfer_count = 0U;
 8008c6e:	656a      	str	r2, [r5, #84]	; 0x54
  ep->is_in = 1U;
 8008c70:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008c74:	313c      	adds	r1, #60	; 0x3c
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8008c76:	b91c      	cbnz	r4, 8008c80 <HAL_PCD_EP_Transmit+0x34>
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8008c78:	f004 fda6 	bl	800d7c8 <USB_EP0StartXfer>
}
 8008c7c:	2000      	movs	r0, #0
 8008c7e:	bd38      	pop	{r3, r4, r5, pc}
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8008c80:	f004 fcc8 	bl	800d614 <USB_EPStartXfer>
}
 8008c84:	2000      	movs	r0, #0
 8008c86:	bd38      	pop	{r3, r4, r5, pc}

08008c88 <HAL_PCD_EP_SetStall>:
{
 8008c88:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8008c8a:	6843      	ldr	r3, [r0, #4]
 8008c8c:	f001 050f 	and.w	r5, r1, #15
 8008c90:	429d      	cmp	r5, r3
 8008c92:	d833      	bhi.n	8008cfc <HAL_PCD_EP_SetStall+0x74>
  if ((0x80U & ep_addr) == 0x80U)
 8008c94:	060b      	lsls	r3, r1, #24
 8008c96:	4604      	mov	r4, r0
 8008c98:	d41c      	bmi.n	8008cd4 <HAL_PCD_EP_SetStall+0x4c>
    ep->is_in = 0U;
 8008c9a:	ebc1 03c1 	rsb	r3, r1, r1, lsl #3
 8008c9e:	eb00 0383 	add.w	r3, r0, r3, lsl #2
    ep = &hpcd->OUT_ep[ep_addr];
 8008ca2:	201c      	movs	r0, #28
 8008ca4:	fb00 4101 	mla	r1, r0, r1, r4
    ep->is_in = 0U;
 8008ca8:	2200      	movs	r2, #0
    ep = &hpcd->OUT_ep[ep_addr];
 8008caa:	f501 71fe 	add.w	r1, r1, #508	; 0x1fc
    ep->is_in = 0U;
 8008cae:	f883 21fd 	strb.w	r2, [r3, #509]	; 0x1fd
  ep->is_stall = 1U;
 8008cb2:	2301      	movs	r3, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 8008cb4:	700d      	strb	r5, [r1, #0]
  ep->is_stall = 1U;
 8008cb6:	708b      	strb	r3, [r1, #2]
  __HAL_LOCK(hpcd);
 8008cb8:	f894 23bc 	ldrb.w	r2, [r4, #956]	; 0x3bc
 8008cbc:	429a      	cmp	r2, r3
 8008cbe:	d01b      	beq.n	8008cf8 <HAL_PCD_EP_SetStall+0x70>
  (void)USB_EPSetStall(hpcd->Instance, ep);
 8008cc0:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8008cc2:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_EPSetStall(hpcd->Instance, ep);
 8008cc6:	f004 fe31 	bl	800d92c <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8008cca:	b1cd      	cbz	r5, 8008d00 <HAL_PCD_EP_SetStall+0x78>
  __HAL_UNLOCK(hpcd);
 8008ccc:	2000      	movs	r0, #0
 8008cce:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
}
 8008cd2:	bd38      	pop	{r3, r4, r5, pc}
    ep->is_in = 1U;
 8008cd4:	ebc5 03c5 	rsb	r3, r5, r5, lsl #3
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008cd8:	211c      	movs	r1, #28
 8008cda:	fb01 0105 	mla	r1, r1, r5, r0
    ep->is_in = 1U;
 8008cde:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8008ce2:	2201      	movs	r2, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008ce4:	313c      	adds	r1, #60	; 0x3c
    ep->is_in = 1U;
 8008ce6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  ep->is_stall = 1U;
 8008cea:	2301      	movs	r3, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 8008cec:	700d      	strb	r5, [r1, #0]
  ep->is_stall = 1U;
 8008cee:	708b      	strb	r3, [r1, #2]
  __HAL_LOCK(hpcd);
 8008cf0:	f894 23bc 	ldrb.w	r2, [r4, #956]	; 0x3bc
 8008cf4:	429a      	cmp	r2, r3
 8008cf6:	d1e3      	bne.n	8008cc0 <HAL_PCD_EP_SetStall+0x38>
 8008cf8:	2002      	movs	r0, #2
}
 8008cfa:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8008cfc:	2001      	movs	r0, #1
}
 8008cfe:	bd38      	pop	{r3, r4, r5, pc}
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8008d00:	6820      	ldr	r0, [r4, #0]
 8008d02:	f504 7171 	add.w	r1, r4, #964	; 0x3c4
 8008d06:	f004 fedd 	bl	800dac4 <USB_EP0_OutStart>
 8008d0a:	e7df      	b.n	8008ccc <HAL_PCD_EP_SetStall+0x44>

08008d0c <HAL_PCD_EP_ClrStall>:
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8008d0c:	6842      	ldr	r2, [r0, #4]
{
 8008d0e:	b538      	push	{r3, r4, r5, lr}
 8008d10:	f001 030f 	and.w	r3, r1, #15
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8008d14:	4293      	cmp	r3, r2
 8008d16:	d830      	bhi.n	8008d7a <HAL_PCD_EP_ClrStall+0x6e>
    ep->is_in = 1U;
 8008d18:	ebc3 02c3 	rsb	r2, r3, r3, lsl #3
  if ((0x80U & ep_addr) == 0x80U)
 8008d1c:	f011 0f80 	tst.w	r1, #128	; 0x80
 8008d20:	4604      	mov	r4, r0
    ep->is_in = 1U;
 8008d22:	eb00 0282 	add.w	r2, r0, r2, lsl #2
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008d26:	f04f 011c 	mov.w	r1, #28
  if ((0x80U & ep_addr) == 0x80U)
 8008d2a:	d117      	bne.n	8008d5c <HAL_PCD_EP_ClrStall+0x50>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008d2c:	fb01 4103 	mla	r1, r1, r3, r4
 8008d30:	f501 71fe 	add.w	r1, r1, #508	; 0x1fc
    ep->is_in = 0U;
 8008d34:	2000      	movs	r0, #0
  ep->is_stall = 0U;
 8008d36:	2500      	movs	r5, #0
    ep->is_in = 0U;
 8008d38:	f882 01fd 	strb.w	r0, [r2, #509]	; 0x1fd
  ep->num = ep_addr & EP_ADDR_MSK;
 8008d3c:	700b      	strb	r3, [r1, #0]
  ep->is_stall = 0U;
 8008d3e:	708d      	strb	r5, [r1, #2]
  __HAL_LOCK(hpcd);
 8008d40:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 8008d44:	2b01      	cmp	r3, #1
 8008d46:	d016      	beq.n	8008d76 <HAL_PCD_EP_ClrStall+0x6a>
 8008d48:	2301      	movs	r3, #1
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8008d4a:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8008d4c:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8008d50:	f004 fe1a 	bl	800d988 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8008d54:	f884 53bc 	strb.w	r5, [r4, #956]	; 0x3bc
  return HAL_OK;
 8008d58:	4628      	mov	r0, r5
}
 8008d5a:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008d5c:	fb01 4103 	mla	r1, r1, r3, r4
 8008d60:	313c      	adds	r1, #60	; 0x3c
    ep->is_in = 1U;
 8008d62:	2001      	movs	r0, #1
  ep->is_stall = 0U;
 8008d64:	2500      	movs	r5, #0
    ep->is_in = 1U;
 8008d66:	f882 003d 	strb.w	r0, [r2, #61]	; 0x3d
  ep->num = ep_addr & EP_ADDR_MSK;
 8008d6a:	700b      	strb	r3, [r1, #0]
  ep->is_stall = 0U;
 8008d6c:	708d      	strb	r5, [r1, #2]
  __HAL_LOCK(hpcd);
 8008d6e:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 8008d72:	2b01      	cmp	r3, #1
 8008d74:	d1e8      	bne.n	8008d48 <HAL_PCD_EP_ClrStall+0x3c>
 8008d76:	2002      	movs	r0, #2
}
 8008d78:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8008d7a:	2001      	movs	r0, #1
}
 8008d7c:	bd38      	pop	{r3, r4, r5, pc}
 8008d7e:	bf00      	nop

08008d80 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8008d80:	b430      	push	{r4, r5}
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8008d82:	6805      	ldr	r5, [r0, #0]
 8008d84:	6a6b      	ldr	r3, [r5, #36]	; 0x24

  if (fifo == 0U)
 8008d86:	b929      	cbnz	r1, 8008d94 <HAL_PCDEx_SetTxFiFo+0x14>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8008d88:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008d8c:	62ab      	str	r3, [r5, #40]	; 0x28
    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
  }

  return HAL_OK;
}
 8008d8e:	2000      	movs	r0, #0
 8008d90:	bc30      	pop	{r4, r5}
 8008d92:	4770      	bx	lr
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8008d94:	6aa8      	ldr	r0, [r5, #40]	; 0x28
    for (i = 0U; i < (fifo - 1U); i++)
 8008d96:	1e4c      	subs	r4, r1, #1
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8008d98:	eb03 4010 	add.w	r0, r3, r0, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 8008d9c:	d00b      	beq.n	8008db6 <HAL_PCDEx_SetTxFiFo+0x36>
 8008d9e:	2300      	movs	r3, #0
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8008da0:	f103 0140 	add.w	r1, r3, #64	; 0x40
 8008da4:	eb05 0181 	add.w	r1, r5, r1, lsl #2
    for (i = 0U; i < (fifo - 1U); i++)
 8008da8:	3301      	adds	r3, #1
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8008daa:	6849      	ldr	r1, [r1, #4]
    for (i = 0U; i < (fifo - 1U); i++)
 8008dac:	b2db      	uxtb	r3, r3
 8008dae:	42a3      	cmp	r3, r4
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8008db0:	eb00 4011 	add.w	r0, r0, r1, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 8008db4:	d3f4      	bcc.n	8008da0 <HAL_PCDEx_SetTxFiFo+0x20>
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8008db6:	3440      	adds	r4, #64	; 0x40
 8008db8:	eb05 0484 	add.w	r4, r5, r4, lsl #2
 8008dbc:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8008dc0:	6060      	str	r0, [r4, #4]
}
 8008dc2:	2000      	movs	r0, #0
 8008dc4:	bc30      	pop	{r4, r5}
 8008dc6:	4770      	bx	lr

08008dc8 <HAL_PCDEx_SetRxFiFo>:
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
  hpcd->Instance->GRXFSIZ = size;
 8008dc8:	6803      	ldr	r3, [r0, #0]

  return HAL_OK;
}
 8008dca:	2000      	movs	r0, #0
  hpcd->Instance->GRXFSIZ = size;
 8008dcc:	6259      	str	r1, [r3, #36]	; 0x24
}
 8008dce:	4770      	bx	lr

08008dd0 <HAL_PCDEx_ActivateLPM>:
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008dd0:	6802      	ldr	r2, [r0, #0]

  hpcd->lpm_active = 1U;
  hpcd->LPM_State = LPM_L0;
 8008dd2:	2100      	movs	r1, #0
{
 8008dd4:	b410      	push	{r4}
  hpcd->LPM_State = LPM_L0;
 8008dd6:	f880 13f4 	strb.w	r1, [r0, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8008dda:	6993      	ldr	r3, [r2, #24]
  hpcd->lpm_active = 1U;
 8008ddc:	2401      	movs	r4, #1
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8008dde:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
  hpcd->lpm_active = 1U;
 8008de2:	f8c0 43fc 	str.w	r4, [r0, #1020]	; 0x3fc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8008de6:	6193      	str	r3, [r2, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8008de8:	6d53      	ldr	r3, [r2, #84]	; 0x54

  return HAL_OK;
}
 8008dea:	f85d 4b04 	ldr.w	r4, [sp], #4
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8008dee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008df2:	f043 0303 	orr.w	r3, r3, #3
}
 8008df6:	4608      	mov	r0, r1
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8008df8:	6553      	str	r3, [r2, #84]	; 0x54
}
 8008dfa:	4770      	bx	lr

08008dfc <HAL_PCDEx_LPM_Callback>:
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8008dfc:	4770      	bx	lr
 8008dfe:	bf00      	nop

08008e00 <HAL_PWR_ConfigPVD>:
  /* Check the parameters */
  assert_param(IS_PWR_PVD_LEVEL(sConfigPVD->PVDLevel));
  assert_param(IS_PWR_PVD_MODE(sConfigPVD->Mode));

  /* Set PLS bits according to PVDLevel value */
  MODIFY_REG(PWR->CR2, PWR_CR2_PLS, sConfigPVD->PVDLevel);
 8008e00:	491c      	ldr	r1, [pc, #112]	; (8008e74 <HAL_PWR_ConfigPVD+0x74>)

  /* Clear any previous config. Keep it clear if no event or IT mode is selected */
  __HAL_PWR_PVD_EXTI_DISABLE_EVENT();
 8008e02:	4b1d      	ldr	r3, [pc, #116]	; (8008e78 <HAL_PWR_ConfigPVD+0x78>)
  MODIFY_REG(PWR->CR2, PWR_CR2_PLS, sConfigPVD->PVDLevel);
 8008e04:	684a      	ldr	r2, [r1, #4]
{
 8008e06:	b410      	push	{r4}
  MODIFY_REG(PWR->CR2, PWR_CR2_PLS, sConfigPVD->PVDLevel);
 8008e08:	6804      	ldr	r4, [r0, #0]
 8008e0a:	f022 020e 	bic.w	r2, r2, #14
 8008e0e:	4322      	orrs	r2, r4
 8008e10:	604a      	str	r2, [r1, #4]
  __HAL_PWR_PVD_EXTI_DISABLE_EVENT();
 8008e12:	685a      	ldr	r2, [r3, #4]
 8008e14:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8008e18:	605a      	str	r2, [r3, #4]
  __HAL_PWR_PVD_EXTI_DISABLE_IT();
 8008e1a:	681a      	ldr	r2, [r3, #0]
 8008e1c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8008e20:	601a      	str	r2, [r3, #0]
  __HAL_PWR_PVD_EXTI_DISABLE_FALLING_EDGE();
 8008e22:	68da      	ldr	r2, [r3, #12]
 8008e24:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8008e28:	60da      	str	r2, [r3, #12]
  __HAL_PWR_PVD_EXTI_DISABLE_RISING_EDGE();
 8008e2a:	689a      	ldr	r2, [r3, #8]
 8008e2c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8008e30:	609a      	str	r2, [r3, #8]

  /* Configure interrupt mode */
  if((sConfigPVD->Mode & PVD_MODE_IT) == PVD_MODE_IT)
 8008e32:	6842      	ldr	r2, [r0, #4]
 8008e34:	03d4      	lsls	r4, r2, #15
 8008e36:	d503      	bpl.n	8008e40 <HAL_PWR_ConfigPVD+0x40>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_IT();
 8008e38:	6819      	ldr	r1, [r3, #0]
 8008e3a:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 8008e3e:	6019      	str	r1, [r3, #0]
  }

  /* Configure event mode */
  if((sConfigPVD->Mode & PVD_MODE_EVT) == PVD_MODE_EVT)
 8008e40:	0390      	lsls	r0, r2, #14
 8008e42:	d504      	bpl.n	8008e4e <HAL_PWR_ConfigPVD+0x4e>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_EVENT();
 8008e44:	490c      	ldr	r1, [pc, #48]	; (8008e78 <HAL_PWR_ConfigPVD+0x78>)
 8008e46:	684b      	ldr	r3, [r1, #4]
 8008e48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008e4c:	604b      	str	r3, [r1, #4]
  }

  /* Configure the edge */
  if((sConfigPVD->Mode & PVD_RISING_EDGE) == PVD_RISING_EDGE)
 8008e4e:	07d1      	lsls	r1, r2, #31
 8008e50:	d504      	bpl.n	8008e5c <HAL_PWR_ConfigPVD+0x5c>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_RISING_EDGE();
 8008e52:	4909      	ldr	r1, [pc, #36]	; (8008e78 <HAL_PWR_ConfigPVD+0x78>)
 8008e54:	688b      	ldr	r3, [r1, #8]
 8008e56:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008e5a:	608b      	str	r3, [r1, #8]
  }

  if((sConfigPVD->Mode & PVD_FALLING_EDGE) == PVD_FALLING_EDGE)
 8008e5c:	0793      	lsls	r3, r2, #30
 8008e5e:	d504      	bpl.n	8008e6a <HAL_PWR_ConfigPVD+0x6a>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_FALLING_EDGE();
 8008e60:	4a05      	ldr	r2, [pc, #20]	; (8008e78 <HAL_PWR_ConfigPVD+0x78>)
 8008e62:	68d3      	ldr	r3, [r2, #12]
 8008e64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008e68:	60d3      	str	r3, [r2, #12]
  }

  return HAL_OK;
}
 8008e6a:	2000      	movs	r0, #0
 8008e6c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008e70:	4770      	bx	lr
 8008e72:	bf00      	nop
 8008e74:	40007000 	.word	0x40007000
 8008e78:	40010400 	.word	0x40010400

08008e7c <HAL_PWR_EnablePVD>:
  * @brief Enable the Power Voltage Detector (PVD).
  * @retval None
  */
void HAL_PWR_EnablePVD(void)
{
  SET_BIT(PWR->CR2, PWR_CR2_PVDE);
 8008e7c:	4a02      	ldr	r2, [pc, #8]	; (8008e88 <HAL_PWR_EnablePVD+0xc>)
 8008e7e:	6853      	ldr	r3, [r2, #4]
 8008e80:	f043 0301 	orr.w	r3, r3, #1
 8008e84:	6053      	str	r3, [r2, #4]
}
 8008e86:	4770      	bx	lr
 8008e88:	40007000 	.word	0x40007000

08008e8c <HAL_PWREx_GetVoltageRange>:
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8008e8c:	4b07      	ldr	r3, [pc, #28]	; (8008eac <HAL_PWREx_GetVoltageRange+0x20>)
 8008e8e:	6818      	ldr	r0, [r3, #0]
 8008e90:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 8008e94:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8008e98:	d006      	beq.n	8008ea8 <HAL_PWREx_GetVoltageRange+0x1c>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8008e9a:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8008e9e:	f410 7080 	ands.w	r0, r0, #256	; 0x100
 8008ea2:	bf18      	it	ne
 8008ea4:	f44f 7000 	movne.w	r0, #512	; 0x200
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8008ea8:	4770      	bx	lr
 8008eaa:	bf00      	nop
 8008eac:	40007000 	.word	0x40007000

08008eb0 <HAL_PWREx_ControlVoltageScaling>:

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8008eb0:	4a3b      	ldr	r2, [pc, #236]	; (8008fa0 <HAL_PWREx_ControlVoltageScaling+0xf0>)
{
 8008eb2:	b410      	push	{r4}
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8008eb4:	6813      	ldr	r3, [r2, #0]
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8008eb6:	b968      	cbnz	r0, 8008ed4 <HAL_PWREx_ControlVoltageScaling+0x24>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8008eb8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008ebc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008ec0:	d014      	beq.n	8008eec <HAL_PWREx_ControlVoltageScaling+0x3c>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008ec2:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 8008ec6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008eca:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
    }
  }
#endif

  return HAL_OK;
}
 8008ece:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008ed2:	4770      	bx	lr
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8008ed4:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8008ed8:	d02f      	beq.n	8008f3a <HAL_PWREx_ControlVoltageScaling+0x8a>
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8008eda:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8008ede:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008ee2:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8008ee4:	2000      	movs	r0, #0
}
 8008ee6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008eea:	4770      	bx	lr
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008eec:	f8d2 1080 	ldr.w	r1, [r2, #128]	; 0x80
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8008ef0:	4b2c      	ldr	r3, [pc, #176]	; (8008fa4 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8008ef2:	482d      	ldr	r0, [pc, #180]	; (8008fa8 <HAL_PWREx_ControlVoltageScaling+0xf8>)
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008ef4:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8008ef8:	f8c2 1080 	str.w	r1, [r2, #128]	; 0x80
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8008efc:	6811      	ldr	r1, [r2, #0]
 8008efe:	f421 61c0 	bic.w	r1, r1, #1536	; 0x600
 8008f02:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 8008f06:	6011      	str	r1, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8008f08:	681c      	ldr	r4, [r3, #0]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008f0a:	6951      	ldr	r1, [r2, #20]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8008f0c:	2332      	movs	r3, #50	; 0x32
 8008f0e:	fb03 f304 	mul.w	r3, r3, r4
 8008f12:	fba0 0303 	umull	r0, r3, r0, r3
 8008f16:	0c9b      	lsrs	r3, r3, #18
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008f18:	0548      	lsls	r0, r1, #21
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8008f1a:	f103 0301 	add.w	r3, r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008f1e:	d506      	bpl.n	8008f2e <HAL_PWREx_ControlVoltageScaling+0x7e>
 8008f20:	e000      	b.n	8008f24 <HAL_PWREx_ControlVoltageScaling+0x74>
 8008f22:	b123      	cbz	r3, 8008f2e <HAL_PWREx_ControlVoltageScaling+0x7e>
 8008f24:	6951      	ldr	r1, [r2, #20]
 8008f26:	0549      	lsls	r1, r1, #21
        wait_loop_index--;
 8008f28:	f103 33ff 	add.w	r3, r3, #4294967295
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008f2c:	d4f9      	bmi.n	8008f22 <HAL_PWREx_ControlVoltageScaling+0x72>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8008f2e:	4b1c      	ldr	r3, [pc, #112]	; (8008fa0 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8008f30:	695b      	ldr	r3, [r3, #20]
 8008f32:	055c      	lsls	r4, r3, #21
 8008f34:	d5d6      	bpl.n	8008ee4 <HAL_PWREx_ControlVoltageScaling+0x34>
        return HAL_TIMEOUT;
 8008f36:	2003      	movs	r0, #3
 8008f38:	e7c9      	b.n	8008ece <HAL_PWREx_ControlVoltageScaling+0x1e>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8008f3a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008f3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008f42:	d009      	beq.n	8008f58 <HAL_PWREx_ControlVoltageScaling+0xa8>
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008f44:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
}
 8008f48:	f85d 4b04 	ldr.w	r4, [sp], #4
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008f4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  return HAL_OK;
 8008f50:	2000      	movs	r0, #0
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008f52:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
}
 8008f56:	4770      	bx	lr
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008f58:	f8d2 1080 	ldr.w	r1, [r2, #128]	; 0x80
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8008f5c:	4b11      	ldr	r3, [pc, #68]	; (8008fa4 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8008f5e:	4812      	ldr	r0, [pc, #72]	; (8008fa8 <HAL_PWREx_ControlVoltageScaling+0xf8>)
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008f60:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8008f64:	f8c2 1080 	str.w	r1, [r2, #128]	; 0x80
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8008f68:	6811      	ldr	r1, [r2, #0]
 8008f6a:	f421 61c0 	bic.w	r1, r1, #1536	; 0x600
 8008f6e:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 8008f72:	6011      	str	r1, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8008f74:	681c      	ldr	r4, [r3, #0]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008f76:	6951      	ldr	r1, [r2, #20]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8008f78:	2332      	movs	r3, #50	; 0x32
 8008f7a:	fb03 f304 	mul.w	r3, r3, r4
 8008f7e:	fba0 0303 	umull	r0, r3, r0, r3
 8008f82:	0c9b      	lsrs	r3, r3, #18
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008f84:	0548      	lsls	r0, r1, #21
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8008f86:	f103 0301 	add.w	r3, r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008f8a:	d5d0      	bpl.n	8008f2e <HAL_PWREx_ControlVoltageScaling+0x7e>
 8008f8c:	e001      	b.n	8008f92 <HAL_PWREx_ControlVoltageScaling+0xe2>
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d0cd      	beq.n	8008f2e <HAL_PWREx_ControlVoltageScaling+0x7e>
 8008f92:	6951      	ldr	r1, [r2, #20]
 8008f94:	0549      	lsls	r1, r1, #21
        wait_loop_index--;
 8008f96:	f103 33ff 	add.w	r3, r3, #4294967295
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008f9a:	d5c8      	bpl.n	8008f2e <HAL_PWREx_ControlVoltageScaling+0x7e>
 8008f9c:	e7f7      	b.n	8008f8e <HAL_PWREx_ControlVoltageScaling+0xde>
 8008f9e:	bf00      	nop
 8008fa0:	40007000 	.word	0x40007000
 8008fa4:	200000f8 	.word	0x200000f8
 8008fa8:	431bde83 	.word	0x431bde83

08008fac <HAL_PWREx_EnableVddUSB>:
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8008fac:	4a02      	ldr	r2, [pc, #8]	; (8008fb8 <HAL_PWREx_EnableVddUSB+0xc>)
 8008fae:	6853      	ldr	r3, [r2, #4]
 8008fb0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008fb4:	6053      	str	r3, [r2, #4]
}
 8008fb6:	4770      	bx	lr
 8008fb8:	40007000 	.word	0x40007000

08008fbc <HAL_PWREx_EnableVddIO2>:
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8008fbc:	4a02      	ldr	r2, [pc, #8]	; (8008fc8 <HAL_PWREx_EnableVddIO2+0xc>)
 8008fbe:	6853      	ldr	r3, [r2, #4]
 8008fc0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008fc4:	6053      	str	r3, [r2, #4]
}
 8008fc6:	4770      	bx	lr
 8008fc8:	40007000 	.word	0x40007000

08008fcc <HAL_PWREx_PVM1Callback>:
__weak void HAL_PWREx_PVM1Callback(void)
{
  /* NOTE : This function should not be modified; when the callback is needed,
            HAL_PWREx_PVM1Callback() API can be implemented in the user file
   */
}
 8008fcc:	4770      	bx	lr
 8008fce:	bf00      	nop

08008fd0 <HAL_PWREx_PVM2Callback>:
 8008fd0:	4770      	bx	lr
 8008fd2:	bf00      	nop

08008fd4 <HAL_PWREx_PVM3Callback>:
 8008fd4:	4770      	bx	lr
 8008fd6:	bf00      	nop

08008fd8 <HAL_PWREx_PVM4Callback>:
 8008fd8:	4770      	bx	lr
 8008fda:	bf00      	nop

08008fdc <HAL_PWREx_PVD_PVM_IRQHandler>:
{
 8008fdc:	b510      	push	{r4, lr}
  if(__HAL_PWR_PVD_EXTI_GET_FLAG() != 0x0U)
 8008fde:	4c17      	ldr	r4, [pc, #92]	; (800903c <HAL_PWREx_PVD_PVM_IRQHandler+0x60>)
 8008fe0:	6963      	ldr	r3, [r4, #20]
 8008fe2:	03db      	lsls	r3, r3, #15
 8008fe4:	d424      	bmi.n	8009030 <HAL_PWREx_PVD_PVM_IRQHandler+0x54>
  if(__HAL_PWR_PVM1_EXTI_GET_FLAG() != 0x0U)
 8008fe6:	4c15      	ldr	r4, [pc, #84]	; (800903c <HAL_PWREx_PVD_PVM_IRQHandler+0x60>)
 8008fe8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008fea:	0718      	lsls	r0, r3, #28
 8008fec:	d41b      	bmi.n	8009026 <HAL_PWREx_PVD_PVM_IRQHandler+0x4a>
  if(__HAL_PWR_PVM2_EXTI_GET_FLAG() != 0x0U)
 8008fee:	4c13      	ldr	r4, [pc, #76]	; (800903c <HAL_PWREx_PVD_PVM_IRQHandler+0x60>)
 8008ff0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008ff2:	06d9      	lsls	r1, r3, #27
 8008ff4:	d412      	bmi.n	800901c <HAL_PWREx_PVD_PVM_IRQHandler+0x40>
  if(__HAL_PWR_PVM3_EXTI_GET_FLAG() != 0x0U)
 8008ff6:	4c11      	ldr	r4, [pc, #68]	; (800903c <HAL_PWREx_PVD_PVM_IRQHandler+0x60>)
 8008ff8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008ffa:	069a      	lsls	r2, r3, #26
 8008ffc:	d409      	bmi.n	8009012 <HAL_PWREx_PVD_PVM_IRQHandler+0x36>
  if(__HAL_PWR_PVM4_EXTI_GET_FLAG() != 0x0U)
 8008ffe:	4c0f      	ldr	r4, [pc, #60]	; (800903c <HAL_PWREx_PVD_PVM_IRQHandler+0x60>)
 8009000:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009002:	065b      	lsls	r3, r3, #25
 8009004:	d400      	bmi.n	8009008 <HAL_PWREx_PVD_PVM_IRQHandler+0x2c>
}
 8009006:	bd10      	pop	{r4, pc}
    HAL_PWREx_PVM4Callback();
 8009008:	f7ff ffe6 	bl	8008fd8 <HAL_PWREx_PVM4Callback>
    __HAL_PWR_PVM4_EXTI_CLEAR_FLAG();
 800900c:	2340      	movs	r3, #64	; 0x40
 800900e:	6363      	str	r3, [r4, #52]	; 0x34
}
 8009010:	bd10      	pop	{r4, pc}
    HAL_PWREx_PVM3Callback();
 8009012:	f7ff ffdf 	bl	8008fd4 <HAL_PWREx_PVM3Callback>
    __HAL_PWR_PVM3_EXTI_CLEAR_FLAG();
 8009016:	2320      	movs	r3, #32
 8009018:	6363      	str	r3, [r4, #52]	; 0x34
 800901a:	e7f0      	b.n	8008ffe <HAL_PWREx_PVD_PVM_IRQHandler+0x22>
    HAL_PWREx_PVM2Callback();
 800901c:	f7ff ffd8 	bl	8008fd0 <HAL_PWREx_PVM2Callback>
    __HAL_PWR_PVM2_EXTI_CLEAR_FLAG();
 8009020:	2310      	movs	r3, #16
 8009022:	6363      	str	r3, [r4, #52]	; 0x34
 8009024:	e7e7      	b.n	8008ff6 <HAL_PWREx_PVD_PVM_IRQHandler+0x1a>
    HAL_PWREx_PVM1Callback();
 8009026:	f7ff ffd1 	bl	8008fcc <HAL_PWREx_PVM1Callback>
    __HAL_PWR_PVM1_EXTI_CLEAR_FLAG();
 800902a:	2308      	movs	r3, #8
 800902c:	6363      	str	r3, [r4, #52]	; 0x34
 800902e:	e7de      	b.n	8008fee <HAL_PWREx_PVD_PVM_IRQHandler+0x12>
    HAL_PWR_PVDCallback();
 8009030:	f7fa fa36 	bl	80034a0 <HAL_PWR_PVDCallback>
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 8009034:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009038:	6163      	str	r3, [r4, #20]
 800903a:	e7d4      	b.n	8008fe6 <HAL_PWREx_PVD_PVM_IRQHandler+0xa>
 800903c:	40010400 	.word	0x40010400

08009040 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8009040:	b530      	push	{r4, r5, lr}
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8009042:	4d1e      	ldr	r5, [pc, #120]	; (80090bc <RCC_SetFlashLatencyFromMSIRange+0x7c>)
 8009044:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8009046:	00db      	lsls	r3, r3, #3
{
 8009048:	b083      	sub	sp, #12
 800904a:	4604      	mov	r4, r0
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800904c:	d51b      	bpl.n	8009086 <RCC_SetFlashLatencyFromMSIRange+0x46>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800904e:	f7ff ff1d 	bl	8008e8c <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8009052:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8009056:	d028      	beq.n	80090aa <RCC_SetFlashLatencyFromMSIRange+0x6a>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8009058:	2c7f      	cmp	r4, #127	; 0x7f
 800905a:	d812      	bhi.n	8009082 <RCC_SetFlashLatencyFromMSIRange+0x42>
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 800905c:	f1a4 0470 	sub.w	r4, r4, #112	; 0x70
 8009060:	fab4 f484 	clz	r4, r4
 8009064:	0964      	lsrs	r4, r4, #5
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8009066:	4916      	ldr	r1, [pc, #88]	; (80090c0 <RCC_SetFlashLatencyFromMSIRange+0x80>)
 8009068:	680b      	ldr	r3, [r1, #0]
 800906a:	f023 030f 	bic.w	r3, r3, #15
 800906e:	4323      	orrs	r3, r4
 8009070:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8009072:	6808      	ldr	r0, [r1, #0]
 8009074:	f000 000f 	and.w	r0, r0, #15
  {
    return HAL_ERROR;
  }

  return HAL_OK;
}
 8009078:	1b00      	subs	r0, r0, r4
 800907a:	bf18      	it	ne
 800907c:	2001      	movne	r0, #1
 800907e:	b003      	add	sp, #12
 8009080:	bd30      	pop	{r4, r5, pc}
        latency = FLASH_LATENCY_2; /* 2WS */
 8009082:	2402      	movs	r4, #2
 8009084:	e7ef      	b.n	8009066 <RCC_SetFlashLatencyFromMSIRange+0x26>
    __HAL_RCC_PWR_CLK_ENABLE();
 8009086:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8009088:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800908c:	65ab      	str	r3, [r5, #88]	; 0x58
 800908e:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8009090:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009094:	9301      	str	r3, [sp, #4]
 8009096:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 8009098:	f7ff fef8 	bl	8008e8c <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 800909c:	6dab      	ldr	r3, [r5, #88]	; 0x58
  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800909e:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    __HAL_RCC_PWR_CLK_DISABLE();
 80090a2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80090a6:	65ab      	str	r3, [r5, #88]	; 0x58
  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80090a8:	d1d6      	bne.n	8009058 <RCC_SetFlashLatencyFromMSIRange+0x18>
    if(msirange > RCC_MSIRANGE_8)
 80090aa:	2c80      	cmp	r4, #128	; 0x80
 80090ac:	d904      	bls.n	80090b8 <RCC_SetFlashLatencyFromMSIRange+0x78>
      if(msirange > RCC_MSIRANGE_10)
 80090ae:	2ca0      	cmp	r4, #160	; 0xa0
        latency = FLASH_LATENCY_1; /* 1WS */
 80090b0:	bf8c      	ite	hi
 80090b2:	2402      	movhi	r4, #2
 80090b4:	2401      	movls	r4, #1
 80090b6:	e7d6      	b.n	8009066 <RCC_SetFlashLatencyFromMSIRange+0x26>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80090b8:	2400      	movs	r4, #0
 80090ba:	e7d4      	b.n	8009066 <RCC_SetFlashLatencyFromMSIRange+0x26>
 80090bc:	40021000 	.word	0x40021000
 80090c0:	40022000 	.word	0x40022000

080090c4 <HAL_RCC_GetSysClockFreq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80090c4:	4a24      	ldr	r2, [pc, #144]	; (8009158 <HAL_RCC_GetSysClockFreq+0x94>)
 80090c6:	6893      	ldr	r3, [r2, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80090c8:	68d2      	ldr	r2, [r2, #12]
  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80090ca:	f013 030c 	ands.w	r3, r3, #12
 80090ce:	d008      	beq.n	80090e2 <HAL_RCC_GetSysClockFreq+0x1e>
 80090d0:	2b0c      	cmp	r3, #12
 80090d2:	d037      	beq.n	8009144 <HAL_RCC_GetSysClockFreq+0x80>
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80090d4:	2b04      	cmp	r3, #4
 80090d6:	4821      	ldr	r0, [pc, #132]	; (800915c <HAL_RCC_GetSysClockFreq+0x98>)
 80090d8:	d03a      	beq.n	8009150 <HAL_RCC_GetSysClockFreq+0x8c>
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80090da:	2b08      	cmp	r3, #8
 80090dc:	bf18      	it	ne
 80090de:	2000      	movne	r0, #0
 80090e0:	4770      	bx	lr
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80090e2:	4a1d      	ldr	r2, [pc, #116]	; (8009158 <HAL_RCC_GetSysClockFreq+0x94>)
 80090e4:	6811      	ldr	r1, [r2, #0]
 80090e6:	0709      	lsls	r1, r1, #28
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80090e8:	bf54      	ite	pl
 80090ea:	f8d2 2094 	ldrpl.w	r2, [r2, #148]	; 0x94
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80090ee:	6812      	ldrmi	r2, [r2, #0]
    msirange = MSIRangeTable[msirange];
 80090f0:	491b      	ldr	r1, [pc, #108]	; (8009160 <HAL_RCC_GetSysClockFreq+0x9c>)
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80090f2:	bf54      	ite	pl
 80090f4:	f3c2 2203 	ubfxpl	r2, r2, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80090f8:	f3c2 1203 	ubfxmi	r2, r2, #4, #4
    msirange = MSIRangeTable[msirange];
 80090fc:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8009100:	b1fb      	cbz	r3, 8009142 <HAL_RCC_GetSysClockFreq+0x7e>
  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8009102:	2b0c      	cmp	r3, #12
 8009104:	d125      	bne.n	8009152 <HAL_RCC_GetSysClockFreq+0x8e>
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8009106:	4b14      	ldr	r3, [pc, #80]	; (8009158 <HAL_RCC_GetSysClockFreq+0x94>)
{
 8009108:	b430      	push	{r4, r5}
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800910a:	68dc      	ldr	r4, [r3, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800910c:	68d9      	ldr	r1, [r3, #12]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800910e:	68da      	ldr	r2, [r3, #12]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8009110:	68db      	ldr	r3, [r3, #12]
      pllvco = HSI_VALUE;
 8009112:	4d12      	ldr	r5, [pc, #72]	; (800915c <HAL_RCC_GetSysClockFreq+0x98>)
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8009114:	f004 0403 	and.w	r4, r4, #3
    switch (pllsource)
 8009118:	3c02      	subs	r4, #2
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800911a:	f3c3 6341 	ubfx	r3, r3, #25, #2
      pllvco = HSI_VALUE;
 800911e:	2c01      	cmp	r4, #1
 8009120:	bf98      	it	ls
 8009122:	4628      	movls	r0, r5
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8009124:	f3c1 1103 	ubfx	r1, r1, #4, #4
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8009128:	f3c2 2206 	ubfx	r2, r2, #8, #7
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800912c:	3301      	adds	r3, #1
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800912e:	3101      	adds	r1, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8009130:	fb00 f002 	mul.w	r0, r0, r2
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8009134:	005b      	lsls	r3, r3, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8009136:	fbb0 f0f1 	udiv	r0, r0, r1
}
 800913a:	bc30      	pop	{r4, r5}
    sysclockfreq = pllvco / pllr;
 800913c:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8009140:	4770      	bx	lr
 8009142:	4770      	bx	lr
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8009144:	f002 0203 	and.w	r2, r2, #3
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8009148:	2a01      	cmp	r2, #1
 800914a:	d0ca      	beq.n	80090e2 <HAL_RCC_GetSysClockFreq+0x1e>
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800914c:	2000      	movs	r0, #0
 800914e:	e7da      	b.n	8009106 <HAL_RCC_GetSysClockFreq+0x42>
 8009150:	4770      	bx	lr
 8009152:	2000      	movs	r0, #0
  return sysclockfreq;
 8009154:	4770      	bx	lr
 8009156:	bf00      	nop
 8009158:	40021000 	.word	0x40021000
 800915c:	00f42400 	.word	0x00f42400
 8009160:	0801b890 	.word	0x0801b890

08009164 <HAL_RCC_OscConfig>:
  if(RCC_OscInitStruct == NULL)
 8009164:	2800      	cmp	r0, #0
 8009166:	f000 8239 	beq.w	80095dc <HAL_RCC_OscConfig+0x478>
{
 800916a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800916e:	4a99      	ldr	r2, [pc, #612]	; (80093d4 <HAL_RCC_OscConfig+0x270>)
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8009170:	6803      	ldr	r3, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009172:	6895      	ldr	r5, [r2, #8]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8009174:	68d6      	ldr	r6, [r2, #12]
 8009176:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8009178:	06d8      	lsls	r0, r3, #27
{
 800917a:	b083      	sub	sp, #12
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800917c:	f005 050c 	and.w	r5, r5, #12
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8009180:	f006 0603 	and.w	r6, r6, #3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8009184:	d52e      	bpl.n	80091e4 <HAL_RCC_OscConfig+0x80>
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8009186:	2d00      	cmp	r5, #0
 8009188:	f000 812b 	beq.w	80093e2 <HAL_RCC_OscConfig+0x27e>
 800918c:	2d0c      	cmp	r5, #12
 800918e:	f000 8125 	beq.w	80093dc <HAL_RCC_OscConfig+0x278>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8009192:	69a3      	ldr	r3, [r4, #24]
        __HAL_RCC_MSI_ENABLE();
 8009194:	4f8f      	ldr	r7, [pc, #572]	; (80093d4 <HAL_RCC_OscConfig+0x270>)
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8009196:	2b00      	cmp	r3, #0
 8009198:	f000 819b 	beq.w	80094d2 <HAL_RCC_OscConfig+0x36e>
        __HAL_RCC_MSI_ENABLE();
 800919c:	683b      	ldr	r3, [r7, #0]
 800919e:	f043 0301 	orr.w	r3, r3, #1
 80091a2:	603b      	str	r3, [r7, #0]
        tickstart = HAL_GetTick();
 80091a4:	f7fc ff48 	bl	8006038 <HAL_GetTick>
 80091a8:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80091aa:	e006      	b.n	80091ba <HAL_RCC_OscConfig+0x56>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80091ac:	f7fc ff44 	bl	8006038 <HAL_GetTick>
 80091b0:	eba0 0008 	sub.w	r0, r0, r8
 80091b4:	2802      	cmp	r0, #2
 80091b6:	f200 819c 	bhi.w	80094f2 <HAL_RCC_OscConfig+0x38e>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80091ba:	683b      	ldr	r3, [r7, #0]
 80091bc:	079b      	lsls	r3, r3, #30
 80091be:	d5f5      	bpl.n	80091ac <HAL_RCC_OscConfig+0x48>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80091c0:	683b      	ldr	r3, [r7, #0]
 80091c2:	f043 0308 	orr.w	r3, r3, #8
 80091c6:	603b      	str	r3, [r7, #0]
 80091c8:	683b      	ldr	r3, [r7, #0]
 80091ca:	6a22      	ldr	r2, [r4, #32]
 80091cc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80091d0:	4313      	orrs	r3, r2
 80091d2:	603b      	str	r3, [r7, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	69e2      	ldr	r2, [r4, #28]
 80091d8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80091dc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80091e0:	607b      	str	r3, [r7, #4]
 80091e2:	6823      	ldr	r3, [r4, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80091e4:	07d9      	lsls	r1, r3, #31
 80091e6:	f100 80cc 	bmi.w	8009382 <HAL_RCC_OscConfig+0x21e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80091ea:	0799      	lsls	r1, r3, #30
 80091ec:	d523      	bpl.n	8009236 <HAL_RCC_OscConfig+0xd2>
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80091ee:	2d04      	cmp	r5, #4
 80091f0:	f000 815f 	beq.w	80094b2 <HAL_RCC_OscConfig+0x34e>
 80091f4:	2d0c      	cmp	r5, #12
 80091f6:	f000 8159 	beq.w	80094ac <HAL_RCC_OscConfig+0x348>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80091fa:	68e3      	ldr	r3, [r4, #12]
        __HAL_RCC_HSI_ENABLE();
 80091fc:	4e75      	ldr	r6, [pc, #468]	; (80093d4 <HAL_RCC_OscConfig+0x270>)
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80091fe:	2b00      	cmp	r3, #0
 8009200:	f000 8192 	beq.w	8009528 <HAL_RCC_OscConfig+0x3c4>
        __HAL_RCC_HSI_ENABLE();
 8009204:	6833      	ldr	r3, [r6, #0]
 8009206:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800920a:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 800920c:	f7fc ff14 	bl	8006038 <HAL_GetTick>
 8009210:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009212:	e005      	b.n	8009220 <HAL_RCC_OscConfig+0xbc>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009214:	f7fc ff10 	bl	8006038 <HAL_GetTick>
 8009218:	1bc0      	subs	r0, r0, r7
 800921a:	2802      	cmp	r0, #2
 800921c:	f200 8169 	bhi.w	80094f2 <HAL_RCC_OscConfig+0x38e>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009220:	6833      	ldr	r3, [r6, #0]
 8009222:	055b      	lsls	r3, r3, #21
 8009224:	d5f6      	bpl.n	8009214 <HAL_RCC_OscConfig+0xb0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009226:	6873      	ldr	r3, [r6, #4]
 8009228:	6922      	ldr	r2, [r4, #16]
 800922a:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800922e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8009232:	6073      	str	r3, [r6, #4]
 8009234:	6823      	ldr	r3, [r4, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009236:	0719      	lsls	r1, r3, #28
 8009238:	d519      	bpl.n	800926e <HAL_RCC_OscConfig+0x10a>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800923a:	6963      	ldr	r3, [r4, #20]
      __HAL_RCC_LSI_ENABLE();
 800923c:	4e65      	ldr	r6, [pc, #404]	; (80093d4 <HAL_RCC_OscConfig+0x270>)
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800923e:	2b00      	cmp	r3, #0
 8009240:	f000 8120 	beq.w	8009484 <HAL_RCC_OscConfig+0x320>
      __HAL_RCC_LSI_ENABLE();
 8009244:	f8d6 3094 	ldr.w	r3, [r6, #148]	; 0x94
 8009248:	f043 0301 	orr.w	r3, r3, #1
 800924c:	f8c6 3094 	str.w	r3, [r6, #148]	; 0x94
      tickstart = HAL_GetTick();
 8009250:	f7fc fef2 	bl	8006038 <HAL_GetTick>
 8009254:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8009256:	e005      	b.n	8009264 <HAL_RCC_OscConfig+0x100>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009258:	f7fc feee 	bl	8006038 <HAL_GetTick>
 800925c:	1bc0      	subs	r0, r0, r7
 800925e:	2802      	cmp	r0, #2
 8009260:	f200 8147 	bhi.w	80094f2 <HAL_RCC_OscConfig+0x38e>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8009264:	f8d6 3094 	ldr.w	r3, [r6, #148]	; 0x94
 8009268:	079a      	lsls	r2, r3, #30
 800926a:	d5f5      	bpl.n	8009258 <HAL_RCC_OscConfig+0xf4>
 800926c:	6823      	ldr	r3, [r4, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800926e:	075f      	lsls	r7, r3, #29
 8009270:	d53f      	bpl.n	80092f2 <HAL_RCC_OscConfig+0x18e>
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8009272:	4b58      	ldr	r3, [pc, #352]	; (80093d4 <HAL_RCC_OscConfig+0x270>)
 8009274:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8009276:	00d6      	lsls	r6, r2, #3
 8009278:	f100 8154 	bmi.w	8009524 <HAL_RCC_OscConfig+0x3c0>
      __HAL_RCC_PWR_CLK_ENABLE();
 800927c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800927e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8009282:	659a      	str	r2, [r3, #88]	; 0x58
 8009284:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009286:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800928a:	9301      	str	r3, [sp, #4]
 800928c:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800928e:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009290:	4f51      	ldr	r7, [pc, #324]	; (80093d8 <HAL_RCC_OscConfig+0x274>)
 8009292:	683b      	ldr	r3, [r7, #0]
 8009294:	05d8      	lsls	r0, r3, #23
 8009296:	f140 81a3 	bpl.w	80095e0 <HAL_RCC_OscConfig+0x47c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800929a:	68a3      	ldr	r3, [r4, #8]
 800929c:	2b01      	cmp	r3, #1
 800929e:	f000 8155 	beq.w	800954c <HAL_RCC_OscConfig+0x3e8>
 80092a2:	2b05      	cmp	r3, #5
 80092a4:	f000 81c7 	beq.w	8009636 <HAL_RCC_OscConfig+0x4d2>
 80092a8:	4f4a      	ldr	r7, [pc, #296]	; (80093d4 <HAL_RCC_OscConfig+0x270>)
 80092aa:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80092ae:	f022 0201 	bic.w	r2, r2, #1
 80092b2:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 80092b6:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80092ba:	f022 0204 	bic.w	r2, r2, #4
 80092be:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	f040 8149 	bne.w	800955a <HAL_RCC_OscConfig+0x3f6>
      tickstart = HAL_GetTick();
 80092c8:	f7fc feb6 	bl	8006038 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80092cc:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80092d0:	4680      	mov	r8, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80092d2:	e006      	b.n	80092e2 <HAL_RCC_OscConfig+0x17e>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80092d4:	f7fc feb0 	bl	8006038 <HAL_GetTick>
 80092d8:	eba0 0008 	sub.w	r0, r0, r8
 80092dc:	4548      	cmp	r0, r9
 80092de:	f200 8108 	bhi.w	80094f2 <HAL_RCC_OscConfig+0x38e>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80092e2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80092e6:	079b      	lsls	r3, r3, #30
 80092e8:	d4f4      	bmi.n	80092d4 <HAL_RCC_OscConfig+0x170>
    if(pwrclkchanged == SET)
 80092ea:	2e00      	cmp	r6, #0
 80092ec:	f040 818a 	bne.w	8009604 <HAL_RCC_OscConfig+0x4a0>
 80092f0:	6823      	ldr	r3, [r4, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80092f2:	069e      	lsls	r6, r3, #26
 80092f4:	d518      	bpl.n	8009328 <HAL_RCC_OscConfig+0x1c4>
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80092f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
      __HAL_RCC_HSI48_ENABLE();
 80092f8:	4e36      	ldr	r6, [pc, #216]	; (80093d4 <HAL_RCC_OscConfig+0x270>)
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	f000 815a 	beq.w	80095b4 <HAL_RCC_OscConfig+0x450>
      __HAL_RCC_HSI48_ENABLE();
 8009300:	f8d6 3098 	ldr.w	r3, [r6, #152]	; 0x98
 8009304:	f043 0301 	orr.w	r3, r3, #1
 8009308:	f8c6 3098 	str.w	r3, [r6, #152]	; 0x98
      tickstart = HAL_GetTick();
 800930c:	f7fc fe94 	bl	8006038 <HAL_GetTick>
 8009310:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8009312:	e005      	b.n	8009320 <HAL_RCC_OscConfig+0x1bc>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009314:	f7fc fe90 	bl	8006038 <HAL_GetTick>
 8009318:	1bc0      	subs	r0, r0, r7
 800931a:	2802      	cmp	r0, #2
 800931c:	f200 80e9 	bhi.w	80094f2 <HAL_RCC_OscConfig+0x38e>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8009320:	f8d6 3098 	ldr.w	r3, [r6, #152]	; 0x98
 8009324:	0798      	lsls	r0, r3, #30
 8009326:	d5f5      	bpl.n	8009314 <HAL_RCC_OscConfig+0x1b0>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8009328:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800932a:	b333      	cbz	r3, 800937a <HAL_RCC_OscConfig+0x216>
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800932c:	2b02      	cmp	r3, #2
 800932e:	f000 8190 	beq.w	8009652 <HAL_RCC_OscConfig+0x4ee>
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8009332:	2d0c      	cmp	r5, #12
 8009334:	f000 8096 	beq.w	8009464 <HAL_RCC_OscConfig+0x300>
        __HAL_RCC_PLL_DISABLE();
 8009338:	4b26      	ldr	r3, [pc, #152]	; (80093d4 <HAL_RCC_OscConfig+0x270>)
 800933a:	681a      	ldr	r2, [r3, #0]
 800933c:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8009340:	601a      	str	r2, [r3, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8009342:	681a      	ldr	r2, [r3, #0]
 8009344:	f012 5f20 	tst.w	r2, #671088640	; 0x28000000
 8009348:	d103      	bne.n	8009352 <HAL_RCC_OscConfig+0x1ee>
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800934a:	68da      	ldr	r2, [r3, #12]
 800934c:	f022 0203 	bic.w	r2, r2, #3
 8009350:	60da      	str	r2, [r3, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8009352:	4c20      	ldr	r4, [pc, #128]	; (80093d4 <HAL_RCC_OscConfig+0x270>)
 8009354:	68e3      	ldr	r3, [r4, #12]
 8009356:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800935a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800935e:	60e3      	str	r3, [r4, #12]
        tickstart = HAL_GetTick();
 8009360:	f7fc fe6a 	bl	8006038 <HAL_GetTick>
 8009364:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009366:	e005      	b.n	8009374 <HAL_RCC_OscConfig+0x210>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009368:	f7fc fe66 	bl	8006038 <HAL_GetTick>
 800936c:	1b40      	subs	r0, r0, r5
 800936e:	2802      	cmp	r0, #2
 8009370:	f200 80bf 	bhi.w	80094f2 <HAL_RCC_OscConfig+0x38e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009374:	6823      	ldr	r3, [r4, #0]
 8009376:	019b      	lsls	r3, r3, #6
 8009378:	d4f6      	bmi.n	8009368 <HAL_RCC_OscConfig+0x204>
  return HAL_OK;
 800937a:	2000      	movs	r0, #0
}
 800937c:	b003      	add	sp, #12
 800937e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8009382:	2d08      	cmp	r5, #8
 8009384:	d074      	beq.n	8009470 <HAL_RCC_OscConfig+0x30c>
 8009386:	2d0c      	cmp	r5, #12
 8009388:	d070      	beq.n	800946c <HAL_RCC_OscConfig+0x308>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800938a:	6863      	ldr	r3, [r4, #4]
 800938c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009390:	f000 80b3 	beq.w	80094fa <HAL_RCC_OscConfig+0x396>
 8009394:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009398:	f000 8140 	beq.w	800961c <HAL_RCC_OscConfig+0x4b8>
 800939c:	4f0d      	ldr	r7, [pc, #52]	; (80093d4 <HAL_RCC_OscConfig+0x270>)
 800939e:	683a      	ldr	r2, [r7, #0]
 80093a0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80093a4:	603a      	str	r2, [r7, #0]
 80093a6:	683a      	ldr	r2, [r7, #0]
 80093a8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80093ac:	603a      	str	r2, [r7, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	f040 80a8 	bne.w	8009504 <HAL_RCC_OscConfig+0x3a0>
        tickstart = HAL_GetTick();
 80093b4:	f7fc fe40 	bl	8006038 <HAL_GetTick>
 80093b8:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80093ba:	e006      	b.n	80093ca <HAL_RCC_OscConfig+0x266>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80093bc:	f7fc fe3c 	bl	8006038 <HAL_GetTick>
 80093c0:	eba0 0008 	sub.w	r0, r0, r8
 80093c4:	2864      	cmp	r0, #100	; 0x64
 80093c6:	f200 8094 	bhi.w	80094f2 <HAL_RCC_OscConfig+0x38e>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80093ca:	683b      	ldr	r3, [r7, #0]
 80093cc:	0398      	lsls	r0, r3, #14
 80093ce:	d4f5      	bmi.n	80093bc <HAL_RCC_OscConfig+0x258>
 80093d0:	6823      	ldr	r3, [r4, #0]
 80093d2:	e70a      	b.n	80091ea <HAL_RCC_OscConfig+0x86>
 80093d4:	40021000 	.word	0x40021000
 80093d8:	40007000 	.word	0x40007000
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80093dc:	2e01      	cmp	r6, #1
 80093de:	f47f aed8 	bne.w	8009192 <HAL_RCC_OscConfig+0x2e>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80093e2:	4ba9      	ldr	r3, [pc, #676]	; (8009688 <HAL_RCC_OscConfig+0x524>)
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	0799      	lsls	r1, r3, #30
 80093e8:	d439      	bmi.n	800945e <HAL_RCC_OscConfig+0x2fa>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80093ea:	4ba7      	ldr	r3, [pc, #668]	; (8009688 <HAL_RCC_OscConfig+0x524>)
 80093ec:	6a20      	ldr	r0, [r4, #32]
 80093ee:	681a      	ldr	r2, [r3, #0]
 80093f0:	0712      	lsls	r2, r2, #28
 80093f2:	bf56      	itet	pl
 80093f4:	f8d3 3094 	ldrpl.w	r3, [r3, #148]	; 0x94
 80093f8:	681b      	ldrmi	r3, [r3, #0]
 80093fa:	091b      	lsrpl	r3, r3, #4
 80093fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009400:	4298      	cmp	r0, r3
 8009402:	f200 80bf 	bhi.w	8009584 <HAL_RCC_OscConfig+0x420>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8009406:	4ba0      	ldr	r3, [pc, #640]	; (8009688 <HAL_RCC_OscConfig+0x524>)
 8009408:	681a      	ldr	r2, [r3, #0]
 800940a:	f042 0208 	orr.w	r2, r2, #8
 800940e:	601a      	str	r2, [r3, #0]
 8009410:	681a      	ldr	r2, [r3, #0]
 8009412:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8009416:	4302      	orrs	r2, r0
 8009418:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800941a:	685a      	ldr	r2, [r3, #4]
 800941c:	69e1      	ldr	r1, [r4, #28]
 800941e:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8009422:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8009426:	605a      	str	r2, [r3, #4]
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8009428:	2d00      	cmp	r5, #0
 800942a:	f000 80f1 	beq.w	8009610 <HAL_RCC_OscConfig+0x4ac>
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800942e:	f7ff fe49 	bl	80090c4 <HAL_RCC_GetSysClockFreq>
 8009432:	4a95      	ldr	r2, [pc, #596]	; (8009688 <HAL_RCC_OscConfig+0x524>)
 8009434:	4995      	ldr	r1, [pc, #596]	; (800968c <HAL_RCC_OscConfig+0x528>)
 8009436:	6892      	ldr	r2, [r2, #8]
 8009438:	f3c2 1203 	ubfx	r2, r2, #4, #4
 800943c:	4603      	mov	r3, r0
 800943e:	5c8a      	ldrb	r2, [r1, r2]
        status = HAL_InitTick(uwTickPrio);
 8009440:	4893      	ldr	r0, [pc, #588]	; (8009690 <HAL_RCC_OscConfig+0x52c>)
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8009442:	4994      	ldr	r1, [pc, #592]	; (8009694 <HAL_RCC_OscConfig+0x530>)
        status = HAL_InitTick(uwTickPrio);
 8009444:	6800      	ldr	r0, [r0, #0]
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8009446:	f002 021f 	and.w	r2, r2, #31
 800944a:	40d3      	lsrs	r3, r2
 800944c:	600b      	str	r3, [r1, #0]
        status = HAL_InitTick(uwTickPrio);
 800944e:	f7fc fdb3 	bl	8005fb8 <HAL_InitTick>
        if(status != HAL_OK)
 8009452:	b940      	cbnz	r0, 8009466 <HAL_RCC_OscConfig+0x302>
 8009454:	6823      	ldr	r3, [r4, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009456:	07d9      	lsls	r1, r3, #31
 8009458:	f57f aec7 	bpl.w	80091ea <HAL_RCC_OscConfig+0x86>
 800945c:	e791      	b.n	8009382 <HAL_RCC_OscConfig+0x21e>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800945e:	69a3      	ldr	r3, [r4, #24]
 8009460:	2b00      	cmp	r3, #0
 8009462:	d1c2      	bne.n	80093ea <HAL_RCC_OscConfig+0x286>
          return HAL_ERROR;
 8009464:	2001      	movs	r0, #1
}
 8009466:	b003      	add	sp, #12
 8009468:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800946c:	2e03      	cmp	r6, #3
 800946e:	d18c      	bne.n	800938a <HAL_RCC_OscConfig+0x226>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009470:	4a85      	ldr	r2, [pc, #532]	; (8009688 <HAL_RCC_OscConfig+0x524>)
 8009472:	6812      	ldr	r2, [r2, #0]
 8009474:	0392      	lsls	r2, r2, #14
 8009476:	f57f aeb8 	bpl.w	80091ea <HAL_RCC_OscConfig+0x86>
 800947a:	6862      	ldr	r2, [r4, #4]
 800947c:	2a00      	cmp	r2, #0
 800947e:	f47f aeb4 	bne.w	80091ea <HAL_RCC_OscConfig+0x86>
 8009482:	e7ef      	b.n	8009464 <HAL_RCC_OscConfig+0x300>
      __HAL_RCC_LSI_DISABLE();
 8009484:	f8d6 3094 	ldr.w	r3, [r6, #148]	; 0x94
 8009488:	f023 0301 	bic.w	r3, r3, #1
 800948c:	f8c6 3094 	str.w	r3, [r6, #148]	; 0x94
      tickstart = HAL_GetTick();
 8009490:	f7fc fdd2 	bl	8006038 <HAL_GetTick>
 8009494:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8009496:	e004      	b.n	80094a2 <HAL_RCC_OscConfig+0x33e>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009498:	f7fc fdce 	bl	8006038 <HAL_GetTick>
 800949c:	1bc0      	subs	r0, r0, r7
 800949e:	2802      	cmp	r0, #2
 80094a0:	d827      	bhi.n	80094f2 <HAL_RCC_OscConfig+0x38e>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80094a2:	f8d6 3094 	ldr.w	r3, [r6, #148]	; 0x94
 80094a6:	079b      	lsls	r3, r3, #30
 80094a8:	d4f6      	bmi.n	8009498 <HAL_RCC_OscConfig+0x334>
 80094aa:	e6df      	b.n	800926c <HAL_RCC_OscConfig+0x108>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80094ac:	2e02      	cmp	r6, #2
 80094ae:	f47f aea4 	bne.w	80091fa <HAL_RCC_OscConfig+0x96>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80094b2:	4a75      	ldr	r2, [pc, #468]	; (8009688 <HAL_RCC_OscConfig+0x524>)
 80094b4:	6812      	ldr	r2, [r2, #0]
 80094b6:	0552      	lsls	r2, r2, #21
 80094b8:	d502      	bpl.n	80094c0 <HAL_RCC_OscConfig+0x35c>
 80094ba:	68e2      	ldr	r2, [r4, #12]
 80094bc:	2a00      	cmp	r2, #0
 80094be:	d0d1      	beq.n	8009464 <HAL_RCC_OscConfig+0x300>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80094c0:	4971      	ldr	r1, [pc, #452]	; (8009688 <HAL_RCC_OscConfig+0x524>)
 80094c2:	6920      	ldr	r0, [r4, #16]
 80094c4:	684a      	ldr	r2, [r1, #4]
 80094c6:	f022 42fe 	bic.w	r2, r2, #2130706432	; 0x7f000000
 80094ca:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
 80094ce:	604a      	str	r2, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80094d0:	e6b1      	b.n	8009236 <HAL_RCC_OscConfig+0xd2>
        __HAL_RCC_MSI_DISABLE();
 80094d2:	683b      	ldr	r3, [r7, #0]
 80094d4:	f023 0301 	bic.w	r3, r3, #1
 80094d8:	603b      	str	r3, [r7, #0]
        tickstart = HAL_GetTick();
 80094da:	f7fc fdad 	bl	8006038 <HAL_GetTick>
 80094de:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80094e0:	683b      	ldr	r3, [r7, #0]
 80094e2:	0798      	lsls	r0, r3, #30
 80094e4:	d5b6      	bpl.n	8009454 <HAL_RCC_OscConfig+0x2f0>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80094e6:	f7fc fda7 	bl	8006038 <HAL_GetTick>
 80094ea:	eba0 0008 	sub.w	r0, r0, r8
 80094ee:	2802      	cmp	r0, #2
 80094f0:	d9f6      	bls.n	80094e0 <HAL_RCC_OscConfig+0x37c>
            return HAL_TIMEOUT;
 80094f2:	2003      	movs	r0, #3
}
 80094f4:	b003      	add	sp, #12
 80094f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80094fa:	4a63      	ldr	r2, [pc, #396]	; (8009688 <HAL_RCC_OscConfig+0x524>)
 80094fc:	6813      	ldr	r3, [r2, #0]
 80094fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009502:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8009504:	f7fc fd98 	bl	8006038 <HAL_GetTick>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009508:	f8df 817c 	ldr.w	r8, [pc, #380]	; 8009688 <HAL_RCC_OscConfig+0x524>
        tickstart = HAL_GetTick();
 800950c:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800950e:	e004      	b.n	800951a <HAL_RCC_OscConfig+0x3b6>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009510:	f7fc fd92 	bl	8006038 <HAL_GetTick>
 8009514:	1bc0      	subs	r0, r0, r7
 8009516:	2864      	cmp	r0, #100	; 0x64
 8009518:	d8eb      	bhi.n	80094f2 <HAL_RCC_OscConfig+0x38e>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800951a:	f8d8 3000 	ldr.w	r3, [r8]
 800951e:	039b      	lsls	r3, r3, #14
 8009520:	d5f6      	bpl.n	8009510 <HAL_RCC_OscConfig+0x3ac>
 8009522:	e755      	b.n	80093d0 <HAL_RCC_OscConfig+0x26c>
    FlagStatus       pwrclkchanged = RESET;
 8009524:	2600      	movs	r6, #0
 8009526:	e6b3      	b.n	8009290 <HAL_RCC_OscConfig+0x12c>
        __HAL_RCC_HSI_DISABLE();
 8009528:	6833      	ldr	r3, [r6, #0]
 800952a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800952e:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8009530:	f7fc fd82 	bl	8006038 <HAL_GetTick>
 8009534:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8009536:	e004      	b.n	8009542 <HAL_RCC_OscConfig+0x3de>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009538:	f7fc fd7e 	bl	8006038 <HAL_GetTick>
 800953c:	1bc0      	subs	r0, r0, r7
 800953e:	2802      	cmp	r0, #2
 8009540:	d8d7      	bhi.n	80094f2 <HAL_RCC_OscConfig+0x38e>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8009542:	6833      	ldr	r3, [r6, #0]
 8009544:	0558      	lsls	r0, r3, #21
 8009546:	d4f7      	bmi.n	8009538 <HAL_RCC_OscConfig+0x3d4>
 8009548:	6823      	ldr	r3, [r4, #0]
 800954a:	e674      	b.n	8009236 <HAL_RCC_OscConfig+0xd2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800954c:	4a4e      	ldr	r2, [pc, #312]	; (8009688 <HAL_RCC_OscConfig+0x524>)
 800954e:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8009552:	f043 0301 	orr.w	r3, r3, #1
 8009556:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      tickstart = HAL_GetTick();
 800955a:	f7fc fd6d 	bl	8006038 <HAL_GetTick>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800955e:	f8df 8128 	ldr.w	r8, [pc, #296]	; 8009688 <HAL_RCC_OscConfig+0x524>
      tickstart = HAL_GetTick();
 8009562:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009564:	f241 3988 	movw	r9, #5000	; 0x1388
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009568:	e004      	b.n	8009574 <HAL_RCC_OscConfig+0x410>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800956a:	f7fc fd65 	bl	8006038 <HAL_GetTick>
 800956e:	1bc0      	subs	r0, r0, r7
 8009570:	4548      	cmp	r0, r9
 8009572:	d8be      	bhi.n	80094f2 <HAL_RCC_OscConfig+0x38e>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009574:	f8d8 3090 	ldr.w	r3, [r8, #144]	; 0x90
 8009578:	079a      	lsls	r2, r3, #30
 800957a:	d5f6      	bpl.n	800956a <HAL_RCC_OscConfig+0x406>
    if(pwrclkchanged == SET)
 800957c:	2e00      	cmp	r6, #0
 800957e:	f43f aeb7 	beq.w	80092f0 <HAL_RCC_OscConfig+0x18c>
 8009582:	e03f      	b.n	8009604 <HAL_RCC_OscConfig+0x4a0>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8009584:	f7ff fd5c 	bl	8009040 <RCC_SetFlashLatencyFromMSIRange>
 8009588:	2800      	cmp	r0, #0
 800958a:	f47f af6b 	bne.w	8009464 <HAL_RCC_OscConfig+0x300>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800958e:	4b3e      	ldr	r3, [pc, #248]	; (8009688 <HAL_RCC_OscConfig+0x524>)
 8009590:	681a      	ldr	r2, [r3, #0]
 8009592:	f042 0208 	orr.w	r2, r2, #8
 8009596:	601a      	str	r2, [r3, #0]
 8009598:	681a      	ldr	r2, [r3, #0]
 800959a:	6a21      	ldr	r1, [r4, #32]
 800959c:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80095a0:	430a      	orrs	r2, r1
 80095a2:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80095a4:	685a      	ldr	r2, [r3, #4]
 80095a6:	69e1      	ldr	r1, [r4, #28]
 80095a8:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 80095ac:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80095b0:	605a      	str	r2, [r3, #4]
 80095b2:	e73c      	b.n	800942e <HAL_RCC_OscConfig+0x2ca>
      __HAL_RCC_HSI48_DISABLE();
 80095b4:	f8d6 3098 	ldr.w	r3, [r6, #152]	; 0x98
 80095b8:	f023 0301 	bic.w	r3, r3, #1
 80095bc:	f8c6 3098 	str.w	r3, [r6, #152]	; 0x98
      tickstart = HAL_GetTick();
 80095c0:	f7fc fd3a 	bl	8006038 <HAL_GetTick>
 80095c4:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80095c6:	e004      	b.n	80095d2 <HAL_RCC_OscConfig+0x46e>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80095c8:	f7fc fd36 	bl	8006038 <HAL_GetTick>
 80095cc:	1bc0      	subs	r0, r0, r7
 80095ce:	2802      	cmp	r0, #2
 80095d0:	d88f      	bhi.n	80094f2 <HAL_RCC_OscConfig+0x38e>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80095d2:	f8d6 3098 	ldr.w	r3, [r6, #152]	; 0x98
 80095d6:	0799      	lsls	r1, r3, #30
 80095d8:	d4f6      	bmi.n	80095c8 <HAL_RCC_OscConfig+0x464>
 80095da:	e6a5      	b.n	8009328 <HAL_RCC_OscConfig+0x1c4>
    return HAL_ERROR;
 80095dc:	2001      	movs	r0, #1
}
 80095de:	4770      	bx	lr
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80095e0:	683b      	ldr	r3, [r7, #0]
 80095e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80095e6:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 80095e8:	f7fc fd26 	bl	8006038 <HAL_GetTick>
 80095ec:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80095ee:	683b      	ldr	r3, [r7, #0]
 80095f0:	05d9      	lsls	r1, r3, #23
 80095f2:	f53f ae52 	bmi.w	800929a <HAL_RCC_OscConfig+0x136>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80095f6:	f7fc fd1f 	bl	8006038 <HAL_GetTick>
 80095fa:	eba0 0008 	sub.w	r0, r0, r8
 80095fe:	2802      	cmp	r0, #2
 8009600:	d9f5      	bls.n	80095ee <HAL_RCC_OscConfig+0x48a>
 8009602:	e776      	b.n	80094f2 <HAL_RCC_OscConfig+0x38e>
      __HAL_RCC_PWR_CLK_DISABLE();
 8009604:	4a20      	ldr	r2, [pc, #128]	; (8009688 <HAL_RCC_OscConfig+0x524>)
 8009606:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8009608:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800960c:	6593      	str	r3, [r2, #88]	; 0x58
 800960e:	e66f      	b.n	80092f0 <HAL_RCC_OscConfig+0x18c>
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8009610:	f7ff fd16 	bl	8009040 <RCC_SetFlashLatencyFromMSIRange>
 8009614:	2800      	cmp	r0, #0
 8009616:	f43f af0a 	beq.w	800942e <HAL_RCC_OscConfig+0x2ca>
 800961a:	e723      	b.n	8009464 <HAL_RCC_OscConfig+0x300>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800961c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009620:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8009624:	681a      	ldr	r2, [r3, #0]
 8009626:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800962a:	601a      	str	r2, [r3, #0]
 800962c:	681a      	ldr	r2, [r3, #0]
 800962e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8009632:	601a      	str	r2, [r3, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009634:	e766      	b.n	8009504 <HAL_RCC_OscConfig+0x3a0>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009636:	4b14      	ldr	r3, [pc, #80]	; (8009688 <HAL_RCC_OscConfig+0x524>)
 8009638:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800963c:	f042 0204 	orr.w	r2, r2, #4
 8009640:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8009644:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8009648:	f042 0201 	orr.w	r2, r2, #1
 800964c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8009650:	e783      	b.n	800955a <HAL_RCC_OscConfig+0x3f6>
      pll_config = RCC->PLLCFGR;
 8009652:	4e0d      	ldr	r6, [pc, #52]	; (8009688 <HAL_RCC_OscConfig+0x524>)
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8009654:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
      pll_config = RCC->PLLCFGR;
 8009656:	68f3      	ldr	r3, [r6, #12]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8009658:	f003 0103 	and.w	r1, r3, #3
 800965c:	4291      	cmp	r1, r2
 800965e:	d055      	beq.n	800970c <HAL_RCC_OscConfig+0x5a8>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8009660:	2d0c      	cmp	r5, #12
 8009662:	f43f aeff 	beq.w	8009464 <HAL_RCC_OscConfig+0x300>
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8009666:	4d08      	ldr	r5, [pc, #32]	; (8009688 <HAL_RCC_OscConfig+0x524>)
 8009668:	682b      	ldr	r3, [r5, #0]
 800966a:	015a      	lsls	r2, r3, #5
 800966c:	f53f aefa 	bmi.w	8009464 <HAL_RCC_OscConfig+0x300>
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8009670:	682b      	ldr	r3, [r5, #0]
 8009672:	00db      	lsls	r3, r3, #3
 8009674:	f53f aef6 	bmi.w	8009464 <HAL_RCC_OscConfig+0x300>
            __HAL_RCC_PLL_DISABLE();
 8009678:	682b      	ldr	r3, [r5, #0]
 800967a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800967e:	602b      	str	r3, [r5, #0]
            tickstart = HAL_GetTick();
 8009680:	f7fc fcda 	bl	8006038 <HAL_GetTick>
 8009684:	4606      	mov	r6, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009686:	e00d      	b.n	80096a4 <HAL_RCC_OscConfig+0x540>
 8009688:	40021000 	.word	0x40021000
 800968c:	0801b8c0 	.word	0x0801b8c0
 8009690:	20000190 	.word	0x20000190
 8009694:	200000f8 	.word	0x200000f8
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009698:	f7fc fcce 	bl	8006038 <HAL_GetTick>
 800969c:	1b80      	subs	r0, r0, r6
 800969e:	2802      	cmp	r0, #2
 80096a0:	f63f af27 	bhi.w	80094f2 <HAL_RCC_OscConfig+0x38e>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80096a4:	682b      	ldr	r3, [r5, #0]
 80096a6:	019f      	lsls	r7, r3, #6
 80096a8:	d4f6      	bmi.n	8009698 <HAL_RCC_OscConfig+0x534>
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80096aa:	68e9      	ldr	r1, [r5, #12]
 80096ac:	4b36      	ldr	r3, [pc, #216]	; (8009788 <HAL_RCC_OscConfig+0x624>)
 80096ae:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80096b0:	6b67      	ldr	r7, [r4, #52]	; 0x34
 80096b2:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 80096b4:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80096b6:	400b      	ands	r3, r1
 80096b8:	4313      	orrs	r3, r2
 80096ba:	e9d4 120f 	ldrd	r1, r2, [r4, #60]	; 0x3c
 80096be:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
 80096c2:	ea43 63c6 	orr.w	r3, r3, r6, lsl #27
 80096c6:	3801      	subs	r0, #1
 80096c8:	0849      	lsrs	r1, r1, #1
 80096ca:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
 80096ce:	3901      	subs	r1, #1
 80096d0:	0852      	lsrs	r2, r2, #1
 80096d2:	ea43 5341 	orr.w	r3, r3, r1, lsl #21
 80096d6:	3a01      	subs	r2, #1
 80096d8:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 80096dc:	60eb      	str	r3, [r5, #12]
            __HAL_RCC_PLL_ENABLE();
 80096de:	682b      	ldr	r3, [r5, #0]
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80096e0:	4e2a      	ldr	r6, [pc, #168]	; (800978c <HAL_RCC_OscConfig+0x628>)
            __HAL_RCC_PLL_ENABLE();
 80096e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80096e6:	602b      	str	r3, [r5, #0]
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80096e8:	68eb      	ldr	r3, [r5, #12]
 80096ea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80096ee:	60eb      	str	r3, [r5, #12]
            tickstart = HAL_GetTick();
 80096f0:	f7fc fca2 	bl	8006038 <HAL_GetTick>
 80096f4:	4604      	mov	r4, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80096f6:	e005      	b.n	8009704 <HAL_RCC_OscConfig+0x5a0>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80096f8:	f7fc fc9e 	bl	8006038 <HAL_GetTick>
 80096fc:	1b00      	subs	r0, r0, r4
 80096fe:	2802      	cmp	r0, #2
 8009700:	f63f aef7 	bhi.w	80094f2 <HAL_RCC_OscConfig+0x38e>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009704:	6833      	ldr	r3, [r6, #0]
 8009706:	0198      	lsls	r0, r3, #6
 8009708:	d5f6      	bpl.n	80096f8 <HAL_RCC_OscConfig+0x594>
 800970a:	e636      	b.n	800937a <HAL_RCC_OscConfig+0x216>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800970c:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800970e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8009712:	3901      	subs	r1, #1
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8009714:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 8009718:	d1a2      	bne.n	8009660 <HAL_RCC_OscConfig+0x4fc>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800971a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800971c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8009720:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 8009724:	d19c      	bne.n	8009660 <HAL_RCC_OscConfig+0x4fc>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8009726:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8009728:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800972c:	ebb2 6fc1 	cmp.w	r2, r1, lsl #27
 8009730:	d196      	bne.n	8009660 <HAL_RCC_OscConfig+0x4fc>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8009732:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8009734:	0852      	lsrs	r2, r2, #1
 8009736:	3a01      	subs	r2, #1
 8009738:	f403 01c0 	and.w	r1, r3, #6291456	; 0x600000
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800973c:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 8009740:	d18e      	bne.n	8009660 <HAL_RCC_OscConfig+0x4fc>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8009742:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8009744:	0852      	lsrs	r2, r2, #1
 8009746:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 800974a:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800974c:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
 8009750:	d186      	bne.n	8009660 <HAL_RCC_OscConfig+0x4fc>
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009752:	6833      	ldr	r3, [r6, #0]
 8009754:	0199      	lsls	r1, r3, #6
 8009756:	f53f ae10 	bmi.w	800937a <HAL_RCC_OscConfig+0x216>
          __HAL_RCC_PLL_ENABLE();
 800975a:	6833      	ldr	r3, [r6, #0]
 800975c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009760:	6033      	str	r3, [r6, #0]
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8009762:	68f3      	ldr	r3, [r6, #12]
 8009764:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009768:	60f3      	str	r3, [r6, #12]
          tickstart = HAL_GetTick();
 800976a:	f7fc fc65 	bl	8006038 <HAL_GetTick>
 800976e:	4604      	mov	r4, r0
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009770:	e005      	b.n	800977e <HAL_RCC_OscConfig+0x61a>
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009772:	f7fc fc61 	bl	8006038 <HAL_GetTick>
 8009776:	1b00      	subs	r0, r0, r4
 8009778:	2802      	cmp	r0, #2
 800977a:	f63f aeba 	bhi.w	80094f2 <HAL_RCC_OscConfig+0x38e>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800977e:	6833      	ldr	r3, [r6, #0]
 8009780:	019a      	lsls	r2, r3, #6
 8009782:	d5f6      	bpl.n	8009772 <HAL_RCC_OscConfig+0x60e>
 8009784:	e5f9      	b.n	800937a <HAL_RCC_OscConfig+0x216>
 8009786:	bf00      	nop
 8009788:	019d800c 	.word	0x019d800c
 800978c:	40021000 	.word	0x40021000

08009790 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8009790:	2800      	cmp	r0, #0
 8009792:	f000 8095 	beq.w	80098c0 <HAL_RCC_ClockConfig+0x130>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009796:	4a83      	ldr	r2, [pc, #524]	; (80099a4 <HAL_RCC_ClockConfig+0x214>)
{
 8009798:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800979c:	6813      	ldr	r3, [r2, #0]
 800979e:	f003 030f 	and.w	r3, r3, #15
 80097a2:	428b      	cmp	r3, r1
 80097a4:	460d      	mov	r5, r1
 80097a6:	4604      	mov	r4, r0
 80097a8:	d20c      	bcs.n	80097c4 <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80097aa:	6813      	ldr	r3, [r2, #0]
 80097ac:	f023 030f 	bic.w	r3, r3, #15
 80097b0:	430b      	orrs	r3, r1
 80097b2:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80097b4:	6813      	ldr	r3, [r2, #0]
 80097b6:	f003 030f 	and.w	r3, r3, #15
 80097ba:	428b      	cmp	r3, r1
 80097bc:	d002      	beq.n	80097c4 <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 80097be:	2001      	movs	r0, #1
}
 80097c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80097c4:	6823      	ldr	r3, [r4, #0]
 80097c6:	07da      	lsls	r2, r3, #31
 80097c8:	d56d      	bpl.n	80098a6 <HAL_RCC_ClockConfig+0x116>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80097ca:	6862      	ldr	r2, [r4, #4]
 80097cc:	2a03      	cmp	r2, #3
 80097ce:	d079      	beq.n	80098c4 <HAL_RCC_ClockConfig+0x134>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80097d0:	4b75      	ldr	r3, [pc, #468]	; (80099a8 <HAL_RCC_ClockConfig+0x218>)
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80097d2:	2a02      	cmp	r2, #2
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80097d4:	681b      	ldr	r3, [r3, #0]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80097d6:	d070      	beq.n	80098ba <HAL_RCC_ClockConfig+0x12a>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80097d8:	2a00      	cmp	r2, #0
 80097da:	f040 8096 	bne.w	800990a <HAL_RCC_ClockConfig+0x17a>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80097de:	079e      	lsls	r6, r3, #30
 80097e0:	d5ed      	bpl.n	80097be <HAL_RCC_ClockConfig+0x2e>
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 80097e2:	f7ff fc6f 	bl	80090c4 <HAL_RCC_GetSysClockFreq>
 80097e6:	4b71      	ldr	r3, [pc, #452]	; (80099ac <HAL_RCC_ClockConfig+0x21c>)
 80097e8:	4298      	cmp	r0, r3
 80097ea:	f200 8083 	bhi.w	80098f4 <HAL_RCC_ClockConfig+0x164>
 80097ee:	6862      	ldr	r2, [r4, #4]
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80097f0:	f04f 0900 	mov.w	r9, #0
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80097f4:	4e6c      	ldr	r6, [pc, #432]	; (80099a8 <HAL_RCC_ClockConfig+0x218>)
 80097f6:	68b3      	ldr	r3, [r6, #8]
 80097f8:	f023 0303 	bic.w	r3, r3, #3
 80097fc:	431a      	orrs	r2, r3
 80097fe:	60b2      	str	r2, [r6, #8]
    tickstart = HAL_GetTick();
 8009800:	f7fc fc1a 	bl	8006038 <HAL_GetTick>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009804:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8009808:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800980a:	e004      	b.n	8009816 <HAL_RCC_ClockConfig+0x86>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800980c:	f7fc fc14 	bl	8006038 <HAL_GetTick>
 8009810:	1bc0      	subs	r0, r0, r7
 8009812:	4540      	cmp	r0, r8
 8009814:	d86c      	bhi.n	80098f0 <HAL_RCC_ClockConfig+0x160>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009816:	68b3      	ldr	r3, [r6, #8]
 8009818:	6862      	ldr	r2, [r4, #4]
 800981a:	f003 030c 	and.w	r3, r3, #12
 800981e:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8009822:	d1f3      	bne.n	800980c <HAL_RCC_ClockConfig+0x7c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009824:	6823      	ldr	r3, [r4, #0]
 8009826:	0799      	lsls	r1, r3, #30
 8009828:	d43f      	bmi.n	80098aa <HAL_RCC_ClockConfig+0x11a>
    if(hpre == RCC_SYSCLK_DIV2)
 800982a:	f1b9 0f80 	cmp.w	r9, #128	; 0x80
 800982e:	d103      	bne.n	8009838 <HAL_RCC_ClockConfig+0xa8>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8009830:	68b2      	ldr	r2, [r6, #8]
 8009832:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8009836:	60b2      	str	r2, [r6, #8]
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009838:	495a      	ldr	r1, [pc, #360]	; (80099a4 <HAL_RCC_ClockConfig+0x214>)
 800983a:	680a      	ldr	r2, [r1, #0]
 800983c:	f002 020f 	and.w	r2, r2, #15
 8009840:	42aa      	cmp	r2, r5
 8009842:	d909      	bls.n	8009858 <HAL_RCC_ClockConfig+0xc8>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009844:	680a      	ldr	r2, [r1, #0]
 8009846:	f022 020f 	bic.w	r2, r2, #15
 800984a:	432a      	orrs	r2, r5
 800984c:	600a      	str	r2, [r1, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800984e:	680a      	ldr	r2, [r1, #0]
 8009850:	f002 020f 	and.w	r2, r2, #15
 8009854:	42aa      	cmp	r2, r5
 8009856:	d1b2      	bne.n	80097be <HAL_RCC_ClockConfig+0x2e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009858:	075a      	lsls	r2, r3, #29
 800985a:	d506      	bpl.n	800986a <HAL_RCC_ClockConfig+0xda>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800985c:	4952      	ldr	r1, [pc, #328]	; (80099a8 <HAL_RCC_ClockConfig+0x218>)
 800985e:	68e0      	ldr	r0, [r4, #12]
 8009860:	688a      	ldr	r2, [r1, #8]
 8009862:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8009866:	4302      	orrs	r2, r0
 8009868:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800986a:	071b      	lsls	r3, r3, #28
 800986c:	d507      	bpl.n	800987e <HAL_RCC_ClockConfig+0xee>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800986e:	4a4e      	ldr	r2, [pc, #312]	; (80099a8 <HAL_RCC_ClockConfig+0x218>)
 8009870:	6921      	ldr	r1, [r4, #16]
 8009872:	6893      	ldr	r3, [r2, #8]
 8009874:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8009878:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800987c:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800987e:	f7ff fc21 	bl	80090c4 <HAL_RCC_GetSysClockFreq>
 8009882:	4a49      	ldr	r2, [pc, #292]	; (80099a8 <HAL_RCC_ClockConfig+0x218>)
 8009884:	4c4a      	ldr	r4, [pc, #296]	; (80099b0 <HAL_RCC_ClockConfig+0x220>)
 8009886:	6892      	ldr	r2, [r2, #8]
 8009888:	494a      	ldr	r1, [pc, #296]	; (80099b4 <HAL_RCC_ClockConfig+0x224>)
 800988a:	f3c2 1203 	ubfx	r2, r2, #4, #4
 800988e:	4603      	mov	r3, r0
 8009890:	5ca2      	ldrb	r2, [r4, r2]
  status = HAL_InitTick(uwTickPrio);
 8009892:	4849      	ldr	r0, [pc, #292]	; (80099b8 <HAL_RCC_ClockConfig+0x228>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8009894:	f002 021f 	and.w	r2, r2, #31
 8009898:	40d3      	lsrs	r3, r2
 800989a:	600b      	str	r3, [r1, #0]
  status = HAL_InitTick(uwTickPrio);
 800989c:	6800      	ldr	r0, [r0, #0]
}
 800989e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  status = HAL_InitTick(uwTickPrio);
 80098a2:	f7fc bb89 	b.w	8005fb8 <HAL_InitTick>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80098a6:	079f      	lsls	r7, r3, #30
 80098a8:	d5c6      	bpl.n	8009838 <HAL_RCC_ClockConfig+0xa8>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80098aa:	493f      	ldr	r1, [pc, #252]	; (80099a8 <HAL_RCC_ClockConfig+0x218>)
 80098ac:	68a0      	ldr	r0, [r4, #8]
 80098ae:	688a      	ldr	r2, [r1, #8]
 80098b0:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80098b4:	4302      	orrs	r2, r0
 80098b6:	608a      	str	r2, [r1, #8]
 80098b8:	e7be      	b.n	8009838 <HAL_RCC_ClockConfig+0xa8>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80098ba:	039f      	lsls	r7, r3, #14
 80098bc:	d491      	bmi.n	80097e2 <HAL_RCC_ClockConfig+0x52>
 80098be:	e77e      	b.n	80097be <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 80098c0:	2001      	movs	r0, #1
}
 80098c2:	4770      	bx	lr
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80098c4:	4938      	ldr	r1, [pc, #224]	; (80099a8 <HAL_RCC_ClockConfig+0x218>)
 80098c6:	6808      	ldr	r0, [r1, #0]
 80098c8:	0186      	lsls	r6, r0, #6
 80098ca:	f57f af78 	bpl.w	80097be <HAL_RCC_ClockConfig+0x2e>
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
  uint32_t msirange = 0U;
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 80098ce:	68c8      	ldr	r0, [r1, #12]
 80098d0:	f000 0003 	and.w	r0, r0, #3
 80098d4:	2801      	cmp	r0, #1
 80098d6:	d01c      	beq.n	8009912 <HAL_RCC_ClockConfig+0x182>
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80098d8:	68c8      	ldr	r0, [r1, #12]
 80098da:	f000 0003 	and.w	r0, r0, #3

  switch (pllsource)
 80098de:	3802      	subs	r0, #2
 80098e0:	2801      	cmp	r0, #1
 80098e2:	d95c      	bls.n	800999e <HAL_RCC_ClockConfig+0x20e>
  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
  default:
    pllvco = msirange;
    break;
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80098e4:	68cb      	ldr	r3, [r1, #12]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80098e6:	68cb      	ldr	r3, [r1, #12]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80098e8:	68cb      	ldr	r3, [r1, #12]
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80098ea:	f04f 0900 	mov.w	r9, #0
 80098ee:	e781      	b.n	80097f4 <HAL_RCC_ClockConfig+0x64>
        return HAL_TIMEOUT;
 80098f0:	2003      	movs	r0, #3
 80098f2:	e765      	b.n	80097c0 <HAL_RCC_ClockConfig+0x30>
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80098f4:	4a2c      	ldr	r2, [pc, #176]	; (80099a8 <HAL_RCC_ClockConfig+0x218>)
 80098f6:	6893      	ldr	r3, [r2, #8]
 80098f8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80098fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009900:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8009902:	6862      	ldr	r2, [r4, #4]
 8009904:	f04f 0980 	mov.w	r9, #128	; 0x80
 8009908:	e774      	b.n	80097f4 <HAL_RCC_ClockConfig+0x64>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800990a:	0558      	lsls	r0, r3, #21
 800990c:	f57f af57 	bpl.w	80097be <HAL_RCC_ClockConfig+0x2e>
 8009910:	e767      	b.n	80097e2 <HAL_RCC_ClockConfig+0x52>
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8009912:	6808      	ldr	r0, [r1, #0]
    msirange = MSIRangeTable[msirange];
 8009914:	4e29      	ldr	r6, [pc, #164]	; (80099bc <HAL_RCC_ClockConfig+0x22c>)
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8009916:	0700      	lsls	r0, r0, #28
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8009918:	bf54      	ite	pl
 800991a:	f8d1 1094 	ldrpl.w	r1, [r1, #148]	; 0x94
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800991e:	6809      	ldrmi	r1, [r1, #0]
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8009920:	4821      	ldr	r0, [pc, #132]	; (80099a8 <HAL_RCC_ClockConfig+0x218>)
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8009922:	bf54      	ite	pl
 8009924:	f3c1 2103 	ubfxpl	r1, r1, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8009928:	f3c1 1103 	ubfxmi	r1, r1, #4, #4
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800992c:	68c0      	ldr	r0, [r0, #12]
    msirange = MSIRangeTable[msirange];
 800992e:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
    pllvco = HSI_VALUE;
 8009932:	4e23      	ldr	r6, [pc, #140]	; (80099c0 <HAL_RCC_ClockConfig+0x230>)
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8009934:	f000 0003 	and.w	r0, r0, #3
  switch (pllsource)
 8009938:	3802      	subs	r0, #2
    pllvco = HSI_VALUE;
 800993a:	2801      	cmp	r0, #1
 800993c:	bf98      	it	ls
 800993e:	4631      	movls	r1, r6
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8009940:	4e19      	ldr	r6, [pc, #100]	; (80099a8 <HAL_RCC_ClockConfig+0x218>)
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8009942:	4f1a      	ldr	r7, [pc, #104]	; (80099ac <HAL_RCC_ClockConfig+0x21c>)
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8009944:	f8d6 c00c 	ldr.w	ip, [r6, #12]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8009948:	f8d6 e00c 	ldr.w	lr, [r6, #12]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800994c:	68f0      	ldr	r0, [r6, #12]
 800994e:	f3c0 6041 	ubfx	r0, r0, #25, #2
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8009952:	f3cc 1c03 	ubfx	ip, ip, #4, #4
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8009956:	f3ce 2e06 	ubfx	lr, lr, #8, #7
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800995a:	3001      	adds	r0, #1
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800995c:	f10c 0c01 	add.w	ip, ip, #1
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8009960:	fb01 f10e 	mul.w	r1, r1, lr
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8009964:	0040      	lsls	r0, r0, #1
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8009966:	fbb1 f1fc 	udiv	r1, r1, ip
  sysclockfreq = pllvco / pllr;
 800996a:	fbb1 f1f0 	udiv	r1, r1, r0
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 800996e:	42b9      	cmp	r1, r7
 8009970:	d909      	bls.n	8009986 <HAL_RCC_ClockConfig+0x1f6>
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8009972:	68b1      	ldr	r1, [r6, #8]
 8009974:	f011 0ff0 	tst.w	r1, #240	; 0xf0
 8009978:	d008      	beq.n	800998c <HAL_RCC_ClockConfig+0x1fc>
        else if((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) && (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 800997a:	f013 0902 	ands.w	r9, r3, #2
 800997e:	f43f af39 	beq.w	80097f4 <HAL_RCC_ClockConfig+0x64>
 8009982:	68a3      	ldr	r3, [r4, #8]
 8009984:	b113      	cbz	r3, 800998c <HAL_RCC_ClockConfig+0x1fc>
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8009986:	f04f 0900 	mov.w	r9, #0
 800998a:	e733      	b.n	80097f4 <HAL_RCC_ClockConfig+0x64>
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800998c:	68b3      	ldr	r3, [r6, #8]
 800998e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009992:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009996:	60b3      	str	r3, [r6, #8]
          hpre = RCC_SYSCLK_DIV2;
 8009998:	f04f 0980 	mov.w	r9, #128	; 0x80
 800999c:	e72a      	b.n	80097f4 <HAL_RCC_ClockConfig+0x64>
    pllvco = HSI_VALUE;
 800999e:	4908      	ldr	r1, [pc, #32]	; (80099c0 <HAL_RCC_ClockConfig+0x230>)
 80099a0:	e7ce      	b.n	8009940 <HAL_RCC_ClockConfig+0x1b0>
 80099a2:	bf00      	nop
 80099a4:	40022000 	.word	0x40022000
 80099a8:	40021000 	.word	0x40021000
 80099ac:	04c4b400 	.word	0x04c4b400
 80099b0:	0801b8c0 	.word	0x0801b8c0
 80099b4:	200000f8 	.word	0x200000f8
 80099b8:	20000190 	.word	0x20000190
 80099bc:	0801b890 	.word	0x0801b890
 80099c0:	00f42400 	.word	0x00f42400

080099c4 <HAL_RCC_GetHCLKFreq>:
  return SystemCoreClock;
 80099c4:	4b01      	ldr	r3, [pc, #4]	; (80099cc <HAL_RCC_GetHCLKFreq+0x8>)
}
 80099c6:	6818      	ldr	r0, [r3, #0]
 80099c8:	4770      	bx	lr
 80099ca:	bf00      	nop
 80099cc:	200000f8 	.word	0x200000f8

080099d0 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80099d0:	4b05      	ldr	r3, [pc, #20]	; (80099e8 <HAL_RCC_GetPCLK1Freq+0x18>)
 80099d2:	4a06      	ldr	r2, [pc, #24]	; (80099ec <HAL_RCC_GetPCLK1Freq+0x1c>)
 80099d4:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 80099d6:	4906      	ldr	r1, [pc, #24]	; (80099f0 <HAL_RCC_GetPCLK1Freq+0x20>)
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80099d8:	f3c3 2302 	ubfx	r3, r3, #8, #3
 80099dc:	6808      	ldr	r0, [r1, #0]
 80099de:	5cd3      	ldrb	r3, [r2, r3]
 80099e0:	f003 031f 	and.w	r3, r3, #31
}
 80099e4:	40d8      	lsrs	r0, r3
 80099e6:	4770      	bx	lr
 80099e8:	40021000 	.word	0x40021000
 80099ec:	0801b8d0 	.word	0x0801b8d0
 80099f0:	200000f8 	.word	0x200000f8

080099f4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80099f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80099f6:	4b44      	ldr	r3, [pc, #272]	; (8009b08 <RCCEx_PLLSAI1_Config+0x114>)
 80099f8:	68da      	ldr	r2, [r3, #12]
 80099fa:	0792      	lsls	r2, r2, #30
{
 80099fc:	4605      	mov	r5, r0
 80099fe:	460f      	mov	r7, r1
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8009a00:	d007      	beq.n	8009a12 <RCCEx_PLLSAI1_Config+0x1e>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8009a02:	68db      	ldr	r3, [r3, #12]
 8009a04:	6802      	ldr	r2, [r0, #0]
 8009a06:	f003 0303 	and.w	r3, r3, #3
 8009a0a:	4293      	cmp	r3, r2
 8009a0c:	d012      	beq.n	8009a34 <RCCEx_PLLSAI1_Config+0x40>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8009a0e:	2001      	movs	r0, #1
      }
    }
  }

  return status;
}
 8009a10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    switch(PllSai1->PLLSAI1Source)
 8009a12:	6800      	ldr	r0, [r0, #0]
 8009a14:	2802      	cmp	r0, #2
 8009a16:	d04e      	beq.n	8009ab6 <RCCEx_PLLSAI1_Config+0xc2>
 8009a18:	2803      	cmp	r0, #3
 8009a1a:	d045      	beq.n	8009aa8 <RCCEx_PLLSAI1_Config+0xb4>
 8009a1c:	2801      	cmp	r0, #1
 8009a1e:	d1f6      	bne.n	8009a0e <RCCEx_PLLSAI1_Config+0x1a>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	079b      	lsls	r3, r3, #30
 8009a24:	d5f4      	bpl.n	8009a10 <RCCEx_PLLSAI1_Config+0x1c>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8009a26:	4a38      	ldr	r2, [pc, #224]	; (8009b08 <RCCEx_PLLSAI1_Config+0x114>)
 8009a28:	68d3      	ldr	r3, [r2, #12]
 8009a2a:	f023 0303 	bic.w	r3, r3, #3
 8009a2e:	4318      	orrs	r0, r3
 8009a30:	60d0      	str	r0, [r2, #12]
  if(status == HAL_OK)
 8009a32:	e001      	b.n	8009a38 <RCCEx_PLLSAI1_Config+0x44>
       ||
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d0ea      	beq.n	8009a0e <RCCEx_PLLSAI1_Config+0x1a>
    __HAL_RCC_PLLSAI1_DISABLE();
 8009a38:	4c33      	ldr	r4, [pc, #204]	; (8009b08 <RCCEx_PLLSAI1_Config+0x114>)
 8009a3a:	6823      	ldr	r3, [r4, #0]
 8009a3c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009a40:	6023      	str	r3, [r4, #0]
    tickstart = HAL_GetTick();
 8009a42:	f7fc faf9 	bl	8006038 <HAL_GetTick>
 8009a46:	4606      	mov	r6, r0
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8009a48:	e004      	b.n	8009a54 <RCCEx_PLLSAI1_Config+0x60>
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8009a4a:	f7fc faf5 	bl	8006038 <HAL_GetTick>
 8009a4e:	1b83      	subs	r3, r0, r6
 8009a50:	2b02      	cmp	r3, #2
 8009a52:	d834      	bhi.n	8009abe <RCCEx_PLLSAI1_Config+0xca>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8009a54:	6823      	ldr	r3, [r4, #0]
 8009a56:	011a      	lsls	r2, r3, #4
 8009a58:	d4f7      	bmi.n	8009a4a <RCCEx_PLLSAI1_Config+0x56>
      if(Divider == DIVIDER_P_UPDATE)
 8009a5a:	2f00      	cmp	r7, #0
 8009a5c:	d131      	bne.n	8009ac2 <RCCEx_PLLSAI1_Config+0xce>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8009a5e:	e9d5 6302 	ldrd	r6, r3, [r5, #8]
 8009a62:	6920      	ldr	r0, [r4, #16]
 8009a64:	4929      	ldr	r1, [pc, #164]	; (8009b0c <RCCEx_PLLSAI1_Config+0x118>)
 8009a66:	686a      	ldr	r2, [r5, #4]
 8009a68:	06db      	lsls	r3, r3, #27
 8009a6a:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
 8009a6e:	4001      	ands	r1, r0
 8009a70:	430b      	orrs	r3, r1
 8009a72:	3a01      	subs	r2, #1
 8009a74:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8009a78:	6123      	str	r3, [r4, #16]
      __HAL_RCC_PLLSAI1_ENABLE();
 8009a7a:	4c23      	ldr	r4, [pc, #140]	; (8009b08 <RCCEx_PLLSAI1_Config+0x114>)
 8009a7c:	6823      	ldr	r3, [r4, #0]
 8009a7e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009a82:	6023      	str	r3, [r4, #0]
      tickstart = HAL_GetTick();
 8009a84:	f7fc fad8 	bl	8006038 <HAL_GetTick>
 8009a88:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8009a8a:	e004      	b.n	8009a96 <RCCEx_PLLSAI1_Config+0xa2>
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8009a8c:	f7fc fad4 	bl	8006038 <HAL_GetTick>
 8009a90:	1b83      	subs	r3, r0, r6
 8009a92:	2b02      	cmp	r3, #2
 8009a94:	d813      	bhi.n	8009abe <RCCEx_PLLSAI1_Config+0xca>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8009a96:	6823      	ldr	r3, [r4, #0]
 8009a98:	011b      	lsls	r3, r3, #4
 8009a9a:	d5f7      	bpl.n	8009a8c <RCCEx_PLLSAI1_Config+0x98>
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8009a9c:	69aa      	ldr	r2, [r5, #24]
 8009a9e:	6923      	ldr	r3, [r4, #16]
 8009aa0:	4313      	orrs	r3, r2
 8009aa2:	6123      	str	r3, [r4, #16]
 8009aa4:	2000      	movs	r0, #0
}
 8009aa6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8009aa8:	681a      	ldr	r2, [r3, #0]
 8009aaa:	0394      	lsls	r4, r2, #14
 8009aac:	d4bb      	bmi.n	8009a26 <RCCEx_PLLSAI1_Config+0x32>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	0359      	lsls	r1, r3, #13
 8009ab2:	d5ac      	bpl.n	8009a0e <RCCEx_PLLSAI1_Config+0x1a>
 8009ab4:	e7b7      	b.n	8009a26 <RCCEx_PLLSAI1_Config+0x32>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	055e      	lsls	r6, r3, #21
 8009aba:	d5a8      	bpl.n	8009a0e <RCCEx_PLLSAI1_Config+0x1a>
 8009abc:	e7b3      	b.n	8009a26 <RCCEx_PLLSAI1_Config+0x32>
        status = HAL_TIMEOUT;
 8009abe:	2003      	movs	r0, #3
}
 8009ac0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      else if(Divider == DIVIDER_Q_UPDATE)
 8009ac2:	2f01      	cmp	r7, #1
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8009ac4:	6926      	ldr	r6, [r4, #16]
      else if(Divider == DIVIDER_Q_UPDATE)
 8009ac6:	d00f      	beq.n	8009ae8 <RCCEx_PLLSAI1_Config+0xf4>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8009ac8:	e9d5 1001 	ldrd	r1, r0, [r5, #4]
 8009acc:	4b10      	ldr	r3, [pc, #64]	; (8009b10 <RCCEx_PLLSAI1_Config+0x11c>)
 8009ace:	696a      	ldr	r2, [r5, #20]
 8009ad0:	4033      	ands	r3, r6
 8009ad2:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8009ad6:	3901      	subs	r1, #1
 8009ad8:	0852      	lsrs	r2, r2, #1
 8009ada:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 8009ade:	3a01      	subs	r2, #1
 8009ae0:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 8009ae4:	6123      	str	r3, [r4, #16]
 8009ae6:	e7c8      	b.n	8009a7a <RCCEx_PLLSAI1_Config+0x86>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8009ae8:	e9d5 1001 	ldrd	r1, r0, [r5, #4]
 8009aec:	4b09      	ldr	r3, [pc, #36]	; (8009b14 <RCCEx_PLLSAI1_Config+0x120>)
 8009aee:	692a      	ldr	r2, [r5, #16]
 8009af0:	4033      	ands	r3, r6
 8009af2:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8009af6:	3901      	subs	r1, #1
 8009af8:	0852      	lsrs	r2, r2, #1
 8009afa:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 8009afe:	3a01      	subs	r2, #1
 8009b00:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 8009b04:	6123      	str	r3, [r4, #16]
 8009b06:	e7b8      	b.n	8009a7a <RCCEx_PLLSAI1_Config+0x86>
 8009b08:	40021000 	.word	0x40021000
 8009b0c:	07ff800f 	.word	0x07ff800f
 8009b10:	f9ff800f 	.word	0xf9ff800f
 8009b14:	ff9f800f 	.word	0xff9f800f

08009b18 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8009b18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8009b1a:	4b44      	ldr	r3, [pc, #272]	; (8009c2c <RCCEx_PLLSAI2_Config+0x114>)
 8009b1c:	68da      	ldr	r2, [r3, #12]
 8009b1e:	0792      	lsls	r2, r2, #30
{
 8009b20:	4605      	mov	r5, r0
 8009b22:	460f      	mov	r7, r1
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8009b24:	d007      	beq.n	8009b36 <RCCEx_PLLSAI2_Config+0x1e>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8009b26:	68db      	ldr	r3, [r3, #12]
 8009b28:	6802      	ldr	r2, [r0, #0]
 8009b2a:	f003 0303 	and.w	r3, r3, #3
 8009b2e:	4293      	cmp	r3, r2
 8009b30:	d012      	beq.n	8009b58 <RCCEx_PLLSAI2_Config+0x40>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8009b32:	2001      	movs	r0, #1
      }
    }
  }

  return status;
}
 8009b34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    switch(PllSai2->PLLSAI2Source)
 8009b36:	6800      	ldr	r0, [r0, #0]
 8009b38:	2802      	cmp	r0, #2
 8009b3a:	d04e      	beq.n	8009bda <RCCEx_PLLSAI2_Config+0xc2>
 8009b3c:	2803      	cmp	r0, #3
 8009b3e:	d045      	beq.n	8009bcc <RCCEx_PLLSAI2_Config+0xb4>
 8009b40:	2801      	cmp	r0, #1
 8009b42:	d1f6      	bne.n	8009b32 <RCCEx_PLLSAI2_Config+0x1a>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	079b      	lsls	r3, r3, #30
 8009b48:	d5f4      	bpl.n	8009b34 <RCCEx_PLLSAI2_Config+0x1c>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8009b4a:	4a38      	ldr	r2, [pc, #224]	; (8009c2c <RCCEx_PLLSAI2_Config+0x114>)
 8009b4c:	68d3      	ldr	r3, [r2, #12]
 8009b4e:	f023 0303 	bic.w	r3, r3, #3
 8009b52:	4318      	orrs	r0, r3
 8009b54:	60d0      	str	r0, [r2, #12]
  if(status == HAL_OK)
 8009b56:	e001      	b.n	8009b5c <RCCEx_PLLSAI2_Config+0x44>
       ||
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d0ea      	beq.n	8009b32 <RCCEx_PLLSAI2_Config+0x1a>
    __HAL_RCC_PLLSAI2_DISABLE();
 8009b5c:	4c33      	ldr	r4, [pc, #204]	; (8009c2c <RCCEx_PLLSAI2_Config+0x114>)
 8009b5e:	6823      	ldr	r3, [r4, #0]
 8009b60:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009b64:	6023      	str	r3, [r4, #0]
    tickstart = HAL_GetTick();
 8009b66:	f7fc fa67 	bl	8006038 <HAL_GetTick>
 8009b6a:	4606      	mov	r6, r0
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8009b6c:	e004      	b.n	8009b78 <RCCEx_PLLSAI2_Config+0x60>
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8009b6e:	f7fc fa63 	bl	8006038 <HAL_GetTick>
 8009b72:	1b83      	subs	r3, r0, r6
 8009b74:	2b02      	cmp	r3, #2
 8009b76:	d834      	bhi.n	8009be2 <RCCEx_PLLSAI2_Config+0xca>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8009b78:	6823      	ldr	r3, [r4, #0]
 8009b7a:	009a      	lsls	r2, r3, #2
 8009b7c:	d4f7      	bmi.n	8009b6e <RCCEx_PLLSAI2_Config+0x56>
      if(Divider == DIVIDER_P_UPDATE)
 8009b7e:	2f00      	cmp	r7, #0
 8009b80:	d131      	bne.n	8009be6 <RCCEx_PLLSAI2_Config+0xce>
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8009b82:	e9d5 6302 	ldrd	r6, r3, [r5, #8]
 8009b86:	6960      	ldr	r0, [r4, #20]
 8009b88:	4929      	ldr	r1, [pc, #164]	; (8009c30 <RCCEx_PLLSAI2_Config+0x118>)
 8009b8a:	686a      	ldr	r2, [r5, #4]
 8009b8c:	06db      	lsls	r3, r3, #27
 8009b8e:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
 8009b92:	4001      	ands	r1, r0
 8009b94:	430b      	orrs	r3, r1
 8009b96:	3a01      	subs	r2, #1
 8009b98:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8009b9c:	6163      	str	r3, [r4, #20]
      __HAL_RCC_PLLSAI2_ENABLE();
 8009b9e:	4c23      	ldr	r4, [pc, #140]	; (8009c2c <RCCEx_PLLSAI2_Config+0x114>)
 8009ba0:	6823      	ldr	r3, [r4, #0]
 8009ba2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009ba6:	6023      	str	r3, [r4, #0]
      tickstart = HAL_GetTick();
 8009ba8:	f7fc fa46 	bl	8006038 <HAL_GetTick>
 8009bac:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8009bae:	e004      	b.n	8009bba <RCCEx_PLLSAI2_Config+0xa2>
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8009bb0:	f7fc fa42 	bl	8006038 <HAL_GetTick>
 8009bb4:	1b83      	subs	r3, r0, r6
 8009bb6:	2b02      	cmp	r3, #2
 8009bb8:	d813      	bhi.n	8009be2 <RCCEx_PLLSAI2_Config+0xca>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8009bba:	6823      	ldr	r3, [r4, #0]
 8009bbc:	009b      	lsls	r3, r3, #2
 8009bbe:	d5f7      	bpl.n	8009bb0 <RCCEx_PLLSAI2_Config+0x98>
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8009bc0:	69aa      	ldr	r2, [r5, #24]
 8009bc2:	6963      	ldr	r3, [r4, #20]
 8009bc4:	4313      	orrs	r3, r2
 8009bc6:	6163      	str	r3, [r4, #20]
 8009bc8:	2000      	movs	r0, #0
}
 8009bca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8009bcc:	681a      	ldr	r2, [r3, #0]
 8009bce:	0394      	lsls	r4, r2, #14
 8009bd0:	d4bb      	bmi.n	8009b4a <RCCEx_PLLSAI2_Config+0x32>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	0359      	lsls	r1, r3, #13
 8009bd6:	d5ac      	bpl.n	8009b32 <RCCEx_PLLSAI2_Config+0x1a>
 8009bd8:	e7b7      	b.n	8009b4a <RCCEx_PLLSAI2_Config+0x32>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	055e      	lsls	r6, r3, #21
 8009bde:	d5a8      	bpl.n	8009b32 <RCCEx_PLLSAI2_Config+0x1a>
 8009be0:	e7b3      	b.n	8009b4a <RCCEx_PLLSAI2_Config+0x32>
        status = HAL_TIMEOUT;
 8009be2:	2003      	movs	r0, #3
}
 8009be4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      else if(Divider == DIVIDER_Q_UPDATE)
 8009be6:	2f01      	cmp	r7, #1
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8009be8:	6966      	ldr	r6, [r4, #20]
      else if(Divider == DIVIDER_Q_UPDATE)
 8009bea:	d00f      	beq.n	8009c0c <RCCEx_PLLSAI2_Config+0xf4>
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8009bec:	e9d5 1001 	ldrd	r1, r0, [r5, #4]
 8009bf0:	4b10      	ldr	r3, [pc, #64]	; (8009c34 <RCCEx_PLLSAI2_Config+0x11c>)
 8009bf2:	696a      	ldr	r2, [r5, #20]
 8009bf4:	4033      	ands	r3, r6
 8009bf6:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8009bfa:	3901      	subs	r1, #1
 8009bfc:	0852      	lsrs	r2, r2, #1
 8009bfe:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 8009c02:	3a01      	subs	r2, #1
 8009c04:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 8009c08:	6163      	str	r3, [r4, #20]
 8009c0a:	e7c8      	b.n	8009b9e <RCCEx_PLLSAI2_Config+0x86>
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8009c0c:	e9d5 1001 	ldrd	r1, r0, [r5, #4]
 8009c10:	4b09      	ldr	r3, [pc, #36]	; (8009c38 <RCCEx_PLLSAI2_Config+0x120>)
 8009c12:	692a      	ldr	r2, [r5, #16]
 8009c14:	4033      	ands	r3, r6
 8009c16:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8009c1a:	3901      	subs	r1, #1
 8009c1c:	0852      	lsrs	r2, r2, #1
 8009c1e:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 8009c22:	3a01      	subs	r2, #1
 8009c24:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 8009c28:	6163      	str	r3, [r4, #20]
 8009c2a:	e7b8      	b.n	8009b9e <RCCEx_PLLSAI2_Config+0x86>
 8009c2c:	40021000 	.word	0x40021000
 8009c30:	07ff800f 	.word	0x07ff800f
 8009c34:	f9ff800f 	.word	0xf9ff800f
 8009c38:	ff9f800f 	.word	0xff9f800f

08009c3c <HAL_RCCEx_PeriphCLKConfig>:
{
 8009c3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8009c40:	6803      	ldr	r3, [r0, #0]
 8009c42:	f413 6500 	ands.w	r5, r3, #2048	; 0x800
{
 8009c46:	b082      	sub	sp, #8
 8009c48:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8009c4a:	d023      	beq.n	8009c94 <HAL_RCCEx_PeriphCLKConfig+0x58>
    switch(PeriphClkInit->Sai1ClockSelection)
 8009c4c:	6ec1      	ldr	r1, [r0, #108]	; 0x6c
 8009c4e:	2940      	cmp	r1, #64	; 0x40
 8009c50:	f000 825e 	beq.w	800a110 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 8009c54:	d810      	bhi.n	8009c78 <HAL_RCCEx_PeriphCLKConfig+0x3c>
 8009c56:	2900      	cmp	r1, #0
 8009c58:	f000 8214 	beq.w	800a084 <HAL_RCCEx_PeriphCLKConfig+0x448>
 8009c5c:	2920      	cmp	r1, #32
 8009c5e:	f040 8282 	bne.w	800a166 <HAL_RCCEx_PeriphCLKConfig+0x52a>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8009c62:	2100      	movs	r1, #0
 8009c64:	3020      	adds	r0, #32
 8009c66:	f7ff ff57 	bl	8009b18 <RCCEx_PLLSAI2_Config>
 8009c6a:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8009c6c:	2d00      	cmp	r5, #0
 8009c6e:	f040 824d 	bne.w	800a10c <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8009c72:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 8009c74:	6823      	ldr	r3, [r4, #0]
 8009c76:	e004      	b.n	8009c82 <HAL_RCCEx_PeriphCLKConfig+0x46>
    switch(PeriphClkInit->Sai1ClockSelection)
 8009c78:	2960      	cmp	r1, #96	; 0x60
 8009c7a:	d002      	beq.n	8009c82 <HAL_RCCEx_PeriphCLKConfig+0x46>
 8009c7c:	2980      	cmp	r1, #128	; 0x80
 8009c7e:	f040 8272 	bne.w	800a166 <HAL_RCCEx_PeriphCLKConfig+0x52a>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009c82:	48b3      	ldr	r0, [pc, #716]	; (8009f50 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8009c84:	f8d0 209c 	ldr.w	r2, [r0, #156]	; 0x9c
 8009c88:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009c8c:	4311      	orrs	r1, r2
 8009c8e:	f8c0 109c 	str.w	r1, [r0, #156]	; 0x9c
 8009c92:	2500      	movs	r5, #0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8009c94:	04d8      	lsls	r0, r3, #19
 8009c96:	f140 8147 	bpl.w	8009f28 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
    switch(PeriphClkInit->Sai2ClockSelection)
 8009c9a:	6f21      	ldr	r1, [r4, #112]	; 0x70
 8009c9c:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8009ca0:	f000 822d 	beq.w	800a0fe <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8009ca4:	f200 8133 	bhi.w	8009f0e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8009ca8:	2900      	cmp	r1, #0
 8009caa:	f000 81f3 	beq.w	800a094 <HAL_RCCEx_PeriphCLKConfig+0x458>
 8009cae:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8009cb2:	f040 8255 	bne.w	800a160 <HAL_RCCEx_PeriphCLKConfig+0x524>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8009cb6:	2100      	movs	r1, #0
 8009cb8:	f104 0020 	add.w	r0, r4, #32
 8009cbc:	f7ff ff2c 	bl	8009b18 <RCCEx_PLLSAI2_Config>
 8009cc0:	6823      	ldr	r3, [r4, #0]
 8009cc2:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 8009cc4:	2e00      	cmp	r6, #0
 8009cc6:	f040 812d 	bne.w	8009f24 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8009cca:	49a1      	ldr	r1, [pc, #644]	; (8009f50 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8009ccc:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8009cce:	f8d1 209c 	ldr.w	r2, [r1, #156]	; 0x9c
 8009cd2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8009cd6:	4302      	orrs	r2, r0
 8009cd8:	f8c1 209c 	str.w	r2, [r1, #156]	; 0x9c
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009cdc:	0399      	lsls	r1, r3, #14
 8009cde:	f100 8127 	bmi.w	8009f30 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8009ce2:	07da      	lsls	r2, r3, #31
 8009ce4:	d508      	bpl.n	8009cf8 <HAL_RCCEx_PeriphCLKConfig+0xbc>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8009ce6:	499a      	ldr	r1, [pc, #616]	; (8009f50 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8009ce8:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8009cea:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8009cee:	f022 0203 	bic.w	r2, r2, #3
 8009cf2:	4302      	orrs	r2, r0
 8009cf4:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8009cf8:	079f      	lsls	r7, r3, #30
 8009cfa:	d508      	bpl.n	8009d0e <HAL_RCCEx_PeriphCLKConfig+0xd2>
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8009cfc:	4994      	ldr	r1, [pc, #592]	; (8009f50 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8009cfe:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8009d00:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8009d04:	f022 020c 	bic.w	r2, r2, #12
 8009d08:	4302      	orrs	r2, r0
 8009d0a:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8009d0e:	0758      	lsls	r0, r3, #29
 8009d10:	d508      	bpl.n	8009d24 <HAL_RCCEx_PeriphCLKConfig+0xe8>
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8009d12:	498f      	ldr	r1, [pc, #572]	; (8009f50 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8009d14:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8009d16:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8009d1a:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8009d1e:	4302      	orrs	r2, r0
 8009d20:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8009d24:	0719      	lsls	r1, r3, #28
 8009d26:	d508      	bpl.n	8009d3a <HAL_RCCEx_PeriphCLKConfig+0xfe>
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8009d28:	4989      	ldr	r1, [pc, #548]	; (8009f50 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8009d2a:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8009d2c:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8009d30:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8009d34:	4302      	orrs	r2, r0
 8009d36:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8009d3a:	06da      	lsls	r2, r3, #27
 8009d3c:	d508      	bpl.n	8009d50 <HAL_RCCEx_PeriphCLKConfig+0x114>
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8009d3e:	4984      	ldr	r1, [pc, #528]	; (8009f50 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8009d40:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8009d42:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8009d46:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8009d4a:	4302      	orrs	r2, r0
 8009d4c:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009d50:	069f      	lsls	r7, r3, #26
 8009d52:	d508      	bpl.n	8009d66 <HAL_RCCEx_PeriphCLKConfig+0x12a>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009d54:	497e      	ldr	r1, [pc, #504]	; (8009f50 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8009d56:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8009d58:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8009d5c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8009d60:	4302      	orrs	r2, r0
 8009d62:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8009d66:	0598      	lsls	r0, r3, #22
 8009d68:	d508      	bpl.n	8009d7c <HAL_RCCEx_PeriphCLKConfig+0x140>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009d6a:	4979      	ldr	r1, [pc, #484]	; (8009f50 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8009d6c:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8009d6e:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8009d72:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 8009d76:	4302      	orrs	r2, r0
 8009d78:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8009d7c:	0559      	lsls	r1, r3, #21
 8009d7e:	d508      	bpl.n	8009d92 <HAL_RCCEx_PeriphCLKConfig+0x156>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8009d80:	4973      	ldr	r1, [pc, #460]	; (8009f50 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8009d82:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8009d84:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8009d88:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8009d8c:	4302      	orrs	r2, r0
 8009d8e:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8009d92:	065a      	lsls	r2, r3, #25
 8009d94:	d508      	bpl.n	8009da8 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8009d96:	496e      	ldr	r1, [pc, #440]	; (8009f50 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8009d98:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009d9a:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8009d9e:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8009da2:	4302      	orrs	r2, r0
 8009da4:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8009da8:	061f      	lsls	r7, r3, #24
 8009daa:	d508      	bpl.n	8009dbe <HAL_RCCEx_PeriphCLKConfig+0x182>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8009dac:	4968      	ldr	r1, [pc, #416]	; (8009f50 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8009dae:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009db0:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8009db4:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8009db8:	4302      	orrs	r2, r0
 8009dba:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8009dbe:	05d8      	lsls	r0, r3, #23
 8009dc0:	d508      	bpl.n	8009dd4 <HAL_RCCEx_PeriphCLKConfig+0x198>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8009dc2:	4963      	ldr	r1, [pc, #396]	; (8009f50 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8009dc4:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8009dc6:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8009dca:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8009dce:	4302      	orrs	r2, r0
 8009dd0:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009dd4:	02d9      	lsls	r1, r3, #11
 8009dd6:	d508      	bpl.n	8009dea <HAL_RCCEx_PeriphCLKConfig+0x1ae>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009dd8:	495d      	ldr	r1, [pc, #372]	; (8009f50 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8009dda:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8009ddc:	f8d1 209c 	ldr.w	r2, [r1, #156]	; 0x9c
 8009de0:	f022 0203 	bic.w	r2, r2, #3
 8009de4:	4302      	orrs	r2, r0
 8009de6:	f8c1 209c 	str.w	r2, [r1, #156]	; 0x9c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8009dea:	049a      	lsls	r2, r3, #18
 8009dec:	d510      	bpl.n	8009e10 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009dee:	4958      	ldr	r1, [pc, #352]	; (8009f50 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8009df0:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8009df2:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8009df6:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8009dfa:	4302      	orrs	r2, r0
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8009dfc:	f1b0 6f00 	cmp.w	r0, #134217728	; 0x8000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009e00:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8009e04:	f000 814c 	beq.w	800a0a0 <HAL_RCCEx_PeriphCLKConfig+0x464>
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8009e08:	f1b0 6f80 	cmp.w	r0, #67108864	; 0x4000000
 8009e0c:	f000 8186 	beq.w	800a11c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8009e10:	031f      	lsls	r7, r3, #12
 8009e12:	d51a      	bpl.n	8009e4a <HAL_RCCEx_PeriphCLKConfig+0x20e>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8009e14:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 8009e16:	4a4e      	ldr	r2, [pc, #312]	; (8009f50 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8009e18:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
 8009e1c:	f8d2 109c 	ldr.w	r1, [r2, #156]	; 0x9c
 8009e20:	f000 8143 	beq.w	800a0aa <HAL_RCCEx_PeriphCLKConfig+0x46e>
 8009e24:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
 8009e28:	f8c2 109c 	str.w	r1, [r2, #156]	; 0x9c
 8009e2c:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
 8009e30:	f021 6140 	bic.w	r1, r1, #201326592	; 0xc000000
 8009e34:	4301      	orrs	r1, r0
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8009e36:	f1b0 6f00 	cmp.w	r0, #134217728	; 0x8000000
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8009e3a:	f8c2 1088 	str.w	r1, [r2, #136]	; 0x88
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8009e3e:	f040 80e7 	bne.w	800a010 <HAL_RCCEx_PeriphCLKConfig+0x3d4>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009e42:	68d1      	ldr	r1, [r2, #12]
 8009e44:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8009e48:	60d1      	str	r1, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8009e4a:	0358      	lsls	r0, r3, #13
 8009e4c:	d510      	bpl.n	8009e70 <HAL_RCCEx_PeriphCLKConfig+0x234>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009e4e:	4940      	ldr	r1, [pc, #256]	; (8009f50 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8009e50:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8009e52:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8009e56:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8009e5a:	4302      	orrs	r2, r0
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8009e5c:	f1b0 6f00 	cmp.w	r0, #134217728	; 0x8000000
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009e60:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8009e64:	f000 812a 	beq.w	800a0bc <HAL_RCCEx_PeriphCLKConfig+0x480>
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8009e68:	f1b0 6f80 	cmp.w	r0, #67108864	; 0x4000000
 8009e6c:	f000 8161 	beq.w	800a132 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009e70:	0459      	lsls	r1, r3, #17
 8009e72:	d50d      	bpl.n	8009e90 <HAL_RCCEx_PeriphCLKConfig+0x254>
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009e74:	4836      	ldr	r0, [pc, #216]	; (8009f50 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8009e76:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 8009e7a:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 8009e7e:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8009e82:	430a      	orrs	r2, r1
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8009e84:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009e88:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8009e8c:	f000 8123 	beq.w	800a0d6 <HAL_RCCEx_PeriphCLKConfig+0x49a>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8009e90:	03da      	lsls	r2, r3, #15
 8009e92:	d509      	bpl.n	8009ea8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8009e94:	492e      	ldr	r1, [pc, #184]	; (8009f50 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8009e96:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 8009e9a:	f8d1 209c 	ldr.w	r2, [r1, #156]	; 0x9c
 8009e9e:	f022 0204 	bic.w	r2, r2, #4
 8009ea2:	4302      	orrs	r2, r0
 8009ea4:	f8c1 209c 	str.w	r2, [r1, #156]	; 0x9c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8009ea8:	029f      	lsls	r7, r3, #10
 8009eaa:	d509      	bpl.n	8009ec0 <HAL_RCCEx_PeriphCLKConfig+0x284>
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8009eac:	4928      	ldr	r1, [pc, #160]	; (8009f50 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8009eae:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8009eb2:	f8d1 209c 	ldr.w	r2, [r1, #156]	; 0x9c
 8009eb6:	f022 0218 	bic.w	r2, r2, #24
 8009eba:	4302      	orrs	r2, r0
 8009ebc:	f8c1 209c 	str.w	r2, [r1, #156]	; 0x9c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8009ec0:	0258      	lsls	r0, r3, #9
 8009ec2:	f100 80b4 	bmi.w	800a02e <HAL_RCCEx_PeriphCLKConfig+0x3f2>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 8009ec6:	021a      	lsls	r2, r3, #8
 8009ec8:	d50d      	bpl.n	8009ee6 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 8009eca:	4821      	ldr	r0, [pc, #132]	; (8009f50 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8009ecc:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
 8009ed0:	f8d0 209c 	ldr.w	r2, [r0, #156]	; 0x9c
 8009ed4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8009ed8:	430a      	orrs	r2, r1
    if(PeriphClkInit->DsiClockSelection == RCC_DSICLKSOURCE_PLLSAI2)
 8009eda:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
    __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 8009ede:	f8c0 209c 	str.w	r2, [r0, #156]	; 0x9c
    if(PeriphClkInit->DsiClockSelection == RCC_DSICLKSOURCE_PLLSAI2)
 8009ee2:	f000 8103 	beq.w	800a0ec <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8009ee6:	01db      	lsls	r3, r3, #7
 8009ee8:	d50d      	bpl.n	8009f06 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8009eea:	4a19      	ldr	r2, [pc, #100]	; (8009f50 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8009eec:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
 8009ef0:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
 8009ef4:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8009ef8:	430b      	orrs	r3, r1
    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8009efa:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8009efe:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8009f02:	f000 80e0 	beq.w	800a0c6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
}
 8009f06:	4628      	mov	r0, r5
 8009f08:	b002      	add	sp, #8
 8009f0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    switch(PeriphClkInit->Sai2ClockSelection)
 8009f0e:	f5b1 7f40 	cmp.w	r1, #768	; 0x300
 8009f12:	d003      	beq.n	8009f1c <HAL_RCCEx_PeriphCLKConfig+0x2e0>
 8009f14:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8009f18:	f040 8122 	bne.w	800a160 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8009f1c:	462e      	mov	r6, r5
    if(ret == HAL_OK)
 8009f1e:	2e00      	cmp	r6, #0
 8009f20:	f43f aed3 	beq.w	8009cca <HAL_RCCEx_PeriphCLKConfig+0x8e>
 8009f24:	4635      	mov	r5, r6
 8009f26:	e000      	b.n	8009f2a <HAL_RCCEx_PeriphCLKConfig+0x2ee>
 8009f28:	462e      	mov	r6, r5
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009f2a:	0399      	lsls	r1, r3, #14
 8009f2c:	f57f aed9 	bpl.w	8009ce2 <HAL_RCCEx_PeriphCLKConfig+0xa6>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8009f30:	4b07      	ldr	r3, [pc, #28]	; (8009f50 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8009f32:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8009f34:	00d2      	lsls	r2, r2, #3
 8009f36:	d55f      	bpl.n	8009ff8 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
    FlagStatus       pwrclkchanged = RESET;
 8009f38:	f04f 0900 	mov.w	r9, #0
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009f3c:	4f05      	ldr	r7, [pc, #20]	; (8009f54 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 8009f3e:	683b      	ldr	r3, [r7, #0]
 8009f40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009f44:	603b      	str	r3, [r7, #0]
    tickstart = HAL_GetTick();
 8009f46:	f7fc f877 	bl	8006038 <HAL_GetTick>
 8009f4a:	4680      	mov	r8, r0
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8009f4c:	e00b      	b.n	8009f66 <HAL_RCCEx_PeriphCLKConfig+0x32a>
 8009f4e:	bf00      	nop
 8009f50:	40021000 	.word	0x40021000
 8009f54:	40007000 	.word	0x40007000
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009f58:	f7fc f86e 	bl	8006038 <HAL_GetTick>
 8009f5c:	eba0 0308 	sub.w	r3, r0, r8
 8009f60:	2b02      	cmp	r3, #2
 8009f62:	f200 808c 	bhi.w	800a07e <HAL_RCCEx_PeriphCLKConfig+0x442>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8009f66:	683b      	ldr	r3, [r7, #0]
 8009f68:	05db      	lsls	r3, r3, #23
 8009f6a:	d5f5      	bpl.n	8009f58 <HAL_RCCEx_PeriphCLKConfig+0x31c>
    if(ret == HAL_OK)
 8009f6c:	2e00      	cmp	r6, #0
 8009f6e:	f040 80f3 	bne.w	800a158 <HAL_RCCEx_PeriphCLKConfig+0x51c>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8009f72:	4f7e      	ldr	r7, [pc, #504]	; (800a16c <HAL_RCCEx_PeriphCLKConfig+0x530>)
 8009f74:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8009f78:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8009f7c:	d028      	beq.n	8009fd0 <HAL_RCCEx_PeriphCLKConfig+0x394>
 8009f7e:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
 8009f82:	429a      	cmp	r2, r3
 8009f84:	d026      	beq.n	8009fd4 <HAL_RCCEx_PeriphCLKConfig+0x398>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8009f86:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_FORCE();
 8009f8a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009f8e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009f92:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009f96:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8009f9a:	f421 7040 	bic.w	r0, r1, #768	; 0x300
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009f9e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009fa2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
        RCC->BDCR = tmpregister;
 8009fa6:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8009faa:	07c8      	lsls	r0, r1, #31
 8009fac:	f140 80d6 	bpl.w	800a15c <HAL_RCCEx_PeriphCLKConfig+0x520>
        tickstart = HAL_GetTick();
 8009fb0:	f7fc f842 	bl	8006038 <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009fb4:	f241 3a88 	movw	sl, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8009fb8:	4680      	mov	r8, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009fba:	e005      	b.n	8009fc8 <HAL_RCCEx_PeriphCLKConfig+0x38c>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009fbc:	f7fc f83c 	bl	8006038 <HAL_GetTick>
 8009fc0:	eba0 0008 	sub.w	r0, r0, r8
 8009fc4:	4550      	cmp	r0, sl
 8009fc6:	d85a      	bhi.n	800a07e <HAL_RCCEx_PeriphCLKConfig+0x442>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009fc8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009fcc:	0799      	lsls	r1, r3, #30
 8009fce:	d5f5      	bpl.n	8009fbc <HAL_RCCEx_PeriphCLKConfig+0x380>
 8009fd0:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009fd4:	4965      	ldr	r1, [pc, #404]	; (800a16c <HAL_RCCEx_PeriphCLKConfig+0x530>)
 8009fd6:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8009fda:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8009fde:	4313      	orrs	r3, r2
 8009fe0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
    if(pwrclkchanged == SET)
 8009fe4:	f1b9 0f00 	cmp.w	r9, #0
 8009fe8:	d004      	beq.n	8009ff4 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      __HAL_RCC_PWR_CLK_DISABLE();
 8009fea:	4a60      	ldr	r2, [pc, #384]	; (800a16c <HAL_RCCEx_PeriphCLKConfig+0x530>)
 8009fec:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8009fee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009ff2:	6593      	str	r3, [r2, #88]	; 0x58
 8009ff4:	6823      	ldr	r3, [r4, #0]
 8009ff6:	e674      	b.n	8009ce2 <HAL_RCCEx_PeriphCLKConfig+0xa6>
      __HAL_RCC_PWR_CLK_ENABLE();
 8009ff8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8009ffa:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8009ffe:	659a      	str	r2, [r3, #88]	; 0x58
 800a000:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a002:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a006:	9301      	str	r3, [sp, #4]
 800a008:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800a00a:	f04f 0901 	mov.w	r9, #1
 800a00e:	e795      	b.n	8009f3c <HAL_RCCEx_PeriphCLKConfig+0x300>
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800a010:	f1b0 6f80 	cmp.w	r0, #67108864	; 0x4000000
 800a014:	f47f af19 	bne.w	8009e4a <HAL_RCCEx_PeriphCLKConfig+0x20e>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800a018:	2101      	movs	r1, #1
 800a01a:	1d20      	adds	r0, r4, #4
 800a01c:	f7ff fcea 	bl	80099f4 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 800a020:	6823      	ldr	r3, [r4, #0]
 800a022:	4606      	mov	r6, r0
 800a024:	2800      	cmp	r0, #0
 800a026:	f43f af10 	beq.w	8009e4a <HAL_RCCEx_PeriphCLKConfig+0x20e>
 800a02a:	4605      	mov	r5, r0
 800a02c:	e70d      	b.n	8009e4a <HAL_RCCEx_PeriphCLKConfig+0x20e>
    __HAL_RCC_PLLSAI2_DISABLE();
 800a02e:	4f4f      	ldr	r7, [pc, #316]	; (800a16c <HAL_RCCEx_PeriphCLKConfig+0x530>)
 800a030:	683b      	ldr	r3, [r7, #0]
 800a032:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a036:	603b      	str	r3, [r7, #0]
    tickstart = HAL_GetTick();
 800a038:	f7fb fffe 	bl	8006038 <HAL_GetTick>
 800a03c:	4680      	mov	r8, r0
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800a03e:	e005      	b.n	800a04c <HAL_RCCEx_PeriphCLKConfig+0x410>
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800a040:	f7fb fffa 	bl	8006038 <HAL_GetTick>
 800a044:	eba0 0308 	sub.w	r3, r0, r8
 800a048:	2b02      	cmp	r3, #2
 800a04a:	d87d      	bhi.n	800a148 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800a04c:	683b      	ldr	r3, [r7, #0]
 800a04e:	0099      	lsls	r1, r3, #2
 800a050:	d4f6      	bmi.n	800a040 <HAL_RCCEx_PeriphCLKConfig+0x404>
    if(ret == HAL_OK)
 800a052:	2e00      	cmp	r6, #0
 800a054:	d17b      	bne.n	800a14e <HAL_RCCEx_PeriphCLKConfig+0x512>
      __HAL_RCC_LTDC_CONFIG(PeriphClkInit->LtdcClockSelection);
 800a056:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a05a:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 800a05e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800a062:	4313      	orrs	r3, r2
 800a064:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800a068:	2102      	movs	r1, #2
 800a06a:	f104 0020 	add.w	r0, r4, #32
 800a06e:	f7ff fd53 	bl	8009b18 <RCCEx_PLLSAI2_Config>
    if(ret != HAL_OK)
 800a072:	6823      	ldr	r3, [r4, #0]
 800a074:	2800      	cmp	r0, #0
 800a076:	f43f af26 	beq.w	8009ec6 <HAL_RCCEx_PeriphCLKConfig+0x28a>
 800a07a:	4605      	mov	r5, r0
 800a07c:	e723      	b.n	8009ec6 <HAL_RCCEx_PeriphCLKConfig+0x28a>
        ret = HAL_TIMEOUT;
 800a07e:	2503      	movs	r5, #3
 800a080:	462e      	mov	r6, r5
 800a082:	e7af      	b.n	8009fe4 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800a084:	3004      	adds	r0, #4
 800a086:	f7ff fcb5 	bl	80099f4 <RCCEx_PLLSAI1_Config>
 800a08a:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800a08c:	2d00      	cmp	r5, #0
 800a08e:	f43f adf0 	beq.w	8009c72 <HAL_RCCEx_PeriphCLKConfig+0x36>
 800a092:	e03b      	b.n	800a10c <HAL_RCCEx_PeriphCLKConfig+0x4d0>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800a094:	1d20      	adds	r0, r4, #4
 800a096:	f7ff fcad 	bl	80099f4 <RCCEx_PLLSAI1_Config>
 800a09a:	6823      	ldr	r3, [r4, #0]
 800a09c:	4606      	mov	r6, r0
      break;
 800a09e:	e611      	b.n	8009cc4 <HAL_RCCEx_PeriphCLKConfig+0x88>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a0a0:	68ca      	ldr	r2, [r1, #12]
 800a0a2:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800a0a6:	60ca      	str	r2, [r1, #12]
 800a0a8:	e6b2      	b.n	8009e10 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800a0aa:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 800a0ae:	f8c2 109c 	str.w	r1, [r2, #156]	; 0x9c
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800a0b2:	68d1      	ldr	r1, [r2, #12]
 800a0b4:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 800a0b8:	60d1      	str	r1, [r2, #12]
 800a0ba:	e6c6      	b.n	8009e4a <HAL_RCCEx_PeriphCLKConfig+0x20e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a0bc:	68ca      	ldr	r2, [r1, #12]
 800a0be:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800a0c2:	60ca      	str	r2, [r1, #12]
 800a0c4:	e6d4      	b.n	8009e70 <HAL_RCCEx_PeriphCLKConfig+0x234>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a0c6:	68d3      	ldr	r3, [r2, #12]
}
 800a0c8:	4628      	mov	r0, r5
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a0ca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a0ce:	60d3      	str	r3, [r2, #12]
}
 800a0d0:	b002      	add	sp, #8
 800a0d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800a0d6:	2102      	movs	r1, #2
 800a0d8:	1d20      	adds	r0, r4, #4
 800a0da:	f7ff fc8b 	bl	80099f4 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 800a0de:	6823      	ldr	r3, [r4, #0]
 800a0e0:	4606      	mov	r6, r0
 800a0e2:	2800      	cmp	r0, #0
 800a0e4:	f43f aed4 	beq.w	8009e90 <HAL_RCCEx_PeriphCLKConfig+0x254>
 800a0e8:	4605      	mov	r5, r0
 800a0ea:	e6d1      	b.n	8009e90 <HAL_RCCEx_PeriphCLKConfig+0x254>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_Q_UPDATE);
 800a0ec:	2101      	movs	r1, #1
 800a0ee:	f104 0020 	add.w	r0, r4, #32
 800a0f2:	f7ff fd11 	bl	8009b18 <RCCEx_PLLSAI2_Config>
      if(ret != HAL_OK)
 800a0f6:	b368      	cbz	r0, 800a154 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800a0f8:	6823      	ldr	r3, [r4, #0]
 800a0fa:	4605      	mov	r5, r0
 800a0fc:	e6f3      	b.n	8009ee6 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800a0fe:	491b      	ldr	r1, [pc, #108]	; (800a16c <HAL_RCCEx_PeriphCLKConfig+0x530>)
 800a100:	68ca      	ldr	r2, [r1, #12]
 800a102:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800a106:	60ca      	str	r2, [r1, #12]
      break;
 800a108:	462e      	mov	r6, r5
 800a10a:	e5db      	b.n	8009cc4 <HAL_RCCEx_PeriphCLKConfig+0x88>
 800a10c:	6823      	ldr	r3, [r4, #0]
 800a10e:	e5c1      	b.n	8009c94 <HAL_RCCEx_PeriphCLKConfig+0x58>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800a110:	4816      	ldr	r0, [pc, #88]	; (800a16c <HAL_RCCEx_PeriphCLKConfig+0x530>)
 800a112:	68c2      	ldr	r2, [r0, #12]
 800a114:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800a118:	60c2      	str	r2, [r0, #12]
    if(ret == HAL_OK)
 800a11a:	e5b2      	b.n	8009c82 <HAL_RCCEx_PeriphCLKConfig+0x46>
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800a11c:	2101      	movs	r1, #1
 800a11e:	1d20      	adds	r0, r4, #4
 800a120:	f7ff fc68 	bl	80099f4 <RCCEx_PLLSAI1_Config>
        if(ret != HAL_OK)
 800a124:	6823      	ldr	r3, [r4, #0]
 800a126:	4606      	mov	r6, r0
 800a128:	2800      	cmp	r0, #0
 800a12a:	f43f ae71 	beq.w	8009e10 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 800a12e:	4605      	mov	r5, r0
 800a130:	e66e      	b.n	8009e10 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800a132:	2101      	movs	r1, #1
 800a134:	1d20      	adds	r0, r4, #4
 800a136:	f7ff fc5d 	bl	80099f4 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 800a13a:	6823      	ldr	r3, [r4, #0]
 800a13c:	4606      	mov	r6, r0
 800a13e:	2800      	cmp	r0, #0
 800a140:	f43f ae96 	beq.w	8009e70 <HAL_RCCEx_PeriphCLKConfig+0x234>
 800a144:	4605      	mov	r5, r0
 800a146:	e693      	b.n	8009e70 <HAL_RCCEx_PeriphCLKConfig+0x234>
 800a148:	6823      	ldr	r3, [r4, #0]
        ret = HAL_TIMEOUT;
 800a14a:	2503      	movs	r5, #3
 800a14c:	e6bb      	b.n	8009ec6 <HAL_RCCEx_PeriphCLKConfig+0x28a>
 800a14e:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 800a150:	4635      	mov	r5, r6
 800a152:	e6b8      	b.n	8009ec6 <HAL_RCCEx_PeriphCLKConfig+0x28a>
 800a154:	6823      	ldr	r3, [r4, #0]
 800a156:	e6c6      	b.n	8009ee6 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 800a158:	4635      	mov	r5, r6
 800a15a:	e743      	b.n	8009fe4 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
 800a15c:	4613      	mov	r3, r2
 800a15e:	e739      	b.n	8009fd4 <HAL_RCCEx_PeriphCLKConfig+0x398>
    switch(PeriphClkInit->Sai2ClockSelection)
 800a160:	2501      	movs	r5, #1
 800a162:	462e      	mov	r6, r5
 800a164:	e6e1      	b.n	8009f2a <HAL_RCCEx_PeriphCLKConfig+0x2ee>
    switch(PeriphClkInit->Sai1ClockSelection)
 800a166:	2501      	movs	r5, #1
 800a168:	e594      	b.n	8009c94 <HAL_RCCEx_PeriphCLKConfig+0x58>
 800a16a:	bf00      	nop
 800a16c:	40021000 	.word	0x40021000

0800a170 <SD_FindSCR>:
  * @param  hsd Pointer to SD handle
  * @param  pSCR pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800a170:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a174:	b086      	sub	sp, #24
 800a176:	4605      	mov	r5, r0
 800a178:	460f      	mov	r7, r1
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800a17a:	f7fb ff5d 	bl	8006038 <HAL_GetTick>
  uint32_t index = 0U;
  uint32_t tempscr[2U] = {0U, 0U};
  uint32_t *scr = pSCR;

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800a17e:	2108      	movs	r1, #8
  uint32_t tickstart = HAL_GetTick();
 800a180:	4606      	mov	r6, r0
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800a182:	6828      	ldr	r0, [r5, #0]
 800a184:	f001 fd94 	bl	800bcb0 <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 800a188:	4604      	mov	r4, r0
 800a18a:	b118      	cbz	r0, 800a194 <SD_FindSCR+0x24>
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));

  }

  return HAL_SD_ERROR_NONE;
}
 800a18c:	4620      	mov	r0, r4
 800a18e:	b006      	add	sp, #24
 800a190:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800a194:	6ca9      	ldr	r1, [r5, #72]	; 0x48
 800a196:	6828      	ldr	r0, [r5, #0]
 800a198:	0409      	lsls	r1, r1, #16
 800a19a:	f002 fa9b 	bl	800c6d4 <SDMMC_CmdAppCommand>
  if(errorstate != HAL_SD_ERROR_NONE)
 800a19e:	4604      	mov	r4, r0
 800a1a0:	2800      	cmp	r0, #0
 800a1a2:	d1f3      	bne.n	800a18c <SD_FindSCR+0x1c>
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800a1a4:	f04f 32ff 	mov.w	r2, #4294967295
 800a1a8:	2308      	movs	r3, #8
 800a1aa:	e9cd 2300 	strd	r2, r3, [sp]
 800a1ae:	2230      	movs	r2, #48	; 0x30
 800a1b0:	2302      	movs	r3, #2
 800a1b2:	e9cd 2302 	strd	r2, r3, [sp, #8]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800a1b6:	4669      	mov	r1, sp
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800a1b8:	2200      	movs	r2, #0
 800a1ba:	2301      	movs	r3, #1
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800a1bc:	6828      	ldr	r0, [r5, #0]
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800a1be:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800a1c2:	f001 fd61 	bl	800bc88 <SDMMC_ConfigData>
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800a1c6:	6828      	ldr	r0, [r5, #0]
 800a1c8:	f002 fc0e 	bl	800c9e8 <SDMMC_CmdSendSCR>
  if(errorstate != HAL_SD_ERROR_NONE)
 800a1cc:	4604      	mov	r4, r0
 800a1ce:	2800      	cmp	r0, #0
 800a1d0:	d1dc      	bne.n	800a18c <SD_FindSCR+0x1c>
  uint32_t tempscr[2U] = {0U, 0U};
 800a1d2:	4682      	mov	sl, r0
 800a1d4:	4681      	mov	r9, r0
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
 800a1d6:	f240 582a 	movw	r8, #1322	; 0x52a
 800a1da:	e004      	b.n	800a1e6 <SD_FindSCR+0x76>
    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800a1dc:	f7fb ff2c 	bl	8006038 <HAL_GetTick>
 800a1e0:	1b83      	subs	r3, r0, r6
 800a1e2:	3301      	adds	r3, #1
 800a1e4:	d024      	beq.n	800a230 <SD_FindSCR+0xc0>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
 800a1e6:	6828      	ldr	r0, [r5, #0]
 800a1e8:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800a1ea:	ea13 0f08 	tst.w	r3, r8
    if((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800a1ee:	6b43      	ldr	r3, [r0, #52]	; 0x34
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
 800a1f0:	d10c      	bne.n	800a20c <SD_FindSCR+0x9c>
    if((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800a1f2:	0319      	lsls	r1, r3, #12
 800a1f4:	d4f2      	bmi.n	800a1dc <SD_FindSCR+0x6c>
 800a1f6:	2c00      	cmp	r4, #0
 800a1f8:	d1f0      	bne.n	800a1dc <SD_FindSCR+0x6c>
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800a1fa:	f001 fd27 	bl	800bc4c <SDMMC_ReadFIFO>
 800a1fe:	4681      	mov	r9, r0
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800a200:	6828      	ldr	r0, [r5, #0]
 800a202:	f001 fd23 	bl	800bc4c <SDMMC_ReadFIFO>
      index++;
 800a206:	2401      	movs	r4, #1
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800a208:	4682      	mov	sl, r0
      index++;
 800a20a:	e7e7      	b.n	800a1dc <SD_FindSCR+0x6c>
  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800a20c:	071a      	lsls	r2, r3, #28
 800a20e:	d415      	bmi.n	800a23c <SD_FindSCR+0xcc>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800a210:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800a212:	079b      	lsls	r3, r3, #30
 800a214:	d40f      	bmi.n	800a236 <SD_FindSCR+0xc6>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800a216:	6b44      	ldr	r4, [r0, #52]	; 0x34
 800a218:	f014 0420 	ands.w	r4, r4, #32
 800a21c:	d111      	bne.n	800a242 <SD_FindSCR+0xd2>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800a21e:	490a      	ldr	r1, [pc, #40]	; (800a248 <SD_FindSCR+0xd8>)
 800a220:	6381      	str	r1, [r0, #56]	; 0x38
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800a222:	fa9a f28a 	rev.w	r2, sl
 800a226:	fa99 f389 	rev.w	r3, r9
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800a22a:	e9c7 2300 	strd	r2, r3, [r7]
  return HAL_SD_ERROR_NONE;
 800a22e:	e7ad      	b.n	800a18c <SD_FindSCR+0x1c>
      return HAL_SD_ERROR_TIMEOUT;
 800a230:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800a234:	e7aa      	b.n	800a18c <SD_FindSCR+0x1c>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800a236:	2402      	movs	r4, #2
 800a238:	6384      	str	r4, [r0, #56]	; 0x38
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800a23a:	e7a7      	b.n	800a18c <SD_FindSCR+0x1c>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800a23c:	2408      	movs	r4, #8
 800a23e:	6384      	str	r4, [r0, #56]	; 0x38
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800a240:	e7a4      	b.n	800a18c <SD_FindSCR+0x1c>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800a242:	2420      	movs	r4, #32
 800a244:	6384      	str	r4, [r0, #56]	; 0x38
    return HAL_SD_ERROR_RX_OVERRUN;
 800a246:	e7a1      	b.n	800a18c <SD_FindSCR+0x1c>
 800a248:	18000f3a 	.word	0x18000f3a

0800a24c <HAL_SD_MspInit>:
}
 800a24c:	4770      	bx	lr
 800a24e:	bf00      	nop

0800a250 <HAL_SD_ReadBlocks_DMA>:
{
 800a250:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a254:	4604      	mov	r4, r0
 800a256:	b088      	sub	sp, #32
  if(NULL == pData)
 800a258:	2900      	cmp	r1, #0
 800a25a:	d061      	beq.n	800a320 <HAL_SD_ReadBlocks_DMA+0xd0>
 800a25c:	460d      	mov	r5, r1
  if(hsd->State == HAL_SD_STATE_READY)
 800a25e:	f890 1034 	ldrb.w	r1, [r0, #52]	; 0x34
 800a262:	2901      	cmp	r1, #1
 800a264:	fa5f f881 	uxtb.w	r8, r1
 800a268:	d142      	bne.n	800a2f0 <HAL_SD_ReadBlocks_DMA+0xa0>
 800a26a:	4616      	mov	r6, r2
 800a26c:	461f      	mov	r7, r3
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800a26e:	6d43      	ldr	r3, [r0, #84]	; 0x54
 800a270:	19f1      	adds	r1, r6, r7
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800a272:	2200      	movs	r2, #0
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800a274:	4299      	cmp	r1, r3
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800a276:	6382      	str	r2, [r0, #56]	; 0x38
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800a278:	d840      	bhi.n	800a2fc <HAL_SD_ReadBlocks_DMA+0xac>
    hsd->Instance->DCTRL = 0U;
 800a27a:	6800      	ldr	r0, [r0, #0]
      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800a27c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
    hsd->State = HAL_SD_STATE_BUSY;
 800a27e:	2303      	movs	r3, #3
 800a280:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 800a284:	027b      	lsls	r3, r7, #9
    hsd->Instance->DCTRL = 0U;
 800a286:	62c2      	str	r2, [r0, #44]	; 0x2c
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800a288:	9303      	str	r3, [sp, #12]
      hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 800a28a:	e9c4 530a 	strd	r5, r3, [r4, #40]	; 0x28
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800a28e:	f04f 32ff 	mov.w	r2, #4294967295
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800a292:	2390      	movs	r3, #144	; 0x90
      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800a294:	2901      	cmp	r1, #1
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800a296:	9202      	str	r2, [sp, #8]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800a298:	9304      	str	r3, [sp, #16]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800a29a:	f04f 0202 	mov.w	r2, #2
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800a29e:	f04f 0300 	mov.w	r3, #0
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 800a2a2:	a902      	add	r1, sp, #8
      config.DPSM          = SDMMC_DPSM_DISABLE;
 800a2a4:	e9cd 3306 	strd	r3, r3, [sp, #24]
        add *= 512U;
 800a2a8:	bf18      	it	ne
 800a2aa:	0276      	lslne	r6, r6, #9
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800a2ac:	9205      	str	r2, [sp, #20]
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 800a2ae:	f001 fceb 	bl	800bc88 <SDMMC_ConfigData>
      __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 800a2b2:	6820      	ldr	r0, [r4, #0]
 800a2b4:	68c3      	ldr	r3, [r0, #12]
      hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800a2b6:	2201      	movs	r2, #1
      __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 800a2b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
      if(NumberOfBlocks > 1U)
 800a2bc:	4297      	cmp	r7, r2
      __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 800a2be:	60c3      	str	r3, [r0, #12]
      hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800a2c0:	6585      	str	r5, [r0, #88]	; 0x58
      hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800a2c2:	6502      	str	r2, [r0, #80]	; 0x50
      if(NumberOfBlocks > 1U)
 800a2c4:	d936      	bls.n	800a334 <HAL_SD_ReadBlocks_DMA+0xe4>
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800a2c6:	2382      	movs	r3, #130	; 0x82
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800a2c8:	4631      	mov	r1, r6
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800a2ca:	6323      	str	r3, [r4, #48]	; 0x30
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800a2cc:	f001 fe40 	bl	800bf50 <SDMMC_CmdReadMultiBlock>
      if(errorstate != HAL_SD_ERROR_NONE)
 800a2d0:	b1e0      	cbz	r0, 800a30c <HAL_SD_ReadBlocks_DMA+0xbc>
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a2d2:	6823      	ldr	r3, [r4, #0]
 800a2d4:	4a1c      	ldr	r2, [pc, #112]	; (800a348 <HAL_SD_ReadBlocks_DMA+0xf8>)
 800a2d6:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800a2d8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800a2da:	4318      	orrs	r0, r3
 800a2dc:	63a0      	str	r0, [r4, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800a2de:	2201      	movs	r2, #1
        hsd->Context = SD_CONTEXT_NONE;
 800a2e0:	2300      	movs	r3, #0
}
 800a2e2:	4640      	mov	r0, r8
        hsd->State = HAL_SD_STATE_READY;
 800a2e4:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800a2e8:	6323      	str	r3, [r4, #48]	; 0x30
}
 800a2ea:	b008      	add	sp, #32
 800a2ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 800a2f0:	f04f 0802 	mov.w	r8, #2
}
 800a2f4:	4640      	mov	r0, r8
 800a2f6:	b008      	add	sp, #32
 800a2f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800a2fc:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800a2fe:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800a302:	6383      	str	r3, [r0, #56]	; 0x38
}
 800a304:	4640      	mov	r0, r8
 800a306:	b008      	add	sp, #32
 800a308:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800a30c:	6822      	ldr	r2, [r4, #0]
 800a30e:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
      return HAL_OK;
 800a310:	4680      	mov	r8, r0
      __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800a312:	f443 7395 	orr.w	r3, r3, #298	; 0x12a
}
 800a316:	4640      	mov	r0, r8
      __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800a318:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 800a31a:	b008      	add	sp, #32
 800a31c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800a320:	6b83      	ldr	r3, [r0, #56]	; 0x38
    return HAL_ERROR;
 800a322:	f04f 0801 	mov.w	r8, #1
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800a326:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a32a:	6383      	str	r3, [r0, #56]	; 0x38
}
 800a32c:	4640      	mov	r0, r8
 800a32e:	b008      	add	sp, #32
 800a330:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800a334:	2381      	movs	r3, #129	; 0x81
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800a336:	4631      	mov	r1, r6
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800a338:	6323      	str	r3, [r4, #48]	; 0x30
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800a33a:	f001 fd61 	bl	800be00 <SDMMC_CmdReadSingleBlock>
 800a33e:	9001      	str	r0, [sp, #4]
      if(errorstate != HAL_SD_ERROR_NONE)
 800a340:	2800      	cmp	r0, #0
 800a342:	d0e3      	beq.n	800a30c <HAL_SD_ReadBlocks_DMA+0xbc>
 800a344:	e7c5      	b.n	800a2d2 <HAL_SD_ReadBlocks_DMA+0x82>
 800a346:	bf00      	nop
 800a348:	1fe00fff 	.word	0x1fe00fff

0800a34c <HAL_SD_WriteBlocks_DMA>:
{
 800a34c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a350:	4604      	mov	r4, r0
 800a352:	b087      	sub	sp, #28
  if(NULL == pData)
 800a354:	2900      	cmp	r1, #0
 800a356:	d060      	beq.n	800a41a <HAL_SD_WriteBlocks_DMA+0xce>
 800a358:	460d      	mov	r5, r1
  if(hsd->State == HAL_SD_STATE_READY)
 800a35a:	f890 1034 	ldrb.w	r1, [r0, #52]	; 0x34
 800a35e:	2901      	cmp	r1, #1
 800a360:	fa5f f881 	uxtb.w	r8, r1
 800a364:	d141      	bne.n	800a3ea <HAL_SD_WriteBlocks_DMA+0x9e>
 800a366:	4616      	mov	r6, r2
 800a368:	461f      	mov	r7, r3
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800a36a:	6d43      	ldr	r3, [r0, #84]	; 0x54
 800a36c:	19f1      	adds	r1, r6, r7
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800a36e:	2200      	movs	r2, #0
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800a370:	4299      	cmp	r1, r3
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800a372:	6382      	str	r2, [r0, #56]	; 0x38
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800a374:	d83f      	bhi.n	800a3f6 <HAL_SD_WriteBlocks_DMA+0xaa>
    hsd->Instance->DCTRL = 0U;
 800a376:	6800      	ldr	r0, [r0, #0]
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800a378:	6be1      	ldr	r1, [r4, #60]	; 0x3c
    hsd->State = HAL_SD_STATE_BUSY;
 800a37a:	2303      	movs	r3, #3
 800a37c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 800a380:	027b      	lsls	r3, r7, #9
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800a382:	2901      	cmp	r1, #1
    hsd->Instance->DCTRL = 0U;
 800a384:	62c2      	str	r2, [r0, #44]	; 0x2c
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800a386:	9301      	str	r3, [sp, #4]
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800a388:	f04f 32ff 	mov.w	r2, #4294967295
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 800a38c:	e9c4 5308 	strd	r5, r3, [r4, #32]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800a390:	f04f 0990 	mov.w	r9, #144	; 0x90
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800a394:	f04f 0300 	mov.w	r3, #0
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800a398:	4669      	mov	r1, sp
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800a39a:	e9cd 9302 	strd	r9, r3, [sp, #8]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800a39e:	e9cd 3304 	strd	r3, r3, [sp, #16]
      add *= 512U;
 800a3a2:	bf18      	it	ne
 800a3a4:	0276      	lslne	r6, r6, #9
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800a3a6:	9200      	str	r2, [sp, #0]
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800a3a8:	f001 fc6e 	bl	800bc88 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 800a3ac:	6820      	ldr	r0, [r4, #0]
 800a3ae:	68c3      	ldr	r3, [r0, #12]
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800a3b0:	2201      	movs	r2, #1
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 800a3b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    if(NumberOfBlocks > 1U)
 800a3b6:	4297      	cmp	r7, r2
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 800a3b8:	60c3      	str	r3, [r0, #12]
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800a3ba:	6585      	str	r5, [r0, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800a3bc:	6502      	str	r2, [r0, #80]	; 0x50
    if(NumberOfBlocks > 1U)
 800a3be:	d936      	bls.n	800a42e <HAL_SD_WriteBlocks_DMA+0xe2>
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800a3c0:	23a0      	movs	r3, #160	; 0xa0
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800a3c2:	4631      	mov	r1, r6
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800a3c4:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800a3c6:	f001 ff13 	bl	800c1f0 <SDMMC_CmdWriteMultiBlock>
    if(errorstate != HAL_SD_ERROR_NONE)
 800a3ca:	b1e0      	cbz	r0, 800a406 <HAL_SD_WriteBlocks_DMA+0xba>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a3cc:	6823      	ldr	r3, [r4, #0]
 800a3ce:	4a1c      	ldr	r2, [pc, #112]	; (800a440 <HAL_SD_WriteBlocks_DMA+0xf4>)
 800a3d0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800a3d2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800a3d4:	4318      	orrs	r0, r3
 800a3d6:	63a0      	str	r0, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a3d8:	2201      	movs	r2, #1
      hsd->Context = SD_CONTEXT_NONE;
 800a3da:	2300      	movs	r3, #0
}
 800a3dc:	4640      	mov	r0, r8
      hsd->State = HAL_SD_STATE_READY;
 800a3de:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a3e2:	6323      	str	r3, [r4, #48]	; 0x30
}
 800a3e4:	b007      	add	sp, #28
 800a3e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return HAL_BUSY;
 800a3ea:	f04f 0802 	mov.w	r8, #2
}
 800a3ee:	4640      	mov	r0, r8
 800a3f0:	b007      	add	sp, #28
 800a3f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800a3f6:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800a3f8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800a3fc:	6383      	str	r3, [r0, #56]	; 0x38
}
 800a3fe:	4640      	mov	r0, r8
 800a400:	b007      	add	sp, #28
 800a402:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 800a406:	6822      	ldr	r2, [r4, #0]
 800a408:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
      return HAL_OK;
 800a40a:	4680      	mov	r8, r0
      __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 800a40c:	f443 738d 	orr.w	r3, r3, #282	; 0x11a
}
 800a410:	4640      	mov	r0, r8
      __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 800a412:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 800a414:	b007      	add	sp, #28
 800a416:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800a41a:	6b83      	ldr	r3, [r0, #56]	; 0x38
    return HAL_ERROR;
 800a41c:	f04f 0801 	mov.w	r8, #1
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800a420:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a424:	6383      	str	r3, [r0, #56]	; 0x38
}
 800a426:	4640      	mov	r0, r8
 800a428:	b007      	add	sp, #28
 800a42a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800a42e:	f8c4 9030 	str.w	r9, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800a432:	4631      	mov	r1, r6
 800a434:	f001 fe34 	bl	800c0a0 <SDMMC_CmdWriteSingleBlock>
    if(errorstate != HAL_SD_ERROR_NONE)
 800a438:	2800      	cmp	r0, #0
 800a43a:	d0e4      	beq.n	800a406 <HAL_SD_WriteBlocks_DMA+0xba>
 800a43c:	e7c6      	b.n	800a3cc <HAL_SD_WriteBlocks_DMA+0x80>
 800a43e:	bf00      	nop
 800a440:	1fe00fff 	.word	0x1fe00fff

0800a444 <HAL_SD_ErrorCallback>:
 800a444:	4770      	bx	lr
 800a446:	bf00      	nop

0800a448 <HAL_SD_IRQHandler>:
{
 800a448:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a44c:	4604      	mov	r4, r0
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800a44e:	6800      	ldr	r0, [r0, #0]
  uint32_t context = hsd->Context;
 800a450:	6b25      	ldr	r5, [r4, #48]	; 0x30
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800a452:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800a454:	041a      	lsls	r2, r3, #16
{
 800a456:	b082      	sub	sp, #8
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800a458:	d52e      	bpl.n	800a4b8 <HAL_SD_IRQHandler+0x70>
 800a45a:	072b      	lsls	r3, r5, #28
 800a45c:	f100 80e8 	bmi.w	800a630 <HAL_SD_IRQHandler+0x1e8>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 800a460:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800a462:	05db      	lsls	r3, r3, #23
 800a464:	d57f      	bpl.n	800a566 <HAL_SD_IRQHandler+0x11e>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 800a466:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a46a:	6383      	str	r3, [r0, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT |\
 800a46c:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 800a46e:	f423 4341 	bic.w	r3, r3, #49408	; 0xc100
 800a472:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 800a476:	63c3      	str	r3, [r0, #60]	; 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800a478:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 800a47a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a47e:	63c3      	str	r3, [r0, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 800a480:	68c3      	ldr	r3, [r0, #12]
 800a482:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a486:	60c3      	str	r3, [r0, #12]
    else if((context & SD_CONTEXT_DMA) != 0U)
 800a488:	0629      	lsls	r1, r5, #24
 800a48a:	d512      	bpl.n	800a4b2 <HAL_SD_IRQHandler+0x6a>
      hsd->Instance->DLEN = 0;
 800a48c:	2300      	movs	r3, #0
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800a48e:	f015 0f22 	tst.w	r5, #34	; 0x22
      hsd->Instance->DLEN = 0;
 800a492:	6283      	str	r3, [r0, #40]	; 0x28
      hsd->Instance->DCTRL = 0;
 800a494:	62c3      	str	r3, [r0, #44]	; 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800a496:	6503      	str	r3, [r0, #80]	; 0x50
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800a498:	f040 810f 	bne.w	800a6ba <HAL_SD_IRQHandler+0x272>
      hsd->State = HAL_SD_STATE_READY;
 800a49c:	2201      	movs	r2, #1
      hsd->Context = SD_CONTEXT_NONE;
 800a49e:	2300      	movs	r3, #0
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800a4a0:	f015 0f30 	tst.w	r5, #48	; 0x30
      hsd->State = HAL_SD_STATE_READY;
 800a4a4:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a4a8:	6323      	str	r3, [r4, #48]	; 0x30
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800a4aa:	f040 8102 	bne.w	800a6b2 <HAL_SD_IRQHandler+0x26a>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800a4ae:	07aa      	lsls	r2, r5, #30
 800a4b0:	d126      	bne.n	800a500 <HAL_SD_IRQHandler+0xb8>
}
 800a4b2:	b002      	add	sp, #8
 800a4b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 800a4b8:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800a4ba:	05df      	lsls	r7, r3, #23
 800a4bc:	d526      	bpl.n	800a50c <HAL_SD_IRQHandler+0xc4>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 800a4be:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a4c2:	6383      	str	r3, [r0, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT |\
 800a4c4:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 800a4c6:	f423 4341 	bic.w	r3, r3, #49408	; 0xc100
 800a4ca:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 800a4ce:	63c3      	str	r3, [r0, #60]	; 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800a4d0:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 800a4d2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a4d6:	63c3      	str	r3, [r0, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 800a4d8:	68c3      	ldr	r3, [r0, #12]
    if((context & SD_CONTEXT_IT) != 0U)
 800a4da:	072e      	lsls	r6, r5, #28
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 800a4dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a4e0:	60c3      	str	r3, [r0, #12]
    if((context & SD_CONTEXT_IT) != 0U)
 800a4e2:	d5d1      	bpl.n	800a488 <HAL_SD_IRQHandler+0x40>
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800a4e4:	f015 0f22 	tst.w	r5, #34	; 0x22
 800a4e8:	f040 80c9 	bne.w	800a67e <HAL_SD_IRQHandler+0x236>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800a4ec:	4b7c      	ldr	r3, [pc, #496]	; (800a6e0 <HAL_SD_IRQHandler+0x298>)
 800a4ee:	6383      	str	r3, [r0, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a4f0:	2201      	movs	r2, #1
      hsd->Context = SD_CONTEXT_NONE;
 800a4f2:	2300      	movs	r3, #0
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800a4f4:	07a8      	lsls	r0, r5, #30
      hsd->State = HAL_SD_STATE_READY;
 800a4f6:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a4fa:	6323      	str	r3, [r4, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800a4fc:	f000 80b9 	beq.w	800a672 <HAL_SD_IRQHandler+0x22a>
        HAL_SD_RxCpltCallback(hsd);
 800a500:	4620      	mov	r0, r4
 800a502:	f7fb fd53 	bl	8005fac <HAL_SD_RxCpltCallback>
}
 800a506:	b002      	add	sp, #8
 800a508:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800a50c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800a50e:	045b      	lsls	r3, r3, #17
 800a510:	d52a      	bpl.n	800a568 <HAL_SD_IRQHandler+0x120>
 800a512:	072f      	lsls	r7, r5, #28
 800a514:	d528      	bpl.n	800a568 <HAL_SD_IRQHandler+0x120>
{
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
  dataremaining = hsd->TxXferSize;
 800a516:	6a66      	ldr	r6, [r4, #36]	; 0x24

  if (dataremaining > 0U)
 800a518:	2e00      	cmp	r6, #0
 800a51a:	d0ca      	beq.n	800a4b2 <HAL_SD_IRQHandler+0x6a>
  tmp = hsd->pTxBuffPtr;
 800a51c:	6a27      	ldr	r7, [r4, #32]
 800a51e:	f107 0804 	add.w	r8, r7, #4
 800a522:	f107 0524 	add.w	r5, r7, #36	; 0x24
 800a526:	e000      	b.n	800a52a <HAL_SD_IRQHandler+0xe2>
 800a528:	6820      	ldr	r0, [r4, #0]
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
    {
      data = (uint32_t)(*tmp);
 800a52a:	f818 3c04 	ldrb.w	r3, [r8, #-4]
 800a52e:	9301      	str	r3, [sp, #4]
      tmp++;
      dataremaining--;
      data |= ((uint32_t)(*tmp) << 8U);
 800a530:	f818 2c03 	ldrb.w	r2, [r8, #-3]
 800a534:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800a538:	9301      	str	r3, [sp, #4]
      tmp++;
      dataremaining--;
      data |= ((uint32_t)(*tmp) << 16U);
 800a53a:	f818 2c02 	ldrb.w	r2, [r8, #-2]
 800a53e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a542:	9301      	str	r3, [sp, #4]
      tmp++;
      dataremaining--;
      data |= ((uint32_t)(*tmp) << 24U);
 800a544:	f818 2c01 	ldrb.w	r2, [r8, #-1]
      tmp++;
      dataremaining--;
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800a548:	a901      	add	r1, sp, #4
      data |= ((uint32_t)(*tmp) << 24U);
 800a54a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800a54e:	f108 0804 	add.w	r8, r8, #4
 800a552:	9301      	str	r3, [sp, #4]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800a554:	f001 fb7e 	bl	800bc54 <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800a558:	45a8      	cmp	r8, r5
 800a55a:	d1e5      	bne.n	800a528 <HAL_SD_IRQHandler+0xe0>
    }

    hsd->pTxBuffPtr = tmp;
 800a55c:	3720      	adds	r7, #32
    hsd->TxXferSize = dataremaining;
 800a55e:	3e20      	subs	r6, #32
 800a560:	e9c4 7608 	strd	r7, r6, [r4, #32]
  }
}
 800a564:	e7a5      	b.n	800a4b2 <HAL_SD_IRQHandler+0x6a>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800a566:	6b43      	ldr	r3, [r0, #52]	; 0x34
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 800a568:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800a56a:	f013 0f3a 	tst.w	r3, #58	; 0x3a
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 800a56e:	6b43      	ldr	r3, [r0, #52]	; 0x34
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 800a570:	d04f      	beq.n	800a612 <HAL_SD_IRQHandler+0x1ca>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 800a572:	079e      	lsls	r6, r3, #30
 800a574:	d503      	bpl.n	800a57e <HAL_SD_IRQHandler+0x136>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800a576:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800a578:	f043 0302 	orr.w	r3, r3, #2
 800a57c:	63a3      	str	r3, [r4, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 800a57e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800a580:	0719      	lsls	r1, r3, #28
 800a582:	d503      	bpl.n	800a58c <HAL_SD_IRQHandler+0x144>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800a584:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800a586:	f043 0308 	orr.w	r3, r3, #8
 800a58a:	63a3      	str	r3, [r4, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 800a58c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800a58e:	069a      	lsls	r2, r3, #26
 800a590:	d503      	bpl.n	800a59a <HAL_SD_IRQHandler+0x152>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800a592:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800a594:	f043 0320 	orr.w	r3, r3, #32
 800a598:	63a3      	str	r3, [r4, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 800a59a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800a59c:	06db      	lsls	r3, r3, #27
 800a59e:	d503      	bpl.n	800a5a8 <HAL_SD_IRQHandler+0x160>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800a5a0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800a5a2:	f043 0310 	orr.w	r3, r3, #16
 800a5a6:	63a3      	str	r3, [r4, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800a5a8:	4b4d      	ldr	r3, [pc, #308]	; (800a6e0 <HAL_SD_IRQHandler+0x298>)
 800a5aa:	6383      	str	r3, [r0, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800a5ac:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 800a5ae:	f423 739d 	bic.w	r3, r3, #314	; 0x13a
 800a5b2:	63c3      	str	r3, [r0, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 800a5b4:	68c3      	ldr	r3, [r0, #12]
 800a5b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a5ba:	60c3      	str	r3, [r0, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 800a5bc:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800a5be:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800a5c2:	62c3      	str	r3, [r0, #44]	; 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 800a5c4:	68c3      	ldr	r3, [r0, #12]
 800a5c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a5ca:	60c3      	str	r3, [r0, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800a5cc:	f001 feb8 	bl	800c340 <SDMMC_CmdStopTransfer>
 800a5d0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 800a5d2:	6823      	ldr	r3, [r4, #0]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800a5d4:	4310      	orrs	r0, r2
 800a5d6:	63a0      	str	r0, [r4, #56]	; 0x38
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 800a5d8:	68da      	ldr	r2, [r3, #12]
 800a5da:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a5de:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 800a5e0:	f44f 6100 	mov.w	r1, #2048	; 0x800
    if((context & SD_CONTEXT_IT) != 0U)
 800a5e4:	f015 0208 	ands.w	r2, r5, #8
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 800a5e8:	6399      	str	r1, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 800a5ea:	d14d      	bne.n	800a688 <HAL_SD_IRQHandler+0x240>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800a5ec:	062f      	lsls	r7, r5, #24
 800a5ee:	f57f af60 	bpl.w	800a4b2 <HAL_SD_IRQHandler+0x6a>
      if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800a5f2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800a5f4:	2900      	cmp	r1, #0
 800a5f6:	f43f af5c 	beq.w	800a4b2 <HAL_SD_IRQHandler+0x6a>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800a5fa:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
        hsd->State = HAL_SD_STATE_READY;
 800a5fc:	2501      	movs	r5, #1
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800a5fe:	f021 5180 	bic.w	r1, r1, #268435456	; 0x10000000
 800a602:	63d9      	str	r1, [r3, #60]	; 0x3c
        HAL_SD_ErrorCallback(hsd);
 800a604:	4620      	mov	r0, r4
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800a606:	651a      	str	r2, [r3, #80]	; 0x50
        hsd->State = HAL_SD_STATE_READY;
 800a608:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
        HAL_SD_ErrorCallback(hsd);
 800a60c:	f7ff ff1a 	bl	800a444 <HAL_SD_ErrorCallback>
 800a610:	e74f      	b.n	800a4b2 <HAL_SD_IRQHandler+0x6a>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 800a612:	00de      	lsls	r6, r3, #3
 800a614:	f57f af4d 	bpl.w	800a4b2 <HAL_SD_IRQHandler+0x6a>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 800a618:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800a61c:	6383      	str	r3, [r0, #56]	; 0x38
    if(READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 800a61e:	6d03      	ldr	r3, [r0, #80]	; 0x50
        HAL_SDEx_Write_DMADoubleBuffer1CpltCallback(hsd);
 800a620:	4620      	mov	r0, r4
    if(READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 800a622:	075c      	lsls	r4, r3, #29
 800a624:	d439      	bmi.n	800a69a <HAL_SD_IRQHandler+0x252>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800a626:	06a9      	lsls	r1, r5, #26
 800a628:	d556      	bpl.n	800a6d8 <HAL_SD_IRQHandler+0x290>
        HAL_SDEx_Write_DMADoubleBuffer1CpltCallback(hsd);
 800a62a:	f000 fc81 	bl	800af30 <HAL_SDEx_Write_DMADoubleBuffer1CpltCallback>
 800a62e:	e740      	b.n	800a4b2 <HAL_SD_IRQHandler+0x6a>
  dataremaining = hsd->RxXferSize;
 800a630:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
  if (dataremaining > 0U)
 800a632:	2e00      	cmp	r6, #0
 800a634:	f43f af3d 	beq.w	800a4b2 <HAL_SD_IRQHandler+0x6a>
  tmp = hsd->pRxBuffPtr;
 800a638:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 800a63a:	f107 0804 	add.w	r8, r7, #4
 800a63e:	f107 0524 	add.w	r5, r7, #36	; 0x24
 800a642:	e000      	b.n	800a646 <HAL_SD_IRQHandler+0x1fe>
 800a644:	6820      	ldr	r0, [r4, #0]
      data = SDMMC_ReadFIFO(hsd->Instance);
 800a646:	f001 fb01 	bl	800bc4c <SDMMC_ReadFIFO>
      *tmp = (uint8_t)(data & 0xFFU);
 800a64a:	f808 0c04 	strb.w	r0, [r8, #-4]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800a64e:	0a02      	lsrs	r2, r0, #8
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800a650:	0c03      	lsrs	r3, r0, #16
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800a652:	0e00      	lsrs	r0, r0, #24
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800a654:	f808 2c03 	strb.w	r2, [r8, #-3]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800a658:	f808 3c02 	strb.w	r3, [r8, #-2]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800a65c:	f808 0c01 	strb.w	r0, [r8, #-1]
    for(count = 0U; count < 8U; count++)
 800a660:	f108 0804 	add.w	r8, r8, #4
 800a664:	45a8      	cmp	r8, r5
 800a666:	d1ed      	bne.n	800a644 <HAL_SD_IRQHandler+0x1fc>
    hsd->pRxBuffPtr = tmp;
 800a668:	3720      	adds	r7, #32
    hsd->RxXferSize = dataremaining;
 800a66a:	3e20      	subs	r6, #32
 800a66c:	e9c4 760a 	strd	r7, r6, [r4, #40]	; 0x28
 800a670:	e71f      	b.n	800a4b2 <HAL_SD_IRQHandler+0x6a>
        HAL_SD_TxCpltCallback(hsd);
 800a672:	4620      	mov	r0, r4
 800a674:	f7fb fc96 	bl	8005fa4 <HAL_SD_TxCpltCallback>
}
 800a678:	b002      	add	sp, #8
 800a67a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800a67e:	f001 fe5f 	bl	800c340 <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 800a682:	b978      	cbnz	r0, 800a6a4 <HAL_SD_IRQHandler+0x25c>
 800a684:	6820      	ldr	r0, [r4, #0]
 800a686:	e731      	b.n	800a4ec <HAL_SD_IRQHandler+0xa4>
      hsd->State = HAL_SD_STATE_READY;
 800a688:	2201      	movs	r2, #1
      hsd->Context = SD_CONTEXT_NONE;
 800a68a:	2300      	movs	r3, #0
      hsd->State = HAL_SD_STATE_READY;
 800a68c:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
      HAL_SD_ErrorCallback(hsd);
 800a690:	4620      	mov	r0, r4
      hsd->Context = SD_CONTEXT_NONE;
 800a692:	6323      	str	r3, [r4, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 800a694:	f7ff fed6 	bl	800a444 <HAL_SD_ErrorCallback>
 800a698:	e70b      	b.n	800a4b2 <HAL_SD_IRQHandler+0x6a>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800a69a:	06aa      	lsls	r2, r5, #26
 800a69c:	d519      	bpl.n	800a6d2 <HAL_SD_IRQHandler+0x28a>
        HAL_SDEx_Write_DMADoubleBuffer0CpltCallback(hsd);
 800a69e:	f000 fc45 	bl	800af2c <HAL_SDEx_Write_DMADoubleBuffer0CpltCallback>
 800a6a2:	e706      	b.n	800a4b2 <HAL_SD_IRQHandler+0x6a>
          hsd->ErrorCode |= errorstate;
 800a6a4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800a6a6:	4318      	orrs	r0, r3
 800a6a8:	63a0      	str	r0, [r4, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800a6aa:	4620      	mov	r0, r4
 800a6ac:	f7ff feca 	bl	800a444 <HAL_SD_ErrorCallback>
 800a6b0:	e7e8      	b.n	800a684 <HAL_SD_IRQHandler+0x23c>
        HAL_SD_TxCpltCallback(hsd);
 800a6b2:	4620      	mov	r0, r4
 800a6b4:	f7fb fc76 	bl	8005fa4 <HAL_SD_TxCpltCallback>
 800a6b8:	e6f9      	b.n	800a4ae <HAL_SD_IRQHandler+0x66>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800a6ba:	f001 fe41 	bl	800c340 <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 800a6be:	2800      	cmp	r0, #0
 800a6c0:	f43f aeec 	beq.w	800a49c <HAL_SD_IRQHandler+0x54>
          hsd->ErrorCode |= errorstate;
 800a6c4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800a6c6:	4318      	orrs	r0, r3
 800a6c8:	63a0      	str	r0, [r4, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800a6ca:	4620      	mov	r0, r4
 800a6cc:	f7ff feba 	bl	800a444 <HAL_SD_ErrorCallback>
 800a6d0:	e6e4      	b.n	800a49c <HAL_SD_IRQHandler+0x54>
        HAL_SDEx_Read_DMADoubleBuffer0CpltCallback(hsd);
 800a6d2:	f000 fc27 	bl	800af24 <HAL_SDEx_Read_DMADoubleBuffer0CpltCallback>
}
 800a6d6:	e6ec      	b.n	800a4b2 <HAL_SD_IRQHandler+0x6a>
        HAL_SDEx_Read_DMADoubleBuffer1CpltCallback(hsd);
 800a6d8:	f000 fc26 	bl	800af28 <HAL_SDEx_Read_DMADoubleBuffer1CpltCallback>
 800a6dc:	e6e9      	b.n	800a4b2 <HAL_SD_IRQHandler+0x6a>
 800a6de:	bf00      	nop
 800a6e0:	18000f3a 	.word	0x18000f3a

0800a6e4 <HAL_SD_GetCardCSD>:
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800a6e4:	6e02      	ldr	r2, [r0, #96]	; 0x60
{
 800a6e6:	b4f0      	push	{r4, r5, r6, r7}
 800a6e8:	4603      	mov	r3, r0
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800a6ea:	0f94      	lsrs	r4, r2, #30
  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800a6ec:	f3c2 6083 	ubfx	r0, r2, #26, #4
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800a6f0:	700c      	strb	r4, [r1, #0]
  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800a6f2:	f3c2 6501 	ubfx	r5, r2, #24, #2
  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800a6f6:	7048      	strb	r0, [r1, #1]
  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800a6f8:	f3c2 4407 	ubfx	r4, r2, #16, #8
  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800a6fc:	f3c2 2007 	ubfx	r0, r2, #8, #8
  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800a700:	b2d2      	uxtb	r2, r2
  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800a702:	708d      	strb	r5, [r1, #2]
  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800a704:	70cc      	strb	r4, [r1, #3]
  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800a706:	7108      	strb	r0, [r1, #4]
  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800a708:	714a      	strb	r2, [r1, #5]
  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800a70a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800a70c:	0d15      	lsrs	r5, r2, #20
  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800a70e:	f3c2 4403 	ubfx	r4, r2, #16, #4
  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800a712:	80cd      	strh	r5, [r1, #6]
  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800a714:	720c      	strb	r4, [r1, #8]
  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800a716:	f3c2 35c0 	ubfx	r5, r2, #15, #1
  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800a71a:	f3c2 3480 	ubfx	r4, r2, #14, #1
  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800a71e:	724d      	strb	r5, [r1, #9]
  pCSD->Reserved2 = 0U; /*!< Reserved */
 800a720:	2000      	movs	r0, #0
  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800a722:	728c      	strb	r4, [r1, #10]
  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800a724:	f3c2 3540 	ubfx	r5, r2, #13, #1
  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800a728:	f3c2 3400 	ubfx	r4, r2, #12, #1
  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800a72c:	72cd      	strb	r5, [r1, #11]
  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800a72e:	730c      	strb	r4, [r1, #12]
  pCSD->Reserved2 = 0U; /*!< Reserved */
 800a730:	7348      	strb	r0, [r1, #13]
  if(hsd->SdCard.CardType == CARD_SDSC)
 800a732:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800a734:	2800      	cmp	r0, #0
 800a736:	d16c      	bne.n	800a812 <HAL_SD_GetCardCSD+0x12e>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800a738:	6e98      	ldr	r0, [r3, #104]	; 0x68
 800a73a:	f640 74fc 	movw	r4, #4092	; 0xffc
 800a73e:	ea04 0282 	and.w	r2, r4, r2, lsl #2
 800a742:	ea42 7290 	orr.w	r2, r2, r0, lsr #30
 800a746:	610a      	str	r2, [r1, #16]
    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800a748:	f3c0 5542 	ubfx	r5, r0, #21, #3
    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800a74c:	f3c0 4482 	ubfx	r4, r0, #18, #3
    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800a750:	f3c0 32c2 	ubfx	r2, r0, #15, #3
    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800a754:	f3c0 67c2 	ubfx	r7, r0, #27, #3
    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800a758:	f3c0 6602 	ubfx	r6, r0, #24, #3
    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800a75c:	750f      	strb	r7, [r1, #20]
    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800a75e:	754e      	strb	r6, [r1, #21]
    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800a760:	758d      	strb	r5, [r1, #22]
    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800a762:	75cc      	strb	r4, [r1, #23]
    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800a764:	760a      	strb	r2, [r1, #24]
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800a766:	690a      	ldr	r2, [r1, #16]
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800a768:	7e0c      	ldrb	r4, [r1, #24]
 800a76a:	f004 0407 	and.w	r4, r4, #7
 800a76e:	3402      	adds	r4, #2
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800a770:	3201      	adds	r2, #1
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800a772:	40a2      	lsls	r2, r4
 800a774:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800a776:	7a0d      	ldrb	r5, [r1, #8]
 800a778:	2401      	movs	r4, #1
 800a77a:	f005 050f 	and.w	r5, r5, #15
 800a77e:	40ac      	lsls	r4, r5
    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800a780:	0a65      	lsrs	r5, r4, #9
 800a782:	fb02 f205 	mul.w	r2, r2, r5
 800a786:	e9c3 4214 	strd	r4, r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = 512U;
 800a78a:	f44f 7500 	mov.w	r5, #512	; 0x200
 800a78e:	659d      	str	r5, [r3, #88]	; 0x58
  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800a790:	f3c0 3480 	ubfx	r4, r0, #14, #1
  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800a794:	f3c0 12c6 	ubfx	r2, r0, #7, #7
  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800a798:	f000 007f 	and.w	r0, r0, #127	; 0x7f
  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800a79c:	764c      	strb	r4, [r1, #25]
  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800a79e:	768a      	strb	r2, [r1, #26]
  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800a7a0:	76c8      	strb	r0, [r1, #27]
  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800a7a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a7a4:	0fda      	lsrs	r2, r3, #31
 800a7a6:	770a      	strb	r2, [r1, #28]
  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800a7a8:	f3c3 7541 	ubfx	r5, r3, #29, #2
  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800a7ac:	f3c3 6482 	ubfx	r4, r3, #26, #3
  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800a7b0:	f3c3 5283 	ubfx	r2, r3, #22, #4
  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800a7b4:	774d      	strb	r5, [r1, #29]
  pCSD->Reserved3 = 0;
 800a7b6:	2000      	movs	r0, #0
  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800a7b8:	778c      	strb	r4, [r1, #30]
  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800a7ba:	f3c3 5540 	ubfx	r5, r3, #21, #1
  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800a7be:	77ca      	strb	r2, [r1, #31]
  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800a7c0:	f3c3 4400 	ubfx	r4, r3, #16, #1
  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800a7c4:	f3c3 32c0 	ubfx	r2, r3, #15, #1
  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800a7c8:	f881 5020 	strb.w	r5, [r1, #32]
  pCSD->Reserved3 = 0;
 800a7cc:	f881 0021 	strb.w	r0, [r1, #33]	; 0x21
  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800a7d0:	f3c3 3580 	ubfx	r5, r3, #14, #1
  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800a7d4:	f881 4022 	strb.w	r4, [r1, #34]	; 0x22
  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800a7d8:	f881 2023 	strb.w	r2, [r1, #35]	; 0x23
  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800a7dc:	f3c3 3440 	ubfx	r4, r3, #13, #1
  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800a7e0:	f3c3 3200 	ubfx	r2, r3, #12, #1
  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800a7e4:	f881 5024 	strb.w	r5, [r1, #36]	; 0x24
  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800a7e8:	f881 4025 	strb.w	r4, [r1, #37]	; 0x25
  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800a7ec:	f3c3 2581 	ubfx	r5, r3, #10, #2
  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800a7f0:	f881 2026 	strb.w	r2, [r1, #38]	; 0x26
  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800a7f4:	f3c3 2401 	ubfx	r4, r3, #8, #2
  pCSD->Reserved4 = 1;
 800a7f8:	2201      	movs	r2, #1
  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800a7fa:	f3c3 0346 	ubfx	r3, r3, #1, #7
  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800a7fe:	f881 5027 	strb.w	r5, [r1, #39]	; 0x27
  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800a802:	f881 4028 	strb.w	r4, [r1, #40]	; 0x28
  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800a806:	f881 3029 	strb.w	r3, [r1, #41]	; 0x29
  pCSD->Reserved4 = 1;
 800a80a:	f881 202a 	strb.w	r2, [r1, #42]	; 0x2a
}
 800a80e:	bcf0      	pop	{r4, r5, r6, r7}
 800a810:	4770      	bx	lr
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800a812:	2801      	cmp	r0, #1
 800a814:	d110      	bne.n	800a838 <HAL_SD_GetCardCSD+0x154>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800a816:	6e98      	ldr	r0, [r3, #104]	; 0x68
 800a818:	0412      	lsls	r2, r2, #16
 800a81a:	f402 127c 	and.w	r2, r2, #4128768	; 0x3f0000
 800a81e:	ea42 4210 	orr.w	r2, r2, r0, lsr #16
 800a822:	610a      	str	r2, [r1, #16]
    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800a824:	690a      	ldr	r2, [r1, #16]
 800a826:	3201      	adds	r2, #1
 800a828:	0292      	lsls	r2, r2, #10
    hsd->SdCard.BlockSize = 512U;
 800a82a:	f44f 7400 	mov.w	r4, #512	; 0x200
 800a82e:	e9c3 4214 	strd	r4, r2, [r3, #80]	; 0x50
    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800a832:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800a834:	659c      	str	r4, [r3, #88]	; 0x58
 800a836:	e7ab      	b.n	800a790 <HAL_SD_GetCardCSD+0xac>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a838:	681a      	ldr	r2, [r3, #0]
 800a83a:	4906      	ldr	r1, [pc, #24]	; (800a854 <HAL_SD_GetCardCSD+0x170>)
 800a83c:	6391      	str	r1, [r2, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a83e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800a840:	2101      	movs	r1, #1
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a842:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800a846:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800a848:	f883 1034 	strb.w	r1, [r3, #52]	; 0x34
    return HAL_ERROR;
 800a84c:	4608      	mov	r0, r1
}
 800a84e:	bcf0      	pop	{r4, r5, r6, r7}
 800a850:	4770      	bx	lr
 800a852:	bf00      	nop
 800a854:	1fe00fff 	.word	0x1fe00fff

0800a858 <HAL_SD_InitCard>:
{
 800a858:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a85c:	4604      	mov	r4, r0
  if(hsd->Init.Transceiver == SDMMC_TRANSCEIVER_ENABLE)
 800a85e:	6981      	ldr	r1, [r0, #24]
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
 800a860:	6825      	ldr	r5, [r4, #0]
{
 800a862:	b098      	sub	sp, #96	; 0x60
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800a864:	2300      	movs	r3, #0
  if(hsd->Init.Transceiver == SDMMC_TRANSCEIVER_ENABLE)
 800a866:	2901      	cmp	r1, #1
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800a868:	f04f 0200 	mov.w	r2, #0
 800a86c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800a870:	e9cd 2308 	strd	r2, r3, [sp, #32]
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
 800a874:	bf08      	it	eq
 800a876:	682b      	ldreq	r3, [r5, #0]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 800a878:	f04f 008a 	mov.w	r0, #138	; 0x8a
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
 800a87c:	bf04      	itt	eq
 800a87e:	f043 0310 	orreq.w	r3, r3, #16
 800a882:	602b      	streq	r3, [r5, #0]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 800a884:	900a      	str	r0, [sp, #40]	; 0x28
  status = SDMMC_Init(hsd->Instance, Init);
 800a886:	ab09      	add	r3, sp, #36	; 0x24
 800a888:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a88c:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800a890:	ab06      	add	r3, sp, #24
 800a892:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a894:	4628      	mov	r0, r5
 800a896:	f001 f9bf 	bl	800bc18 <SDMMC_Init>
  if(status != HAL_OK)
 800a89a:	b120      	cbz	r0, 800a8a6 <HAL_SD_InitCard+0x4e>
    return HAL_ERROR;
 800a89c:	2601      	movs	r6, #1
}
 800a89e:	4630      	mov	r0, r6
 800a8a0:	b018      	add	sp, #96	; 0x60
 800a8a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  status = SDMMC_PowerState_ON(hsd->Instance);
 800a8a6:	6820      	ldr	r0, [r4, #0]
 800a8a8:	f001 f9da 	bl	800bc60 <SDMMC_PowerState_ON>
  if(status != HAL_OK)
 800a8ac:	2800      	cmp	r0, #0
 800a8ae:	d1f5      	bne.n	800a89c <HAL_SD_InitCard+0x44>
  __IO uint32_t count = 0U;
 800a8b0:	9005      	str	r0, [sp, #20]
  uint32_t tickstart = HAL_GetTick();
 800a8b2:	f7fb fbc1 	bl	8006038 <HAL_GetTick>
 800a8b6:	4606      	mov	r6, r0
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800a8b8:	6820      	ldr	r0, [r4, #0]
 800a8ba:	f001 fe9d 	bl	800c5f8 <SDMMC_CmdGoIdleState>
  if(errorstate != HAL_SD_ERROR_NONE)
 800a8be:	4605      	mov	r5, r0
 800a8c0:	b148      	cbz	r0, 800a8d6 <HAL_SD_InitCard+0x7e>
    hsd->State = HAL_SD_STATE_READY;
 800a8c2:	2601      	movs	r6, #1
 800a8c4:	f884 6034 	strb.w	r6, [r4, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800a8c8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
}
 800a8ca:	4630      	mov	r0, r6
    hsd->ErrorCode |= errorstate;
 800a8cc:	4315      	orrs	r5, r2
 800a8ce:	63a5      	str	r5, [r4, #56]	; 0x38
}
 800a8d0:	b018      	add	sp, #96	; 0x60
 800a8d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800a8d6:	6820      	ldr	r0, [r4, #0]
 800a8d8:	f001 feba 	bl	800c650 <SDMMC_CmdOperCond>
  if(errorstate != HAL_SD_ERROR_NONE)
 800a8dc:	2800      	cmp	r0, #0
 800a8de:	f040 80bb 	bne.w	800aa58 <HAL_SD_InitCard+0x200>
    hsd->SdCard.CardVersion = CARD_V2_X;
 800a8e2:	2301      	movs	r3, #1
 800a8e4:	6423      	str	r3, [r4, #64]	; 0x40
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800a8e6:	6820      	ldr	r0, [r4, #0]
 800a8e8:	2100      	movs	r1, #0
 800a8ea:	f001 fef3 	bl	800c6d4 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 800a8ee:	bb18      	cbnz	r0, 800a938 <HAL_SD_InitCard+0xe0>
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800a8f0:	9a05      	ldr	r2, [sp, #20]
 800a8f2:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 800a8f6:	429a      	cmp	r2, r3
 800a8f8:	f200 80bb 	bhi.w	800aa72 <HAL_SD_InitCard+0x21a>
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800a8fc:	4f86      	ldr	r7, [pc, #536]	; (800ab18 <HAL_SD_InitCard+0x2c0>)
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800a8fe:	f64f 78fe 	movw	r8, #65534	; 0xfffe
 800a902:	e010      	b.n	800a926 <HAL_SD_InitCard+0xce>
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800a904:	6820      	ldr	r0, [r4, #0]
 800a906:	f001 ff8d 	bl	800c824 <SDMMC_CmdAppOperCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 800a90a:	4601      	mov	r1, r0
 800a90c:	b9a0      	cbnz	r0, 800a938 <HAL_SD_InitCard+0xe0>
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800a90e:	6820      	ldr	r0, [r4, #0]
 800a910:	f001 f9b6 	bl	800bc80 <SDMMC_GetResponse>
    count++;
 800a914:	9b05      	ldr	r3, [sp, #20]
 800a916:	3301      	adds	r3, #1
 800a918:	9305      	str	r3, [sp, #20]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800a91a:	9b05      	ldr	r3, [sp, #20]
 800a91c:	4543      	cmp	r3, r8
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800a91e:	ea4f 72d0 	mov.w	r2, r0, lsr #31
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800a922:	d80c      	bhi.n	800a93e <HAL_SD_InitCard+0xe6>
 800a924:	b95a      	cbnz	r2, 800a93e <HAL_SD_InitCard+0xe6>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800a926:	2100      	movs	r1, #0
 800a928:	6820      	ldr	r0, [r4, #0]
 800a92a:	f001 fed3 	bl	800c6d4 <SDMMC_CmdAppCommand>
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800a92e:	4639      	mov	r1, r7
    if(errorstate != HAL_SD_ERROR_NONE)
 800a930:	4605      	mov	r5, r0
 800a932:	2800      	cmp	r0, #0
 800a934:	d0e6      	beq.n	800a904 <HAL_SD_InitCard+0xac>
 800a936:	e7c4      	b.n	800a8c2 <HAL_SD_InitCard+0x6a>
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a938:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800a93c:	e7c1      	b.n	800a8c2 <HAL_SD_InitCard+0x6a>
  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800a93e:	9a05      	ldr	r2, [sp, #20]
 800a940:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 800a944:	429a      	cmp	r2, r3
 800a946:	f200 809f 	bhi.w	800aa88 <HAL_SD_InitCard+0x230>
  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800a94a:	0045      	lsls	r5, r0, #1
 800a94c:	f140 8096 	bpl.w	800aa7c <HAL_SD_InitCard+0x224>
    if(hsd->Init.Transceiver == SDMMC_TRANSCEIVER_ENABLE)
 800a950:	69a3      	ldr	r3, [r4, #24]
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800a952:	2201      	movs	r2, #1
    if(hsd->Init.Transceiver == SDMMC_TRANSCEIVER_ENABLE)
 800a954:	4293      	cmp	r3, r2
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800a956:	63e2      	str	r2, [r4, #60]	; 0x3c
    if(hsd->Init.Transceiver == SDMMC_TRANSCEIVER_ENABLE)
 800a958:	f000 8099 	beq.w	800aa8e <HAL_SD_InitCard+0x236>
  if(errorstate != HAL_SD_ERROR_NONE)
 800a95c:	6820      	ldr	r0, [r4, #0]
  uint16_t sd_rca = 1U;
 800a95e:	2301      	movs	r3, #1
 800a960:	f8ad 3012 	strh.w	r3, [sp, #18]
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 800a964:	f001 f988 	bl	800bc78 <SDMMC_GetPowerState>
 800a968:	b348      	cbz	r0, 800a9be <HAL_SD_InitCard+0x166>
  if(hsd->SdCard.CardType != CARD_SECURED)
 800a96a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800a96c:	2b03      	cmp	r3, #3
 800a96e:	d12f      	bne.n	800a9d0 <HAL_SD_InitCard+0x178>
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800a970:	2104      	movs	r1, #4
 800a972:	6820      	ldr	r0, [r4, #0]
 800a974:	f001 f984 	bl	800bc80 <SDMMC_GetResponse>
 800a978:	0d00      	lsrs	r0, r0, #20
 800a97a:	6460      	str	r0, [r4, #68]	; 0x44
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800a97c:	a90d      	add	r1, sp, #52	; 0x34
 800a97e:	4620      	mov	r0, r4
 800a980:	f7ff feb0 	bl	800a6e4 <HAL_SD_GetCardCSD>
 800a984:	4606      	mov	r6, r0
 800a986:	2800      	cmp	r0, #0
 800a988:	d17b      	bne.n	800aa82 <HAL_SD_InitCard+0x22a>
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800a98a:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 800a98c:	6820      	ldr	r0, [r4, #0]
 800a98e:	0412      	lsls	r2, r2, #16
 800a990:	4633      	mov	r3, r6
 800a992:	f001 fd89 	bl	800c4a8 <SDMMC_CmdSelDesel>
  if(errorstate != HAL_SD_ERROR_NONE)
 800a996:	b9a0      	cbnz	r0, 800a9c2 <HAL_SD_InitCard+0x16a>
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800a998:	6820      	ldr	r0, [r4, #0]
 800a99a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a99e:	f001 f987 	bl	800bcb0 <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 800a9a2:	2800      	cmp	r0, #0
 800a9a4:	f43f af7b 	beq.w	800a89e <HAL_SD_InitCard+0x46>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a9a8:	6823      	ldr	r3, [r4, #0]
 800a9aa:	4a5c      	ldr	r2, [pc, #368]	; (800ab1c <HAL_SD_InitCard+0x2c4>)
 800a9ac:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800a9ae:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800a9b0:	2301      	movs	r3, #1
    hsd->ErrorCode |= errorstate;
 800a9b2:	4310      	orrs	r0, r2
 800a9b4:	63a0      	str	r0, [r4, #56]	; 0x38
    return HAL_ERROR;
 800a9b6:	461e      	mov	r6, r3
    hsd->State = HAL_SD_STATE_READY;
 800a9b8:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    return HAL_ERROR;
 800a9bc:	e76f      	b.n	800a89e <HAL_SD_InitCard+0x46>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800a9be:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
    hsd->State = HAL_SD_STATE_READY;
 800a9c2:	2601      	movs	r6, #1
 800a9c4:	f884 6034 	strb.w	r6, [r4, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800a9c8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800a9ca:	4302      	orrs	r2, r0
 800a9cc:	63a2      	str	r2, [r4, #56]	; 0x38
    return HAL_ERROR;
 800a9ce:	e766      	b.n	800a89e <HAL_SD_InitCard+0x46>
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800a9d0:	6820      	ldr	r0, [r4, #0]
 800a9d2:	f002 f8b1 	bl	800cb38 <SDMMC_CmdSendCID>
    if(errorstate != HAL_SD_ERROR_NONE)
 800a9d6:	2800      	cmp	r0, #0
 800a9d8:	d1f3      	bne.n	800a9c2 <HAL_SD_InitCard+0x16a>
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800a9da:	4601      	mov	r1, r0
 800a9dc:	6820      	ldr	r0, [r4, #0]
 800a9de:	f001 f94f 	bl	800bc80 <SDMMC_GetResponse>
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800a9e2:	2104      	movs	r1, #4
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800a9e4:	6720      	str	r0, [r4, #112]	; 0x70
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800a9e6:	6820      	ldr	r0, [r4, #0]
 800a9e8:	f001 f94a 	bl	800bc80 <SDMMC_GetResponse>
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800a9ec:	2108      	movs	r1, #8
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800a9ee:	6760      	str	r0, [r4, #116]	; 0x74
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800a9f0:	6820      	ldr	r0, [r4, #0]
 800a9f2:	f001 f945 	bl	800bc80 <SDMMC_GetResponse>
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800a9f6:	210c      	movs	r1, #12
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800a9f8:	67a0      	str	r0, [r4, #120]	; 0x78
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800a9fa:	6820      	ldr	r0, [r4, #0]
 800a9fc:	f001 f940 	bl	800bc80 <SDMMC_GetResponse>
  if(hsd->SdCard.CardType != CARD_SECURED)
 800aa00:	6be3      	ldr	r3, [r4, #60]	; 0x3c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800aa02:	67e0      	str	r0, [r4, #124]	; 0x7c
  if(hsd->SdCard.CardType != CARD_SECURED)
 800aa04:	2b03      	cmp	r3, #3
 800aa06:	d0b3      	beq.n	800a970 <HAL_SD_InitCard+0x118>
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800aa08:	6820      	ldr	r0, [r4, #0]
 800aa0a:	f10d 0112 	add.w	r1, sp, #18
 800aa0e:	f002 f911 	bl	800cc34 <SDMMC_CmdSetRelAdd>
    if(errorstate != HAL_SD_ERROR_NONE)
 800aa12:	2800      	cmp	r0, #0
 800aa14:	d1d5      	bne.n	800a9c2 <HAL_SD_InitCard+0x16a>
  if(hsd->SdCard.CardType != CARD_SECURED)
 800aa16:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800aa18:	2b03      	cmp	r3, #3
 800aa1a:	d0a9      	beq.n	800a970 <HAL_SD_InitCard+0x118>
    hsd->SdCard.RelCardAdd = sd_rca;
 800aa1c:	f8bd 1012 	ldrh.w	r1, [sp, #18]
 800aa20:	64a1      	str	r1, [r4, #72]	; 0x48
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800aa22:	6820      	ldr	r0, [r4, #0]
 800aa24:	0409      	lsls	r1, r1, #16
 800aa26:	f002 f8c7 	bl	800cbb8 <SDMMC_CmdSendCSD>
    if(errorstate != HAL_SD_ERROR_NONE)
 800aa2a:	2800      	cmp	r0, #0
 800aa2c:	d1c9      	bne.n	800a9c2 <HAL_SD_InitCard+0x16a>
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800aa2e:	4601      	mov	r1, r0
 800aa30:	6820      	ldr	r0, [r4, #0]
 800aa32:	f001 f925 	bl	800bc80 <SDMMC_GetResponse>
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800aa36:	2104      	movs	r1, #4
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800aa38:	6620      	str	r0, [r4, #96]	; 0x60
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800aa3a:	6820      	ldr	r0, [r4, #0]
 800aa3c:	f001 f920 	bl	800bc80 <SDMMC_GetResponse>
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800aa40:	2108      	movs	r1, #8
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800aa42:	6660      	str	r0, [r4, #100]	; 0x64
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800aa44:	6820      	ldr	r0, [r4, #0]
 800aa46:	f001 f91b 	bl	800bc80 <SDMMC_GetResponse>
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800aa4a:	210c      	movs	r1, #12
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800aa4c:	66a0      	str	r0, [r4, #104]	; 0x68
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800aa4e:	6820      	ldr	r0, [r4, #0]
 800aa50:	f001 f916 	bl	800bc80 <SDMMC_GetResponse>
 800aa54:	66e0      	str	r0, [r4, #108]	; 0x6c
 800aa56:	e78b      	b.n	800a970 <HAL_SD_InitCard+0x118>
    hsd->SdCard.CardVersion = CARD_V1_X;
 800aa58:	6425      	str	r5, [r4, #64]	; 0x40
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800aa5a:	6820      	ldr	r0, [r4, #0]
 800aa5c:	f001 fdcc 	bl	800c5f8 <SDMMC_CmdGoIdleState>
    if(errorstate != HAL_SD_ERROR_NONE)
 800aa60:	4605      	mov	r5, r0
 800aa62:	2800      	cmp	r0, #0
 800aa64:	f47f af2d 	bne.w	800a8c2 <HAL_SD_InitCard+0x6a>
  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800aa68:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800aa6a:	2b01      	cmp	r3, #1
 800aa6c:	f47f af40 	bne.w	800a8f0 <HAL_SD_InitCard+0x98>
 800aa70:	e739      	b.n	800a8e6 <HAL_SD_InitCard+0x8e>
  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800aa72:	9a05      	ldr	r2, [sp, #20]
 800aa74:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 800aa78:	429a      	cmp	r2, r3
 800aa7a:	d805      	bhi.n	800aa88 <HAL_SD_InitCard+0x230>
    hsd->SdCard.CardType = CARD_SDSC;
 800aa7c:	2300      	movs	r3, #0
 800aa7e:	63e3      	str	r3, [r4, #60]	; 0x3c
 800aa80:	e76c      	b.n	800a95c <HAL_SD_InitCard+0x104>
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800aa82:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 800aa86:	e79c      	b.n	800a9c2 <HAL_SD_InitCard+0x16a>
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800aa88:	f04f 7580 	mov.w	r5, #16777216	; 0x1000000
 800aa8c:	e719      	b.n	800a8c2 <HAL_SD_InitCard+0x6a>
      if((response & SD_SWITCH_1_8V_CAPACITY) == SD_SWITCH_1_8V_CAPACITY)
 800aa8e:	f010 7f80 	tst.w	r0, #16777216	; 0x1000000
        hsd->Instance->POWER |= SDMMC_POWER_VSWITCHEN;
 800aa92:	6820      	ldr	r0, [r4, #0]
      if((response & SD_SWITCH_1_8V_CAPACITY) == SD_SWITCH_1_8V_CAPACITY)
 800aa94:	f43f af63 	beq.w	800a95e <HAL_SD_InitCard+0x106>
        hsd->Instance->POWER |= SDMMC_POWER_VSWITCHEN;
 800aa98:	6803      	ldr	r3, [r0, #0]
        hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800aa9a:	f44f 7200 	mov.w	r2, #512	; 0x200
        hsd->Instance->POWER |= SDMMC_POWER_VSWITCHEN;
 800aa9e:	f043 0308 	orr.w	r3, r3, #8
        hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800aaa2:	65e2      	str	r2, [r4, #92]	; 0x5c
        hsd->Instance->POWER |= SDMMC_POWER_VSWITCHEN;
 800aaa4:	6003      	str	r3, [r0, #0]
        errorstate = SDMMC_CmdVoltageSwitch(hsd->Instance);
 800aaa6:	f002 fa6d 	bl	800cf84 <SDMMC_CmdVoltageSwitch>
        if(errorstate != HAL_SD_ERROR_NONE)
 800aaaa:	4605      	mov	r5, r0
 800aaac:	b128      	cbz	r0, 800aaba <HAL_SD_InitCard+0x262>
 800aaae:	e708      	b.n	800a8c2 <HAL_SD_InitCard+0x6a>
          if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800aab0:	f7fb fac2 	bl	8006038 <HAL_GetTick>
 800aab4:	1b80      	subs	r0, r0, r6
 800aab6:	3001      	adds	r0, #1
 800aab8:	d02b      	beq.n	800ab12 <HAL_SD_InitCard+0x2ba>
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
 800aaba:	6823      	ldr	r3, [r4, #0]
 800aabc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800aabe:	0150      	lsls	r0, r2, #5
 800aac0:	d5f6      	bpl.n	800aab0 <HAL_SD_InitCard+0x258>
        hsd->Instance->ICR = SDMMC_FLAG_CKSTOP;
 800aac2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800aac6:	639a      	str	r2, [r3, #56]	; 0x38
        if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) != SDMMC_FLAG_BUSYD0)
 800aac8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aaca:	02d9      	lsls	r1, r3, #11
 800aacc:	f57f af34 	bpl.w	800a938 <HAL_SD_InitCard+0xe0>
          HAL_SDEx_DriveTransceiver_1_8V_Callback(SET);
 800aad0:	2001      	movs	r0, #1
 800aad2:	f000 fa25 	bl	800af20 <HAL_SDEx_DriveTransceiver_1_8V_Callback>
          hsd->Instance->POWER |= SDMMC_POWER_VSWITCH;
 800aad6:	6820      	ldr	r0, [r4, #0]
 800aad8:	6803      	ldr	r3, [r0, #0]
 800aada:	f043 0304 	orr.w	r3, r3, #4
 800aade:	6003      	str	r3, [r0, #0]
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 800aae0:	e005      	b.n	800aaee <HAL_SD_InitCard+0x296>
            if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800aae2:	f7fb faa9 	bl	8006038 <HAL_GetTick>
 800aae6:	1b80      	subs	r0, r0, r6
 800aae8:	3001      	adds	r0, #1
 800aaea:	d012      	beq.n	800ab12 <HAL_SD_InitCard+0x2ba>
 800aaec:	6820      	ldr	r0, [r4, #0]
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 800aaee:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800aaf0:	019a      	lsls	r2, r3, #6
 800aaf2:	d5f6      	bpl.n	800aae2 <HAL_SD_InitCard+0x28a>
          hsd->Instance->ICR = SDMMC_FLAG_VSWEND;
 800aaf4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800aaf8:	6383      	str	r3, [r0, #56]	; 0x38
          if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) == SDMMC_FLAG_BUSYD0)
 800aafa:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800aafc:	02db      	lsls	r3, r3, #11
 800aafe:	d4c3      	bmi.n	800aa88 <HAL_SD_InitCard+0x230>
          hsd->Instance->POWER = 0x13U;
 800ab00:	2113      	movs	r1, #19
          hsd->Instance->ICR = 0xFFFFFFFFU;
 800ab02:	f04f 32ff 	mov.w	r2, #4294967295
        hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800ab06:	f44f 7300 	mov.w	r3, #512	; 0x200
          hsd->Instance->POWER = 0x13U;
 800ab0a:	6001      	str	r1, [r0, #0]
          hsd->Instance->ICR = 0xFFFFFFFFU;
 800ab0c:	6382      	str	r2, [r0, #56]	; 0x38
        hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800ab0e:	65e3      	str	r3, [r4, #92]	; 0x5c
  if(errorstate != HAL_SD_ERROR_NONE)
 800ab10:	e725      	b.n	800a95e <HAL_SD_InitCard+0x106>
            return HAL_SD_ERROR_TIMEOUT;
 800ab12:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
 800ab16:	e6d4      	b.n	800a8c2 <HAL_SD_InitCard+0x6a>
 800ab18:	c1100000 	.word	0xc1100000
 800ab1c:	1fe00fff 	.word	0x1fe00fff

0800ab20 <HAL_SD_GetCardStatus>:
{
 800ab20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab24:	b096      	sub	sp, #88	; 0x58
 800ab26:	4604      	mov	r4, r0
 800ab28:	460d      	mov	r5, r1
  uint32_t tickstart = HAL_GetTick();
 800ab2a:	f7fb fa85 	bl	8006038 <HAL_GetTick>
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800ab2e:	2100      	movs	r1, #0
  uint32_t tickstart = HAL_GetTick();
 800ab30:	4606      	mov	r6, r0
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800ab32:	6820      	ldr	r0, [r4, #0]
 800ab34:	f001 f8a4 	bl	800bc80 <SDMMC_GetResponse>
 800ab38:	0182      	lsls	r2, r0, #6
 800ab3a:	d45b      	bmi.n	800abf4 <HAL_SD_GetCardStatus+0xd4>
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800ab3c:	6820      	ldr	r0, [r4, #0]
 800ab3e:	2140      	movs	r1, #64	; 0x40
 800ab40:	f001 f8b6 	bl	800bcb0 <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 800ab44:	4603      	mov	r3, r0
 800ab46:	b1e0      	cbz	r0, 800ab82 <HAL_SD_GetCardStatus+0x62>
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800ab48:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800ab4a:	63a2      	str	r2, [r4, #56]	; 0x38
  if(errorstate != HAL_SD_ERROR_NONE)
 800ab4c:	6820      	ldr	r0, [r4, #0]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ab4e:	4a59      	ldr	r2, [pc, #356]	; (800acb4 <HAL_SD_GetCardStatus+0x194>)
 800ab50:	6382      	str	r2, [r0, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800ab52:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800ab54:	2101      	movs	r1, #1
    hsd->ErrorCode |= errorstate;
 800ab56:	4313      	orrs	r3, r2
 800ab58:	63a3      	str	r3, [r4, #56]	; 0x38
    status = HAL_ERROR;
 800ab5a:	460e      	mov	r6, r1
    hsd->State = HAL_SD_STATE_READY;
 800ab5c:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800ab60:	f44f 7100 	mov.w	r1, #512	; 0x200
 800ab64:	f001 f8a4 	bl	800bcb0 <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 800ab68:	b138      	cbz	r0, 800ab7a <HAL_SD_GetCardStatus+0x5a>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ab6a:	6823      	ldr	r3, [r4, #0]
 800ab6c:	4a51      	ldr	r2, [pc, #324]	; (800acb4 <HAL_SD_GetCardStatus+0x194>)
 800ab6e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800ab70:	2301      	movs	r3, #1
    hsd->ErrorCode = errorstate;
 800ab72:	63a0      	str	r0, [r4, #56]	; 0x38
    status = HAL_ERROR;
 800ab74:	461e      	mov	r6, r3
    hsd->State = HAL_SD_STATE_READY;
 800ab76:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 800ab7a:	4630      	mov	r0, r6
 800ab7c:	b016      	add	sp, #88	; 0x58
 800ab7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800ab82:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800ab84:	6820      	ldr	r0, [r4, #0]
 800ab86:	0409      	lsls	r1, r1, #16
 800ab88:	f001 fda4 	bl	800c6d4 <SDMMC_CmdAppCommand>
  if(errorstate != HAL_SD_ERROR_NONE)
 800ab8c:	4603      	mov	r3, r0
 800ab8e:	2800      	cmp	r0, #0
 800ab90:	d1da      	bne.n	800ab48 <HAL_SD_GetCardStatus+0x28>
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800ab92:	f04f 32ff 	mov.w	r2, #4294967295
 800ab96:	2340      	movs	r3, #64	; 0x40
 800ab98:	e9cd 2300 	strd	r2, r3, [sp]
 800ab9c:	2260      	movs	r2, #96	; 0x60
 800ab9e:	2302      	movs	r3, #2
 800aba0:	e9cd 2302 	strd	r2, r3, [sp, #8]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800aba4:	4669      	mov	r1, sp
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800aba6:	2301      	movs	r3, #1
 800aba8:	2200      	movs	r2, #0
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800abaa:	6820      	ldr	r0, [r4, #0]
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800abac:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800abb0:	f001 f86a 	bl	800bc88 <SDMMC_ConfigData>
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 800abb4:	6820      	ldr	r0, [r4, #0]
 800abb6:	f002 f93d 	bl	800ce34 <SDMMC_CmdStatusRegister>
  if(errorstate != HAL_SD_ERROR_NONE)
 800abba:	4603      	mov	r3, r0
 800abbc:	2800      	cmp	r0, #0
 800abbe:	d1c3      	bne.n	800ab48 <HAL_SD_GetCardStatus+0x28>
  uint32_t *pData = pSDstatus;
 800abc0:	af06      	add	r7, sp, #24
 800abc2:	e004      	b.n	800abce <HAL_SD_GetCardStatus+0xae>
    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800abc4:	f7fb fa38 	bl	8006038 <HAL_GetTick>
 800abc8:	1b80      	subs	r0, r0, r6
 800abca:	3001      	adds	r0, #1
 800abcc:	d016      	beq.n	800abfc <HAL_SD_GetCardStatus+0xdc>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800abce:	6820      	ldr	r0, [r4, #0]
 800abd0:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800abd2:	f413 7f95 	tst.w	r3, #298	; 0x12a
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800abd6:	6b43      	ldr	r3, [r0, #52]	; 0x34
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800abd8:	d113      	bne.n	800ac02 <HAL_SD_GetCardStatus+0xe2>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800abda:	041b      	lsls	r3, r3, #16
 800abdc:	d5f2      	bpl.n	800abc4 <HAL_SD_GetCardStatus+0xa4>
 800abde:	f107 0820 	add.w	r8, r7, #32
 800abe2:	e000      	b.n	800abe6 <HAL_SD_GetCardStatus+0xc6>
 800abe4:	6820      	ldr	r0, [r4, #0]
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 800abe6:	f001 f831 	bl	800bc4c <SDMMC_ReadFIFO>
 800abea:	f847 0b04 	str.w	r0, [r7], #4
      for(count = 0U; count < 8U; count++)
 800abee:	4547      	cmp	r7, r8
 800abf0:	d1f8      	bne.n	800abe4 <HAL_SD_GetCardStatus+0xc4>
 800abf2:	e7e7      	b.n	800abc4 <HAL_SD_GetCardStatus+0xa4>
  if(errorstate != HAL_SD_ERROR_NONE)
 800abf4:	6820      	ldr	r0, [r4, #0]
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800abf6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800abfa:	e7a8      	b.n	800ab4e <HAL_SD_GetCardStatus+0x2e>
      return HAL_SD_ERROR_TIMEOUT;
 800abfc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ac00:	e7a4      	b.n	800ab4c <HAL_SD_GetCardStatus+0x2c>
  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800ac02:	0719      	lsls	r1, r3, #28
 800ac04:	d450      	bmi.n	800aca8 <HAL_SD_GetCardStatus+0x188>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800ac06:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800ac08:	079a      	lsls	r2, r3, #30
 800ac0a:	d44f      	bmi.n	800acac <HAL_SD_GetCardStatus+0x18c>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800ac0c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800ac0e:	069b      	lsls	r3, r3, #26
 800ac10:	d50a      	bpl.n	800ac28 <HAL_SD_GetCardStatus+0x108>
 800ac12:	e04d      	b.n	800acb0 <HAL_SD_GetCardStatus+0x190>
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 800ac14:	f001 f81a 	bl	800bc4c <SDMMC_ReadFIFO>
 800ac18:	f847 0b04 	str.w	r0, [r7], #4
    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800ac1c:	f7fb fa0c 	bl	8006038 <HAL_GetTick>
 800ac20:	1b80      	subs	r0, r0, r6
 800ac22:	3001      	adds	r0, #1
 800ac24:	d0ea      	beq.n	800abfc <HAL_SD_GetCardStatus+0xdc>
 800ac26:	6820      	ldr	r0, [r4, #0]
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 800ac28:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800ac2a:	f413 5c80 	ands.w	ip, r3, #4096	; 0x1000
 800ac2e:	d1f1      	bne.n	800ac14 <HAL_SD_GetCardStatus+0xf4>
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800ac30:	9906      	ldr	r1, [sp, #24]
    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800ac32:	f8dd e020 	ldr.w	lr, [sp, #32]
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800ac36:	4b20      	ldr	r3, [pc, #128]	; (800acb8 <HAL_SD_GetCardStatus+0x198>)
 800ac38:	6383      	str	r3, [r0, #56]	; 0x38
    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800ac3a:	0a0a      	lsrs	r2, r1, #8
    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800ac3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ac3e:	9f07      	ldr	r7, [sp, #28]
    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800ac40:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800ac44:	ea42 6211 	orr.w	r2, r2, r1, lsr #24
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800ac48:	f3c1 1881 	ubfx	r8, r1, #6, #2
  HAL_StatusTypeDef status = HAL_OK;
 800ac4c:	4666      	mov	r6, ip
    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 800ac4e:	f3c1 1140 	ubfx	r1, r1, #5, #1
    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800ac52:	ea4f 4c1e 	mov.w	ip, lr, lsr #16
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800ac56:	f885 8000 	strb.w	r8, [r5]
    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800ac5a:	b292      	uxth	r2, r2
    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 800ac5c:	7069      	strb	r1, [r5, #1]
    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800ac5e:	ba3f      	rev	r7, r7
    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800ac60:	f02c 0cff 	bic.w	ip, ip, #255	; 0xff
 800ac64:	b2d9      	uxtb	r1, r3
    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800ac66:	806a      	strh	r2, [r5, #2]
    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800ac68:	ea4c 0101 	orr.w	r1, ip, r1
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800ac6c:	606f      	str	r7, [r5, #4]
    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800ac6e:	fa5f fc8e 	uxtb.w	ip, lr
    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 800ac72:	f3ce 2707 	ubfx	r7, lr, #8, #8
    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800ac76:	f3ce 5203 	ubfx	r2, lr, #20, #4
    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800ac7a:	f885 c008 	strb.w	ip, [r5, #8]
    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800ac7e:	f3c3 2e85 	ubfx	lr, r3, #10, #6
    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 800ac82:	726f      	strb	r7, [r5, #9]
    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800ac84:	f3c3 2c01 	ubfx	ip, r3, #8, #2
    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800ac88:	72aa      	strb	r2, [r5, #10]
    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800ac8a:	f3c3 1703 	ubfx	r7, r3, #4, #4
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800ac8e:	f89d 202b 	ldrb.w	r2, [sp, #43]	; 0x2b
    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800ac92:	81a9      	strh	r1, [r5, #12]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800ac94:	f003 030f 	and.w	r3, r3, #15
    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800ac98:	f885 e00e 	strb.w	lr, [r5, #14]
    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800ac9c:	f885 c00f 	strb.w	ip, [r5, #15]
    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800aca0:	742f      	strb	r7, [r5, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800aca2:	746b      	strb	r3, [r5, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800aca4:	74aa      	strb	r2, [r5, #18]
 800aca6:	e75b      	b.n	800ab60 <HAL_SD_GetCardStatus+0x40>
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800aca8:	2308      	movs	r3, #8
 800acaa:	e750      	b.n	800ab4e <HAL_SD_GetCardStatus+0x2e>
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800acac:	2302      	movs	r3, #2
 800acae:	e74e      	b.n	800ab4e <HAL_SD_GetCardStatus+0x2e>
    return HAL_SD_ERROR_RX_OVERRUN;
 800acb0:	2320      	movs	r3, #32
 800acb2:	e74c      	b.n	800ab4e <HAL_SD_GetCardStatus+0x2e>
 800acb4:	1fe00fff 	.word	0x1fe00fff
 800acb8:	18000f3a 	.word	0x18000f3a

0800acbc <HAL_SD_GetCardInfo>:
{
 800acbc:	b4f0      	push	{r4, r5, r6, r7}
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800acbe:	e9d0 c70f 	ldrd	ip, r7, [r0, #60]	; 0x3c
 800acc2:	e9d0 6511 	ldrd	r6, r5, [r0, #68]	; 0x44
 800acc6:	e9d0 4213 	ldrd	r4, r2, [r0, #76]	; 0x4c
 800acca:	e9d0 3015 	ldrd	r3, r0, [r0, #84]	; 0x54
 800acce:	e9c1 c700 	strd	ip, r7, [r1]
 800acd2:	e9c1 6502 	strd	r6, r5, [r1, #8]
 800acd6:	e9c1 4204 	strd	r4, r2, [r1, #16]
 800acda:	61c8      	str	r0, [r1, #28]
}
 800acdc:	bcf0      	pop	{r4, r5, r6, r7}
 800acde:	2000      	movs	r0, #0
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800ace0:	618b      	str	r3, [r1, #24]
}
 800ace2:	4770      	bx	lr

0800ace4 <HAL_SD_ConfigWideBusOperation>:
{
 800ace4:	b530      	push	{r4, r5, lr}
  if(hsd->SdCard.CardType != CARD_SECURED)
 800ace6:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
  hsd->State = HAL_SD_STATE_BUSY;
 800ace8:	2203      	movs	r2, #3
  if(hsd->SdCard.CardType != CARD_SECURED)
 800acea:	4293      	cmp	r3, r2
{
 800acec:	b08b      	sub	sp, #44	; 0x2c
 800acee:	4604      	mov	r4, r0
  hsd->State = HAL_SD_STATE_BUSY;
 800acf0:	f880 2034 	strb.w	r2, [r0, #52]	; 0x34
{
 800acf4:	460d      	mov	r5, r1
  if(hsd->SdCard.CardType != CARD_SECURED)
 800acf6:	d025      	beq.n	800ad44 <HAL_SD_ConfigWideBusOperation+0x60>
    if(WideMode == SDMMC_BUS_WIDE_8B)
 800acf8:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 800acfc:	d022      	beq.n	800ad44 <HAL_SD_ConfigWideBusOperation+0x60>
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 800acfe:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 800ad02:	d064      	beq.n	800adce <HAL_SD_ConfigWideBusOperation+0xea>
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 800ad04:	2900      	cmp	r1, #0
 800ad06:	d043      	beq.n	800ad90 <HAL_SD_ConfigWideBusOperation+0xac>
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800ad08:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800ad0a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800ad0e:	6383      	str	r3, [r0, #56]	; 0x38
  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800ad10:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800ad12:	b9f3      	cbnz	r3, 800ad52 <HAL_SD_ConfigWideBusOperation+0x6e>
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800ad14:	e9d4 0101 	ldrd	r0, r1, [r4, #4]
    if(hsd->Init.ClockDiv >= SDMMC_NSpeed_CLK_DIV)
 800ad18:	6963      	ldr	r3, [r4, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800ad1a:	6922      	ldr	r2, [r4, #16]
    Init.BusWide             = WideMode;
 800ad1c:	9506      	str	r5, [sp, #24]
    if(hsd->Init.ClockDiv >= SDMMC_NSpeed_CLK_DIV)
 800ad1e:	2b02      	cmp	r3, #2
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800ad20:	e9cd 0104 	strd	r0, r1, [sp, #16]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800ad24:	9207      	str	r2, [sp, #28]
    if(hsd->Init.ClockDiv >= SDMMC_NSpeed_CLK_DIV)
 800ad26:	d92a      	bls.n	800ad7e <HAL_SD_ConfigWideBusOperation+0x9a>
      Init.ClockDiv = SDMMC_NSpeed_CLK_DIV;
 800ad28:	9308      	str	r3, [sp, #32]
    (void)SDMMC_Init(hsd->Instance, Init);
 800ad2a:	ab0a      	add	r3, sp, #40	; 0x28
 800ad2c:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 800ad30:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800ad34:	ab04      	add	r3, sp, #16
 800ad36:	cb0e      	ldmia	r3, {r1, r2, r3}
 800ad38:	6820      	ldr	r0, [r4, #0]
 800ad3a:	f000 ff6d 	bl	800bc18 <SDMMC_Init>
  HAL_StatusTypeDef status = HAL_OK;
 800ad3e:	2500      	movs	r5, #0
 800ad40:	6820      	ldr	r0, [r4, #0]
 800ad42:	e00a      	b.n	800ad5a <HAL_SD_ConfigWideBusOperation+0x76>
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ad44:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800ad46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ad4a:	63a3      	str	r3, [r4, #56]	; 0x38
  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800ad4c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	d0e0      	beq.n	800ad14 <HAL_SD_ConfigWideBusOperation+0x30>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ad52:	6820      	ldr	r0, [r4, #0]
 800ad54:	4b35      	ldr	r3, [pc, #212]	; (800ae2c <HAL_SD_ConfigWideBusOperation+0x148>)
 800ad56:	6383      	str	r3, [r0, #56]	; 0x38
    status = HAL_ERROR;
 800ad58:	2501      	movs	r5, #1
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800ad5a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800ad5e:	f000 ffa7 	bl	800bcb0 <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 800ad62:	b130      	cbz	r0, 800ad72 <HAL_SD_ConfigWideBusOperation+0x8e>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ad64:	6823      	ldr	r3, [r4, #0]
 800ad66:	4a31      	ldr	r2, [pc, #196]	; (800ae2c <HAL_SD_ConfigWideBusOperation+0x148>)
 800ad68:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800ad6a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800ad6c:	4318      	orrs	r0, r3
 800ad6e:	63a0      	str	r0, [r4, #56]	; 0x38
    status = HAL_ERROR;
 800ad70:	2501      	movs	r5, #1
  hsd->State = HAL_SD_STATE_READY;
 800ad72:	2301      	movs	r3, #1
}
 800ad74:	4628      	mov	r0, r5
  hsd->State = HAL_SD_STATE_READY;
 800ad76:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 800ad7a:	b00b      	add	sp, #44	; 0x2c
 800ad7c:	bd30      	pop	{r4, r5, pc}
    else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 800ad7e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800ad80:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 800ad84:	d0d0      	beq.n	800ad28 <HAL_SD_ConfigWideBusOperation+0x44>
    else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800ad86:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 800ad8a:	d040      	beq.n	800ae0e <HAL_SD_ConfigWideBusOperation+0x12a>
      Init.ClockDiv = SDMMC_NSpeed_CLK_DIV;
 800ad8c:	2303      	movs	r3, #3
 800ad8e:	e7cb      	b.n	800ad28 <HAL_SD_ConfigWideBusOperation+0x44>
  uint32_t scr[2U] = {0U, 0U};
 800ad90:	2200      	movs	r2, #0
 800ad92:	2300      	movs	r3, #0
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800ad94:	6800      	ldr	r0, [r0, #0]
  uint32_t scr[2U] = {0U, 0U};
 800ad96:	e9cd 2304 	strd	r2, r3, [sp, #16]
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800ad9a:	f000 ff71 	bl	800bc80 <SDMMC_GetResponse>
 800ad9e:	0182      	lsls	r2, r0, #6
 800ada0:	d438      	bmi.n	800ae14 <HAL_SD_ConfigWideBusOperation+0x130>
  errorstate = SD_FindSCR(hsd, scr);
 800ada2:	a904      	add	r1, sp, #16
 800ada4:	4620      	mov	r0, r4
 800ada6:	f7ff f9e3 	bl	800a170 <SD_FindSCR>
  if(errorstate != HAL_SD_ERROR_NONE)
 800adaa:	b960      	cbnz	r0, 800adc6 <HAL_SD_ConfigWideBusOperation+0xe2>
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800adac:	9b05      	ldr	r3, [sp, #20]
 800adae:	03db      	lsls	r3, r3, #15
 800adb0:	d536      	bpl.n	800ae20 <HAL_SD_ConfigWideBusOperation+0x13c>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800adb2:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800adb4:	6820      	ldr	r0, [r4, #0]
 800adb6:	0409      	lsls	r1, r1, #16
 800adb8:	f001 fc8c 	bl	800c6d4 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 800adbc:	b918      	cbnz	r0, 800adc6 <HAL_SD_ConfigWideBusOperation+0xe2>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800adbe:	4601      	mov	r1, r0
 800adc0:	6820      	ldr	r0, [r4, #0]
 800adc2:	f001 fd69 	bl	800c898 <SDMMC_CmdBusWidth>
      hsd->ErrorCode |= errorstate;
 800adc6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800adc8:	4308      	orrs	r0, r1
 800adca:	63a0      	str	r0, [r4, #56]	; 0x38
 800adcc:	e7be      	b.n	800ad4c <HAL_SD_ConfigWideBusOperation+0x68>
  uint32_t scr[2U] = {0U, 0U};
 800adce:	2200      	movs	r2, #0
 800add0:	2300      	movs	r3, #0
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800add2:	6800      	ldr	r0, [r0, #0]
 800add4:	2100      	movs	r1, #0
  uint32_t scr[2U] = {0U, 0U};
 800add6:	e9cd 2304 	strd	r2, r3, [sp, #16]
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800adda:	f000 ff51 	bl	800bc80 <SDMMC_GetResponse>
 800adde:	0180      	lsls	r0, r0, #6
 800ade0:	d41b      	bmi.n	800ae1a <HAL_SD_ConfigWideBusOperation+0x136>
  errorstate = SD_FindSCR(hsd, scr);
 800ade2:	a904      	add	r1, sp, #16
 800ade4:	4620      	mov	r0, r4
 800ade6:	f7ff f9c3 	bl	800a170 <SD_FindSCR>
  if(errorstate != HAL_SD_ERROR_NONE)
 800adea:	b960      	cbnz	r0, 800ae06 <HAL_SD_ConfigWideBusOperation+0x122>
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800adec:	9b05      	ldr	r3, [sp, #20]
 800adee:	0359      	lsls	r1, r3, #13
 800adf0:	d519      	bpl.n	800ae26 <HAL_SD_ConfigWideBusOperation+0x142>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800adf2:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800adf4:	6820      	ldr	r0, [r4, #0]
 800adf6:	0409      	lsls	r1, r1, #16
 800adf8:	f001 fc6c 	bl	800c6d4 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 800adfc:	b918      	cbnz	r0, 800ae06 <HAL_SD_ConfigWideBusOperation+0x122>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800adfe:	6820      	ldr	r0, [r4, #0]
 800ae00:	2102      	movs	r1, #2
 800ae02:	f001 fd49 	bl	800c898 <SDMMC_CmdBusWidth>
      hsd->ErrorCode |= errorstate;
 800ae06:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800ae08:	4318      	orrs	r0, r3
 800ae0a:	63a0      	str	r0, [r4, #56]	; 0x38
 800ae0c:	e79e      	b.n	800ad4c <HAL_SD_ConfigWideBusOperation+0x68>
      Init.ClockDiv = SDMMC_HSpeed_CLK_DIV;
 800ae0e:	2302      	movs	r3, #2
 800ae10:	9308      	str	r3, [sp, #32]
 800ae12:	e78a      	b.n	800ad2a <HAL_SD_ConfigWideBusOperation+0x46>
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800ae14:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800ae18:	e7d5      	b.n	800adc6 <HAL_SD_ConfigWideBusOperation+0xe2>
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800ae1a:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800ae1e:	e7f2      	b.n	800ae06 <HAL_SD_ConfigWideBusOperation+0x122>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800ae20:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 800ae24:	e7cf      	b.n	800adc6 <HAL_SD_ConfigWideBusOperation+0xe2>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800ae26:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 800ae2a:	e7ec      	b.n	800ae06 <HAL_SD_ConfigWideBusOperation+0x122>
 800ae2c:	1fe00fff 	.word	0x1fe00fff

0800ae30 <HAL_SD_Init>:
{
 800ae30:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ae32:	b087      	sub	sp, #28
  if(hsd == NULL)
 800ae34:	b168      	cbz	r0, 800ae52 <HAL_SD_Init+0x22>
  if(hsd->State == HAL_SD_STATE_RESET)
 800ae36:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
 800ae3a:	4604      	mov	r4, r0
 800ae3c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	d03e      	beq.n	800aec2 <HAL_SD_Init+0x92>
  hsd->State = HAL_SD_STATE_BUSY;
 800ae44:	2303      	movs	r3, #3
 800ae46:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800ae4a:	4620      	mov	r0, r4
 800ae4c:	f7ff fd04 	bl	800a858 <HAL_SD_InitCard>
 800ae50:	b118      	cbz	r0, 800ae5a <HAL_SD_Init+0x2a>
    return HAL_ERROR;
 800ae52:	2601      	movs	r6, #1
}
 800ae54:	4630      	mov	r0, r6
 800ae56:	b007      	add	sp, #28
 800ae58:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if( HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 800ae5a:	a901      	add	r1, sp, #4
 800ae5c:	4620      	mov	r0, r4
 800ae5e:	f7ff fe5f 	bl	800ab20 <HAL_SD_GetCardStatus>
 800ae62:	2800      	cmp	r0, #0
 800ae64:	d1f5      	bne.n	800ae52 <HAL_SD_Init+0x22>
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800ae66:	6be1      	ldr	r1, [r4, #60]	; 0x3c
  speedgrade = CardStatus.UhsSpeedGrade;
 800ae68:	f89d 2014 	ldrb.w	r2, [sp, #20]
  unitsize = CardStatus.UhsAllocationUnitSize;
 800ae6c:	f89d 3015 	ldrb.w	r3, [sp, #21]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800ae70:	2901      	cmp	r1, #1
  speedgrade = CardStatus.UhsSpeedGrade;
 800ae72:	b2d2      	uxtb	r2, r2
  unitsize = CardStatus.UhsAllocationUnitSize;
 800ae74:	b2db      	uxtb	r3, r3
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800ae76:	d036      	beq.n	800aee6 <HAL_SD_Init+0xb6>
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 800ae78:	65e0      	str	r0, [r4, #92]	; 0x5c
  if(HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 800ae7a:	68e1      	ldr	r1, [r4, #12]
 800ae7c:	4620      	mov	r0, r4
 800ae7e:	f7ff ff31 	bl	800ace4 <HAL_SD_ConfigWideBusOperation>
 800ae82:	4606      	mov	r6, r0
 800ae84:	2800      	cmp	r0, #0
 800ae86:	d1e4      	bne.n	800ae52 <HAL_SD_Init+0x22>
  tickstart = HAL_GetTick();
 800ae88:	f7fb f8d6 	bl	8006038 <HAL_GetTick>
 800ae8c:	4607      	mov	r7, r0
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800ae8e:	e00b      	b.n	800aea8 <HAL_SD_Init+0x78>
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800ae90:	6820      	ldr	r0, [r4, #0]
 800ae92:	f000 fef5 	bl	800bc80 <SDMMC_GetResponse>
  cardstate = ((resp1 >> 9U) & 0x0FU);
 800ae96:	f3c0 2043 	ubfx	r0, r0, #9, #4
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800ae9a:	2804      	cmp	r0, #4
 800ae9c:	d015      	beq.n	800aeca <HAL_SD_Init+0x9a>
    if((HAL_GetTick()-tickstart) >=  SDMMC_DATATIMEOUT)
 800ae9e:	f7fb f8cb 	bl	8006038 <HAL_GetTick>
 800aea2:	1bc3      	subs	r3, r0, r7
 800aea4:	3301      	adds	r3, #1
 800aea6:	d016      	beq.n	800aed6 <HAL_SD_Init+0xa6>
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800aea8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800aeaa:	6820      	ldr	r0, [r4, #0]
 800aeac:	0409      	lsls	r1, r1, #16
 800aeae:	f001 ff19 	bl	800cce4 <SDMMC_CmdSendStatus>
  if(errorstate != HAL_SD_ERROR_NONE)
 800aeb2:	4605      	mov	r5, r0
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800aeb4:	4601      	mov	r1, r0
  if(errorstate != HAL_SD_ERROR_NONE)
 800aeb6:	2800      	cmp	r0, #0
 800aeb8:	d0ea      	beq.n	800ae90 <HAL_SD_Init+0x60>
    hsd->ErrorCode |= errorstate;
 800aeba:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800aebc:	4305      	orrs	r5, r0
 800aebe:	63a5      	str	r5, [r4, #56]	; 0x38
  return (HAL_SD_CardStateTypeDef)cardstate;
 800aec0:	e7ed      	b.n	800ae9e <HAL_SD_Init+0x6e>
    hsd->Lock = HAL_UNLOCKED;
 800aec2:	7702      	strb	r2, [r0, #28]
    HAL_SD_MspInit(hsd);
 800aec4:	f7ff f9c2 	bl	800a24c <HAL_SD_MspInit>
 800aec8:	e7bc      	b.n	800ae44 <HAL_SD_Init+0x14>
  hsd->State = HAL_SD_STATE_READY;
 800aeca:	2301      	movs	r3, #1
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800aecc:	63a5      	str	r5, [r4, #56]	; 0x38
  hsd->Context = SD_CONTEXT_NONE;
 800aece:	6325      	str	r5, [r4, #48]	; 0x30
  hsd->State = HAL_SD_STATE_READY;
 800aed0:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  return HAL_OK;
 800aed4:	e7be      	b.n	800ae54 <HAL_SD_Init+0x24>
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800aed6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
      hsd->State= HAL_SD_STATE_READY;
 800aeda:	2301      	movs	r3, #1
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800aedc:	63a2      	str	r2, [r4, #56]	; 0x38
      return HAL_TIMEOUT;
 800aede:	2603      	movs	r6, #3
      hsd->State= HAL_SD_STATE_READY;
 800aee0:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      return HAL_TIMEOUT;
 800aee4:	e7b6      	b.n	800ae54 <HAL_SD_Init+0x24>
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800aee6:	4313      	orrs	r3, r2
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800aee8:	bf14      	ite	ne
 800aeea:	f44f 7300 	movne.w	r3, #512	; 0x200
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 800aeee:	f44f 7380 	moveq.w	r3, #256	; 0x100
 800aef2:	65e3      	str	r3, [r4, #92]	; 0x5c
 800aef4:	e7c1      	b.n	800ae7a <HAL_SD_Init+0x4a>
 800aef6:	bf00      	nop

0800aef8 <HAL_SD_GetCardState>:
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800aef8:	6c81      	ldr	r1, [r0, #72]	; 0x48
{
 800aefa:	b510      	push	{r4, lr}
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800aefc:	0409      	lsls	r1, r1, #16
{
 800aefe:	4604      	mov	r4, r0
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800af00:	6800      	ldr	r0, [r0, #0]
 800af02:	f001 feef 	bl	800cce4 <SDMMC_CmdSendStatus>
  if(errorstate != HAL_SD_ERROR_NONE)
 800af06:	b120      	cbz	r0, 800af12 <HAL_SD_GetCardState+0x1a>
    hsd->ErrorCode |= errorstate;
 800af08:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800af0a:	4308      	orrs	r0, r1
 800af0c:	63a0      	str	r0, [r4, #56]	; 0x38
 800af0e:	2000      	movs	r0, #0
}
 800af10:	bd10      	pop	{r4, pc}
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800af12:	4601      	mov	r1, r0
 800af14:	6820      	ldr	r0, [r4, #0]
 800af16:	f000 feb3 	bl	800bc80 <SDMMC_GetResponse>
  if(errorstate != HAL_SD_ERROR_NONE)
 800af1a:	f3c0 2043 	ubfx	r0, r0, #9, #4
}
 800af1e:	bd10      	pop	{r4, pc}

0800af20 <HAL_SDEx_DriveTransceiver_1_8V_Callback>:
  UNUSED(status);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SD_EnableTransciver could be implemented in the user file
   */
}
 800af20:	4770      	bx	lr
 800af22:	bf00      	nop

0800af24 <HAL_SDEx_Read_DMADoubleBuffer0CpltCallback>:
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuffer0CpltCallback can be implemented in the user file
   */
}
 800af24:	4770      	bx	lr
 800af26:	bf00      	nop

0800af28 <HAL_SDEx_Read_DMADoubleBuffer1CpltCallback>:
 800af28:	4770      	bx	lr
 800af2a:	bf00      	nop

0800af2c <HAL_SDEx_Write_DMADoubleBuffer0CpltCallback>:
 800af2c:	4770      	bx	lr
 800af2e:	bf00      	nop

0800af30 <HAL_SDEx_Write_DMADoubleBuffer1CpltCallback>:
 800af30:	4770      	bx	lr
 800af32:	bf00      	nop

0800af34 <HAL_SPI_MspInit>:
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 800af34:	4770      	bx	lr
 800af36:	bf00      	nop

0800af38 <SPI_DMAHalfReceiveCplt>:
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800af38:	6a80      	ldr	r0, [r0, #40]	; 0x28

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
 800af3a:	6f43      	ldr	r3, [r0, #116]	; 0x74
 800af3c:	4718      	bx	r3
 800af3e:	bf00      	nop

0800af40 <SPI_DMAHalfTransmitReceiveCplt>:
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800af40:	6a80      	ldr	r0, [r0, #40]	; 0x28

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
 800af42:	6f83      	ldr	r3, [r0, #120]	; 0x78
 800af44:	4718      	bx	r3
 800af46:	bf00      	nop

0800af48 <SPI_DMAError>:
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800af48:	6a80      	ldr	r0, [r0, #40]	; 0x28

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800af4a:	6802      	ldr	r2, [r0, #0]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
  hspi->State = HAL_SPI_STATE_READY;
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
 800af4c:	6fc1      	ldr	r1, [r0, #124]	; 0x7c
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800af4e:	6853      	ldr	r3, [r2, #4]
 800af50:	f023 0303 	bic.w	r3, r3, #3
{
 800af54:	b410      	push	{r4}
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800af56:	6053      	str	r3, [r2, #4]
  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800af58:	6e03      	ldr	r3, [r0, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 800af5a:	2401      	movs	r4, #1
  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800af5c:	f043 0310 	orr.w	r3, r3, #16
 800af60:	6603      	str	r3, [r0, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 800af62:	f880 405d 	strb.w	r4, [r0, #93]	; 0x5d
#else
  HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800af66:	f85d 4b04 	ldr.w	r4, [sp], #4
  hspi->ErrorCallback(hspi);
 800af6a:	4708      	bx	r1

0800af6c <HAL_SPI_AbortCpltCallback>:
 800af6c:	4770      	bx	lr
 800af6e:	bf00      	nop

0800af70 <HAL_SPI_TxCpltCallback>:
 800af70:	4770      	bx	lr
 800af72:	bf00      	nop

0800af74 <HAL_SPI_RxCpltCallback>:
 800af74:	4770      	bx	lr
 800af76:	bf00      	nop

0800af78 <HAL_SPI_TxRxCpltCallback>:
 800af78:	4770      	bx	lr
 800af7a:	bf00      	nop

0800af7c <HAL_SPI_TxHalfCpltCallback>:
 800af7c:	4770      	bx	lr
 800af7e:	bf00      	nop

0800af80 <HAL_SPI_RxHalfCpltCallback>:
 800af80:	4770      	bx	lr
 800af82:	bf00      	nop

0800af84 <HAL_SPI_TxRxHalfCpltCallback>:
 800af84:	4770      	bx	lr
 800af86:	bf00      	nop

0800af88 <HAL_SPI_ErrorCallback>:
 800af88:	4770      	bx	lr
 800af8a:	bf00      	nop

0800af8c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800af8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af8e:	4605      	mov	r5, r0
 800af90:	460e      	mov	r6, r1
 800af92:	4617      	mov	r7, r2
 800af94:	1c71      	adds	r1, r6, #1
  while ((hspi->Instance->SR & Fifo) != State)
 800af96:	682c      	ldr	r4, [r5, #0]
 800af98:	d110      	bne.n	800afbc <SPI_EndRxTxTransaction+0x30>
 800af9a:	68a3      	ldr	r3, [r4, #8]
 800af9c:	f413 5fc0 	tst.w	r3, #6144	; 0x1800
 800afa0:	d1fb      	bne.n	800af9a <SPI_EndRxTxTransaction+0xe>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800afa2:	68a3      	ldr	r3, [r4, #8]
 800afa4:	061a      	lsls	r2, r3, #24
 800afa6:	d4fc      	bmi.n	800afa2 <SPI_EndRxTxTransaction+0x16>
  while ((hspi->Instance->SR & Fifo) != State)
 800afa8:	68a0      	ldr	r0, [r4, #8]
 800afaa:	f410 60c0 	ands.w	r0, r0, #1536	; 0x600
 800afae:	d004      	beq.n	800afba <SPI_EndRxTxTransaction+0x2e>
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 800afb0:	7b23      	ldrb	r3, [r4, #12]
  while ((hspi->Instance->SR & Fifo) != State)
 800afb2:	68a0      	ldr	r0, [r4, #8]
 800afb4:	f410 60c0 	ands.w	r0, r0, #1536	; 0x600
 800afb8:	d1fa      	bne.n	800afb0 <SPI_EndRxTxTransaction+0x24>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  return HAL_OK;
}
 800afba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  while ((hspi->Instance->SR & Fifo) != State)
 800afbc:	68a3      	ldr	r3, [r4, #8]
 800afbe:	f413 5fc0 	tst.w	r3, #6144	; 0x1800
 800afc2:	d02b      	beq.n	800b01c <SPI_EndRxTxTransaction+0x90>
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800afc4:	f7fb f838 	bl	8006038 <HAL_GetTick>
 800afc8:	1bc0      	subs	r0, r0, r7
 800afca:	4286      	cmp	r6, r0
 800afcc:	d8e2      	bhi.n	800af94 <SPI_EndRxTxTransaction+0x8>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800afce:	e9d5 3100 	ldrd	r3, r1, [r5]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800afd2:	685a      	ldr	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800afd4:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800afd8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800afdc:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800afde:	d02e      	beq.n	800b03e <SPI_EndRxTxTransaction+0xb2>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800afe0:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 800afe2:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800afe6:	d107      	bne.n	800aff8 <SPI_EndRxTxTransaction+0x6c>
          SPI_RESET_CRC(hspi);
 800afe8:	681a      	ldr	r2, [r3, #0]
 800afea:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800afee:	601a      	str	r2, [r3, #0]
 800aff0:	681a      	ldr	r2, [r3, #0]
 800aff2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800aff6:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 800aff8:	2301      	movs	r3, #1
 800affa:	f885 305d 	strb.w	r3, [r5, #93]	; 0x5d
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800affe:	6e2b      	ldr	r3, [r5, #96]	; 0x60
        __HAL_UNLOCK(hspi);
 800b000:	2200      	movs	r2, #0
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b002:	f043 0320 	orr.w	r3, r3, #32
        __HAL_UNLOCK(hspi);
 800b006:	f885 205c 	strb.w	r2, [r5, #92]	; 0x5c
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b00a:	662b      	str	r3, [r5, #96]	; 0x60
    return HAL_TIMEOUT;
 800b00c:	2003      	movs	r0, #3
}
 800b00e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800b010:	f7fb f812 	bl	8006038 <HAL_GetTick>
 800b014:	1bc0      	subs	r0, r0, r7
 800b016:	4286      	cmp	r6, r0
 800b018:	d9d9      	bls.n	800afce <SPI_EndRxTxTransaction+0x42>
 800b01a:	682c      	ldr	r4, [r5, #0]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800b01c:	68a3      	ldr	r3, [r4, #8]
 800b01e:	061b      	lsls	r3, r3, #24
 800b020:	d4f6      	bmi.n	800b010 <SPI_EndRxTxTransaction+0x84>
 800b022:	e006      	b.n	800b032 <SPI_EndRxTxTransaction+0xa6>
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 800b024:	7b23      	ldrb	r3, [r4, #12]
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800b026:	f7fb f807 	bl	8006038 <HAL_GetTick>
 800b02a:	1bc0      	subs	r0, r0, r7
 800b02c:	4286      	cmp	r6, r0
 800b02e:	d9ce      	bls.n	800afce <SPI_EndRxTxTransaction+0x42>
 800b030:	682c      	ldr	r4, [r5, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 800b032:	68a3      	ldr	r3, [r4, #8]
 800b034:	f413 63c0 	ands.w	r3, r3, #1536	; 0x600
 800b038:	d1f4      	bne.n	800b024 <SPI_EndRxTxTransaction+0x98>
  return HAL_OK;
 800b03a:	4618      	mov	r0, r3
}
 800b03c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b03e:	68aa      	ldr	r2, [r5, #8]
 800b040:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800b044:	d002      	beq.n	800b04c <SPI_EndRxTxTransaction+0xc0>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b046:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800b04a:	d1c9      	bne.n	800afe0 <SPI_EndRxTxTransaction+0x54>
          __HAL_SPI_DISABLE(hspi);
 800b04c:	681a      	ldr	r2, [r3, #0]
 800b04e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b052:	601a      	str	r2, [r3, #0]
 800b054:	e7c4      	b.n	800afe0 <SPI_EndRxTxTransaction+0x54>
 800b056:	bf00      	nop

0800b058 <SPI_EndRxTxTransaction.constprop.0>:
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
 800b058:	b538      	push	{r3, r4, r5, lr}
 800b05a:	4604      	mov	r4, r0
 800b05c:	460d      	mov	r5, r1
 800b05e:	e004      	b.n	800b06a <SPI_EndRxTxTransaction.constprop.0+0x12>
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800b060:	f7fa ffea 	bl	8006038 <HAL_GetTick>
 800b064:	1b40      	subs	r0, r0, r5
 800b066:	2863      	cmp	r0, #99	; 0x63
 800b068:	d81b      	bhi.n	800b0a2 <SPI_EndRxTxTransaction.constprop.0+0x4a>
  while ((hspi->Instance->SR & Fifo) != State)
 800b06a:	6823      	ldr	r3, [r4, #0]
 800b06c:	689a      	ldr	r2, [r3, #8]
 800b06e:	f412 5fc0 	tst.w	r2, #6144	; 0x1800
 800b072:	d1f5      	bne.n	800b060 <SPI_EndRxTxTransaction.constprop.0+0x8>
 800b074:	e005      	b.n	800b082 <SPI_EndRxTxTransaction.constprop.0+0x2a>
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800b076:	f7fa ffdf 	bl	8006038 <HAL_GetTick>
 800b07a:	1b40      	subs	r0, r0, r5
 800b07c:	2863      	cmp	r0, #99	; 0x63
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800b07e:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800b080:	d810      	bhi.n	800b0a4 <SPI_EndRxTxTransaction.constprop.0+0x4c>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800b082:	689a      	ldr	r2, [r3, #8]
 800b084:	0612      	lsls	r2, r2, #24
 800b086:	d4f6      	bmi.n	800b076 <SPI_EndRxTxTransaction.constprop.0+0x1e>
 800b088:	e006      	b.n	800b098 <SPI_EndRxTxTransaction.constprop.0+0x40>
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 800b08a:	7b1b      	ldrb	r3, [r3, #12]
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800b08c:	f7fa ffd4 	bl	8006038 <HAL_GetTick>
 800b090:	1b40      	subs	r0, r0, r5
 800b092:	2863      	cmp	r0, #99	; 0x63
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800b094:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800b096:	d805      	bhi.n	800b0a4 <SPI_EndRxTxTransaction.constprop.0+0x4c>
  while ((hspi->Instance->SR & Fifo) != State)
 800b098:	6898      	ldr	r0, [r3, #8]
 800b09a:	f410 60c0 	ands.w	r0, r0, #1536	; 0x600
 800b09e:	d1f4      	bne.n	800b08a <SPI_EndRxTxTransaction.constprop.0+0x32>
}
 800b0a0:	bd38      	pop	{r3, r4, r5, pc}
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800b0a2:	6823      	ldr	r3, [r4, #0]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b0a4:	6861      	ldr	r1, [r4, #4]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800b0a6:	685a      	ldr	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b0a8:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800b0ac:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800b0b0:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b0b2:	d017      	beq.n	800b0e4 <SPI_EndRxTxTransaction.constprop.0+0x8c>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800b0b4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800b0b6:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800b0ba:	d107      	bne.n	800b0cc <SPI_EndRxTxTransaction.constprop.0+0x74>
          SPI_RESET_CRC(hspi);
 800b0bc:	681a      	ldr	r2, [r3, #0]
 800b0be:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b0c2:	601a      	str	r2, [r3, #0]
 800b0c4:	681a      	ldr	r2, [r3, #0]
 800b0c6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b0ca:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 800b0cc:	2301      	movs	r3, #1
 800b0ce:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b0d2:	6e23      	ldr	r3, [r4, #96]	; 0x60
        __HAL_UNLOCK(hspi);
 800b0d4:	2200      	movs	r2, #0
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b0d6:	f043 0320 	orr.w	r3, r3, #32
        __HAL_UNLOCK(hspi);
 800b0da:	f884 205c 	strb.w	r2, [r4, #92]	; 0x5c
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b0de:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 800b0e0:	2003      	movs	r0, #3
}
 800b0e2:	bd38      	pop	{r3, r4, r5, pc}
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b0e4:	68a2      	ldr	r2, [r4, #8]
 800b0e6:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800b0ea:	d002      	beq.n	800b0f2 <SPI_EndRxTxTransaction.constprop.0+0x9a>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b0ec:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800b0f0:	d1e0      	bne.n	800b0b4 <SPI_EndRxTxTransaction.constprop.0+0x5c>
          __HAL_SPI_DISABLE(hspi);
 800b0f2:	681a      	ldr	r2, [r3, #0]
 800b0f4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b0f8:	601a      	str	r2, [r3, #0]
 800b0fa:	e7db      	b.n	800b0b4 <SPI_EndRxTxTransaction.constprop.0+0x5c>

0800b0fc <SPI_DMATransmitReceiveCplt>:
{
 800b0fc:	b570      	push	{r4, r5, r6, lr}
 800b0fe:	4605      	mov	r5, r0
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800b100:	6a84      	ldr	r4, [r0, #40]	; 0x28
  tickstart = HAL_GetTick();
 800b102:	f7fa ff99 	bl	8006038 <HAL_GetTick>
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800b106:	682b      	ldr	r3, [r5, #0]
 800b108:	681b      	ldr	r3, [r3, #0]
 800b10a:	069b      	lsls	r3, r3, #26
 800b10c:	d504      	bpl.n	800b118 <SPI_DMATransmitReceiveCplt+0x1c>
  hspi->TxRxCpltCallback(hspi);
 800b10e:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800b110:	4620      	mov	r0, r4
}
 800b112:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  hspi->TxRxCpltCallback(hspi);
 800b116:	4718      	bx	r3
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800b118:	6822      	ldr	r2, [r4, #0]
 800b11a:	6853      	ldr	r3, [r2, #4]
 800b11c:	f023 0320 	bic.w	r3, r3, #32
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800b120:	4601      	mov	r1, r0
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800b122:	6053      	str	r3, [r2, #4]
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800b124:	4620      	mov	r0, r4
 800b126:	f7ff ff97 	bl	800b058 <SPI_EndRxTxTransaction.constprop.0>
 800b12a:	b118      	cbz	r0, 800b134 <SPI_DMATransmitReceiveCplt+0x38>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b12c:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800b12e:	f043 0320 	orr.w	r3, r3, #32
 800b132:	6623      	str	r3, [r4, #96]	; 0x60
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800b134:	6821      	ldr	r1, [r4, #0]
 800b136:	684b      	ldr	r3, [r1, #4]
    hspi->TxXferCount = 0U;
 800b138:	2200      	movs	r2, #0
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800b13a:	f023 0303 	bic.w	r3, r3, #3
    hspi->State = HAL_SPI_STATE_READY;
 800b13e:	2001      	movs	r0, #1
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800b140:	604b      	str	r3, [r1, #4]
    hspi->TxXferCount = 0U;
 800b142:	87e2      	strh	r2, [r4, #62]	; 0x3e
    hspi->RxXferCount = 0U;
 800b144:	f8a4 2046 	strh.w	r2, [r4, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 800b148:	f884 005d 	strb.w	r0, [r4, #93]	; 0x5d
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b14c:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800b14e:	2b00      	cmp	r3, #0
 800b150:	d0dd      	beq.n	800b10e <SPI_DMATransmitReceiveCplt+0x12>
      hspi->ErrorCallback(hspi);
 800b152:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800b154:	4620      	mov	r0, r4
}
 800b156:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      hspi->ErrorCallback(hspi);
 800b15a:	4718      	bx	r3

0800b15c <SPI_EndRxTransaction.constprop.0>:
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
 800b15c:	b538      	push	{r3, r4, r5, lr}
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b15e:	6843      	ldr	r3, [r0, #4]
 800b160:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
 800b164:	4604      	mov	r4, r0
 800b166:	460d      	mov	r5, r1
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b168:	d03a      	beq.n	800b1e0 <SPI_EndRxTransaction.constprop.0+0x84>
 800b16a:	6823      	ldr	r3, [r4, #0]
 800b16c:	e005      	b.n	800b17a <SPI_EndRxTransaction.constprop.0+0x1e>
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800b16e:	f7fa ff63 	bl	8006038 <HAL_GetTick>
 800b172:	1b40      	subs	r0, r0, r5
 800b174:	2863      	cmp	r0, #99	; 0x63
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800b176:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800b178:	d81a      	bhi.n	800b1b0 <SPI_EndRxTransaction.constprop.0+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800b17a:	689a      	ldr	r2, [r3, #8]
 800b17c:	0612      	lsls	r2, r2, #24
 800b17e:	d4f6      	bmi.n	800b16e <SPI_EndRxTransaction.constprop.0+0x12>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b180:	6862      	ldr	r2, [r4, #4]
 800b182:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 800b186:	d001      	beq.n	800b18c <SPI_EndRxTransaction.constprop.0+0x30>
  return HAL_OK;
 800b188:	2000      	movs	r0, #0
}
 800b18a:	bd38      	pop	{r3, r4, r5, pc}
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b18c:	68a2      	ldr	r2, [r4, #8]
 800b18e:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800b192:	d002      	beq.n	800b19a <SPI_EndRxTransaction.constprop.0+0x3e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b194:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800b198:	d1f6      	bne.n	800b188 <SPI_EndRxTransaction.constprop.0+0x2c>
  while ((hspi->Instance->SR & Fifo) != State)
 800b19a:	689a      	ldr	r2, [r3, #8]
 800b19c:	f412 6fc0 	tst.w	r2, #1536	; 0x600
 800b1a0:	d0f2      	beq.n	800b188 <SPI_EndRxTransaction.constprop.0+0x2c>
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 800b1a2:	7b1b      	ldrb	r3, [r3, #12]
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800b1a4:	f7fa ff48 	bl	8006038 <HAL_GetTick>
 800b1a8:	1b40      	subs	r0, r0, r5
 800b1aa:	2863      	cmp	r0, #99	; 0x63
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800b1ac:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800b1ae:	d9f4      	bls.n	800b19a <SPI_EndRxTransaction.constprop.0+0x3e>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b1b0:	6861      	ldr	r1, [r4, #4]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800b1b2:	685a      	ldr	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b1b4:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800b1b8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800b1bc:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b1be:	d025      	beq.n	800b20c <SPI_EndRxTransaction.constprop.0+0xb0>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800b1c0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800b1c2:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800b1c6:	d018      	beq.n	800b1fa <SPI_EndRxTransaction.constprop.0+0x9e>
        hspi->State = HAL_SPI_STATE_READY;
 800b1c8:	2301      	movs	r3, #1
 800b1ca:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b1ce:	6e23      	ldr	r3, [r4, #96]	; 0x60
        __HAL_UNLOCK(hspi);
 800b1d0:	2200      	movs	r2, #0
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b1d2:	f043 0320 	orr.w	r3, r3, #32
        __HAL_UNLOCK(hspi);
 800b1d6:	f884 205c 	strb.w	r2, [r4, #92]	; 0x5c
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b1da:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 800b1dc:	2003      	movs	r0, #3
}
 800b1de:	bd38      	pop	{r3, r4, r5, pc}
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b1e0:	6883      	ldr	r3, [r0, #8]
 800b1e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b1e6:	d002      	beq.n	800b1ee <SPI_EndRxTransaction.constprop.0+0x92>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b1e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b1ec:	d1bd      	bne.n	800b16a <SPI_EndRxTransaction.constprop.0+0xe>
    __HAL_SPI_DISABLE(hspi);
 800b1ee:	6823      	ldr	r3, [r4, #0]
 800b1f0:	681a      	ldr	r2, [r3, #0]
 800b1f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b1f6:	601a      	str	r2, [r3, #0]
 800b1f8:	e7bf      	b.n	800b17a <SPI_EndRxTransaction.constprop.0+0x1e>
          SPI_RESET_CRC(hspi);
 800b1fa:	681a      	ldr	r2, [r3, #0]
 800b1fc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b200:	601a      	str	r2, [r3, #0]
 800b202:	681a      	ldr	r2, [r3, #0]
 800b204:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b208:	601a      	str	r2, [r3, #0]
 800b20a:	e7dd      	b.n	800b1c8 <SPI_EndRxTransaction.constprop.0+0x6c>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b20c:	68a2      	ldr	r2, [r4, #8]
 800b20e:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800b212:	d002      	beq.n	800b21a <SPI_EndRxTransaction.constprop.0+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b214:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800b218:	d1d2      	bne.n	800b1c0 <SPI_EndRxTransaction.constprop.0+0x64>
          __HAL_SPI_DISABLE(hspi);
 800b21a:	681a      	ldr	r2, [r3, #0]
 800b21c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b220:	601a      	str	r2, [r3, #0]
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800b222:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800b224:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800b228:	d1ce      	bne.n	800b1c8 <SPI_EndRxTransaction.constprop.0+0x6c>
 800b22a:	e7e6      	b.n	800b1fa <SPI_EndRxTransaction.constprop.0+0x9e>

0800b22c <SPI_DMAReceiveCplt>:
{
 800b22c:	b570      	push	{r4, r5, r6, lr}
 800b22e:	4604      	mov	r4, r0
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800b230:	6a85      	ldr	r5, [r0, #40]	; 0x28
  tickstart = HAL_GetTick();
 800b232:	f7fa ff01 	bl	8006038 <HAL_GetTick>
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800b236:	6823      	ldr	r3, [r4, #0]
 800b238:	681b      	ldr	r3, [r3, #0]
 800b23a:	069b      	lsls	r3, r3, #26
 800b23c:	d504      	bpl.n	800b248 <SPI_DMAReceiveCplt+0x1c>
  hspi->RxCpltCallback(hspi);
 800b23e:	6eab      	ldr	r3, [r5, #104]	; 0x68
 800b240:	4628      	mov	r0, r5
}
 800b242:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  hspi->RxCpltCallback(hspi);
 800b246:	4718      	bx	r3
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800b248:	682b      	ldr	r3, [r5, #0]
 800b24a:	685a      	ldr	r2, [r3, #4]
 800b24c:	f022 0220 	bic.w	r2, r2, #32
 800b250:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800b252:	685a      	ldr	r2, [r3, #4]
 800b254:	f022 0203 	bic.w	r2, r2, #3
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800b258:	4601      	mov	r1, r0
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800b25a:	605a      	str	r2, [r3, #4]
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800b25c:	4628      	mov	r0, r5
 800b25e:	f7ff ff7d 	bl	800b15c <SPI_EndRxTransaction.constprop.0>
 800b262:	b108      	cbz	r0, 800b268 <SPI_DMAReceiveCplt+0x3c>
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800b264:	2320      	movs	r3, #32
 800b266:	662b      	str	r3, [r5, #96]	; 0x60
    hspi->State = HAL_SPI_STATE_READY;
 800b268:	2301      	movs	r3, #1
    hspi->RxXferCount = 0U;
 800b26a:	2200      	movs	r2, #0
 800b26c:	f8a5 2046 	strh.w	r2, [r5, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 800b270:	f885 305d 	strb.w	r3, [r5, #93]	; 0x5d
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b274:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 800b276:	2b00      	cmp	r3, #0
 800b278:	d0e1      	beq.n	800b23e <SPI_DMAReceiveCplt+0x12>
      hspi->ErrorCallback(hspi);
 800b27a:	6feb      	ldr	r3, [r5, #124]	; 0x7c
 800b27c:	4628      	mov	r0, r5
}
 800b27e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      hspi->ErrorCallback(hspi);
 800b282:	4718      	bx	r3

0800b284 <HAL_SPI_Init>:
  if (hspi == NULL)
 800b284:	2800      	cmp	r0, #0
 800b286:	d072      	beq.n	800b36e <HAL_SPI_Init+0xea>
{
 800b288:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (hspi->State == HAL_SPI_STATE_RESET)
 800b28a:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b28e:	2200      	movs	r2, #0
{
 800b290:	b083      	sub	sp, #12
 800b292:	4604      	mov	r4, r0
  if (hspi->State == HAL_SPI_STATE_RESET)
 800b294:	f003 01ff 	and.w	r1, r3, #255	; 0xff
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b298:	6282      	str	r2, [r0, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 800b29a:	b9bb      	cbnz	r3, 800b2cc <HAL_SPI_Init+0x48>
    if (hspi->MspInitCallback == NULL)
 800b29c:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
    hspi->TxCpltCallback       = HAL_SPI_TxCpltCallback;       /* Legacy weak TxCpltCallback       */
 800b2a0:	4d3a      	ldr	r5, [pc, #232]	; (800b38c <HAL_SPI_Init+0x108>)
    hspi->RxCpltCallback       = HAL_SPI_RxCpltCallback;       /* Legacy weak RxCpltCallback       */
 800b2a2:	483b      	ldr	r0, [pc, #236]	; (800b390 <HAL_SPI_Init+0x10c>)
    hspi->TxHalfCpltCallback   = HAL_SPI_TxHalfCpltCallback;   /* Legacy weak TxHalfCpltCallback   */
 800b2a4:	4a3b      	ldr	r2, [pc, #236]	; (800b394 <HAL_SPI_Init+0x110>)
    hspi->Lock = HAL_UNLOCKED;
 800b2a6:	f884 105c 	strb.w	r1, [r4, #92]	; 0x5c
    hspi->TxCpltCallback       = HAL_SPI_TxCpltCallback;       /* Legacy weak TxCpltCallback       */
 800b2aa:	6665      	str	r5, [r4, #100]	; 0x64
    hspi->ErrorCallback        = HAL_SPI_ErrorCallback;        /* Legacy weak ErrorCallback        */
 800b2ac:	493a      	ldr	r1, [pc, #232]	; (800b398 <HAL_SPI_Init+0x114>)
    hspi->RxHalfCpltCallback   = HAL_SPI_RxHalfCpltCallback;   /* Legacy weak RxHalfCpltCallback   */
 800b2ae:	4d3b      	ldr	r5, [pc, #236]	; (800b39c <HAL_SPI_Init+0x118>)
    hspi->RxCpltCallback       = HAL_SPI_RxCpltCallback;       /* Legacy weak RxCpltCallback       */
 800b2b0:	66a0      	str	r0, [r4, #104]	; 0x68
    hspi->TxHalfCpltCallback   = HAL_SPI_TxHalfCpltCallback;   /* Legacy weak TxHalfCpltCallback   */
 800b2b2:	6722      	str	r2, [r4, #112]	; 0x70
    hspi->TxRxHalfCpltCallback = HAL_SPI_TxRxHalfCpltCallback; /* Legacy weak TxRxHalfCpltCallback */
 800b2b4:	483a      	ldr	r0, [pc, #232]	; (800b3a0 <HAL_SPI_Init+0x11c>)
    hspi->AbortCpltCallback    = HAL_SPI_AbortCpltCallback;    /* Legacy weak AbortCpltCallback    */
 800b2b6:	4a3b      	ldr	r2, [pc, #236]	; (800b3a4 <HAL_SPI_Init+0x120>)
    hspi->TxRxCpltCallback     = HAL_SPI_TxRxCpltCallback;     /* Legacy weak TxRxCpltCallback     */
 800b2b8:	4e3b      	ldr	r6, [pc, #236]	; (800b3a8 <HAL_SPI_Init+0x124>)
 800b2ba:	66e6      	str	r6, [r4, #108]	; 0x6c
    hspi->TxRxHalfCpltCallback = HAL_SPI_TxRxHalfCpltCallback; /* Legacy weak TxRxHalfCpltCallback */
 800b2bc:	e9c4 501d 	strd	r5, r0, [r4, #116]	; 0x74
    hspi->AbortCpltCallback    = HAL_SPI_AbortCpltCallback;    /* Legacy weak AbortCpltCallback    */
 800b2c0:	e9c4 121f 	strd	r1, r2, [r4, #124]	; 0x7c
    if (hspi->MspInitCallback == NULL)
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	d05c      	beq.n	800b382 <HAL_SPI_Init+0xfe>
    hspi->MspInitCallback(hspi);
 800b2c8:	4620      	mov	r0, r4
 800b2ca:	4798      	blx	r3
  __HAL_SPI_DISABLE(hspi);
 800b2cc:	6821      	ldr	r1, [r4, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b2ce:	68e2      	ldr	r2, [r4, #12]
  hspi->State = HAL_SPI_STATE_BUSY;
 800b2d0:	2302      	movs	r3, #2
 800b2d2:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 800b2d6:	680b      	ldr	r3, [r1, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b2d8:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
  __HAL_SPI_DISABLE(hspi);
 800b2dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b2e0:	600b      	str	r3, [r1, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b2e2:	d930      	bls.n	800b346 <HAL_SPI_Init+0xc2>
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800b2e4:	f5b2 6f70 	cmp.w	r2, #3840	; 0xf00
 800b2e8:	d143      	bne.n	800b372 <HAL_SPI_Init+0xee>
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800b2ea:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800b2ec:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	d13a      	bne.n	800b368 <HAL_SPI_Init+0xe4>
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 800b2f2:	2302      	movs	r3, #2
 800b2f4:	6323      	str	r3, [r4, #48]	; 0x30
 800b2f6:	f04f 0c00 	mov.w	ip, #0
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800b2fa:	e9d4 7604 	ldrd	r7, r6, [r4, #16]
 800b2fe:	68a5      	ldr	r5, [r4, #8]
 800b300:	6863      	ldr	r3, [r4, #4]
 800b302:	432b      	orrs	r3, r5
 800b304:	433b      	orrs	r3, r7
 800b306:	e9d4 7506 	ldrd	r7, r5, [r4, #24]
 800b30a:	4333      	orrs	r3, r6
 800b30c:	432b      	orrs	r3, r5
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 800b30e:	6b65      	ldr	r5, [r4, #52]	; 0x34
 800b310:	9501      	str	r5, [sp, #4]
 800b312:	6a65      	ldr	r5, [r4, #36]	; 0x24
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800b314:	6a26      	ldr	r6, [r4, #32]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 800b316:	432a      	orrs	r2, r5
 800b318:	9d01      	ldr	r5, [sp, #4]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800b31a:	4333      	orrs	r3, r6
 800b31c:	f407 7600 	and.w	r6, r7, #512	; 0x200
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 800b320:	0c3f      	lsrs	r7, r7, #16
 800b322:	f007 0704 	and.w	r7, r7, #4
 800b326:	4315      	orrs	r5, r2
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800b328:	4333      	orrs	r3, r6
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b32a:	2200      	movs	r2, #0
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 800b32c:	433d      	orrs	r5, r7
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800b32e:	4303      	orrs	r3, r0
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 800b330:	ea45 050c 	orr.w	r5, r5, ip
  hspi->State     = HAL_SPI_STATE_READY;
 800b334:	2601      	movs	r6, #1
  return HAL_OK;
 800b336:	4610      	mov	r0, r2
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800b338:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 800b33a:	604d      	str	r5, [r1, #4]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b33c:	6622      	str	r2, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800b33e:	f884 605d 	strb.w	r6, [r4, #93]	; 0x5d
}
 800b342:	b003      	add	sp, #12
 800b344:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800b346:	d007      	beq.n	800b358 <HAL_SPI_Init+0xd4>
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800b348:	6b20      	ldr	r0, [r4, #48]	; 0x30
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b34a:	2300      	movs	r3, #0
 800b34c:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800b34e:	b130      	cbz	r0, 800b35e <HAL_SPI_Init+0xda>
 800b350:	4618      	mov	r0, r3
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800b352:	f44f 5c80 	mov.w	ip, #4096	; 0x1000
 800b356:	e7d0      	b.n	800b2fa <HAL_SPI_Init+0x76>
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800b358:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800b35a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800b35c:	b90b      	cbnz	r3, 800b362 <HAL_SPI_Init+0xde>
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 800b35e:	2301      	movs	r3, #1
 800b360:	6323      	str	r3, [r4, #48]	; 0x30
 800b362:	f44f 5c80 	mov.w	ip, #4096	; 0x1000
 800b366:	e7c8      	b.n	800b2fa <HAL_SPI_Init+0x76>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800b368:	f04f 0c00 	mov.w	ip, #0
 800b36c:	e7c5      	b.n	800b2fa <HAL_SPI_Init+0x76>
    return HAL_ERROR;
 800b36e:	2001      	movs	r0, #1
}
 800b370:	4770      	bx	lr
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800b372:	6b20      	ldr	r0, [r4, #48]	; 0x30
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b374:	2300      	movs	r3, #0
 800b376:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800b378:	2800      	cmp	r0, #0
 800b37a:	d0ba      	beq.n	800b2f2 <HAL_SPI_Init+0x6e>
 800b37c:	4618      	mov	r0, r3
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800b37e:	469c      	mov	ip, r3
 800b380:	e7bb      	b.n	800b2fa <HAL_SPI_Init+0x76>
      hspi->MspInitCallback = HAL_SPI_MspInit; /* Legacy weak MspInit  */
 800b382:	4b0a      	ldr	r3, [pc, #40]	; (800b3ac <HAL_SPI_Init+0x128>)
 800b384:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
 800b388:	e79e      	b.n	800b2c8 <HAL_SPI_Init+0x44>
 800b38a:	bf00      	nop
 800b38c:	0800af71 	.word	0x0800af71
 800b390:	0800af75 	.word	0x0800af75
 800b394:	0800af7d 	.word	0x0800af7d
 800b398:	0800af89 	.word	0x0800af89
 800b39c:	0800af81 	.word	0x0800af81
 800b3a0:	0800af85 	.word	0x0800af85
 800b3a4:	0800af6d 	.word	0x0800af6d
 800b3a8:	0800af79 	.word	0x0800af79
 800b3ac:	0800af35 	.word	0x0800af35

0800b3b0 <HAL_SPI_RegisterCallback>:
  if (pCallback == NULL)
 800b3b0:	2a00      	cmp	r2, #0
 800b3b2:	d039      	beq.n	800b428 <HAL_SPI_RegisterCallback+0x78>
  __HAL_LOCK(hspi);
 800b3b4:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
 800b3b8:	2b01      	cmp	r3, #1
 800b3ba:	d03c      	beq.n	800b436 <HAL_SPI_RegisterCallback+0x86>
{
 800b3bc:	b430      	push	{r4, r5}
  if (HAL_SPI_STATE_READY == hspi->State)
 800b3be:	f890 405d 	ldrb.w	r4, [r0, #93]	; 0x5d
  __HAL_LOCK(hspi);
 800b3c2:	2501      	movs	r5, #1
  if (HAL_SPI_STATE_READY == hspi->State)
 800b3c4:	42ac      	cmp	r4, r5
 800b3c6:	b2e3      	uxtb	r3, r4
  __HAL_LOCK(hspi);
 800b3c8:	f880 505c 	strb.w	r5, [r0, #92]	; 0x5c
  if (HAL_SPI_STATE_READY == hspi->State)
 800b3cc:	d011      	beq.n	800b3f2 <HAL_SPI_RegisterCallback+0x42>
  else if (HAL_SPI_STATE_RESET == hspi->State)
 800b3ce:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
 800b3d2:	b91b      	cbnz	r3, 800b3dc <HAL_SPI_RegisterCallback+0x2c>
    switch (CallbackID)
 800b3d4:	2908      	cmp	r1, #8
 800b3d6:	d01e      	beq.n	800b416 <HAL_SPI_RegisterCallback+0x66>
 800b3d8:	2909      	cmp	r1, #9
 800b3da:	d013      	beq.n	800b404 <HAL_SPI_RegisterCallback+0x54>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_INVALID_CALLBACK);
 800b3dc:	6e02      	ldr	r2, [r0, #96]	; 0x60
 800b3de:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    status =  HAL_ERROR;
 800b3e2:	462b      	mov	r3, r5
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_INVALID_CALLBACK);
 800b3e4:	6602      	str	r2, [r0, #96]	; 0x60
  __HAL_UNLOCK(hspi);
 800b3e6:	2200      	movs	r2, #0
 800b3e8:	f880 205c 	strb.w	r2, [r0, #92]	; 0x5c
}
 800b3ec:	bc30      	pop	{r4, r5}
 800b3ee:	4618      	mov	r0, r3
 800b3f0:	4770      	bx	lr
    switch (CallbackID)
 800b3f2:	2909      	cmp	r1, #9
 800b3f4:	d83b      	bhi.n	800b46e <HAL_SPI_RegisterCallback+0xbe>
 800b3f6:	e8df f001 	tbb	[pc, r1]
 800b3fa:	2e31      	.short	0x2e31
 800b3fc:	3725282b 	.word	0x3725282b
 800b400:	050e2134 	.word	0x050e2134
        hspi->MspDeInitCallback = pCallback;
 800b404:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
  __HAL_UNLOCK(hspi);
 800b408:	2200      	movs	r2, #0
 800b40a:	f880 205c 	strb.w	r2, [r0, #92]	; 0x5c
  HAL_StatusTypeDef status = HAL_OK;
 800b40e:	2300      	movs	r3, #0
}
 800b410:	4618      	mov	r0, r3
 800b412:	bc30      	pop	{r4, r5}
 800b414:	4770      	bx	lr
        hspi->MspInitCallback = pCallback;
 800b416:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
  __HAL_UNLOCK(hspi);
 800b41a:	2200      	movs	r2, #0
 800b41c:	f880 205c 	strb.w	r2, [r0, #92]	; 0x5c
  HAL_StatusTypeDef status = HAL_OK;
 800b420:	2300      	movs	r3, #0
}
 800b422:	4618      	mov	r0, r3
 800b424:	bc30      	pop	{r4, r5}
 800b426:	4770      	bx	lr
    hspi->ErrorCode |= HAL_SPI_ERROR_INVALID_CALLBACK;
 800b428:	6e03      	ldr	r3, [r0, #96]	; 0x60
 800b42a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b42e:	6603      	str	r3, [r0, #96]	; 0x60
    return HAL_ERROR;
 800b430:	2301      	movs	r3, #1
}
 800b432:	4618      	mov	r0, r3
 800b434:	4770      	bx	lr
  __HAL_LOCK(hspi);
 800b436:	2302      	movs	r3, #2
}
 800b438:	4618      	mov	r0, r3
 800b43a:	4770      	bx	lr
        hspi->AbortCpltCallback = pCallback;
 800b43c:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
  HAL_StatusTypeDef status = HAL_OK;
 800b440:	2300      	movs	r3, #0
        break;
 800b442:	e7d0      	b.n	800b3e6 <HAL_SPI_RegisterCallback+0x36>
        hspi->RxHalfCpltCallback = pCallback;
 800b444:	6742      	str	r2, [r0, #116]	; 0x74
  HAL_StatusTypeDef status = HAL_OK;
 800b446:	2300      	movs	r3, #0
        break;
 800b448:	e7cd      	b.n	800b3e6 <HAL_SPI_RegisterCallback+0x36>
        hspi->TxHalfCpltCallback = pCallback;
 800b44a:	6702      	str	r2, [r0, #112]	; 0x70
  HAL_StatusTypeDef status = HAL_OK;
 800b44c:	2300      	movs	r3, #0
        break;
 800b44e:	e7ca      	b.n	800b3e6 <HAL_SPI_RegisterCallback+0x36>
        hspi->TxRxCpltCallback = pCallback;
 800b450:	66c2      	str	r2, [r0, #108]	; 0x6c
  HAL_StatusTypeDef status = HAL_OK;
 800b452:	2300      	movs	r3, #0
        break;
 800b454:	e7c7      	b.n	800b3e6 <HAL_SPI_RegisterCallback+0x36>
        hspi->RxCpltCallback = pCallback;
 800b456:	6682      	str	r2, [r0, #104]	; 0x68
  HAL_StatusTypeDef status = HAL_OK;
 800b458:	2300      	movs	r3, #0
        break;
 800b45a:	e7c4      	b.n	800b3e6 <HAL_SPI_RegisterCallback+0x36>
        hspi->TxCpltCallback = pCallback;
 800b45c:	6642      	str	r2, [r0, #100]	; 0x64
  HAL_StatusTypeDef status = HAL_OK;
 800b45e:	460b      	mov	r3, r1
        break;
 800b460:	e7c1      	b.n	800b3e6 <HAL_SPI_RegisterCallback+0x36>
        hspi->ErrorCallback = pCallback;
 800b462:	67c2      	str	r2, [r0, #124]	; 0x7c
  HAL_StatusTypeDef status = HAL_OK;
 800b464:	2300      	movs	r3, #0
        break;
 800b466:	e7be      	b.n	800b3e6 <HAL_SPI_RegisterCallback+0x36>
        hspi->TxRxHalfCpltCallback = pCallback;
 800b468:	6782      	str	r2, [r0, #120]	; 0x78
  HAL_StatusTypeDef status = HAL_OK;
 800b46a:	2300      	movs	r3, #0
        break;
 800b46c:	e7bb      	b.n	800b3e6 <HAL_SPI_RegisterCallback+0x36>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_INVALID_CALLBACK);
 800b46e:	6e02      	ldr	r2, [r0, #96]	; 0x60
 800b470:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800b474:	6602      	str	r2, [r0, #96]	; 0x60
        break;
 800b476:	e7b6      	b.n	800b3e6 <HAL_SPI_RegisterCallback+0x36>

0800b478 <HAL_SPI_Transmit>:
{
 800b478:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b47c:	4604      	mov	r4, r0
  __HAL_LOCK(hspi);
 800b47e:	f890 005c 	ldrb.w	r0, [r0, #92]	; 0x5c
 800b482:	2801      	cmp	r0, #1
{
 800b484:	b082      	sub	sp, #8
  __HAL_LOCK(hspi);
 800b486:	d075      	beq.n	800b574 <HAL_SPI_Transmit+0xfc>
 800b488:	461d      	mov	r5, r3
 800b48a:	2301      	movs	r3, #1
 800b48c:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
  tickstart = HAL_GetTick();
 800b490:	4688      	mov	r8, r1
 800b492:	4617      	mov	r7, r2
 800b494:	f7fa fdd0 	bl	8006038 <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 800b498:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 800b49c:	2b01      	cmp	r3, #1
  tickstart = HAL_GetTick();
 800b49e:	4606      	mov	r6, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 800b4a0:	b2d8      	uxtb	r0, r3
 800b4a2:	d009      	beq.n	800b4b8 <HAL_SPI_Transmit+0x40>
    errorcode = HAL_BUSY;
 800b4a4:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 800b4a6:	2201      	movs	r2, #1
  __HAL_UNLOCK(hspi);
 800b4a8:	2300      	movs	r3, #0
  hspi->State = HAL_SPI_STATE_READY;
 800b4aa:	f884 205d 	strb.w	r2, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800b4ae:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 800b4b2:	b002      	add	sp, #8
 800b4b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if ((pData == NULL) || (Size == 0U))
 800b4b8:	f1b8 0f00 	cmp.w	r8, #0
 800b4bc:	d0f3      	beq.n	800b4a6 <HAL_SPI_Transmit+0x2e>
 800b4be:	2f00      	cmp	r7, #0
 800b4c0:	d0f1      	beq.n	800b4a6 <HAL_SPI_Transmit+0x2e>
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b4c2:	68a2      	ldr	r2, [r4, #8]
    SPI_1LINE_TX(hspi);
 800b4c4:	6820      	ldr	r0, [r4, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800b4c6:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800b4ca:	2303      	movs	r3, #3
 800b4cc:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b4d0:	2300      	movs	r3, #0
 800b4d2:	6623      	str	r3, [r4, #96]	; 0x60
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b4d4:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
  hspi->TxXferCount = Size;
 800b4d8:	87e7      	strh	r7, [r4, #62]	; 0x3e
  hspi->RxXferCount = 0U;
 800b4da:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
  hspi->RxISR       = NULL;
 800b4de:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800b4e2:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800b4e4:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
    SPI_1LINE_TX(hspi);
 800b4e8:	bf08      	it	eq
 800b4ea:	6803      	ldreq	r3, [r0, #0]
  hspi->TxXferSize  = Size;
 800b4ec:	87a7      	strh	r7, [r4, #60]	; 0x3c
    SPI_1LINE_TX(hspi);
 800b4ee:	bf04      	itt	eq
 800b4f0:	f443 4380 	orreq.w	r3, r3, #16384	; 0x4000
 800b4f4:	6003      	streq	r3, [r0, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b4f6:	6802      	ldr	r2, [r0, #0]
 800b4f8:	0652      	lsls	r2, r2, #25
    SPI_1LINE_TX(hspi);
 800b4fa:	4603      	mov	r3, r0
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b4fc:	d403      	bmi.n	800b506 <HAL_SPI_Transmit+0x8e>
    __HAL_SPI_ENABLE(hspi);
 800b4fe:	6802      	ldr	r2, [r0, #0]
 800b500:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b504:	6002      	str	r2, [r0, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b506:	68e2      	ldr	r2, [r4, #12]
 800b508:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
 800b50c:	d936      	bls.n	800b57c <HAL_SPI_Transmit+0x104>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b50e:	6862      	ldr	r2, [r4, #4]
 800b510:	2a00      	cmp	r2, #0
 800b512:	f000 8098 	beq.w	800b646 <HAL_SPI_Transmit+0x1ce>
 800b516:	2f01      	cmp	r7, #1
 800b518:	f000 8095 	beq.w	800b646 <HAL_SPI_Transmit+0x1ce>
    while (hspi->TxXferCount > 0U)
 800b51c:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 800b51e:	b292      	uxth	r2, r2
 800b520:	b192      	cbz	r2, 800b548 <HAL_SPI_Transmit+0xd0>
 800b522:	1c6a      	adds	r2, r5, #1
 800b524:	d15c      	bne.n	800b5e0 <HAL_SPI_Transmit+0x168>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800b526:	6883      	ldr	r3, [r0, #8]
 800b528:	079f      	lsls	r7, r3, #30
 800b52a:	f140 8096 	bpl.w	800b65a <HAL_SPI_Transmit+0x1e2>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b52e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800b530:	f833 2b02 	ldrh.w	r2, [r3], #2
 800b534:	60c2      	str	r2, [r0, #12]
        hspi->TxXferCount--;
 800b536:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800b538:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 800b53a:	3a01      	subs	r2, #1
 800b53c:	b292      	uxth	r2, r2
 800b53e:	87e2      	strh	r2, [r4, #62]	; 0x3e
    while (hspi->TxXferCount > 0U)
 800b540:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800b542:	b29b      	uxth	r3, r3
 800b544:	2b00      	cmp	r3, #0
 800b546:	d1ee      	bne.n	800b526 <HAL_SPI_Transmit+0xae>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800b548:	4632      	mov	r2, r6
 800b54a:	4629      	mov	r1, r5
 800b54c:	4620      	mov	r0, r4
 800b54e:	f7ff fd1d 	bl	800af8c <SPI_EndRxTxTransaction>
 800b552:	b108      	cbz	r0, 800b558 <HAL_SPI_Transmit+0xe0>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800b554:	2320      	movs	r3, #32
 800b556:	6623      	str	r3, [r4, #96]	; 0x60
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800b558:	68a3      	ldr	r3, [r4, #8]
 800b55a:	b933      	cbnz	r3, 800b56a <HAL_SPI_Transmit+0xf2>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b55c:	6822      	ldr	r2, [r4, #0]
 800b55e:	9301      	str	r3, [sp, #4]
 800b560:	68d3      	ldr	r3, [r2, #12]
 800b562:	9301      	str	r3, [sp, #4]
 800b564:	6893      	ldr	r3, [r2, #8]
 800b566:	9301      	str	r3, [sp, #4]
 800b568:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b56a:	6e20      	ldr	r0, [r4, #96]	; 0x60
    errorcode = HAL_BUSY;
 800b56c:	3800      	subs	r0, #0
 800b56e:	bf18      	it	ne
 800b570:	2001      	movne	r0, #1
error:
 800b572:	e798      	b.n	800b4a6 <HAL_SPI_Transmit+0x2e>
  __HAL_LOCK(hspi);
 800b574:	2002      	movs	r0, #2
}
 800b576:	b002      	add	sp, #8
 800b578:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b57c:	6863      	ldr	r3, [r4, #4]
 800b57e:	2b00      	cmp	r3, #0
 800b580:	d053      	beq.n	800b62a <HAL_SPI_Transmit+0x1b2>
 800b582:	2f01      	cmp	r7, #1
 800b584:	d051      	beq.n	800b62a <HAL_SPI_Transmit+0x1b2>
    while (hspi->TxXferCount > 0U)
 800b586:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800b588:	b29b      	uxth	r3, r3
 800b58a:	2b00      	cmp	r3, #0
 800b58c:	d0dc      	beq.n	800b548 <HAL_SPI_Transmit+0xd0>
 800b58e:	1c68      	adds	r0, r5, #1
 800b590:	d011      	beq.n	800b5b6 <HAL_SPI_Transmit+0x13e>
 800b592:	e040      	b.n	800b616 <HAL_SPI_Transmit+0x19e>
        if (hspi->TxXferCount > 1U)
 800b594:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800b596:	b29b      	uxth	r3, r3
 800b598:	2b01      	cmp	r3, #1
 800b59a:	d967      	bls.n	800b66c <HAL_SPI_Transmit+0x1f4>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b59c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800b59e:	f831 3b02 	ldrh.w	r3, [r1], #2
 800b5a2:	60d3      	str	r3, [r2, #12]
          hspi->TxXferCount -= 2U;
 800b5a4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800b5a6:	63a1      	str	r1, [r4, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800b5a8:	3b02      	subs	r3, #2
 800b5aa:	b29b      	uxth	r3, r3
 800b5ac:	87e3      	strh	r3, [r4, #62]	; 0x3e
    while (hspi->TxXferCount > 0U)
 800b5ae:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 800b5b0:	b292      	uxth	r2, r2
 800b5b2:	2a00      	cmp	r2, #0
 800b5b4:	d0c8      	beq.n	800b548 <HAL_SPI_Transmit+0xd0>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800b5b6:	6822      	ldr	r2, [r4, #0]
 800b5b8:	6893      	ldr	r3, [r2, #8]
 800b5ba:	0799      	lsls	r1, r3, #30
 800b5bc:	d4ea      	bmi.n	800b594 <HAL_SPI_Transmit+0x11c>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b5be:	f7fa fd3b 	bl	8006038 <HAL_GetTick>
 800b5c2:	e7f4      	b.n	800b5ae <HAL_SPI_Transmit+0x136>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b5c4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800b5c6:	f832 1b02 	ldrh.w	r1, [r2], #2
 800b5ca:	60d9      	str	r1, [r3, #12]
        hspi->TxXferCount--;
 800b5cc:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800b5ce:	63a2      	str	r2, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 800b5d0:	3b01      	subs	r3, #1
 800b5d2:	b29b      	uxth	r3, r3
 800b5d4:	87e3      	strh	r3, [r4, #62]	; 0x3e
    while (hspi->TxXferCount > 0U)
 800b5d6:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800b5d8:	b29b      	uxth	r3, r3
 800b5da:	2b00      	cmp	r3, #0
 800b5dc:	d0b4      	beq.n	800b548 <HAL_SPI_Transmit+0xd0>
 800b5de:	6823      	ldr	r3, [r4, #0]
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800b5e0:	689a      	ldr	r2, [r3, #8]
 800b5e2:	0791      	lsls	r1, r2, #30
 800b5e4:	d4ee      	bmi.n	800b5c4 <HAL_SPI_Transmit+0x14c>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b5e6:	f7fa fd27 	bl	8006038 <HAL_GetTick>
 800b5ea:	1b80      	subs	r0, r0, r6
 800b5ec:	42a8      	cmp	r0, r5
 800b5ee:	d3f2      	bcc.n	800b5d6 <HAL_SPI_Transmit+0x15e>
          errorcode = HAL_TIMEOUT;
 800b5f0:	2003      	movs	r0, #3
 800b5f2:	e758      	b.n	800b4a6 <HAL_SPI_Transmit+0x2e>
        if (hspi->TxXferCount > 1U)
 800b5f4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800b5f6:	b29b      	uxth	r3, r3
 800b5f8:	2b01      	cmp	r3, #1
 800b5fa:	d942      	bls.n	800b682 <HAL_SPI_Transmit+0x20a>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b5fc:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800b5fe:	f831 3b02 	ldrh.w	r3, [r1], #2
 800b602:	60d3      	str	r3, [r2, #12]
          hspi->TxXferCount -= 2U;
 800b604:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800b606:	63a1      	str	r1, [r4, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800b608:	3b02      	subs	r3, #2
 800b60a:	b29b      	uxth	r3, r3
 800b60c:	87e3      	strh	r3, [r4, #62]	; 0x3e
    while (hspi->TxXferCount > 0U)
 800b60e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800b610:	b29b      	uxth	r3, r3
 800b612:	2b00      	cmp	r3, #0
 800b614:	d098      	beq.n	800b548 <HAL_SPI_Transmit+0xd0>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800b616:	6822      	ldr	r2, [r4, #0]
 800b618:	6893      	ldr	r3, [r2, #8]
 800b61a:	079b      	lsls	r3, r3, #30
 800b61c:	d4ea      	bmi.n	800b5f4 <HAL_SPI_Transmit+0x17c>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b61e:	f7fa fd0b 	bl	8006038 <HAL_GetTick>
 800b622:	1b80      	subs	r0, r0, r6
 800b624:	42a8      	cmp	r0, r5
 800b626:	d2e3      	bcs.n	800b5f0 <HAL_SPI_Transmit+0x178>
 800b628:	e7f1      	b.n	800b60e <HAL_SPI_Transmit+0x196>
      if (hspi->TxXferCount > 1U)
 800b62a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800b62c:	b29b      	uxth	r3, r3
 800b62e:	2b01      	cmp	r3, #1
 800b630:	d932      	bls.n	800b698 <HAL_SPI_Transmit+0x220>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b632:	4641      	mov	r1, r8
 800b634:	f831 3b02 	ldrh.w	r3, [r1], #2
 800b638:	60c3      	str	r3, [r0, #12]
        hspi->TxXferCount -= 2U;
 800b63a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800b63c:	63a1      	str	r1, [r4, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800b63e:	3b02      	subs	r3, #2
 800b640:	b29b      	uxth	r3, r3
 800b642:	87e3      	strh	r3, [r4, #62]	; 0x3e
 800b644:	e79f      	b.n	800b586 <HAL_SPI_Transmit+0x10e>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b646:	4641      	mov	r1, r8
 800b648:	f831 2b02 	ldrh.w	r2, [r1], #2
 800b64c:	60c2      	str	r2, [r0, #12]
      hspi->TxXferCount--;
 800b64e:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800b650:	63a1      	str	r1, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 800b652:	3a01      	subs	r2, #1
 800b654:	b292      	uxth	r2, r2
 800b656:	87e2      	strh	r2, [r4, #62]	; 0x3e
 800b658:	e760      	b.n	800b51c <HAL_SPI_Transmit+0xa4>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b65a:	f7fa fced 	bl	8006038 <HAL_GetTick>
    while (hspi->TxXferCount > 0U)
 800b65e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800b660:	b29b      	uxth	r3, r3
 800b662:	2b00      	cmp	r3, #0
 800b664:	f43f af70 	beq.w	800b548 <HAL_SPI_Transmit+0xd0>
 800b668:	6820      	ldr	r0, [r4, #0]
 800b66a:	e75c      	b.n	800b526 <HAL_SPI_Transmit+0xae>
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800b66c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800b66e:	781b      	ldrb	r3, [r3, #0]
 800b670:	7313      	strb	r3, [r2, #12]
          hspi->TxXferCount--;
 800b672:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
          hspi->pTxBuffPtr++;
 800b674:	6ba2      	ldr	r2, [r4, #56]	; 0x38
          hspi->TxXferCount--;
 800b676:	3b01      	subs	r3, #1
 800b678:	b29b      	uxth	r3, r3
          hspi->pTxBuffPtr++;
 800b67a:	3201      	adds	r2, #1
          hspi->TxXferCount--;
 800b67c:	87e3      	strh	r3, [r4, #62]	; 0x3e
          hspi->pTxBuffPtr++;
 800b67e:	63a2      	str	r2, [r4, #56]	; 0x38
          hspi->TxXferCount--;
 800b680:	e795      	b.n	800b5ae <HAL_SPI_Transmit+0x136>
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800b682:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800b684:	781b      	ldrb	r3, [r3, #0]
 800b686:	7313      	strb	r3, [r2, #12]
          hspi->TxXferCount--;
 800b688:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
          hspi->pTxBuffPtr++;
 800b68a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
          hspi->TxXferCount--;
 800b68c:	3b01      	subs	r3, #1
 800b68e:	b29b      	uxth	r3, r3
          hspi->pTxBuffPtr++;
 800b690:	3201      	adds	r2, #1
          hspi->TxXferCount--;
 800b692:	87e3      	strh	r3, [r4, #62]	; 0x3e
          hspi->pTxBuffPtr++;
 800b694:	63a2      	str	r2, [r4, #56]	; 0x38
          hspi->TxXferCount--;
 800b696:	e7ba      	b.n	800b60e <HAL_SPI_Transmit+0x196>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800b698:	f898 3000 	ldrb.w	r3, [r8]
 800b69c:	7303      	strb	r3, [r0, #12]
        hspi->TxXferCount--;
 800b69e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pTxBuffPtr ++;
 800b6a0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 800b6a2:	3b01      	subs	r3, #1
 800b6a4:	b29b      	uxth	r3, r3
        hspi->pTxBuffPtr ++;
 800b6a6:	3201      	adds	r2, #1
        hspi->TxXferCount--;
 800b6a8:	87e3      	strh	r3, [r4, #62]	; 0x3e
        hspi->pTxBuffPtr ++;
 800b6aa:	63a2      	str	r2, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 800b6ac:	e76b      	b.n	800b586 <HAL_SPI_Transmit+0x10e>
 800b6ae:	bf00      	nop

0800b6b0 <HAL_SPI_TransmitReceive_DMA>:
{
 800b6b0:	b570      	push	{r4, r5, r6, lr}
 800b6b2:	4604      	mov	r4, r0
  __HAL_LOCK(hspi);
 800b6b4:	f890 005c 	ldrb.w	r0, [r0, #92]	; 0x5c
 800b6b8:	2801      	cmp	r0, #1
 800b6ba:	d079      	beq.n	800b7b0 <HAL_SPI_TransmitReceive_DMA+0x100>
  tmp_state           = hspi->State;
 800b6bc:	f894 005d 	ldrb.w	r0, [r4, #93]	; 0x5d
  __HAL_LOCK(hspi);
 800b6c0:	2501      	movs	r5, #1
  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 800b6c2:	42a8      	cmp	r0, r5
  tmp_state           = hspi->State;
 800b6c4:	b2c6      	uxtb	r6, r0
  __HAL_LOCK(hspi);
 800b6c6:	f884 505c 	strb.w	r5, [r4, #92]	; 0x5c
  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 800b6ca:	d00d      	beq.n	800b6e8 <HAL_SPI_TransmitReceive_DMA+0x38>
 800b6cc:	6860      	ldr	r0, [r4, #4]
 800b6ce:	f5b0 7f82 	cmp.w	r0, #260	; 0x104
 800b6d2:	d004      	beq.n	800b6de <HAL_SPI_TransmitReceive_DMA+0x2e>
    errorcode = HAL_BUSY;
 800b6d4:	2002      	movs	r0, #2
  __HAL_UNLOCK(hspi);
 800b6d6:	2300      	movs	r3, #0
 800b6d8:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 800b6dc:	bd70      	pop	{r4, r5, r6, pc}
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800b6de:	68a0      	ldr	r0, [r4, #8]
 800b6e0:	2800      	cmp	r0, #0
 800b6e2:	d1f7      	bne.n	800b6d4 <HAL_SPI_TransmitReceive_DMA+0x24>
 800b6e4:	2e04      	cmp	r6, #4
 800b6e6:	d1f5      	bne.n	800b6d4 <HAL_SPI_TransmitReceive_DMA+0x24>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800b6e8:	2900      	cmp	r1, #0
 800b6ea:	d05f      	beq.n	800b7ac <HAL_SPI_TransmitReceive_DMA+0xfc>
 800b6ec:	2a00      	cmp	r2, #0
 800b6ee:	d05d      	beq.n	800b7ac <HAL_SPI_TransmitReceive_DMA+0xfc>
 800b6f0:	2b00      	cmp	r3, #0
 800b6f2:	d05b      	beq.n	800b7ac <HAL_SPI_TransmitReceive_DMA+0xfc>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800b6f4:	f894 005d 	ldrb.w	r0, [r4, #93]	; 0x5d
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 800b6f8:	6825      	ldr	r5, [r4, #0]
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800b6fa:	2804      	cmp	r0, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800b6fc:	bf18      	it	ne
 800b6fe:	2005      	movne	r0, #5
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b700:	f04f 0600 	mov.w	r6, #0
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800b704:	bf18      	it	ne
 800b706:	f884 005d 	strbne.w	r0, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b70a:	6626      	str	r6, [r4, #96]	; 0x60
  hspi->TxXferCount = Size;
 800b70c:	87e3      	strh	r3, [r4, #62]	; 0x3e
  hspi->RxXferCount = Size;
 800b70e:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 800b712:	6868      	ldr	r0, [r5, #4]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800b714:	63a1      	str	r1, [r4, #56]	; 0x38
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 800b716:	f420 41c0 	bic.w	r1, r0, #24576	; 0x6000
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b71a:	68e0      	ldr	r0, [r4, #12]
  hspi->TxXferSize  = Size;
 800b71c:	87a3      	strh	r3, [r4, #60]	; 0x3c
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b71e:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
  hspi->TxISR       = NULL;
 800b722:	e9c4 6613 	strd	r6, r6, [r4, #76]	; 0x4c
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800b726:	6422      	str	r2, [r4, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800b728:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 800b72c:	6069      	str	r1, [r5, #4]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b72e:	d94a      	bls.n	800b7c6 <HAL_SPI_TransmitReceive_DMA+0x116>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800b730:	686b      	ldr	r3, [r5, #4]
 800b732:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b734:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b738:	606b      	str	r3, [r5, #4]
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800b73a:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 800b73e:	2b04      	cmp	r3, #4
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800b740:	bf07      	ittee	eq
 800b742:	4942      	ldreq	r1, [pc, #264]	; (800b84c <HAL_SPI_TransmitReceive_DMA+0x19c>)
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 800b744:	4b42      	ldreq	r3, [pc, #264]	; (800b850 <HAL_SPI_TransmitReceive_DMA+0x1a0>)
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 800b746:	4943      	ldrne	r1, [pc, #268]	; (800b854 <HAL_SPI_TransmitReceive_DMA+0x1a4>)
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 800b748:	4b43      	ldrne	r3, [pc, #268]	; (800b858 <HAL_SPI_TransmitReceive_DMA+0x1a8>)
 800b74a:	e9c0 310b 	strd	r3, r1, [r0, #44]	; 0x2c
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr, hspi->RxXferCount))
 800b74e:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800b752:	4942      	ldr	r1, [pc, #264]	; (800b85c <HAL_SPI_TransmitReceive_DMA+0x1ac>)
 800b754:	6341      	str	r1, [r0, #52]	; 0x34
  hspi->hdmarx->XferAbortCallback = NULL;
 800b756:	2600      	movs	r6, #0
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr, hspi->RxXferCount))
 800b758:	f105 010c 	add.w	r1, r5, #12
 800b75c:	b29b      	uxth	r3, r3
  hspi->hdmarx->XferAbortCallback = NULL;
 800b75e:	6386      	str	r6, [r0, #56]	; 0x38
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr, hspi->RxXferCount))
 800b760:	f7fb fb00 	bl	8006d64 <HAL_DMA_Start_IT>
 800b764:	bb30      	cbnz	r0, 800b7b4 <HAL_SPI_TransmitReceive_DMA+0x104>
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800b766:	6822      	ldr	r2, [r4, #0]
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 800b768:	6d65      	ldr	r5, [r4, #84]	; 0x54
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800b76a:	6853      	ldr	r3, [r2, #4]
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR, hspi->TxXferCount))
 800b76c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800b76e:	f043 0301 	orr.w	r3, r3, #1
 800b772:	6053      	str	r3, [r2, #4]
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR, hspi->TxXferCount))
 800b774:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 800b776:	6328      	str	r0, [r5, #48]	; 0x30
  hspi->hdmatx->XferAbortCallback    = NULL;
 800b778:	e9c5 000d 	strd	r0, r0, [r5, #52]	; 0x34
  hspi->hdmatx->XferCpltCallback     = NULL;
 800b77c:	62e8      	str	r0, [r5, #44]	; 0x2c
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR, hspi->TxXferCount))
 800b77e:	320c      	adds	r2, #12
 800b780:	b29b      	uxth	r3, r3
 800b782:	4628      	mov	r0, r5
 800b784:	f7fb faee 	bl	8006d64 <HAL_DMA_Start_IT>
 800b788:	b9a0      	cbnz	r0, 800b7b4 <HAL_SPI_TransmitReceive_DMA+0x104>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b78a:	6823      	ldr	r3, [r4, #0]
 800b78c:	681a      	ldr	r2, [r3, #0]
 800b78e:	0652      	lsls	r2, r2, #25
 800b790:	d403      	bmi.n	800b79a <HAL_SPI_TransmitReceive_DMA+0xea>
    __HAL_SPI_ENABLE(hspi);
 800b792:	681a      	ldr	r2, [r3, #0]
 800b794:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b798:	601a      	str	r2, [r3, #0]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800b79a:	685a      	ldr	r2, [r3, #4]
 800b79c:	f042 0220 	orr.w	r2, r2, #32
 800b7a0:	605a      	str	r2, [r3, #4]
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800b7a2:	685a      	ldr	r2, [r3, #4]
 800b7a4:	f042 0202 	orr.w	r2, r2, #2
 800b7a8:	605a      	str	r2, [r3, #4]
 800b7aa:	e794      	b.n	800b6d6 <HAL_SPI_TransmitReceive_DMA+0x26>
    errorcode = HAL_ERROR;
 800b7ac:	2001      	movs	r0, #1
 800b7ae:	e792      	b.n	800b6d6 <HAL_SPI_TransmitReceive_DMA+0x26>
  __HAL_LOCK(hspi);
 800b7b0:	2002      	movs	r0, #2
}
 800b7b2:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800b7b4:	6e23      	ldr	r3, [r4, #96]	; 0x60
    hspi->State = HAL_SPI_STATE_READY;
 800b7b6:	2201      	movs	r2, #1
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800b7b8:	f043 0310 	orr.w	r3, r3, #16
 800b7bc:	6623      	str	r3, [r4, #96]	; 0x60
    errorcode = HAL_ERROR;
 800b7be:	4610      	mov	r0, r2
    hspi->State = HAL_SPI_STATE_READY;
 800b7c0:	f884 205d 	strb.w	r2, [r4, #93]	; 0x5d
    goto error;
 800b7c4:	e787      	b.n	800b6d6 <HAL_SPI_TransmitReceive_DMA+0x26>
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800b7c6:	6d60      	ldr	r0, [r4, #84]	; 0x54
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800b7c8:	6869      	ldr	r1, [r5, #4]
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800b7ca:	6980      	ldr	r0, [r0, #24]
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800b7cc:	f441 5180 	orr.w	r1, r1, #4096	; 0x1000
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800b7d0:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800b7d4:	6069      	str	r1, [r5, #4]
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800b7d6:	d018      	beq.n	800b80a <HAL_SPI_TransmitReceive_DMA+0x15a>
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800b7d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b7da:	6983      	ldr	r3, [r0, #24]
 800b7dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b7e0:	d1ab      	bne.n	800b73a <HAL_SPI_TransmitReceive_DMA+0x8a>
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800b7e2:	686b      	ldr	r3, [r5, #4]
 800b7e4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b7e8:	606b      	str	r3, [r5, #4]
      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 800b7ea:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800b7ee:	f013 0f01 	tst.w	r3, #1
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800b7f2:	686b      	ldr	r3, [r5, #4]
      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 800b7f4:	d115      	bne.n	800b822 <HAL_SPI_TransmitReceive_DMA+0x172>
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800b7f6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b7fa:	606b      	str	r3, [r5, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 800b7fc:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800b800:	f3c3 034e 	ubfx	r3, r3, #1, #15
 800b804:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
 800b808:	e797      	b.n	800b73a <HAL_SPI_TransmitReceive_DMA+0x8a>
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 800b80a:	f013 0f01 	tst.w	r3, #1
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800b80e:	686b      	ldr	r3, [r5, #4]
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 800b810:	d112      	bne.n	800b838 <HAL_SPI_TransmitReceive_DMA+0x188>
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800b812:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b816:	606b      	str	r3, [r5, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 800b818:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800b81a:	f3c3 034e 	ubfx	r3, r3, #1, #15
 800b81e:	87e3      	strh	r3, [r4, #62]	; 0x3e
 800b820:	e7da      	b.n	800b7d8 <HAL_SPI_TransmitReceive_DMA+0x128>
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800b822:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800b826:	606b      	str	r3, [r5, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 800b828:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800b82c:	f3c3 034e 	ubfx	r3, r3, #1, #15
 800b830:	3301      	adds	r3, #1
 800b832:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
 800b836:	e780      	b.n	800b73a <HAL_SPI_TransmitReceive_DMA+0x8a>
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800b838:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b83c:	606b      	str	r3, [r5, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 800b83e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800b840:	f3c3 034e 	ubfx	r3, r3, #1, #15
 800b844:	3301      	adds	r3, #1
 800b846:	87e3      	strh	r3, [r4, #62]	; 0x3e
 800b848:	e7c6      	b.n	800b7d8 <HAL_SPI_TransmitReceive_DMA+0x128>
 800b84a:	bf00      	nop
 800b84c:	0800af39 	.word	0x0800af39
 800b850:	0800b22d 	.word	0x0800b22d
 800b854:	0800af41 	.word	0x0800af41
 800b858:	0800b0fd 	.word	0x0800b0fd
 800b85c:	0800af49 	.word	0x0800af49

0800b860 <HAL_TIM_Base_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800b860:	4770      	bx	lr
 800b862:	bf00      	nop

0800b864 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 800b864:	2800      	cmp	r0, #0
 800b866:	d06b      	beq.n	800b940 <HAL_TIM_Base_Init+0xdc>
{
 800b868:	b538      	push	{r3, r4, r5, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 800b86a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800b86e:	4604      	mov	r4, r0
 800b870:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800b874:	2b00      	cmp	r3, #0
 800b876:	d05b      	beq.n	800b930 <HAL_TIM_Base_Init+0xcc>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b878:	6822      	ldr	r2, [r4, #0]
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b87a:	4932      	ldr	r1, [pc, #200]	; (800b944 <HAL_TIM_Base_Init+0xe0>)
  htim->State = HAL_TIM_STATE_BUSY;
 800b87c:	2302      	movs	r3, #2
 800b87e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b882:	428a      	cmp	r2, r1
  tmpcr1 = TIMx->CR1;
 800b884:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b886:	d03f      	beq.n	800b908 <HAL_TIM_Base_Init+0xa4>
 800b888:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 800b88c:	d025      	beq.n	800b8da <HAL_TIM_Base_Init+0x76>
 800b88e:	f5a1 3194 	sub.w	r1, r1, #75776	; 0x12800
 800b892:	428a      	cmp	r2, r1
 800b894:	d021      	beq.n	800b8da <HAL_TIM_Base_Init+0x76>
 800b896:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800b89a:	428a      	cmp	r2, r1
 800b89c:	d01d      	beq.n	800b8da <HAL_TIM_Base_Init+0x76>
 800b89e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800b8a2:	428a      	cmp	r2, r1
 800b8a4:	d019      	beq.n	800b8da <HAL_TIM_Base_Init+0x76>
 800b8a6:	f501 3194 	add.w	r1, r1, #75776	; 0x12800
 800b8aa:	428a      	cmp	r2, r1
 800b8ac:	d02c      	beq.n	800b908 <HAL_TIM_Base_Init+0xa4>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b8ae:	f501 6140 	add.w	r1, r1, #3072	; 0xc00
 800b8b2:	428a      	cmp	r2, r1
 800b8b4:	d041      	beq.n	800b93a <HAL_TIM_Base_Init+0xd6>
 800b8b6:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800b8ba:	428a      	cmp	r2, r1
 800b8bc:	d03d      	beq.n	800b93a <HAL_TIM_Base_Init+0xd6>
 800b8be:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800b8c2:	428a      	cmp	r2, r1
 800b8c4:	d039      	beq.n	800b93a <HAL_TIM_Base_Init+0xd6>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b8c6:	69a5      	ldr	r5, [r4, #24]

  TIMx->CR1 = tmpcr1;

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b8c8:	68e0      	ldr	r0, [r4, #12]

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b8ca:	6861      	ldr	r1, [r4, #4]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b8cc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b8d0:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 800b8d2:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b8d4:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800b8d6:	6291      	str	r1, [r2, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b8d8:	e010      	b.n	800b8fc <HAL_TIM_Base_Init+0x98>
    tmpcr1 |= Structure->CounterMode;
 800b8da:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b8dc:	6925      	ldr	r5, [r4, #16]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b8de:	68e0      	ldr	r0, [r4, #12]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b8e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800b8e4:	430b      	orrs	r3, r1
    tmpcr1 &= ~TIM_CR1_CKD;
 800b8e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b8ea:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b8ec:	432b      	orrs	r3, r5
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b8ee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b8f2:	430b      	orrs	r3, r1
  TIMx->PSC = Structure->Prescaler;
 800b8f4:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 800b8f6:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b8f8:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800b8fa:	6291      	str	r1, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b8fc:	2301      	movs	r3, #1
 800b8fe:	6153      	str	r3, [r2, #20]
  htim->State = HAL_TIM_STATE_READY;
 800b900:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800b904:	2000      	movs	r0, #0
}
 800b906:	bd38      	pop	{r3, r4, r5, pc}
    tmpcr1 |= Structure->CounterMode;
 800b908:	68a5      	ldr	r5, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b90a:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b90c:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b90e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800b912:	432b      	orrs	r3, r5
    tmpcr1 &= ~TIM_CR1_CKD;
 800b914:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b918:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b91a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b91e:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 800b920:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b922:	68e3      	ldr	r3, [r4, #12]
 800b924:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800b926:	6863      	ldr	r3, [r4, #4]
 800b928:	6293      	str	r3, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 800b92a:	6963      	ldr	r3, [r4, #20]
 800b92c:	6313      	str	r3, [r2, #48]	; 0x30
 800b92e:	e7e5      	b.n	800b8fc <HAL_TIM_Base_Init+0x98>
    htim->Lock = HAL_UNLOCKED;
 800b930:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 800b934:	f7ff ff94 	bl	800b860 <HAL_TIM_Base_MspInit>
 800b938:	e79e      	b.n	800b878 <HAL_TIM_Base_Init+0x14>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b93a:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b93c:	69a1      	ldr	r1, [r4, #24]
 800b93e:	e7e9      	b.n	800b914 <HAL_TIM_Base_Init+0xb0>
    return HAL_ERROR;
 800b940:	2001      	movs	r0, #1
}
 800b942:	4770      	bx	lr
 800b944:	40012c00 	.word	0x40012c00

0800b948 <HAL_TIM_Base_Start>:
  htim->State = HAL_TIM_STATE_BUSY;
 800b948:	2302      	movs	r3, #2
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b94a:	6802      	ldr	r2, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 800b94c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b950:	6891      	ldr	r1, [r2, #8]
 800b952:	4b08      	ldr	r3, [pc, #32]	; (800b974 <HAL_TIM_Base_Start+0x2c>)
 800b954:	400b      	ands	r3, r1
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b956:	2b06      	cmp	r3, #6
 800b958:	d006      	beq.n	800b968 <HAL_TIM_Base_Start+0x20>
 800b95a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b95e:	d003      	beq.n	800b968 <HAL_TIM_Base_Start+0x20>
    __HAL_TIM_ENABLE(htim);
 800b960:	6813      	ldr	r3, [r2, #0]
 800b962:	f043 0301 	orr.w	r3, r3, #1
 800b966:	6013      	str	r3, [r2, #0]
  htim->State = HAL_TIM_STATE_READY;
 800b968:	2301      	movs	r3, #1
 800b96a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
}
 800b96e:	2000      	movs	r0, #0
 800b970:	4770      	bx	lr
 800b972:	bf00      	nop
 800b974:	00010007 	.word	0x00010007

0800b978 <HAL_TIM_Base_Stop>:
  htim->State = HAL_TIM_STATE_BUSY;
 800b978:	2202      	movs	r2, #2
  __HAL_TIM_DISABLE(htim);
 800b97a:	6803      	ldr	r3, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 800b97c:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_TIM_DISABLE(htim);
 800b980:	6a19      	ldr	r1, [r3, #32]
 800b982:	f241 1211 	movw	r2, #4369	; 0x1111
 800b986:	4211      	tst	r1, r2
 800b988:	d108      	bne.n	800b99c <HAL_TIM_Base_Stop+0x24>
 800b98a:	6a19      	ldr	r1, [r3, #32]
 800b98c:	f240 4244 	movw	r2, #1092	; 0x444
 800b990:	4211      	tst	r1, r2
 800b992:	d103      	bne.n	800b99c <HAL_TIM_Base_Stop+0x24>
 800b994:	681a      	ldr	r2, [r3, #0]
 800b996:	f022 0201 	bic.w	r2, r2, #1
 800b99a:	601a      	str	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 800b99c:	2301      	movs	r3, #1
 800b99e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
}
 800b9a2:	2000      	movs	r0, #0
 800b9a4:	4770      	bx	lr
 800b9a6:	bf00      	nop

0800b9a8 <HAL_TIM_Base_Start_IT>:
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b9a8:	6803      	ldr	r3, [r0, #0]
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b9aa:	4a09      	ldr	r2, [pc, #36]	; (800b9d0 <HAL_TIM_Base_Start_IT+0x28>)
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b9ac:	68d9      	ldr	r1, [r3, #12]
 800b9ae:	f041 0101 	orr.w	r1, r1, #1
 800b9b2:	60d9      	str	r1, [r3, #12]
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b9b4:	6899      	ldr	r1, [r3, #8]
 800b9b6:	400a      	ands	r2, r1
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b9b8:	2a06      	cmp	r2, #6
 800b9ba:	d006      	beq.n	800b9ca <HAL_TIM_Base_Start_IT+0x22>
 800b9bc:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800b9c0:	d003      	beq.n	800b9ca <HAL_TIM_Base_Start_IT+0x22>
    __HAL_TIM_ENABLE(htim);
 800b9c2:	681a      	ldr	r2, [r3, #0]
 800b9c4:	f042 0201 	orr.w	r2, r2, #1
 800b9c8:	601a      	str	r2, [r3, #0]
}
 800b9ca:	2000      	movs	r0, #0
 800b9cc:	4770      	bx	lr
 800b9ce:	bf00      	nop
 800b9d0:	00010007 	.word	0x00010007

0800b9d4 <HAL_TIM_Base_Stop_IT>:
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800b9d4:	6803      	ldr	r3, [r0, #0]
 800b9d6:	68da      	ldr	r2, [r3, #12]
 800b9d8:	f022 0201 	bic.w	r2, r2, #1
 800b9dc:	60da      	str	r2, [r3, #12]
  __HAL_TIM_DISABLE(htim);
 800b9de:	6a1a      	ldr	r2, [r3, #32]
 800b9e0:	f241 1111 	movw	r1, #4369	; 0x1111
 800b9e4:	420a      	tst	r2, r1
 800b9e6:	d108      	bne.n	800b9fa <HAL_TIM_Base_Stop_IT+0x26>
 800b9e8:	6a19      	ldr	r1, [r3, #32]
 800b9ea:	f240 4244 	movw	r2, #1092	; 0x444
 800b9ee:	4211      	tst	r1, r2
 800b9f0:	d103      	bne.n	800b9fa <HAL_TIM_Base_Stop_IT+0x26>
 800b9f2:	681a      	ldr	r2, [r3, #0]
 800b9f4:	f022 0201 	bic.w	r2, r2, #1
 800b9f8:	601a      	str	r2, [r3, #0]
}
 800b9fa:	2000      	movs	r0, #0
 800b9fc:	4770      	bx	lr
 800b9fe:	bf00      	nop

0800ba00 <HAL_TIM_OC_DelayElapsedCallback>:
 800ba00:	4770      	bx	lr
 800ba02:	bf00      	nop

0800ba04 <HAL_TIM_PWM_PulseFinishedCallback>:
 800ba04:	4770      	bx	lr
 800ba06:	bf00      	nop

0800ba08 <HAL_TIM_TriggerCallback>:
 800ba08:	4770      	bx	lr
 800ba0a:	bf00      	nop

0800ba0c <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800ba0c:	6803      	ldr	r3, [r0, #0]
 800ba0e:	691a      	ldr	r2, [r3, #16]
 800ba10:	0791      	lsls	r1, r2, #30
{
 800ba12:	b510      	push	{r4, lr}
 800ba14:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800ba16:	d502      	bpl.n	800ba1e <HAL_TIM_IRQHandler+0x12>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800ba18:	68da      	ldr	r2, [r3, #12]
 800ba1a:	0792      	lsls	r2, r2, #30
 800ba1c:	d468      	bmi.n	800baf0 <HAL_TIM_IRQHandler+0xe4>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800ba1e:	691a      	ldr	r2, [r3, #16]
 800ba20:	0752      	lsls	r2, r2, #29
 800ba22:	d502      	bpl.n	800ba2a <HAL_TIM_IRQHandler+0x1e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800ba24:	68da      	ldr	r2, [r3, #12]
 800ba26:	0750      	lsls	r0, r2, #29
 800ba28:	d44f      	bmi.n	800baca <HAL_TIM_IRQHandler+0xbe>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800ba2a:	691a      	ldr	r2, [r3, #16]
 800ba2c:	0711      	lsls	r1, r2, #28
 800ba2e:	d502      	bpl.n	800ba36 <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800ba30:	68da      	ldr	r2, [r3, #12]
 800ba32:	0712      	lsls	r2, r2, #28
 800ba34:	d437      	bmi.n	800baa6 <HAL_TIM_IRQHandler+0x9a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800ba36:	691a      	ldr	r2, [r3, #16]
 800ba38:	06d0      	lsls	r0, r2, #27
 800ba3a:	d502      	bpl.n	800ba42 <HAL_TIM_IRQHandler+0x36>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800ba3c:	68da      	ldr	r2, [r3, #12]
 800ba3e:	06d1      	lsls	r1, r2, #27
 800ba40:	d41e      	bmi.n	800ba80 <HAL_TIM_IRQHandler+0x74>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800ba42:	691a      	ldr	r2, [r3, #16]
 800ba44:	07d2      	lsls	r2, r2, #31
 800ba46:	d502      	bpl.n	800ba4e <HAL_TIM_IRQHandler+0x42>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800ba48:	68da      	ldr	r2, [r3, #12]
 800ba4a:	07d0      	lsls	r0, r2, #31
 800ba4c:	d469      	bmi.n	800bb22 <HAL_TIM_IRQHandler+0x116>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800ba4e:	691a      	ldr	r2, [r3, #16]
 800ba50:	0611      	lsls	r1, r2, #24
 800ba52:	d502      	bpl.n	800ba5a <HAL_TIM_IRQHandler+0x4e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800ba54:	68da      	ldr	r2, [r3, #12]
 800ba56:	0612      	lsls	r2, r2, #24
 800ba58:	d46b      	bmi.n	800bb32 <HAL_TIM_IRQHandler+0x126>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800ba5a:	691a      	ldr	r2, [r3, #16]
 800ba5c:	05d0      	lsls	r0, r2, #23
 800ba5e:	d502      	bpl.n	800ba66 <HAL_TIM_IRQHandler+0x5a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800ba60:	68da      	ldr	r2, [r3, #12]
 800ba62:	0611      	lsls	r1, r2, #24
 800ba64:	d46d      	bmi.n	800bb42 <HAL_TIM_IRQHandler+0x136>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800ba66:	691a      	ldr	r2, [r3, #16]
 800ba68:	0652      	lsls	r2, r2, #25
 800ba6a:	d502      	bpl.n	800ba72 <HAL_TIM_IRQHandler+0x66>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800ba6c:	68da      	ldr	r2, [r3, #12]
 800ba6e:	0650      	lsls	r0, r2, #25
 800ba70:	d46f      	bmi.n	800bb52 <HAL_TIM_IRQHandler+0x146>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800ba72:	691a      	ldr	r2, [r3, #16]
 800ba74:	0691      	lsls	r1, r2, #26
 800ba76:	d502      	bpl.n	800ba7e <HAL_TIM_IRQHandler+0x72>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800ba78:	68da      	ldr	r2, [r3, #12]
 800ba7a:	0692      	lsls	r2, r2, #26
 800ba7c:	d449      	bmi.n	800bb12 <HAL_TIM_IRQHandler+0x106>
}
 800ba7e:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800ba80:	f06f 0110 	mvn.w	r1, #16
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ba84:	2208      	movs	r2, #8
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800ba86:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ba88:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800ba8a:	69db      	ldr	r3, [r3, #28]
 800ba8c:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 800ba90:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800ba92:	d16f      	bne.n	800bb74 <HAL_TIM_IRQHandler+0x168>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ba94:	f7ff ffb4 	bl	800ba00 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ba98:	4620      	mov	r0, r4
 800ba9a:	f7ff ffb3 	bl	800ba04 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ba9e:	2200      	movs	r2, #0
 800baa0:	6823      	ldr	r3, [r4, #0]
 800baa2:	7722      	strb	r2, [r4, #28]
 800baa4:	e7cd      	b.n	800ba42 <HAL_TIM_IRQHandler+0x36>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800baa6:	f06f 0108 	mvn.w	r1, #8
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800baaa:	2204      	movs	r2, #4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800baac:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800baae:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800bab0:	69db      	ldr	r3, [r3, #28]
 800bab2:	079b      	lsls	r3, r3, #30
        HAL_TIM_IC_CaptureCallback(htim);
 800bab4:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800bab6:	d15a      	bne.n	800bb6e <HAL_TIM_IRQHandler+0x162>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bab8:	f7ff ffa2 	bl	800ba00 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800babc:	4620      	mov	r0, r4
 800babe:	f7ff ffa1 	bl	800ba04 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bac2:	2200      	movs	r2, #0
 800bac4:	6823      	ldr	r3, [r4, #0]
 800bac6:	7722      	strb	r2, [r4, #28]
 800bac8:	e7b5      	b.n	800ba36 <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800baca:	f06f 0104 	mvn.w	r1, #4
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800bace:	2202      	movs	r2, #2
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800bad0:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800bad2:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800bad4:	699b      	ldr	r3, [r3, #24]
 800bad6:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 800bada:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800badc:	d144      	bne.n	800bb68 <HAL_TIM_IRQHandler+0x15c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bade:	f7ff ff8f 	bl	800ba00 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bae2:	4620      	mov	r0, r4
 800bae4:	f7ff ff8e 	bl	800ba04 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bae8:	2200      	movs	r2, #0
 800baea:	6823      	ldr	r3, [r4, #0]
 800baec:	7722      	strb	r2, [r4, #28]
 800baee:	e79c      	b.n	800ba2a <HAL_TIM_IRQHandler+0x1e>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800baf0:	f06f 0102 	mvn.w	r1, #2
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800baf4:	2201      	movs	r2, #1
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800baf6:	6119      	str	r1, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800baf8:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800bafa:	699b      	ldr	r3, [r3, #24]
 800bafc:	0799      	lsls	r1, r3, #30
 800bafe:	d130      	bne.n	800bb62 <HAL_TIM_IRQHandler+0x156>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800bb00:	f7ff ff7e 	bl	800ba00 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bb04:	4620      	mov	r0, r4
 800bb06:	f7ff ff7d 	bl	800ba04 <HAL_TIM_PWM_PulseFinishedCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bb0a:	2200      	movs	r2, #0
 800bb0c:	6823      	ldr	r3, [r4, #0]
 800bb0e:	7722      	strb	r2, [r4, #28]
 800bb10:	e785      	b.n	800ba1e <HAL_TIM_IRQHandler+0x12>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800bb12:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 800bb16:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800bb18:	611a      	str	r2, [r3, #16]
}
 800bb1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 800bb1e:	f000 b875 	b.w	800bc0c <HAL_TIMEx_CommutCallback>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800bb22:	f06f 0201 	mvn.w	r2, #1
 800bb26:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800bb28:	4620      	mov	r0, r4
 800bb2a:	f7f9 ff01 	bl	8005930 <HAL_TIM_PeriodElapsedCallback>
 800bb2e:	6823      	ldr	r3, [r4, #0]
 800bb30:	e78d      	b.n	800ba4e <HAL_TIM_IRQHandler+0x42>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800bb32:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800bb36:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800bb38:	4620      	mov	r0, r4
 800bb3a:	f000 f869 	bl	800bc10 <HAL_TIMEx_BreakCallback>
 800bb3e:	6823      	ldr	r3, [r4, #0]
 800bb40:	e78b      	b.n	800ba5a <HAL_TIM_IRQHandler+0x4e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800bb42:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800bb46:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 800bb48:	4620      	mov	r0, r4
 800bb4a:	f000 f863 	bl	800bc14 <HAL_TIMEx_Break2Callback>
 800bb4e:	6823      	ldr	r3, [r4, #0]
 800bb50:	e789      	b.n	800ba66 <HAL_TIM_IRQHandler+0x5a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800bb52:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800bb56:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800bb58:	4620      	mov	r0, r4
 800bb5a:	f7ff ff55 	bl	800ba08 <HAL_TIM_TriggerCallback>
 800bb5e:	6823      	ldr	r3, [r4, #0]
 800bb60:	e787      	b.n	800ba72 <HAL_TIM_IRQHandler+0x66>
          HAL_TIM_IC_CaptureCallback(htim);
 800bb62:	f7f9 ff63 	bl	8005a2c <HAL_TIM_IC_CaptureCallback>
 800bb66:	e7d0      	b.n	800bb0a <HAL_TIM_IRQHandler+0xfe>
        HAL_TIM_IC_CaptureCallback(htim);
 800bb68:	f7f9 ff60 	bl	8005a2c <HAL_TIM_IC_CaptureCallback>
 800bb6c:	e7bc      	b.n	800bae8 <HAL_TIM_IRQHandler+0xdc>
        HAL_TIM_IC_CaptureCallback(htim);
 800bb6e:	f7f9 ff5d 	bl	8005a2c <HAL_TIM_IC_CaptureCallback>
 800bb72:	e7a6      	b.n	800bac2 <HAL_TIM_IRQHandler+0xb6>
        HAL_TIM_IC_CaptureCallback(htim);
 800bb74:	f7f9 ff5a 	bl	8005a2c <HAL_TIM_IC_CaptureCallback>
 800bb78:	e791      	b.n	800ba9e <HAL_TIM_IRQHandler+0x92>
 800bb7a:	bf00      	nop

0800bb7c <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800bb7c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800bb80:	2b01      	cmp	r3, #1
 800bb82:	d03c      	beq.n	800bbfe <HAL_TIMEx_MasterConfigSynchronization+0x82>
{
 800bb84:	b470      	push	{r4, r5, r6}

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800bb86:	6802      	ldr	r2, [r0, #0]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800bb88:	4c1e      	ldr	r4, [pc, #120]	; (800bc04 <HAL_TIMEx_MasterConfigSynchronization+0x88>)
  htim->State = HAL_TIM_STATE_BUSY;
 800bb8a:	2302      	movs	r3, #2
 800bb8c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800bb90:	42a2      	cmp	r2, r4
  tmpcr2 = htim->Instance->CR2;
 800bb92:	6853      	ldr	r3, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;
 800bb94:	6895      	ldr	r5, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800bb96:	d028      	beq.n	800bbea <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 800bb98:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 800bb9c:	42a2      	cmp	r2, r4
 800bb9e:	d024      	beq.n	800bbea <HAL_TIMEx_MasterConfigSynchronization+0x6e>
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800bba0:	680c      	ldr	r4, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 800bba2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800bba6:	4323      	orrs	r3, r4

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bba8:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
  htim->Instance->CR2 = tmpcr2;
 800bbac:	6053      	str	r3, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bbae:	d00e      	beq.n	800bbce <HAL_TIMEx_MasterConfigSynchronization+0x52>
 800bbb0:	4b15      	ldr	r3, [pc, #84]	; (800bc08 <HAL_TIMEx_MasterConfigSynchronization+0x8c>)
 800bbb2:	429a      	cmp	r2, r3
 800bbb4:	d00b      	beq.n	800bbce <HAL_TIMEx_MasterConfigSynchronization+0x52>
 800bbb6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800bbba:	429a      	cmp	r2, r3
 800bbbc:	d007      	beq.n	800bbce <HAL_TIMEx_MasterConfigSynchronization+0x52>
 800bbbe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800bbc2:	429a      	cmp	r2, r3
 800bbc4:	d003      	beq.n	800bbce <HAL_TIMEx_MasterConfigSynchronization+0x52>
 800bbc6:	f503 339a 	add.w	r3, r3, #78848	; 0x13400
 800bbca:	429a      	cmp	r2, r3
 800bbcc:	d104      	bne.n	800bbd8 <HAL_TIMEx_MasterConfigSynchronization+0x5c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800bbce:	688b      	ldr	r3, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 800bbd0:	f025 0580 	bic.w	r5, r5, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800bbd4:	431d      	orrs	r5, r3

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800bbd6:	6095      	str	r5, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 800bbd8:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 800bbda:	2201      	movs	r2, #1
 800bbdc:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800bbe0:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
}
 800bbe4:	bc70      	pop	{r4, r5, r6}
  return HAL_OK;
 800bbe6:	4618      	mov	r0, r3
}
 800bbe8:	4770      	bx	lr
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800bbea:	e9d1 4600 	ldrd	r4, r6, [r1]
    tmpcr2 &= ~TIM_CR2_MMS2;
 800bbee:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800bbf2:	4333      	orrs	r3, r6
  tmpcr2 &= ~TIM_CR2_MMS;
 800bbf4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800bbf8:	4323      	orrs	r3, r4
  htim->Instance->CR2 = tmpcr2;
 800bbfa:	6053      	str	r3, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bbfc:	e7e7      	b.n	800bbce <HAL_TIMEx_MasterConfigSynchronization+0x52>
  __HAL_LOCK(htim);
 800bbfe:	2002      	movs	r0, #2
}
 800bc00:	4770      	bx	lr
 800bc02:	bf00      	nop
 800bc04:	40012c00 	.word	0x40012c00
 800bc08:	40000400 	.word	0x40000400

0800bc0c <HAL_TIMEx_CommutCallback>:
 800bc0c:	4770      	bx	lr
 800bc0e:	bf00      	nop

0800bc10 <HAL_TIMEx_BreakCallback>:
 800bc10:	4770      	bx	lr
 800bc12:	bf00      	nop

0800bc14 <HAL_TIMEx_Break2Callback>:
 800bc14:	4770      	bx	lr
 800bc16:	bf00      	nop

0800bc18 <SDMMC_Init>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Init SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800bc18:	b084      	sub	sp, #16
 800bc1a:	b430      	push	{r4, r5}
 800bc1c:	ac03      	add	r4, sp, #12
 800bc1e:	e884 000e 	stmia.w	r4, {r1, r2, r3}
  /* Set SDMMC configuration parameters */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  tmpreg |= Init.ClockBypass;
#endif
  tmpreg |= (Init.ClockEdge           |\
             Init.ClockPowerSave      |\
 800bc22:	e9dd 5204 	ldrd	r5, r2, [sp, #16]
  tmpreg |= (Init.ClockEdge           |\
 800bc26:	460b      	mov	r3, r1
 800bc28:	432b      	orrs	r3, r5
             Init.BusWide             |\
             Init.HardwareFlowControl |\
 800bc2a:	e9dd 4106 	ldrd	r4, r1, [sp, #24]
             Init.ClockDiv
             );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800bc2e:	6845      	ldr	r5, [r0, #4]
             Init.ClockPowerSave      |\
 800bc30:	4313      	orrs	r3, r2
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800bc32:	4a05      	ldr	r2, [pc, #20]	; (800bc48 <SDMMC_Init+0x30>)
             Init.BusWide             |\
 800bc34:	4323      	orrs	r3, r4
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800bc36:	402a      	ands	r2, r5

  return HAL_OK;
}
 800bc38:	bc30      	pop	{r4, r5}
             Init.HardwareFlowControl |\
 800bc3a:	430b      	orrs	r3, r1
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800bc3c:	4313      	orrs	r3, r2
 800bc3e:	6043      	str	r3, [r0, #4]
}
 800bc40:	b004      	add	sp, #16
 800bc42:	2000      	movs	r0, #0
 800bc44:	4770      	bx	lr
 800bc46:	bf00      	nop
 800bc48:	ffc02c00 	.word	0xffc02c00

0800bc4c <SDMMC_ReadFIFO>:
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800bc4c:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
}
 800bc50:	4770      	bx	lr
 800bc52:	bf00      	nop

0800bc54 <SDMMC_WriteFIFO>:
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 800bc54:	680b      	ldr	r3, [r1, #0]
 800bc56:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80

  return HAL_OK;
}
 800bc5a:	2000      	movs	r0, #0
 800bc5c:	4770      	bx	lr
 800bc5e:	bf00      	nop

0800bc60 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800bc60:	b508      	push	{r3, lr}
 800bc62:	4603      	mov	r3, r0
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 800bc64:	2002      	movs	r0, #2
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800bc66:	681a      	ldr	r2, [r3, #0]
 800bc68:	f042 0203 	orr.w	r2, r2, #3
 800bc6c:	601a      	str	r2, [r3, #0]
  HAL_Delay(2);
 800bc6e:	f7fa f9e9 	bl	8006044 <HAL_Delay>

  return HAL_OK;
}
 800bc72:	2000      	movs	r0, #0
 800bc74:	bd08      	pop	{r3, pc}
 800bc76:	bf00      	nop

0800bc78 <SDMMC_GetPowerState>:
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800bc78:	6800      	ldr	r0, [r0, #0]
}
 800bc7a:	f000 0003 	and.w	r0, r0, #3
 800bc7e:	4770      	bx	lr

0800bc80 <SDMMC_GetResponse>:

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800bc80:	3014      	adds	r0, #20

  return (*(__IO uint32_t *) tmp);
 800bc82:	5840      	ldr	r0, [r0, r1]
}
 800bc84:	4770      	bx	lr
 800bc86:	bf00      	nop

0800bc88 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800bc88:	b430      	push	{r4, r5}

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800bc8a:	e9d1 4200 	ldrd	r4, r2, [r1]

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800bc8e:	e9d1 3502 	ldrd	r3, r5, [r1, #8]
  SDMMCx->DTIMER = Data->DataTimeOut;
 800bc92:	6244      	str	r4, [r0, #36]	; 0x24
                       Data->TransferDir   |\
 800bc94:	690c      	ldr	r4, [r1, #16]
  SDMMCx->DLEN = Data->DataLength;
 800bc96:	6282      	str	r2, [r0, #40]	; 0x28
                       Data->TransferMode  |\
                       Data->DPSM);

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800bc98:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
                       Data->TransferMode  |\
 800bc9a:	6949      	ldr	r1, [r1, #20]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800bc9c:	432b      	orrs	r3, r5
                       Data->TransferDir   |\
 800bc9e:	4323      	orrs	r3, r4
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800bca0:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
                       Data->TransferMode  |\
 800bca4:	430b      	orrs	r3, r1
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800bca6:	4313      	orrs	r3, r2
 800bca8:	62c3      	str	r3, [r0, #44]	; 0x2c

  return HAL_OK;

}
 800bcaa:	bc30      	pop	{r4, r5}
 800bcac:	2000      	movs	r0, #0
 800bcae:	4770      	bx	lr

0800bcb0 <SDMMC_CmdBlockLength>:
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800bcb0:	4a4d      	ldr	r2, [pc, #308]	; (800bde8 <SDMMC_CmdBlockLength+0x138>)
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800bcb2:	4b4e      	ldr	r3, [pc, #312]	; (800bdec <SDMMC_CmdBlockLength+0x13c>)
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800bcb4:	6812      	ldr	r2, [r2, #0]
{
 800bcb6:	b410      	push	{r4}
  SDMMCx->ARG = Command->Argument;
 800bcb8:	6081      	str	r1, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800bcba:	68c4      	ldr	r4, [r0, #12]
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800bcbc:	494c      	ldr	r1, [pc, #304]	; (800bdf0 <SDMMC_CmdBlockLength+0x140>)
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800bcbe:	4023      	ands	r3, r4
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800bcc0:	fba1 1202 	umull	r1, r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800bcc4:	f443 5388 	orr.w	r3, r3, #4352	; 0x1100
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800bcc8:	0a52      	lsrs	r2, r2, #9
 800bcca:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800bcce:	f043 0310 	orr.w	r3, r3, #16
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800bcd2:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800bcd6:	60c3      	str	r3, [r0, #12]

  do
  {
    if (count-- == 0U)
 800bcd8:	b152      	cbz	r2, 800bcf0 <SDMMC_CmdBlockLength+0x40>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    sta_reg = SDMMCx->STA;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800bcda:	4946      	ldr	r1, [pc, #280]	; (800bdf4 <SDMMC_CmdBlockLength+0x144>)
 800bcdc:	1e53      	subs	r3, r2, #1
    sta_reg = SDMMCx->STA;
 800bcde:	6b42      	ldr	r2, [r0, #52]	; 0x34
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800bce0:	420a      	tst	r2, r1
    if (count-- == 0U)
 800bce2:	f103 33ff 	add.w	r3, r3, #4294967295
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800bce6:	d001      	beq.n	800bcec <SDMMC_CmdBlockLength+0x3c>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800bce8:	0492      	lsls	r2, r2, #18
 800bcea:	d507      	bpl.n	800bcfc <SDMMC_CmdBlockLength+0x4c>
    if (count-- == 0U)
 800bcec:	1c5c      	adds	r4, r3, #1
 800bcee:	d1f6      	bne.n	800bcde <SDMMC_CmdBlockLength+0x2e>
      return SDMMC_ERROR_TIMEOUT;
 800bcf0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 800bcf4:	4618      	mov	r0, r3
 800bcf6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bcfa:	4770      	bx	lr
#else
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800bcfc:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800bcfe:	075c      	lsls	r4, r3, #29
 800bd00:	d43d      	bmi.n	800bd7e <SDMMC_CmdBlockLength+0xce>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800bd02:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800bd04:	f013 0301 	ands.w	r3, r3, #1
 800bd08:	d134      	bne.n	800bd74 <SDMMC_CmdBlockLength+0xc4>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800bd0a:	4b3b      	ldr	r3, [pc, #236]	; (800bdf8 <SDMMC_CmdBlockLength+0x148>)
 800bd0c:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800bd0e:	6903      	ldr	r3, [r0, #16]

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800bd10:	b2db      	uxtb	r3, r3
 800bd12:	2b10      	cmp	r3, #16
 800bd14:	d131      	bne.n	800bd7a <SDMMC_CmdBlockLength+0xca>
  return (*(__IO uint32_t *) tmp);
 800bd16:	6942      	ldr	r2, [r0, #20]
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);

  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800bd18:	4b38      	ldr	r3, [pc, #224]	; (800bdfc <SDMMC_CmdBlockLength+0x14c>)
 800bd1a:	4013      	ands	r3, r2
 800bd1c:	2b00      	cmp	r3, #0
 800bd1e:	d0e9      	beq.n	800bcf4 <SDMMC_CmdBlockLength+0x44>
  {
    return SDMMC_ERROR_NONE;
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800bd20:	2a00      	cmp	r2, #0
 800bd22:	db2f      	blt.n	800bd84 <SDMMC_CmdBlockLength+0xd4>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800bd24:	0051      	lsls	r1, r2, #1
 800bd26:	d430      	bmi.n	800bd8a <SDMMC_CmdBlockLength+0xda>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800bd28:	0094      	lsls	r4, r2, #2
 800bd2a:	d430      	bmi.n	800bd8e <SDMMC_CmdBlockLength+0xde>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800bd2c:	00d0      	lsls	r0, r2, #3
 800bd2e:	d430      	bmi.n	800bd92 <SDMMC_CmdBlockLength+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800bd30:	0111      	lsls	r1, r2, #4
 800bd32:	d431      	bmi.n	800bd98 <SDMMC_CmdBlockLength+0xe8>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800bd34:	0154      	lsls	r4, r2, #5
 800bd36:	d432      	bmi.n	800bd9e <SDMMC_CmdBlockLength+0xee>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800bd38:	01d0      	lsls	r0, r2, #7
 800bd3a:	d433      	bmi.n	800bda4 <SDMMC_CmdBlockLength+0xf4>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800bd3c:	0211      	lsls	r1, r2, #8
 800bd3e:	d434      	bmi.n	800bdaa <SDMMC_CmdBlockLength+0xfa>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800bd40:	0254      	lsls	r4, r2, #9
 800bd42:	d435      	bmi.n	800bdb0 <SDMMC_CmdBlockLength+0x100>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800bd44:	0290      	lsls	r0, r2, #10
 800bd46:	d436      	bmi.n	800bdb6 <SDMMC_CmdBlockLength+0x106>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800bd48:	02d1      	lsls	r1, r2, #11
 800bd4a:	d437      	bmi.n	800bdbc <SDMMC_CmdBlockLength+0x10c>
  {
    return SDMMC_ERROR_CC_ERR;
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800bd4c:	0354      	lsls	r4, r2, #13
 800bd4e:	d438      	bmi.n	800bdc2 <SDMMC_CmdBlockLength+0x112>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800bd50:	0390      	lsls	r0, r2, #14
 800bd52:	d439      	bmi.n	800bdc8 <SDMMC_CmdBlockLength+0x118>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800bd54:	03d1      	lsls	r1, r2, #15
 800bd56:	d43a      	bmi.n	800bdce <SDMMC_CmdBlockLength+0x11e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800bd58:	0414      	lsls	r4, r2, #16
 800bd5a:	d43b      	bmi.n	800bdd4 <SDMMC_CmdBlockLength+0x124>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800bd5c:	0450      	lsls	r0, r2, #17
 800bd5e:	d43f      	bmi.n	800bde0 <SDMMC_CmdBlockLength+0x130>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800bd60:	0491      	lsls	r1, r2, #18
 800bd62:	d43a      	bmi.n	800bdda <SDMMC_CmdBlockLength+0x12a>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800bd64:	f012 0f08 	tst.w	r2, #8
 800bd68:	bf14      	ite	ne
 800bd6a:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
 800bd6e:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 800bd72:	e7bf      	b.n	800bcf4 <SDMMC_CmdBlockLength+0x44>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800bd74:	2201      	movs	r2, #1
 800bd76:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bd78:	e7bc      	b.n	800bcf4 <SDMMC_CmdBlockLength+0x44>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bd7a:	2301      	movs	r3, #1
 800bd7c:	e7ba      	b.n	800bcf4 <SDMMC_CmdBlockLength+0x44>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800bd7e:	2304      	movs	r3, #4
 800bd80:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bd82:	e7b7      	b.n	800bcf4 <SDMMC_CmdBlockLength+0x44>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800bd84:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800bd88:	e7b4      	b.n	800bcf4 <SDMMC_CmdBlockLength+0x44>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800bd8a:	2340      	movs	r3, #64	; 0x40
 800bd8c:	e7b2      	b.n	800bcf4 <SDMMC_CmdBlockLength+0x44>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800bd8e:	2380      	movs	r3, #128	; 0x80
 800bd90:	e7b0      	b.n	800bcf4 <SDMMC_CmdBlockLength+0x44>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800bd92:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bd96:	e7ad      	b.n	800bcf4 <SDMMC_CmdBlockLength+0x44>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800bd98:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bd9c:	e7aa      	b.n	800bcf4 <SDMMC_CmdBlockLength+0x44>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800bd9e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bda2:	e7a7      	b.n	800bcf4 <SDMMC_CmdBlockLength+0x44>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800bda4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800bda8:	e7a4      	b.n	800bcf4 <SDMMC_CmdBlockLength+0x44>
    return SDMMC_ERROR_COM_CRC_FAILED;
 800bdaa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bdae:	e7a1      	b.n	800bcf4 <SDMMC_CmdBlockLength+0x44>
    return SDMMC_ERROR_ILLEGAL_CMD;
 800bdb0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800bdb4:	e79e      	b.n	800bcf4 <SDMMC_CmdBlockLength+0x44>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800bdb6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800bdba:	e79b      	b.n	800bcf4 <SDMMC_CmdBlockLength+0x44>
    return SDMMC_ERROR_CC_ERR;
 800bdbc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bdc0:	e798      	b.n	800bcf4 <SDMMC_CmdBlockLength+0x44>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800bdc2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800bdc6:	e795      	b.n	800bcf4 <SDMMC_CmdBlockLength+0x44>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800bdc8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800bdcc:	e792      	b.n	800bcf4 <SDMMC_CmdBlockLength+0x44>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800bdce:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800bdd2:	e78f      	b.n	800bcf4 <SDMMC_CmdBlockLength+0x44>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800bdd4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800bdd8:	e78c      	b.n	800bcf4 <SDMMC_CmdBlockLength+0x44>
    return SDMMC_ERROR_ERASE_RESET;
 800bdda:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800bdde:	e789      	b.n	800bcf4 <SDMMC_CmdBlockLength+0x44>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800bde0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800bde4:	e786      	b.n	800bcf4 <SDMMC_CmdBlockLength+0x44>
 800bde6:	bf00      	nop
 800bde8:	200000f8 	.word	0x200000f8
 800bdec:	fffee0c0 	.word	0xfffee0c0
 800bdf0:	10624dd3 	.word	0x10624dd3
 800bdf4:	00200045 	.word	0x00200045
 800bdf8:	002000c5 	.word	0x002000c5
 800bdfc:	fdffe008 	.word	0xfdffe008

0800be00 <SDMMC_CmdReadSingleBlock>:
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800be00:	4a4d      	ldr	r2, [pc, #308]	; (800bf38 <SDMMC_CmdReadSingleBlock+0x138>)
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800be02:	4b4e      	ldr	r3, [pc, #312]	; (800bf3c <SDMMC_CmdReadSingleBlock+0x13c>)
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800be04:	6812      	ldr	r2, [r2, #0]
{
 800be06:	b410      	push	{r4}
  SDMMCx->ARG = Command->Argument;
 800be08:	6081      	str	r1, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800be0a:	68c4      	ldr	r4, [r0, #12]
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800be0c:	494c      	ldr	r1, [pc, #304]	; (800bf40 <SDMMC_CmdReadSingleBlock+0x140>)
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800be0e:	4023      	ands	r3, r4
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800be10:	fba1 1202 	umull	r1, r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800be14:	f443 5388 	orr.w	r3, r3, #4352	; 0x1100
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800be18:	0a52      	lsrs	r2, r2, #9
 800be1a:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800be1e:	f043 0311 	orr.w	r3, r3, #17
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800be22:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800be26:	60c3      	str	r3, [r0, #12]
    if (count-- == 0U)
 800be28:	b152      	cbz	r2, 800be40 <SDMMC_CmdReadSingleBlock+0x40>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800be2a:	4946      	ldr	r1, [pc, #280]	; (800bf44 <SDMMC_CmdReadSingleBlock+0x144>)
 800be2c:	1e53      	subs	r3, r2, #1
    sta_reg = SDMMCx->STA;
 800be2e:	6b42      	ldr	r2, [r0, #52]	; 0x34
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800be30:	420a      	tst	r2, r1
    if (count-- == 0U)
 800be32:	f103 33ff 	add.w	r3, r3, #4294967295
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800be36:	d001      	beq.n	800be3c <SDMMC_CmdReadSingleBlock+0x3c>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800be38:	0492      	lsls	r2, r2, #18
 800be3a:	d507      	bpl.n	800be4c <SDMMC_CmdReadSingleBlock+0x4c>
    if (count-- == 0U)
 800be3c:	1c5c      	adds	r4, r3, #1
 800be3e:	d1f6      	bne.n	800be2e <SDMMC_CmdReadSingleBlock+0x2e>
      return SDMMC_ERROR_TIMEOUT;
 800be40:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 800be44:	4618      	mov	r0, r3
 800be46:	f85d 4b04 	ldr.w	r4, [sp], #4
 800be4a:	4770      	bx	lr
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800be4c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800be4e:	075c      	lsls	r4, r3, #29
 800be50:	d43d      	bmi.n	800bece <SDMMC_CmdReadSingleBlock+0xce>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800be52:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800be54:	f013 0301 	ands.w	r3, r3, #1
 800be58:	d134      	bne.n	800bec4 <SDMMC_CmdReadSingleBlock+0xc4>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800be5a:	4b3b      	ldr	r3, [pc, #236]	; (800bf48 <SDMMC_CmdReadSingleBlock+0x148>)
 800be5c:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800be5e:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800be60:	b2db      	uxtb	r3, r3
 800be62:	2b11      	cmp	r3, #17
 800be64:	d131      	bne.n	800beca <SDMMC_CmdReadSingleBlock+0xca>
  return (*(__IO uint32_t *) tmp);
 800be66:	6942      	ldr	r2, [r0, #20]
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800be68:	4b38      	ldr	r3, [pc, #224]	; (800bf4c <SDMMC_CmdReadSingleBlock+0x14c>)
 800be6a:	4013      	ands	r3, r2
 800be6c:	2b00      	cmp	r3, #0
 800be6e:	d0e9      	beq.n	800be44 <SDMMC_CmdReadSingleBlock+0x44>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800be70:	2a00      	cmp	r2, #0
 800be72:	db2f      	blt.n	800bed4 <SDMMC_CmdReadSingleBlock+0xd4>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800be74:	0051      	lsls	r1, r2, #1
 800be76:	d430      	bmi.n	800beda <SDMMC_CmdReadSingleBlock+0xda>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800be78:	0094      	lsls	r4, r2, #2
 800be7a:	d430      	bmi.n	800bede <SDMMC_CmdReadSingleBlock+0xde>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800be7c:	00d0      	lsls	r0, r2, #3
 800be7e:	d430      	bmi.n	800bee2 <SDMMC_CmdReadSingleBlock+0xe2>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800be80:	0111      	lsls	r1, r2, #4
 800be82:	d431      	bmi.n	800bee8 <SDMMC_CmdReadSingleBlock+0xe8>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800be84:	0154      	lsls	r4, r2, #5
 800be86:	d432      	bmi.n	800beee <SDMMC_CmdReadSingleBlock+0xee>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800be88:	01d0      	lsls	r0, r2, #7
 800be8a:	d433      	bmi.n	800bef4 <SDMMC_CmdReadSingleBlock+0xf4>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800be8c:	0211      	lsls	r1, r2, #8
 800be8e:	d434      	bmi.n	800befa <SDMMC_CmdReadSingleBlock+0xfa>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800be90:	0254      	lsls	r4, r2, #9
 800be92:	d435      	bmi.n	800bf00 <SDMMC_CmdReadSingleBlock+0x100>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800be94:	0290      	lsls	r0, r2, #10
 800be96:	d436      	bmi.n	800bf06 <SDMMC_CmdReadSingleBlock+0x106>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800be98:	02d1      	lsls	r1, r2, #11
 800be9a:	d437      	bmi.n	800bf0c <SDMMC_CmdReadSingleBlock+0x10c>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800be9c:	0354      	lsls	r4, r2, #13
 800be9e:	d438      	bmi.n	800bf12 <SDMMC_CmdReadSingleBlock+0x112>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800bea0:	0390      	lsls	r0, r2, #14
 800bea2:	d439      	bmi.n	800bf18 <SDMMC_CmdReadSingleBlock+0x118>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800bea4:	03d1      	lsls	r1, r2, #15
 800bea6:	d43a      	bmi.n	800bf1e <SDMMC_CmdReadSingleBlock+0x11e>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800bea8:	0414      	lsls	r4, r2, #16
 800beaa:	d43b      	bmi.n	800bf24 <SDMMC_CmdReadSingleBlock+0x124>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800beac:	0450      	lsls	r0, r2, #17
 800beae:	d43f      	bmi.n	800bf30 <SDMMC_CmdReadSingleBlock+0x130>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800beb0:	0491      	lsls	r1, r2, #18
 800beb2:	d43a      	bmi.n	800bf2a <SDMMC_CmdReadSingleBlock+0x12a>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800beb4:	f012 0f08 	tst.w	r2, #8
 800beb8:	bf14      	ite	ne
 800beba:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
 800bebe:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 800bec2:	e7bf      	b.n	800be44 <SDMMC_CmdReadSingleBlock+0x44>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800bec4:	2201      	movs	r2, #1
 800bec6:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bec8:	e7bc      	b.n	800be44 <SDMMC_CmdReadSingleBlock+0x44>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800beca:	2301      	movs	r3, #1
 800becc:	e7ba      	b.n	800be44 <SDMMC_CmdReadSingleBlock+0x44>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800bece:	2304      	movs	r3, #4
 800bed0:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bed2:	e7b7      	b.n	800be44 <SDMMC_CmdReadSingleBlock+0x44>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800bed4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800bed8:	e7b4      	b.n	800be44 <SDMMC_CmdReadSingleBlock+0x44>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800beda:	2340      	movs	r3, #64	; 0x40
 800bedc:	e7b2      	b.n	800be44 <SDMMC_CmdReadSingleBlock+0x44>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800bede:	2380      	movs	r3, #128	; 0x80
 800bee0:	e7b0      	b.n	800be44 <SDMMC_CmdReadSingleBlock+0x44>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800bee2:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bee6:	e7ad      	b.n	800be44 <SDMMC_CmdReadSingleBlock+0x44>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800bee8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800beec:	e7aa      	b.n	800be44 <SDMMC_CmdReadSingleBlock+0x44>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800beee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bef2:	e7a7      	b.n	800be44 <SDMMC_CmdReadSingleBlock+0x44>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800bef4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800bef8:	e7a4      	b.n	800be44 <SDMMC_CmdReadSingleBlock+0x44>
    return SDMMC_ERROR_COM_CRC_FAILED;
 800befa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800befe:	e7a1      	b.n	800be44 <SDMMC_CmdReadSingleBlock+0x44>
    return SDMMC_ERROR_ILLEGAL_CMD;
 800bf00:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800bf04:	e79e      	b.n	800be44 <SDMMC_CmdReadSingleBlock+0x44>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800bf06:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800bf0a:	e79b      	b.n	800be44 <SDMMC_CmdReadSingleBlock+0x44>
    return SDMMC_ERROR_CC_ERR;
 800bf0c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bf10:	e798      	b.n	800be44 <SDMMC_CmdReadSingleBlock+0x44>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800bf12:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800bf16:	e795      	b.n	800be44 <SDMMC_CmdReadSingleBlock+0x44>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800bf18:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800bf1c:	e792      	b.n	800be44 <SDMMC_CmdReadSingleBlock+0x44>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800bf1e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800bf22:	e78f      	b.n	800be44 <SDMMC_CmdReadSingleBlock+0x44>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800bf24:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800bf28:	e78c      	b.n	800be44 <SDMMC_CmdReadSingleBlock+0x44>
    return SDMMC_ERROR_ERASE_RESET;
 800bf2a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800bf2e:	e789      	b.n	800be44 <SDMMC_CmdReadSingleBlock+0x44>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800bf30:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800bf34:	e786      	b.n	800be44 <SDMMC_CmdReadSingleBlock+0x44>
 800bf36:	bf00      	nop
 800bf38:	200000f8 	.word	0x200000f8
 800bf3c:	fffee0c0 	.word	0xfffee0c0
 800bf40:	10624dd3 	.word	0x10624dd3
 800bf44:	00200045 	.word	0x00200045
 800bf48:	002000c5 	.word	0x002000c5
 800bf4c:	fdffe008 	.word	0xfdffe008

0800bf50 <SDMMC_CmdReadMultiBlock>:
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800bf50:	4a4d      	ldr	r2, [pc, #308]	; (800c088 <SDMMC_CmdReadMultiBlock+0x138>)
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800bf52:	4b4e      	ldr	r3, [pc, #312]	; (800c08c <SDMMC_CmdReadMultiBlock+0x13c>)
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800bf54:	6812      	ldr	r2, [r2, #0]
{
 800bf56:	b410      	push	{r4}
  SDMMCx->ARG = Command->Argument;
 800bf58:	6081      	str	r1, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800bf5a:	68c4      	ldr	r4, [r0, #12]
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800bf5c:	494c      	ldr	r1, [pc, #304]	; (800c090 <SDMMC_CmdReadMultiBlock+0x140>)
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800bf5e:	4023      	ands	r3, r4
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800bf60:	fba1 1202 	umull	r1, r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800bf64:	f443 5388 	orr.w	r3, r3, #4352	; 0x1100
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800bf68:	0a52      	lsrs	r2, r2, #9
 800bf6a:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800bf6e:	f043 0312 	orr.w	r3, r3, #18
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800bf72:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800bf76:	60c3      	str	r3, [r0, #12]
    if (count-- == 0U)
 800bf78:	b152      	cbz	r2, 800bf90 <SDMMC_CmdReadMultiBlock+0x40>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800bf7a:	4946      	ldr	r1, [pc, #280]	; (800c094 <SDMMC_CmdReadMultiBlock+0x144>)
 800bf7c:	1e53      	subs	r3, r2, #1
    sta_reg = SDMMCx->STA;
 800bf7e:	6b42      	ldr	r2, [r0, #52]	; 0x34
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800bf80:	420a      	tst	r2, r1
    if (count-- == 0U)
 800bf82:	f103 33ff 	add.w	r3, r3, #4294967295
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800bf86:	d001      	beq.n	800bf8c <SDMMC_CmdReadMultiBlock+0x3c>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800bf88:	0492      	lsls	r2, r2, #18
 800bf8a:	d507      	bpl.n	800bf9c <SDMMC_CmdReadMultiBlock+0x4c>
    if (count-- == 0U)
 800bf8c:	1c5c      	adds	r4, r3, #1
 800bf8e:	d1f6      	bne.n	800bf7e <SDMMC_CmdReadMultiBlock+0x2e>
      return SDMMC_ERROR_TIMEOUT;
 800bf90:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 800bf94:	4618      	mov	r0, r3
 800bf96:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bf9a:	4770      	bx	lr
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800bf9c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800bf9e:	075c      	lsls	r4, r3, #29
 800bfa0:	d43d      	bmi.n	800c01e <SDMMC_CmdReadMultiBlock+0xce>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800bfa2:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800bfa4:	f013 0301 	ands.w	r3, r3, #1
 800bfa8:	d134      	bne.n	800c014 <SDMMC_CmdReadMultiBlock+0xc4>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800bfaa:	4b3b      	ldr	r3, [pc, #236]	; (800c098 <SDMMC_CmdReadMultiBlock+0x148>)
 800bfac:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800bfae:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800bfb0:	b2db      	uxtb	r3, r3
 800bfb2:	2b12      	cmp	r3, #18
 800bfb4:	d131      	bne.n	800c01a <SDMMC_CmdReadMultiBlock+0xca>
  return (*(__IO uint32_t *) tmp);
 800bfb6:	6942      	ldr	r2, [r0, #20]
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800bfb8:	4b38      	ldr	r3, [pc, #224]	; (800c09c <SDMMC_CmdReadMultiBlock+0x14c>)
 800bfba:	4013      	ands	r3, r2
 800bfbc:	2b00      	cmp	r3, #0
 800bfbe:	d0e9      	beq.n	800bf94 <SDMMC_CmdReadMultiBlock+0x44>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800bfc0:	2a00      	cmp	r2, #0
 800bfc2:	db2f      	blt.n	800c024 <SDMMC_CmdReadMultiBlock+0xd4>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800bfc4:	0051      	lsls	r1, r2, #1
 800bfc6:	d430      	bmi.n	800c02a <SDMMC_CmdReadMultiBlock+0xda>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800bfc8:	0094      	lsls	r4, r2, #2
 800bfca:	d430      	bmi.n	800c02e <SDMMC_CmdReadMultiBlock+0xde>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800bfcc:	00d0      	lsls	r0, r2, #3
 800bfce:	d430      	bmi.n	800c032 <SDMMC_CmdReadMultiBlock+0xe2>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800bfd0:	0111      	lsls	r1, r2, #4
 800bfd2:	d431      	bmi.n	800c038 <SDMMC_CmdReadMultiBlock+0xe8>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800bfd4:	0154      	lsls	r4, r2, #5
 800bfd6:	d432      	bmi.n	800c03e <SDMMC_CmdReadMultiBlock+0xee>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800bfd8:	01d0      	lsls	r0, r2, #7
 800bfda:	d433      	bmi.n	800c044 <SDMMC_CmdReadMultiBlock+0xf4>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800bfdc:	0211      	lsls	r1, r2, #8
 800bfde:	d434      	bmi.n	800c04a <SDMMC_CmdReadMultiBlock+0xfa>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800bfe0:	0254      	lsls	r4, r2, #9
 800bfe2:	d435      	bmi.n	800c050 <SDMMC_CmdReadMultiBlock+0x100>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800bfe4:	0290      	lsls	r0, r2, #10
 800bfe6:	d436      	bmi.n	800c056 <SDMMC_CmdReadMultiBlock+0x106>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800bfe8:	02d1      	lsls	r1, r2, #11
 800bfea:	d437      	bmi.n	800c05c <SDMMC_CmdReadMultiBlock+0x10c>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800bfec:	0354      	lsls	r4, r2, #13
 800bfee:	d438      	bmi.n	800c062 <SDMMC_CmdReadMultiBlock+0x112>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800bff0:	0390      	lsls	r0, r2, #14
 800bff2:	d439      	bmi.n	800c068 <SDMMC_CmdReadMultiBlock+0x118>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800bff4:	03d1      	lsls	r1, r2, #15
 800bff6:	d43a      	bmi.n	800c06e <SDMMC_CmdReadMultiBlock+0x11e>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800bff8:	0414      	lsls	r4, r2, #16
 800bffa:	d43b      	bmi.n	800c074 <SDMMC_CmdReadMultiBlock+0x124>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800bffc:	0450      	lsls	r0, r2, #17
 800bffe:	d43f      	bmi.n	800c080 <SDMMC_CmdReadMultiBlock+0x130>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800c000:	0491      	lsls	r1, r2, #18
 800c002:	d43a      	bmi.n	800c07a <SDMMC_CmdReadMultiBlock+0x12a>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800c004:	f012 0f08 	tst.w	r2, #8
 800c008:	bf14      	ite	ne
 800c00a:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
 800c00e:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 800c012:	e7bf      	b.n	800bf94 <SDMMC_CmdReadMultiBlock+0x44>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c014:	2201      	movs	r2, #1
 800c016:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c018:	e7bc      	b.n	800bf94 <SDMMC_CmdReadMultiBlock+0x44>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c01a:	2301      	movs	r3, #1
 800c01c:	e7ba      	b.n	800bf94 <SDMMC_CmdReadMultiBlock+0x44>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c01e:	2304      	movs	r3, #4
 800c020:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c022:	e7b7      	b.n	800bf94 <SDMMC_CmdReadMultiBlock+0x44>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800c024:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800c028:	e7b4      	b.n	800bf94 <SDMMC_CmdReadMultiBlock+0x44>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800c02a:	2340      	movs	r3, #64	; 0x40
 800c02c:	e7b2      	b.n	800bf94 <SDMMC_CmdReadMultiBlock+0x44>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800c02e:	2380      	movs	r3, #128	; 0x80
 800c030:	e7b0      	b.n	800bf94 <SDMMC_CmdReadMultiBlock+0x44>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800c032:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c036:	e7ad      	b.n	800bf94 <SDMMC_CmdReadMultiBlock+0x44>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800c038:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c03c:	e7aa      	b.n	800bf94 <SDMMC_CmdReadMultiBlock+0x44>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800c03e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c042:	e7a7      	b.n	800bf94 <SDMMC_CmdReadMultiBlock+0x44>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800c044:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c048:	e7a4      	b.n	800bf94 <SDMMC_CmdReadMultiBlock+0x44>
    return SDMMC_ERROR_COM_CRC_FAILED;
 800c04a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c04e:	e7a1      	b.n	800bf94 <SDMMC_CmdReadMultiBlock+0x44>
    return SDMMC_ERROR_ILLEGAL_CMD;
 800c050:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800c054:	e79e      	b.n	800bf94 <SDMMC_CmdReadMultiBlock+0x44>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800c056:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800c05a:	e79b      	b.n	800bf94 <SDMMC_CmdReadMultiBlock+0x44>
    return SDMMC_ERROR_CC_ERR;
 800c05c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c060:	e798      	b.n	800bf94 <SDMMC_CmdReadMultiBlock+0x44>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800c062:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800c066:	e795      	b.n	800bf94 <SDMMC_CmdReadMultiBlock+0x44>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800c068:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800c06c:	e792      	b.n	800bf94 <SDMMC_CmdReadMultiBlock+0x44>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800c06e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800c072:	e78f      	b.n	800bf94 <SDMMC_CmdReadMultiBlock+0x44>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800c074:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800c078:	e78c      	b.n	800bf94 <SDMMC_CmdReadMultiBlock+0x44>
    return SDMMC_ERROR_ERASE_RESET;
 800c07a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800c07e:	e789      	b.n	800bf94 <SDMMC_CmdReadMultiBlock+0x44>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800c080:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800c084:	e786      	b.n	800bf94 <SDMMC_CmdReadMultiBlock+0x44>
 800c086:	bf00      	nop
 800c088:	200000f8 	.word	0x200000f8
 800c08c:	fffee0c0 	.word	0xfffee0c0
 800c090:	10624dd3 	.word	0x10624dd3
 800c094:	00200045 	.word	0x00200045
 800c098:	002000c5 	.word	0x002000c5
 800c09c:	fdffe008 	.word	0xfdffe008

0800c0a0 <SDMMC_CmdWriteSingleBlock>:
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800c0a0:	4a4d      	ldr	r2, [pc, #308]	; (800c1d8 <SDMMC_CmdWriteSingleBlock+0x138>)
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800c0a2:	4b4e      	ldr	r3, [pc, #312]	; (800c1dc <SDMMC_CmdWriteSingleBlock+0x13c>)
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800c0a4:	6812      	ldr	r2, [r2, #0]
{
 800c0a6:	b410      	push	{r4}
  SDMMCx->ARG = Command->Argument;
 800c0a8:	6081      	str	r1, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800c0aa:	68c4      	ldr	r4, [r0, #12]
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800c0ac:	494c      	ldr	r1, [pc, #304]	; (800c1e0 <SDMMC_CmdWriteSingleBlock+0x140>)
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800c0ae:	4023      	ands	r3, r4
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800c0b0:	fba1 1202 	umull	r1, r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800c0b4:	f443 5388 	orr.w	r3, r3, #4352	; 0x1100
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800c0b8:	0a52      	lsrs	r2, r2, #9
 800c0ba:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800c0be:	f043 0318 	orr.w	r3, r3, #24
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800c0c2:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800c0c6:	60c3      	str	r3, [r0, #12]
    if (count-- == 0U)
 800c0c8:	b152      	cbz	r2, 800c0e0 <SDMMC_CmdWriteSingleBlock+0x40>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800c0ca:	4946      	ldr	r1, [pc, #280]	; (800c1e4 <SDMMC_CmdWriteSingleBlock+0x144>)
 800c0cc:	1e53      	subs	r3, r2, #1
    sta_reg = SDMMCx->STA;
 800c0ce:	6b42      	ldr	r2, [r0, #52]	; 0x34
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800c0d0:	420a      	tst	r2, r1
    if (count-- == 0U)
 800c0d2:	f103 33ff 	add.w	r3, r3, #4294967295
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800c0d6:	d001      	beq.n	800c0dc <SDMMC_CmdWriteSingleBlock+0x3c>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800c0d8:	0492      	lsls	r2, r2, #18
 800c0da:	d507      	bpl.n	800c0ec <SDMMC_CmdWriteSingleBlock+0x4c>
    if (count-- == 0U)
 800c0dc:	1c5c      	adds	r4, r3, #1
 800c0de:	d1f6      	bne.n	800c0ce <SDMMC_CmdWriteSingleBlock+0x2e>
      return SDMMC_ERROR_TIMEOUT;
 800c0e0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 800c0e4:	4618      	mov	r0, r3
 800c0e6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c0ea:	4770      	bx	lr
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c0ec:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800c0ee:	075c      	lsls	r4, r3, #29
 800c0f0:	d43d      	bmi.n	800c16e <SDMMC_CmdWriteSingleBlock+0xce>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c0f2:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800c0f4:	f013 0301 	ands.w	r3, r3, #1
 800c0f8:	d134      	bne.n	800c164 <SDMMC_CmdWriteSingleBlock+0xc4>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c0fa:	4b3b      	ldr	r3, [pc, #236]	; (800c1e8 <SDMMC_CmdWriteSingleBlock+0x148>)
 800c0fc:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800c0fe:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800c100:	b2db      	uxtb	r3, r3
 800c102:	2b18      	cmp	r3, #24
 800c104:	d131      	bne.n	800c16a <SDMMC_CmdWriteSingleBlock+0xca>
  return (*(__IO uint32_t *) tmp);
 800c106:	6942      	ldr	r2, [r0, #20]
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800c108:	4b38      	ldr	r3, [pc, #224]	; (800c1ec <SDMMC_CmdWriteSingleBlock+0x14c>)
 800c10a:	4013      	ands	r3, r2
 800c10c:	2b00      	cmp	r3, #0
 800c10e:	d0e9      	beq.n	800c0e4 <SDMMC_CmdWriteSingleBlock+0x44>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800c110:	2a00      	cmp	r2, #0
 800c112:	db2f      	blt.n	800c174 <SDMMC_CmdWriteSingleBlock+0xd4>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800c114:	0051      	lsls	r1, r2, #1
 800c116:	d430      	bmi.n	800c17a <SDMMC_CmdWriteSingleBlock+0xda>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800c118:	0094      	lsls	r4, r2, #2
 800c11a:	d430      	bmi.n	800c17e <SDMMC_CmdWriteSingleBlock+0xde>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800c11c:	00d0      	lsls	r0, r2, #3
 800c11e:	d430      	bmi.n	800c182 <SDMMC_CmdWriteSingleBlock+0xe2>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800c120:	0111      	lsls	r1, r2, #4
 800c122:	d431      	bmi.n	800c188 <SDMMC_CmdWriteSingleBlock+0xe8>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800c124:	0154      	lsls	r4, r2, #5
 800c126:	d432      	bmi.n	800c18e <SDMMC_CmdWriteSingleBlock+0xee>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800c128:	01d0      	lsls	r0, r2, #7
 800c12a:	d433      	bmi.n	800c194 <SDMMC_CmdWriteSingleBlock+0xf4>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800c12c:	0211      	lsls	r1, r2, #8
 800c12e:	d434      	bmi.n	800c19a <SDMMC_CmdWriteSingleBlock+0xfa>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800c130:	0254      	lsls	r4, r2, #9
 800c132:	d435      	bmi.n	800c1a0 <SDMMC_CmdWriteSingleBlock+0x100>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800c134:	0290      	lsls	r0, r2, #10
 800c136:	d436      	bmi.n	800c1a6 <SDMMC_CmdWriteSingleBlock+0x106>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800c138:	02d1      	lsls	r1, r2, #11
 800c13a:	d437      	bmi.n	800c1ac <SDMMC_CmdWriteSingleBlock+0x10c>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800c13c:	0354      	lsls	r4, r2, #13
 800c13e:	d438      	bmi.n	800c1b2 <SDMMC_CmdWriteSingleBlock+0x112>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800c140:	0390      	lsls	r0, r2, #14
 800c142:	d439      	bmi.n	800c1b8 <SDMMC_CmdWriteSingleBlock+0x118>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800c144:	03d1      	lsls	r1, r2, #15
 800c146:	d43a      	bmi.n	800c1be <SDMMC_CmdWriteSingleBlock+0x11e>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800c148:	0414      	lsls	r4, r2, #16
 800c14a:	d43b      	bmi.n	800c1c4 <SDMMC_CmdWriteSingleBlock+0x124>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800c14c:	0450      	lsls	r0, r2, #17
 800c14e:	d43f      	bmi.n	800c1d0 <SDMMC_CmdWriteSingleBlock+0x130>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800c150:	0491      	lsls	r1, r2, #18
 800c152:	d43a      	bmi.n	800c1ca <SDMMC_CmdWriteSingleBlock+0x12a>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800c154:	f012 0f08 	tst.w	r2, #8
 800c158:	bf14      	ite	ne
 800c15a:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
 800c15e:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 800c162:	e7bf      	b.n	800c0e4 <SDMMC_CmdWriteSingleBlock+0x44>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c164:	2201      	movs	r2, #1
 800c166:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c168:	e7bc      	b.n	800c0e4 <SDMMC_CmdWriteSingleBlock+0x44>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c16a:	2301      	movs	r3, #1
 800c16c:	e7ba      	b.n	800c0e4 <SDMMC_CmdWriteSingleBlock+0x44>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c16e:	2304      	movs	r3, #4
 800c170:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c172:	e7b7      	b.n	800c0e4 <SDMMC_CmdWriteSingleBlock+0x44>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800c174:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800c178:	e7b4      	b.n	800c0e4 <SDMMC_CmdWriteSingleBlock+0x44>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800c17a:	2340      	movs	r3, #64	; 0x40
 800c17c:	e7b2      	b.n	800c0e4 <SDMMC_CmdWriteSingleBlock+0x44>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800c17e:	2380      	movs	r3, #128	; 0x80
 800c180:	e7b0      	b.n	800c0e4 <SDMMC_CmdWriteSingleBlock+0x44>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800c182:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c186:	e7ad      	b.n	800c0e4 <SDMMC_CmdWriteSingleBlock+0x44>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800c188:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c18c:	e7aa      	b.n	800c0e4 <SDMMC_CmdWriteSingleBlock+0x44>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800c18e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c192:	e7a7      	b.n	800c0e4 <SDMMC_CmdWriteSingleBlock+0x44>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800c194:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c198:	e7a4      	b.n	800c0e4 <SDMMC_CmdWriteSingleBlock+0x44>
    return SDMMC_ERROR_COM_CRC_FAILED;
 800c19a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c19e:	e7a1      	b.n	800c0e4 <SDMMC_CmdWriteSingleBlock+0x44>
    return SDMMC_ERROR_ILLEGAL_CMD;
 800c1a0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800c1a4:	e79e      	b.n	800c0e4 <SDMMC_CmdWriteSingleBlock+0x44>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800c1a6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800c1aa:	e79b      	b.n	800c0e4 <SDMMC_CmdWriteSingleBlock+0x44>
    return SDMMC_ERROR_CC_ERR;
 800c1ac:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c1b0:	e798      	b.n	800c0e4 <SDMMC_CmdWriteSingleBlock+0x44>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800c1b2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800c1b6:	e795      	b.n	800c0e4 <SDMMC_CmdWriteSingleBlock+0x44>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800c1b8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800c1bc:	e792      	b.n	800c0e4 <SDMMC_CmdWriteSingleBlock+0x44>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800c1be:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800c1c2:	e78f      	b.n	800c0e4 <SDMMC_CmdWriteSingleBlock+0x44>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800c1c4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800c1c8:	e78c      	b.n	800c0e4 <SDMMC_CmdWriteSingleBlock+0x44>
    return SDMMC_ERROR_ERASE_RESET;
 800c1ca:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800c1ce:	e789      	b.n	800c0e4 <SDMMC_CmdWriteSingleBlock+0x44>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800c1d0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800c1d4:	e786      	b.n	800c0e4 <SDMMC_CmdWriteSingleBlock+0x44>
 800c1d6:	bf00      	nop
 800c1d8:	200000f8 	.word	0x200000f8
 800c1dc:	fffee0c0 	.word	0xfffee0c0
 800c1e0:	10624dd3 	.word	0x10624dd3
 800c1e4:	00200045 	.word	0x00200045
 800c1e8:	002000c5 	.word	0x002000c5
 800c1ec:	fdffe008 	.word	0xfdffe008

0800c1f0 <SDMMC_CmdWriteMultiBlock>:
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800c1f0:	4a4d      	ldr	r2, [pc, #308]	; (800c328 <SDMMC_CmdWriteMultiBlock+0x138>)
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800c1f2:	4b4e      	ldr	r3, [pc, #312]	; (800c32c <SDMMC_CmdWriteMultiBlock+0x13c>)
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800c1f4:	6812      	ldr	r2, [r2, #0]
{
 800c1f6:	b410      	push	{r4}
  SDMMCx->ARG = Command->Argument;
 800c1f8:	6081      	str	r1, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800c1fa:	68c4      	ldr	r4, [r0, #12]
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800c1fc:	494c      	ldr	r1, [pc, #304]	; (800c330 <SDMMC_CmdWriteMultiBlock+0x140>)
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800c1fe:	4023      	ands	r3, r4
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800c200:	fba1 1202 	umull	r1, r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800c204:	f443 5388 	orr.w	r3, r3, #4352	; 0x1100
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800c208:	0a52      	lsrs	r2, r2, #9
 800c20a:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800c20e:	f043 0319 	orr.w	r3, r3, #25
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800c212:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800c216:	60c3      	str	r3, [r0, #12]
    if (count-- == 0U)
 800c218:	b152      	cbz	r2, 800c230 <SDMMC_CmdWriteMultiBlock+0x40>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800c21a:	4946      	ldr	r1, [pc, #280]	; (800c334 <SDMMC_CmdWriteMultiBlock+0x144>)
 800c21c:	1e53      	subs	r3, r2, #1
    sta_reg = SDMMCx->STA;
 800c21e:	6b42      	ldr	r2, [r0, #52]	; 0x34
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800c220:	420a      	tst	r2, r1
    if (count-- == 0U)
 800c222:	f103 33ff 	add.w	r3, r3, #4294967295
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800c226:	d001      	beq.n	800c22c <SDMMC_CmdWriteMultiBlock+0x3c>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800c228:	0492      	lsls	r2, r2, #18
 800c22a:	d507      	bpl.n	800c23c <SDMMC_CmdWriteMultiBlock+0x4c>
    if (count-- == 0U)
 800c22c:	1c5c      	adds	r4, r3, #1
 800c22e:	d1f6      	bne.n	800c21e <SDMMC_CmdWriteMultiBlock+0x2e>
      return SDMMC_ERROR_TIMEOUT;
 800c230:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 800c234:	4618      	mov	r0, r3
 800c236:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c23a:	4770      	bx	lr
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c23c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800c23e:	075c      	lsls	r4, r3, #29
 800c240:	d43d      	bmi.n	800c2be <SDMMC_CmdWriteMultiBlock+0xce>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c242:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800c244:	f013 0301 	ands.w	r3, r3, #1
 800c248:	d134      	bne.n	800c2b4 <SDMMC_CmdWriteMultiBlock+0xc4>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c24a:	4b3b      	ldr	r3, [pc, #236]	; (800c338 <SDMMC_CmdWriteMultiBlock+0x148>)
 800c24c:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800c24e:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800c250:	b2db      	uxtb	r3, r3
 800c252:	2b19      	cmp	r3, #25
 800c254:	d131      	bne.n	800c2ba <SDMMC_CmdWriteMultiBlock+0xca>
  return (*(__IO uint32_t *) tmp);
 800c256:	6942      	ldr	r2, [r0, #20]
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800c258:	4b38      	ldr	r3, [pc, #224]	; (800c33c <SDMMC_CmdWriteMultiBlock+0x14c>)
 800c25a:	4013      	ands	r3, r2
 800c25c:	2b00      	cmp	r3, #0
 800c25e:	d0e9      	beq.n	800c234 <SDMMC_CmdWriteMultiBlock+0x44>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800c260:	2a00      	cmp	r2, #0
 800c262:	db2f      	blt.n	800c2c4 <SDMMC_CmdWriteMultiBlock+0xd4>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800c264:	0051      	lsls	r1, r2, #1
 800c266:	d430      	bmi.n	800c2ca <SDMMC_CmdWriteMultiBlock+0xda>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800c268:	0094      	lsls	r4, r2, #2
 800c26a:	d430      	bmi.n	800c2ce <SDMMC_CmdWriteMultiBlock+0xde>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800c26c:	00d0      	lsls	r0, r2, #3
 800c26e:	d430      	bmi.n	800c2d2 <SDMMC_CmdWriteMultiBlock+0xe2>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800c270:	0111      	lsls	r1, r2, #4
 800c272:	d431      	bmi.n	800c2d8 <SDMMC_CmdWriteMultiBlock+0xe8>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800c274:	0154      	lsls	r4, r2, #5
 800c276:	d432      	bmi.n	800c2de <SDMMC_CmdWriteMultiBlock+0xee>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800c278:	01d0      	lsls	r0, r2, #7
 800c27a:	d433      	bmi.n	800c2e4 <SDMMC_CmdWriteMultiBlock+0xf4>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800c27c:	0211      	lsls	r1, r2, #8
 800c27e:	d434      	bmi.n	800c2ea <SDMMC_CmdWriteMultiBlock+0xfa>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800c280:	0254      	lsls	r4, r2, #9
 800c282:	d435      	bmi.n	800c2f0 <SDMMC_CmdWriteMultiBlock+0x100>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800c284:	0290      	lsls	r0, r2, #10
 800c286:	d436      	bmi.n	800c2f6 <SDMMC_CmdWriteMultiBlock+0x106>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800c288:	02d1      	lsls	r1, r2, #11
 800c28a:	d437      	bmi.n	800c2fc <SDMMC_CmdWriteMultiBlock+0x10c>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800c28c:	0354      	lsls	r4, r2, #13
 800c28e:	d438      	bmi.n	800c302 <SDMMC_CmdWriteMultiBlock+0x112>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800c290:	0390      	lsls	r0, r2, #14
 800c292:	d439      	bmi.n	800c308 <SDMMC_CmdWriteMultiBlock+0x118>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800c294:	03d1      	lsls	r1, r2, #15
 800c296:	d43a      	bmi.n	800c30e <SDMMC_CmdWriteMultiBlock+0x11e>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800c298:	0414      	lsls	r4, r2, #16
 800c29a:	d43b      	bmi.n	800c314 <SDMMC_CmdWriteMultiBlock+0x124>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800c29c:	0450      	lsls	r0, r2, #17
 800c29e:	d43f      	bmi.n	800c320 <SDMMC_CmdWriteMultiBlock+0x130>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800c2a0:	0491      	lsls	r1, r2, #18
 800c2a2:	d43a      	bmi.n	800c31a <SDMMC_CmdWriteMultiBlock+0x12a>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800c2a4:	f012 0f08 	tst.w	r2, #8
 800c2a8:	bf14      	ite	ne
 800c2aa:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
 800c2ae:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 800c2b2:	e7bf      	b.n	800c234 <SDMMC_CmdWriteMultiBlock+0x44>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c2b4:	2201      	movs	r2, #1
 800c2b6:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c2b8:	e7bc      	b.n	800c234 <SDMMC_CmdWriteMultiBlock+0x44>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c2ba:	2301      	movs	r3, #1
 800c2bc:	e7ba      	b.n	800c234 <SDMMC_CmdWriteMultiBlock+0x44>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c2be:	2304      	movs	r3, #4
 800c2c0:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c2c2:	e7b7      	b.n	800c234 <SDMMC_CmdWriteMultiBlock+0x44>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800c2c4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800c2c8:	e7b4      	b.n	800c234 <SDMMC_CmdWriteMultiBlock+0x44>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800c2ca:	2340      	movs	r3, #64	; 0x40
 800c2cc:	e7b2      	b.n	800c234 <SDMMC_CmdWriteMultiBlock+0x44>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800c2ce:	2380      	movs	r3, #128	; 0x80
 800c2d0:	e7b0      	b.n	800c234 <SDMMC_CmdWriteMultiBlock+0x44>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800c2d2:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c2d6:	e7ad      	b.n	800c234 <SDMMC_CmdWriteMultiBlock+0x44>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800c2d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c2dc:	e7aa      	b.n	800c234 <SDMMC_CmdWriteMultiBlock+0x44>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800c2de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c2e2:	e7a7      	b.n	800c234 <SDMMC_CmdWriteMultiBlock+0x44>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800c2e4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c2e8:	e7a4      	b.n	800c234 <SDMMC_CmdWriteMultiBlock+0x44>
    return SDMMC_ERROR_COM_CRC_FAILED;
 800c2ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c2ee:	e7a1      	b.n	800c234 <SDMMC_CmdWriteMultiBlock+0x44>
    return SDMMC_ERROR_ILLEGAL_CMD;
 800c2f0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800c2f4:	e79e      	b.n	800c234 <SDMMC_CmdWriteMultiBlock+0x44>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800c2f6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800c2fa:	e79b      	b.n	800c234 <SDMMC_CmdWriteMultiBlock+0x44>
    return SDMMC_ERROR_CC_ERR;
 800c2fc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c300:	e798      	b.n	800c234 <SDMMC_CmdWriteMultiBlock+0x44>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800c302:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800c306:	e795      	b.n	800c234 <SDMMC_CmdWriteMultiBlock+0x44>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800c308:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800c30c:	e792      	b.n	800c234 <SDMMC_CmdWriteMultiBlock+0x44>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800c30e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800c312:	e78f      	b.n	800c234 <SDMMC_CmdWriteMultiBlock+0x44>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800c314:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800c318:	e78c      	b.n	800c234 <SDMMC_CmdWriteMultiBlock+0x44>
    return SDMMC_ERROR_ERASE_RESET;
 800c31a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800c31e:	e789      	b.n	800c234 <SDMMC_CmdWriteMultiBlock+0x44>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800c320:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800c324:	e786      	b.n	800c234 <SDMMC_CmdWriteMultiBlock+0x44>
 800c326:	bf00      	nop
 800c328:	200000f8 	.word	0x200000f8
 800c32c:	fffee0c0 	.word	0xfffee0c0
 800c330:	10624dd3 	.word	0x10624dd3
 800c334:	00200045 	.word	0x00200045
 800c338:	002000c5 	.word	0x002000c5
 800c33c:	fdffe008 	.word	0xfdffe008

0800c340 <SDMMC_CmdStopTransfer>:
{
 800c340:	4603      	mov	r3, r0
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 800c342:	68c0      	ldr	r0, [r0, #12]
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800c344:	4951      	ldr	r1, [pc, #324]	; (800c48c <SDMMC_CmdStopTransfer+0x14c>)
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800c346:	4a52      	ldr	r2, [pc, #328]	; (800c490 <SDMMC_CmdStopTransfer+0x150>)
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800c348:	6809      	ldr	r1, [r1, #0]
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 800c34a:	f040 0080 	orr.w	r0, r0, #128	; 0x80
{
 800c34e:	b430      	push	{r4, r5}
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 800c350:	60d8      	str	r0, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 800c352:	68d8      	ldr	r0, [r3, #12]
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800c354:	4c4f      	ldr	r4, [pc, #316]	; (800c494 <SDMMC_CmdStopTransfer+0x154>)
  SDMMCx->ARG = Command->Argument;
 800c356:	2500      	movs	r5, #0
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 800c358:	f020 0040 	bic.w	r0, r0, #64	; 0x40
 800c35c:	60d8      	str	r0, [r3, #12]
  SDMMCx->ARG = Command->Argument;
 800c35e:	609d      	str	r5, [r3, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800c360:	68dd      	ldr	r5, [r3, #12]
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800c362:	484d      	ldr	r0, [pc, #308]	; (800c498 <SDMMC_CmdStopTransfer+0x158>)
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800c364:	402a      	ands	r2, r5
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800c366:	fba4 4101 	umull	r4, r1, r4, r1
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800c36a:	f442 5288 	orr.w	r2, r2, #4352	; 0x1100
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800c36e:	0a49      	lsrs	r1, r1, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800c370:	f042 020c 	orr.w	r2, r2, #12
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800c374:	fb00 f101 	mul.w	r1, r0, r1
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800c378:	60da      	str	r2, [r3, #12]
    if (count-- == 0U)
 800c37a:	b151      	cbz	r1, 800c392 <SDMMC_CmdStopTransfer+0x52>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800c37c:	4847      	ldr	r0, [pc, #284]	; (800c49c <SDMMC_CmdStopTransfer+0x15c>)
 800c37e:	1e4a      	subs	r2, r1, #1
    sta_reg = SDMMCx->STA;
 800c380:	6b59      	ldr	r1, [r3, #52]	; 0x34
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800c382:	4201      	tst	r1, r0
    if (count-- == 0U)
 800c384:	f102 32ff 	add.w	r2, r2, #4294967295
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800c388:	d001      	beq.n	800c38e <SDMMC_CmdStopTransfer+0x4e>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800c38a:	048c      	lsls	r4, r1, #18
 800c38c:	d509      	bpl.n	800c3a2 <SDMMC_CmdStopTransfer+0x62>
    if (count-- == 0U)
 800c38e:	1c55      	adds	r5, r2, #1
 800c390:	d1f6      	bne.n	800c380 <SDMMC_CmdStopTransfer+0x40>
      return SDMMC_ERROR_TIMEOUT;
 800c392:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800c396:	68da      	ldr	r2, [r3, #12]
 800c398:	f022 0280 	bic.w	r2, r2, #128	; 0x80
}
 800c39c:	bc30      	pop	{r4, r5}
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800c39e:	60da      	str	r2, [r3, #12]
}
 800c3a0:	4770      	bx	lr
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c3a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c3a4:	0750      	lsls	r0, r2, #29
 800c3a6:	d43d      	bmi.n	800c424 <SDMMC_CmdStopTransfer+0xe4>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c3a8:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800c3aa:	f010 0001 	ands.w	r0, r0, #1
 800c3ae:	d134      	bne.n	800c41a <SDMMC_CmdStopTransfer+0xda>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c3b0:	4a3b      	ldr	r2, [pc, #236]	; (800c4a0 <SDMMC_CmdStopTransfer+0x160>)
 800c3b2:	639a      	str	r2, [r3, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800c3b4:	691a      	ldr	r2, [r3, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800c3b6:	b2d2      	uxtb	r2, r2
 800c3b8:	2a0c      	cmp	r2, #12
 800c3ba:	d131      	bne.n	800c420 <SDMMC_CmdStopTransfer+0xe0>
  return (*(__IO uint32_t *) tmp);
 800c3bc:	695a      	ldr	r2, [r3, #20]
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800c3be:	4839      	ldr	r0, [pc, #228]	; (800c4a4 <SDMMC_CmdStopTransfer+0x164>)
 800c3c0:	4010      	ands	r0, r2
 800c3c2:	2800      	cmp	r0, #0
 800c3c4:	d0e7      	beq.n	800c396 <SDMMC_CmdStopTransfer+0x56>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800c3c6:	2a00      	cmp	r2, #0
 800c3c8:	db2f      	blt.n	800c42a <SDMMC_CmdStopTransfer+0xea>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800c3ca:	0051      	lsls	r1, r2, #1
 800c3cc:	d430      	bmi.n	800c430 <SDMMC_CmdStopTransfer+0xf0>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800c3ce:	0095      	lsls	r5, r2, #2
 800c3d0:	d430      	bmi.n	800c434 <SDMMC_CmdStopTransfer+0xf4>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800c3d2:	00d4      	lsls	r4, r2, #3
 800c3d4:	d430      	bmi.n	800c438 <SDMMC_CmdStopTransfer+0xf8>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800c3d6:	0111      	lsls	r1, r2, #4
 800c3d8:	d431      	bmi.n	800c43e <SDMMC_CmdStopTransfer+0xfe>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800c3da:	0155      	lsls	r5, r2, #5
 800c3dc:	d432      	bmi.n	800c444 <SDMMC_CmdStopTransfer+0x104>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800c3de:	01d4      	lsls	r4, r2, #7
 800c3e0:	d433      	bmi.n	800c44a <SDMMC_CmdStopTransfer+0x10a>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800c3e2:	0211      	lsls	r1, r2, #8
 800c3e4:	d434      	bmi.n	800c450 <SDMMC_CmdStopTransfer+0x110>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800c3e6:	0255      	lsls	r5, r2, #9
 800c3e8:	d435      	bmi.n	800c456 <SDMMC_CmdStopTransfer+0x116>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800c3ea:	0294      	lsls	r4, r2, #10
 800c3ec:	d436      	bmi.n	800c45c <SDMMC_CmdStopTransfer+0x11c>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800c3ee:	02d1      	lsls	r1, r2, #11
 800c3f0:	d437      	bmi.n	800c462 <SDMMC_CmdStopTransfer+0x122>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800c3f2:	0355      	lsls	r5, r2, #13
 800c3f4:	d438      	bmi.n	800c468 <SDMMC_CmdStopTransfer+0x128>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800c3f6:	0394      	lsls	r4, r2, #14
 800c3f8:	d439      	bmi.n	800c46e <SDMMC_CmdStopTransfer+0x12e>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800c3fa:	03d1      	lsls	r1, r2, #15
 800c3fc:	d43a      	bmi.n	800c474 <SDMMC_CmdStopTransfer+0x134>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800c3fe:	0415      	lsls	r5, r2, #16
 800c400:	d43b      	bmi.n	800c47a <SDMMC_CmdStopTransfer+0x13a>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800c402:	0454      	lsls	r4, r2, #17
 800c404:	d43f      	bmi.n	800c486 <SDMMC_CmdStopTransfer+0x146>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800c406:	0491      	lsls	r1, r2, #18
 800c408:	d43a      	bmi.n	800c480 <SDMMC_CmdStopTransfer+0x140>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800c40a:	f012 0f08 	tst.w	r2, #8
 800c40e:	bf14      	ite	ne
 800c410:	f44f 0000 	movne.w	r0, #8388608	; 0x800000
 800c414:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 800c418:	e7bd      	b.n	800c396 <SDMMC_CmdStopTransfer+0x56>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c41a:	2201      	movs	r2, #1
 800c41c:	639a      	str	r2, [r3, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c41e:	e7ba      	b.n	800c396 <SDMMC_CmdStopTransfer+0x56>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c420:	2001      	movs	r0, #1
 800c422:	e7b8      	b.n	800c396 <SDMMC_CmdStopTransfer+0x56>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c424:	2004      	movs	r0, #4
 800c426:	6398      	str	r0, [r3, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c428:	e7b5      	b.n	800c396 <SDMMC_CmdStopTransfer+0x56>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800c42a:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 800c42e:	e7b2      	b.n	800c396 <SDMMC_CmdStopTransfer+0x56>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800c430:	2040      	movs	r0, #64	; 0x40
 800c432:	e7b0      	b.n	800c396 <SDMMC_CmdStopTransfer+0x56>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800c434:	2080      	movs	r0, #128	; 0x80
 800c436:	e7ae      	b.n	800c396 <SDMMC_CmdStopTransfer+0x56>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800c438:	f44f 7080 	mov.w	r0, #256	; 0x100
 800c43c:	e7ab      	b.n	800c396 <SDMMC_CmdStopTransfer+0x56>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800c43e:	f44f 7000 	mov.w	r0, #512	; 0x200
 800c442:	e7a8      	b.n	800c396 <SDMMC_CmdStopTransfer+0x56>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800c444:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800c448:	e7a5      	b.n	800c396 <SDMMC_CmdStopTransfer+0x56>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800c44a:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800c44e:	e7a2      	b.n	800c396 <SDMMC_CmdStopTransfer+0x56>
    return SDMMC_ERROR_COM_CRC_FAILED;
 800c450:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800c454:	e79f      	b.n	800c396 <SDMMC_CmdStopTransfer+0x56>
    return SDMMC_ERROR_ILLEGAL_CMD;
 800c456:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800c45a:	e79c      	b.n	800c396 <SDMMC_CmdStopTransfer+0x56>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800c45c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800c460:	e799      	b.n	800c396 <SDMMC_CmdStopTransfer+0x56>
    return SDMMC_ERROR_CC_ERR;
 800c462:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800c466:	e796      	b.n	800c396 <SDMMC_CmdStopTransfer+0x56>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800c468:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800c46c:	e793      	b.n	800c396 <SDMMC_CmdStopTransfer+0x56>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800c46e:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800c472:	e790      	b.n	800c396 <SDMMC_CmdStopTransfer+0x56>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800c474:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800c478:	e78d      	b.n	800c396 <SDMMC_CmdStopTransfer+0x56>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800c47a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800c47e:	e78a      	b.n	800c396 <SDMMC_CmdStopTransfer+0x56>
    return SDMMC_ERROR_ERASE_RESET;
 800c480:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 800c484:	e787      	b.n	800c396 <SDMMC_CmdStopTransfer+0x56>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800c486:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800c48a:	e784      	b.n	800c396 <SDMMC_CmdStopTransfer+0x56>
 800c48c:	200000f8 	.word	0x200000f8
 800c490:	fffee0c0 	.word	0xfffee0c0
 800c494:	10624dd3 	.word	0x10624dd3
 800c498:	05f5e100 	.word	0x05f5e100
 800c49c:	00200045 	.word	0x00200045
 800c4a0:	002000c5 	.word	0x002000c5
 800c4a4:	fdffe008 	.word	0xfdffe008

0800c4a8 <SDMMC_CmdSelDesel>:
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800c4a8:	494d      	ldr	r1, [pc, #308]	; (800c5e0 <SDMMC_CmdSelDesel+0x138>)
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800c4aa:	4b4e      	ldr	r3, [pc, #312]	; (800c5e4 <SDMMC_CmdSelDesel+0x13c>)
{
 800c4ac:	b410      	push	{r4}
  SDMMCx->ARG = Command->Argument;
 800c4ae:	6082      	str	r2, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800c4b0:	68c4      	ldr	r4, [r0, #12]
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800c4b2:	680a      	ldr	r2, [r1, #0]
 800c4b4:	494c      	ldr	r1, [pc, #304]	; (800c5e8 <SDMMC_CmdSelDesel+0x140>)
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800c4b6:	4023      	ands	r3, r4
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800c4b8:	fba1 1202 	umull	r1, r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800c4bc:	f443 5388 	orr.w	r3, r3, #4352	; 0x1100
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800c4c0:	0a52      	lsrs	r2, r2, #9
 800c4c2:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800c4c6:	f043 0307 	orr.w	r3, r3, #7
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800c4ca:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800c4ce:	60c3      	str	r3, [r0, #12]
    if (count-- == 0U)
 800c4d0:	b152      	cbz	r2, 800c4e8 <SDMMC_CmdSelDesel+0x40>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800c4d2:	4946      	ldr	r1, [pc, #280]	; (800c5ec <SDMMC_CmdSelDesel+0x144>)
 800c4d4:	1e53      	subs	r3, r2, #1
    sta_reg = SDMMCx->STA;
 800c4d6:	6b42      	ldr	r2, [r0, #52]	; 0x34
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800c4d8:	420a      	tst	r2, r1
    if (count-- == 0U)
 800c4da:	f103 33ff 	add.w	r3, r3, #4294967295
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800c4de:	d001      	beq.n	800c4e4 <SDMMC_CmdSelDesel+0x3c>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800c4e0:	0492      	lsls	r2, r2, #18
 800c4e2:	d507      	bpl.n	800c4f4 <SDMMC_CmdSelDesel+0x4c>
    if (count-- == 0U)
 800c4e4:	1c5c      	adds	r4, r3, #1
 800c4e6:	d1f6      	bne.n	800c4d6 <SDMMC_CmdSelDesel+0x2e>
      return SDMMC_ERROR_TIMEOUT;
 800c4e8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 800c4ec:	4618      	mov	r0, r3
 800c4ee:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c4f2:	4770      	bx	lr
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c4f4:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800c4f6:	075c      	lsls	r4, r3, #29
 800c4f8:	d43d      	bmi.n	800c576 <SDMMC_CmdSelDesel+0xce>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c4fa:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800c4fc:	f013 0301 	ands.w	r3, r3, #1
 800c500:	d134      	bne.n	800c56c <SDMMC_CmdSelDesel+0xc4>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c502:	4b3b      	ldr	r3, [pc, #236]	; (800c5f0 <SDMMC_CmdSelDesel+0x148>)
 800c504:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800c506:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800c508:	b2db      	uxtb	r3, r3
 800c50a:	2b07      	cmp	r3, #7
 800c50c:	d131      	bne.n	800c572 <SDMMC_CmdSelDesel+0xca>
  return (*(__IO uint32_t *) tmp);
 800c50e:	6942      	ldr	r2, [r0, #20]
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800c510:	4b38      	ldr	r3, [pc, #224]	; (800c5f4 <SDMMC_CmdSelDesel+0x14c>)
 800c512:	4013      	ands	r3, r2
 800c514:	2b00      	cmp	r3, #0
 800c516:	d0e9      	beq.n	800c4ec <SDMMC_CmdSelDesel+0x44>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800c518:	2a00      	cmp	r2, #0
 800c51a:	db2f      	blt.n	800c57c <SDMMC_CmdSelDesel+0xd4>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800c51c:	0051      	lsls	r1, r2, #1
 800c51e:	d430      	bmi.n	800c582 <SDMMC_CmdSelDesel+0xda>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800c520:	0094      	lsls	r4, r2, #2
 800c522:	d430      	bmi.n	800c586 <SDMMC_CmdSelDesel+0xde>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800c524:	00d0      	lsls	r0, r2, #3
 800c526:	d430      	bmi.n	800c58a <SDMMC_CmdSelDesel+0xe2>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800c528:	0111      	lsls	r1, r2, #4
 800c52a:	d431      	bmi.n	800c590 <SDMMC_CmdSelDesel+0xe8>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800c52c:	0154      	lsls	r4, r2, #5
 800c52e:	d432      	bmi.n	800c596 <SDMMC_CmdSelDesel+0xee>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800c530:	01d0      	lsls	r0, r2, #7
 800c532:	d433      	bmi.n	800c59c <SDMMC_CmdSelDesel+0xf4>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800c534:	0211      	lsls	r1, r2, #8
 800c536:	d434      	bmi.n	800c5a2 <SDMMC_CmdSelDesel+0xfa>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800c538:	0254      	lsls	r4, r2, #9
 800c53a:	d435      	bmi.n	800c5a8 <SDMMC_CmdSelDesel+0x100>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800c53c:	0290      	lsls	r0, r2, #10
 800c53e:	d436      	bmi.n	800c5ae <SDMMC_CmdSelDesel+0x106>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800c540:	02d1      	lsls	r1, r2, #11
 800c542:	d437      	bmi.n	800c5b4 <SDMMC_CmdSelDesel+0x10c>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800c544:	0354      	lsls	r4, r2, #13
 800c546:	d438      	bmi.n	800c5ba <SDMMC_CmdSelDesel+0x112>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800c548:	0390      	lsls	r0, r2, #14
 800c54a:	d439      	bmi.n	800c5c0 <SDMMC_CmdSelDesel+0x118>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800c54c:	03d1      	lsls	r1, r2, #15
 800c54e:	d43a      	bmi.n	800c5c6 <SDMMC_CmdSelDesel+0x11e>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800c550:	0414      	lsls	r4, r2, #16
 800c552:	d43b      	bmi.n	800c5cc <SDMMC_CmdSelDesel+0x124>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800c554:	0450      	lsls	r0, r2, #17
 800c556:	d43f      	bmi.n	800c5d8 <SDMMC_CmdSelDesel+0x130>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800c558:	0491      	lsls	r1, r2, #18
 800c55a:	d43a      	bmi.n	800c5d2 <SDMMC_CmdSelDesel+0x12a>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800c55c:	f012 0f08 	tst.w	r2, #8
 800c560:	bf14      	ite	ne
 800c562:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
 800c566:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 800c56a:	e7bf      	b.n	800c4ec <SDMMC_CmdSelDesel+0x44>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c56c:	2201      	movs	r2, #1
 800c56e:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c570:	e7bc      	b.n	800c4ec <SDMMC_CmdSelDesel+0x44>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c572:	2301      	movs	r3, #1
 800c574:	e7ba      	b.n	800c4ec <SDMMC_CmdSelDesel+0x44>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c576:	2304      	movs	r3, #4
 800c578:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c57a:	e7b7      	b.n	800c4ec <SDMMC_CmdSelDesel+0x44>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800c57c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800c580:	e7b4      	b.n	800c4ec <SDMMC_CmdSelDesel+0x44>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800c582:	2340      	movs	r3, #64	; 0x40
 800c584:	e7b2      	b.n	800c4ec <SDMMC_CmdSelDesel+0x44>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800c586:	2380      	movs	r3, #128	; 0x80
 800c588:	e7b0      	b.n	800c4ec <SDMMC_CmdSelDesel+0x44>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800c58a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c58e:	e7ad      	b.n	800c4ec <SDMMC_CmdSelDesel+0x44>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800c590:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c594:	e7aa      	b.n	800c4ec <SDMMC_CmdSelDesel+0x44>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800c596:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c59a:	e7a7      	b.n	800c4ec <SDMMC_CmdSelDesel+0x44>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800c59c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c5a0:	e7a4      	b.n	800c4ec <SDMMC_CmdSelDesel+0x44>
    return SDMMC_ERROR_COM_CRC_FAILED;
 800c5a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c5a6:	e7a1      	b.n	800c4ec <SDMMC_CmdSelDesel+0x44>
    return SDMMC_ERROR_ILLEGAL_CMD;
 800c5a8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800c5ac:	e79e      	b.n	800c4ec <SDMMC_CmdSelDesel+0x44>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800c5ae:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800c5b2:	e79b      	b.n	800c4ec <SDMMC_CmdSelDesel+0x44>
    return SDMMC_ERROR_CC_ERR;
 800c5b4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c5b8:	e798      	b.n	800c4ec <SDMMC_CmdSelDesel+0x44>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800c5ba:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800c5be:	e795      	b.n	800c4ec <SDMMC_CmdSelDesel+0x44>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800c5c0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800c5c4:	e792      	b.n	800c4ec <SDMMC_CmdSelDesel+0x44>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800c5c6:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800c5ca:	e78f      	b.n	800c4ec <SDMMC_CmdSelDesel+0x44>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800c5cc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800c5d0:	e78c      	b.n	800c4ec <SDMMC_CmdSelDesel+0x44>
    return SDMMC_ERROR_ERASE_RESET;
 800c5d2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800c5d6:	e789      	b.n	800c4ec <SDMMC_CmdSelDesel+0x44>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800c5d8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800c5dc:	e786      	b.n	800c4ec <SDMMC_CmdSelDesel+0x44>
 800c5de:	bf00      	nop
 800c5e0:	200000f8 	.word	0x200000f8
 800c5e4:	fffee0c0 	.word	0xfffee0c0
 800c5e8:	10624dd3 	.word	0x10624dd3
 800c5ec:	00200045 	.word	0x00200045
 800c5f0:	002000c5 	.word	0x002000c5
 800c5f4:	fdffe008 	.word	0xfdffe008

0800c5f8 <SDMMC_CmdGoIdleState>:
  SDMMCx->ARG = Command->Argument;
 800c5f8:	2200      	movs	r2, #0
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c5fa:	4b11      	ldr	r3, [pc, #68]	; (800c640 <SDMMC_CmdGoIdleState+0x48>)
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800c5fc:	4911      	ldr	r1, [pc, #68]	; (800c644 <SDMMC_CmdGoIdleState+0x4c>)
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c5fe:	681b      	ldr	r3, [r3, #0]
{
 800c600:	b410      	push	{r4}
  SDMMCx->ARG = Command->Argument;
 800c602:	6082      	str	r2, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800c604:	68c4      	ldr	r4, [r0, #12]
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c606:	4a10      	ldr	r2, [pc, #64]	; (800c648 <SDMMC_CmdGoIdleState+0x50>)
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800c608:	4021      	ands	r1, r4
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c60a:	fba2 2303 	umull	r2, r3, r2, r3
 800c60e:	0a5a      	lsrs	r2, r3, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800c610:	f441 5180 	orr.w	r1, r1, #4096	; 0x1000
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c614:	f241 3388 	movw	r3, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800c618:	60c1      	str	r1, [r0, #12]
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c61a:	fb03 f302 	mul.w	r3, r3, r2
 800c61e:	e002      	b.n	800c626 <SDMMC_CmdGoIdleState+0x2e>
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800c620:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800c622:	0612      	lsls	r2, r2, #24
 800c624:	d406      	bmi.n	800c634 <SDMMC_CmdGoIdleState+0x3c>
    if (count-- == 0U)
 800c626:	3b01      	subs	r3, #1
 800c628:	d2fa      	bcs.n	800c620 <SDMMC_CmdGoIdleState+0x28>
      return SDMMC_ERROR_TIMEOUT;
 800c62a:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 800c62e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c632:	4770      	bx	lr
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c634:	4b05      	ldr	r3, [pc, #20]	; (800c64c <SDMMC_CmdGoIdleState+0x54>)
 800c636:	6383      	str	r3, [r0, #56]	; 0x38
}
 800c638:	f85d 4b04 	ldr.w	r4, [sp], #4
  return SDMMC_ERROR_NONE;
 800c63c:	2000      	movs	r0, #0
}
 800c63e:	4770      	bx	lr
 800c640:	200000f8 	.word	0x200000f8
 800c644:	fffee0c0 	.word	0xfffee0c0
 800c648:	10624dd3 	.word	0x10624dd3
 800c64c:	002000c5 	.word	0x002000c5

0800c650 <SDMMC_CmdOperCond>:
  SDMMCx->ARG = Command->Argument;
 800c650:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c654:	491c      	ldr	r1, [pc, #112]	; (800c6c8 <SDMMC_CmdOperCond+0x78>)
{
 800c656:	b410      	push	{r4}
  SDMMCx->ARG = Command->Argument;
 800c658:	6083      	str	r3, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800c65a:	68c4      	ldr	r4, [r0, #12]
 800c65c:	4b1b      	ldr	r3, [pc, #108]	; (800c6cc <SDMMC_CmdOperCond+0x7c>)
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c65e:	6809      	ldr	r1, [r1, #0]
{
 800c660:	4602      	mov	r2, r0
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c662:	481b      	ldr	r0, [pc, #108]	; (800c6d0 <SDMMC_CmdOperCond+0x80>)
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800c664:	4023      	ands	r3, r4
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c666:	fba0 0101 	umull	r0, r1, r0, r1
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800c66a:	f443 5388 	orr.w	r3, r3, #4352	; 0x1100
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c66e:	0a49      	lsrs	r1, r1, #9
 800c670:	f241 3088 	movw	r0, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800c674:	f043 0308 	orr.w	r3, r3, #8
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c678:	fb00 f101 	mul.w	r1, r0, r1
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800c67c:	60d3      	str	r3, [r2, #12]

  do
  {
    if (count-- == 0U)
 800c67e:	1e4b      	subs	r3, r1, #1
 800c680:	b149      	cbz	r1, 800c696 <SDMMC_CmdOperCond+0x46>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    sta_reg = SDMMCx->STA;
 800c682:	6b51      	ldr	r1, [r2, #52]	; 0x34
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800c684:	f011 0f45 	tst.w	r1, #69	; 0x45
    if (count-- == 0U)
 800c688:	f103 33ff 	add.w	r3, r3, #4294967295
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800c68c:	d001      	beq.n	800c692 <SDMMC_CmdOperCond+0x42>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c68e:	0488      	lsls	r0, r1, #18
 800c690:	d506      	bpl.n	800c6a0 <SDMMC_CmdOperCond+0x50>
    if (count-- == 0U)
 800c692:	1c5c      	adds	r4, r3, #1
 800c694:	d1f5      	bne.n	800c682 <SDMMC_CmdOperCond+0x32>
      return SDMMC_ERROR_TIMEOUT;
 800c696:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 800c69a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c69e:	4770      	bx	lr

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c6a0:	6b53      	ldr	r3, [r2, #52]	; 0x34
 800c6a2:	0759      	lsls	r1, r3, #29
 800c6a4:	d40c      	bmi.n	800c6c0 <SDMMC_CmdOperCond+0x70>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
  }

  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c6a6:	6b50      	ldr	r0, [r2, #52]	; 0x34
 800c6a8:	f010 0001 	ands.w	r0, r0, #1
 800c6ac:	d105      	bne.n	800c6ba <SDMMC_CmdOperCond+0x6a>
  else
  {
    /* Nothing to do */
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800c6ae:	6b53      	ldr	r3, [r2, #52]	; 0x34
 800c6b0:	065b      	lsls	r3, r3, #25
 800c6b2:	d5f2      	bpl.n	800c69a <SDMMC_CmdOperCond+0x4a>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800c6b4:	2340      	movs	r3, #64	; 0x40
 800c6b6:	6393      	str	r3, [r2, #56]	; 0x38
 800c6b8:	e7ef      	b.n	800c69a <SDMMC_CmdOperCond+0x4a>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c6ba:	2301      	movs	r3, #1
 800c6bc:	6393      	str	r3, [r2, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c6be:	e7ec      	b.n	800c69a <SDMMC_CmdOperCond+0x4a>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c6c0:	2004      	movs	r0, #4
 800c6c2:	6390      	str	r0, [r2, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c6c4:	e7e9      	b.n	800c69a <SDMMC_CmdOperCond+0x4a>
 800c6c6:	bf00      	nop
 800c6c8:	200000f8 	.word	0x200000f8
 800c6cc:	fffee0c0 	.word	0xfffee0c0
 800c6d0:	10624dd3 	.word	0x10624dd3

0800c6d4 <SDMMC_CmdAppCommand>:
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800c6d4:	4a4d      	ldr	r2, [pc, #308]	; (800c80c <SDMMC_CmdAppCommand+0x138>)
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800c6d6:	4b4e      	ldr	r3, [pc, #312]	; (800c810 <SDMMC_CmdAppCommand+0x13c>)
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800c6d8:	6812      	ldr	r2, [r2, #0]
{
 800c6da:	b410      	push	{r4}
  SDMMCx->ARG = Command->Argument;
 800c6dc:	6081      	str	r1, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800c6de:	68c4      	ldr	r4, [r0, #12]
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800c6e0:	494c      	ldr	r1, [pc, #304]	; (800c814 <SDMMC_CmdAppCommand+0x140>)
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800c6e2:	4023      	ands	r3, r4
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800c6e4:	fba1 1202 	umull	r1, r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800c6e8:	f443 5389 	orr.w	r3, r3, #4384	; 0x1120
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800c6ec:	0a52      	lsrs	r2, r2, #9
 800c6ee:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800c6f2:	f043 0317 	orr.w	r3, r3, #23
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800c6f6:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800c6fa:	60c3      	str	r3, [r0, #12]
    if (count-- == 0U)
 800c6fc:	b152      	cbz	r2, 800c714 <SDMMC_CmdAppCommand+0x40>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800c6fe:	4946      	ldr	r1, [pc, #280]	; (800c818 <SDMMC_CmdAppCommand+0x144>)
 800c700:	1e53      	subs	r3, r2, #1
    sta_reg = SDMMCx->STA;
 800c702:	6b42      	ldr	r2, [r0, #52]	; 0x34
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800c704:	420a      	tst	r2, r1
    if (count-- == 0U)
 800c706:	f103 33ff 	add.w	r3, r3, #4294967295
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800c70a:	d001      	beq.n	800c710 <SDMMC_CmdAppCommand+0x3c>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800c70c:	0492      	lsls	r2, r2, #18
 800c70e:	d507      	bpl.n	800c720 <SDMMC_CmdAppCommand+0x4c>
    if (count-- == 0U)
 800c710:	1c5c      	adds	r4, r3, #1
 800c712:	d1f6      	bne.n	800c702 <SDMMC_CmdAppCommand+0x2e>
      return SDMMC_ERROR_TIMEOUT;
 800c714:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 800c718:	4618      	mov	r0, r3
 800c71a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c71e:	4770      	bx	lr
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c720:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800c722:	075c      	lsls	r4, r3, #29
 800c724:	d43d      	bmi.n	800c7a2 <SDMMC_CmdAppCommand+0xce>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c726:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800c728:	f013 0301 	ands.w	r3, r3, #1
 800c72c:	d134      	bne.n	800c798 <SDMMC_CmdAppCommand+0xc4>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c72e:	4b3b      	ldr	r3, [pc, #236]	; (800c81c <SDMMC_CmdAppCommand+0x148>)
 800c730:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800c732:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800c734:	b2db      	uxtb	r3, r3
 800c736:	2b37      	cmp	r3, #55	; 0x37
 800c738:	d131      	bne.n	800c79e <SDMMC_CmdAppCommand+0xca>
  return (*(__IO uint32_t *) tmp);
 800c73a:	6942      	ldr	r2, [r0, #20]
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800c73c:	4b38      	ldr	r3, [pc, #224]	; (800c820 <SDMMC_CmdAppCommand+0x14c>)
 800c73e:	4013      	ands	r3, r2
 800c740:	2b00      	cmp	r3, #0
 800c742:	d0e9      	beq.n	800c718 <SDMMC_CmdAppCommand+0x44>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800c744:	2a00      	cmp	r2, #0
 800c746:	db2f      	blt.n	800c7a8 <SDMMC_CmdAppCommand+0xd4>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800c748:	0051      	lsls	r1, r2, #1
 800c74a:	d430      	bmi.n	800c7ae <SDMMC_CmdAppCommand+0xda>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800c74c:	0094      	lsls	r4, r2, #2
 800c74e:	d430      	bmi.n	800c7b2 <SDMMC_CmdAppCommand+0xde>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800c750:	00d0      	lsls	r0, r2, #3
 800c752:	d430      	bmi.n	800c7b6 <SDMMC_CmdAppCommand+0xe2>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800c754:	0111      	lsls	r1, r2, #4
 800c756:	d431      	bmi.n	800c7bc <SDMMC_CmdAppCommand+0xe8>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800c758:	0154      	lsls	r4, r2, #5
 800c75a:	d432      	bmi.n	800c7c2 <SDMMC_CmdAppCommand+0xee>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800c75c:	01d0      	lsls	r0, r2, #7
 800c75e:	d433      	bmi.n	800c7c8 <SDMMC_CmdAppCommand+0xf4>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800c760:	0211      	lsls	r1, r2, #8
 800c762:	d434      	bmi.n	800c7ce <SDMMC_CmdAppCommand+0xfa>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800c764:	0254      	lsls	r4, r2, #9
 800c766:	d435      	bmi.n	800c7d4 <SDMMC_CmdAppCommand+0x100>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800c768:	0290      	lsls	r0, r2, #10
 800c76a:	d436      	bmi.n	800c7da <SDMMC_CmdAppCommand+0x106>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800c76c:	02d1      	lsls	r1, r2, #11
 800c76e:	d437      	bmi.n	800c7e0 <SDMMC_CmdAppCommand+0x10c>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800c770:	0354      	lsls	r4, r2, #13
 800c772:	d438      	bmi.n	800c7e6 <SDMMC_CmdAppCommand+0x112>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800c774:	0390      	lsls	r0, r2, #14
 800c776:	d439      	bmi.n	800c7ec <SDMMC_CmdAppCommand+0x118>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800c778:	03d1      	lsls	r1, r2, #15
 800c77a:	d43a      	bmi.n	800c7f2 <SDMMC_CmdAppCommand+0x11e>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800c77c:	0414      	lsls	r4, r2, #16
 800c77e:	d43b      	bmi.n	800c7f8 <SDMMC_CmdAppCommand+0x124>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800c780:	0450      	lsls	r0, r2, #17
 800c782:	d43f      	bmi.n	800c804 <SDMMC_CmdAppCommand+0x130>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800c784:	0491      	lsls	r1, r2, #18
 800c786:	d43a      	bmi.n	800c7fe <SDMMC_CmdAppCommand+0x12a>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800c788:	f012 0f08 	tst.w	r2, #8
 800c78c:	bf14      	ite	ne
 800c78e:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
 800c792:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 800c796:	e7bf      	b.n	800c718 <SDMMC_CmdAppCommand+0x44>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c798:	2201      	movs	r2, #1
 800c79a:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c79c:	e7bc      	b.n	800c718 <SDMMC_CmdAppCommand+0x44>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c79e:	2301      	movs	r3, #1
 800c7a0:	e7ba      	b.n	800c718 <SDMMC_CmdAppCommand+0x44>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c7a2:	2304      	movs	r3, #4
 800c7a4:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c7a6:	e7b7      	b.n	800c718 <SDMMC_CmdAppCommand+0x44>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800c7a8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800c7ac:	e7b4      	b.n	800c718 <SDMMC_CmdAppCommand+0x44>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800c7ae:	2340      	movs	r3, #64	; 0x40
 800c7b0:	e7b2      	b.n	800c718 <SDMMC_CmdAppCommand+0x44>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800c7b2:	2380      	movs	r3, #128	; 0x80
 800c7b4:	e7b0      	b.n	800c718 <SDMMC_CmdAppCommand+0x44>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800c7b6:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c7ba:	e7ad      	b.n	800c718 <SDMMC_CmdAppCommand+0x44>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800c7bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c7c0:	e7aa      	b.n	800c718 <SDMMC_CmdAppCommand+0x44>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800c7c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c7c6:	e7a7      	b.n	800c718 <SDMMC_CmdAppCommand+0x44>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800c7c8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c7cc:	e7a4      	b.n	800c718 <SDMMC_CmdAppCommand+0x44>
    return SDMMC_ERROR_COM_CRC_FAILED;
 800c7ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c7d2:	e7a1      	b.n	800c718 <SDMMC_CmdAppCommand+0x44>
    return SDMMC_ERROR_ILLEGAL_CMD;
 800c7d4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800c7d8:	e79e      	b.n	800c718 <SDMMC_CmdAppCommand+0x44>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800c7da:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800c7de:	e79b      	b.n	800c718 <SDMMC_CmdAppCommand+0x44>
    return SDMMC_ERROR_CC_ERR;
 800c7e0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c7e4:	e798      	b.n	800c718 <SDMMC_CmdAppCommand+0x44>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800c7e6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800c7ea:	e795      	b.n	800c718 <SDMMC_CmdAppCommand+0x44>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800c7ec:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800c7f0:	e792      	b.n	800c718 <SDMMC_CmdAppCommand+0x44>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800c7f2:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800c7f6:	e78f      	b.n	800c718 <SDMMC_CmdAppCommand+0x44>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800c7f8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800c7fc:	e78c      	b.n	800c718 <SDMMC_CmdAppCommand+0x44>
    return SDMMC_ERROR_ERASE_RESET;
 800c7fe:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800c802:	e789      	b.n	800c718 <SDMMC_CmdAppCommand+0x44>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800c804:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800c808:	e786      	b.n	800c718 <SDMMC_CmdAppCommand+0x44>
 800c80a:	bf00      	nop
 800c80c:	200000f8 	.word	0x200000f8
 800c810:	fffee0c0 	.word	0xfffee0c0
 800c814:	10624dd3 	.word	0x10624dd3
 800c818:	00200045 	.word	0x00200045
 800c81c:	002000c5 	.word	0x002000c5
 800c820:	fdffe008 	.word	0xfdffe008

0800c824 <SDMMC_CmdAppOperCommand>:
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c824:	4a18      	ldr	r2, [pc, #96]	; (800c888 <SDMMC_CmdAppOperCommand+0x64>)
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800c826:	4b19      	ldr	r3, [pc, #100]	; (800c88c <SDMMC_CmdAppOperCommand+0x68>)
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c828:	6812      	ldr	r2, [r2, #0]
{
 800c82a:	b410      	push	{r4}
  SDMMCx->ARG = Command->Argument;
 800c82c:	6081      	str	r1, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800c82e:	68c4      	ldr	r4, [r0, #12]
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c830:	4917      	ldr	r1, [pc, #92]	; (800c890 <SDMMC_CmdAppOperCommand+0x6c>)
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800c832:	4023      	ands	r3, r4
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c834:	fba1 1202 	umull	r1, r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800c838:	f443 5389 	orr.w	r3, r3, #4384	; 0x1120
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c83c:	0a52      	lsrs	r2, r2, #9
 800c83e:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800c842:	f043 0309 	orr.w	r3, r3, #9
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c846:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800c84a:	60c3      	str	r3, [r0, #12]
    if (count-- == 0U)
 800c84c:	1e53      	subs	r3, r2, #1
 800c84e:	b14a      	cbz	r2, 800c864 <SDMMC_CmdAppOperCommand+0x40>
    sta_reg = SDMMCx->STA;
 800c850:	6b42      	ldr	r2, [r0, #52]	; 0x34
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800c852:	f012 0f45 	tst.w	r2, #69	; 0x45
    if (count-- == 0U)
 800c856:	f103 33ff 	add.w	r3, r3, #4294967295
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800c85a:	d001      	beq.n	800c860 <SDMMC_CmdAppOperCommand+0x3c>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c85c:	0492      	lsls	r2, r2, #18
 800c85e:	d507      	bpl.n	800c870 <SDMMC_CmdAppOperCommand+0x4c>
    if (count-- == 0U)
 800c860:	1c59      	adds	r1, r3, #1
 800c862:	d1f5      	bne.n	800c850 <SDMMC_CmdAppOperCommand+0x2c>
      return SDMMC_ERROR_TIMEOUT;
 800c864:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 800c868:	4618      	mov	r0, r3
 800c86a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c86e:	4770      	bx	lr
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c870:	6b43      	ldr	r3, [r0, #52]	; 0x34
}
 800c872:	f85d 4b04 	ldr.w	r4, [sp], #4
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c876:	f013 0304 	ands.w	r3, r3, #4
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c87a:	bf15      	itete	ne
 800c87c:	2304      	movne	r3, #4
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c87e:	4a05      	ldreq	r2, [pc, #20]	; (800c894 <SDMMC_CmdAppOperCommand+0x70>)
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c880:	6383      	strne	r3, [r0, #56]	; 0x38
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c882:	6382      	streq	r2, [r0, #56]	; 0x38
}
 800c884:	4618      	mov	r0, r3
 800c886:	4770      	bx	lr
 800c888:	200000f8 	.word	0x200000f8
 800c88c:	fffee0c0 	.word	0xfffee0c0
 800c890:	10624dd3 	.word	0x10624dd3
 800c894:	002000c5 	.word	0x002000c5

0800c898 <SDMMC_CmdBusWidth>:
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800c898:	4a4d      	ldr	r2, [pc, #308]	; (800c9d0 <SDMMC_CmdBusWidth+0x138>)
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800c89a:	4b4e      	ldr	r3, [pc, #312]	; (800c9d4 <SDMMC_CmdBusWidth+0x13c>)
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800c89c:	6812      	ldr	r2, [r2, #0]
{
 800c89e:	b410      	push	{r4}
  SDMMCx->ARG = Command->Argument;
 800c8a0:	6081      	str	r1, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800c8a2:	68c4      	ldr	r4, [r0, #12]
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800c8a4:	494c      	ldr	r1, [pc, #304]	; (800c9d8 <SDMMC_CmdBusWidth+0x140>)
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800c8a6:	4023      	ands	r3, r4
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800c8a8:	fba1 1202 	umull	r1, r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800c8ac:	f443 5388 	orr.w	r3, r3, #4352	; 0x1100
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800c8b0:	0a52      	lsrs	r2, r2, #9
 800c8b2:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800c8b6:	f043 0306 	orr.w	r3, r3, #6
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800c8ba:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800c8be:	60c3      	str	r3, [r0, #12]
    if (count-- == 0U)
 800c8c0:	b152      	cbz	r2, 800c8d8 <SDMMC_CmdBusWidth+0x40>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800c8c2:	4946      	ldr	r1, [pc, #280]	; (800c9dc <SDMMC_CmdBusWidth+0x144>)
 800c8c4:	1e53      	subs	r3, r2, #1
    sta_reg = SDMMCx->STA;
 800c8c6:	6b42      	ldr	r2, [r0, #52]	; 0x34
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800c8c8:	420a      	tst	r2, r1
    if (count-- == 0U)
 800c8ca:	f103 33ff 	add.w	r3, r3, #4294967295
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800c8ce:	d001      	beq.n	800c8d4 <SDMMC_CmdBusWidth+0x3c>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800c8d0:	0492      	lsls	r2, r2, #18
 800c8d2:	d507      	bpl.n	800c8e4 <SDMMC_CmdBusWidth+0x4c>
    if (count-- == 0U)
 800c8d4:	1c5c      	adds	r4, r3, #1
 800c8d6:	d1f6      	bne.n	800c8c6 <SDMMC_CmdBusWidth+0x2e>
      return SDMMC_ERROR_TIMEOUT;
 800c8d8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 800c8dc:	4618      	mov	r0, r3
 800c8de:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c8e2:	4770      	bx	lr
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c8e4:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800c8e6:	075c      	lsls	r4, r3, #29
 800c8e8:	d43d      	bmi.n	800c966 <SDMMC_CmdBusWidth+0xce>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c8ea:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800c8ec:	f013 0301 	ands.w	r3, r3, #1
 800c8f0:	d134      	bne.n	800c95c <SDMMC_CmdBusWidth+0xc4>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c8f2:	4b3b      	ldr	r3, [pc, #236]	; (800c9e0 <SDMMC_CmdBusWidth+0x148>)
 800c8f4:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800c8f6:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800c8f8:	b2db      	uxtb	r3, r3
 800c8fa:	2b06      	cmp	r3, #6
 800c8fc:	d131      	bne.n	800c962 <SDMMC_CmdBusWidth+0xca>
  return (*(__IO uint32_t *) tmp);
 800c8fe:	6942      	ldr	r2, [r0, #20]
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800c900:	4b38      	ldr	r3, [pc, #224]	; (800c9e4 <SDMMC_CmdBusWidth+0x14c>)
 800c902:	4013      	ands	r3, r2
 800c904:	2b00      	cmp	r3, #0
 800c906:	d0e9      	beq.n	800c8dc <SDMMC_CmdBusWidth+0x44>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800c908:	2a00      	cmp	r2, #0
 800c90a:	db2f      	blt.n	800c96c <SDMMC_CmdBusWidth+0xd4>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800c90c:	0051      	lsls	r1, r2, #1
 800c90e:	d430      	bmi.n	800c972 <SDMMC_CmdBusWidth+0xda>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800c910:	0094      	lsls	r4, r2, #2
 800c912:	d430      	bmi.n	800c976 <SDMMC_CmdBusWidth+0xde>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800c914:	00d0      	lsls	r0, r2, #3
 800c916:	d430      	bmi.n	800c97a <SDMMC_CmdBusWidth+0xe2>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800c918:	0111      	lsls	r1, r2, #4
 800c91a:	d431      	bmi.n	800c980 <SDMMC_CmdBusWidth+0xe8>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800c91c:	0154      	lsls	r4, r2, #5
 800c91e:	d432      	bmi.n	800c986 <SDMMC_CmdBusWidth+0xee>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800c920:	01d0      	lsls	r0, r2, #7
 800c922:	d433      	bmi.n	800c98c <SDMMC_CmdBusWidth+0xf4>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800c924:	0211      	lsls	r1, r2, #8
 800c926:	d434      	bmi.n	800c992 <SDMMC_CmdBusWidth+0xfa>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800c928:	0254      	lsls	r4, r2, #9
 800c92a:	d435      	bmi.n	800c998 <SDMMC_CmdBusWidth+0x100>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800c92c:	0290      	lsls	r0, r2, #10
 800c92e:	d436      	bmi.n	800c99e <SDMMC_CmdBusWidth+0x106>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800c930:	02d1      	lsls	r1, r2, #11
 800c932:	d437      	bmi.n	800c9a4 <SDMMC_CmdBusWidth+0x10c>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800c934:	0354      	lsls	r4, r2, #13
 800c936:	d438      	bmi.n	800c9aa <SDMMC_CmdBusWidth+0x112>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800c938:	0390      	lsls	r0, r2, #14
 800c93a:	d439      	bmi.n	800c9b0 <SDMMC_CmdBusWidth+0x118>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800c93c:	03d1      	lsls	r1, r2, #15
 800c93e:	d43a      	bmi.n	800c9b6 <SDMMC_CmdBusWidth+0x11e>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800c940:	0414      	lsls	r4, r2, #16
 800c942:	d43b      	bmi.n	800c9bc <SDMMC_CmdBusWidth+0x124>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800c944:	0450      	lsls	r0, r2, #17
 800c946:	d43f      	bmi.n	800c9c8 <SDMMC_CmdBusWidth+0x130>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800c948:	0491      	lsls	r1, r2, #18
 800c94a:	d43a      	bmi.n	800c9c2 <SDMMC_CmdBusWidth+0x12a>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800c94c:	f012 0f08 	tst.w	r2, #8
 800c950:	bf14      	ite	ne
 800c952:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
 800c956:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 800c95a:	e7bf      	b.n	800c8dc <SDMMC_CmdBusWidth+0x44>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c95c:	2201      	movs	r2, #1
 800c95e:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c960:	e7bc      	b.n	800c8dc <SDMMC_CmdBusWidth+0x44>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c962:	2301      	movs	r3, #1
 800c964:	e7ba      	b.n	800c8dc <SDMMC_CmdBusWidth+0x44>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c966:	2304      	movs	r3, #4
 800c968:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c96a:	e7b7      	b.n	800c8dc <SDMMC_CmdBusWidth+0x44>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800c96c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800c970:	e7b4      	b.n	800c8dc <SDMMC_CmdBusWidth+0x44>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800c972:	2340      	movs	r3, #64	; 0x40
 800c974:	e7b2      	b.n	800c8dc <SDMMC_CmdBusWidth+0x44>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800c976:	2380      	movs	r3, #128	; 0x80
 800c978:	e7b0      	b.n	800c8dc <SDMMC_CmdBusWidth+0x44>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800c97a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c97e:	e7ad      	b.n	800c8dc <SDMMC_CmdBusWidth+0x44>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800c980:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c984:	e7aa      	b.n	800c8dc <SDMMC_CmdBusWidth+0x44>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800c986:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c98a:	e7a7      	b.n	800c8dc <SDMMC_CmdBusWidth+0x44>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800c98c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c990:	e7a4      	b.n	800c8dc <SDMMC_CmdBusWidth+0x44>
    return SDMMC_ERROR_COM_CRC_FAILED;
 800c992:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c996:	e7a1      	b.n	800c8dc <SDMMC_CmdBusWidth+0x44>
    return SDMMC_ERROR_ILLEGAL_CMD;
 800c998:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800c99c:	e79e      	b.n	800c8dc <SDMMC_CmdBusWidth+0x44>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800c99e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800c9a2:	e79b      	b.n	800c8dc <SDMMC_CmdBusWidth+0x44>
    return SDMMC_ERROR_CC_ERR;
 800c9a4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c9a8:	e798      	b.n	800c8dc <SDMMC_CmdBusWidth+0x44>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800c9aa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800c9ae:	e795      	b.n	800c8dc <SDMMC_CmdBusWidth+0x44>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800c9b0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800c9b4:	e792      	b.n	800c8dc <SDMMC_CmdBusWidth+0x44>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800c9b6:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800c9ba:	e78f      	b.n	800c8dc <SDMMC_CmdBusWidth+0x44>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800c9bc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800c9c0:	e78c      	b.n	800c8dc <SDMMC_CmdBusWidth+0x44>
    return SDMMC_ERROR_ERASE_RESET;
 800c9c2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800c9c6:	e789      	b.n	800c8dc <SDMMC_CmdBusWidth+0x44>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800c9c8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800c9cc:	e786      	b.n	800c8dc <SDMMC_CmdBusWidth+0x44>
 800c9ce:	bf00      	nop
 800c9d0:	200000f8 	.word	0x200000f8
 800c9d4:	fffee0c0 	.word	0xfffee0c0
 800c9d8:	10624dd3 	.word	0x10624dd3
 800c9dc:	00200045 	.word	0x00200045
 800c9e0:	002000c5 	.word	0x002000c5
 800c9e4:	fdffe008 	.word	0xfdffe008

0800c9e8 <SDMMC_CmdSendSCR>:
  SDMMCx->ARG = Command->Argument;
 800c9e8:	2300      	movs	r3, #0
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800c9ea:	4a4d      	ldr	r2, [pc, #308]	; (800cb20 <SDMMC_CmdSendSCR+0x138>)
 800c9ec:	494d      	ldr	r1, [pc, #308]	; (800cb24 <SDMMC_CmdSendSCR+0x13c>)
 800c9ee:	6812      	ldr	r2, [r2, #0]
{
 800c9f0:	b410      	push	{r4}
  SDMMCx->ARG = Command->Argument;
 800c9f2:	6083      	str	r3, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800c9f4:	68c4      	ldr	r4, [r0, #12]
 800c9f6:	4b4c      	ldr	r3, [pc, #304]	; (800cb28 <SDMMC_CmdSendSCR+0x140>)
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800c9f8:	fba1 1202 	umull	r1, r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800c9fc:	4023      	ands	r3, r4
 800c9fe:	f443 5389 	orr.w	r3, r3, #4384	; 0x1120
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800ca02:	0a52      	lsrs	r2, r2, #9
 800ca04:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800ca08:	f043 0313 	orr.w	r3, r3, #19
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800ca0c:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800ca10:	60c3      	str	r3, [r0, #12]
    if (count-- == 0U)
 800ca12:	b152      	cbz	r2, 800ca2a <SDMMC_CmdSendSCR+0x42>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800ca14:	4945      	ldr	r1, [pc, #276]	; (800cb2c <SDMMC_CmdSendSCR+0x144>)
 800ca16:	1e53      	subs	r3, r2, #1
    sta_reg = SDMMCx->STA;
 800ca18:	6b42      	ldr	r2, [r0, #52]	; 0x34
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800ca1a:	420a      	tst	r2, r1
    if (count-- == 0U)
 800ca1c:	f103 33ff 	add.w	r3, r3, #4294967295
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800ca20:	d001      	beq.n	800ca26 <SDMMC_CmdSendSCR+0x3e>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800ca22:	0492      	lsls	r2, r2, #18
 800ca24:	d507      	bpl.n	800ca36 <SDMMC_CmdSendSCR+0x4e>
    if (count-- == 0U)
 800ca26:	1c5c      	adds	r4, r3, #1
 800ca28:	d1f6      	bne.n	800ca18 <SDMMC_CmdSendSCR+0x30>
      return SDMMC_ERROR_TIMEOUT;
 800ca2a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 800ca2e:	4618      	mov	r0, r3
 800ca30:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ca34:	4770      	bx	lr
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800ca36:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800ca38:	075c      	lsls	r4, r3, #29
 800ca3a:	d43d      	bmi.n	800cab8 <SDMMC_CmdSendSCR+0xd0>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800ca3c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800ca3e:	f013 0301 	ands.w	r3, r3, #1
 800ca42:	d134      	bne.n	800caae <SDMMC_CmdSendSCR+0xc6>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800ca44:	4b3a      	ldr	r3, [pc, #232]	; (800cb30 <SDMMC_CmdSendSCR+0x148>)
 800ca46:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800ca48:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800ca4a:	b2db      	uxtb	r3, r3
 800ca4c:	2b33      	cmp	r3, #51	; 0x33
 800ca4e:	d131      	bne.n	800cab4 <SDMMC_CmdSendSCR+0xcc>
  return (*(__IO uint32_t *) tmp);
 800ca50:	6942      	ldr	r2, [r0, #20]
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800ca52:	4b38      	ldr	r3, [pc, #224]	; (800cb34 <SDMMC_CmdSendSCR+0x14c>)
 800ca54:	4013      	ands	r3, r2
 800ca56:	2b00      	cmp	r3, #0
 800ca58:	d0e9      	beq.n	800ca2e <SDMMC_CmdSendSCR+0x46>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800ca5a:	2a00      	cmp	r2, #0
 800ca5c:	db2f      	blt.n	800cabe <SDMMC_CmdSendSCR+0xd6>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800ca5e:	0051      	lsls	r1, r2, #1
 800ca60:	d430      	bmi.n	800cac4 <SDMMC_CmdSendSCR+0xdc>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800ca62:	0094      	lsls	r4, r2, #2
 800ca64:	d430      	bmi.n	800cac8 <SDMMC_CmdSendSCR+0xe0>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800ca66:	00d0      	lsls	r0, r2, #3
 800ca68:	d430      	bmi.n	800cacc <SDMMC_CmdSendSCR+0xe4>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800ca6a:	0111      	lsls	r1, r2, #4
 800ca6c:	d431      	bmi.n	800cad2 <SDMMC_CmdSendSCR+0xea>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800ca6e:	0154      	lsls	r4, r2, #5
 800ca70:	d432      	bmi.n	800cad8 <SDMMC_CmdSendSCR+0xf0>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800ca72:	01d0      	lsls	r0, r2, #7
 800ca74:	d433      	bmi.n	800cade <SDMMC_CmdSendSCR+0xf6>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800ca76:	0211      	lsls	r1, r2, #8
 800ca78:	d434      	bmi.n	800cae4 <SDMMC_CmdSendSCR+0xfc>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800ca7a:	0254      	lsls	r4, r2, #9
 800ca7c:	d435      	bmi.n	800caea <SDMMC_CmdSendSCR+0x102>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800ca7e:	0290      	lsls	r0, r2, #10
 800ca80:	d436      	bmi.n	800caf0 <SDMMC_CmdSendSCR+0x108>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800ca82:	02d1      	lsls	r1, r2, #11
 800ca84:	d437      	bmi.n	800caf6 <SDMMC_CmdSendSCR+0x10e>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800ca86:	0354      	lsls	r4, r2, #13
 800ca88:	d438      	bmi.n	800cafc <SDMMC_CmdSendSCR+0x114>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800ca8a:	0390      	lsls	r0, r2, #14
 800ca8c:	d439      	bmi.n	800cb02 <SDMMC_CmdSendSCR+0x11a>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800ca8e:	03d1      	lsls	r1, r2, #15
 800ca90:	d43a      	bmi.n	800cb08 <SDMMC_CmdSendSCR+0x120>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800ca92:	0414      	lsls	r4, r2, #16
 800ca94:	d43b      	bmi.n	800cb0e <SDMMC_CmdSendSCR+0x126>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800ca96:	0450      	lsls	r0, r2, #17
 800ca98:	d43f      	bmi.n	800cb1a <SDMMC_CmdSendSCR+0x132>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800ca9a:	0491      	lsls	r1, r2, #18
 800ca9c:	d43a      	bmi.n	800cb14 <SDMMC_CmdSendSCR+0x12c>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800ca9e:	f012 0f08 	tst.w	r2, #8
 800caa2:	bf14      	ite	ne
 800caa4:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
 800caa8:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 800caac:	e7bf      	b.n	800ca2e <SDMMC_CmdSendSCR+0x46>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800caae:	2201      	movs	r2, #1
 800cab0:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800cab2:	e7bc      	b.n	800ca2e <SDMMC_CmdSendSCR+0x46>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800cab4:	2301      	movs	r3, #1
 800cab6:	e7ba      	b.n	800ca2e <SDMMC_CmdSendSCR+0x46>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800cab8:	2304      	movs	r3, #4
 800caba:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800cabc:	e7b7      	b.n	800ca2e <SDMMC_CmdSendSCR+0x46>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800cabe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800cac2:	e7b4      	b.n	800ca2e <SDMMC_CmdSendSCR+0x46>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800cac4:	2340      	movs	r3, #64	; 0x40
 800cac6:	e7b2      	b.n	800ca2e <SDMMC_CmdSendSCR+0x46>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800cac8:	2380      	movs	r3, #128	; 0x80
 800caca:	e7b0      	b.n	800ca2e <SDMMC_CmdSendSCR+0x46>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800cacc:	f44f 7380 	mov.w	r3, #256	; 0x100
 800cad0:	e7ad      	b.n	800ca2e <SDMMC_CmdSendSCR+0x46>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800cad2:	f44f 7300 	mov.w	r3, #512	; 0x200
 800cad6:	e7aa      	b.n	800ca2e <SDMMC_CmdSendSCR+0x46>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800cad8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cadc:	e7a7      	b.n	800ca2e <SDMMC_CmdSendSCR+0x46>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800cade:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800cae2:	e7a4      	b.n	800ca2e <SDMMC_CmdSendSCR+0x46>
    return SDMMC_ERROR_COM_CRC_FAILED;
 800cae4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800cae8:	e7a1      	b.n	800ca2e <SDMMC_CmdSendSCR+0x46>
    return SDMMC_ERROR_ILLEGAL_CMD;
 800caea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800caee:	e79e      	b.n	800ca2e <SDMMC_CmdSendSCR+0x46>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800caf0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800caf4:	e79b      	b.n	800ca2e <SDMMC_CmdSendSCR+0x46>
    return SDMMC_ERROR_CC_ERR;
 800caf6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cafa:	e798      	b.n	800ca2e <SDMMC_CmdSendSCR+0x46>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800cafc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800cb00:	e795      	b.n	800ca2e <SDMMC_CmdSendSCR+0x46>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800cb02:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800cb06:	e792      	b.n	800ca2e <SDMMC_CmdSendSCR+0x46>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800cb08:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800cb0c:	e78f      	b.n	800ca2e <SDMMC_CmdSendSCR+0x46>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800cb0e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800cb12:	e78c      	b.n	800ca2e <SDMMC_CmdSendSCR+0x46>
    return SDMMC_ERROR_ERASE_RESET;
 800cb14:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800cb18:	e789      	b.n	800ca2e <SDMMC_CmdSendSCR+0x46>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800cb1a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800cb1e:	e786      	b.n	800ca2e <SDMMC_CmdSendSCR+0x46>
 800cb20:	200000f8 	.word	0x200000f8
 800cb24:	10624dd3 	.word	0x10624dd3
 800cb28:	fffee0c0 	.word	0xfffee0c0
 800cb2c:	00200045 	.word	0x00200045
 800cb30:	002000c5 	.word	0x002000c5
 800cb34:	fdffe008 	.word	0xfdffe008

0800cb38 <SDMMC_CmdSendCID>:
  SDMMCx->ARG = Command->Argument;
 800cb38:	2300      	movs	r3, #0
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800cb3a:	491b      	ldr	r1, [pc, #108]	; (800cba8 <SDMMC_CmdSendCID+0x70>)
{
 800cb3c:	b410      	push	{r4}
  SDMMCx->ARG = Command->Argument;
 800cb3e:	6083      	str	r3, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800cb40:	68c4      	ldr	r4, [r0, #12]
 800cb42:	4b1a      	ldr	r3, [pc, #104]	; (800cbac <SDMMC_CmdSendCID+0x74>)
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800cb44:	6809      	ldr	r1, [r1, #0]
{
 800cb46:	4602      	mov	r2, r0
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800cb48:	4819      	ldr	r0, [pc, #100]	; (800cbb0 <SDMMC_CmdSendCID+0x78>)
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800cb4a:	4023      	ands	r3, r4
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800cb4c:	fba0 0101 	umull	r0, r1, r0, r1
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800cb50:	f443 5398 	orr.w	r3, r3, #4864	; 0x1300
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800cb54:	0a49      	lsrs	r1, r1, #9
 800cb56:	f241 3088 	movw	r0, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800cb5a:	f043 0302 	orr.w	r3, r3, #2
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800cb5e:	fb00 f101 	mul.w	r1, r0, r1
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800cb62:	60d3      	str	r3, [r2, #12]
    if (count-- == 0U)
 800cb64:	1e4b      	subs	r3, r1, #1
 800cb66:	b149      	cbz	r1, 800cb7c <SDMMC_CmdSendCID+0x44>
    sta_reg = SDMMCx->STA;
 800cb68:	6b51      	ldr	r1, [r2, #52]	; 0x34
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800cb6a:	f011 0f45 	tst.w	r1, #69	; 0x45
    if (count-- == 0U)
 800cb6e:	f103 33ff 	add.w	r3, r3, #4294967295
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800cb72:	d001      	beq.n	800cb78 <SDMMC_CmdSendCID+0x40>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800cb74:	0489      	lsls	r1, r1, #18
 800cb76:	d506      	bpl.n	800cb86 <SDMMC_CmdSendCID+0x4e>
    if (count-- == 0U)
 800cb78:	1c58      	adds	r0, r3, #1
 800cb7a:	d1f5      	bne.n	800cb68 <SDMMC_CmdSendCID+0x30>
      return SDMMC_ERROR_TIMEOUT;
 800cb7c:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 800cb80:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cb84:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800cb86:	6b53      	ldr	r3, [r2, #52]	; 0x34
 800cb88:	075b      	lsls	r3, r3, #29
 800cb8a:	d409      	bmi.n	800cba0 <SDMMC_CmdSendCID+0x68>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800cb8c:	6b50      	ldr	r0, [r2, #52]	; 0x34
}
 800cb8e:	f85d 4b04 	ldr.w	r4, [sp], #4
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800cb92:	f010 0001 	ands.w	r0, r0, #1
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800cb96:	bf0c      	ite	eq
 800cb98:	4b06      	ldreq	r3, [pc, #24]	; (800cbb4 <SDMMC_CmdSendCID+0x7c>)
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800cb9a:	2301      	movne	r3, #1
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800cb9c:	6393      	str	r3, [r2, #56]	; 0x38
}
 800cb9e:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800cba0:	2004      	movs	r0, #4
 800cba2:	6390      	str	r0, [r2, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800cba4:	e7ec      	b.n	800cb80 <SDMMC_CmdSendCID+0x48>
 800cba6:	bf00      	nop
 800cba8:	200000f8 	.word	0x200000f8
 800cbac:	fffee0c0 	.word	0xfffee0c0
 800cbb0:	10624dd3 	.word	0x10624dd3
 800cbb4:	002000c5 	.word	0x002000c5

0800cbb8 <SDMMC_CmdSendCSD>:
{
 800cbb8:	4602      	mov	r2, r0
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800cbba:	481a      	ldr	r0, [pc, #104]	; (800cc24 <SDMMC_CmdSendCSD+0x6c>)
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800cbbc:	4b1a      	ldr	r3, [pc, #104]	; (800cc28 <SDMMC_CmdSendCSD+0x70>)
{
 800cbbe:	b410      	push	{r4}
  SDMMCx->ARG = Command->Argument;
 800cbc0:	6091      	str	r1, [r2, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800cbc2:	68d4      	ldr	r4, [r2, #12]
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800cbc4:	6801      	ldr	r1, [r0, #0]
 800cbc6:	4819      	ldr	r0, [pc, #100]	; (800cc2c <SDMMC_CmdSendCSD+0x74>)
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800cbc8:	4023      	ands	r3, r4
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800cbca:	fba0 0101 	umull	r0, r1, r0, r1
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800cbce:	f443 5398 	orr.w	r3, r3, #4864	; 0x1300
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800cbd2:	0a49      	lsrs	r1, r1, #9
 800cbd4:	f241 3088 	movw	r0, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800cbd8:	f043 0309 	orr.w	r3, r3, #9
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800cbdc:	fb00 f101 	mul.w	r1, r0, r1
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800cbe0:	60d3      	str	r3, [r2, #12]
    if (count-- == 0U)
 800cbe2:	1e4b      	subs	r3, r1, #1
 800cbe4:	b149      	cbz	r1, 800cbfa <SDMMC_CmdSendCSD+0x42>
    sta_reg = SDMMCx->STA;
 800cbe6:	6b51      	ldr	r1, [r2, #52]	; 0x34
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800cbe8:	f011 0f45 	tst.w	r1, #69	; 0x45
    if (count-- == 0U)
 800cbec:	f103 33ff 	add.w	r3, r3, #4294967295
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800cbf0:	d001      	beq.n	800cbf6 <SDMMC_CmdSendCSD+0x3e>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800cbf2:	0489      	lsls	r1, r1, #18
 800cbf4:	d506      	bpl.n	800cc04 <SDMMC_CmdSendCSD+0x4c>
    if (count-- == 0U)
 800cbf6:	1c58      	adds	r0, r3, #1
 800cbf8:	d1f5      	bne.n	800cbe6 <SDMMC_CmdSendCSD+0x2e>
      return SDMMC_ERROR_TIMEOUT;
 800cbfa:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 800cbfe:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cc02:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800cc04:	6b53      	ldr	r3, [r2, #52]	; 0x34
 800cc06:	075b      	lsls	r3, r3, #29
 800cc08:	d409      	bmi.n	800cc1e <SDMMC_CmdSendCSD+0x66>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800cc0a:	6b50      	ldr	r0, [r2, #52]	; 0x34
}
 800cc0c:	f85d 4b04 	ldr.w	r4, [sp], #4
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800cc10:	f010 0001 	ands.w	r0, r0, #1
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800cc14:	bf0c      	ite	eq
 800cc16:	4b06      	ldreq	r3, [pc, #24]	; (800cc30 <SDMMC_CmdSendCSD+0x78>)
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800cc18:	2301      	movne	r3, #1
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800cc1a:	6393      	str	r3, [r2, #56]	; 0x38
}
 800cc1c:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800cc1e:	2004      	movs	r0, #4
 800cc20:	6390      	str	r0, [r2, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800cc22:	e7ec      	b.n	800cbfe <SDMMC_CmdSendCSD+0x46>
 800cc24:	200000f8 	.word	0x200000f8
 800cc28:	fffee0c0 	.word	0xfffee0c0
 800cc2c:	10624dd3 	.word	0x10624dd3
 800cc30:	002000c5 	.word	0x002000c5

0800cc34 <SDMMC_CmdSetRelAdd>:
  SDMMCx->ARG = Command->Argument;
 800cc34:	2300      	movs	r3, #0
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800cc36:	4a27      	ldr	r2, [pc, #156]	; (800ccd4 <SDMMC_CmdSetRelAdd+0xa0>)
{
 800cc38:	b430      	push	{r4, r5}
  SDMMCx->ARG = Command->Argument;
 800cc3a:	6083      	str	r3, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800cc3c:	68c5      	ldr	r5, [r0, #12]
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800cc3e:	4c26      	ldr	r4, [pc, #152]	; (800ccd8 <SDMMC_CmdSetRelAdd+0xa4>)
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800cc40:	4b26      	ldr	r3, [pc, #152]	; (800ccdc <SDMMC_CmdSetRelAdd+0xa8>)
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800cc42:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800cc44:	402b      	ands	r3, r5
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800cc46:	fba4 4202 	umull	r4, r2, r4, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800cc4a:	f443 5388 	orr.w	r3, r3, #4352	; 0x1100
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800cc4e:	0a52      	lsrs	r2, r2, #9
 800cc50:	f241 3488 	movw	r4, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800cc54:	f043 0303 	orr.w	r3, r3, #3
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800cc58:	fb04 f202 	mul.w	r2, r4, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800cc5c:	60c3      	str	r3, [r0, #12]
    if (count-- == 0U)
 800cc5e:	1e53      	subs	r3, r2, #1
 800cc60:	b14a      	cbz	r2, 800cc76 <SDMMC_CmdSetRelAdd+0x42>
    sta_reg = SDMMCx->STA;
 800cc62:	6b42      	ldr	r2, [r0, #52]	; 0x34
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800cc64:	f012 0f45 	tst.w	r2, #69	; 0x45
    if (count-- == 0U)
 800cc68:	f103 33ff 	add.w	r3, r3, #4294967295
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800cc6c:	d001      	beq.n	800cc72 <SDMMC_CmdSetRelAdd+0x3e>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800cc6e:	0495      	lsls	r5, r2, #18
 800cc70:	d506      	bpl.n	800cc80 <SDMMC_CmdSetRelAdd+0x4c>
    if (count-- == 0U)
 800cc72:	1c5a      	adds	r2, r3, #1
 800cc74:	d1f5      	bne.n	800cc62 <SDMMC_CmdSetRelAdd+0x2e>
      return SDMMC_ERROR_TIMEOUT;
 800cc76:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 800cc7a:	4618      	mov	r0, r3
 800cc7c:	bc30      	pop	{r4, r5}
 800cc7e:	4770      	bx	lr
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800cc80:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800cc82:	075c      	lsls	r4, r3, #29
 800cc84:	d41c      	bmi.n	800ccc0 <SDMMC_CmdSetRelAdd+0x8c>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800cc86:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800cc88:	f013 0301 	ands.w	r3, r3, #1
 800cc8c:	d113      	bne.n	800ccb6 <SDMMC_CmdSetRelAdd+0x82>
  return (uint8_t)(SDMMCx->RESPCMD);
 800cc8e:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800cc90:	b2db      	uxtb	r3, r3
 800cc92:	2b03      	cmp	r3, #3
 800cc94:	d112      	bne.n	800ccbc <SDMMC_CmdSetRelAdd+0x88>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800cc96:	4b12      	ldr	r3, [pc, #72]	; (800cce0 <SDMMC_CmdSetRelAdd+0xac>)
 800cc98:	6383      	str	r3, [r0, #56]	; 0x38
  return (*(__IO uint32_t *) tmp);
 800cc9a:	6942      	ldr	r2, [r0, #20]
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800cc9c:	f412 4360 	ands.w	r3, r2, #57344	; 0xe000
 800cca0:	d014      	beq.n	800cccc <SDMMC_CmdSetRelAdd+0x98>
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800cca2:	0451      	lsls	r1, r2, #17
 800cca4:	d40f      	bmi.n	800ccc6 <SDMMC_CmdSetRelAdd+0x92>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800cca6:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 800ccaa:	bf14      	ite	ne
 800ccac:	f44f 5380 	movne.w	r3, #4096	; 0x1000
 800ccb0:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 800ccb4:	e7e1      	b.n	800cc7a <SDMMC_CmdSetRelAdd+0x46>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800ccb6:	2201      	movs	r2, #1
 800ccb8:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ccba:	e7de      	b.n	800cc7a <SDMMC_CmdSetRelAdd+0x46>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ccbc:	2301      	movs	r3, #1
 800ccbe:	e7dc      	b.n	800cc7a <SDMMC_CmdSetRelAdd+0x46>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800ccc0:	2304      	movs	r3, #4
 800ccc2:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ccc4:	e7d9      	b.n	800cc7a <SDMMC_CmdSetRelAdd+0x46>
    return SDMMC_ERROR_ILLEGAL_CMD;
 800ccc6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800ccca:	e7d6      	b.n	800cc7a <SDMMC_CmdSetRelAdd+0x46>
    *pRCA = (uint16_t) (response_r1 >> 16);
 800cccc:	0c12      	lsrs	r2, r2, #16
 800ccce:	800a      	strh	r2, [r1, #0]
    return SDMMC_ERROR_NONE;
 800ccd0:	e7d3      	b.n	800cc7a <SDMMC_CmdSetRelAdd+0x46>
 800ccd2:	bf00      	nop
 800ccd4:	200000f8 	.word	0x200000f8
 800ccd8:	10624dd3 	.word	0x10624dd3
 800ccdc:	fffee0c0 	.word	0xfffee0c0
 800cce0:	002000c5 	.word	0x002000c5

0800cce4 <SDMMC_CmdSendStatus>:
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800cce4:	4a4d      	ldr	r2, [pc, #308]	; (800ce1c <SDMMC_CmdSendStatus+0x138>)
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800cce6:	4b4e      	ldr	r3, [pc, #312]	; (800ce20 <SDMMC_CmdSendStatus+0x13c>)
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800cce8:	6812      	ldr	r2, [r2, #0]
{
 800ccea:	b410      	push	{r4}
  SDMMCx->ARG = Command->Argument;
 800ccec:	6081      	str	r1, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800ccee:	68c4      	ldr	r4, [r0, #12]
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800ccf0:	494c      	ldr	r1, [pc, #304]	; (800ce24 <SDMMC_CmdSendStatus+0x140>)
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800ccf2:	4023      	ands	r3, r4
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800ccf4:	fba1 1202 	umull	r1, r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800ccf8:	f443 5388 	orr.w	r3, r3, #4352	; 0x1100
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800ccfc:	0a52      	lsrs	r2, r2, #9
 800ccfe:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800cd02:	f043 030d 	orr.w	r3, r3, #13
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800cd06:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800cd0a:	60c3      	str	r3, [r0, #12]
    if (count-- == 0U)
 800cd0c:	b152      	cbz	r2, 800cd24 <SDMMC_CmdSendStatus+0x40>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800cd0e:	4946      	ldr	r1, [pc, #280]	; (800ce28 <SDMMC_CmdSendStatus+0x144>)
 800cd10:	1e53      	subs	r3, r2, #1
    sta_reg = SDMMCx->STA;
 800cd12:	6b42      	ldr	r2, [r0, #52]	; 0x34
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800cd14:	420a      	tst	r2, r1
    if (count-- == 0U)
 800cd16:	f103 33ff 	add.w	r3, r3, #4294967295
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800cd1a:	d001      	beq.n	800cd20 <SDMMC_CmdSendStatus+0x3c>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800cd1c:	0492      	lsls	r2, r2, #18
 800cd1e:	d507      	bpl.n	800cd30 <SDMMC_CmdSendStatus+0x4c>
    if (count-- == 0U)
 800cd20:	1c5c      	adds	r4, r3, #1
 800cd22:	d1f6      	bne.n	800cd12 <SDMMC_CmdSendStatus+0x2e>
      return SDMMC_ERROR_TIMEOUT;
 800cd24:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 800cd28:	4618      	mov	r0, r3
 800cd2a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cd2e:	4770      	bx	lr
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800cd30:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800cd32:	075c      	lsls	r4, r3, #29
 800cd34:	d43d      	bmi.n	800cdb2 <SDMMC_CmdSendStatus+0xce>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800cd36:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800cd38:	f013 0301 	ands.w	r3, r3, #1
 800cd3c:	d134      	bne.n	800cda8 <SDMMC_CmdSendStatus+0xc4>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800cd3e:	4b3b      	ldr	r3, [pc, #236]	; (800ce2c <SDMMC_CmdSendStatus+0x148>)
 800cd40:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800cd42:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800cd44:	b2db      	uxtb	r3, r3
 800cd46:	2b0d      	cmp	r3, #13
 800cd48:	d131      	bne.n	800cdae <SDMMC_CmdSendStatus+0xca>
  return (*(__IO uint32_t *) tmp);
 800cd4a:	6942      	ldr	r2, [r0, #20]
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800cd4c:	4b38      	ldr	r3, [pc, #224]	; (800ce30 <SDMMC_CmdSendStatus+0x14c>)
 800cd4e:	4013      	ands	r3, r2
 800cd50:	2b00      	cmp	r3, #0
 800cd52:	d0e9      	beq.n	800cd28 <SDMMC_CmdSendStatus+0x44>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800cd54:	2a00      	cmp	r2, #0
 800cd56:	db2f      	blt.n	800cdb8 <SDMMC_CmdSendStatus+0xd4>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800cd58:	0051      	lsls	r1, r2, #1
 800cd5a:	d430      	bmi.n	800cdbe <SDMMC_CmdSendStatus+0xda>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800cd5c:	0094      	lsls	r4, r2, #2
 800cd5e:	d430      	bmi.n	800cdc2 <SDMMC_CmdSendStatus+0xde>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800cd60:	00d0      	lsls	r0, r2, #3
 800cd62:	d430      	bmi.n	800cdc6 <SDMMC_CmdSendStatus+0xe2>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800cd64:	0111      	lsls	r1, r2, #4
 800cd66:	d431      	bmi.n	800cdcc <SDMMC_CmdSendStatus+0xe8>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800cd68:	0154      	lsls	r4, r2, #5
 800cd6a:	d432      	bmi.n	800cdd2 <SDMMC_CmdSendStatus+0xee>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800cd6c:	01d0      	lsls	r0, r2, #7
 800cd6e:	d433      	bmi.n	800cdd8 <SDMMC_CmdSendStatus+0xf4>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800cd70:	0211      	lsls	r1, r2, #8
 800cd72:	d434      	bmi.n	800cdde <SDMMC_CmdSendStatus+0xfa>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800cd74:	0254      	lsls	r4, r2, #9
 800cd76:	d435      	bmi.n	800cde4 <SDMMC_CmdSendStatus+0x100>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800cd78:	0290      	lsls	r0, r2, #10
 800cd7a:	d436      	bmi.n	800cdea <SDMMC_CmdSendStatus+0x106>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800cd7c:	02d1      	lsls	r1, r2, #11
 800cd7e:	d437      	bmi.n	800cdf0 <SDMMC_CmdSendStatus+0x10c>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800cd80:	0354      	lsls	r4, r2, #13
 800cd82:	d438      	bmi.n	800cdf6 <SDMMC_CmdSendStatus+0x112>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800cd84:	0390      	lsls	r0, r2, #14
 800cd86:	d439      	bmi.n	800cdfc <SDMMC_CmdSendStatus+0x118>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800cd88:	03d1      	lsls	r1, r2, #15
 800cd8a:	d43a      	bmi.n	800ce02 <SDMMC_CmdSendStatus+0x11e>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800cd8c:	0414      	lsls	r4, r2, #16
 800cd8e:	d43b      	bmi.n	800ce08 <SDMMC_CmdSendStatus+0x124>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800cd90:	0450      	lsls	r0, r2, #17
 800cd92:	d43f      	bmi.n	800ce14 <SDMMC_CmdSendStatus+0x130>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800cd94:	0491      	lsls	r1, r2, #18
 800cd96:	d43a      	bmi.n	800ce0e <SDMMC_CmdSendStatus+0x12a>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800cd98:	f012 0f08 	tst.w	r2, #8
 800cd9c:	bf14      	ite	ne
 800cd9e:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
 800cda2:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 800cda6:	e7bf      	b.n	800cd28 <SDMMC_CmdSendStatus+0x44>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800cda8:	2201      	movs	r2, #1
 800cdaa:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800cdac:	e7bc      	b.n	800cd28 <SDMMC_CmdSendStatus+0x44>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800cdae:	2301      	movs	r3, #1
 800cdb0:	e7ba      	b.n	800cd28 <SDMMC_CmdSendStatus+0x44>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800cdb2:	2304      	movs	r3, #4
 800cdb4:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800cdb6:	e7b7      	b.n	800cd28 <SDMMC_CmdSendStatus+0x44>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800cdb8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800cdbc:	e7b4      	b.n	800cd28 <SDMMC_CmdSendStatus+0x44>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800cdbe:	2340      	movs	r3, #64	; 0x40
 800cdc0:	e7b2      	b.n	800cd28 <SDMMC_CmdSendStatus+0x44>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800cdc2:	2380      	movs	r3, #128	; 0x80
 800cdc4:	e7b0      	b.n	800cd28 <SDMMC_CmdSendStatus+0x44>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800cdc6:	f44f 7380 	mov.w	r3, #256	; 0x100
 800cdca:	e7ad      	b.n	800cd28 <SDMMC_CmdSendStatus+0x44>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800cdcc:	f44f 7300 	mov.w	r3, #512	; 0x200
 800cdd0:	e7aa      	b.n	800cd28 <SDMMC_CmdSendStatus+0x44>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800cdd2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cdd6:	e7a7      	b.n	800cd28 <SDMMC_CmdSendStatus+0x44>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800cdd8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800cddc:	e7a4      	b.n	800cd28 <SDMMC_CmdSendStatus+0x44>
    return SDMMC_ERROR_COM_CRC_FAILED;
 800cdde:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800cde2:	e7a1      	b.n	800cd28 <SDMMC_CmdSendStatus+0x44>
    return SDMMC_ERROR_ILLEGAL_CMD;
 800cde4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800cde8:	e79e      	b.n	800cd28 <SDMMC_CmdSendStatus+0x44>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800cdea:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800cdee:	e79b      	b.n	800cd28 <SDMMC_CmdSendStatus+0x44>
    return SDMMC_ERROR_CC_ERR;
 800cdf0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cdf4:	e798      	b.n	800cd28 <SDMMC_CmdSendStatus+0x44>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800cdf6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800cdfa:	e795      	b.n	800cd28 <SDMMC_CmdSendStatus+0x44>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800cdfc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800ce00:	e792      	b.n	800cd28 <SDMMC_CmdSendStatus+0x44>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800ce02:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800ce06:	e78f      	b.n	800cd28 <SDMMC_CmdSendStatus+0x44>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800ce08:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800ce0c:	e78c      	b.n	800cd28 <SDMMC_CmdSendStatus+0x44>
    return SDMMC_ERROR_ERASE_RESET;
 800ce0e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800ce12:	e789      	b.n	800cd28 <SDMMC_CmdSendStatus+0x44>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800ce14:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800ce18:	e786      	b.n	800cd28 <SDMMC_CmdSendStatus+0x44>
 800ce1a:	bf00      	nop
 800ce1c:	200000f8 	.word	0x200000f8
 800ce20:	fffee0c0 	.word	0xfffee0c0
 800ce24:	10624dd3 	.word	0x10624dd3
 800ce28:	00200045 	.word	0x00200045
 800ce2c:	002000c5 	.word	0x002000c5
 800ce30:	fdffe008 	.word	0xfdffe008

0800ce34 <SDMMC_CmdStatusRegister>:
  SDMMCx->ARG = Command->Argument;
 800ce34:	2300      	movs	r3, #0
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800ce36:	4a4d      	ldr	r2, [pc, #308]	; (800cf6c <SDMMC_CmdStatusRegister+0x138>)
 800ce38:	494d      	ldr	r1, [pc, #308]	; (800cf70 <SDMMC_CmdStatusRegister+0x13c>)
 800ce3a:	6812      	ldr	r2, [r2, #0]
{
 800ce3c:	b410      	push	{r4}
  SDMMCx->ARG = Command->Argument;
 800ce3e:	6083      	str	r3, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800ce40:	68c4      	ldr	r4, [r0, #12]
 800ce42:	4b4c      	ldr	r3, [pc, #304]	; (800cf74 <SDMMC_CmdStatusRegister+0x140>)
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800ce44:	fba1 1202 	umull	r1, r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800ce48:	4023      	ands	r3, r4
 800ce4a:	f443 5388 	orr.w	r3, r3, #4352	; 0x1100
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800ce4e:	0a52      	lsrs	r2, r2, #9
 800ce50:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800ce54:	f043 030d 	orr.w	r3, r3, #13
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800ce58:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800ce5c:	60c3      	str	r3, [r0, #12]
    if (count-- == 0U)
 800ce5e:	b152      	cbz	r2, 800ce76 <SDMMC_CmdStatusRegister+0x42>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800ce60:	4945      	ldr	r1, [pc, #276]	; (800cf78 <SDMMC_CmdStatusRegister+0x144>)
 800ce62:	1e53      	subs	r3, r2, #1
    sta_reg = SDMMCx->STA;
 800ce64:	6b42      	ldr	r2, [r0, #52]	; 0x34
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800ce66:	420a      	tst	r2, r1
    if (count-- == 0U)
 800ce68:	f103 33ff 	add.w	r3, r3, #4294967295
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800ce6c:	d001      	beq.n	800ce72 <SDMMC_CmdStatusRegister+0x3e>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800ce6e:	0492      	lsls	r2, r2, #18
 800ce70:	d507      	bpl.n	800ce82 <SDMMC_CmdStatusRegister+0x4e>
    if (count-- == 0U)
 800ce72:	1c5c      	adds	r4, r3, #1
 800ce74:	d1f6      	bne.n	800ce64 <SDMMC_CmdStatusRegister+0x30>
      return SDMMC_ERROR_TIMEOUT;
 800ce76:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 800ce7a:	4618      	mov	r0, r3
 800ce7c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ce80:	4770      	bx	lr
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800ce82:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800ce84:	075c      	lsls	r4, r3, #29
 800ce86:	d43d      	bmi.n	800cf04 <SDMMC_CmdStatusRegister+0xd0>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800ce88:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800ce8a:	f013 0301 	ands.w	r3, r3, #1
 800ce8e:	d134      	bne.n	800cefa <SDMMC_CmdStatusRegister+0xc6>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800ce90:	4b3a      	ldr	r3, [pc, #232]	; (800cf7c <SDMMC_CmdStatusRegister+0x148>)
 800ce92:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800ce94:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800ce96:	b2db      	uxtb	r3, r3
 800ce98:	2b0d      	cmp	r3, #13
 800ce9a:	d131      	bne.n	800cf00 <SDMMC_CmdStatusRegister+0xcc>
  return (*(__IO uint32_t *) tmp);
 800ce9c:	6942      	ldr	r2, [r0, #20]
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800ce9e:	4b38      	ldr	r3, [pc, #224]	; (800cf80 <SDMMC_CmdStatusRegister+0x14c>)
 800cea0:	4013      	ands	r3, r2
 800cea2:	2b00      	cmp	r3, #0
 800cea4:	d0e9      	beq.n	800ce7a <SDMMC_CmdStatusRegister+0x46>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800cea6:	2a00      	cmp	r2, #0
 800cea8:	db2f      	blt.n	800cf0a <SDMMC_CmdStatusRegister+0xd6>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800ceaa:	0051      	lsls	r1, r2, #1
 800ceac:	d430      	bmi.n	800cf10 <SDMMC_CmdStatusRegister+0xdc>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800ceae:	0094      	lsls	r4, r2, #2
 800ceb0:	d430      	bmi.n	800cf14 <SDMMC_CmdStatusRegister+0xe0>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800ceb2:	00d0      	lsls	r0, r2, #3
 800ceb4:	d430      	bmi.n	800cf18 <SDMMC_CmdStatusRegister+0xe4>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800ceb6:	0111      	lsls	r1, r2, #4
 800ceb8:	d431      	bmi.n	800cf1e <SDMMC_CmdStatusRegister+0xea>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800ceba:	0154      	lsls	r4, r2, #5
 800cebc:	d432      	bmi.n	800cf24 <SDMMC_CmdStatusRegister+0xf0>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800cebe:	01d0      	lsls	r0, r2, #7
 800cec0:	d433      	bmi.n	800cf2a <SDMMC_CmdStatusRegister+0xf6>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800cec2:	0211      	lsls	r1, r2, #8
 800cec4:	d434      	bmi.n	800cf30 <SDMMC_CmdStatusRegister+0xfc>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800cec6:	0254      	lsls	r4, r2, #9
 800cec8:	d435      	bmi.n	800cf36 <SDMMC_CmdStatusRegister+0x102>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800ceca:	0290      	lsls	r0, r2, #10
 800cecc:	d436      	bmi.n	800cf3c <SDMMC_CmdStatusRegister+0x108>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800cece:	02d1      	lsls	r1, r2, #11
 800ced0:	d437      	bmi.n	800cf42 <SDMMC_CmdStatusRegister+0x10e>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800ced2:	0354      	lsls	r4, r2, #13
 800ced4:	d438      	bmi.n	800cf48 <SDMMC_CmdStatusRegister+0x114>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800ced6:	0390      	lsls	r0, r2, #14
 800ced8:	d439      	bmi.n	800cf4e <SDMMC_CmdStatusRegister+0x11a>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800ceda:	03d1      	lsls	r1, r2, #15
 800cedc:	d43a      	bmi.n	800cf54 <SDMMC_CmdStatusRegister+0x120>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800cede:	0414      	lsls	r4, r2, #16
 800cee0:	d43b      	bmi.n	800cf5a <SDMMC_CmdStatusRegister+0x126>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800cee2:	0450      	lsls	r0, r2, #17
 800cee4:	d43f      	bmi.n	800cf66 <SDMMC_CmdStatusRegister+0x132>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800cee6:	0491      	lsls	r1, r2, #18
 800cee8:	d43a      	bmi.n	800cf60 <SDMMC_CmdStatusRegister+0x12c>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800ceea:	f012 0f08 	tst.w	r2, #8
 800ceee:	bf14      	ite	ne
 800cef0:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
 800cef4:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 800cef8:	e7bf      	b.n	800ce7a <SDMMC_CmdStatusRegister+0x46>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800cefa:	2201      	movs	r2, #1
 800cefc:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800cefe:	e7bc      	b.n	800ce7a <SDMMC_CmdStatusRegister+0x46>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800cf00:	2301      	movs	r3, #1
 800cf02:	e7ba      	b.n	800ce7a <SDMMC_CmdStatusRegister+0x46>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800cf04:	2304      	movs	r3, #4
 800cf06:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800cf08:	e7b7      	b.n	800ce7a <SDMMC_CmdStatusRegister+0x46>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800cf0a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800cf0e:	e7b4      	b.n	800ce7a <SDMMC_CmdStatusRegister+0x46>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800cf10:	2340      	movs	r3, #64	; 0x40
 800cf12:	e7b2      	b.n	800ce7a <SDMMC_CmdStatusRegister+0x46>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800cf14:	2380      	movs	r3, #128	; 0x80
 800cf16:	e7b0      	b.n	800ce7a <SDMMC_CmdStatusRegister+0x46>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800cf18:	f44f 7380 	mov.w	r3, #256	; 0x100
 800cf1c:	e7ad      	b.n	800ce7a <SDMMC_CmdStatusRegister+0x46>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800cf1e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800cf22:	e7aa      	b.n	800ce7a <SDMMC_CmdStatusRegister+0x46>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800cf24:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cf28:	e7a7      	b.n	800ce7a <SDMMC_CmdStatusRegister+0x46>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800cf2a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800cf2e:	e7a4      	b.n	800ce7a <SDMMC_CmdStatusRegister+0x46>
    return SDMMC_ERROR_COM_CRC_FAILED;
 800cf30:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800cf34:	e7a1      	b.n	800ce7a <SDMMC_CmdStatusRegister+0x46>
    return SDMMC_ERROR_ILLEGAL_CMD;
 800cf36:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800cf3a:	e79e      	b.n	800ce7a <SDMMC_CmdStatusRegister+0x46>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800cf3c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800cf40:	e79b      	b.n	800ce7a <SDMMC_CmdStatusRegister+0x46>
    return SDMMC_ERROR_CC_ERR;
 800cf42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cf46:	e798      	b.n	800ce7a <SDMMC_CmdStatusRegister+0x46>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800cf48:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800cf4c:	e795      	b.n	800ce7a <SDMMC_CmdStatusRegister+0x46>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800cf4e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800cf52:	e792      	b.n	800ce7a <SDMMC_CmdStatusRegister+0x46>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800cf54:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800cf58:	e78f      	b.n	800ce7a <SDMMC_CmdStatusRegister+0x46>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800cf5a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800cf5e:	e78c      	b.n	800ce7a <SDMMC_CmdStatusRegister+0x46>
    return SDMMC_ERROR_ERASE_RESET;
 800cf60:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800cf64:	e789      	b.n	800ce7a <SDMMC_CmdStatusRegister+0x46>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800cf66:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800cf6a:	e786      	b.n	800ce7a <SDMMC_CmdStatusRegister+0x46>
 800cf6c:	200000f8 	.word	0x200000f8
 800cf70:	10624dd3 	.word	0x10624dd3
 800cf74:	fffee0c0 	.word	0xfffee0c0
 800cf78:	00200045 	.word	0x00200045
 800cf7c:	002000c5 	.word	0x002000c5
 800cf80:	fdffe008 	.word	0xfdffe008

0800cf84 <SDMMC_CmdVoltageSwitch>:
  SDMMCx->ARG = Command->Argument;
 800cf84:	2300      	movs	r3, #0
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800cf86:	4a4d      	ldr	r2, [pc, #308]	; (800d0bc <SDMMC_CmdVoltageSwitch+0x138>)
 800cf88:	494d      	ldr	r1, [pc, #308]	; (800d0c0 <SDMMC_CmdVoltageSwitch+0x13c>)
 800cf8a:	6812      	ldr	r2, [r2, #0]
{
 800cf8c:	b410      	push	{r4}
  SDMMCx->ARG = Command->Argument;
 800cf8e:	6083      	str	r3, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800cf90:	68c4      	ldr	r4, [r0, #12]
 800cf92:	4b4c      	ldr	r3, [pc, #304]	; (800d0c4 <SDMMC_CmdVoltageSwitch+0x140>)
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800cf94:	fba1 1202 	umull	r1, r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800cf98:	4023      	ands	r3, r4
 800cf9a:	f443 5388 	orr.w	r3, r3, #4352	; 0x1100
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800cf9e:	0a52      	lsrs	r2, r2, #9
 800cfa0:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800cfa4:	f043 030b 	orr.w	r3, r3, #11
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800cfa8:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800cfac:	60c3      	str	r3, [r0, #12]
    if (count-- == 0U)
 800cfae:	b152      	cbz	r2, 800cfc6 <SDMMC_CmdVoltageSwitch+0x42>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800cfb0:	4945      	ldr	r1, [pc, #276]	; (800d0c8 <SDMMC_CmdVoltageSwitch+0x144>)
 800cfb2:	1e53      	subs	r3, r2, #1
    sta_reg = SDMMCx->STA;
 800cfb4:	6b42      	ldr	r2, [r0, #52]	; 0x34
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800cfb6:	420a      	tst	r2, r1
    if (count-- == 0U)
 800cfb8:	f103 33ff 	add.w	r3, r3, #4294967295
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800cfbc:	d001      	beq.n	800cfc2 <SDMMC_CmdVoltageSwitch+0x3e>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800cfbe:	0492      	lsls	r2, r2, #18
 800cfc0:	d507      	bpl.n	800cfd2 <SDMMC_CmdVoltageSwitch+0x4e>
    if (count-- == 0U)
 800cfc2:	1c5c      	adds	r4, r3, #1
 800cfc4:	d1f6      	bne.n	800cfb4 <SDMMC_CmdVoltageSwitch+0x30>
      return SDMMC_ERROR_TIMEOUT;
 800cfc6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 800cfca:	4618      	mov	r0, r3
 800cfcc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cfd0:	4770      	bx	lr
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800cfd2:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800cfd4:	075c      	lsls	r4, r3, #29
 800cfd6:	d43d      	bmi.n	800d054 <SDMMC_CmdVoltageSwitch+0xd0>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800cfd8:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800cfda:	f013 0301 	ands.w	r3, r3, #1
 800cfde:	d134      	bne.n	800d04a <SDMMC_CmdVoltageSwitch+0xc6>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800cfe0:	4b3a      	ldr	r3, [pc, #232]	; (800d0cc <SDMMC_CmdVoltageSwitch+0x148>)
 800cfe2:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800cfe4:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800cfe6:	b2db      	uxtb	r3, r3
 800cfe8:	2b0b      	cmp	r3, #11
 800cfea:	d131      	bne.n	800d050 <SDMMC_CmdVoltageSwitch+0xcc>
  return (*(__IO uint32_t *) tmp);
 800cfec:	6942      	ldr	r2, [r0, #20]
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800cfee:	4b38      	ldr	r3, [pc, #224]	; (800d0d0 <SDMMC_CmdVoltageSwitch+0x14c>)
 800cff0:	4013      	ands	r3, r2
 800cff2:	2b00      	cmp	r3, #0
 800cff4:	d0e9      	beq.n	800cfca <SDMMC_CmdVoltageSwitch+0x46>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800cff6:	2a00      	cmp	r2, #0
 800cff8:	db2f      	blt.n	800d05a <SDMMC_CmdVoltageSwitch+0xd6>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800cffa:	0051      	lsls	r1, r2, #1
 800cffc:	d430      	bmi.n	800d060 <SDMMC_CmdVoltageSwitch+0xdc>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800cffe:	0094      	lsls	r4, r2, #2
 800d000:	d430      	bmi.n	800d064 <SDMMC_CmdVoltageSwitch+0xe0>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800d002:	00d0      	lsls	r0, r2, #3
 800d004:	d430      	bmi.n	800d068 <SDMMC_CmdVoltageSwitch+0xe4>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800d006:	0111      	lsls	r1, r2, #4
 800d008:	d431      	bmi.n	800d06e <SDMMC_CmdVoltageSwitch+0xea>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800d00a:	0154      	lsls	r4, r2, #5
 800d00c:	d432      	bmi.n	800d074 <SDMMC_CmdVoltageSwitch+0xf0>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800d00e:	01d0      	lsls	r0, r2, #7
 800d010:	d433      	bmi.n	800d07a <SDMMC_CmdVoltageSwitch+0xf6>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800d012:	0211      	lsls	r1, r2, #8
 800d014:	d434      	bmi.n	800d080 <SDMMC_CmdVoltageSwitch+0xfc>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800d016:	0254      	lsls	r4, r2, #9
 800d018:	d435      	bmi.n	800d086 <SDMMC_CmdVoltageSwitch+0x102>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800d01a:	0290      	lsls	r0, r2, #10
 800d01c:	d436      	bmi.n	800d08c <SDMMC_CmdVoltageSwitch+0x108>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800d01e:	02d1      	lsls	r1, r2, #11
 800d020:	d437      	bmi.n	800d092 <SDMMC_CmdVoltageSwitch+0x10e>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800d022:	0354      	lsls	r4, r2, #13
 800d024:	d438      	bmi.n	800d098 <SDMMC_CmdVoltageSwitch+0x114>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800d026:	0390      	lsls	r0, r2, #14
 800d028:	d439      	bmi.n	800d09e <SDMMC_CmdVoltageSwitch+0x11a>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800d02a:	03d1      	lsls	r1, r2, #15
 800d02c:	d43a      	bmi.n	800d0a4 <SDMMC_CmdVoltageSwitch+0x120>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800d02e:	0414      	lsls	r4, r2, #16
 800d030:	d43b      	bmi.n	800d0aa <SDMMC_CmdVoltageSwitch+0x126>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800d032:	0450      	lsls	r0, r2, #17
 800d034:	d43f      	bmi.n	800d0b6 <SDMMC_CmdVoltageSwitch+0x132>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800d036:	0491      	lsls	r1, r2, #18
 800d038:	d43a      	bmi.n	800d0b0 <SDMMC_CmdVoltageSwitch+0x12c>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800d03a:	f012 0f08 	tst.w	r2, #8
 800d03e:	bf14      	ite	ne
 800d040:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
 800d044:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 800d048:	e7bf      	b.n	800cfca <SDMMC_CmdVoltageSwitch+0x46>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800d04a:	2201      	movs	r2, #1
 800d04c:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d04e:	e7bc      	b.n	800cfca <SDMMC_CmdVoltageSwitch+0x46>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d050:	2301      	movs	r3, #1
 800d052:	e7ba      	b.n	800cfca <SDMMC_CmdVoltageSwitch+0x46>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800d054:	2304      	movs	r3, #4
 800d056:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d058:	e7b7      	b.n	800cfca <SDMMC_CmdVoltageSwitch+0x46>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800d05a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800d05e:	e7b4      	b.n	800cfca <SDMMC_CmdVoltageSwitch+0x46>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800d060:	2340      	movs	r3, #64	; 0x40
 800d062:	e7b2      	b.n	800cfca <SDMMC_CmdVoltageSwitch+0x46>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800d064:	2380      	movs	r3, #128	; 0x80
 800d066:	e7b0      	b.n	800cfca <SDMMC_CmdVoltageSwitch+0x46>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800d068:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d06c:	e7ad      	b.n	800cfca <SDMMC_CmdVoltageSwitch+0x46>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800d06e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d072:	e7aa      	b.n	800cfca <SDMMC_CmdVoltageSwitch+0x46>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800d074:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d078:	e7a7      	b.n	800cfca <SDMMC_CmdVoltageSwitch+0x46>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800d07a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d07e:	e7a4      	b.n	800cfca <SDMMC_CmdVoltageSwitch+0x46>
    return SDMMC_ERROR_COM_CRC_FAILED;
 800d080:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d084:	e7a1      	b.n	800cfca <SDMMC_CmdVoltageSwitch+0x46>
    return SDMMC_ERROR_ILLEGAL_CMD;
 800d086:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800d08a:	e79e      	b.n	800cfca <SDMMC_CmdVoltageSwitch+0x46>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800d08c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800d090:	e79b      	b.n	800cfca <SDMMC_CmdVoltageSwitch+0x46>
    return SDMMC_ERROR_CC_ERR;
 800d092:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d096:	e798      	b.n	800cfca <SDMMC_CmdVoltageSwitch+0x46>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800d098:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800d09c:	e795      	b.n	800cfca <SDMMC_CmdVoltageSwitch+0x46>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800d09e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800d0a2:	e792      	b.n	800cfca <SDMMC_CmdVoltageSwitch+0x46>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800d0a4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800d0a8:	e78f      	b.n	800cfca <SDMMC_CmdVoltageSwitch+0x46>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800d0aa:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800d0ae:	e78c      	b.n	800cfca <SDMMC_CmdVoltageSwitch+0x46>
    return SDMMC_ERROR_ERASE_RESET;
 800d0b0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800d0b4:	e789      	b.n	800cfca <SDMMC_CmdVoltageSwitch+0x46>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800d0b6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800d0ba:	e786      	b.n	800cfca <SDMMC_CmdVoltageSwitch+0x46>
 800d0bc:	200000f8 	.word	0x200000f8
 800d0c0:	10624dd3 	.word	0x10624dd3
 800d0c4:	fffee0c0 	.word	0xfffee0c0
 800d0c8:	00200045 	.word	0x00200045
 800d0cc:	002000c5 	.word	0x002000c5
 800d0d0:	fdffe008 	.word	0xfdffe008

0800d0d4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800d0d4:	b084      	sub	sp, #16
 800d0d6:	b470      	push	{r4, r5, r6}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800d0d8:	9e09      	ldr	r6, [sp, #36]	; 0x24
{
 800d0da:	ad04      	add	r5, sp, #16
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800d0dc:	2e01      	cmp	r6, #1
{
 800d0de:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 800d0e2:	4604      	mov	r4, r0
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800d0e4:	d126      	bne.n	800d134 <USB_CoreInit+0x60>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800d0e6:	6b83      	ldr	r3, [r0, #56]	; 0x38
    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
    if (cfg.use_external_vbus == 1U)
 800d0e8:	9a10      	ldr	r2, [sp, #64]	; 0x40
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800d0ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d0ee:	6383      	str	r3, [r0, #56]	; 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800d0f0:	68c3      	ldr	r3, [r0, #12]
 800d0f2:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800d0f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d0fa:	60c3      	str	r3, [r0, #12]
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800d0fc:	68c3      	ldr	r3, [r0, #12]
    if (cfg.use_external_vbus == 1U)
 800d0fe:	2a01      	cmp	r2, #1
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800d100:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800d104:	60c3      	str	r3, [r0, #12]
    if (cfg.use_external_vbus == 1U)
 800d106:	d03c      	beq.n	800d182 <USB_CoreInit+0xae>
{
 800d108:	4b23      	ldr	r3, [pc, #140]	; (800d198 <USB_CoreInit+0xc4>)
 800d10a:	e001      	b.n	800d110 <USB_CoreInit+0x3c>
  uint32_t count = 0U;

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800d10c:	3b01      	subs	r3, #1
 800d10e:	d03d      	beq.n	800d18c <USB_CoreInit+0xb8>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800d110:	6922      	ldr	r2, [r4, #16]
 800d112:	2a00      	cmp	r2, #0
 800d114:	dafa      	bge.n	800d10c <USB_CoreInit+0x38>

  /* Core Soft Reset */
  count = 0U;
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800d116:	6922      	ldr	r2, [r4, #16]
 800d118:	4b1f      	ldr	r3, [pc, #124]	; (800d198 <USB_CoreInit+0xc4>)
 800d11a:	f042 0201 	orr.w	r2, r2, #1
 800d11e:	6122      	str	r2, [r4, #16]

  do
  {
    if (++count > 200000U)
 800d120:	e001      	b.n	800d126 <USB_CoreInit+0x52>
 800d122:	3b01      	subs	r3, #1
 800d124:	d032      	beq.n	800d18c <USB_CoreInit+0xb8>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800d126:	6920      	ldr	r0, [r4, #16]
 800d128:	f010 0001 	ands.w	r0, r0, #1
 800d12c:	d1f9      	bne.n	800d122 <USB_CoreInit+0x4e>
}
 800d12e:	bc70      	pop	{r4, r5, r6}
 800d130:	b004      	add	sp, #16
 800d132:	4770      	bx	lr
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800d134:	68c2      	ldr	r2, [r0, #12]
 800d136:	4b18      	ldr	r3, [pc, #96]	; (800d198 <USB_CoreInit+0xc4>)
 800d138:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d13c:	60c2      	str	r2, [r0, #12]
    if (++count > 200000U)
 800d13e:	e001      	b.n	800d144 <USB_CoreInit+0x70>
 800d140:	3b01      	subs	r3, #1
 800d142:	d027      	beq.n	800d194 <USB_CoreInit+0xc0>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800d144:	6922      	ldr	r2, [r4, #16]
 800d146:	2a00      	cmp	r2, #0
 800d148:	dafa      	bge.n	800d140 <USB_CoreInit+0x6c>
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800d14a:	6922      	ldr	r2, [r4, #16]
 800d14c:	4b12      	ldr	r3, [pc, #72]	; (800d198 <USB_CoreInit+0xc4>)
 800d14e:	f042 0201 	orr.w	r2, r2, #1
 800d152:	6122      	str	r2, [r4, #16]
    if (++count > 200000U)
 800d154:	e001      	b.n	800d15a <USB_CoreInit+0x86>
 800d156:	3b01      	subs	r3, #1
 800d158:	d01c      	beq.n	800d194 <USB_CoreInit+0xc0>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800d15a:	6920      	ldr	r0, [r4, #16]
 800d15c:	f010 0001 	ands.w	r0, r0, #1
 800d160:	d1f9      	bne.n	800d156 <USB_CoreInit+0x82>
    if (cfg.battery_charging_enable == 0U)
 800d162:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d164:	b933      	cbnz	r3, 800d174 <USB_CoreInit+0xa0>
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800d166:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800d168:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d16c:	63a3      	str	r3, [r4, #56]	; 0x38
}
 800d16e:	bc70      	pop	{r4, r5, r6}
 800d170:	b004      	add	sp, #16
 800d172:	4770      	bx	lr
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800d174:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800d176:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d17a:	63a3      	str	r3, [r4, #56]	; 0x38
}
 800d17c:	bc70      	pop	{r4, r5, r6}
 800d17e:	b004      	add	sp, #16
 800d180:	4770      	bx	lr
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800d182:	68c3      	ldr	r3, [r0, #12]
 800d184:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d188:	60c3      	str	r3, [r0, #12]
 800d18a:	e7bd      	b.n	800d108 <USB_CoreInit+0x34>
}
 800d18c:	bc70      	pop	{r4, r5, r6}
      return HAL_TIMEOUT;
 800d18e:	2003      	movs	r0, #3
}
 800d190:	b004      	add	sp, #16
 800d192:	4770      	bx	lr
      return HAL_TIMEOUT;
 800d194:	2003      	movs	r0, #3
 800d196:	e7e4      	b.n	800d162 <USB_CoreInit+0x8e>
 800d198:	00030d40 	.word	0x00030d40

0800d19c <USB_SetTurnaroundTime>:
  if (speed == USBD_FS_SPEED)
 800d19c:	2a02      	cmp	r2, #2
 800d19e:	d00a      	beq.n	800d1b6 <USB_SetTurnaroundTime+0x1a>
 800d1a0:	f44f 5110 	mov.w	r1, #9216	; 0x2400
  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800d1a4:	68c2      	ldr	r2, [r0, #12]
 800d1a6:	f422 5270 	bic.w	r2, r2, #15360	; 0x3c00
 800d1aa:	60c2      	str	r2, [r0, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800d1ac:	68c3      	ldr	r3, [r0, #12]
 800d1ae:	430b      	orrs	r3, r1
 800d1b0:	60c3      	str	r3, [r0, #12]
}
 800d1b2:	2000      	movs	r0, #0
 800d1b4:	4770      	bx	lr
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800d1b6:	4b26      	ldr	r3, [pc, #152]	; (800d250 <USB_SetTurnaroundTime+0xb4>)
 800d1b8:	4a26      	ldr	r2, [pc, #152]	; (800d254 <USB_SetTurnaroundTime+0xb8>)
 800d1ba:	440b      	add	r3, r1
 800d1bc:	4293      	cmp	r3, r2
 800d1be:	d932      	bls.n	800d226 <USB_SetTurnaroundTime+0x8a>
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800d1c0:	4b25      	ldr	r3, [pc, #148]	; (800d258 <USB_SetTurnaroundTime+0xbc>)
 800d1c2:	4a26      	ldr	r2, [pc, #152]	; (800d25c <USB_SetTurnaroundTime+0xc0>)
 800d1c4:	440b      	add	r3, r1
 800d1c6:	4293      	cmp	r3, r2
 800d1c8:	d930      	bls.n	800d22c <USB_SetTurnaroundTime+0x90>
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800d1ca:	4a25      	ldr	r2, [pc, #148]	; (800d260 <USB_SetTurnaroundTime+0xc4>)
 800d1cc:	f5a1 0374 	sub.w	r3, r1, #15990784	; 0xf40000
 800d1d0:	f5a3 5310 	sub.w	r3, r3, #9216	; 0x2400
 800d1d4:	4293      	cmp	r3, r2
 800d1d6:	d92c      	bls.n	800d232 <USB_SetTurnaroundTime+0x96>
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800d1d8:	4a22      	ldr	r2, [pc, #136]	; (800d264 <USB_SetTurnaroundTime+0xc8>)
 800d1da:	f1a1 7383 	sub.w	r3, r1, #17170432	; 0x1060000
 800d1de:	f5a3 43e7 	sub.w	r3, r3, #29568	; 0x7380
 800d1e2:	4293      	cmp	r3, r2
 800d1e4:	d328      	bcc.n	800d238 <USB_SetTurnaroundTime+0x9c>
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800d1e6:	4b20      	ldr	r3, [pc, #128]	; (800d268 <USB_SetTurnaroundTime+0xcc>)
 800d1e8:	4a20      	ldr	r2, [pc, #128]	; (800d26c <USB_SetTurnaroundTime+0xd0>)
 800d1ea:	440b      	add	r3, r1
 800d1ec:	4293      	cmp	r3, r2
 800d1ee:	d926      	bls.n	800d23e <USB_SetTurnaroundTime+0xa2>
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800d1f0:	4b1f      	ldr	r3, [pc, #124]	; (800d270 <USB_SetTurnaroundTime+0xd4>)
 800d1f2:	4a20      	ldr	r2, [pc, #128]	; (800d274 <USB_SetTurnaroundTime+0xd8>)
 800d1f4:	440b      	add	r3, r1
 800d1f6:	4293      	cmp	r3, r2
 800d1f8:	d324      	bcc.n	800d244 <USB_SetTurnaroundTime+0xa8>
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800d1fa:	4b1f      	ldr	r3, [pc, #124]	; (800d278 <USB_SetTurnaroundTime+0xdc>)
 800d1fc:	4a1f      	ldr	r2, [pc, #124]	; (800d27c <USB_SetTurnaroundTime+0xe0>)
 800d1fe:	440b      	add	r3, r1
 800d200:	4293      	cmp	r3, r2
 800d202:	d3cd      	bcc.n	800d1a0 <USB_SetTurnaroundTime+0x4>
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800d204:	4a1e      	ldr	r2, [pc, #120]	; (800d280 <USB_SetTurnaroundTime+0xe4>)
 800d206:	f1a1 73b7 	sub.w	r3, r1, #23986176	; 0x16e0000
 800d20a:	f5a3 5358 	sub.w	r3, r3, #13824	; 0x3600
 800d20e:	4293      	cmp	r3, r2
 800d210:	d31b      	bcc.n	800d24a <USB_SetTurnaroundTime+0xae>
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800d212:	4b1c      	ldr	r3, [pc, #112]	; (800d284 <USB_SetTurnaroundTime+0xe8>)
 800d214:	4a1c      	ldr	r2, [pc, #112]	; (800d288 <USB_SetTurnaroundTime+0xec>)
 800d216:	440b      	add	r3, r1
 800d218:	4293      	cmp	r3, r2
 800d21a:	bf34      	ite	cc
 800d21c:	f44f 51e0 	movcc.w	r1, #7168	; 0x1c00
 800d220:	f44f 51c0 	movcs.w	r1, #6144	; 0x1800
 800d224:	e7be      	b.n	800d1a4 <USB_SetTurnaroundTime+0x8>
 800d226:	f44f 5170 	mov.w	r1, #15360	; 0x3c00
 800d22a:	e7bb      	b.n	800d1a4 <USB_SetTurnaroundTime+0x8>
 800d22c:	f44f 5160 	mov.w	r1, #14336	; 0x3800
 800d230:	e7b8      	b.n	800d1a4 <USB_SetTurnaroundTime+0x8>
 800d232:	f44f 5150 	mov.w	r1, #13312	; 0x3400
 800d236:	e7b5      	b.n	800d1a4 <USB_SetTurnaroundTime+0x8>
 800d238:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 800d23c:	e7b2      	b.n	800d1a4 <USB_SetTurnaroundTime+0x8>
 800d23e:	f44f 5130 	mov.w	r1, #11264	; 0x2c00
 800d242:	e7af      	b.n	800d1a4 <USB_SetTurnaroundTime+0x8>
 800d244:	f44f 5120 	mov.w	r1, #10240	; 0x2800
 800d248:	e7ac      	b.n	800d1a4 <USB_SetTurnaroundTime+0x8>
 800d24a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800d24e:	e7a9      	b.n	800d1a4 <USB_SetTurnaroundTime+0x8>
 800d250:	ff275340 	.word	0xff275340
 800d254:	000c34ff 	.word	0x000c34ff
 800d258:	ff1b1e40 	.word	0xff1b1e40
 800d25c:	000f423f 	.word	0x000f423f
 800d260:	00124f7f 	.word	0x00124f7f
 800d264:	0013d620 	.word	0x0013d620
 800d268:	fee5b660 	.word	0xfee5b660
 800d26c:	0016e35f 	.word	0x0016e35f
 800d270:	feced300 	.word	0xfeced300
 800d274:	001b7740 	.word	0x001b7740
 800d278:	feb35bc0 	.word	0xfeb35bc0
 800d27c:	002191c0 	.word	0x002191c0
 800d280:	00387520 	.word	0x00387520
 800d284:	fe5954e0 	.word	0xfe5954e0
 800d288:	00419ce0 	.word	0x00419ce0

0800d28c <USB_EnableGlobalInt>:
{
 800d28c:	4603      	mov	r3, r0
}
 800d28e:	2000      	movs	r0, #0
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800d290:	689a      	ldr	r2, [r3, #8]
 800d292:	f042 0201 	orr.w	r2, r2, #1
 800d296:	609a      	str	r2, [r3, #8]
}
 800d298:	4770      	bx	lr
 800d29a:	bf00      	nop

0800d29c <USB_DisableGlobalInt>:
{
 800d29c:	4603      	mov	r3, r0
}
 800d29e:	2000      	movs	r0, #0
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800d2a0:	689a      	ldr	r2, [r3, #8]
 800d2a2:	f022 0201 	bic.w	r2, r2, #1
 800d2a6:	609a      	str	r2, [r3, #8]
}
 800d2a8:	4770      	bx	lr
 800d2aa:	bf00      	nop

0800d2ac <USB_SetCurrentMode>:
{
 800d2ac:	b508      	push	{r3, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800d2ae:	68c3      	ldr	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 800d2b0:	2901      	cmp	r1, #1
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800d2b2:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800d2b6:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 800d2b8:	d00b      	beq.n	800d2d2 <USB_SetCurrentMode+0x26>
  else if (mode == USB_DEVICE_MODE)
 800d2ba:	b941      	cbnz	r1, 800d2ce <USB_SetCurrentMode+0x22>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800d2bc:	68c3      	ldr	r3, [r0, #12]
 800d2be:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800d2c2:	60c3      	str	r3, [r0, #12]
  HAL_Delay(50U);
 800d2c4:	2032      	movs	r0, #50	; 0x32
 800d2c6:	f7f8 febd 	bl	8006044 <HAL_Delay>
  return HAL_OK;
 800d2ca:	2000      	movs	r0, #0
}
 800d2cc:	bd08      	pop	{r3, pc}
    return HAL_ERROR;
 800d2ce:	2001      	movs	r0, #1
}
 800d2d0:	bd08      	pop	{r3, pc}
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800d2d2:	68c3      	ldr	r3, [r0, #12]
 800d2d4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800d2d8:	60c3      	str	r3, [r0, #12]
 800d2da:	e7f3      	b.n	800d2c4 <USB_SetCurrentMode+0x18>

0800d2dc <USB_DevInit>:
{
 800d2dc:	b084      	sub	sp, #16
 800d2de:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d2e2:	ac08      	add	r4, sp, #32
 800d2e4:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 800d2e8:	9e12      	ldr	r6, [sp, #72]	; 0x48
    USBx->DIEPTXF[i] = 0U;
 800d2ea:	2200      	movs	r2, #0
 800d2ec:	f8c0 2104 	str.w	r2, [r0, #260]	; 0x104
{
 800d2f0:	4603      	mov	r3, r0
    USBx->DIEPTXF[i] = 0U;
 800d2f2:	f8c0 2108 	str.w	r2, [r0, #264]	; 0x108
 800d2f6:	460c      	mov	r4, r1
 800d2f8:	f8c0 210c 	str.w	r2, [r0, #268]	; 0x10c
 800d2fc:	f8c0 2110 	str.w	r2, [r0, #272]	; 0x110
 800d300:	f8c0 2114 	str.w	r2, [r0, #276]	; 0x114
 800d304:	f8c0 2118 	str.w	r2, [r0, #280]	; 0x118
 800d308:	f8c0 211c 	str.w	r2, [r0, #284]	; 0x11c
 800d30c:	f8c0 2120 	str.w	r2, [r0, #288]	; 0x120
 800d310:	f8c0 2124 	str.w	r2, [r0, #292]	; 0x124
 800d314:	f8c0 2128 	str.w	r2, [r0, #296]	; 0x128
 800d318:	f8c0 212c 	str.w	r2, [r0, #300]	; 0x12c
 800d31c:	f8c0 2130 	str.w	r2, [r0, #304]	; 0x130
 800d320:	f8c0 2134 	str.w	r2, [r0, #308]	; 0x134
 800d324:	f8c0 2138 	str.w	r2, [r0, #312]	; 0x138
 800d328:	f8c0 213c 	str.w	r2, [r0, #316]	; 0x13c
  if (cfg.vbus_sensing_enable == 0U)
 800d32c:	2e00      	cmp	r6, #0
 800d32e:	f040 8098 	bne.w	800d462 <USB_DevInit+0x186>
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800d332:	f8d0 2804 	ldr.w	r2, [r0, #2052]	; 0x804
 800d336:	f042 0202 	orr.w	r2, r2, #2
 800d33a:	f8c0 2804 	str.w	r2, [r0, #2052]	; 0x804
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800d33e:	6b82      	ldr	r2, [r0, #56]	; 0x38
 800d340:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 800d344:	6382      	str	r2, [r0, #56]	; 0x38
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800d346:	6802      	ldr	r2, [r0, #0]
 800d348:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d34c:	6002      	str	r2, [r0, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800d34e:	6802      	ldr	r2, [r0, #0]
 800d350:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800d354:	f500 6500 	add.w	r5, r0, #2048	; 0x800
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800d358:	6002      	str	r2, [r0, #0]
  USBx_PCGCCTL = 0U;
 800d35a:	2200      	movs	r2, #0
 800d35c:	f8c3 2e00 	str.w	r2, [r3, #3584]	; 0xe00
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800d360:	682a      	ldr	r2, [r5, #0]
 800d362:	602a      	str	r2, [r5, #0]
  USBx_DEVICE->DCFG |= speed;
 800d364:	6829      	ldr	r1, [r5, #0]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800d366:	4a44      	ldr	r2, [pc, #272]	; (800d478 <USB_DevInit+0x19c>)
  USBx_DEVICE->DCFG |= speed;
 800d368:	f041 0103 	orr.w	r1, r1, #3
 800d36c:	6029      	str	r1, [r5, #0]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800d36e:	f44f 6184 	mov.w	r1, #1056	; 0x420
 800d372:	6119      	str	r1, [r3, #16]
    if (++count > 200000U)
 800d374:	e001      	b.n	800d37a <USB_DevInit+0x9e>
 800d376:	3a01      	subs	r2, #1
 800d378:	d07c      	beq.n	800d474 <USB_DevInit+0x198>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800d37a:	6918      	ldr	r0, [r3, #16]
 800d37c:	f010 0020 	ands.w	r0, r0, #32
 800d380:	d1f9      	bne.n	800d376 <USB_DevInit+0x9a>
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800d382:	2210      	movs	r2, #16
 800d384:	611a      	str	r2, [r3, #16]
 800d386:	4a3c      	ldr	r2, [pc, #240]	; (800d478 <USB_DevInit+0x19c>)
 800d388:	e001      	b.n	800d38e <USB_DevInit+0xb2>
    if (++count > 200000U)
 800d38a:	3a01      	subs	r2, #1
 800d38c:	d070      	beq.n	800d470 <USB_DevInit+0x194>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800d38e:	6919      	ldr	r1, [r3, #16]
 800d390:	06c9      	lsls	r1, r1, #27
 800d392:	d4fa      	bmi.n	800d38a <USB_DevInit+0xae>
  USBx_DEVICE->DIEPMSK = 0U;
 800d394:	2100      	movs	r1, #0
 800d396:	6129      	str	r1, [r5, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800d398:	6169      	str	r1, [r5, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800d39a:	61e9      	str	r1, [r5, #28]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d39c:	b1f4      	cbz	r4, 800d3dc <USB_DevInit+0x100>
      USBx_INEP(i)->DIEPCTL = 0U;
 800d39e:	468c      	mov	ip, r1
 800d3a0:	f503 6210 	add.w	r2, r3, #2304	; 0x900
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800d3a4:	f04f 4890 	mov.w	r8, #1207959552	; 0x48000000
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800d3a8:	f04f 6900 	mov.w	r9, #134217728	; 0x8000000
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800d3ac:	f64f 3e7f 	movw	lr, #64383	; 0xfb7f
 800d3b0:	e00a      	b.n	800d3c8 <USB_DevInit+0xec>
      USBx_INEP(i)->DIEPCTL = 0U;
 800d3b2:	f8c2 c000 	str.w	ip, [r2]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d3b6:	3101      	adds	r1, #1
 800d3b8:	42a1      	cmp	r1, r4
    USBx_INEP(i)->DIEPTSIZ = 0U;
 800d3ba:	f8c2 c010 	str.w	ip, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800d3be:	f8c2 e008 	str.w	lr, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d3c2:	f102 0220 	add.w	r2, r2, #32
 800d3c6:	d02c      	beq.n	800d422 <USB_DevInit+0x146>
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800d3c8:	6817      	ldr	r7, [r2, #0]
 800d3ca:	2f00      	cmp	r7, #0
 800d3cc:	daf1      	bge.n	800d3b2 <USB_DevInit+0xd6>
      if (i == 0U)
 800d3ce:	b111      	cbz	r1, 800d3d6 <USB_DevInit+0xfa>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800d3d0:	f8c2 8000 	str.w	r8, [r2]
 800d3d4:	e7ef      	b.n	800d3b6 <USB_DevInit+0xda>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800d3d6:	f8c2 9000 	str.w	r9, [r2]
 800d3da:	e7ec      	b.n	800d3b6 <USB_DevInit+0xda>
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800d3dc:	6929      	ldr	r1, [r5, #16]
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800d3de:	4a27      	ldr	r2, [pc, #156]	; (800d47c <USB_DevInit+0x1a0>)
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800d3e0:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 800d3e4:	6129      	str	r1, [r5, #16]
  USBx->GINTMSK = 0U;
 800d3e6:	2400      	movs	r4, #0
  USBx->GINTSTS = 0xBFFFFFFFU;
 800d3e8:	f06f 4180 	mvn.w	r1, #1073741824	; 0x40000000
  USBx->GINTMSK = 0U;
 800d3ec:	619c      	str	r4, [r3, #24]
  USBx->GINTSTS = 0xBFFFFFFFU;
 800d3ee:	6159      	str	r1, [r3, #20]
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800d3f0:	6999      	ldr	r1, [r3, #24]
  if (cfg.Sof_enable != 0U)
 800d3f2:	9c0e      	ldr	r4, [sp, #56]	; 0x38
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800d3f4:	f041 0110 	orr.w	r1, r1, #16
 800d3f8:	6199      	str	r1, [r3, #24]
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800d3fa:	6999      	ldr	r1, [r3, #24]
 800d3fc:	430a      	orrs	r2, r1
 800d3fe:	619a      	str	r2, [r3, #24]
  if (cfg.Sof_enable != 0U)
 800d400:	b11c      	cbz	r4, 800d40a <USB_DevInit+0x12e>
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800d402:	699a      	ldr	r2, [r3, #24]
 800d404:	f042 0208 	orr.w	r2, r2, #8
 800d408:	619a      	str	r2, [r3, #24]
  if (cfg.vbus_sensing_enable == 1U)
 800d40a:	2e01      	cmp	r6, #1
 800d40c:	d105      	bne.n	800d41a <USB_DevInit+0x13e>
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800d40e:	699a      	ldr	r2, [r3, #24]
 800d410:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800d414:	f042 0204 	orr.w	r2, r2, #4
 800d418:	619a      	str	r2, [r3, #24]
}
 800d41a:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d41e:	b004      	add	sp, #16
 800d420:	4770      	bx	lr
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d422:	2100      	movs	r1, #0
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800d424:	468c      	mov	ip, r1
 800d426:	f503 6230 	add.w	r2, r3, #2816	; 0xb00
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800d42a:	f04f 4890 	mov.w	r8, #1207959552	; 0x48000000
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800d42e:	f04f 6900 	mov.w	r9, #134217728	; 0x8000000
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800d432:	f64f 3e7f 	movw	lr, #64383	; 0xfb7f
 800d436:	e00a      	b.n	800d44e <USB_DevInit+0x172>
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800d438:	f8c2 c000 	str.w	ip, [r2]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d43c:	3101      	adds	r1, #1
 800d43e:	42a1      	cmp	r1, r4
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800d440:	f8c2 c010 	str.w	ip, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800d444:	f8c2 e008 	str.w	lr, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d448:	f102 0220 	add.w	r2, r2, #32
 800d44c:	d0c6      	beq.n	800d3dc <USB_DevInit+0x100>
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800d44e:	6817      	ldr	r7, [r2, #0]
 800d450:	2f00      	cmp	r7, #0
 800d452:	daf1      	bge.n	800d438 <USB_DevInit+0x15c>
      if (i == 0U)
 800d454:	b111      	cbz	r1, 800d45c <USB_DevInit+0x180>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800d456:	f8c2 8000 	str.w	r8, [r2]
 800d45a:	e7ef      	b.n	800d43c <USB_DevInit+0x160>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800d45c:	f8c2 9000 	str.w	r9, [r2]
 800d460:	e7ec      	b.n	800d43c <USB_DevInit+0x160>
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800d462:	6b82      	ldr	r2, [r0, #56]	; 0x38
 800d464:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 800d468:	6382      	str	r2, [r0, #56]	; 0x38
 800d46a:	f500 6500 	add.w	r5, r0, #2048	; 0x800
 800d46e:	e774      	b.n	800d35a <USB_DevInit+0x7e>
    ret = HAL_ERROR;
 800d470:	2001      	movs	r0, #1
 800d472:	e78f      	b.n	800d394 <USB_DevInit+0xb8>
    ret = HAL_ERROR;
 800d474:	2001      	movs	r0, #1
 800d476:	e784      	b.n	800d382 <USB_DevInit+0xa6>
 800d478:	00030d40 	.word	0x00030d40
 800d47c:	803c3800 	.word	0x803c3800

0800d480 <USB_FlushTxFifo>:
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800d480:	0189      	lsls	r1, r1, #6
 800d482:	f041 0120 	orr.w	r1, r1, #32
 800d486:	4a06      	ldr	r2, [pc, #24]	; (800d4a0 <USB_FlushTxFifo+0x20>)
 800d488:	6101      	str	r1, [r0, #16]
    if (++count > 200000U)
 800d48a:	e001      	b.n	800d490 <USB_FlushTxFifo+0x10>
 800d48c:	3a01      	subs	r2, #1
 800d48e:	d005      	beq.n	800d49c <USB_FlushTxFifo+0x1c>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800d490:	6903      	ldr	r3, [r0, #16]
 800d492:	f013 0320 	ands.w	r3, r3, #32
 800d496:	d1f9      	bne.n	800d48c <USB_FlushTxFifo+0xc>
  return HAL_OK;
 800d498:	4618      	mov	r0, r3
 800d49a:	4770      	bx	lr
      return HAL_TIMEOUT;
 800d49c:	2003      	movs	r0, #3
}
 800d49e:	4770      	bx	lr
 800d4a0:	00030d40 	.word	0x00030d40

0800d4a4 <USB_GetDevSpeed>:
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800d4a4:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800d4a8:	f013 0f02 	tst.w	r3, #2
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800d4ac:	f500 6000 	add.w	r0, r0, #2048	; 0x800
}
 800d4b0:	bf14      	ite	ne
 800d4b2:	2002      	movne	r0, #2
 800d4b4:	200f      	moveq	r0, #15
 800d4b6:	4770      	bx	lr

0800d4b8 <USB_ActivateEndpoint>:
{
 800d4b8:	b470      	push	{r4, r5, r6}
  if (ep->is_in == 1U)
 800d4ba:	784b      	ldrb	r3, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 800d4bc:	780a      	ldrb	r2, [r1, #0]
  if (ep->is_in == 1U)
 800d4be:	2b01      	cmp	r3, #1
 800d4c0:	d022      	beq.n	800d508 <USB_ActivateEndpoint+0x50>
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800d4c2:	f002 050f 	and.w	r5, r2, #15
 800d4c6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800d4ca:	40ab      	lsls	r3, r5
 800d4cc:	f8d0 581c 	ldr.w	r5, [r0, #2076]	; 0x81c
 800d4d0:	f500 6400 	add.w	r4, r0, #2048	; 0x800
 800d4d4:	432b      	orrs	r3, r5
    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800d4d6:	eb00 1042 	add.w	r0, r0, r2, lsl #5
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800d4da:	61e3      	str	r3, [r4, #28]
    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800d4dc:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 800d4e0:	041b      	lsls	r3, r3, #16
 800d4e2:	d40e      	bmi.n	800d502 <USB_ActivateEndpoint+0x4a>
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800d4e4:	688b      	ldr	r3, [r1, #8]
 800d4e6:	f8d0 4b00 	ldr.w	r4, [r0, #2816]	; 0xb00
                                    ((uint32_t)ep->type << 18) |
 800d4ea:	78ca      	ldrb	r2, [r1, #3]
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800d4ec:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d4f0:	4323      	orrs	r3, r4
 800d4f2:	ea43 4382 	orr.w	r3, r3, r2, lsl #18
 800d4f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d4fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d4fe:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
}
 800d502:	2000      	movs	r0, #0
 800d504:	bc70      	pop	{r4, r5, r6}
 800d506:	4770      	bx	lr
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800d508:	f8d0 681c 	ldr.w	r6, [r0, #2076]	; 0x81c
 800d50c:	f002 040f 	and.w	r4, r2, #15
 800d510:	f500 6500 	add.w	r5, r0, #2048	; 0x800
 800d514:	40a3      	lsls	r3, r4
 800d516:	4333      	orrs	r3, r6
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800d518:	eb00 1042 	add.w	r0, r0, r2, lsl #5
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800d51c:	61eb      	str	r3, [r5, #28]
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800d51e:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 800d522:	041c      	lsls	r4, r3, #16
 800d524:	d4ed      	bmi.n	800d502 <USB_ActivateEndpoint+0x4a>
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800d526:	688b      	ldr	r3, [r1, #8]
 800d528:	f8d0 4900 	ldr.w	r4, [r0, #2304]	; 0x900
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800d52c:	78c9      	ldrb	r1, [r1, #3]
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800d52e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d532:	4323      	orrs	r3, r4
 800d534:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
 800d538:	ea43 5282 	orr.w	r2, r3, r2, lsl #22
 800d53c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800d540:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800d544:	f8c0 2900 	str.w	r2, [r0, #2304]	; 0x900
}
 800d548:	bc70      	pop	{r4, r5, r6}
 800d54a:	2000      	movs	r0, #0
 800d54c:	4770      	bx	lr
 800d54e:	bf00      	nop

0800d550 <USB_DeactivateEndpoint>:
{
 800d550:	b430      	push	{r4, r5}
  if (ep->is_in == 1U)
 800d552:	784a      	ldrb	r2, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 800d554:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 800d556:	2a01      	cmp	r2, #1
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800d558:	eb00 1543 	add.w	r5, r0, r3, lsl #5
  if (ep->is_in == 1U)
 800d55c:	d02b      	beq.n	800d5b6 <USB_DeactivateEndpoint+0x66>
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800d55e:	f8d5 2b00 	ldr.w	r2, [r5, #2816]	; 0xb00
 800d562:	2a00      	cmp	r2, #0
 800d564:	db1a      	blt.n	800d59c <USB_DeactivateEndpoint+0x4c>
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800d566:	f8d0 483c 	ldr.w	r4, [r0, #2108]	; 0x83c
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800d56a:	4928      	ldr	r1, [pc, #160]	; (800d60c <USB_DeactivateEndpoint+0xbc>)
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800d56c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800d570:	f003 030f 	and.w	r3, r3, #15
 800d574:	fa02 f303 	lsl.w	r3, r2, r3
 800d578:	ea24 0403 	bic.w	r4, r4, r3
 800d57c:	f8c0 483c 	str.w	r4, [r0, #2108]	; 0x83c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800d580:	f8d0 281c 	ldr.w	r2, [r0, #2076]	; 0x81c
 800d584:	ea22 0303 	bic.w	r3, r2, r3
 800d588:	f8c0 381c 	str.w	r3, [r0, #2076]	; 0x81c
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800d58c:	f8d5 3b00 	ldr.w	r3, [r5, #2816]	; 0xb00
 800d590:	4019      	ands	r1, r3
 800d592:	f8c5 1b00 	str.w	r1, [r5, #2816]	; 0xb00
}
 800d596:	2000      	movs	r0, #0
 800d598:	bc30      	pop	{r4, r5}
 800d59a:	4770      	bx	lr
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800d59c:	f8d5 2b00 	ldr.w	r2, [r5, #2816]	; 0xb00
 800d5a0:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 800d5a4:	f8c5 2b00 	str.w	r2, [r5, #2816]	; 0xb00
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800d5a8:	f8d5 2b00 	ldr.w	r2, [r5, #2816]	; 0xb00
 800d5ac:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800d5b0:	f8c5 2b00 	str.w	r2, [r5, #2816]	; 0xb00
 800d5b4:	e7d7      	b.n	800d566 <USB_DeactivateEndpoint+0x16>
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800d5b6:	f8d5 2900 	ldr.w	r2, [r5, #2304]	; 0x900
 800d5ba:	2a00      	cmp	r2, #0
 800d5bc:	da0b      	bge.n	800d5d6 <USB_DeactivateEndpoint+0x86>
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800d5be:	f8d5 2900 	ldr.w	r2, [r5, #2304]	; 0x900
 800d5c2:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 800d5c6:	f8c5 2900 	str.w	r2, [r5, #2304]	; 0x900
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800d5ca:	f8d5 2900 	ldr.w	r2, [r5, #2304]	; 0x900
 800d5ce:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800d5d2:	f8c5 2900 	str.w	r2, [r5, #2304]	; 0x900
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800d5d6:	f8d0 483c 	ldr.w	r4, [r0, #2108]	; 0x83c
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800d5da:	490d      	ldr	r1, [pc, #52]	; (800d610 <USB_DeactivateEndpoint+0xc0>)
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800d5dc:	2201      	movs	r2, #1
 800d5de:	f003 030f 	and.w	r3, r3, #15
 800d5e2:	fa02 f303 	lsl.w	r3, r2, r3
 800d5e6:	ea24 0403 	bic.w	r4, r4, r3
 800d5ea:	f8c0 483c 	str.w	r4, [r0, #2108]	; 0x83c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800d5ee:	f8d0 281c 	ldr.w	r2, [r0, #2076]	; 0x81c
 800d5f2:	ea22 0303 	bic.w	r3, r2, r3
 800d5f6:	f8c0 381c 	str.w	r3, [r0, #2076]	; 0x81c
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800d5fa:	f8d5 3900 	ldr.w	r3, [r5, #2304]	; 0x900
 800d5fe:	4019      	ands	r1, r3
 800d600:	f8c5 1900 	str.w	r1, [r5, #2304]	; 0x900
}
 800d604:	2000      	movs	r0, #0
 800d606:	bc30      	pop	{r4, r5}
 800d608:	4770      	bx	lr
 800d60a:	bf00      	nop
 800d60c:	eff37800 	.word	0xeff37800
 800d610:	ec337800 	.word	0xec337800

0800d614 <USB_EPStartXfer>:
{
 800d614:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (ep->is_in == 1U)
 800d618:	784e      	ldrb	r6, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 800d61a:	780a      	ldrb	r2, [r1, #0]
  if (ep->is_in == 1U)
 800d61c:	2e01      	cmp	r6, #1
 800d61e:	d049      	beq.n	800d6b4 <USB_EPStartXfer+0xa0>
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800d620:	eb00 1342 	add.w	r3, r0, r2, lsl #5
    if (ep->xfer_len == 0U)
 800d624:	694a      	ldr	r2, [r1, #20]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800d626:	f8d3 4b10 	ldr.w	r4, [r3, #2832]	; 0xb10
 800d62a:	0ce4      	lsrs	r4, r4, #19
 800d62c:	04e4      	lsls	r4, r4, #19
 800d62e:	f8c3 4b10 	str.w	r4, [r3, #2832]	; 0xb10
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800d632:	f8d3 4b10 	ldr.w	r4, [r3, #2832]	; 0xb10
 800d636:	f024 54ff 	bic.w	r4, r4, #534773760	; 0x1fe00000
 800d63a:	f424 14c0 	bic.w	r4, r4, #1572864	; 0x180000
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800d63e:	f503 6530 	add.w	r5, r3, #2816	; 0xb00
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800d642:	612c      	str	r4, [r5, #16]
    if (ep->xfer_len == 0U)
 800d644:	b35a      	cbz	r2, 800d69e <USB_EPStartXfer+0x8a>
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800d646:	688c      	ldr	r4, [r1, #8]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800d648:	4e5e      	ldr	r6, [pc, #376]	; (800d7c4 <USB_EPStartXfer+0x1b0>)
 800d64a:	692f      	ldr	r7, [r5, #16]
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800d64c:	4422      	add	r2, r4
 800d64e:	3a01      	subs	r2, #1
 800d650:	fbb2 f2f4 	udiv	r2, r2, r4
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800d654:	ea06 46c2 	and.w	r6, r6, r2, lsl #19
 800d658:	433e      	orrs	r6, r7
 800d65a:	612e      	str	r6, [r5, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800d65c:	b292      	uxth	r2, r2
 800d65e:	fb04 f202 	mul.w	r2, r4, r2
 800d662:	692c      	ldr	r4, [r5, #16]
 800d664:	f3c2 0212 	ubfx	r2, r2, #0, #19
 800d668:	4322      	orrs	r2, r4
 800d66a:	612a      	str	r2, [r5, #16]
    if (ep->type == EP_TYPE_ISOC)
 800d66c:	78ca      	ldrb	r2, [r1, #3]
 800d66e:	2a01      	cmp	r2, #1
 800d670:	d10c      	bne.n	800d68c <USB_EPStartXfer+0x78>
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800d672:	f8d0 2808 	ldr.w	r2, [r0, #2056]	; 0x808
 800d676:	f412 7f80 	tst.w	r2, #256	; 0x100
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800d67a:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 800d67e:	bf0c      	ite	eq
 800d680:	f042 5200 	orreq.w	r2, r2, #536870912	; 0x20000000
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800d684:	f042 5280 	orrne.w	r2, r2, #268435456	; 0x10000000
 800d688:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800d68c:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 800d690:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 800d694:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
}
 800d698:	2000      	movs	r0, #0
 800d69a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800d69e:	688a      	ldr	r2, [r1, #8]
 800d6a0:	692c      	ldr	r4, [r5, #16]
 800d6a2:	f3c2 0212 	ubfx	r2, r2, #0, #19
 800d6a6:	4322      	orrs	r2, r4
 800d6a8:	612a      	str	r2, [r5, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800d6aa:	692a      	ldr	r2, [r5, #16]
 800d6ac:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 800d6b0:	612a      	str	r2, [r5, #16]
 800d6b2:	e7db      	b.n	800d66c <USB_EPStartXfer+0x58>
    if (ep->xfer_len == 0U)
 800d6b4:	694d      	ldr	r5, [r1, #20]
 800d6b6:	2d00      	cmp	r5, #0
 800d6b8:	d138      	bne.n	800d72c <USB_EPStartXfer+0x118>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800d6ba:	eb00 1642 	add.w	r6, r0, r2, lsl #5
 800d6be:	f506 6410 	add.w	r4, r6, #2304	; 0x900
 800d6c2:	6923      	ldr	r3, [r4, #16]
 800d6c4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800d6c8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800d6cc:	6123      	str	r3, [r4, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800d6ce:	6923      	ldr	r3, [r4, #16]
 800d6d0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d6d4:	6123      	str	r3, [r4, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800d6d6:	6923      	ldr	r3, [r4, #16]
 800d6d8:	0cdb      	lsrs	r3, r3, #19
 800d6da:	04db      	lsls	r3, r3, #19
 800d6dc:	6123      	str	r3, [r4, #16]
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800d6de:	f8d6 3900 	ldr.w	r3, [r6, #2304]	; 0x900
 800d6e2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800d6e6:	f8c6 3900 	str.w	r3, [r6, #2304]	; 0x900
    if (ep->type != EP_TYPE_ISOC)
 800d6ea:	78cb      	ldrb	r3, [r1, #3]
 800d6ec:	2b01      	cmp	r3, #1
 800d6ee:	d1d3      	bne.n	800d698 <USB_EPStartXfer+0x84>
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800d6f0:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 800d6f4:	68c9      	ldr	r1, [r1, #12]
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800d6f6:	f413 7f80 	tst.w	r3, #256	; 0x100
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800d6fa:	6823      	ldr	r3, [r4, #0]
 800d6fc:	bf0c      	ite	eq
 800d6fe:	f043 5300 	orreq.w	r3, r3, #536870912	; 0x20000000
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800d702:	f043 5380 	orrne.w	r3, r3, #268435456	; 0x10000000
 800d706:	6023      	str	r3, [r4, #0]
  count32b = ((uint32_t)len + 3U) / 4U;
 800d708:	b2ac      	uxth	r4, r5
 800d70a:	3403      	adds	r4, #3
  for (i = 0U; i < count32b; i++)
 800d70c:	08a4      	lsrs	r4, r4, #2
 800d70e:	d0c3      	beq.n	800d698 <USB_EPStartXfer+0x84>
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800d710:	eb00 3302 	add.w	r3, r0, r2, lsl #12
 800d714:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d718:	eb01 0484 	add.w	r4, r1, r4, lsl #2
 800d71c:	f851 5b04 	ldr.w	r5, [r1], #4
 800d720:	601d      	str	r5, [r3, #0]
  for (i = 0U; i < count32b; i++)
 800d722:	42a1      	cmp	r1, r4
 800d724:	d1fa      	bne.n	800d71c <USB_EPStartXfer+0x108>
}
 800d726:	2000      	movs	r0, #0
 800d728:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800d72c:	eb00 1c42 	add.w	ip, r0, r2, lsl #5
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800d730:	f8d1 e008 	ldr.w	lr, [r1, #8]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800d734:	f8dc 7910 	ldr.w	r7, [ip, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800d738:	4b22      	ldr	r3, [pc, #136]	; (800d7c4 <USB_EPStartXfer+0x1b0>)
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800d73a:	0cff      	lsrs	r7, r7, #19
 800d73c:	04ff      	lsls	r7, r7, #19
 800d73e:	f8cc 7910 	str.w	r7, [ip, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800d742:	f8dc 7910 	ldr.w	r7, [ip, #2320]	; 0x910
 800d746:	f027 57ff 	bic.w	r7, r7, #534773760	; 0x1fe00000
 800d74a:	f427 17c0 	bic.w	r7, r7, #1572864	; 0x180000
 800d74e:	f8cc 7910 	str.w	r7, [ip, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800d752:	f8dc 8910 	ldr.w	r8, [ip, #2320]	; 0x910
 800d756:	eb05 070e 	add.w	r7, r5, lr
 800d75a:	3f01      	subs	r7, #1
 800d75c:	fbb7 f7fe 	udiv	r7, r7, lr
 800d760:	ea03 43c7 	and.w	r3, r3, r7, lsl #19
 800d764:	ea43 0308 	orr.w	r3, r3, r8
 800d768:	f8cc 3910 	str.w	r3, [ip, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800d76c:	f8dc 7910 	ldr.w	r7, [ip, #2320]	; 0x910
 800d770:	f3c5 0312 	ubfx	r3, r5, #0, #19
 800d774:	433b      	orrs	r3, r7
 800d776:	f8cc 3910 	str.w	r3, [ip, #2320]	; 0x910
      if (ep->type == EP_TYPE_ISOC)
 800d77a:	78cb      	ldrb	r3, [r1, #3]
 800d77c:	2b01      	cmp	r3, #1
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800d77e:	f50c 6410 	add.w	r4, ip, #2304	; 0x900
      if (ep->type == EP_TYPE_ISOC)
 800d782:	d010      	beq.n	800d7a6 <USB_EPStartXfer+0x192>
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800d784:	f8dc 3900 	ldr.w	r3, [ip, #2304]	; 0x900
 800d788:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800d78c:	f8cc 3900 	str.w	r3, [ip, #2304]	; 0x900
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800d790:	f002 030f 	and.w	r3, r2, #15
 800d794:	f8d0 2834 	ldr.w	r2, [r0, #2100]	; 0x834
 800d798:	409e      	lsls	r6, r3
 800d79a:	4316      	orrs	r6, r2
 800d79c:	f8c0 6834 	str.w	r6, [r0, #2100]	; 0x834
}
 800d7a0:	2000      	movs	r0, #0
 800d7a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800d7a6:	6923      	ldr	r3, [r4, #16]
 800d7a8:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800d7ac:	6123      	str	r3, [r4, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800d7ae:	6923      	ldr	r3, [r4, #16]
 800d7b0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800d7b4:	6123      	str	r3, [r4, #16]
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800d7b6:	f8dc 3900 	ldr.w	r3, [ip, #2304]	; 0x900
 800d7ba:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800d7be:	f8cc 3900 	str.w	r3, [ip, #2304]	; 0x900
    if (ep->type != EP_TYPE_ISOC)
 800d7c2:	e795      	b.n	800d6f0 <USB_EPStartXfer+0xdc>
 800d7c4:	1ff80000 	.word	0x1ff80000

0800d7c8 <USB_EP0StartXfer>:
{
 800d7c8:	b4f0      	push	{r4, r5, r6, r7}
  if (ep->is_in == 1U)
 800d7ca:	784b      	ldrb	r3, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 800d7cc:	780e      	ldrb	r6, [r1, #0]
  if (ep->is_in == 1U)
 800d7ce:	2b01      	cmp	r3, #1
 800d7d0:	d027      	beq.n	800d822 <USB_EP0StartXfer+0x5a>
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800d7d2:	eb00 1046 	add.w	r0, r0, r6, lsl #5
    if (ep->xfer_len > 0U)
 800d7d6:	694c      	ldr	r4, [r1, #20]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800d7d8:	f8d0 2b10 	ldr.w	r2, [r0, #2832]	; 0xb10
 800d7dc:	0cd2      	lsrs	r2, r2, #19
 800d7de:	04d2      	lsls	r2, r2, #19
 800d7e0:	f8c0 2b10 	str.w	r2, [r0, #2832]	; 0xb10
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800d7e4:	f8d0 2b10 	ldr.w	r2, [r0, #2832]	; 0xb10
 800d7e8:	f022 52ff 	bic.w	r2, r2, #534773760	; 0x1fe00000
 800d7ec:	f422 12c0 	bic.w	r2, r2, #1572864	; 0x180000
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800d7f0:	f500 6330 	add.w	r3, r0, #2816	; 0xb00
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800d7f4:	611a      	str	r2, [r3, #16]
      ep->xfer_len = ep->maxpacket;
 800d7f6:	688a      	ldr	r2, [r1, #8]
    if (ep->xfer_len > 0U)
 800d7f8:	b98c      	cbnz	r4, 800d81e <USB_EP0StartXfer+0x56>
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800d7fa:	6919      	ldr	r1, [r3, #16]
 800d7fc:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
 800d800:	6119      	str	r1, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800d802:	6919      	ldr	r1, [r3, #16]
 800d804:	f3c2 0212 	ubfx	r2, r2, #0, #19
 800d808:	430a      	orrs	r2, r1
 800d80a:	611a      	str	r2, [r3, #16]
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800d80c:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 800d810:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800d814:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
}
 800d818:	2000      	movs	r0, #0
 800d81a:	bcf0      	pop	{r4, r5, r6, r7}
 800d81c:	4770      	bx	lr
      ep->xfer_len = ep->maxpacket;
 800d81e:	614a      	str	r2, [r1, #20]
 800d820:	e7eb      	b.n	800d7fa <USB_EP0StartXfer+0x32>
    if (ep->xfer_len == 0U)
 800d822:	694a      	ldr	r2, [r1, #20]
 800d824:	b38a      	cbz	r2, 800d88a <USB_EP0StartXfer+0xc2>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800d826:	eb00 1546 	add.w	r5, r0, r6, lsl #5
      if (ep->xfer_len > ep->maxpacket)
 800d82a:	688f      	ldr	r7, [r1, #8]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800d82c:	f8d5 4910 	ldr.w	r4, [r5, #2320]	; 0x910
 800d830:	0ce4      	lsrs	r4, r4, #19
 800d832:	04e4      	lsls	r4, r4, #19
 800d834:	f8c5 4910 	str.w	r4, [r5, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800d838:	f8d5 4910 	ldr.w	r4, [r5, #2320]	; 0x910
 800d83c:	f024 54ff 	bic.w	r4, r4, #534773760	; 0x1fe00000
 800d840:	f424 14c0 	bic.w	r4, r4, #1572864	; 0x180000
      if (ep->xfer_len > ep->maxpacket)
 800d844:	42ba      	cmp	r2, r7
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800d846:	f505 6310 	add.w	r3, r5, #2304	; 0x900
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800d84a:	611c      	str	r4, [r3, #16]
      if (ep->xfer_len > ep->maxpacket)
 800d84c:	d93c      	bls.n	800d8c8 <USB_EP0StartXfer+0x100>
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800d84e:	691a      	ldr	r2, [r3, #16]
        ep->xfer_len = ep->maxpacket;
 800d850:	614f      	str	r7, [r1, #20]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800d852:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 800d856:	611a      	str	r2, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800d858:	6919      	ldr	r1, [r3, #16]
 800d85a:	f3c7 0212 	ubfx	r2, r7, #0, #19
 800d85e:	430a      	orrs	r2, r1
 800d860:	611a      	str	r2, [r3, #16]
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800d862:	f8d5 3900 	ldr.w	r3, [r5, #2304]	; 0x900
 800d866:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800d86a:	f8c5 3900 	str.w	r3, [r5, #2304]	; 0x900
    if (ep->xfer_len > 0U)
 800d86e:	2f00      	cmp	r7, #0
 800d870:	d0d2      	beq.n	800d818 <USB_EP0StartXfer+0x50>
      USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800d872:	f500 6200 	add.w	r2, r0, #2048	; 0x800
 800d876:	2301      	movs	r3, #1
 800d878:	f006 000f 	and.w	r0, r6, #15
 800d87c:	6b51      	ldr	r1, [r2, #52]	; 0x34
 800d87e:	4083      	lsls	r3, r0
 800d880:	430b      	orrs	r3, r1
}
 800d882:	2000      	movs	r0, #0
 800d884:	bcf0      	pop	{r4, r5, r6, r7}
      USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800d886:	6353      	str	r3, [r2, #52]	; 0x34
}
 800d888:	4770      	bx	lr
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800d88a:	eb00 1046 	add.w	r0, r0, r6, lsl #5
}
 800d88e:	bcf0      	pop	{r4, r5, r6, r7}
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800d890:	f8d0 2910 	ldr.w	r2, [r0, #2320]	; 0x910
 800d894:	f022 52ff 	bic.w	r2, r2, #534773760	; 0x1fe00000
 800d898:	f422 12c0 	bic.w	r2, r2, #1572864	; 0x180000
 800d89c:	f8c0 2910 	str.w	r2, [r0, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800d8a0:	f8d0 2910 	ldr.w	r2, [r0, #2320]	; 0x910
 800d8a4:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 800d8a8:	f8c0 2910 	str.w	r2, [r0, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800d8ac:	f8d0 2910 	ldr.w	r2, [r0, #2320]	; 0x910
 800d8b0:	0cd2      	lsrs	r2, r2, #19
 800d8b2:	04d2      	lsls	r2, r2, #19
 800d8b4:	f8c0 2910 	str.w	r2, [r0, #2320]	; 0x910
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800d8b8:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 800d8bc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800d8c0:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
}
 800d8c4:	2000      	movs	r0, #0
 800d8c6:	4770      	bx	lr
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800d8c8:	6919      	ldr	r1, [r3, #16]
 800d8ca:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
 800d8ce:	6119      	str	r1, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800d8d0:	6919      	ldr	r1, [r3, #16]
 800d8d2:	f3c2 0212 	ubfx	r2, r2, #0, #19
 800d8d6:	430a      	orrs	r2, r1
 800d8d8:	611a      	str	r2, [r3, #16]
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800d8da:	f8d5 3900 	ldr.w	r3, [r5, #2304]	; 0x900
 800d8de:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800d8e2:	f8c5 3900 	str.w	r3, [r5, #2304]	; 0x900
    if (ep->xfer_len > 0U)
 800d8e6:	e7c4      	b.n	800d872 <USB_EP0StartXfer+0xaa>

0800d8e8 <USB_WritePacket>:
  count32b = ((uint32_t)len + 3U) / 4U;
 800d8e8:	3303      	adds	r3, #3
  for (i = 0U; i < count32b; i++)
 800d8ea:	089b      	lsrs	r3, r3, #2
 800d8ec:	d009      	beq.n	800d902 <USB_WritePacket+0x1a>
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800d8ee:	3201      	adds	r2, #1
 800d8f0:	eb00 3002 	add.w	r0, r0, r2, lsl #12
 800d8f4:	eb01 0283 	add.w	r2, r1, r3, lsl #2
 800d8f8:	f851 3b04 	ldr.w	r3, [r1], #4
 800d8fc:	6003      	str	r3, [r0, #0]
  for (i = 0U; i < count32b; i++)
 800d8fe:	428a      	cmp	r2, r1
 800d900:	d1fa      	bne.n	800d8f8 <USB_WritePacket+0x10>
}
 800d902:	2000      	movs	r0, #0
 800d904:	4770      	bx	lr
 800d906:	bf00      	nop

0800d908 <USB_ReadPacket>:
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800d908:	3203      	adds	r2, #3
  for (i = 0U; i < count32b; i++)
 800d90a:	0892      	lsrs	r2, r2, #2
 800d90c:	d00c      	beq.n	800d928 <USB_ReadPacket+0x20>
{
 800d90e:	b410      	push	{r4}
 800d910:	f500 5480 	add.w	r4, r0, #4096	; 0x1000
 800d914:	eb01 0082 	add.w	r0, r1, r2, lsl #2
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800d918:	6823      	ldr	r3, [r4, #0]
 800d91a:	f841 3b04 	str.w	r3, [r1], #4
  for (i = 0U; i < count32b; i++)
 800d91e:	4288      	cmp	r0, r1
 800d920:	d1fa      	bne.n	800d918 <USB_ReadPacket+0x10>
}
 800d922:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d926:	4770      	bx	lr
  uint32_t *pDest = (uint32_t *)dest;
 800d928:	4608      	mov	r0, r1
}
 800d92a:	4770      	bx	lr

0800d92c <USB_EPSetStall>:
  if (ep->is_in == 1U)
 800d92c:	784a      	ldrb	r2, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 800d92e:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 800d930:	2a01      	cmp	r2, #1
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800d932:	eb00 1043 	add.w	r0, r0, r3, lsl #5
  if (ep->is_in == 1U)
 800d936:	d00c      	beq.n	800d952 <USB_EPSetStall+0x26>
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800d938:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	; 0xb00
 800d93c:	2a00      	cmp	r2, #0
 800d93e:	db00      	blt.n	800d942 <USB_EPSetStall+0x16>
 800d940:	b9d3      	cbnz	r3, 800d978 <USB_EPSetStall+0x4c>
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800d942:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 800d946:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800d94a:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
}
 800d94e:	2000      	movs	r0, #0
 800d950:	4770      	bx	lr
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800d952:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
 800d956:	2a00      	cmp	r2, #0
 800d958:	db06      	blt.n	800d968 <USB_EPSetStall+0x3c>
 800d95a:	b12b      	cbz	r3, 800d968 <USB_EPSetStall+0x3c>
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800d95c:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 800d960:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800d964:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800d968:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 800d96c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800d970:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
}
 800d974:	2000      	movs	r0, #0
 800d976:	4770      	bx	lr
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800d978:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 800d97c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800d980:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
 800d984:	e7dd      	b.n	800d942 <USB_EPSetStall+0x16>
 800d986:	bf00      	nop

0800d988 <USB_EPClearStall>:
  if (ep->is_in == 1U)
 800d988:	784a      	ldrb	r2, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 800d98a:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 800d98c:	2a01      	cmp	r2, #1
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800d98e:	eb00 1043 	add.w	r0, r0, r3, lsl #5
  if (ep->is_in == 1U)
 800d992:	d013      	beq.n	800d9bc <USB_EPClearStall+0x34>
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800d994:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 800d998:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800d99c:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800d9a0:	78cb      	ldrb	r3, [r1, #3]
 800d9a2:	3b02      	subs	r3, #2
 800d9a4:	2b01      	cmp	r3, #1
 800d9a6:	d901      	bls.n	800d9ac <USB_EPClearStall+0x24>
}
 800d9a8:	2000      	movs	r0, #0
 800d9aa:	4770      	bx	lr
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800d9ac:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 800d9b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d9b4:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
}
 800d9b8:	2000      	movs	r0, #0
 800d9ba:	4770      	bx	lr
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800d9bc:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 800d9c0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800d9c4:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800d9c8:	78cb      	ldrb	r3, [r1, #3]
 800d9ca:	3b02      	subs	r3, #2
 800d9cc:	2b01      	cmp	r3, #1
 800d9ce:	d8eb      	bhi.n	800d9a8 <USB_EPClearStall+0x20>
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800d9d0:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 800d9d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d9d8:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
}
 800d9dc:	2000      	movs	r0, #0
 800d9de:	4770      	bx	lr

0800d9e0 <USB_SetDevAddress>:
  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800d9e0:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 800d9e4:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800d9e8:	f8c0 3800 	str.w	r3, [r0, #2048]	; 0x800
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800d9ec:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 800d9f0:	0109      	lsls	r1, r1, #4
 800d9f2:	f401 61fe 	and.w	r1, r1, #2032	; 0x7f0
 800d9f6:	4319      	orrs	r1, r3
 800d9f8:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
}
 800d9fc:	2000      	movs	r0, #0
 800d9fe:	4770      	bx	lr

0800da00 <USB_DevConnect>:
{
 800da00:	b508      	push	{r3, lr}
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800da02:	f8d0 2804 	ldr.w	r2, [r0, #2052]	; 0x804
 800da06:	f022 0202 	bic.w	r2, r2, #2
 800da0a:	f500 6300 	add.w	r3, r0, #2048	; 0x800
  HAL_Delay(3U);
 800da0e:	2003      	movs	r0, #3
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800da10:	605a      	str	r2, [r3, #4]
  HAL_Delay(3U);
 800da12:	f7f8 fb17 	bl	8006044 <HAL_Delay>
}
 800da16:	2000      	movs	r0, #0
 800da18:	bd08      	pop	{r3, pc}
 800da1a:	bf00      	nop

0800da1c <USB_DevDisconnect>:
{
 800da1c:	b508      	push	{r3, lr}
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800da1e:	f8d0 2804 	ldr.w	r2, [r0, #2052]	; 0x804
 800da22:	f042 0202 	orr.w	r2, r2, #2
 800da26:	f500 6300 	add.w	r3, r0, #2048	; 0x800
  HAL_Delay(3U);
 800da2a:	2003      	movs	r0, #3
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800da2c:	605a      	str	r2, [r3, #4]
  HAL_Delay(3U);
 800da2e:	f7f8 fb09 	bl	8006044 <HAL_Delay>
}
 800da32:	2000      	movs	r0, #0
 800da34:	bd08      	pop	{r3, pc}
 800da36:	bf00      	nop

0800da38 <USB_ReadInterrupts>:
  tmpreg = USBx->GINTSTS;
 800da38:	6942      	ldr	r2, [r0, #20]
  tmpreg &= USBx->GINTMSK;
 800da3a:	6980      	ldr	r0, [r0, #24]
}
 800da3c:	4010      	ands	r0, r2
 800da3e:	4770      	bx	lr

0800da40 <USB_ReadDevAllOutEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 800da40:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
 800da44:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800da48:	69c0      	ldr	r0, [r0, #28]
 800da4a:	4018      	ands	r0, r3
}
 800da4c:	0c00      	lsrs	r0, r0, #16
 800da4e:	4770      	bx	lr

0800da50 <USB_ReadDevAllInEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 800da50:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
 800da54:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800da58:	69c0      	ldr	r0, [r0, #28]
 800da5a:	4018      	ands	r0, r3
}
 800da5c:	b280      	uxth	r0, r0
 800da5e:	4770      	bx	lr

0800da60 <USB_ReadDevOutEPInterrupt>:
  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800da60:	eb00 1141 	add.w	r1, r0, r1, lsl #5
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800da64:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800da68:	f8d1 2b08 	ldr.w	r2, [r1, #2824]	; 0xb08
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800da6c:	6940      	ldr	r0, [r0, #20]
}
 800da6e:	4010      	ands	r0, r2
 800da70:	4770      	bx	lr
 800da72:	bf00      	nop

0800da74 <USB_ReadDevInEPInterrupt>:
{
 800da74:	b410      	push	{r4}
  msk = USBx_DEVICE->DIEPMSK;
 800da76:	f8d0 4810 	ldr.w	r4, [r0, #2064]	; 0x810
  emp = USBx_DEVICE->DIEPEMPMSK;
 800da7a:	f8d0 3834 	ldr.w	r3, [r0, #2100]	; 0x834
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800da7e:	eb00 1041 	add.w	r0, r0, r1, lsl #5
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800da82:	f001 010f 	and.w	r1, r1, #15
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800da86:	f500 6010 	add.w	r0, r0, #2304	; 0x900
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800da8a:	40cb      	lsrs	r3, r1
 800da8c:	01db      	lsls	r3, r3, #7
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800da8e:	6880      	ldr	r0, [r0, #8]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800da90:	b2db      	uxtb	r3, r3
 800da92:	4323      	orrs	r3, r4
}
 800da94:	4018      	ands	r0, r3
 800da96:	f85d 4b04 	ldr.w	r4, [sp], #4
 800da9a:	4770      	bx	lr

0800da9c <USB_GetMode>:
  return ((USBx->GINTSTS) & 0x1U);
 800da9c:	6940      	ldr	r0, [r0, #20]
}
 800da9e:	f000 0001 	and.w	r0, r0, #1
 800daa2:	4770      	bx	lr

0800daa4 <USB_ActivateSetup>:
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800daa4:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 800daa8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800daac:	f023 0307 	bic.w	r3, r3, #7
 800dab0:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800dab4:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 800dab8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800dabc:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
}
 800dac0:	2000      	movs	r0, #0
 800dac2:	4770      	bx	lr

0800dac4 <USB_EP0_OutStart>:
  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800dac4:	4b0e      	ldr	r3, [pc, #56]	; (800db00 <USB_EP0_OutStart+0x3c>)
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800dac6:	6c02      	ldr	r2, [r0, #64]	; 0x40
  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800dac8:	429a      	cmp	r2, r3
 800daca:	d811      	bhi.n	800daf0 <USB_EP0_OutStart+0x2c>
 800dacc:	f500 6030 	add.w	r0, r0, #2816	; 0xb00
  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800dad0:	2300      	movs	r3, #0
 800dad2:	6103      	str	r3, [r0, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800dad4:	6903      	ldr	r3, [r0, #16]
 800dad6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800dada:	6103      	str	r3, [r0, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800dadc:	6903      	ldr	r3, [r0, #16]
 800dade:	f043 0318 	orr.w	r3, r3, #24
 800dae2:	6103      	str	r3, [r0, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800dae4:	6903      	ldr	r3, [r0, #16]
 800dae6:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800daea:	6103      	str	r3, [r0, #16]
}
 800daec:	2000      	movs	r0, #0
 800daee:	4770      	bx	lr
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800daf0:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 800daf4:	2b00      	cmp	r3, #0
 800daf6:	f500 6030 	add.w	r0, r0, #2816	; 0xb00
 800dafa:	dae9      	bge.n	800dad0 <USB_EP0_OutStart+0xc>
}
 800dafc:	2000      	movs	r0, #0
 800dafe:	4770      	bx	lr
 800db00:	4f54300a 	.word	0x4f54300a

0800db04 <USBD_WCID_STREAMING_DataIn>:
* @retval status
*/
static uint8_t  USBD_WCID_STREAMING_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
  USBD_WCID_STREAMING_HandleTypeDef   *hwcid = (USBD_WCID_STREAMING_HandleTypeDef*) pdev->pClassData;
  hwcid->TXStates[(epnum & 0x7F) - 1] = 0;
 800db04:	f001 017f 	and.w	r1, r1, #127	; 0x7f
  USBD_WCID_STREAMING_HandleTypeDef   *hwcid = (USBD_WCID_STREAMING_HandleTypeDef*) pdev->pClassData;
 800db08:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
  hwcid->TXStates[(epnum & 0x7F) - 1] = 0;
 800db0c:	3145      	adds	r1, #69	; 0x45
 800db0e:	2000      	movs	r0, #0
 800db10:	f843 0021 	str.w	r0, [r3, r1, lsl #2]
  return USBD_OK;
}
 800db14:	4770      	bx	lr
 800db16:	bf00      	nop

0800db18 <USBD_WCID_STREAMING_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_WCID_STREAMING_EP0_RxReady (USBD_HandleTypeDef *pdev)
{ 
 800db18:	b530      	push	{r4, r5, lr}
  USBD_WCID_STREAMING_HandleTypeDef   *hwcid = (USBD_WCID_STREAMING_HandleTypeDef*) pdev->pClassData;
  
  if((pdev->pUserData != NULL) && (hwcid->CmdOpCode != 0xFF))
 800db1a:	f8d0 52bc 	ldr.w	r5, [r0, #700]	; 0x2bc
{ 
 800db1e:	b083      	sub	sp, #12
  if((pdev->pUserData != NULL) && (hwcid->CmdOpCode != 0xFF))
 800db20:	b19d      	cbz	r5, 800db4a <USBD_WCID_STREAMING_EP0_RxReady+0x32>
  USBD_WCID_STREAMING_HandleTypeDef   *hwcid = (USBD_WCID_STREAMING_HandleTypeDef*) pdev->pClassData;
 800db22:	f8d0 42b8 	ldr.w	r4, [r0, #696]	; 0x2b8
  if((pdev->pUserData != NULL) && (hwcid->CmdOpCode != 0xFF))
 800db26:	f894 1100 	ldrb.w	r1, [r4, #256]	; 0x100
 800db2a:	29ff      	cmp	r1, #255	; 0xff
 800db2c:	d00d      	beq.n	800db4a <USBD_WCID_STREAMING_EP0_RxReady+0x32>
  {
    ((USBD_WCID_STREAMING_ItfTypeDef *)pdev->pUserData)->Control(1, hwcid->CmdOpCode, hwcid->wValue,  hwcid->wIndex,
 800db2e:	f8b4 0102 	ldrh.w	r0, [r4, #258]	; 0x102
 800db32:	f8b4 3106 	ldrh.w	r3, [r4, #262]	; 0x106
 800db36:	f8b4 2104 	ldrh.w	r2, [r4, #260]	; 0x104
 800db3a:	e9cd 4000 	strd	r4, r0, [sp]
 800db3e:	2001      	movs	r0, #1
 800db40:	68ad      	ldr	r5, [r5, #8]
 800db42:	47a8      	blx	r5
                                                          (uint8_t *)hwcid->data,
                                                          hwcid->CmdLength);
      hwcid->CmdOpCode = 0xFF;     
 800db44:	23ff      	movs	r3, #255	; 0xff
 800db46:	f884 3100 	strb.w	r3, [r4, #256]	; 0x100
  }
  return USBD_OK;
}
 800db4a:	2000      	movs	r0, #0
 800db4c:	b003      	add	sp, #12
 800db4e:	bd30      	pop	{r4, r5, pc}

0800db50 <USBD_WCID_STREAMING_GetFSCfgDesc>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_WCID_STREAMING_GetFSCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_WCID_STREAMING_CfgFSDesc);
 800db50:	233c      	movs	r3, #60	; 0x3c
 800db52:	8003      	strh	r3, [r0, #0]
  return USBD_WCID_STREAMING_CfgFSDesc;
}
 800db54:	4800      	ldr	r0, [pc, #0]	; (800db58 <USBD_WCID_STREAMING_GetFSCfgDesc+0x8>)
 800db56:	4770      	bx	lr
 800db58:	20000194 	.word	0x20000194

0800db5c <USBD_WCID_STREAMING_GetHSCfgDesc>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_WCID_STREAMING_GetHSCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_WCID_STREAMING_CfgHSDesc);
 800db5c:	233c      	movs	r3, #60	; 0x3c
 800db5e:	8003      	strh	r3, [r0, #0]
  return USBD_WCID_STREAMING_CfgHSDesc;
}
 800db60:	4800      	ldr	r0, [pc, #0]	; (800db64 <USBD_WCID_STREAMING_GetHSCfgDesc+0x8>)
 800db62:	4770      	bx	lr
 800db64:	200001d0 	.word	0x200001d0

0800db68 <USBD_WCID_STREAMING_GetOtherSpeedCfgDesc>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_WCID_STREAMING_GetOtherSpeedCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_WCID_STREAMING_OtherSpeedCfgDesc);
 800db68:	233c      	movs	r3, #60	; 0x3c
 800db6a:	8003      	strh	r3, [r0, #0]
  return USBD_WCID_STREAMING_OtherSpeedCfgDesc;
}
 800db6c:	4800      	ldr	r0, [pc, #0]	; (800db70 <USBD_WCID_STREAMING_GetOtherSpeedCfgDesc+0x8>)
 800db6e:	4770      	bx	lr
 800db70:	2000020c 	.word	0x2000020c

0800db74 <USBD_WCID_STREAMING_GetDeviceQualifierDescriptor>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_WCID_STREAMING_GetDeviceQualifierDescriptor (uint16_t *length)
{
  *length = sizeof (USBD_WCID_STREAMING_DeviceQualifierDesc);
 800db74:	230a      	movs	r3, #10
 800db76:	8003      	strh	r3, [r0, #0]
  return USBD_WCID_STREAMING_DeviceQualifierDesc;
}
 800db78:	4800      	ldr	r0, [pc, #0]	; (800db7c <USBD_WCID_STREAMING_GetDeviceQualifierDescriptor+0x8>)
 800db7a:	4770      	bx	lr
 800db7c:	20000248 	.word	0x20000248

0800db80 <USBD_WCID_STREAMING_GetUsrStrDescriptor>:
* @param  index : index
* @retval pointer to descriptor buffer
*/
uint8_t  * USBD_WCID_STREAMING_GetUsrStrDescriptor(USBD_HandleTypeDef *pdev ,uint8_t index,  uint16_t *length)
{
  if ((index) == 0xEE)
 800db80:	29ee      	cmp	r1, #238	; 0xee
  {    
    *length = sizeof (USBD_OSStringDesc);
 800db82:	bf03      	ittte	eq
 800db84:	2312      	moveq	r3, #18
    return USBD_OSStringDesc;
 800db86:	4802      	ldreq	r0, [pc, #8]	; (800db90 <USBD_WCID_STREAMING_GetUsrStrDescriptor+0x10>)
    *length = sizeof (USBD_OSStringDesc);
 800db88:	8013      	strheq	r3, [r2, #0]
  }
  
  return 0;
 800db8a:	2000      	movne	r0, #0
}
 800db8c:	4770      	bx	lr
 800db8e:	bf00      	nop
 800db90:	20000254 	.word	0x20000254

0800db94 <USBD_WCID_STREAMING_DataOut>:
{      
 800db94:	b538      	push	{r3, r4, r5, lr}
 800db96:	4604      	mov	r4, r0
  USBD_WCID_STREAMING_HandleTypeDef   *hwcid = (USBD_WCID_STREAMING_HandleTypeDef*) pdev->pClassData;
 800db98:	f8d0 52b8 	ldr.w	r5, [r0, #696]	; 0x2b8
  hwcid->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 800db9c:	f7f6 fff0 	bl	8004b80 <USBD_LL_GetRxDataSize>
  if(pdev->pClassData != NULL)  
 800dba0:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
  hwcid->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 800dba4:	f8c5 0110 	str.w	r0, [r5, #272]	; 0x110
  if(pdev->pClassData != NULL)  
 800dba8:	b193      	cbz	r3, 800dbd0 <USBD_WCID_STREAMING_DataOut+0x3c>
    ((USBD_WCID_STREAMING_ItfTypeDef *)pdev->pUserData)->Receive(hwcid->RxBuffer, hwcid->RxLength);    
 800dbaa:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
 800dbae:	4601      	mov	r1, r0
 800dbb0:	68db      	ldr	r3, [r3, #12]
 800dbb2:	f8d5 0108 	ldr.w	r0, [r5, #264]	; 0x108
 800dbb6:	4798      	blx	r3
* @param  pdev: device instance
* @retval status
*/
static uint8_t USBD_WCID_STREAMING_ReceivePacket(USBD_HandleTypeDef *pdev)
{      
  USBD_WCID_STREAMING_HandleTypeDef   *hwcid = (USBD_WCID_STREAMING_HandleTypeDef*) pdev->pClassData;
 800dbb8:	f8d4 02b8 	ldr.w	r0, [r4, #696]	; 0x2b8
  
  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 800dbbc:	b138      	cbz	r0, 800dbce <USBD_WCID_STREAMING_DataOut+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    USBD_LL_PrepareReceive(pdev,
 800dbbe:	f8d0 2108 	ldr.w	r2, [r0, #264]	; 0x108
 800dbc2:	2340      	movs	r3, #64	; 0x40
 800dbc4:	4620      	mov	r0, r4
 800dbc6:	2101      	movs	r1, #1
 800dbc8:	f7f6 ffd2 	bl	8004b70 <USBD_LL_PrepareReceive>
    return USBD_OK;
 800dbcc:	2000      	movs	r0, #0
}
 800dbce:	bd38      	pop	{r3, r4, r5, pc}
    return USBD_FAIL;
 800dbd0:	2002      	movs	r0, #2
}
 800dbd2:	bd38      	pop	{r3, r4, r5, pc}

0800dbd4 <USBD_WCID_STREAMING_Setup>:
{
 800dbd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dbd6:	460c      	mov	r4, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800dbd8:	7809      	ldrb	r1, [r1, #0]
 800dbda:	f001 0360 	and.w	r3, r1, #96	; 0x60
 800dbde:	2b20      	cmp	r3, #32
{
 800dbe0:	b083      	sub	sp, #12
 800dbe2:	4605      	mov	r5, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800dbe4:	d022      	beq.n	800dc2c <USBD_WCID_STREAMING_Setup+0x58>
 800dbe6:	2b40      	cmp	r3, #64	; 0x40
 800dbe8:	d00a      	beq.n	800dc00 <USBD_WCID_STREAMING_Setup+0x2c>
 800dbea:	b113      	cbz	r3, 800dbf2 <USBD_WCID_STREAMING_Setup+0x1e>
}
 800dbec:	2000      	movs	r0, #0
 800dbee:	b003      	add	sp, #12
 800dbf0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    switch (req->bRequest)
 800dbf2:	7863      	ldrb	r3, [r4, #1]
 800dbf4:	2b0a      	cmp	r3, #10
 800dbf6:	d103      	bne.n	800dc00 <USBD_WCID_STREAMING_Setup+0x2c>
      USBD_CtlSendData (pdev,
 800dbf8:	4933      	ldr	r1, [pc, #204]	; (800dcc8 <USBD_WCID_STREAMING_Setup+0xf4>)
 800dbfa:	2201      	movs	r2, #1
 800dbfc:	f001 f8ba 	bl	800ed74 <USBD_CtlSendData>
static USBD_StatusTypeDef  USBD_VendDevReq (USBD_HandleTypeDef *pdev ,USBD_SetupReqTypedef *req)
{
  uint16_t len;
  uint8_t *pbuf;
  
  switch (req->wIndex) 
 800dc00:	88a3      	ldrh	r3, [r4, #4]
 800dc02:	2b04      	cmp	r3, #4
 800dc04:	d036      	beq.n	800dc74 <USBD_WCID_STREAMING_Setup+0xa0>
 800dc06:	2b05      	cmp	r3, #5
 800dc08:	d029      	beq.n	800dc5e <USBD_WCID_STREAMING_Setup+0x8a>
 800dc0a:	2b00      	cmp	r3, #0
 800dc0c:	d1ee      	bne.n	800dbec <USBD_WCID_STREAMING_Setup+0x18>
    }    
    break;  
  case USB_DESC_TYPE_USER_CONTROL_ID:
    {
      USBD_WCID_STREAMING_HandleTypeDef   *hwcid = (USBD_WCID_STREAMING_HandleTypeDef*) pdev->pClassData;
      if (req->wLength)
 800dc0e:	88e2      	ldrh	r2, [r4, #6]
 800dc10:	2a00      	cmp	r2, #0
 800dc12:	d0eb      	beq.n	800dbec <USBD_WCID_STREAMING_Setup+0x18>
      {
        if (req->bmRequest & 0x80)
 800dc14:	f994 1000 	ldrsb.w	r1, [r4]
      USBD_WCID_STREAMING_HandleTypeDef   *hwcid = (USBD_WCID_STREAMING_HandleTypeDef*) pdev->pClassData;
 800dc18:	f8d5 62b8 	ldr.w	r6, [r5, #696]	; 0x2b8
        if (req->bmRequest & 0x80)
 800dc1c:	2900      	cmp	r1, #0
 800dc1e:	da43      	bge.n	800dca8 <USBD_WCID_STREAMING_Setup+0xd4>
        {
          ((USBD_WCID_STREAMING_ItfTypeDef *)pdev->pUserData)->Control(0, req->bRequest, req->wValue, req->wIndex, 
 800dc20:	f8d5 12bc 	ldr.w	r1, [r5, #700]	; 0x2bc
 800dc24:	e9cd 6200 	strd	r6, r2, [sp]
 800dc28:	688f      	ldr	r7, [r1, #8]
 800dc2a:	e00c      	b.n	800dc46 <USBD_WCID_STREAMING_Setup+0x72>
    if (req->wLength)
 800dc2c:	88e2      	ldrh	r2, [r4, #6]
 800dc2e:	2a00      	cmp	r2, #0
 800dc30:	d0dc      	beq.n	800dbec <USBD_WCID_STREAMING_Setup+0x18>
      if (req->bmRequest & 0x80) /* GET */
 800dc32:	060b      	lsls	r3, r1, #24
  USBD_WCID_STREAMING_HandleTypeDef   *hwcid = (USBD_WCID_STREAMING_HandleTypeDef*) pdev->pClassData;
 800dc34:	f8d0 62b8 	ldr.w	r6, [r0, #696]	; 0x2b8
      if (req->bmRequest & 0x80) /* GET */
 800dc38:	d527      	bpl.n	800dc8a <USBD_WCID_STREAMING_Setup+0xb6>
        ((USBD_WCID_STREAMING_ItfTypeDef *)pdev->pUserData)->Control(0, req->bRequest, req->wValue, req->wIndex,
 800dc3a:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc
 800dc3e:	e9cd 6200 	strd	r6, r2, [sp]
 800dc42:	689f      	ldr	r7, [r3, #8]
 800dc44:	88a3      	ldrh	r3, [r4, #4]
 800dc46:	8862      	ldrh	r2, [r4, #2]
 800dc48:	7861      	ldrb	r1, [r4, #1]
 800dc4a:	2000      	movs	r0, #0
 800dc4c:	47b8      	blx	r7
          USBD_CtlSendData (pdev, 
 800dc4e:	88e2      	ldrh	r2, [r4, #6]
 800dc50:	4631      	mov	r1, r6
 800dc52:	4628      	mov	r0, r5
 800dc54:	f001 f88e 	bl	800ed74 <USBD_CtlSendData>
}
 800dc58:	2000      	movs	r0, #0
 800dc5a:	b003      	add	sp, #12
 800dc5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if((len != 0)&& (req->wLength != 0))
 800dc5e:	88e2      	ldrh	r2, [r4, #6]
 800dc60:	2a00      	cmp	r2, #0
 800dc62:	d0c3      	beq.n	800dbec <USBD_WCID_STREAMING_Setup+0x18>
        USBD_CtlSendData (pdev, 
 800dc64:	2a94      	cmp	r2, #148	; 0x94
 800dc66:	4919      	ldr	r1, [pc, #100]	; (800dccc <USBD_WCID_STREAMING_Setup+0xf8>)
 800dc68:	bf28      	it	cs
 800dc6a:	2294      	movcs	r2, #148	; 0x94
 800dc6c:	4628      	mov	r0, r5
 800dc6e:	f001 f881 	bl	800ed74 <USBD_CtlSendData>
 800dc72:	e7bb      	b.n	800dbec <USBD_WCID_STREAMING_Setup+0x18>
      if((len != 0)&& (req->wLength != 0))
 800dc74:	88e2      	ldrh	r2, [r4, #6]
 800dc76:	2a00      	cmp	r2, #0
 800dc78:	d0b8      	beq.n	800dbec <USBD_WCID_STREAMING_Setup+0x18>
        USBD_CtlSendData (pdev, 
 800dc7a:	2a28      	cmp	r2, #40	; 0x28
 800dc7c:	4914      	ldr	r1, [pc, #80]	; (800dcd0 <USBD_WCID_STREAMING_Setup+0xfc>)
 800dc7e:	bf28      	it	cs
 800dc80:	2228      	movcs	r2, #40	; 0x28
 800dc82:	4628      	mov	r0, r5
 800dc84:	f001 f876 	bl	800ed74 <USBD_CtlSendData>
 800dc88:	e7b0      	b.n	800dbec <USBD_WCID_STREAMING_Setup+0x18>
        hwcid->CmdOpCode = req->bRequest;
 800dc8a:	7863      	ldrb	r3, [r4, #1]
 800dc8c:	f886 3100 	strb.w	r3, [r6, #256]	; 0x100
        hwcid->wValue = req->wValue;
 800dc90:	8861      	ldrh	r1, [r4, #2]
        hwcid->wIndex = req->wIndex;
 800dc92:	88a3      	ldrh	r3, [r4, #4]
 800dc94:	f8a6 3106 	strh.w	r3, [r6, #262]	; 0x106
        hwcid->wValue = req->wValue;
 800dc98:	f8a6 1104 	strh.w	r1, [r6, #260]	; 0x104
        hwcid->CmdLength = req->wLength;
 800dc9c:	f8a6 2102 	strh.w	r2, [r6, #258]	; 0x102
        USBD_CtlPrepareRx (pdev, 
 800dca0:	4631      	mov	r1, r6
 800dca2:	f001 f87d 	bl	800eda0 <USBD_CtlPrepareRx>
 800dca6:	e7a1      	b.n	800dbec <USBD_WCID_STREAMING_Setup+0x18>
                              (uint8_t *)hwcid->data,
                              req->wLength);
        }
        else
        {
          hwcid->CmdOpCode = req->bRequest;
 800dca8:	7861      	ldrb	r1, [r4, #1]
 800dcaa:	f886 1100 	strb.w	r1, [r6, #256]	; 0x100
          hwcid->CmdLength = req->wLength;
          hwcid->wValue = req->wValue;
 800dcae:	8861      	ldrh	r1, [r4, #2]
 800dcb0:	f8a6 1104 	strh.w	r1, [r6, #260]	; 0x104
          hwcid->wIndex = req->wIndex;
          
          USBD_CtlPrepareRx (pdev, 
 800dcb4:	4628      	mov	r0, r5
          hwcid->CmdLength = req->wLength;
 800dcb6:	f8a6 2102 	strh.w	r2, [r6, #258]	; 0x102
          hwcid->wIndex = req->wIndex;
 800dcba:	f8a6 3106 	strh.w	r3, [r6, #262]	; 0x106
          USBD_CtlPrepareRx (pdev, 
 800dcbe:	4631      	mov	r1, r6
 800dcc0:	f001 f86e 	bl	800eda0 <USBD_CtlPrepareRx>
 800dcc4:	e792      	b.n	800dbec <USBD_WCID_STREAMING_Setup+0x18>
 800dcc6:	bf00      	nop
 800dcc8:	20001cfb 	.word	0x20001cfb
 800dccc:	20000290 	.word	0x20000290
 800dcd0:	20000268 	.word	0x20000268

0800dcd4 <USBD_WCID_STREAMING_DeInit>:
{
 800dcd4:	b510      	push	{r4, lr}
  USBD_LL_CloseEP(pdev, DATA_IN_EP1);  
 800dcd6:	2181      	movs	r1, #129	; 0x81
{
 800dcd8:	4604      	mov	r4, r0
  USBD_LL_CloseEP(pdev, DATA_IN_EP1);  
 800dcda:	f7f6 ff0d 	bl	8004af8 <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev, DATA_IN_EP2);
 800dcde:	4620      	mov	r0, r4
 800dce0:	2182      	movs	r1, #130	; 0x82
 800dce2:	f7f6 ff09 	bl	8004af8 <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev, DATA_IN_EP3);
 800dce6:	4620      	mov	r0, r4
 800dce8:	2183      	movs	r1, #131	; 0x83
 800dcea:	f7f6 ff05 	bl	8004af8 <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev, DATA_IN_EP4);
 800dcee:	4620      	mov	r0, r4
 800dcf0:	2184      	movs	r1, #132	; 0x84
 800dcf2:	f7f6 ff01 	bl	8004af8 <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev, DATA_IN_EP5);
 800dcf6:	4620      	mov	r0, r4
 800dcf8:	2185      	movs	r1, #133	; 0x85
 800dcfa:	f7f6 fefd 	bl	8004af8 <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev,
 800dcfe:	4620      	mov	r0, r4
 800dd00:	2101      	movs	r1, #1
 800dd02:	f7f6 fef9 	bl	8004af8 <USBD_LL_CloseEP>
  pdev->pClassData = NULL;
 800dd06:	2000      	movs	r0, #0
 800dd08:	f8c4 02b8 	str.w	r0, [r4, #696]	; 0x2b8
}
 800dd0c:	bd10      	pop	{r4, pc}
 800dd0e:	bf00      	nop

0800dd10 <USBD_WCID_STREAMING_Init>:
{
 800dd10:	b570      	push	{r4, r5, r6, lr}
  USBD_LL_OpenEP(pdev,
 800dd12:	2340      	movs	r3, #64	; 0x40
{
 800dd14:	4606      	mov	r6, r0
  USBD_LL_OpenEP(pdev,
 800dd16:	2202      	movs	r2, #2
 800dd18:	2181      	movs	r1, #129	; 0x81
 800dd1a:	f7f6 fee3 	bl	8004ae4 <USBD_LL_OpenEP>
  USBD_LL_OpenEP(pdev,
 800dd1e:	4630      	mov	r0, r6
 800dd20:	2340      	movs	r3, #64	; 0x40
 800dd22:	2202      	movs	r2, #2
 800dd24:	2182      	movs	r1, #130	; 0x82
 800dd26:	f7f6 fedd 	bl	8004ae4 <USBD_LL_OpenEP>
  USBD_LL_OpenEP(pdev,
 800dd2a:	4630      	mov	r0, r6
 800dd2c:	2340      	movs	r3, #64	; 0x40
 800dd2e:	2202      	movs	r2, #2
 800dd30:	2183      	movs	r1, #131	; 0x83
 800dd32:	f7f6 fed7 	bl	8004ae4 <USBD_LL_OpenEP>
  USBD_LL_OpenEP(pdev,
 800dd36:	4630      	mov	r0, r6
 800dd38:	2340      	movs	r3, #64	; 0x40
 800dd3a:	2202      	movs	r2, #2
 800dd3c:	2184      	movs	r1, #132	; 0x84
 800dd3e:	f7f6 fed1 	bl	8004ae4 <USBD_LL_OpenEP>
  USBD_LL_OpenEP(pdev,
 800dd42:	4630      	mov	r0, r6
 800dd44:	2340      	movs	r3, #64	; 0x40
 800dd46:	2202      	movs	r2, #2
 800dd48:	2185      	movs	r1, #133	; 0x85
 800dd4a:	f7f6 fecb 	bl	8004ae4 <USBD_LL_OpenEP>
  USBD_LL_OpenEP(pdev,
 800dd4e:	2202      	movs	r2, #2
 800dd50:	2340      	movs	r3, #64	; 0x40
 800dd52:	4630      	mov	r0, r6
 800dd54:	2101      	movs	r1, #1
 800dd56:	f7f6 fec5 	bl	8004ae4 <USBD_LL_OpenEP>
  pdev->pClassData = (USBD_WCID_STREAMING_HandleTypeDef *)USBD_malloc(sizeof (USBD_WCID_STREAMING_HandleTypeDef));/* &USBTEST; */
 800dd5a:	2101      	movs	r1, #1
 800dd5c:	f44f 70d4 	mov.w	r0, #424	; 0x1a8
 800dd60:	f009 faae 	bl	80172c0 <calloc>
    ((USBD_WCID_STREAMING_ItfTypeDef *)pdev->pUserData)->Init();
 800dd64:	f8d6 32bc 	ldr.w	r3, [r6, #700]	; 0x2bc
  pdev->pClassData = (USBD_WCID_STREAMING_HandleTypeDef *)USBD_malloc(sizeof (USBD_WCID_STREAMING_HandleTypeDef));/* &USBTEST; */
 800dd68:	f8c6 02b8 	str.w	r0, [r6, #696]	; 0x2b8
 800dd6c:	4604      	mov	r4, r0
    ((USBD_WCID_STREAMING_ItfTypeDef *)pdev->pUserData)->Init();
 800dd6e:	681b      	ldr	r3, [r3, #0]
 800dd70:	4798      	blx	r3
    hwcid->RxState =0;
 800dd72:	2500      	movs	r5, #0
    USBD_LL_PrepareReceive(pdev,
 800dd74:	f8d4 2108 	ldr.w	r2, [r4, #264]	; 0x108
    hwcid->RxState =0;
 800dd78:	f8c4 5134 	str.w	r5, [r4, #308]	; 0x134
    USBD_LL_PrepareReceive(pdev,
 800dd7c:	4630      	mov	r0, r6
 800dd7e:	2340      	movs	r3, #64	; 0x40
 800dd80:	2101      	movs	r1, #1
      hwcid->TXStates[i] = 0;
 800dd82:	f8c4 5118 	str.w	r5, [r4, #280]	; 0x118
      hwcid->TxBuffStatus[i] = 0;
 800dd86:	f884 515c 	strb.w	r5, [r4, #348]	; 0x15c
      hwcid->TXStates[i] = 0;
 800dd8a:	f8c4 511c 	str.w	r5, [r4, #284]	; 0x11c
      hwcid->TxBuffStatus[i] = 0;
 800dd8e:	f884 515d 	strb.w	r5, [r4, #349]	; 0x15d
      hwcid->TXStates[i] = 0;
 800dd92:	f8c4 5120 	str.w	r5, [r4, #288]	; 0x120
      hwcid->TxBuffStatus[i] = 0;
 800dd96:	f884 515e 	strb.w	r5, [r4, #350]	; 0x15e
      hwcid->TXStates[i] = 0;
 800dd9a:	f8c4 5124 	str.w	r5, [r4, #292]	; 0x124
      hwcid->TxBuffStatus[i] = 0;
 800dd9e:	f884 515f 	strb.w	r5, [r4, #351]	; 0x15f
      hwcid->TXStates[i] = 0;
 800dda2:	f8c4 5128 	str.w	r5, [r4, #296]	; 0x128
      hwcid->TxBuffStatus[i] = 0;
 800dda6:	f884 5160 	strb.w	r5, [r4, #352]	; 0x160
    USBD_LL_PrepareReceive(pdev,
 800ddaa:	f7f6 fee1 	bl	8004b70 <USBD_LL_PrepareReceive>
}
 800ddae:	4628      	mov	r0, r5
 800ddb0:	bd70      	pop	{r4, r5, r6, pc}
 800ddb2:	bf00      	nop

0800ddb4 <USBD_WCID_STREAMING_SOF>:
{
 800ddb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   __IO uint32_t * TX_States = ((USBD_WCID_STREAMING_HandleTypeDef *)(pdev->pClassData))->TXStates;
 800ddb6:	f8d0 42b8 	ldr.w	r4, [r0, #696]	; 0x2b8
  if(*status == STREAMING_STATUS_STARTED)
 800ddba:	f894 11a4 	ldrb.w	r1, [r4, #420]	; 0x1a4
 800ddbe:	2901      	cmp	r1, #1
{
 800ddc0:	4605      	mov	r5, r0
  if(*status == STREAMING_STATUS_STARTED)
 800ddc2:	d046      	beq.n	800de52 <USBD_WCID_STREAMING_SOF+0x9e>
  else if(*status == STREAMING_STATUS_STOPPING)
 800ddc4:	2902      	cmp	r1, #2
 800ddc6:	d001      	beq.n	800ddcc <USBD_WCID_STREAMING_SOF+0x18>
}
 800ddc8:	2000      	movs	r0, #0
 800ddca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(/*!TX_States[i] && */!lastPacketSent[i])
 800ddcc:	f894 312c 	ldrb.w	r3, [r4, #300]	; 0x12c
 800ddd0:	2b00      	cmp	r3, #0
 800ddd2:	f000 8149 	beq.w	800e068 <USBD_WCID_STREAMING_SOF+0x2b4>
    sum += lastPacketSent[i];
 800ddd6:	f894 312c 	ldrb.w	r3, [r4, #300]	; 0x12c
    if(sum == N_IN_ENDPOINTS)
 800ddda:	2b05      	cmp	r3, #5
    sum += lastPacketSent[i];
 800dddc:	b2de      	uxtb	r6, r3
      *status = STREAMING_STATUS_IDLE;
 800ddde:	bf04      	itt	eq
 800dde0:	2300      	moveq	r3, #0
 800dde2:	f884 31a4 	strbeq.w	r3, [r4, #420]	; 0x1a4
    if(/*!TX_States[i] && */!lastPacketSent[i])
 800dde6:	f894 312d 	ldrb.w	r3, [r4, #301]	; 0x12d
 800ddea:	2b00      	cmp	r3, #0
 800ddec:	f000 811e 	beq.w	800e02c <USBD_WCID_STREAMING_SOF+0x278>
    sum += lastPacketSent[i];
 800ddf0:	f894 312d 	ldrb.w	r3, [r4, #301]	; 0x12d
 800ddf4:	441e      	add	r6, r3
    if(sum == N_IN_ENDPOINTS)
 800ddf6:	2e05      	cmp	r6, #5
      *status = STREAMING_STATUS_IDLE;
 800ddf8:	bf04      	itt	eq
 800ddfa:	2300      	moveq	r3, #0
 800ddfc:	f884 31a4 	strbeq.w	r3, [r4, #420]	; 0x1a4
    if(/*!TX_States[i] && */!lastPacketSent[i])
 800de00:	f894 312e 	ldrb.w	r3, [r4, #302]	; 0x12e
 800de04:	2b00      	cmp	r3, #0
 800de06:	f000 80f3 	beq.w	800dff0 <USBD_WCID_STREAMING_SOF+0x23c>
    sum += lastPacketSent[i];
 800de0a:	f894 312e 	ldrb.w	r3, [r4, #302]	; 0x12e
 800de0e:	441e      	add	r6, r3
    if(sum == N_IN_ENDPOINTS)
 800de10:	2e05      	cmp	r6, #5
      *status = STREAMING_STATUS_IDLE;
 800de12:	bf04      	itt	eq
 800de14:	2300      	moveq	r3, #0
 800de16:	f884 31a4 	strbeq.w	r3, [r4, #420]	; 0x1a4
    if(/*!TX_States[i] && */!lastPacketSent[i])
 800de1a:	f894 312f 	ldrb.w	r3, [r4, #303]	; 0x12f
 800de1e:	2b00      	cmp	r3, #0
 800de20:	f000 80c8 	beq.w	800dfb4 <USBD_WCID_STREAMING_SOF+0x200>
    sum += lastPacketSent[i];
 800de24:	f894 312f 	ldrb.w	r3, [r4, #303]	; 0x12f
 800de28:	441e      	add	r6, r3
    if(sum == N_IN_ENDPOINTS)
 800de2a:	2e05      	cmp	r6, #5
      *status = STREAMING_STATUS_IDLE;
 800de2c:	bf04      	itt	eq
 800de2e:	2300      	moveq	r3, #0
 800de30:	f884 31a4 	strbeq.w	r3, [r4, #420]	; 0x1a4
    if(/*!TX_States[i] && */!lastPacketSent[i])
 800de34:	f894 3130 	ldrb.w	r3, [r4, #304]	; 0x130
 800de38:	2b00      	cmp	r3, #0
 800de3a:	f000 809d 	beq.w	800df78 <USBD_WCID_STREAMING_SOF+0x1c4>
    sum += lastPacketSent[i];
 800de3e:	f894 3130 	ldrb.w	r3, [r4, #304]	; 0x130
 800de42:	441e      	add	r6, r3
    if(sum == N_IN_ENDPOINTS)
 800de44:	2e05      	cmp	r6, #5
      *status = STREAMING_STATUS_IDLE;
 800de46:	bf04      	itt	eq
 800de48:	2300      	moveq	r3, #0
 800de4a:	f884 31a4 	strbeq.w	r3, [r4, #420]	; 0x1a4
}
 800de4e:	2000      	movs	r0, #0
 800de50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(!TX_States[i])
 800de52:	f8d4 3118 	ldr.w	r3, [r4, #280]	; 0x118
 800de56:	b953      	cbnz	r3, 800de6e <USBD_WCID_STREAMING_SOF+0xba>
      if( TxBuffStatus[i] == 1)
 800de58:	f894 215c 	ldrb.w	r2, [r4, #348]	; 0x15c
 800de5c:	2a01      	cmp	r2, #1
 800de5e:	b2d6      	uxtb	r6, r2
 800de60:	f000 81c0 	beq.w	800e1e4 <USBD_WCID_STREAMING_SOF+0x430>
      else if (TxBuffStatus[i] == 2)
 800de64:	f894 215c 	ldrb.w	r2, [r4, #348]	; 0x15c
 800de68:	2a02      	cmp	r2, #2
 800de6a:	f000 814d 	beq.w	800e108 <USBD_WCID_STREAMING_SOF+0x354>
    if(!TX_States[i])
 800de6e:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
 800de72:	b953      	cbnz	r3, 800de8a <USBD_WCID_STREAMING_SOF+0xd6>
      if( TxBuffStatus[i] == 1)
 800de74:	f894 215d 	ldrb.w	r2, [r4, #349]	; 0x15d
 800de78:	2a01      	cmp	r2, #1
 800de7a:	b2d0      	uxtb	r0, r2
 800de7c:	f000 8198 	beq.w	800e1b0 <USBD_WCID_STREAMING_SOF+0x3fc>
      else if (TxBuffStatus[i] == 2)
 800de80:	f894 215d 	ldrb.w	r2, [r4, #349]	; 0x15d
 800de84:	2a02      	cmp	r2, #2
 800de86:	f000 810c 	beq.w	800e0a2 <USBD_WCID_STREAMING_SOF+0x2ee>
    if(!TX_States[i])
 800de8a:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 800de8e:	b953      	cbnz	r3, 800dea6 <USBD_WCID_STREAMING_SOF+0xf2>
      if( TxBuffStatus[i] == 1)
 800de90:	f894 215e 	ldrb.w	r2, [r4, #350]	; 0x15e
 800de94:	2a01      	cmp	r2, #1
 800de96:	b2d0      	uxtb	r0, r2
 800de98:	f000 81d8 	beq.w	800e24c <USBD_WCID_STREAMING_SOF+0x498>
      else if (TxBuffStatus[i] == 2)
 800de9c:	f894 215e 	ldrb.w	r2, [r4, #350]	; 0x15e
 800dea0:	2a02      	cmp	r2, #2
 800dea2:	f000 8114 	beq.w	800e0ce <USBD_WCID_STREAMING_SOF+0x31a>
    if(!TX_States[i])
 800dea6:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 800deaa:	b953      	cbnz	r3, 800dec2 <USBD_WCID_STREAMING_SOF+0x10e>
      if( TxBuffStatus[i] == 1)
 800deac:	f894 215f 	ldrb.w	r2, [r4, #351]	; 0x15f
 800deb0:	2a01      	cmp	r2, #1
 800deb2:	b2d0      	uxtb	r0, r2
 800deb4:	f000 8168 	beq.w	800e188 <USBD_WCID_STREAMING_SOF+0x3d4>
      else if (TxBuffStatus[i] == 2)
 800deb8:	f894 215f 	ldrb.w	r2, [r4, #351]	; 0x15f
 800debc:	2a02      	cmp	r2, #2
 800debe:	f000 813e 	beq.w	800e13e <USBD_WCID_STREAMING_SOF+0x38a>
  if(!TX_States[N_IN_ENDPOINTS-1]) /* Todo: check logic */
 800dec2:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 800dec6:	2b00      	cmp	r3, #0
 800dec8:	f47f af7e 	bne.w	800ddc8 <USBD_WCID_STREAMING_SOF+0x14>
      if( TxBuffStatus[i] == 1)
 800decc:	f894 2160 	ldrb.w	r2, [r4, #352]	; 0x160
 800ded0:	2a01      	cmp	r2, #1
 800ded2:	b2d0      	uxtb	r0, r2
 800ded4:	f000 819f 	beq.w	800e216 <USBD_WCID_STREAMING_SOF+0x462>
      else if (TxBuffStatus[i] == 2)
 800ded8:	f894 2160 	ldrb.w	r2, [r4, #352]	; 0x160
 800dedc:	2a02      	cmp	r2, #2
 800dede:	f000 8256 	beq.w	800e38e <USBD_WCID_STREAMING_SOF+0x5da>
      if( TxBuffStatus[i] == 1)
 800dee2:	f894 3161 	ldrb.w	r3, [r4, #353]	; 0x161
 800dee6:	2b01      	cmp	r3, #1
 800dee8:	b2d8      	uxtb	r0, r3
 800deea:	f000 821d 	beq.w	800e328 <USBD_WCID_STREAMING_SOF+0x574>
      else if (TxBuffStatus[i] == 2)
 800deee:	f894 3161 	ldrb.w	r3, [r4, #353]	; 0x161
 800def2:	2b02      	cmp	r3, #2
 800def4:	f000 8234 	beq.w	800e360 <USBD_WCID_STREAMING_SOF+0x5ac>
      if( TxBuffStatus[i] == 1)
 800def8:	f894 3162 	ldrb.w	r3, [r4, #354]	; 0x162
 800defc:	2b01      	cmp	r3, #1
 800defe:	b2d8      	uxtb	r0, r3
 800df00:	f000 81f6 	beq.w	800e2f0 <USBD_WCID_STREAMING_SOF+0x53c>
      else if (TxBuffStatus[i] == 2)
 800df04:	f894 3162 	ldrb.w	r3, [r4, #354]	; 0x162
 800df08:	2b02      	cmp	r3, #2
 800df0a:	f000 826d 	beq.w	800e3e8 <USBD_WCID_STREAMING_SOF+0x634>
      if( TxBuffStatus[i] == 1)
 800df0e:	f894 3163 	ldrb.w	r3, [r4, #355]	; 0x163
 800df12:	2b01      	cmp	r3, #1
 800df14:	b2d8      	uxtb	r0, r3
 800df16:	f000 81cf 	beq.w	800e2b8 <USBD_WCID_STREAMING_SOF+0x504>
      else if (TxBuffStatus[i] == 2)
 800df1a:	f894 3163 	ldrb.w	r3, [r4, #355]	; 0x163
 800df1e:	2b02      	cmp	r3, #2
 800df20:	f000 824b 	beq.w	800e3ba <USBD_WCID_STREAMING_SOF+0x606>
      if( TxBuffStatus[i] == 1)
 800df24:	f894 3164 	ldrb.w	r3, [r4, #356]	; 0x164
 800df28:	2b01      	cmp	r3, #1
 800df2a:	b2d8      	uxtb	r0, r3
 800df2c:	f000 81a8 	beq.w	800e280 <USBD_WCID_STREAMING_SOF+0x4cc>
      else if (TxBuffStatus[i] == 2)
 800df30:	f894 3164 	ldrb.w	r3, [r4, #356]	; 0x164
 800df34:	2b02      	cmp	r3, #2
 800df36:	f47f af47 	bne.w	800ddc8 <USBD_WCID_STREAMING_SOF+0x14>
        lastPacketSent[i] = 0;
 800df3a:	2300      	movs	r3, #0
 800df3c:	f884 3134 	strb.w	r3, [r4, #308]	; 0x134
        USBD_WCID_STREAMING_SetTxBuffer(pdev, (uint8_t*)&(TxBuffer[i][ (USB_DataSizePerEp[i]/2)]),  (USB_DataSizePerEp[i]/2));
 800df40:	f8d5 12b8 	ldr.w	r1, [r5, #696]	; 0x2b8
 800df44:	f8b4 317e 	ldrh.w	r3, [r4, #382]	; 0x17e
 800df48:	f8d4 21a0 	ldr.w	r2, [r4, #416]	; 0x1a0
    if(hwcid->TXStates[(epNumber&0x7F) - 1] == 0)
 800df4c:	f8d1 6128 	ldr.w	r6, [r1, #296]	; 0x128
        USBD_WCID_STREAMING_SetTxBuffer(pdev, (uint8_t*)&(TxBuffer[i][ (USB_DataSizePerEp[i]/2)]),  (USB_DataSizePerEp[i]/2));
 800df50:	eb02 0253 	add.w	r2, r2, r3, lsr #1
 800df54:	085b      	lsrs	r3, r3, #1
  hwcid->CurrentTxBuffer = pbuff;
 800df56:	f8c1 210c 	str.w	r2, [r1, #268]	; 0x10c
  hwcid->TxLength = length;    
 800df5a:	f8c1 3114 	str.w	r3, [r1, #276]	; 0x114
    if(hwcid->TXStates[(epNumber&0x7F) - 1] == 0)
 800df5e:	2e00      	cmp	r6, #0
 800df60:	f47f af32 	bne.w	800ddc8 <USBD_WCID_STREAMING_SOF+0x14>
      hwcid->TXStates[(epNumber&0x7F) - 1] = 1;
 800df64:	2701      	movs	r7, #1
 800df66:	f8c1 7128 	str.w	r7, [r1, #296]	; 0x128
      USBD_LL_Transmit(pdev,
 800df6a:	4628      	mov	r0, r5
 800df6c:	2185      	movs	r1, #133	; 0x85
 800df6e:	f7f6 fdf7 	bl	8004b60 <USBD_LL_Transmit>
          TxBuffStatus[i] = 0;
 800df72:	f884 6164 	strb.w	r6, [r4, #356]	; 0x164
    for (; i < N_CHANNELS_MAX; i++)
 800df76:	e727      	b.n	800ddc8 <USBD_WCID_STREAMING_SOF+0x14>
      lastPacketSent[i] = 1;
 800df78:	2001      	movs	r0, #1
 800df7a:	f884 0130 	strb.w	r0, [r4, #304]	; 0x130
      USBD_WCID_STREAMING_SetTxBuffer(pdev, (uint8_t*)&(TxBuffer[i][ (USB_DataSizePerEp[i]/2)]),  (USB_DataSizePerEp[i]/2));
 800df7e:	f8d5 12b8 	ldr.w	r1, [r5, #696]	; 0x2b8
 800df82:	f8b4 3176 	ldrh.w	r3, [r4, #374]	; 0x176
 800df86:	f8d4 2190 	ldr.w	r2, [r4, #400]	; 0x190
    if(hwcid->TXStates[(epNumber&0x7F) - 1] == 0)
 800df8a:	f8d1 7128 	ldr.w	r7, [r1, #296]	; 0x128
      USBD_WCID_STREAMING_SetTxBuffer(pdev, (uint8_t*)&(TxBuffer[i][ (USB_DataSizePerEp[i]/2)]),  (USB_DataSizePerEp[i]/2));
 800df8e:	eb02 0253 	add.w	r2, r2, r3, lsr #1
 800df92:	40c3      	lsrs	r3, r0
  hwcid->CurrentTxBuffer = pbuff;
 800df94:	f8c1 210c 	str.w	r2, [r1, #268]	; 0x10c
  hwcid->TxLength = length;    
 800df98:	f8c1 3114 	str.w	r3, [r1, #276]	; 0x114
    if(hwcid->TXStates[(epNumber&0x7F) - 1] == 0)
 800df9c:	2f00      	cmp	r7, #0
 800df9e:	f47f af4e 	bne.w	800de3e <USBD_WCID_STREAMING_SOF+0x8a>
      hwcid->TXStates[(epNumber&0x7F) - 1] = 1;
 800dfa2:	f8c1 0128 	str.w	r0, [r1, #296]	; 0x128
      USBD_LL_Transmit(pdev,
 800dfa6:	4628      	mov	r0, r5
 800dfa8:	2185      	movs	r1, #133	; 0x85
 800dfaa:	f7f6 fdd9 	bl	8004b60 <USBD_LL_Transmit>
          TxBuffStatus[i] = 0;
 800dfae:	f884 7160 	strb.w	r7, [r4, #352]	; 0x160
 800dfb2:	e744      	b.n	800de3e <USBD_WCID_STREAMING_SOF+0x8a>
      lastPacketSent[i] = 1;
 800dfb4:	2001      	movs	r0, #1
 800dfb6:	f884 012f 	strb.w	r0, [r4, #303]	; 0x12f
      USBD_WCID_STREAMING_SetTxBuffer(pdev, (uint8_t*)&(TxBuffer[i][ (USB_DataSizePerEp[i]/2)]),  (USB_DataSizePerEp[i]/2));
 800dfba:	f8d5 12b8 	ldr.w	r1, [r5, #696]	; 0x2b8
 800dfbe:	f8b4 3174 	ldrh.w	r3, [r4, #372]	; 0x174
 800dfc2:	f8d4 218c 	ldr.w	r2, [r4, #396]	; 0x18c
    if(hwcid->TXStates[(epNumber&0x7F) - 1] == 0)
 800dfc6:	f8d1 7124 	ldr.w	r7, [r1, #292]	; 0x124
      USBD_WCID_STREAMING_SetTxBuffer(pdev, (uint8_t*)&(TxBuffer[i][ (USB_DataSizePerEp[i]/2)]),  (USB_DataSizePerEp[i]/2));
 800dfca:	eb02 0253 	add.w	r2, r2, r3, lsr #1
 800dfce:	40c3      	lsrs	r3, r0
  hwcid->CurrentTxBuffer = pbuff;
 800dfd0:	f8c1 210c 	str.w	r2, [r1, #268]	; 0x10c
  hwcid->TxLength = length;    
 800dfd4:	f8c1 3114 	str.w	r3, [r1, #276]	; 0x114
    if(hwcid->TXStates[(epNumber&0x7F) - 1] == 0)
 800dfd8:	2f00      	cmp	r7, #0
 800dfda:	f47f af23 	bne.w	800de24 <USBD_WCID_STREAMING_SOF+0x70>
      hwcid->TXStates[(epNumber&0x7F) - 1] = 1;
 800dfde:	f8c1 0124 	str.w	r0, [r1, #292]	; 0x124
      USBD_LL_Transmit(pdev,
 800dfe2:	2184      	movs	r1, #132	; 0x84
 800dfe4:	4628      	mov	r0, r5
 800dfe6:	f7f6 fdbb 	bl	8004b60 <USBD_LL_Transmit>
          TxBuffStatus[i] = 0;
 800dfea:	f884 715f 	strb.w	r7, [r4, #351]	; 0x15f
 800dfee:	e719      	b.n	800de24 <USBD_WCID_STREAMING_SOF+0x70>
      lastPacketSent[i] = 1;
 800dff0:	2001      	movs	r0, #1
 800dff2:	f884 012e 	strb.w	r0, [r4, #302]	; 0x12e
      USBD_WCID_STREAMING_SetTxBuffer(pdev, (uint8_t*)&(TxBuffer[i][ (USB_DataSizePerEp[i]/2)]),  (USB_DataSizePerEp[i]/2));
 800dff6:	f8d5 12b8 	ldr.w	r1, [r5, #696]	; 0x2b8
 800dffa:	f8b4 3172 	ldrh.w	r3, [r4, #370]	; 0x172
 800dffe:	f8d4 2188 	ldr.w	r2, [r4, #392]	; 0x188
    if(hwcid->TXStates[(epNumber&0x7F) - 1] == 0)
 800e002:	f8d1 7120 	ldr.w	r7, [r1, #288]	; 0x120
      USBD_WCID_STREAMING_SetTxBuffer(pdev, (uint8_t*)&(TxBuffer[i][ (USB_DataSizePerEp[i]/2)]),  (USB_DataSizePerEp[i]/2));
 800e006:	eb02 0253 	add.w	r2, r2, r3, lsr #1
 800e00a:	40c3      	lsrs	r3, r0
  hwcid->CurrentTxBuffer = pbuff;
 800e00c:	f8c1 210c 	str.w	r2, [r1, #268]	; 0x10c
  hwcid->TxLength = length;    
 800e010:	f8c1 3114 	str.w	r3, [r1, #276]	; 0x114
    if(hwcid->TXStates[(epNumber&0x7F) - 1] == 0)
 800e014:	2f00      	cmp	r7, #0
 800e016:	f47f aef8 	bne.w	800de0a <USBD_WCID_STREAMING_SOF+0x56>
      hwcid->TXStates[(epNumber&0x7F) - 1] = 1;
 800e01a:	f8c1 0120 	str.w	r0, [r1, #288]	; 0x120
      USBD_LL_Transmit(pdev,
 800e01e:	2183      	movs	r1, #131	; 0x83
 800e020:	4628      	mov	r0, r5
 800e022:	f7f6 fd9d 	bl	8004b60 <USBD_LL_Transmit>
          TxBuffStatus[i] = 0;
 800e026:	f884 715e 	strb.w	r7, [r4, #350]	; 0x15e
 800e02a:	e6ee      	b.n	800de0a <USBD_WCID_STREAMING_SOF+0x56>
      lastPacketSent[i] = 1;
 800e02c:	2001      	movs	r0, #1
 800e02e:	f884 012d 	strb.w	r0, [r4, #301]	; 0x12d
      USBD_WCID_STREAMING_SetTxBuffer(pdev, (uint8_t*)&(TxBuffer[i][ (USB_DataSizePerEp[i]/2)]),  (USB_DataSizePerEp[i]/2));
 800e032:	f8d5 12b8 	ldr.w	r1, [r5, #696]	; 0x2b8
 800e036:	f8b4 3170 	ldrh.w	r3, [r4, #368]	; 0x170
 800e03a:	f8d4 2184 	ldr.w	r2, [r4, #388]	; 0x184
    if(hwcid->TXStates[(epNumber&0x7F) - 1] == 0)
 800e03e:	f8d1 711c 	ldr.w	r7, [r1, #284]	; 0x11c
      USBD_WCID_STREAMING_SetTxBuffer(pdev, (uint8_t*)&(TxBuffer[i][ (USB_DataSizePerEp[i]/2)]),  (USB_DataSizePerEp[i]/2));
 800e042:	eb02 0253 	add.w	r2, r2, r3, lsr #1
 800e046:	40c3      	lsrs	r3, r0
  hwcid->CurrentTxBuffer = pbuff;
 800e048:	f8c1 210c 	str.w	r2, [r1, #268]	; 0x10c
  hwcid->TxLength = length;    
 800e04c:	f8c1 3114 	str.w	r3, [r1, #276]	; 0x114
    if(hwcid->TXStates[(epNumber&0x7F) - 1] == 0)
 800e050:	2f00      	cmp	r7, #0
 800e052:	f47f aecd 	bne.w	800ddf0 <USBD_WCID_STREAMING_SOF+0x3c>
      hwcid->TXStates[(epNumber&0x7F) - 1] = 1;
 800e056:	f8c1 011c 	str.w	r0, [r1, #284]	; 0x11c
      USBD_LL_Transmit(pdev,
 800e05a:	2182      	movs	r1, #130	; 0x82
 800e05c:	4628      	mov	r0, r5
 800e05e:	f7f6 fd7f 	bl	8004b60 <USBD_LL_Transmit>
          TxBuffStatus[i] = 0;
 800e062:	f884 715d 	strb.w	r7, [r4, #349]	; 0x15d
 800e066:	e6c3      	b.n	800ddf0 <USBD_WCID_STREAMING_SOF+0x3c>
      lastPacketSent[i] = 1;
 800e068:	2701      	movs	r7, #1
 800e06a:	f884 712c 	strb.w	r7, [r4, #300]	; 0x12c
      USBD_WCID_STREAMING_SetTxBuffer(pdev, (uint8_t*)&(TxBuffer[i][ (USB_DataSizePerEp[i]/2)]),  (USB_DataSizePerEp[i]/2));
 800e06e:	f8d0 12b8 	ldr.w	r1, [r0, #696]	; 0x2b8
 800e072:	f8b4 316e 	ldrh.w	r3, [r4, #366]	; 0x16e
 800e076:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
    if(hwcid->TXStates[(epNumber&0x7F) - 1] == 0)
 800e07a:	f8d1 6118 	ldr.w	r6, [r1, #280]	; 0x118
      USBD_WCID_STREAMING_SetTxBuffer(pdev, (uint8_t*)&(TxBuffer[i][ (USB_DataSizePerEp[i]/2)]),  (USB_DataSizePerEp[i]/2));
 800e07e:	eb02 0253 	add.w	r2, r2, r3, lsr #1
 800e082:	40fb      	lsrs	r3, r7
  hwcid->CurrentTxBuffer = pbuff;
 800e084:	f8c1 210c 	str.w	r2, [r1, #268]	; 0x10c
  hwcid->TxLength = length;    
 800e088:	f8c1 3114 	str.w	r3, [r1, #276]	; 0x114
    if(hwcid->TXStates[(epNumber&0x7F) - 1] == 0)
 800e08c:	2e00      	cmp	r6, #0
 800e08e:	f47f aea2 	bne.w	800ddd6 <USBD_WCID_STREAMING_SOF+0x22>
      hwcid->TXStates[(epNumber&0x7F) - 1] = 1;
 800e092:	f8c1 7118 	str.w	r7, [r1, #280]	; 0x118
      USBD_LL_Transmit(pdev,
 800e096:	2181      	movs	r1, #129	; 0x81
 800e098:	f7f6 fd62 	bl	8004b60 <USBD_LL_Transmit>
          TxBuffStatus[i] = 0;
 800e09c:	f884 615c 	strb.w	r6, [r4, #348]	; 0x15c
 800e0a0:	e699      	b.n	800ddd6 <USBD_WCID_STREAMING_SOF+0x22>
         lastPacketSent[i] = 0;
 800e0a2:	f884 312d 	strb.w	r3, [r4, #301]	; 0x12d
        TxBuffStatus[i] = 0;
 800e0a6:	f884 315d 	strb.w	r3, [r4, #349]	; 0x15d
        USBD_WCID_STREAMING_SetTxBuffer(pdev, (uint8_t*)&(TxBuffer[i][ (USB_DataSizePerEp[i]/2)]),  (USB_DataSizePerEp[i]/2));
 800e0aa:	f8d5 12b8 	ldr.w	r1, [r5, #696]	; 0x2b8
 800e0ae:	f8b4 3170 	ldrh.w	r3, [r4, #368]	; 0x170
 800e0b2:	f8d4 2184 	ldr.w	r2, [r4, #388]	; 0x184
    if(hwcid->TXStates[(epNumber&0x7F) - 1] == 0)
 800e0b6:	f8d1 011c 	ldr.w	r0, [r1, #284]	; 0x11c
        USBD_WCID_STREAMING_SetTxBuffer(pdev, (uint8_t*)&(TxBuffer[i][ (USB_DataSizePerEp[i]/2)]),  (USB_DataSizePerEp[i]/2));
 800e0ba:	eb02 0253 	add.w	r2, r2, r3, lsr #1
 800e0be:	085b      	lsrs	r3, r3, #1
  hwcid->CurrentTxBuffer = pbuff;
 800e0c0:	f8c1 210c 	str.w	r2, [r1, #268]	; 0x10c
  hwcid->TxLength = length;    
 800e0c4:	f8c1 3114 	str.w	r3, [r1, #276]	; 0x114
    if(hwcid->TXStates[(epNumber&0x7F) - 1] == 0)
 800e0c8:	2800      	cmp	r0, #0
 800e0ca:	d055      	beq.n	800e178 <USBD_WCID_STREAMING_SOF+0x3c4>
          while(1);
 800e0cc:	e7fe      	b.n	800e0cc <USBD_WCID_STREAMING_SOF+0x318>
         lastPacketSent[i] = 0;
 800e0ce:	f884 312e 	strb.w	r3, [r4, #302]	; 0x12e
        TxBuffStatus[i] = 0;
 800e0d2:	f884 315e 	strb.w	r3, [r4, #350]	; 0x15e
        USBD_WCID_STREAMING_SetTxBuffer(pdev, (uint8_t*)&(TxBuffer[i][ (USB_DataSizePerEp[i]/2)]),  (USB_DataSizePerEp[i]/2));
 800e0d6:	f8d5 12b8 	ldr.w	r1, [r5, #696]	; 0x2b8
 800e0da:	f8b4 3172 	ldrh.w	r3, [r4, #370]	; 0x172
 800e0de:	f8d4 2188 	ldr.w	r2, [r4, #392]	; 0x188
    if(hwcid->TXStates[(epNumber&0x7F) - 1] == 0)
 800e0e2:	f8d1 0120 	ldr.w	r0, [r1, #288]	; 0x120
        USBD_WCID_STREAMING_SetTxBuffer(pdev, (uint8_t*)&(TxBuffer[i][ (USB_DataSizePerEp[i]/2)]),  (USB_DataSizePerEp[i]/2));
 800e0e6:	eb02 0253 	add.w	r2, r2, r3, lsr #1
 800e0ea:	085b      	lsrs	r3, r3, #1
  hwcid->CurrentTxBuffer = pbuff;
 800e0ec:	f8c1 210c 	str.w	r2, [r1, #268]	; 0x10c
  hwcid->TxLength = length;    
 800e0f0:	f8c1 3114 	str.w	r3, [r1, #276]	; 0x114
    if(hwcid->TXStates[(epNumber&0x7F) - 1] == 0)
 800e0f4:	2800      	cmp	r0, #0
 800e0f6:	d1e9      	bne.n	800e0cc <USBD_WCID_STREAMING_SOF+0x318>
      hwcid->TXStates[(epNumber&0x7F) - 1] = 1;
 800e0f8:	2001      	movs	r0, #1
 800e0fa:	f8c1 0120 	str.w	r0, [r1, #288]	; 0x120
      USBD_LL_Transmit(pdev,
 800e0fe:	2183      	movs	r1, #131	; 0x83
 800e100:	4628      	mov	r0, r5
 800e102:	f7f6 fd2d 	bl	8004b60 <USBD_LL_Transmit>
      return USBD_OK;
 800e106:	e6ce      	b.n	800dea6 <USBD_WCID_STREAMING_SOF+0xf2>
         lastPacketSent[i] = 0;
 800e108:	f884 312c 	strb.w	r3, [r4, #300]	; 0x12c
        TxBuffStatus[i] = 0;
 800e10c:	f884 315c 	strb.w	r3, [r4, #348]	; 0x15c
        USBD_WCID_STREAMING_SetTxBuffer(pdev, (uint8_t*)&(TxBuffer[i][ (USB_DataSizePerEp[i]/2)]),  (USB_DataSizePerEp[i]/2));
 800e110:	f8d0 62b8 	ldr.w	r6, [r0, #696]	; 0x2b8
 800e114:	f8b4 316e 	ldrh.w	r3, [r4, #366]	; 0x16e
 800e118:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
    if(hwcid->TXStates[(epNumber&0x7F) - 1] == 0)
 800e11c:	f8d6 7118 	ldr.w	r7, [r6, #280]	; 0x118
        USBD_WCID_STREAMING_SetTxBuffer(pdev, (uint8_t*)&(TxBuffer[i][ (USB_DataSizePerEp[i]/2)]),  (USB_DataSizePerEp[i]/2));
 800e120:	eb02 0253 	add.w	r2, r2, r3, lsr #1
 800e124:	085b      	lsrs	r3, r3, #1
  hwcid->CurrentTxBuffer = pbuff;
 800e126:	f8c6 210c 	str.w	r2, [r6, #268]	; 0x10c
  hwcid->TxLength = length;    
 800e12a:	f8c6 3114 	str.w	r3, [r6, #276]	; 0x114
    if(hwcid->TXStates[(epNumber&0x7F) - 1] == 0)
 800e12e:	2f00      	cmp	r7, #0
 800e130:	d1cc      	bne.n	800e0cc <USBD_WCID_STREAMING_SOF+0x318>
      hwcid->TXStates[(epNumber&0x7F) - 1] = 1;
 800e132:	f8c6 1118 	str.w	r1, [r6, #280]	; 0x118
      USBD_LL_Transmit(pdev,
 800e136:	2181      	movs	r1, #129	; 0x81
 800e138:	f7f6 fd12 	bl	8004b60 <USBD_LL_Transmit>
      return USBD_OK;
 800e13c:	e697      	b.n	800de6e <USBD_WCID_STREAMING_SOF+0xba>
         lastPacketSent[i] = 0;
 800e13e:	f884 312f 	strb.w	r3, [r4, #303]	; 0x12f
        TxBuffStatus[i] = 0;
 800e142:	f884 315f 	strb.w	r3, [r4, #351]	; 0x15f
        USBD_WCID_STREAMING_SetTxBuffer(pdev, (uint8_t*)&(TxBuffer[i][ (USB_DataSizePerEp[i]/2)]),  (USB_DataSizePerEp[i]/2));
 800e146:	f8d5 12b8 	ldr.w	r1, [r5, #696]	; 0x2b8
 800e14a:	f8b4 3174 	ldrh.w	r3, [r4, #372]	; 0x174
 800e14e:	f8d4 218c 	ldr.w	r2, [r4, #396]	; 0x18c
    if(hwcid->TXStates[(epNumber&0x7F) - 1] == 0)
 800e152:	f8d1 0124 	ldr.w	r0, [r1, #292]	; 0x124
        USBD_WCID_STREAMING_SetTxBuffer(pdev, (uint8_t*)&(TxBuffer[i][ (USB_DataSizePerEp[i]/2)]),  (USB_DataSizePerEp[i]/2));
 800e156:	eb02 0253 	add.w	r2, r2, r3, lsr #1
 800e15a:	085b      	lsrs	r3, r3, #1
  hwcid->CurrentTxBuffer = pbuff;
 800e15c:	f8c1 210c 	str.w	r2, [r1, #268]	; 0x10c
  hwcid->TxLength = length;    
 800e160:	f8c1 3114 	str.w	r3, [r1, #276]	; 0x114
    if(hwcid->TXStates[(epNumber&0x7F) - 1] == 0)
 800e164:	2800      	cmp	r0, #0
 800e166:	d1b1      	bne.n	800e0cc <USBD_WCID_STREAMING_SOF+0x318>
      hwcid->TXStates[(epNumber&0x7F) - 1] = 1;
 800e168:	2001      	movs	r0, #1
 800e16a:	f8c1 0124 	str.w	r0, [r1, #292]	; 0x124
      USBD_LL_Transmit(pdev,
 800e16e:	2184      	movs	r1, #132	; 0x84
 800e170:	4628      	mov	r0, r5
 800e172:	f7f6 fcf5 	bl	8004b60 <USBD_LL_Transmit>
      return USBD_OK;
 800e176:	e6a4      	b.n	800dec2 <USBD_WCID_STREAMING_SOF+0x10e>
      hwcid->TXStates[(epNumber&0x7F) - 1] = 1;
 800e178:	2001      	movs	r0, #1
 800e17a:	f8c1 011c 	str.w	r0, [r1, #284]	; 0x11c
      USBD_LL_Transmit(pdev,
 800e17e:	2182      	movs	r1, #130	; 0x82
 800e180:	4628      	mov	r0, r5
 800e182:	f7f6 fced 	bl	8004b60 <USBD_LL_Transmit>
      return USBD_OK;
 800e186:	e680      	b.n	800de8a <USBD_WCID_STREAMING_SOF+0xd6>
         lastPacketSent[i] = 0;
 800e188:	f884 312f 	strb.w	r3, [r4, #303]	; 0x12f
        TxBuffStatus[i] = 0;
 800e18c:	f884 315f 	strb.w	r3, [r4, #351]	; 0x15f
        USBD_WCID_STREAMING_SetTxBuffer(pdev, (uint8_t*)&(TxBuffer[i][0]), (USB_DataSizePerEp[i]/2));
 800e190:	f8d5 12b8 	ldr.w	r1, [r5, #696]	; 0x2b8
 800e194:	f8b4 3174 	ldrh.w	r3, [r4, #372]	; 0x174
    if(hwcid->TXStates[(epNumber&0x7F) - 1] == 0)
 800e198:	f8d1 6124 	ldr.w	r6, [r1, #292]	; 0x124
        USBD_WCID_STREAMING_SetTxBuffer(pdev, (uint8_t*)&(TxBuffer[i][0]), (USB_DataSizePerEp[i]/2));
 800e19c:	f8d4 218c 	ldr.w	r2, [r4, #396]	; 0x18c
  hwcid->CurrentTxBuffer = pbuff;
 800e1a0:	f8c1 210c 	str.w	r2, [r1, #268]	; 0x10c
        USBD_WCID_STREAMING_SetTxBuffer(pdev, (uint8_t*)&(TxBuffer[i][0]), (USB_DataSizePerEp[i]/2));
 800e1a4:	085b      	lsrs	r3, r3, #1
  hwcid->TxLength = length;    
 800e1a6:	f8c1 3114 	str.w	r3, [r1, #276]	; 0x114
    if(hwcid->TXStates[(epNumber&0x7F) - 1] == 0)
 800e1aa:	2e00      	cmp	r6, #0
 800e1ac:	d0dd      	beq.n	800e16a <USBD_WCID_STREAMING_SOF+0x3b6>
          while(1);
 800e1ae:	e7fe      	b.n	800e1ae <USBD_WCID_STREAMING_SOF+0x3fa>
         lastPacketSent[i] = 0;
 800e1b0:	f884 312d 	strb.w	r3, [r4, #301]	; 0x12d
        TxBuffStatus[i] = 0;
 800e1b4:	f884 315d 	strb.w	r3, [r4, #349]	; 0x15d
        USBD_WCID_STREAMING_SetTxBuffer(pdev, (uint8_t*)&(TxBuffer[i][0]), (USB_DataSizePerEp[i]/2));
 800e1b8:	f8d5 12b8 	ldr.w	r1, [r5, #696]	; 0x2b8
 800e1bc:	f8b4 3170 	ldrh.w	r3, [r4, #368]	; 0x170
    if(hwcid->TXStates[(epNumber&0x7F) - 1] == 0)
 800e1c0:	f8d1 611c 	ldr.w	r6, [r1, #284]	; 0x11c
        USBD_WCID_STREAMING_SetTxBuffer(pdev, (uint8_t*)&(TxBuffer[i][0]), (USB_DataSizePerEp[i]/2));
 800e1c4:	f8d4 2184 	ldr.w	r2, [r4, #388]	; 0x184
  hwcid->CurrentTxBuffer = pbuff;
 800e1c8:	f8c1 210c 	str.w	r2, [r1, #268]	; 0x10c
        USBD_WCID_STREAMING_SetTxBuffer(pdev, (uint8_t*)&(TxBuffer[i][0]), (USB_DataSizePerEp[i]/2));
 800e1cc:	085b      	lsrs	r3, r3, #1
  hwcid->TxLength = length;    
 800e1ce:	f8c1 3114 	str.w	r3, [r1, #276]	; 0x114
    if(hwcid->TXStates[(epNumber&0x7F) - 1] == 0)
 800e1d2:	2e00      	cmp	r6, #0
 800e1d4:	d1eb      	bne.n	800e1ae <USBD_WCID_STREAMING_SOF+0x3fa>
      hwcid->TXStates[(epNumber&0x7F) - 1] = 1;
 800e1d6:	f8c1 011c 	str.w	r0, [r1, #284]	; 0x11c
      USBD_LL_Transmit(pdev,
 800e1da:	2182      	movs	r1, #130	; 0x82
 800e1dc:	4628      	mov	r0, r5
 800e1de:	f7f6 fcbf 	bl	8004b60 <USBD_LL_Transmit>
      return USBD_OK;
 800e1e2:	e652      	b.n	800de8a <USBD_WCID_STREAMING_SOF+0xd6>
         lastPacketSent[i] = 0;
 800e1e4:	f884 312c 	strb.w	r3, [r4, #300]	; 0x12c
        TxBuffStatus[i] = 0;
 800e1e8:	f884 315c 	strb.w	r3, [r4, #348]	; 0x15c
        USBD_WCID_STREAMING_SetTxBuffer(pdev, (uint8_t*)&(TxBuffer[i][0]), (USB_DataSizePerEp[i]/2));
 800e1ec:	f8d0 12b8 	ldr.w	r1, [r0, #696]	; 0x2b8
 800e1f0:	f8b4 316e 	ldrh.w	r3, [r4, #366]	; 0x16e
    if(hwcid->TXStates[(epNumber&0x7F) - 1] == 0)
 800e1f4:	f8d1 7118 	ldr.w	r7, [r1, #280]	; 0x118
        USBD_WCID_STREAMING_SetTxBuffer(pdev, (uint8_t*)&(TxBuffer[i][0]), (USB_DataSizePerEp[i]/2));
 800e1f8:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
  hwcid->CurrentTxBuffer = pbuff;
 800e1fc:	f8c1 210c 	str.w	r2, [r1, #268]	; 0x10c
        USBD_WCID_STREAMING_SetTxBuffer(pdev, (uint8_t*)&(TxBuffer[i][0]), (USB_DataSizePerEp[i]/2));
 800e200:	085b      	lsrs	r3, r3, #1
  hwcid->TxLength = length;    
 800e202:	f8c1 3114 	str.w	r3, [r1, #276]	; 0x114
    if(hwcid->TXStates[(epNumber&0x7F) - 1] == 0)
 800e206:	2f00      	cmp	r7, #0
 800e208:	d1d1      	bne.n	800e1ae <USBD_WCID_STREAMING_SOF+0x3fa>
      hwcid->TXStates[(epNumber&0x7F) - 1] = 1;
 800e20a:	f8c1 6118 	str.w	r6, [r1, #280]	; 0x118
      USBD_LL_Transmit(pdev,
 800e20e:	2181      	movs	r1, #129	; 0x81
 800e210:	f7f6 fca6 	bl	8004b60 <USBD_LL_Transmit>
      return USBD_OK;
 800e214:	e62b      	b.n	800de6e <USBD_WCID_STREAMING_SOF+0xba>
        lastPacketSent[i] = 0;
 800e216:	f884 3130 	strb.w	r3, [r4, #304]	; 0x130
        USBD_WCID_STREAMING_SetTxBuffer(pdev, (uint8_t*)&(TxBuffer[i][0]), (USB_DataSizePerEp[i]/2));
 800e21a:	f8d5 12b8 	ldr.w	r1, [r5, #696]	; 0x2b8
 800e21e:	f8b4 3176 	ldrh.w	r3, [r4, #374]	; 0x176
    if(hwcid->TXStates[(epNumber&0x7F) - 1] == 0)
 800e222:	f8d1 6128 	ldr.w	r6, [r1, #296]	; 0x128
        USBD_WCID_STREAMING_SetTxBuffer(pdev, (uint8_t*)&(TxBuffer[i][0]), (USB_DataSizePerEp[i]/2));
 800e226:	f8d4 2190 	ldr.w	r2, [r4, #400]	; 0x190
  hwcid->CurrentTxBuffer = pbuff;
 800e22a:	f8c1 210c 	str.w	r2, [r1, #268]	; 0x10c
        USBD_WCID_STREAMING_SetTxBuffer(pdev, (uint8_t*)&(TxBuffer[i][0]), (USB_DataSizePerEp[i]/2));
 800e22e:	085b      	lsrs	r3, r3, #1
  hwcid->TxLength = length;    
 800e230:	f8c1 3114 	str.w	r3, [r1, #276]	; 0x114
    if(hwcid->TXStates[(epNumber&0x7F) - 1] == 0)
 800e234:	2e00      	cmp	r6, #0
 800e236:	f47f ae54 	bne.w	800dee2 <USBD_WCID_STREAMING_SOF+0x12e>
      hwcid->TXStates[(epNumber&0x7F) - 1] = 1;
 800e23a:	f8c1 0128 	str.w	r0, [r1, #296]	; 0x128
      USBD_LL_Transmit(pdev,
 800e23e:	2185      	movs	r1, #133	; 0x85
 800e240:	4628      	mov	r0, r5
 800e242:	f7f6 fc8d 	bl	8004b60 <USBD_LL_Transmit>
          TxBuffStatus[i] = 0;
 800e246:	f884 6160 	strb.w	r6, [r4, #352]	; 0x160
 800e24a:	e64a      	b.n	800dee2 <USBD_WCID_STREAMING_SOF+0x12e>
         lastPacketSent[i] = 0;
 800e24c:	f884 312e 	strb.w	r3, [r4, #302]	; 0x12e
        TxBuffStatus[i] = 0;
 800e250:	f884 315e 	strb.w	r3, [r4, #350]	; 0x15e
        USBD_WCID_STREAMING_SetTxBuffer(pdev, (uint8_t*)&(TxBuffer[i][0]), (USB_DataSizePerEp[i]/2));
 800e254:	f8d5 12b8 	ldr.w	r1, [r5, #696]	; 0x2b8
 800e258:	f8b4 3172 	ldrh.w	r3, [r4, #370]	; 0x172
    if(hwcid->TXStates[(epNumber&0x7F) - 1] == 0)
 800e25c:	f8d1 6120 	ldr.w	r6, [r1, #288]	; 0x120
        USBD_WCID_STREAMING_SetTxBuffer(pdev, (uint8_t*)&(TxBuffer[i][0]), (USB_DataSizePerEp[i]/2));
 800e260:	f8d4 2188 	ldr.w	r2, [r4, #392]	; 0x188
  hwcid->CurrentTxBuffer = pbuff;
 800e264:	f8c1 210c 	str.w	r2, [r1, #268]	; 0x10c
        USBD_WCID_STREAMING_SetTxBuffer(pdev, (uint8_t*)&(TxBuffer[i][0]), (USB_DataSizePerEp[i]/2));
 800e268:	085b      	lsrs	r3, r3, #1
  hwcid->TxLength = length;    
 800e26a:	f8c1 3114 	str.w	r3, [r1, #276]	; 0x114
    if(hwcid->TXStates[(epNumber&0x7F) - 1] == 0)
 800e26e:	2e00      	cmp	r6, #0
 800e270:	d19d      	bne.n	800e1ae <USBD_WCID_STREAMING_SOF+0x3fa>
      hwcid->TXStates[(epNumber&0x7F) - 1] = 1;
 800e272:	f8c1 0120 	str.w	r0, [r1, #288]	; 0x120
      USBD_LL_Transmit(pdev,
 800e276:	2183      	movs	r1, #131	; 0x83
 800e278:	4628      	mov	r0, r5
 800e27a:	f7f6 fc71 	bl	8004b60 <USBD_LL_Transmit>
      return USBD_OK;
 800e27e:	e612      	b.n	800dea6 <USBD_WCID_STREAMING_SOF+0xf2>
        lastPacketSent[i] = 0;
 800e280:	2300      	movs	r3, #0
 800e282:	f884 3134 	strb.w	r3, [r4, #308]	; 0x134
        USBD_WCID_STREAMING_SetTxBuffer(pdev, (uint8_t*)&(TxBuffer[i][0]), (USB_DataSizePerEp[i]/2));
 800e286:	f8d5 12b8 	ldr.w	r1, [r5, #696]	; 0x2b8
 800e28a:	f8b4 317e 	ldrh.w	r3, [r4, #382]	; 0x17e
    if(hwcid->TXStates[(epNumber&0x7F) - 1] == 0)
 800e28e:	f8d1 6128 	ldr.w	r6, [r1, #296]	; 0x128
        USBD_WCID_STREAMING_SetTxBuffer(pdev, (uint8_t*)&(TxBuffer[i][0]), (USB_DataSizePerEp[i]/2));
 800e292:	f8d4 21a0 	ldr.w	r2, [r4, #416]	; 0x1a0
  hwcid->CurrentTxBuffer = pbuff;
 800e296:	f8c1 210c 	str.w	r2, [r1, #268]	; 0x10c
        USBD_WCID_STREAMING_SetTxBuffer(pdev, (uint8_t*)&(TxBuffer[i][0]), (USB_DataSizePerEp[i]/2));
 800e29a:	085b      	lsrs	r3, r3, #1
  hwcid->TxLength = length;    
 800e29c:	f8c1 3114 	str.w	r3, [r1, #276]	; 0x114
    if(hwcid->TXStates[(epNumber&0x7F) - 1] == 0)
 800e2a0:	2e00      	cmp	r6, #0
 800e2a2:	f47f ad91 	bne.w	800ddc8 <USBD_WCID_STREAMING_SOF+0x14>
      hwcid->TXStates[(epNumber&0x7F) - 1] = 1;
 800e2a6:	f8c1 0128 	str.w	r0, [r1, #296]	; 0x128
      USBD_LL_Transmit(pdev,
 800e2aa:	4628      	mov	r0, r5
 800e2ac:	2185      	movs	r1, #133	; 0x85
 800e2ae:	f7f6 fc57 	bl	8004b60 <USBD_LL_Transmit>
          TxBuffStatus[i] = 0;
 800e2b2:	f884 6164 	strb.w	r6, [r4, #356]	; 0x164
 800e2b6:	e587      	b.n	800ddc8 <USBD_WCID_STREAMING_SOF+0x14>
        lastPacketSent[i] = 0;
 800e2b8:	2300      	movs	r3, #0
 800e2ba:	f884 3133 	strb.w	r3, [r4, #307]	; 0x133
        USBD_WCID_STREAMING_SetTxBuffer(pdev, (uint8_t*)&(TxBuffer[i][0]), (USB_DataSizePerEp[i]/2));
 800e2be:	f8d5 12b8 	ldr.w	r1, [r5, #696]	; 0x2b8
 800e2c2:	f8b4 317c 	ldrh.w	r3, [r4, #380]	; 0x17c
    if(hwcid->TXStates[(epNumber&0x7F) - 1] == 0)
 800e2c6:	f8d1 6128 	ldr.w	r6, [r1, #296]	; 0x128
        USBD_WCID_STREAMING_SetTxBuffer(pdev, (uint8_t*)&(TxBuffer[i][0]), (USB_DataSizePerEp[i]/2));
 800e2ca:	f8d4 219c 	ldr.w	r2, [r4, #412]	; 0x19c
  hwcid->CurrentTxBuffer = pbuff;
 800e2ce:	f8c1 210c 	str.w	r2, [r1, #268]	; 0x10c
        USBD_WCID_STREAMING_SetTxBuffer(pdev, (uint8_t*)&(TxBuffer[i][0]), (USB_DataSizePerEp[i]/2));
 800e2d2:	085b      	lsrs	r3, r3, #1
  hwcid->TxLength = length;    
 800e2d4:	f8c1 3114 	str.w	r3, [r1, #276]	; 0x114
    if(hwcid->TXStates[(epNumber&0x7F) - 1] == 0)
 800e2d8:	2e00      	cmp	r6, #0
 800e2da:	f47f ae23 	bne.w	800df24 <USBD_WCID_STREAMING_SOF+0x170>
      hwcid->TXStates[(epNumber&0x7F) - 1] = 1;
 800e2de:	f8c1 0128 	str.w	r0, [r1, #296]	; 0x128
      USBD_LL_Transmit(pdev,
 800e2e2:	2185      	movs	r1, #133	; 0x85
 800e2e4:	4628      	mov	r0, r5
 800e2e6:	f7f6 fc3b 	bl	8004b60 <USBD_LL_Transmit>
          TxBuffStatus[i] = 0;
 800e2ea:	f884 6163 	strb.w	r6, [r4, #355]	; 0x163
 800e2ee:	e619      	b.n	800df24 <USBD_WCID_STREAMING_SOF+0x170>
        lastPacketSent[i] = 0;
 800e2f0:	2300      	movs	r3, #0
 800e2f2:	f884 3132 	strb.w	r3, [r4, #306]	; 0x132
        USBD_WCID_STREAMING_SetTxBuffer(pdev, (uint8_t*)&(TxBuffer[i][0]), (USB_DataSizePerEp[i]/2));
 800e2f6:	f8d5 12b8 	ldr.w	r1, [r5, #696]	; 0x2b8
 800e2fa:	f8b4 317a 	ldrh.w	r3, [r4, #378]	; 0x17a
    if(hwcid->TXStates[(epNumber&0x7F) - 1] == 0)
 800e2fe:	f8d1 6128 	ldr.w	r6, [r1, #296]	; 0x128
        USBD_WCID_STREAMING_SetTxBuffer(pdev, (uint8_t*)&(TxBuffer[i][0]), (USB_DataSizePerEp[i]/2));
 800e302:	f8d4 2198 	ldr.w	r2, [r4, #408]	; 0x198
  hwcid->CurrentTxBuffer = pbuff;
 800e306:	f8c1 210c 	str.w	r2, [r1, #268]	; 0x10c
        USBD_WCID_STREAMING_SetTxBuffer(pdev, (uint8_t*)&(TxBuffer[i][0]), (USB_DataSizePerEp[i]/2));
 800e30a:	085b      	lsrs	r3, r3, #1
  hwcid->TxLength = length;    
 800e30c:	f8c1 3114 	str.w	r3, [r1, #276]	; 0x114
    if(hwcid->TXStates[(epNumber&0x7F) - 1] == 0)
 800e310:	2e00      	cmp	r6, #0
 800e312:	f47f adfc 	bne.w	800df0e <USBD_WCID_STREAMING_SOF+0x15a>
      hwcid->TXStates[(epNumber&0x7F) - 1] = 1;
 800e316:	f8c1 0128 	str.w	r0, [r1, #296]	; 0x128
      USBD_LL_Transmit(pdev,
 800e31a:	2185      	movs	r1, #133	; 0x85
 800e31c:	4628      	mov	r0, r5
 800e31e:	f7f6 fc1f 	bl	8004b60 <USBD_LL_Transmit>
          TxBuffStatus[i] = 0;
 800e322:	f884 6162 	strb.w	r6, [r4, #354]	; 0x162
 800e326:	e5f2      	b.n	800df0e <USBD_WCID_STREAMING_SOF+0x15a>
        lastPacketSent[i] = 0;
 800e328:	2300      	movs	r3, #0
 800e32a:	f884 3131 	strb.w	r3, [r4, #305]	; 0x131
        USBD_WCID_STREAMING_SetTxBuffer(pdev, (uint8_t*)&(TxBuffer[i][0]), (USB_DataSizePerEp[i]/2));
 800e32e:	f8d5 12b8 	ldr.w	r1, [r5, #696]	; 0x2b8
 800e332:	f8b4 3178 	ldrh.w	r3, [r4, #376]	; 0x178
    if(hwcid->TXStates[(epNumber&0x7F) - 1] == 0)
 800e336:	f8d1 6128 	ldr.w	r6, [r1, #296]	; 0x128
        USBD_WCID_STREAMING_SetTxBuffer(pdev, (uint8_t*)&(TxBuffer[i][0]), (USB_DataSizePerEp[i]/2));
 800e33a:	f8d4 2194 	ldr.w	r2, [r4, #404]	; 0x194
  hwcid->CurrentTxBuffer = pbuff;
 800e33e:	f8c1 210c 	str.w	r2, [r1, #268]	; 0x10c
        USBD_WCID_STREAMING_SetTxBuffer(pdev, (uint8_t*)&(TxBuffer[i][0]), (USB_DataSizePerEp[i]/2));
 800e342:	085b      	lsrs	r3, r3, #1
  hwcid->TxLength = length;    
 800e344:	f8c1 3114 	str.w	r3, [r1, #276]	; 0x114
    if(hwcid->TXStates[(epNumber&0x7F) - 1] == 0)
 800e348:	2e00      	cmp	r6, #0
 800e34a:	f47f add5 	bne.w	800def8 <USBD_WCID_STREAMING_SOF+0x144>
      hwcid->TXStates[(epNumber&0x7F) - 1] = 1;
 800e34e:	f8c1 0128 	str.w	r0, [r1, #296]	; 0x128
      USBD_LL_Transmit(pdev,
 800e352:	2185      	movs	r1, #133	; 0x85
 800e354:	4628      	mov	r0, r5
 800e356:	f7f6 fc03 	bl	8004b60 <USBD_LL_Transmit>
          TxBuffStatus[i] = 0;
 800e35a:	f884 6161 	strb.w	r6, [r4, #353]	; 0x161
 800e35e:	e5cb      	b.n	800def8 <USBD_WCID_STREAMING_SOF+0x144>
        lastPacketSent[i] = 0;
 800e360:	2300      	movs	r3, #0
 800e362:	f884 3131 	strb.w	r3, [r4, #305]	; 0x131
        USBD_WCID_STREAMING_SetTxBuffer(pdev, (uint8_t*)&(TxBuffer[i][ (USB_DataSizePerEp[i]/2)]),  (USB_DataSizePerEp[i]/2));
 800e366:	f8d5 12b8 	ldr.w	r1, [r5, #696]	; 0x2b8
 800e36a:	f8b4 3178 	ldrh.w	r3, [r4, #376]	; 0x178
 800e36e:	f8d4 2194 	ldr.w	r2, [r4, #404]	; 0x194
    if(hwcid->TXStates[(epNumber&0x7F) - 1] == 0)
 800e372:	f8d1 6128 	ldr.w	r6, [r1, #296]	; 0x128
        USBD_WCID_STREAMING_SetTxBuffer(pdev, (uint8_t*)&(TxBuffer[i][ (USB_DataSizePerEp[i]/2)]),  (USB_DataSizePerEp[i]/2));
 800e376:	eb02 0253 	add.w	r2, r2, r3, lsr #1
 800e37a:	085b      	lsrs	r3, r3, #1
  hwcid->CurrentTxBuffer = pbuff;
 800e37c:	f8c1 210c 	str.w	r2, [r1, #268]	; 0x10c
  hwcid->TxLength = length;    
 800e380:	f8c1 3114 	str.w	r3, [r1, #276]	; 0x114
    if(hwcid->TXStates[(epNumber&0x7F) - 1] == 0)
 800e384:	2e00      	cmp	r6, #0
 800e386:	f47f adb7 	bne.w	800def8 <USBD_WCID_STREAMING_SOF+0x144>
      hwcid->TXStates[(epNumber&0x7F) - 1] = 1;
 800e38a:	2001      	movs	r0, #1
 800e38c:	e7df      	b.n	800e34e <USBD_WCID_STREAMING_SOF+0x59a>
        lastPacketSent[i] = 0;
 800e38e:	f884 3130 	strb.w	r3, [r4, #304]	; 0x130
        USBD_WCID_STREAMING_SetTxBuffer(pdev, (uint8_t*)&(TxBuffer[i][ (USB_DataSizePerEp[i]/2)]),  (USB_DataSizePerEp[i]/2));
 800e392:	f8d5 12b8 	ldr.w	r1, [r5, #696]	; 0x2b8
 800e396:	f8b4 3176 	ldrh.w	r3, [r4, #374]	; 0x176
 800e39a:	f8d4 2190 	ldr.w	r2, [r4, #400]	; 0x190
    if(hwcid->TXStates[(epNumber&0x7F) - 1] == 0)
 800e39e:	f8d1 6128 	ldr.w	r6, [r1, #296]	; 0x128
        USBD_WCID_STREAMING_SetTxBuffer(pdev, (uint8_t*)&(TxBuffer[i][ (USB_DataSizePerEp[i]/2)]),  (USB_DataSizePerEp[i]/2));
 800e3a2:	eb02 0253 	add.w	r2, r2, r3, lsr #1
 800e3a6:	085b      	lsrs	r3, r3, #1
  hwcid->CurrentTxBuffer = pbuff;
 800e3a8:	f8c1 210c 	str.w	r2, [r1, #268]	; 0x10c
  hwcid->TxLength = length;    
 800e3ac:	f8c1 3114 	str.w	r3, [r1, #276]	; 0x114
    if(hwcid->TXStates[(epNumber&0x7F) - 1] == 0)
 800e3b0:	2e00      	cmp	r6, #0
 800e3b2:	f47f ad96 	bne.w	800dee2 <USBD_WCID_STREAMING_SOF+0x12e>
      hwcid->TXStates[(epNumber&0x7F) - 1] = 1;
 800e3b6:	2001      	movs	r0, #1
 800e3b8:	e73f      	b.n	800e23a <USBD_WCID_STREAMING_SOF+0x486>
        lastPacketSent[i] = 0;
 800e3ba:	2300      	movs	r3, #0
 800e3bc:	f884 3133 	strb.w	r3, [r4, #307]	; 0x133
        USBD_WCID_STREAMING_SetTxBuffer(pdev, (uint8_t*)&(TxBuffer[i][ (USB_DataSizePerEp[i]/2)]),  (USB_DataSizePerEp[i]/2));
 800e3c0:	f8d5 12b8 	ldr.w	r1, [r5, #696]	; 0x2b8
 800e3c4:	f8b4 317c 	ldrh.w	r3, [r4, #380]	; 0x17c
 800e3c8:	f8d4 219c 	ldr.w	r2, [r4, #412]	; 0x19c
    if(hwcid->TXStates[(epNumber&0x7F) - 1] == 0)
 800e3cc:	f8d1 6128 	ldr.w	r6, [r1, #296]	; 0x128
        USBD_WCID_STREAMING_SetTxBuffer(pdev, (uint8_t*)&(TxBuffer[i][ (USB_DataSizePerEp[i]/2)]),  (USB_DataSizePerEp[i]/2));
 800e3d0:	eb02 0253 	add.w	r2, r2, r3, lsr #1
 800e3d4:	085b      	lsrs	r3, r3, #1
  hwcid->CurrentTxBuffer = pbuff;
 800e3d6:	f8c1 210c 	str.w	r2, [r1, #268]	; 0x10c
  hwcid->TxLength = length;    
 800e3da:	f8c1 3114 	str.w	r3, [r1, #276]	; 0x114
    if(hwcid->TXStates[(epNumber&0x7F) - 1] == 0)
 800e3de:	2e00      	cmp	r6, #0
 800e3e0:	f47f ada0 	bne.w	800df24 <USBD_WCID_STREAMING_SOF+0x170>
      hwcid->TXStates[(epNumber&0x7F) - 1] = 1;
 800e3e4:	2001      	movs	r0, #1
 800e3e6:	e77a      	b.n	800e2de <USBD_WCID_STREAMING_SOF+0x52a>
        lastPacketSent[i] = 0;
 800e3e8:	2300      	movs	r3, #0
 800e3ea:	f884 3132 	strb.w	r3, [r4, #306]	; 0x132
        USBD_WCID_STREAMING_SetTxBuffer(pdev, (uint8_t*)&(TxBuffer[i][ (USB_DataSizePerEp[i]/2)]),  (USB_DataSizePerEp[i]/2));
 800e3ee:	f8d5 12b8 	ldr.w	r1, [r5, #696]	; 0x2b8
 800e3f2:	f8b4 317a 	ldrh.w	r3, [r4, #378]	; 0x17a
 800e3f6:	f8d4 2198 	ldr.w	r2, [r4, #408]	; 0x198
    if(hwcid->TXStates[(epNumber&0x7F) - 1] == 0)
 800e3fa:	f8d1 6128 	ldr.w	r6, [r1, #296]	; 0x128
        USBD_WCID_STREAMING_SetTxBuffer(pdev, (uint8_t*)&(TxBuffer[i][ (USB_DataSizePerEp[i]/2)]),  (USB_DataSizePerEp[i]/2));
 800e3fe:	eb02 0253 	add.w	r2, r2, r3, lsr #1
 800e402:	085b      	lsrs	r3, r3, #1
  hwcid->CurrentTxBuffer = pbuff;
 800e404:	f8c1 210c 	str.w	r2, [r1, #268]	; 0x10c
  hwcid->TxLength = length;    
 800e408:	f8c1 3114 	str.w	r3, [r1, #276]	; 0x114
    if(hwcid->TXStates[(epNumber&0x7F) - 1] == 0)
 800e40c:	2e00      	cmp	r6, #0
 800e40e:	f47f ad7e 	bne.w	800df0e <USBD_WCID_STREAMING_SOF+0x15a>
      hwcid->TXStates[(epNumber&0x7F) - 1] = 1;
 800e412:	2001      	movs	r0, #1
 800e414:	e77f      	b.n	800e316 <USBD_WCID_STREAMING_SOF+0x562>
 800e416:	bf00      	nop

0800e418 <USBD_WCID_STREAMING_SetRxDataBuffer>:
  hwcid->RxBuffer = ptr;
 800e418:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
}
 800e41c:	2000      	movs	r0, #0
  hwcid->RxBuffer = ptr;
 800e41e:	f8c3 1108 	str.w	r1, [r3, #264]	; 0x108
}
 800e422:	4770      	bx	lr

0800e424 <USBD_WCID_STREAMING_RegisterInterface>:
*/
uint8_t  USBD_WCID_STREAMING_RegisterInterface  (USBD_HandleTypeDef   *pdev, 
                                          USBD_WCID_STREAMING_ItfTypeDef *fops)
{
  uint8_t  ret = USBD_FAIL;  
  if(fops != NULL)
 800e424:	b119      	cbz	r1, 800e42e <USBD_WCID_STREAMING_RegisterInterface+0xa>
  {
    pdev->pUserData= fops;
 800e426:	f8c0 12bc 	str.w	r1, [r0, #700]	; 0x2bc
    ret = USBD_OK;    
 800e42a:	2000      	movs	r0, #0
 800e42c:	4770      	bx	lr
  uint8_t  ret = USBD_FAIL;  
 800e42e:	2002      	movs	r0, #2
  }  
  return ret;
}
 800e430:	4770      	bx	lr
 800e432:	bf00      	nop

0800e434 <USBD_WCID_STREAMING_FillTxDataBuffer>:
* @param  size: length of data in bytes
* @param  pdev: device instance
* @retval status
*/
uint8_t USBD_WCID_STREAMING_FillTxDataBuffer(USBD_HandleTypeDef *pdev, uint8_t ch_number, uint8_t* buf, uint32_t size)
{
 800e434:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    USBD_WCID_STREAMING_HandleTypeDef   *hwcid = (USBD_WCID_STREAMING_HandleTypeDef*) pdev->pClassData;
 800e438:	f8d0 42b8 	ldr.w	r4, [r0, #696]	; 0x2b8

   uint8_t ** TxBuffer = hwcid->TxBuffer;
   __IO uint8_t * TxBuffStatus = hwcid->TxBuffStatus;
   uint32_t * TxBuffIdx = hwcid->TxBuffIdx;
   uint16_t * USB_DataSizePerEp = hwcid->USB_DataSizePerEp;
   __IO uint8_t * TxBuffReset = hwcid->TxBuffReset;
 800e43c:	f204 1765 	addw	r7, r4, #357	; 0x165
   
  uint32_t i;   
  uint8_t * txBuffptr = (uint8_t*)TxBuffer[ch_number];  
 800e440:	eb04 0081 	add.w	r0, r4, r1, lsl #2
  
  if(TxBuffReset[ch_number] == 1)
 800e444:	5c7d      	ldrb	r5, [r7, r1]
  uint8_t * txBuffptr = (uint8_t*)TxBuffer[ch_number];  
 800e446:	f8d0 6180 	ldr.w	r6, [r0, #384]	; 0x180
  if(TxBuffReset[ch_number] == 1)
 800e44a:	2d01      	cmp	r5, #1
   __IO uint8_t * TxBuffStatus = hwcid->TxBuffStatus;
 800e44c:	f504 7eae 	add.w	lr, r4, #348	; 0x15c
   uint32_t * TxBuffIdx = hwcid->TxBuffIdx;
 800e450:	f504 709c 	add.w	r0, r4, #312	; 0x138
   uint16_t * USB_DataSizePerEp = hwcid->USB_DataSizePerEp;
 800e454:	f504 78b7 	add.w	r8, r4, #366	; 0x16e
  uint8_t * txBuffptr = (uint8_t*)TxBuffer[ch_number];  
 800e458:	ea4f 0c81 	mov.w	ip, r1, lsl #2
 800e45c:	b20c      	sxth	r4, r1
  if(TxBuffReset[ch_number] == 1)
 800e45e:	d04a      	beq.n	800e4f6 <USBD_WCID_STREAMING_FillTxDataBuffer+0xc2>
 800e460:	4484      	add	ip, r0
      
    }
    TxBuffReset[ch_number] = 0;
  }
  
  uint32_t txBuffIdx = TxBuffIdx[ch_number];  
 800e462:	f8dc 0000 	ldr.w	r0, [ip]
  
  for (i = 0; i < size; i++)
 800e466:	b30b      	cbz	r3, 800e4ac <USBD_WCID_STREAMING_FillTxDataBuffer+0x78>
 800e468:	2903      	cmp	r1, #3
  {
    txBuffptr[txBuffIdx] = buf[i];    
    txBuffIdx = (txBuffIdx + 1) %  (USB_DataSizePerEp[ch_number]);
 800e46a:	eb08 0444 	add.w	r4, r8, r4, lsl #1
 800e46e:	4413      	add	r3, r2
 800e470:	d821      	bhi.n	800e4b6 <USBD_WCID_STREAMING_FillTxDataBuffer+0x82>
    
    if(txBuffIdx == (USB_DataSizePerEp[ch_number]/2))
    {
      TxBuffStatus[ch_number] = 1;
 800e472:	4471      	add	r1, lr
 800e474:	1e5f      	subs	r7, r3, #1
 800e476:	3a01      	subs	r2, #1
 800e478:	f04f 0e01 	mov.w	lr, #1
        txBuffIdx = (txBuffIdx + 1); 
      }
    }
    else if (txBuffIdx == 0)
    {
      TxBuffStatus[ch_number] = 2;
 800e47c:	f04f 0802 	mov.w	r8, #2
 800e480:	e004      	b.n	800e48c <USBD_WCID_STREAMING_FillTxDataBuffer+0x58>
    else if (txBuffIdx == 0)
 800e482:	b908      	cbnz	r0, 800e488 <USBD_WCID_STREAMING_FillTxDataBuffer+0x54>
      TxBuffStatus[ch_number] = 2;
 800e484:	f881 8000 	strb.w	r8, [r1]
  for (i = 0; i < size; i++)
 800e488:	4297      	cmp	r7, r2
 800e48a:	d00f      	beq.n	800e4ac <USBD_WCID_STREAMING_FillTxDataBuffer+0x78>
    txBuffptr[txBuffIdx] = buf[i];    
 800e48c:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 800e490:	5433      	strb	r3, [r6, r0]
    txBuffIdx = (txBuffIdx + 1) %  (USB_DataSizePerEp[ch_number]);
 800e492:	8823      	ldrh	r3, [r4, #0]
 800e494:	3001      	adds	r0, #1
 800e496:	fbb0 f5f3 	udiv	r5, r0, r3
 800e49a:	fb03 0015 	mls	r0, r3, r5, r0
    if(txBuffIdx == (USB_DataSizePerEp[ch_number]/2))
 800e49e:	ebb0 0f53 	cmp.w	r0, r3, lsr #1
 800e4a2:	d1ee      	bne.n	800e482 <USBD_WCID_STREAMING_FillTxDataBuffer+0x4e>
  for (i = 0; i < size; i++)
 800e4a4:	4297      	cmp	r7, r2
      TxBuffStatus[ch_number] = 1;
 800e4a6:	f881 e000 	strb.w	lr, [r1]
  for (i = 0; i < size; i++)
 800e4aa:	d1ef      	bne.n	800e48c <USBD_WCID_STREAMING_FillTxDataBuffer+0x58>
        txBuffptr[txBuffIdx] = ch_number;    
        txBuffIdx = (txBuffIdx + 1); 
      }
    }
  }  
  TxBuffIdx[ch_number] = txBuffIdx;  
 800e4ac:	f8cc 0000 	str.w	r0, [ip]
  return USBD_OK;
}
 800e4b0:	2000      	movs	r0, #0
 800e4b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e4b6:	1e5d      	subs	r5, r3, #1
 800e4b8:	3a01      	subs	r2, #1
      TxBuffStatus[ch_number] = 2;
 800e4ba:	448e      	add	lr, r1
 800e4bc:	f04f 0902 	mov.w	r9, #2
      TxBuffStatus[ch_number] = 1;
 800e4c0:	f04f 0801 	mov.w	r8, #1
 800e4c4:	e006      	b.n	800e4d4 <USBD_WCID_STREAMING_FillTxDataBuffer+0xa0>
    else if (txBuffIdx == 0)
 800e4c6:	b918      	cbnz	r0, 800e4d0 <USBD_WCID_STREAMING_FillTxDataBuffer+0x9c>
      TxBuffStatus[ch_number] = 2;
 800e4c8:	f88e 9000 	strb.w	r9, [lr]
        txBuffIdx = (txBuffIdx + 1); 
 800e4cc:	2001      	movs	r0, #1
        txBuffptr[txBuffIdx] = ch_number;    
 800e4ce:	7031      	strb	r1, [r6, #0]
  for (i = 0; i < size; i++)
 800e4d0:	4295      	cmp	r5, r2
 800e4d2:	d0eb      	beq.n	800e4ac <USBD_WCID_STREAMING_FillTxDataBuffer+0x78>
    txBuffptr[txBuffIdx] = buf[i];    
 800e4d4:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 800e4d8:	5433      	strb	r3, [r6, r0]
    txBuffIdx = (txBuffIdx + 1) %  (USB_DataSizePerEp[ch_number]);
 800e4da:	8823      	ldrh	r3, [r4, #0]
 800e4dc:	3001      	adds	r0, #1
 800e4de:	fbb0 f7f3 	udiv	r7, r0, r3
 800e4e2:	fb03 0017 	mls	r0, r3, r7, r0
    if(txBuffIdx == (USB_DataSizePerEp[ch_number]/2))
 800e4e6:	ebb0 0f53 	cmp.w	r0, r3, lsr #1
 800e4ea:	d1ec      	bne.n	800e4c6 <USBD_WCID_STREAMING_FillTxDataBuffer+0x92>
      TxBuffStatus[ch_number] = 1;
 800e4ec:	f88e 8000 	strb.w	r8, [lr]
        txBuffptr[txBuffIdx] = ch_number;    
 800e4f0:	5431      	strb	r1, [r6, r0]
        txBuffIdx = (txBuffIdx + 1); 
 800e4f2:	3001      	adds	r0, #1
 800e4f4:	e7ec      	b.n	800e4d0 <USBD_WCID_STREAMING_FillTxDataBuffer+0x9c>
    if(ch_number >= (N_IN_ENDPOINTS-1))
 800e4f6:	2903      	cmp	r1, #3
 800e4f8:	d808      	bhi.n	800e50c <USBD_WCID_STREAMING_FillTxDataBuffer+0xd8>
      TxBuffIdx[ch_number] = 0;
 800e4fa:	2500      	movs	r5, #0
 800e4fc:	f840 5024 	str.w	r5, [r0, r4, lsl #2]
      TxBuffStatus[ch_number] = 0;
 800e500:	f80e 5001 	strb.w	r5, [lr, r1]
      TxBuffIdx[ch_number] = 0;
 800e504:	4484      	add	ip, r0
    TxBuffReset[ch_number] = 0;
 800e506:	2000      	movs	r0, #0
 800e508:	5478      	strb	r0, [r7, r1]
 800e50a:	e7aa      	b.n	800e462 <USBD_WCID_STREAMING_FillTxDataBuffer+0x2e>
 800e50c:	fa5f f985 	uxtb.w	r9, r5
      TxBuffStatus[ch_number] = 0;
 800e510:	2500      	movs	r5, #0
      txBuffptr[0] = ch_number;
 800e512:	7031      	strb	r1, [r6, #0]
      TxBuffIdx[ch_number] = 1;
 800e514:	4484      	add	ip, r0
 800e516:	f840 9024 	str.w	r9, [r0, r4, lsl #2]
      TxBuffStatus[ch_number] = 0;
 800e51a:	f80e 5001 	strb.w	r5, [lr, r1]
 800e51e:	e7f2      	b.n	800e506 <USBD_WCID_STREAMING_FillTxDataBuffer+0xd2>

0800e520 <USBD_WCID_STREAMING_CleanTxDataBuffer>:
* @retval status
*/
uint8_t USBD_WCID_STREAMING_CleanTxDataBuffer(USBD_HandleTypeDef *pdev, uint8_t ch_number)
{
  USBD_WCID_STREAMING_HandleTypeDef   *hwcid = (USBD_WCID_STREAMING_HandleTypeDef*) pdev->pClassData;
  __IO uint8_t * TxBuffReset = hwcid->TxBuffReset;
 800e520:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800e524:	f203 1365 	addw	r3, r3, #357	; 0x165
   
  TxBuffReset[ch_number] = 1;  
 800e528:	2201      	movs	r2, #1
 800e52a:	545a      	strb	r2, [r3, r1]
  return USBD_OK;
}
 800e52c:	2000      	movs	r0, #0
 800e52e:	4770      	bx	lr

0800e530 <USBD_WCID_STREAMING_SetTxDataBuffer>:
* @param  size: length of each packet in bytes
* @retval status
*/
uint8_t USBD_WCID_STREAMING_SetTxDataBuffer(USBD_HandleTypeDef *pdev, uint8_t ch_number, uint8_t * ptr, uint16_t size)
{
   USBD_WCID_STREAMING_HandleTypeDef   *hwcid = (USBD_WCID_STREAMING_HandleTypeDef*) pdev->pClassData;
 800e530:	f8d0 02b8 	ldr.w	r0, [r0, #696]	; 0x2b8

   uint8_t ** TxBuffer = hwcid->TxBuffer;
   uint32_t * TxBuffIdx = hwcid->TxBuffIdx;
   uint16_t * USB_DataSizePerEp = hwcid->USB_DataSizePerEp;
   
  if(ch_number >= (N_IN_ENDPOINTS-1))
 800e534:	2903      	cmp	r1, #3
{
 800e536:	b4f0      	push	{r4, r5, r6, r7}
   uint8_t ** TxBuffer = hwcid->TxBuffer;
 800e538:	f500 75c0 	add.w	r5, r0, #384	; 0x180
   uint16_t * USB_DataSizePerEp = hwcid->USB_DataSizePerEp;
 800e53c:	f500 74b7 	add.w	r4, r0, #366	; 0x16e
  if(ch_number >= (N_IN_ENDPOINTS-1))
 800e540:	d90f      	bls.n	800e562 <USBD_WCID_STREAMING_SetTxDataBuffer+0x32>
  {
    TxBuffer[ch_number] = ptr;
 800e542:	b20e      	sxth	r6, r1
    USB_DataSizePerEp[ch_number] = size * 2 + 2;  /* Double buffer contains 2 * user data packets + 1st byte of tag for each half*/ 
    ptr[0] = ch_number;
    TxBuffIdx[ch_number] = 1;
 800e544:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    USB_DataSizePerEp[ch_number] = size * 2 + 2;  /* Double buffer contains 2 * user data packets + 1st byte of tag for each half*/ 
 800e548:	3301      	adds	r3, #1
    TxBuffIdx[ch_number] = 1;
 800e54a:	2701      	movs	r7, #1
    USB_DataSizePerEp[ch_number] = size * 2 + 2;  /* Double buffer contains 2 * user data packets + 1st byte of tag for each half*/ 
 800e54c:	005b      	lsls	r3, r3, #1
    TxBuffer[ch_number] = ptr;
 800e54e:	f845 2026 	str.w	r2, [r5, r6, lsl #2]
    USB_DataSizePerEp[ch_number] = size * 2 + 2;  /* Double buffer contains 2 * user data packets + 1st byte of tag for each half*/ 
 800e552:	f824 3016 	strh.w	r3, [r4, r6, lsl #1]
    ptr[0] = ch_number;
 800e556:	7011      	strb	r1, [r2, #0]
    TxBuffIdx[ch_number] = 1;
 800e558:	f8c0 7138 	str.w	r7, [r0, #312]	; 0x138
  {
    TxBuffer[ch_number] = ptr;
    USB_DataSizePerEp[ch_number] = size * 2;  /* Double buffer contains 2 * user data packets*/
  }
  return USBD_OK;
}
 800e55c:	2000      	movs	r0, #0
 800e55e:	bcf0      	pop	{r4, r5, r6, r7}
 800e560:	4770      	bx	lr
    TxBuffer[ch_number] = ptr;
 800e562:	b209      	sxth	r1, r1
    USB_DataSizePerEp[ch_number] = size * 2;  /* Double buffer contains 2 * user data packets*/
 800e564:	005b      	lsls	r3, r3, #1
    TxBuffer[ch_number] = ptr;
 800e566:	f845 2021 	str.w	r2, [r5, r1, lsl #2]
}
 800e56a:	2000      	movs	r0, #0
    USB_DataSizePerEp[ch_number] = size * 2;  /* Double buffer contains 2 * user data packets*/
 800e56c:	f824 3011 	strh.w	r3, [r4, r1, lsl #1]
}
 800e570:	bcf0      	pop	{r4, r5, r6, r7}
 800e572:	4770      	bx	lr

0800e574 <USBD_WCID_STREAMING_StartStreaming>:
* @param  pdev: device instance
* @retval status
*/
uint8_t USBD_WCID_STREAMING_StartStreaming(USBD_HandleTypeDef *pdev)
{
  uint8_t * status = &(((USBD_WCID_STREAMING_HandleTypeDef *)(pdev->pClassData))->streamingStatus);
 800e574:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
  
  __IO uint8_t * lastPacketSent = ((USBD_WCID_STREAMING_HandleTypeDef *)(pdev->pClassData))->lastPacketSent;

  for (int i = 0; i < N_IN_ENDPOINTS-1; i++)
  {
    lastPacketSent[i] = 1;
 800e578:	2201      	movs	r2, #1
 800e57a:	f883 212c 	strb.w	r2, [r3, #300]	; 0x12c
    
    
  *status = STREAMING_STATUS_STARTED;
  return USBD_OK;
  
}
 800e57e:	2000      	movs	r0, #0
    lastPacketSent[i] = 1;
 800e580:	f883 212d 	strb.w	r2, [r3, #301]	; 0x12d
  *status = STREAMING_STATUS_STARTED;
 800e584:	f883 21a4 	strb.w	r2, [r3, #420]	; 0x1a4
    lastPacketSent[i] = 1;
 800e588:	f883 212e 	strb.w	r2, [r3, #302]	; 0x12e
 800e58c:	f883 212f 	strb.w	r2, [r3, #303]	; 0x12f
}
 800e590:	4770      	bx	lr
 800e592:	bf00      	nop

0800e594 <USBD_WCID_STREAMING_StopStreaming>:
* @param  pdev: device instance
* @retval status
*/
uint8_t USBD_WCID_STREAMING_StopStreaming(USBD_HandleTypeDef *pdev)
{
  uint8_t * status = &(((USBD_WCID_STREAMING_HandleTypeDef *)(pdev->pClassData))->streamingStatus);
 800e594:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
  *status = STREAMING_STATUS_STOPPING;
 800e598:	2202      	movs	r2, #2
  return USBD_OK;
}
 800e59a:	2000      	movs	r0, #0
  *status = STREAMING_STATUS_STOPPING;
 800e59c:	f883 21a4 	strb.w	r2, [r3, #420]	; 0x1a4
}
 800e5a0:	4770      	bx	lr
 800e5a2:	bf00      	nop

0800e5a4 <USBD_Init>:
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800e5a4:	b188      	cbz	r0, 800e5ca <USBD_Init+0x26>
{
 800e5a6:	b508      	push	{r3, lr}
#endif
    return USBD_FAIL;
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800e5a8:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800e5ac:	b113      	cbz	r3, 800e5b4 <USBD_Init+0x10>
  {
    pdev->pClass = NULL;
 800e5ae:	2300      	movs	r3, #0
 800e5b0:	f8c0 32b4 	str.w	r3, [r0, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800e5b4:	b109      	cbz	r1, 800e5ba <USBD_Init+0x16>
  {
    pdev->pDesc = pdesc;
 800e5b6:	f8c0 12b0 	str.w	r1, [r0, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800e5ba:	2301      	movs	r3, #1
  pdev->id = id;
 800e5bc:	7002      	strb	r2, [r0, #0]
  pdev->dev_state = USBD_STATE_DEFAULT;
 800e5be:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800e5c2:	f7f6 fa41 	bl	8004a48 <USBD_LL_Init>

  return USBD_OK;
 800e5c6:	2000      	movs	r0, #0
}
 800e5c8:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 800e5ca:	2002      	movs	r0, #2
}
 800e5cc:	4770      	bx	lr
 800e5ce:	bf00      	nop

0800e5d0 <USBD_RegisterClass>:
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
  USBD_StatusTypeDef status = USBD_OK;
  if (pclass != NULL)
 800e5d0:	b119      	cbz	r1, 800e5da <USBD_RegisterClass+0xa>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800e5d2:	f8c0 12b4 	str.w	r1, [r0, #692]	; 0x2b4
    status = USBD_OK;
 800e5d6:	2000      	movs	r0, #0
 800e5d8:	4770      	bx	lr
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800e5da:	2002      	movs	r0, #2
  }

  return status;
}
 800e5dc:	4770      	bx	lr
 800e5de:	bf00      	nop

0800e5e0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800e5e0:	b508      	push	{r3, lr}
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800e5e2:	f7f6 fa77 	bl	8004ad4 <USBD_LL_Start>

  return USBD_OK;
}
 800e5e6:	2000      	movs	r0, #0
 800e5e8:	bd08      	pop	{r3, pc}
 800e5ea:	bf00      	nop

0800e5ec <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800e5ec:	b508      	push	{r3, lr}
  USBD_StatusTypeDef ret = USBD_FAIL;

  if (pdev->pClass != NULL)
 800e5ee:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800e5f2:	b11b      	cbz	r3, 800e5fc <USBD_SetClassConfig+0x10>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800e5f4:	681b      	ldr	r3, [r3, #0]
 800e5f6:	4798      	blx	r3
 800e5f8:	b900      	cbnz	r0, 800e5fc <USBD_SetClassConfig+0x10>
      ret = USBD_OK;
    }
  }

  return ret;
}
 800e5fa:	bd08      	pop	{r3, pc}
  USBD_StatusTypeDef ret = USBD_FAIL;
 800e5fc:	2002      	movs	r0, #2
}
 800e5fe:	bd08      	pop	{r3, pc}

0800e600 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800e600:	b508      	push	{r3, lr}
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800e602:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800e606:	685b      	ldr	r3, [r3, #4]
 800e608:	4798      	blx	r3

  return USBD_OK;
}
 800e60a:	2000      	movs	r0, #0
 800e60c:	bd08      	pop	{r3, pc}
 800e60e:	bf00      	nop

0800e610 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800e610:	b538      	push	{r3, r4, r5, lr}
 800e612:	4604      	mov	r4, r0
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800e614:	f500 752a 	add.w	r5, r0, #680	; 0x2a8
 800e618:	4628      	mov	r0, r5
 800e61a:	f000 fb71 	bl	800ed00 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;

  pdev->ep0_data_len = pdev->request.wLength;

  switch (pdev->request.bmRequest & 0x1FU)
 800e61e:	f894 12a8 	ldrb.w	r1, [r4, #680]	; 0x2a8
  pdev->ep0_data_len = pdev->request.wLength;
 800e622:	f8b4 32ae 	ldrh.w	r3, [r4, #686]	; 0x2ae
 800e626:	f8c4 3298 	str.w	r3, [r4, #664]	; 0x298
  pdev->ep0_state = USBD_EP0_SETUP;
 800e62a:	2201      	movs	r2, #1
 800e62c:	f001 031f 	and.w	r3, r1, #31
  switch (pdev->request.bmRequest & 0x1FU)
 800e630:	4293      	cmp	r3, r2
  pdev->ep0_state = USBD_EP0_SETUP;
 800e632:	f8c4 2294 	str.w	r2, [r4, #660]	; 0x294
  switch (pdev->request.bmRequest & 0x1FU)
 800e636:	d009      	beq.n	800e64c <USBD_LL_SetupStage+0x3c>
 800e638:	2b02      	cmp	r3, #2
 800e63a:	d013      	beq.n	800e664 <USBD_LL_SetupStage+0x54>
 800e63c:	b163      	cbz	r3, 800e658 <USBD_LL_SetupStage+0x48>
    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
      break;

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800e63e:	f001 0180 	and.w	r1, r1, #128	; 0x80
 800e642:	4620      	mov	r0, r4
 800e644:	f7f6 fa60 	bl	8004b08 <USBD_LL_StallEP>
      break;
  }

  return USBD_OK;
}
 800e648:	2000      	movs	r0, #0
 800e64a:	bd38      	pop	{r3, r4, r5, pc}
      USBD_StdItfReq(pdev, &pdev->request);
 800e64c:	4629      	mov	r1, r5
 800e64e:	4620      	mov	r0, r4
 800e650:	f000 fa8c 	bl	800eb6c <USBD_StdItfReq>
}
 800e654:	2000      	movs	r0, #0
 800e656:	bd38      	pop	{r3, r4, r5, pc}
      USBD_StdDevReq(pdev, &pdev->request);
 800e658:	4629      	mov	r1, r5
 800e65a:	4620      	mov	r0, r4
 800e65c:	f000 f908 	bl	800e870 <USBD_StdDevReq>
}
 800e660:	2000      	movs	r0, #0
 800e662:	bd38      	pop	{r3, r4, r5, pc}
      USBD_StdEPReq(pdev, &pdev->request);
 800e664:	4629      	mov	r1, r5
 800e666:	4620      	mov	r0, r4
 800e668:	f000 fab4 	bl	800ebd4 <USBD_StdEPReq>
}
 800e66c:	2000      	movs	r0, #0
 800e66e:	bd38      	pop	{r3, r4, r5, pc}

0800e670 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800e670:	b538      	push	{r3, r4, r5, lr}
 800e672:	4605      	mov	r5, r0
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800e674:	b969      	cbnz	r1, 800e692 <USBD_LL_DataOutStage+0x22>
 800e676:	4613      	mov	r3, r2
  {
    pep = &pdev->ep_out[0];

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800e678:	f8d0 2294 	ldr.w	r2, [r0, #660]	; 0x294
 800e67c:	2a03      	cmp	r2, #3
 800e67e:	d015      	beq.n	800e6ac <USBD_LL_DataOutStage+0x3c>
        USBD_CtlSendStatus(pdev);
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800e680:	2a05      	cmp	r2, #5
 800e682:	460c      	mov	r4, r1
 800e684:	d10e      	bne.n	800e6a4 <USBD_LL_DataOutStage+0x34>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800e686:	f8c5 1294 	str.w	r1, [r5, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 800e68a:	f7f6 fa3d 	bl	8004b08 <USBD_LL_StallEP>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 800e68e:	4620      	mov	r0, r4
}
 800e690:	bd38      	pop	{r3, r4, r5, pc}
  else if ((pdev->pClass->DataOut != NULL) &&
 800e692:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800e696:	699b      	ldr	r3, [r3, #24]
 800e698:	b133      	cbz	r3, 800e6a8 <USBD_LL_DataOutStage+0x38>
 800e69a:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 800e69e:	2a03      	cmp	r2, #3
 800e6a0:	d102      	bne.n	800e6a8 <USBD_LL_DataOutStage+0x38>
    pdev->pClass->DataOut(pdev, epnum);
 800e6a2:	4798      	blx	r3
  return USBD_OK;
 800e6a4:	2000      	movs	r0, #0
}
 800e6a6:	bd38      	pop	{r3, r4, r5, pc}
    return USBD_FAIL;
 800e6a8:	2002      	movs	r0, #2
}
 800e6aa:	bd38      	pop	{r3, r4, r5, pc}
      if (pep->rem_length > pep->maxpacket)
 800e6ac:	e9d0 1258 	ldrd	r1, r2, [r0, #352]	; 0x160
 800e6b0:	4291      	cmp	r1, r2
 800e6b2:	d90c      	bls.n	800e6ce <USBD_LL_DataOutStage+0x5e>
        pep->rem_length -= pep->maxpacket;
 800e6b4:	1a89      	subs	r1, r1, r2
        USBD_CtlContinueRx(pdev, pdata,
 800e6b6:	428a      	cmp	r2, r1
 800e6b8:	bf88      	it	hi
 800e6ba:	b28a      	uxthhi	r2, r1
        pep->rem_length -= pep->maxpacket;
 800e6bc:	f8c0 1160 	str.w	r1, [r0, #352]	; 0x160
        USBD_CtlContinueRx(pdev, pdata,
 800e6c0:	bf98      	it	ls
 800e6c2:	b292      	uxthls	r2, r2
 800e6c4:	4619      	mov	r1, r3
 800e6c6:	f000 fb79 	bl	800edbc <USBD_CtlContinueRx>
  return USBD_OK;
 800e6ca:	2000      	movs	r0, #0
}
 800e6cc:	bd38      	pop	{r3, r4, r5, pc}
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800e6ce:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800e6d2:	691b      	ldr	r3, [r3, #16]
 800e6d4:	b11b      	cbz	r3, 800e6de <USBD_LL_DataOutStage+0x6e>
 800e6d6:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 800e6da:	2a03      	cmp	r2, #3
 800e6dc:	d004      	beq.n	800e6e8 <USBD_LL_DataOutStage+0x78>
        USBD_CtlSendStatus(pdev);
 800e6de:	4628      	mov	r0, r5
 800e6e0:	f000 fb74 	bl	800edcc <USBD_CtlSendStatus>
  return USBD_OK;
 800e6e4:	2000      	movs	r0, #0
}
 800e6e6:	bd38      	pop	{r3, r4, r5, pc}
          pdev->pClass->EP0_RxReady(pdev);
 800e6e8:	4798      	blx	r3
 800e6ea:	e7f8      	b.n	800e6de <USBD_LL_DataOutStage+0x6e>

0800e6ec <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800e6ec:	b570      	push	{r4, r5, r6, lr}
 800e6ee:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800e6f0:	b989      	cbnz	r1, 800e716 <USBD_LL_DataInStage+0x2a>
 800e6f2:	4613      	mov	r3, r2
  {
    pep = &pdev->ep_in[0];

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800e6f4:	f8d0 2294 	ldr.w	r2, [r0, #660]	; 0x294
 800e6f8:	2a02      	cmp	r2, #2
 800e6fa:	d01c      	beq.n	800e736 <USBD_LL_DataInStage+0x4a>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800e6fc:	f032 0304 	bics.w	r3, r2, #4
 800e700:	d102      	bne.n	800e708 <USBD_LL_DataInStage+0x1c>
          (pdev->ep0_state == USBD_EP0_IDLE))
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800e702:	2180      	movs	r1, #128	; 0x80
 800e704:	f7f6 fa00 	bl	8004b08 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800e708:	f894 32a0 	ldrb.w	r3, [r4, #672]	; 0x2a0
 800e70c:	2b01      	cmp	r3, #1
    {
      USBD_RunTestMode(pdev);
      pdev->dev_test_mode = 0U;
 800e70e:	f04f 0000 	mov.w	r0, #0
    if (pdev->dev_test_mode == 1U)
 800e712:	d00d      	beq.n	800e730 <USBD_LL_DataInStage+0x44>
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
}
 800e714:	bd70      	pop	{r4, r5, r6, pc}
  else if ((pdev->pClass->DataIn != NULL) &&
 800e716:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800e71a:	695b      	ldr	r3, [r3, #20]
 800e71c:	b133      	cbz	r3, 800e72c <USBD_LL_DataInStage+0x40>
 800e71e:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 800e722:	2a03      	cmp	r2, #3
 800e724:	d102      	bne.n	800e72c <USBD_LL_DataInStage+0x40>
    pdev->pClass->DataIn(pdev, epnum);
 800e726:	4798      	blx	r3
  return USBD_OK;
 800e728:	2000      	movs	r0, #0
}
 800e72a:	bd70      	pop	{r4, r5, r6, pc}
    return USBD_FAIL;
 800e72c:	2002      	movs	r0, #2
}
 800e72e:	bd70      	pop	{r4, r5, r6, pc}
      pdev->dev_test_mode = 0U;
 800e730:	f884 02a0 	strb.w	r0, [r4, #672]	; 0x2a0
}
 800e734:	bd70      	pop	{r4, r5, r6, pc}
      if (pep->rem_length > pep->maxpacket)
 800e736:	e9d0 2608 	ldrd	r2, r6, [r0, #32]
 800e73a:	42b2      	cmp	r2, r6
 800e73c:	d827      	bhi.n	800e78e <USBD_LL_DataInStage+0xa2>
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800e73e:	69c3      	ldr	r3, [r0, #28]
 800e740:	fbb3 f5f6 	udiv	r5, r3, r6
 800e744:	fb06 3515 	mls	r5, r6, r5, r3
 800e748:	b95d      	cbnz	r5, 800e762 <USBD_LL_DataInStage+0x76>
 800e74a:	429e      	cmp	r6, r3
 800e74c:	d809      	bhi.n	800e762 <USBD_LL_DataInStage+0x76>
            (pep->total_length >= pep->maxpacket) &&
 800e74e:	f8d0 2298 	ldr.w	r2, [r0, #664]	; 0x298
 800e752:	4293      	cmp	r3, r2
 800e754:	d205      	bcs.n	800e762 <USBD_LL_DataInStage+0x76>
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800e756:	462a      	mov	r2, r5
 800e758:	f000 fb1a 	bl	800ed90 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800e75c:	f8c4 5298 	str.w	r5, [r4, #664]	; 0x298
 800e760:	e01c      	b.n	800e79c <USBD_LL_DataInStage+0xb0>
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800e762:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 800e766:	68db      	ldr	r3, [r3, #12]
 800e768:	b11b      	cbz	r3, 800e772 <USBD_LL_DataInStage+0x86>
 800e76a:	f894 229c 	ldrb.w	r2, [r4, #668]	; 0x29c
 800e76e:	2a03      	cmp	r2, #3
 800e770:	d01b      	beq.n	800e7aa <USBD_LL_DataInStage+0xbe>
          USBD_LL_StallEP(pdev, 0x80U);
 800e772:	2180      	movs	r1, #128	; 0x80
 800e774:	4620      	mov	r0, r4
 800e776:	f7f6 f9c7 	bl	8004b08 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800e77a:	4620      	mov	r0, r4
 800e77c:	f000 fb32 	bl	800ede4 <USBD_CtlReceiveStatus>
    if (pdev->dev_test_mode == 1U)
 800e780:	f894 32a0 	ldrb.w	r3, [r4, #672]	; 0x2a0
 800e784:	2b01      	cmp	r3, #1
      pdev->dev_test_mode = 0U;
 800e786:	f04f 0000 	mov.w	r0, #0
    if (pdev->dev_test_mode == 1U)
 800e78a:	d1c3      	bne.n	800e714 <USBD_LL_DataInStage+0x28>
 800e78c:	e7d0      	b.n	800e730 <USBD_LL_DataInStage+0x44>
        pep->rem_length -= pep->maxpacket;
 800e78e:	1b92      	subs	r2, r2, r6
 800e790:	460d      	mov	r5, r1
 800e792:	6202      	str	r2, [r0, #32]
        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800e794:	4619      	mov	r1, r3
 800e796:	b292      	uxth	r2, r2
 800e798:	f000 fafa 	bl	800ed90 <USBD_CtlContinueSendData>
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e79c:	462b      	mov	r3, r5
 800e79e:	462a      	mov	r2, r5
 800e7a0:	4629      	mov	r1, r5
 800e7a2:	4620      	mov	r0, r4
 800e7a4:	f7f6 f9e4 	bl	8004b70 <USBD_LL_PrepareReceive>
 800e7a8:	e7ae      	b.n	800e708 <USBD_LL_DataInStage+0x1c>
            pdev->pClass->EP0_TxSent(pdev);
 800e7aa:	4620      	mov	r0, r4
 800e7ac:	4798      	blx	r3
 800e7ae:	e7e0      	b.n	800e772 <USBD_LL_DataInStage+0x86>

0800e7b0 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800e7b0:	b570      	push	{r4, r5, r6, lr}
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800e7b2:	2200      	movs	r2, #0
{
 800e7b4:	4604      	mov	r4, r0
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800e7b6:	2340      	movs	r3, #64	; 0x40
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800e7b8:	461e      	mov	r6, r3
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800e7ba:	4611      	mov	r1, r2
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800e7bc:	2501      	movs	r5, #1
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800e7be:	f7f6 f991 	bl	8004ae4 <USBD_LL_OpenEP>

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800e7c2:	4633      	mov	r3, r6
 800e7c4:	2180      	movs	r1, #128	; 0x80
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800e7c6:	f8c4 5158 	str.w	r5, [r4, #344]	; 0x158
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800e7ca:	f8c4 6164 	str.w	r6, [r4, #356]	; 0x164
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800e7ce:	4620      	mov	r0, r4
 800e7d0:	2200      	movs	r2, #0
 800e7d2:	f7f6 f987 	bl	8004ae4 <USBD_LL_OpenEP>
  pdev->dev_state = USBD_STATE_DEFAULT;
  pdev->ep0_state = USBD_EP0_IDLE;
  pdev->dev_config = 0U;
  pdev->dev_remote_wakeup = 0U;

  if (pdev->pClassData)
 800e7d6:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800e7da:	61a5      	str	r5, [r4, #24]
  pdev->ep0_state = USBD_EP0_IDLE;
 800e7dc:	2100      	movs	r1, #0
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800e7de:	6266      	str	r6, [r4, #36]	; 0x24
  pdev->dev_state = USBD_STATE_DEFAULT;
 800e7e0:	f884 529c 	strb.w	r5, [r4, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800e7e4:	f8c4 1294 	str.w	r1, [r4, #660]	; 0x294
  pdev->dev_config = 0U;
 800e7e8:	6061      	str	r1, [r4, #4]
  pdev->dev_remote_wakeup = 0U;
 800e7ea:	f8c4 12a4 	str.w	r1, [r4, #676]	; 0x2a4
  if (pdev->pClassData)
 800e7ee:	b123      	cbz	r3, 800e7fa <USBD_LL_Reset+0x4a>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800e7f0:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 800e7f4:	4620      	mov	r0, r4
 800e7f6:	685b      	ldr	r3, [r3, #4]
 800e7f8:	4798      	blx	r3
  }

  return USBD_OK;
}
 800e7fa:	2000      	movs	r0, #0
 800e7fc:	bd70      	pop	{r4, r5, r6, pc}
 800e7fe:	bf00      	nop

0800e800 <USBD_LL_SetSpeed>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 800e800:	7401      	strb	r1, [r0, #16]

  return USBD_OK;
}
 800e802:	2000      	movs	r0, #0
 800e804:	4770      	bx	lr
 800e806:	bf00      	nop

0800e808 <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
  pdev->dev_old_state =  pdev->dev_state;
 800e808:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 800e80c:	f880 229d 	strb.w	r2, [r0, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800e810:	2304      	movs	r3, #4
 800e812:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c

  return USBD_OK;
}
 800e816:	2000      	movs	r0, #0
 800e818:	4770      	bx	lr
 800e81a:	bf00      	nop

0800e81c <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800e81c:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800e820:	2b04      	cmp	r3, #4
  {
    pdev->dev_state = pdev->dev_old_state;
 800e822:	bf04      	itt	eq
 800e824:	f890 329d 	ldrbeq.w	r3, [r0, #669]	; 0x29d
 800e828:	f880 329c 	strbeq.w	r3, [r0, #668]	; 0x29c
  }

  return USBD_OK;
}
 800e82c:	2000      	movs	r0, #0
 800e82e:	4770      	bx	lr

0800e830 <USBD_LL_SOF>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e830:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 800e834:	2a03      	cmp	r2, #3
 800e836:	d001      	beq.n	800e83c <USBD_LL_SOF+0xc>
      pdev->pClass->SOF(pdev);
    }
  }

  return USBD_OK;
}
 800e838:	2000      	movs	r0, #0
 800e83a:	4770      	bx	lr
{
 800e83c:	b508      	push	{r3, lr}
    if (pdev->pClass->SOF != NULL)
 800e83e:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800e842:	69db      	ldr	r3, [r3, #28]
 800e844:	b103      	cbz	r3, 800e848 <USBD_LL_SOF+0x18>
      pdev->pClass->SOF(pdev);
 800e846:	4798      	blx	r3
}
 800e848:	2000      	movs	r0, #0
 800e84a:	bd08      	pop	{r3, pc}

0800e84c <USBD_LL_IsoINIncomplete>:
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
}
 800e84c:	2000      	movs	r0, #0
 800e84e:	4770      	bx	lr

0800e850 <USBD_LL_IsoOUTIncomplete>:
 800e850:	2000      	movs	r0, #0
 800e852:	4770      	bx	lr

0800e854 <USBD_LL_DevConnected>:
 800e854:	2000      	movs	r0, #0
 800e856:	4770      	bx	lr

0800e858 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800e858:	b508      	push	{r3, lr}
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800e85a:	f8d0 22b4 	ldr.w	r2, [r0, #692]	; 0x2b4
  pdev->dev_state = USBD_STATE_DEFAULT;
 800e85e:	2101      	movs	r1, #1
 800e860:	f880 129c 	strb.w	r1, [r0, #668]	; 0x29c
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800e864:	6852      	ldr	r2, [r2, #4]
 800e866:	7901      	ldrb	r1, [r0, #4]
 800e868:	4790      	blx	r2

  return USBD_OK;
}
 800e86a:	2000      	movs	r0, #0
 800e86c:	bd08      	pop	{r3, pc}
 800e86e:	bf00      	nop

0800e870 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800e870:	b530      	push	{r4, r5, lr}
 800e872:	780b      	ldrb	r3, [r1, #0]
 800e874:	f003 0360 	and.w	r3, r3, #96	; 0x60
  USBD_StatusTypeDef ret = USBD_OK;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e878:	2b20      	cmp	r3, #32
{
 800e87a:	b083      	sub	sp, #12
 800e87c:	460d      	mov	r5, r1
 800e87e:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e880:	d00d      	beq.n	800e89e <USBD_StdDevReq+0x2e>
 800e882:	2b40      	cmp	r3, #64	; 0x40
 800e884:	d00b      	beq.n	800e89e <USBD_StdDevReq+0x2e>
 800e886:	b19b      	cbz	r3, 800e8b0 <USBD_StdDevReq+0x40>
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
  USBD_LL_StallEP(pdev, 0x80U);
 800e888:	2180      	movs	r1, #128	; 0x80
 800e88a:	4620      	mov	r0, r4
 800e88c:	f7f6 f93c 	bl	8004b08 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800e890:	4620      	mov	r0, r4
 800e892:	2100      	movs	r1, #0
 800e894:	f7f6 f938 	bl	8004b08 <USBD_LL_StallEP>
}
 800e898:	2000      	movs	r0, #0
 800e89a:	b003      	add	sp, #12
 800e89c:	bd30      	pop	{r4, r5, pc}
      pdev->pClass->Setup(pdev, req);
 800e89e:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 800e8a2:	4629      	mov	r1, r5
 800e8a4:	689b      	ldr	r3, [r3, #8]
 800e8a6:	4620      	mov	r0, r4
 800e8a8:	4798      	blx	r3
}
 800e8aa:	2000      	movs	r0, #0
 800e8ac:	b003      	add	sp, #12
 800e8ae:	bd30      	pop	{r4, r5, pc}
      switch (req->bRequest)
 800e8b0:	784b      	ldrb	r3, [r1, #1]
 800e8b2:	2b09      	cmp	r3, #9
 800e8b4:	d8e8      	bhi.n	800e888 <USBD_StdDevReq+0x18>
 800e8b6:	a201      	add	r2, pc, #4	; (adr r2, 800e8bc <USBD_StdDevReq+0x4c>)
 800e8b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e8bc:	0800e917 	.word	0x0800e917
 800e8c0:	0800e943 	.word	0x0800e943
 800e8c4:	0800e889 	.word	0x0800e889
 800e8c8:	0800e961 	.word	0x0800e961
 800e8cc:	0800e889 	.word	0x0800e889
 800e8d0:	0800e969 	.word	0x0800e969
 800e8d4:	0800e9a1 	.word	0x0800e9a1
 800e8d8:	0800e889 	.word	0x0800e889
 800e8dc:	0800e9d5 	.word	0x0800e9d5
 800e8e0:	0800e8e5 	.word	0x0800e8e5
  cfgidx = (uint8_t)(req->wValue);
 800e8e4:	7889      	ldrb	r1, [r1, #2]
 800e8e6:	4da0      	ldr	r5, [pc, #640]	; (800eb68 <USBD_StdDevReq+0x2f8>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800e8e8:	2901      	cmp	r1, #1
  cfgidx = (uint8_t)(req->wValue);
 800e8ea:	7029      	strb	r1, [r5, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800e8ec:	d8cc      	bhi.n	800e888 <USBD_StdDevReq+0x18>
    switch (pdev->dev_state)
 800e8ee:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800e8f2:	2b02      	cmp	r3, #2
 800e8f4:	f000 8108 	beq.w	800eb08 <USBD_StdDevReq+0x298>
 800e8f8:	2b03      	cmp	r3, #3
 800e8fa:	f000 80f4 	beq.w	800eae6 <USBD_StdDevReq+0x276>
  USBD_LL_StallEP(pdev, 0x80U);
 800e8fe:	2180      	movs	r1, #128	; 0x80
 800e900:	f7f6 f902 	bl	8004b08 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800e904:	2100      	movs	r1, #0
 800e906:	4620      	mov	r0, r4
 800e908:	f7f6 f8fe 	bl	8004b08 <USBD_LL_StallEP>
        USBD_ClrClassConfig(pdev, cfgidx);
 800e90c:	7829      	ldrb	r1, [r5, #0]
 800e90e:	4620      	mov	r0, r4
 800e910:	f7ff fe76 	bl	800e600 <USBD_ClrClassConfig>
        break;
 800e914:	e7c0      	b.n	800e898 <USBD_StdDevReq+0x28>
  switch (pdev->dev_state)
 800e916:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800e91a:	3b01      	subs	r3, #1
 800e91c:	2b02      	cmp	r3, #2
 800e91e:	d8b3      	bhi.n	800e888 <USBD_StdDevReq+0x18>
      if (req->wLength != 0x2U)
 800e920:	88cb      	ldrh	r3, [r1, #6]
 800e922:	2b02      	cmp	r3, #2
 800e924:	d1b0      	bne.n	800e888 <USBD_StdDevReq+0x18>
      if (pdev->dev_remote_wakeup)
 800e926:	f8d0 32a4 	ldr.w	r3, [r0, #676]	; 0x2a4
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800e92a:	2201      	movs	r2, #1
 800e92c:	60c2      	str	r2, [r0, #12]
      if (pdev->dev_remote_wakeup)
 800e92e:	b10b      	cbz	r3, 800e934 <USBD_StdDevReq+0xc4>
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800e930:	2303      	movs	r3, #3
 800e932:	60c3      	str	r3, [r0, #12]
      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800e934:	2202      	movs	r2, #2
 800e936:	f104 010c 	add.w	r1, r4, #12
 800e93a:	4620      	mov	r0, r4
 800e93c:	f000 fa1a 	bl	800ed74 <USBD_CtlSendData>
      break;
 800e940:	e7aa      	b.n	800e898 <USBD_StdDevReq+0x28>
  switch (pdev->dev_state)
 800e942:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800e946:	3b01      	subs	r3, #1
 800e948:	2b02      	cmp	r3, #2
 800e94a:	d89d      	bhi.n	800e888 <USBD_StdDevReq+0x18>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800e94c:	884b      	ldrh	r3, [r1, #2]
 800e94e:	2b01      	cmp	r3, #1
 800e950:	d1a2      	bne.n	800e898 <USBD_StdDevReq+0x28>
        pdev->dev_remote_wakeup = 0U;
 800e952:	2300      	movs	r3, #0
 800e954:	f8c4 32a4 	str.w	r3, [r4, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800e958:	4620      	mov	r0, r4
 800e95a:	f000 fa37 	bl	800edcc <USBD_CtlSendStatus>
 800e95e:	e79b      	b.n	800e898 <USBD_StdDevReq+0x28>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800e960:	884b      	ldrh	r3, [r1, #2]
 800e962:	2b01      	cmp	r3, #1
 800e964:	d198      	bne.n	800e898 <USBD_StdDevReq+0x28>
 800e966:	e7f5      	b.n	800e954 <USBD_StdDevReq+0xe4>
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800e968:	888b      	ldrh	r3, [r1, #4]
 800e96a:	2b00      	cmp	r3, #0
 800e96c:	d18c      	bne.n	800e888 <USBD_StdDevReq+0x18>
 800e96e:	88cb      	ldrh	r3, [r1, #6]
 800e970:	2b00      	cmp	r3, #0
 800e972:	d189      	bne.n	800e888 <USBD_StdDevReq+0x18>
 800e974:	884d      	ldrh	r5, [r1, #2]
 800e976:	2d7f      	cmp	r5, #127	; 0x7f
 800e978:	d886      	bhi.n	800e888 <USBD_StdDevReq+0x18>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e97a:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800e97e:	2b03      	cmp	r3, #3
 800e980:	d082      	beq.n	800e888 <USBD_StdDevReq+0x18>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800e982:	b2e9      	uxtb	r1, r5
      pdev->dev_address = dev_addr;
 800e984:	f880 129e 	strb.w	r1, [r0, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800e988:	f7f6 f8e2 	bl	8004b50 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800e98c:	4620      	mov	r0, r4
 800e98e:	f000 fa1d 	bl	800edcc <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 800e992:	2d00      	cmp	r5, #0
 800e994:	f000 80d9 	beq.w	800eb4a <USBD_StdDevReq+0x2da>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800e998:	2302      	movs	r3, #2
 800e99a:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 800e99e:	e77b      	b.n	800e898 <USBD_StdDevReq+0x28>
          USBD_GetDescriptor(pdev, req);
 800e9a0:	884a      	ldrh	r2, [r1, #2]
  uint16_t len = 0U;
 800e9a2:	0a13      	lsrs	r3, r2, #8
 800e9a4:	2100      	movs	r1, #0
 800e9a6:	3b01      	subs	r3, #1
 800e9a8:	f8ad 1006 	strh.w	r1, [sp, #6]
  switch (req->wValue >> 8)
 800e9ac:	2b06      	cmp	r3, #6
 800e9ae:	f63f af6b 	bhi.w	800e888 <USBD_StdDevReq+0x18>
 800e9b2:	a101      	add	r1, pc, #4	; (adr r1, 800e9b8 <USBD_StdDevReq+0x148>)
 800e9b4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e9b8:	0800ea77 	.word	0x0800ea77
 800e9bc:	0800ea5f 	.word	0x0800ea5f
 800e9c0:	0800ea4f 	.word	0x0800ea4f
 800e9c4:	0800e889 	.word	0x0800e889
 800e9c8:	0800e889 	.word	0x0800e889
 800e9cc:	0800ea39 	.word	0x0800ea39
 800e9d0:	0800e9f9 	.word	0x0800e9f9
  if (req->wLength != 1U)
 800e9d4:	88ca      	ldrh	r2, [r1, #6]
 800e9d6:	2a01      	cmp	r2, #1
 800e9d8:	f47f af56 	bne.w	800e888 <USBD_StdDevReq+0x18>
    switch (pdev->dev_state)
 800e9dc:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800e9e0:	2b02      	cmp	r3, #2
 800e9e2:	d879      	bhi.n	800ead8 <USBD_StdDevReq+0x268>
 800e9e4:	2b00      	cmp	r3, #0
 800e9e6:	f43f af4f 	beq.w	800e888 <USBD_StdDevReq+0x18>
        pdev->dev_default_config = 0U;
 800e9ea:	4601      	mov	r1, r0
 800e9ec:	2300      	movs	r3, #0
 800e9ee:	f841 3f08 	str.w	r3, [r1, #8]!
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800e9f2:	f000 f9bf 	bl	800ed74 <USBD_CtlSendData>
        break;
 800e9f6:	e74f      	b.n	800e898 <USBD_StdDevReq+0x28>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e9f8:	7c03      	ldrb	r3, [r0, #16]
 800e9fa:	2b00      	cmp	r3, #0
 800e9fc:	f47f af44 	bne.w	800e888 <USBD_StdDevReq+0x18>
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800ea00:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800ea04:	f10d 0006 	add.w	r0, sp, #6
 800ea08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ea0a:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800ea0c:	2307      	movs	r3, #7
 800ea0e:	7043      	strb	r3, [r0, #1]
    if ((len != 0U) && (req->wLength != 0U))
 800ea10:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800ea14:	b15a      	cbz	r2, 800ea2e <USBD_StdDevReq+0x1be>
 800ea16:	88eb      	ldrh	r3, [r5, #6]
 800ea18:	2b00      	cmp	r3, #0
 800ea1a:	d09d      	beq.n	800e958 <USBD_StdDevReq+0xe8>
      len = MIN(len, req->wLength);
 800ea1c:	429a      	cmp	r2, r3
 800ea1e:	bf28      	it	cs
 800ea20:	461a      	movcs	r2, r3
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800ea22:	4601      	mov	r1, r0
 800ea24:	4620      	mov	r0, r4
      len = MIN(len, req->wLength);
 800ea26:	f8ad 2006 	strh.w	r2, [sp, #6]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800ea2a:	f000 f9a3 	bl	800ed74 <USBD_CtlSendData>
    if (req->wLength == 0U)
 800ea2e:	88eb      	ldrh	r3, [r5, #6]
 800ea30:	2b00      	cmp	r3, #0
 800ea32:	f47f af31 	bne.w	800e898 <USBD_StdDevReq+0x28>
 800ea36:	e78f      	b.n	800e958 <USBD_StdDevReq+0xe8>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ea38:	7c03      	ldrb	r3, [r0, #16]
 800ea3a:	2b00      	cmp	r3, #0
 800ea3c:	f47f af24 	bne.w	800e888 <USBD_StdDevReq+0x18>
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800ea40:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800ea44:	f10d 0006 	add.w	r0, sp, #6
 800ea48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ea4a:	4798      	blx	r3
  if (err != 0U)
 800ea4c:	e7e0      	b.n	800ea10 <USBD_StdDevReq+0x1a0>
      switch ((uint8_t)(req->wValue))
 800ea4e:	b2d1      	uxtb	r1, r2
 800ea50:	2905      	cmp	r1, #5
 800ea52:	d87e      	bhi.n	800eb52 <USBD_StdDevReq+0x2e2>
 800ea54:	e8df f001 	tbb	[pc, r1]
 800ea58:	222e343a 	.word	0x222e343a
 800ea5c:	2817      	.short	0x2817
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ea5e:	7c03      	ldrb	r3, [r0, #16]
 800ea60:	2b00      	cmp	r3, #0
 800ea62:	d15f      	bne.n	800eb24 <USBD_StdDevReq+0x2b4>
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800ea64:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800ea68:	f10d 0006 	add.w	r0, sp, #6
 800ea6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ea6e:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ea70:	2302      	movs	r3, #2
 800ea72:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 800ea74:	e7cc      	b.n	800ea10 <USBD_StdDevReq+0x1a0>
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800ea76:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 800ea7a:	7c00      	ldrb	r0, [r0, #16]
 800ea7c:	681b      	ldr	r3, [r3, #0]
 800ea7e:	f10d 0106 	add.w	r1, sp, #6
 800ea82:	4798      	blx	r3
  if (err != 0U)
 800ea84:	e7c4      	b.n	800ea10 <USBD_StdDevReq+0x1a0>
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800ea86:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 800ea8a:	695b      	ldr	r3, [r3, #20]
 800ea8c:	2b00      	cmp	r3, #0
 800ea8e:	f43f aefb 	beq.w	800e888 <USBD_StdDevReq+0x18>
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800ea92:	7c20      	ldrb	r0, [r4, #16]
 800ea94:	f10d 0106 	add.w	r1, sp, #6
 800ea98:	4798      	blx	r3
  if (err != 0U)
 800ea9a:	e7b9      	b.n	800ea10 <USBD_StdDevReq+0x1a0>
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800ea9c:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 800eaa0:	691b      	ldr	r3, [r3, #16]
 800eaa2:	2b00      	cmp	r3, #0
 800eaa4:	d1f5      	bne.n	800ea92 <USBD_StdDevReq+0x222>
 800eaa6:	e6ef      	b.n	800e888 <USBD_StdDevReq+0x18>
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800eaa8:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 800eaac:	699b      	ldr	r3, [r3, #24]
 800eaae:	2b00      	cmp	r3, #0
 800eab0:	d1ef      	bne.n	800ea92 <USBD_StdDevReq+0x222>
 800eab2:	e6e9      	b.n	800e888 <USBD_StdDevReq+0x18>
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800eab4:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 800eab8:	68db      	ldr	r3, [r3, #12]
 800eaba:	2b00      	cmp	r3, #0
 800eabc:	d1e9      	bne.n	800ea92 <USBD_StdDevReq+0x222>
 800eabe:	e6e3      	b.n	800e888 <USBD_StdDevReq+0x18>
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800eac0:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 800eac4:	689b      	ldr	r3, [r3, #8]
 800eac6:	2b00      	cmp	r3, #0
 800eac8:	d1e3      	bne.n	800ea92 <USBD_StdDevReq+0x222>
 800eaca:	e6dd      	b.n	800e888 <USBD_StdDevReq+0x18>
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800eacc:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 800ead0:	685b      	ldr	r3, [r3, #4]
 800ead2:	2b00      	cmp	r3, #0
 800ead4:	d1dd      	bne.n	800ea92 <USBD_StdDevReq+0x222>
 800ead6:	e6d7      	b.n	800e888 <USBD_StdDevReq+0x18>
    switch (pdev->dev_state)
 800ead8:	2b03      	cmp	r3, #3
 800eada:	f47f aed5 	bne.w	800e888 <USBD_StdDevReq+0x18>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800eade:	1d01      	adds	r1, r0, #4
 800eae0:	f000 f948 	bl	800ed74 <USBD_CtlSendData>
        break;
 800eae4:	e6d8      	b.n	800e898 <USBD_StdDevReq+0x28>
        if (cfgidx == 0U)
 800eae6:	b331      	cbz	r1, 800eb36 <USBD_StdDevReq+0x2c6>
        else if (cfgidx != pdev->dev_config)
 800eae8:	6841      	ldr	r1, [r0, #4]
 800eaea:	2901      	cmp	r1, #1
 800eaec:	f43f af34 	beq.w	800e958 <USBD_StdDevReq+0xe8>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800eaf0:	b2c9      	uxtb	r1, r1
 800eaf2:	f7ff fd85 	bl	800e600 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800eaf6:	7829      	ldrb	r1, [r5, #0]
 800eaf8:	6061      	str	r1, [r4, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800eafa:	4620      	mov	r0, r4
 800eafc:	f7ff fd76 	bl	800e5ec <USBD_SetClassConfig>
 800eb00:	2802      	cmp	r0, #2
 800eb02:	f47f af29 	bne.w	800e958 <USBD_StdDevReq+0xe8>
 800eb06:	e6bf      	b.n	800e888 <USBD_StdDevReq+0x18>
        if (cfgidx)
 800eb08:	2900      	cmp	r1, #0
 800eb0a:	f43f af25 	beq.w	800e958 <USBD_StdDevReq+0xe8>
          pdev->dev_config = cfgidx;
 800eb0e:	2101      	movs	r1, #1
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800eb10:	2303      	movs	r3, #3
          pdev->dev_config = cfgidx;
 800eb12:	6041      	str	r1, [r0, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800eb14:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800eb18:	f7ff fd68 	bl	800e5ec <USBD_SetClassConfig>
 800eb1c:	2802      	cmp	r0, #2
 800eb1e:	f47f af1b 	bne.w	800e958 <USBD_StdDevReq+0xe8>
 800eb22:	e6b1      	b.n	800e888 <USBD_StdDevReq+0x18>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800eb24:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800eb28:	f10d 0006 	add.w	r0, sp, #6
 800eb2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eb2e:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800eb30:	2302      	movs	r3, #2
 800eb32:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 800eb34:	e76c      	b.n	800ea10 <USBD_StdDevReq+0x1a0>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800eb36:	2302      	movs	r3, #2
          pdev->dev_config = cfgidx;
 800eb38:	6041      	str	r1, [r0, #4]
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800eb3a:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
          USBD_ClrClassConfig(pdev, cfgidx);
 800eb3e:	f7ff fd5f 	bl	800e600 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800eb42:	4620      	mov	r0, r4
 800eb44:	f000 f942 	bl	800edcc <USBD_CtlSendStatus>
 800eb48:	e6a6      	b.n	800e898 <USBD_StdDevReq+0x28>
        pdev->dev_state = USBD_STATE_DEFAULT;
 800eb4a:	2301      	movs	r3, #1
 800eb4c:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 800eb50:	e6a2      	b.n	800e898 <USBD_StdDevReq+0x28>
          if (pdev->pClass->GetUsrStrDescriptor != NULL)
 800eb52:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800eb56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eb58:	2b00      	cmp	r3, #0
 800eb5a:	f43f ae95 	beq.w	800e888 <USBD_StdDevReq+0x18>
            pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue), &len);
 800eb5e:	f10d 0206 	add.w	r2, sp, #6
 800eb62:	4798      	blx	r3
  if (err != 0U)
 800eb64:	e754      	b.n	800ea10 <USBD_StdDevReq+0x1a0>
 800eb66:	bf00      	nop
 800eb68:	20001cfd 	.word	0x20001cfd

0800eb6c <USBD_StdItfReq>:
{
 800eb6c:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800eb6e:	780b      	ldrb	r3, [r1, #0]
 800eb70:	f003 0260 	and.w	r2, r3, #96	; 0x60
 800eb74:	2a40      	cmp	r2, #64	; 0x40
{
 800eb76:	460d      	mov	r5, r1
 800eb78:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800eb7a:	d00a      	beq.n	800eb92 <USBD_StdItfReq+0x26>
 800eb7c:	065b      	lsls	r3, r3, #25
 800eb7e:	d508      	bpl.n	800eb92 <USBD_StdItfReq+0x26>
  USBD_LL_StallEP(pdev, 0x80U);
 800eb80:	2180      	movs	r1, #128	; 0x80
 800eb82:	f7f5 ffc1 	bl	8004b08 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800eb86:	4620      	mov	r0, r4
 800eb88:	2100      	movs	r1, #0
 800eb8a:	f7f5 ffbd 	bl	8004b08 <USBD_LL_StallEP>
}
 800eb8e:	2000      	movs	r0, #0
 800eb90:	bd38      	pop	{r3, r4, r5, pc}
      switch (pdev->dev_state)
 800eb92:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 800eb96:	3b01      	subs	r3, #1
 800eb98:	2b02      	cmp	r3, #2
 800eb9a:	d811      	bhi.n	800ebc0 <USBD_StdItfReq+0x54>
          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800eb9c:	792b      	ldrb	r3, [r5, #4]
 800eb9e:	2b01      	cmp	r3, #1
 800eba0:	d80e      	bhi.n	800ebc0 <USBD_StdItfReq+0x54>
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800eba2:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 800eba6:	4629      	mov	r1, r5
 800eba8:	689b      	ldr	r3, [r3, #8]
 800ebaa:	4620      	mov	r0, r4
 800ebac:	4798      	blx	r3
            if ((req->wLength == 0U) && (ret == USBD_OK))
 800ebae:	88eb      	ldrh	r3, [r5, #6]
 800ebb0:	2b00      	cmp	r3, #0
 800ebb2:	d1ec      	bne.n	800eb8e <USBD_StdItfReq+0x22>
 800ebb4:	2800      	cmp	r0, #0
 800ebb6:	d1ea      	bne.n	800eb8e <USBD_StdItfReq+0x22>
              USBD_CtlSendStatus(pdev);
 800ebb8:	4620      	mov	r0, r4
 800ebba:	f000 f907 	bl	800edcc <USBD_CtlSendStatus>
 800ebbe:	e7e6      	b.n	800eb8e <USBD_StdItfReq+0x22>
  USBD_LL_StallEP(pdev, 0x80U);
 800ebc0:	2180      	movs	r1, #128	; 0x80
 800ebc2:	4620      	mov	r0, r4
 800ebc4:	f7f5 ffa0 	bl	8004b08 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800ebc8:	4620      	mov	r0, r4
 800ebca:	2100      	movs	r1, #0
 800ebcc:	f7f5 ff9c 	bl	8004b08 <USBD_LL_StallEP>
}
 800ebd0:	2000      	movs	r0, #0
 800ebd2:	bd38      	pop	{r3, r4, r5, pc}

0800ebd4 <USBD_StdEPReq>:
{
 800ebd4:	b570      	push	{r4, r5, r6, lr}
 800ebd6:	780b      	ldrb	r3, [r1, #0]
 800ebd8:	f003 0360 	and.w	r3, r3, #96	; 0x60
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ebdc:	2b20      	cmp	r3, #32
{
 800ebde:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ebe0:	d00c      	beq.n	800ebfc <USBD_StdEPReq+0x28>
 800ebe2:	2b40      	cmp	r3, #64	; 0x40
 800ebe4:	d00a      	beq.n	800ebfc <USBD_StdEPReq+0x28>
 800ebe6:	b183      	cbz	r3, 800ec0a <USBD_StdEPReq+0x36>
  USBD_LL_StallEP(pdev, 0x80U);
 800ebe8:	2180      	movs	r1, #128	; 0x80
 800ebea:	4620      	mov	r0, r4
 800ebec:	f7f5 ff8c 	bl	8004b08 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800ebf0:	4620      	mov	r0, r4
 800ebf2:	2100      	movs	r1, #0
 800ebf4:	f7f5 ff88 	bl	8004b08 <USBD_LL_StallEP>
}
 800ebf8:	2000      	movs	r0, #0
 800ebfa:	bd70      	pop	{r4, r5, r6, pc}
      pdev->pClass->Setup(pdev, req);
 800ebfc:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 800ec00:	4620      	mov	r0, r4
 800ec02:	689b      	ldr	r3, [r3, #8]
 800ec04:	4798      	blx	r3
}
 800ec06:	2000      	movs	r0, #0
 800ec08:	bd70      	pop	{r4, r5, r6, pc}
      switch (req->bRequest)
 800ec0a:	784b      	ldrb	r3, [r1, #1]
  ep_addr  = LOBYTE(req->wIndex);
 800ec0c:	888a      	ldrh	r2, [r1, #4]
 800ec0e:	2b01      	cmp	r3, #1
 800ec10:	b2d5      	uxtb	r5, r2
      switch (req->bRequest)
 800ec12:	d03c      	beq.n	800ec8e <USBD_StdEPReq+0xba>
 800ec14:	2b03      	cmp	r3, #3
 800ec16:	d029      	beq.n	800ec6c <USBD_StdEPReq+0x98>
 800ec18:	2b00      	cmp	r3, #0
 800ec1a:	d1e5      	bne.n	800ebe8 <USBD_StdEPReq+0x14>
          switch (pdev->dev_state)
 800ec1c:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800ec20:	2b02      	cmp	r3, #2
 800ec22:	d04d      	beq.n	800ecc0 <USBD_StdEPReq+0xec>
 800ec24:	2b03      	cmp	r3, #3
 800ec26:	d1df      	bne.n	800ebe8 <USBD_StdEPReq+0x14>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800ec28:	f005 030f 	and.w	r3, r5, #15
 800ec2c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
              if ((ep_addr & 0x80U) == 0x80U)
 800ec30:	0612      	lsls	r2, r2, #24
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800ec32:	eb00 0383 	add.w	r3, r0, r3, lsl #2
              if ((ep_addr & 0x80U) == 0x80U)
 800ec36:	d452      	bmi.n	800ecde <USBD_StdEPReq+0x10a>
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800ec38:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 800ec3c:	2b00      	cmp	r3, #0
 800ec3e:	d0d3      	beq.n	800ebe8 <USBD_StdEPReq+0x14>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ec40:	f005 037f 	and.w	r3, r5, #127	; 0x7f
 800ec44:	2614      	movs	r6, #20
 800ec46:	fb06 0603 	mla	r6, r6, r3, r0
 800ec4a:	f506 76aa 	add.w	r6, r6, #340	; 0x154
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800ec4e:	b133      	cbz	r3, 800ec5e <USBD_StdEPReq+0x8a>
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800ec50:	4629      	mov	r1, r5
 800ec52:	4620      	mov	r0, r4
 800ec54:	f7f5 ff68 	bl	8004b28 <USBD_LL_IsStallEP>
 800ec58:	2800      	cmp	r0, #0
 800ec5a:	d04b      	beq.n	800ecf4 <USBD_StdEPReq+0x120>
                pep->status = 0x0001U;
 800ec5c:	2301      	movs	r3, #1
 800ec5e:	6033      	str	r3, [r6, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800ec60:	4631      	mov	r1, r6
 800ec62:	4620      	mov	r0, r4
 800ec64:	2202      	movs	r2, #2
 800ec66:	f000 f885 	bl	800ed74 <USBD_CtlSendData>
              break;
 800ec6a:	e7c5      	b.n	800ebf8 <USBD_StdEPReq+0x24>
          switch (pdev->dev_state)
 800ec6c:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800ec70:	2b02      	cmp	r3, #2
 800ec72:	d01b      	beq.n	800ecac <USBD_StdEPReq+0xd8>
 800ec74:	2b03      	cmp	r3, #3
 800ec76:	d1b7      	bne.n	800ebe8 <USBD_StdEPReq+0x14>
              if (req->wValue == USB_FEATURE_EP_HALT)
 800ec78:	884b      	ldrh	r3, [r1, #2]
 800ec7a:	b923      	cbnz	r3, 800ec86 <USBD_StdEPReq+0xb2>
                if ((ep_addr != 0x00U) &&
 800ec7c:	066a      	lsls	r2, r5, #25
 800ec7e:	d002      	beq.n	800ec86 <USBD_StdEPReq+0xb2>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800ec80:	88cb      	ldrh	r3, [r1, #6]
 800ec82:	2b00      	cmp	r3, #0
 800ec84:	d038      	beq.n	800ecf8 <USBD_StdEPReq+0x124>
              USBD_CtlSendStatus(pdev);
 800ec86:	4620      	mov	r0, r4
 800ec88:	f000 f8a0 	bl	800edcc <USBD_CtlSendStatus>
              break;
 800ec8c:	e7b4      	b.n	800ebf8 <USBD_StdEPReq+0x24>
          switch (pdev->dev_state)
 800ec8e:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800ec92:	2b02      	cmp	r3, #2
 800ec94:	d00a      	beq.n	800ecac <USBD_StdEPReq+0xd8>
 800ec96:	2b03      	cmp	r3, #3
 800ec98:	d1a6      	bne.n	800ebe8 <USBD_StdEPReq+0x14>
              if (req->wValue == USB_FEATURE_EP_HALT)
 800ec9a:	884b      	ldrh	r3, [r1, #2]
 800ec9c:	2b00      	cmp	r3, #0
 800ec9e:	d1ab      	bne.n	800ebf8 <USBD_StdEPReq+0x24>
                if ((ep_addr & 0x7FU) != 0x00U)
 800eca0:	066e      	lsls	r6, r5, #25
 800eca2:	d0f0      	beq.n	800ec86 <USBD_StdEPReq+0xb2>
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800eca4:	4629      	mov	r1, r5
 800eca6:	f7f5 ff37 	bl	8004b18 <USBD_LL_ClearStallEP>
 800ecaa:	e7ec      	b.n	800ec86 <USBD_StdEPReq+0xb2>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ecac:	066b      	lsls	r3, r5, #25
 800ecae:	d09b      	beq.n	800ebe8 <USBD_StdEPReq+0x14>
                USBD_LL_StallEP(pdev, ep_addr);
 800ecb0:	4629      	mov	r1, r5
 800ecb2:	f7f5 ff29 	bl	8004b08 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800ecb6:	4620      	mov	r0, r4
 800ecb8:	2180      	movs	r1, #128	; 0x80
 800ecba:	f7f5 ff25 	bl	8004b08 <USBD_LL_StallEP>
 800ecbe:	e79b      	b.n	800ebf8 <USBD_StdEPReq+0x24>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ecc0:	0668      	lsls	r0, r5, #25
 800ecc2:	d191      	bne.n	800ebe8 <USBD_StdEPReq+0x14>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ecc4:	0611      	lsls	r1, r2, #24
 800ecc6:	bf4c      	ite	mi
 800ecc8:	f104 0114 	addmi.w	r1, r4, #20
 800eccc:	f504 71aa 	addpl.w	r1, r4, #340	; 0x154
              pep->status = 0x0000U;
 800ecd0:	2300      	movs	r3, #0
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800ecd2:	4620      	mov	r0, r4
              pep->status = 0x0000U;
 800ecd4:	600b      	str	r3, [r1, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800ecd6:	2202      	movs	r2, #2
 800ecd8:	f000 f84c 	bl	800ed74 <USBD_CtlSendData>
              break;
 800ecdc:	e78c      	b.n	800ebf8 <USBD_StdEPReq+0x24>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800ecde:	699b      	ldr	r3, [r3, #24]
 800ece0:	2b00      	cmp	r3, #0
 800ece2:	d081      	beq.n	800ebe8 <USBD_StdEPReq+0x14>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ece4:	f005 037f 	and.w	r3, r5, #127	; 0x7f
 800ece8:	1c5e      	adds	r6, r3, #1
 800ecea:	eb06 0686 	add.w	r6, r6, r6, lsl #2
 800ecee:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 800ecf2:	e7ac      	b.n	800ec4e <USBD_StdEPReq+0x7a>
                pep->status = 0x0000U;
 800ecf4:	6030      	str	r0, [r6, #0]
 800ecf6:	e7b3      	b.n	800ec60 <USBD_StdEPReq+0x8c>
                  USBD_LL_StallEP(pdev, ep_addr);
 800ecf8:	4629      	mov	r1, r5
 800ecfa:	f7f5 ff05 	bl	8004b08 <USBD_LL_StallEP>
 800ecfe:	e7c2      	b.n	800ec86 <USBD_StdEPReq+0xb2>

0800ed00 <USBD_ParseSetupRequest>:
  req->bmRequest = *(uint8_t *)(pdata);
 800ed00:	780b      	ldrb	r3, [r1, #0]
 800ed02:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800ed04:	784b      	ldrb	r3, [r1, #1]
 800ed06:	7043      	strb	r3, [r0, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800ed08:	78ca      	ldrb	r2, [r1, #3]
 800ed0a:	788b      	ldrb	r3, [r1, #2]
 800ed0c:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800ed10:	8043      	strh	r3, [r0, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800ed12:	794a      	ldrb	r2, [r1, #5]
 800ed14:	790b      	ldrb	r3, [r1, #4]
 800ed16:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800ed1a:	8083      	strh	r3, [r0, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800ed1c:	79ca      	ldrb	r2, [r1, #7]
 800ed1e:	798b      	ldrb	r3, [r1, #6]
 800ed20:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800ed24:	80c3      	strh	r3, [r0, #6]
}
 800ed26:	4770      	bx	lr

0800ed28 <USBD_GetString>:
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
  uint8_t idx = 0U;

  if (desc != NULL)
 800ed28:	b308      	cbz	r0, 800ed6e <USBD_GetString+0x46>
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
  uint8_t  len = 0U;

  while (*buf != '\0')
 800ed2a:	7803      	ldrb	r3, [r0, #0]
{
 800ed2c:	b470      	push	{r4, r5, r6}
  while (*buf != '\0')
 800ed2e:	b1fb      	cbz	r3, 800ed70 <USBD_GetString+0x48>
 800ed30:	4604      	mov	r4, r0
 800ed32:	f1c0 0601 	rsb	r6, r0, #1
  {
    len++;
 800ed36:	19a3      	adds	r3, r4, r6
  while (*buf != '\0')
 800ed38:	f814 5f01 	ldrb.w	r5, [r4, #1]!
 800ed3c:	b2db      	uxtb	r3, r3
 800ed3e:	2d00      	cmp	r5, #0
 800ed40:	d1f9      	bne.n	800ed36 <USBD_GetString+0xe>
 800ed42:	3301      	adds	r3, #1
 800ed44:	005b      	lsls	r3, r3, #1
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800ed46:	2403      	movs	r4, #3
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800ed48:	8013      	strh	r3, [r2, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800ed4a:	700b      	strb	r3, [r1, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800ed4c:	704c      	strb	r4, [r1, #1]
    while (*desc != '\0')
 800ed4e:	7804      	ldrb	r4, [r0, #0]
 800ed50:	b15c      	cbz	r4, 800ed6a <USBD_GetString+0x42>
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800ed52:	2302      	movs	r3, #2
      unicode[idx++] =  0U;
 800ed54:	2500      	movs	r5, #0
      unicode[idx++] = *desc++;
 800ed56:	1c5a      	adds	r2, r3, #1
 800ed58:	b2d2      	uxtb	r2, r2
 800ed5a:	54cc      	strb	r4, [r1, r3]
      unicode[idx++] =  0U;
 800ed5c:	548d      	strb	r5, [r1, r2]
    while (*desc != '\0')
 800ed5e:	f810 4f01 	ldrb.w	r4, [r0, #1]!
      unicode[idx++] =  0U;
 800ed62:	3302      	adds	r3, #2
 800ed64:	b2db      	uxtb	r3, r3
    while (*desc != '\0')
 800ed66:	2c00      	cmp	r4, #0
 800ed68:	d1f5      	bne.n	800ed56 <USBD_GetString+0x2e>
}
 800ed6a:	bc70      	pop	{r4, r5, r6}
 800ed6c:	4770      	bx	lr
 800ed6e:	4770      	bx	lr
  while (*buf != '\0')
 800ed70:	2302      	movs	r3, #2
 800ed72:	e7e8      	b.n	800ed46 <USBD_GetString+0x1e>

0800ed74 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800ed74:	b538      	push	{r3, r4, r5, lr}
 800ed76:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800ed78:	2502      	movs	r5, #2
{
 800ed7a:	460a      	mov	r2, r1
  pdev->ep_in[0].total_length = len;
  pdev->ep_in[0].rem_length   = len;
 800ed7c:	e9c0 3307 	strd	r3, r3, [r0, #28]
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800ed80:	f8c0 5294 	str.w	r5, [r0, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ed84:	2100      	movs	r1, #0
 800ed86:	f7f5 feeb 	bl	8004b60 <USBD_LL_Transmit>

  return USBD_OK;
}
 800ed8a:	2000      	movs	r0, #0
 800ed8c:	bd38      	pop	{r3, r4, r5, pc}
 800ed8e:	bf00      	nop

0800ed90 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800ed90:	b508      	push	{r3, lr}
 800ed92:	4613      	mov	r3, r2
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ed94:	460a      	mov	r2, r1
 800ed96:	2100      	movs	r1, #0
 800ed98:	f7f5 fee2 	bl	8004b60 <USBD_LL_Transmit>

  return USBD_OK;
}
 800ed9c:	2000      	movs	r0, #0
 800ed9e:	bd08      	pop	{r3, pc}

0800eda0 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800eda0:	b538      	push	{r3, r4, r5, lr}
 800eda2:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800eda4:	2503      	movs	r5, #3
{
 800eda6:	460a      	mov	r2, r1
  pdev->ep_out[0].total_length = len;
  pdev->ep_out[0].rem_length   = len;
 800eda8:	e9c0 3357 	strd	r3, r3, [r0, #348]	; 0x15c
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800edac:	f8c0 5294 	str.w	r5, [r0, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800edb0:	2100      	movs	r1, #0
 800edb2:	f7f5 fedd 	bl	8004b70 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800edb6:	2000      	movs	r0, #0
 800edb8:	bd38      	pop	{r3, r4, r5, pc}
 800edba:	bf00      	nop

0800edbc <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800edbc:	b508      	push	{r3, lr}
 800edbe:	4613      	mov	r3, r2
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800edc0:	460a      	mov	r2, r1
 800edc2:	2100      	movs	r1, #0
 800edc4:	f7f5 fed4 	bl	8004b70 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800edc8:	2000      	movs	r0, #0
 800edca:	bd08      	pop	{r3, pc}

0800edcc <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800edcc:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800edce:	2204      	movs	r2, #4

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800edd0:	2300      	movs	r3, #0
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800edd2:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800edd6:	4619      	mov	r1, r3
 800edd8:	461a      	mov	r2, r3
 800edda:	f7f5 fec1 	bl	8004b60 <USBD_LL_Transmit>

  return USBD_OK;
}
 800edde:	2000      	movs	r0, #0
 800ede0:	bd08      	pop	{r3, pc}
 800ede2:	bf00      	nop

0800ede4 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800ede4:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800ede6:	2205      	movs	r2, #5

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ede8:	2300      	movs	r3, #0
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800edea:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800edee:	4619      	mov	r1, r3
 800edf0:	461a      	mov	r2, r3
 800edf2:	f7f5 febd 	bl	8004b70 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800edf6:	2000      	movs	r0, #0
 800edf8:	bd08      	pop	{r3, pc}
 800edfa:	bf00      	nop

0800edfc <disk_status>:
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800edfc:	4b03      	ldr	r3, [pc, #12]	; (800ee0c <disk_status+0x10>)
 800edfe:	eb03 0280 	add.w	r2, r3, r0, lsl #2
 800ee02:	4418      	add	r0, r3
 800ee04:	6853      	ldr	r3, [r2, #4]
 800ee06:	7a00      	ldrb	r0, [r0, #8]
 800ee08:	685b      	ldr	r3, [r3, #4]
 800ee0a:	4718      	bx	r3
 800ee0c:	20002048 	.word	0x20002048

0800ee10 <disk_initialize>:
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
  DSTATUS stat = RES_OK;

  if(disk.is_initialized[pdrv] == 0)
 800ee10:	4b06      	ldr	r3, [pc, #24]	; (800ee2c <disk_initialize+0x1c>)
 800ee12:	5c1a      	ldrb	r2, [r3, r0]
 800ee14:	b942      	cbnz	r2, 800ee28 <disk_initialize+0x18>
  {
    disk.is_initialized[pdrv] = 1;
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800ee16:	eb03 0280 	add.w	r2, r3, r0, lsl #2
    disk.is_initialized[pdrv] = 1;
 800ee1a:	2101      	movs	r1, #1
 800ee1c:	5419      	strb	r1, [r3, r0]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800ee1e:	6852      	ldr	r2, [r2, #4]
 800ee20:	4418      	add	r0, r3
 800ee22:	6813      	ldr	r3, [r2, #0]
 800ee24:	7a00      	ldrb	r0, [r0, #8]
 800ee26:	4718      	bx	r3
  }
  return stat;
}
 800ee28:	2000      	movs	r0, #0
 800ee2a:	4770      	bx	lr
 800ee2c:	20002048 	.word	0x20002048

0800ee30 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800ee30:	b430      	push	{r4, r5}
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800ee32:	4c05      	ldr	r4, [pc, #20]	; (800ee48 <disk_read+0x18>)
 800ee34:	eb04 0580 	add.w	r5, r4, r0, lsl #2
 800ee38:	4420      	add	r0, r4
 800ee3a:	686c      	ldr	r4, [r5, #4]
 800ee3c:	7a00      	ldrb	r0, [r0, #8]
 800ee3e:	68a4      	ldr	r4, [r4, #8]
 800ee40:	46a4      	mov	ip, r4
  return res;
}
 800ee42:	bc30      	pop	{r4, r5}
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800ee44:	4760      	bx	ip
 800ee46:	bf00      	nop
 800ee48:	20002048 	.word	0x20002048

0800ee4c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800ee4c:	b430      	push	{r4, r5}
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800ee4e:	4c05      	ldr	r4, [pc, #20]	; (800ee64 <disk_write+0x18>)
 800ee50:	eb04 0580 	add.w	r5, r4, r0, lsl #2
 800ee54:	4420      	add	r0, r4
 800ee56:	686c      	ldr	r4, [r5, #4]
 800ee58:	7a00      	ldrb	r0, [r0, #8]
 800ee5a:	68e4      	ldr	r4, [r4, #12]
 800ee5c:	46a4      	mov	ip, r4
  return res;
}
 800ee5e:	bc30      	pop	{r4, r5}
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800ee60:	4760      	bx	ip
 800ee62:	bf00      	nop
 800ee64:	20002048 	.word	0x20002048

0800ee68 <disk_ioctl>:
	void *buff		/* Buffer to send/receive control data */
)
{
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800ee68:	4b05      	ldr	r3, [pc, #20]	; (800ee80 <disk_ioctl+0x18>)
{
 800ee6a:	b410      	push	{r4}
  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800ee6c:	eb03 0480 	add.w	r4, r3, r0, lsl #2
 800ee70:	4418      	add	r0, r3
 800ee72:	6863      	ldr	r3, [r4, #4]
 800ee74:	7a00      	ldrb	r0, [r0, #8]
 800ee76:	691b      	ldr	r3, [r3, #16]
  return res;
}
 800ee78:	f85d 4b04 	ldr.w	r4, [sp], #4
  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800ee7c:	4718      	bx	r3
 800ee7e:	bf00      	nop
 800ee80:	20002048 	.word	0x20002048

0800ee84 <get_fattime>:
  * @retval Time in DWORD
  */
__weak DWORD get_fattime (void)
{
  return 0;
}
 800ee84:	2000      	movs	r0, #0
 800ee86:	4770      	bx	lr

0800ee88 <pattern_matching>:
	const TCHAR* pat,	/* Matching pattern */
	const TCHAR* nam,	/* String to be tested */
	int skip,			/* Number of pre-skip chars (number of ?s) */
	int inf				/* Infinite search (* specified) */
)
{
 800ee88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (chr >= 0x80) chr = ExCvt[chr - 0x80];	/* To upper SBCS extended char */
 800ee8c:	4d36      	ldr	r5, [pc, #216]	; (800ef68 <pattern_matching+0xe0>)
{
 800ee8e:	460c      	mov	r4, r1
 800ee90:	4606      	mov	r6, r0
 800ee92:	440a      	add	r2, r1
 800ee94:	461f      	mov	r7, r3
	const TCHAR *pp, *np;
	WCHAR pc, nc;
	int nm, nx;


	while (skip--) {				/* Pre-skip name chars */
 800ee96:	42a2      	cmp	r2, r4
 800ee98:	d010      	beq.n	800eebc <pattern_matching+0x34>
	chr = (BYTE)*(*ptr)++;					/* Get a byte */
 800ee9a:	f814 3b01 	ldrb.w	r3, [r4], #1
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
 800ee9e:	f1a3 0061 	sub.w	r0, r3, #97	; 0x61
 800eea2:	2819      	cmp	r0, #25
	chr = (BYTE)*(*ptr)++;					/* Get a byte */
 800eea4:	b299      	uxth	r1, r3
	if (chr >= 0x80) chr = ExCvt[chr - 0x80];	/* To upper SBCS extended char */
 800eea6:	442b      	add	r3, r5
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
 800eea8:	d9f5      	bls.n	800ee96 <pattern_matching+0xe>
	if (chr >= 0x80) chr = ExCvt[chr - 0x80];	/* To upper SBCS extended char */
 800eeaa:	297f      	cmp	r1, #127	; 0x7f
 800eeac:	bf88      	it	hi
 800eeae:	f813 1c80 	ldrbhi.w	r1, [r3, #-128]
		if (!get_achar(&nam)) return 0;	/* Branch mismatched if less name chars */
 800eeb2:	2900      	cmp	r1, #0
 800eeb4:	d1ef      	bne.n	800ee96 <pattern_matching+0xe>
 800eeb6:	2000      	movs	r0, #0
		}
		get_achar(&nam);			/* nam++ */
	} while (inf && nc);			/* Retry until end of name if infinite search is specified */

	return 0;
}
 800eeb8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (!*pat && inf) return 1;		/* (short circuit) */
 800eebc:	f896 8000 	ldrb.w	r8, [r6]
 800eec0:	f1b8 0f00 	cmp.w	r8, #0
 800eec4:	d024      	beq.n	800ef10 <pattern_matching+0x88>
	if (chr >= 0x80) chr = ExCvt[chr - 0x80];	/* To upper SBCS extended char */
 800eec6:	4d28      	ldr	r5, [pc, #160]	; (800ef68 <pattern_matching+0xe0>)
		pp = pat; np = nam;			/* Top of pattern and name to match */
 800eec8:	4631      	mov	r1, r6
	if (!*pat && inf) return 1;		/* (short circuit) */
 800eeca:	4642      	mov	r2, r8
		pp = pat; np = nam;			/* Top of pattern and name to match */
 800eecc:	46a1      	mov	r9, r4
 800eece:	e010      	b.n	800eef2 <pattern_matching+0x6a>
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
 800eed0:	3b20      	subs	r3, #32
 800eed2:	b29b      	uxth	r3, r3
	chr = (BYTE)*(*ptr)++;					/* Get a byte */
 800eed4:	f819 0b01 	ldrb.w	r0, [r9], #1
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
 800eed8:	f1a0 0c61 	sub.w	ip, r0, #97	; 0x61
 800eedc:	f1bc 0f19 	cmp.w	ip, #25
	chr = (BYTE)*(*ptr)++;					/* Get a byte */
 800eee0:	b282      	uxth	r2, r0
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
 800eee2:	d81a      	bhi.n	800ef1a <pattern_matching+0x92>
 800eee4:	3a20      	subs	r2, #32
 800eee6:	b292      	uxth	r2, r2
			if (pc != nc) break;	/* Branch mismatched? */
 800eee8:	429a      	cmp	r2, r3
 800eeea:	d11d      	bne.n	800ef28 <pattern_matching+0xa0>
			if (pc == 0) return 1;	/* Branch matched? (matched at end of both strings) */
 800eeec:	b192      	cbz	r2, 800ef14 <pattern_matching+0x8c>
 800eeee:	f811 2f01 	ldrb.w	r2, [r1, #1]!
			if (*pp == '?' || *pp == '*') {	/* Wildcard? */
 800eef2:	2a3f      	cmp	r2, #63	; 0x3f
 800eef4:	d01e      	beq.n	800ef34 <pattern_matching+0xac>
 800eef6:	2a2a      	cmp	r2, #42	; 0x2a
 800eef8:	d01c      	beq.n	800ef34 <pattern_matching+0xac>
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
 800eefa:	f1a2 0061 	sub.w	r0, r2, #97	; 0x61
 800eefe:	2819      	cmp	r0, #25
	chr = (BYTE)*(*ptr)++;					/* Get a byte */
 800ef00:	b293      	uxth	r3, r2
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
 800ef02:	d9e5      	bls.n	800eed0 <pattern_matching+0x48>
	if (chr >= 0x80) chr = ExCvt[chr - 0x80];	/* To upper SBCS extended char */
 800ef04:	2b7f      	cmp	r3, #127	; 0x7f
 800ef06:	bf84      	itt	hi
 800ef08:	1952      	addhi	r2, r2, r5
 800ef0a:	f812 3c80 	ldrbhi.w	r3, [r2, #-128]
 800ef0e:	e7e1      	b.n	800eed4 <pattern_matching+0x4c>
	if (!*pat && inf) return 1;		/* (short circuit) */
 800ef10:	2f00      	cmp	r7, #0
 800ef12:	d0d8      	beq.n	800eec6 <pattern_matching+0x3e>
 800ef14:	2001      	movs	r0, #1
}
 800ef16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (chr >= 0x80) chr = ExCvt[chr - 0x80];	/* To upper SBCS extended char */
 800ef1a:	2a7f      	cmp	r2, #127	; 0x7f
 800ef1c:	bf84      	itt	hi
 800ef1e:	1940      	addhi	r0, r0, r5
 800ef20:	f810 2c80 	ldrbhi.w	r2, [r0, #-128]
			if (pc != nc) break;	/* Branch mismatched? */
 800ef24:	429a      	cmp	r2, r3
 800ef26:	d0e1      	beq.n	800eeec <pattern_matching+0x64>
	chr = (BYTE)*(*ptr)++;					/* Get a byte */
 800ef28:	3401      	adds	r4, #1
	} while (inf && nc);			/* Retry until end of name if infinite search is specified */
 800ef2a:	2f00      	cmp	r7, #0
 800ef2c:	d0c3      	beq.n	800eeb6 <pattern_matching+0x2e>
 800ef2e:	2a00      	cmp	r2, #0
 800ef30:	d1ca      	bne.n	800eec8 <pattern_matching+0x40>
 800ef32:	e7c0      	b.n	800eeb6 <pattern_matching+0x2e>
		pp = pat; np = nam;			/* Top of pattern and name to match */
 800ef34:	2300      	movs	r3, #0
 800ef36:	f811 cb01 	ldrb.w	ip, [r1], #1
 800ef3a:	461a      	mov	r2, r3
					if (*pp++ == '?') nm++; else nx = 1;
 800ef3c:	f1bc 0f3f 	cmp.w	ip, #63	; 0x3f
 800ef40:	4608      	mov	r0, r1
				} while (*pp == '?' || *pp == '*');
 800ef42:	f811 cb01 	ldrb.w	ip, [r1], #1
					if (*pp++ == '?') nm++; else nx = 1;
 800ef46:	bf0c      	ite	eq
 800ef48:	3201      	addeq	r2, #1
 800ef4a:	2301      	movne	r3, #1
				} while (*pp == '?' || *pp == '*');
 800ef4c:	f1bc 0f3f 	cmp.w	ip, #63	; 0x3f
 800ef50:	d0f4      	beq.n	800ef3c <pattern_matching+0xb4>
 800ef52:	f1bc 0f2a 	cmp.w	ip, #42	; 0x2a
 800ef56:	d0f1      	beq.n	800ef3c <pattern_matching+0xb4>
				if (pattern_matching(pp, np, nm, nx)) return 1;	/* Test new branch (recurs upto number of wildcard blocks in the pattern) */
 800ef58:	4649      	mov	r1, r9
 800ef5a:	f7ff ff95 	bl	800ee88 <pattern_matching>
 800ef5e:	2800      	cmp	r0, #0
 800ef60:	d1d8      	bne.n	800ef14 <pattern_matching+0x8c>
				nc = *np; break;	/* Branch mismatched */
 800ef62:	f899 2000 	ldrb.w	r2, [r9]
 800ef66:	e7df      	b.n	800ef28 <pattern_matching+0xa0>
 800ef68:	0801b8fc 	.word	0x0801b8fc

0800ef6c <get_fileinfo>:
{
 800ef6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	fno->fname[0] = 0;		/* Invaidate file info */
 800ef70:	2700      	movs	r7, #0
	FATFS *fs = dp->obj.fs;
 800ef72:	f8d0 8000 	ldr.w	r8, [r0]
	fno->fname[0] = 0;		/* Invaidate file info */
 800ef76:	758f      	strb	r7, [r1, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800ef78:	69c3      	ldr	r3, [r0, #28]
 800ef7a:	2b00      	cmp	r3, #0
 800ef7c:	d065      	beq.n	800f04a <get_fileinfo+0xde>
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 800ef7e:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800ef80:	3301      	adds	r3, #1
 800ef82:	4606      	mov	r6, r0
 800ef84:	460d      	mov	r5, r1
 800ef86:	d01d      	beq.n	800efc4 <get_fileinfo+0x58>
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800ef88:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ef8c:	8818      	ldrh	r0, [r3, #0]
 800ef8e:	b1a0      	cbz	r0, 800efba <get_fileinfo+0x4e>
 800ef90:	f101 0715 	add.w	r7, r1, #21
 800ef94:	2401      	movs	r4, #1
 800ef96:	e00b      	b.n	800efb0 <get_fileinfo+0x44>
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 800ef98:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
 800ef9c:	d00d      	beq.n	800efba <get_fileinfo+0x4e>
				fno->fname[i++] = (TCHAR)w;
 800ef9e:	f807 0f01 	strb.w	r0, [r7, #1]!
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800efa2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800efa6:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 800efaa:	1c63      	adds	r3, r4, #1
 800efac:	b130      	cbz	r0, 800efbc <get_fileinfo+0x50>
 800efae:	461c      	mov	r4, r3
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 800efb0:	2100      	movs	r1, #0
 800efb2:	f003 fac9 	bl	8012548 <ff_convert>
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 800efb6:	2800      	cmp	r0, #0
 800efb8:	d1ee      	bne.n	800ef98 <get_fileinfo+0x2c>
			i = j = 0;
 800efba:	2400      	movs	r4, #0
			fno->fname[i] = 0;	/* Terminate the LFN */
 800efbc:	442c      	add	r4, r5
 800efbe:	2300      	movs	r3, #0
 800efc0:	75a3      	strb	r3, [r4, #22]
 800efc2:	7daf      	ldrb	r7, [r5, #22]
		c = (TCHAR)dp->dir[i++];
 800efc4:	6a36      	ldr	r6, [r6, #32]
	i = j = 0;
 800efc6:	2400      	movs	r4, #0
 800efc8:	1e70      	subs	r0, r6, #1
 800efca:	f106 0c0a 	add.w	ip, r6, #10
			fno->altname[j++] = '.';
 800efce:	f04f 082e 	mov.w	r8, #46	; 0x2e
		c = (TCHAR)dp->dir[i++];
 800efd2:	4602      	mov	r2, r0
 800efd4:	f810 3f01 	ldrb.w	r3, [r0, #1]!
		if (c == ' ') continue;				/* Skip padding spaces */
 800efd8:	2b20      	cmp	r3, #32
 800efda:	d01c      	beq.n	800f016 <get_fileinfo+0xaa>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800efdc:	3202      	adds	r2, #2
 800efde:	2b05      	cmp	r3, #5
 800efe0:	eba2 0206 	sub.w	r2, r2, r6
 800efe4:	bf08      	it	eq
 800efe6:	23e5      	moveq	r3, #229	; 0xe5
		if (i == 9) {						/* Insert a . if extension is exist */
 800efe8:	2a09      	cmp	r2, #9
 800efea:	d030      	beq.n	800f04e <get_fileinfo+0xe2>
		fno->altname[j] = c;
 800efec:	1929      	adds	r1, r5, r4
 800efee:	724b      	strb	r3, [r1, #9]
		if (!lfv) {
 800eff0:	b987      	cbnz	r7, 800f014 <get_fileinfo+0xa8>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 800eff2:	f1a3 0e41 	sub.w	lr, r3, #65	; 0x41
 800eff6:	f1be 0f19 	cmp.w	lr, #25
 800effa:	d80a      	bhi.n	800f012 <get_fileinfo+0xa6>
 800effc:	2a09      	cmp	r2, #9
 800effe:	f896 e00c 	ldrb.w	lr, [r6, #12]
 800f002:	bf34      	ite	cc
 800f004:	2208      	movcc	r2, #8
 800f006:	2210      	movcs	r2, #16
 800f008:	ea1e 0f02 	tst.w	lr, r2
				c += 0x20;			/* To lower */
 800f00c:	bf1c      	itt	ne
 800f00e:	3320      	addne	r3, #32
 800f010:	b2db      	uxtbne	r3, r3
			fno->fname[j] = c;
 800f012:	758b      	strb	r3, [r1, #22]
		j++;
 800f014:	3401      	adds	r4, #1
	while (i < 11) {		/* Copy name body and extension */
 800f016:	4584      	cmp	ip, r0
 800f018:	d1db      	bne.n	800efd2 <get_fileinfo+0x66>
		fno->fname[j] = 0;
 800f01a:	1929      	adds	r1, r5, r4
	if (!lfv) {
 800f01c:	b1ff      	cbz	r7, 800f05e <get_fileinfo+0xf2>
	fno->altname[j] = 0;	/* Terminate the SFN */
 800f01e:	2300      	movs	r3, #0
 800f020:	724b      	strb	r3, [r1, #9]
	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 800f022:	7af3      	ldrb	r3, [r6, #11]
 800f024:	722b      	strb	r3, [r5, #8]
	rv = rv << 8 | ptr[2];
 800f026:	8bf1      	ldrh	r1, [r6, #30]
	rv = rv << 8 | ptr[1];
 800f028:	7f72      	ldrb	r2, [r6, #29]
	rv = rv << 8 | ptr[0];
 800f02a:	7f33      	ldrb	r3, [r6, #28]
	rv = rv << 8 | ptr[1];
 800f02c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
	rv = rv << 8 | ptr[0];
 800f030:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800f034:	602b      	str	r3, [r5, #0]
	rv = rv << 8 | ptr[2];
 800f036:	8b31      	ldrh	r1, [r6, #24]
	rv = rv << 8 | ptr[1];
 800f038:	7df2      	ldrb	r2, [r6, #23]
	rv = rv << 8 | ptr[0];
 800f03a:	7db3      	ldrb	r3, [r6, #22]
	rv = rv << 8 | ptr[1];
 800f03c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
	rv = rv << 8 | ptr[0];
 800f040:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 800f044:	0c1a      	lsrs	r2, r3, #16
 800f046:	80eb      	strh	r3, [r5, #6]
 800f048:	80aa      	strh	r2, [r5, #4]
}
 800f04a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (!lfv) fno->fname[j] = '.';
 800f04e:	1929      	adds	r1, r5, r4
 800f050:	b90f      	cbnz	r7, 800f056 <get_fileinfo+0xea>
 800f052:	f881 8016 	strb.w	r8, [r1, #22]
			fno->altname[j++] = '.';
 800f056:	f881 8009 	strb.w	r8, [r1, #9]
 800f05a:	3401      	adds	r4, #1
 800f05c:	e7c6      	b.n	800efec <get_fileinfo+0x80>
		fno->fname[j] = 0;
 800f05e:	758f      	strb	r7, [r1, #22]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 800f060:	7b33      	ldrb	r3, [r6, #12]
 800f062:	2b00      	cmp	r3, #0
 800f064:	bf08      	it	eq
 800f066:	4629      	moveq	r1, r5
 800f068:	e7d9      	b.n	800f01e <get_fileinfo+0xb2>
 800f06a:	bf00      	nop

0800f06c <move_window.part.0>:
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
 800f06c:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800f06e:	78c3      	ldrb	r3, [r0, #3]
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
 800f070:	b083      	sub	sp, #12
 800f072:	4604      	mov	r4, r0
 800f074:	460d      	mov	r5, r1
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800f076:	b973      	cbnz	r3, 800f096 <move_window.part.0+0x2a>
 800f078:	f100 0134 	add.w	r1, r0, #52	; 0x34
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800f07c:	462a      	mov	r2, r5
 800f07e:	7860      	ldrb	r0, [r4, #1]
 800f080:	2301      	movs	r3, #1
 800f082:	f7ff fed5 	bl	800ee30 <disk_read>
				res = FR_DISK_ERR;
 800f086:	2800      	cmp	r0, #0
 800f088:	bf1c      	itt	ne
 800f08a:	2001      	movne	r0, #1
 800f08c:	f04f 35ff 	movne.w	r5, #4294967295
			fs->winsect = sector;
 800f090:	6325      	str	r5, [r4, #48]	; 0x30
}
 800f092:	b003      	add	sp, #12
 800f094:	bdf0      	pop	{r4, r5, r6, r7, pc}
		wsect = fs->winsect;	/* Current sector number */
 800f096:	6b06      	ldr	r6, [r0, #48]	; 0x30
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800f098:	7840      	ldrb	r0, [r0, #1]
 800f09a:	f104 0134 	add.w	r1, r4, #52	; 0x34
 800f09e:	4632      	mov	r2, r6
 800f0a0:	2301      	movs	r3, #1
 800f0a2:	9101      	str	r1, [sp, #4]
 800f0a4:	f7ff fed2 	bl	800ee4c <disk_write>
 800f0a8:	b9b8      	cbnz	r0, 800f0da <move_window.part.0+0x6e>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800f0aa:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800f0ac:	69e3      	ldr	r3, [r4, #28]
 800f0ae:	9901      	ldr	r1, [sp, #4]
			fs->wflag = 0;
 800f0b0:	70e0      	strb	r0, [r4, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800f0b2:	1ab2      	subs	r2, r6, r2
 800f0b4:	429a      	cmp	r2, r3
 800f0b6:	d2e1      	bcs.n	800f07c <move_window.part.0+0x10>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800f0b8:	78a7      	ldrb	r7, [r4, #2]
 800f0ba:	2f01      	cmp	r7, #1
 800f0bc:	d801      	bhi.n	800f0c2 <move_window.part.0+0x56>
 800f0be:	e7dd      	b.n	800f07c <move_window.part.0+0x10>
 800f0c0:	69e3      	ldr	r3, [r4, #28]
					disk_write(fs->drv, fs->win, wsect, 1);
 800f0c2:	7860      	ldrb	r0, [r4, #1]
 800f0c4:	9101      	str	r1, [sp, #4]
					wsect += fs->fsize;
 800f0c6:	441e      	add	r6, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800f0c8:	3f01      	subs	r7, #1
					disk_write(fs->drv, fs->win, wsect, 1);
 800f0ca:	4632      	mov	r2, r6
 800f0cc:	2301      	movs	r3, #1
 800f0ce:	f7ff febd 	bl	800ee4c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800f0d2:	2f01      	cmp	r7, #1
 800f0d4:	9901      	ldr	r1, [sp, #4]
 800f0d6:	d1f3      	bne.n	800f0c0 <move_window.part.0+0x54>
 800f0d8:	e7d0      	b.n	800f07c <move_window.part.0+0x10>
			res = FR_DISK_ERR;
 800f0da:	2001      	movs	r0, #1
}
 800f0dc:	b003      	add	sp, #12
 800f0de:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800f0e0 <put_fat.part.0>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
 800f0e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		switch (fs->fs_type) {
 800f0e4:	7803      	ldrb	r3, [r0, #0]
 800f0e6:	2b02      	cmp	r3, #2
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
 800f0e8:	4604      	mov	r4, r0
 800f0ea:	460d      	mov	r5, r1
 800f0ec:	4616      	mov	r6, r2
		switch (fs->fs_type) {
 800f0ee:	d006      	beq.n	800f0fe <put_fat.part.0+0x1e>
 800f0f0:	2b03      	cmp	r3, #3
 800f0f2:	d052      	beq.n	800f19a <put_fat.part.0+0xba>
 800f0f4:	2b01      	cmp	r3, #1
 800f0f6:	d01b      	beq.n	800f130 <put_fat.part.0+0x50>
 800f0f8:	2002      	movs	r0, #2
}
 800f0fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800f0fe:	6a41      	ldr	r1, [r0, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 800f100:	6b03      	ldr	r3, [r0, #48]	; 0x30
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800f102:	eb01 2115 	add.w	r1, r1, r5, lsr #8
	if (sector != fs->winsect) {	/* Window offset changed? */
 800f106:	4299      	cmp	r1, r3
 800f108:	d003      	beq.n	800f112 <put_fat.part.0+0x32>
 800f10a:	f7ff ffaf 	bl	800f06c <move_window.part.0>
			if (res != FR_OK) break;
 800f10e:	2800      	cmp	r0, #0
 800f110:	d1f3      	bne.n	800f0fa <put_fat.part.0+0x1a>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800f112:	006d      	lsls	r5, r5, #1
 800f114:	f104 0334 	add.w	r3, r4, #52	; 0x34
 800f118:	f405 75ff 	and.w	r5, r5, #510	; 0x1fe
 800f11c:	195a      	adds	r2, r3, r5
	*ptr++ = (BYTE)val; val >>= 8;
 800f11e:	555e      	strb	r6, [r3, r5]
 800f120:	f3c6 2107 	ubfx	r1, r6, #8, #8
			fs->wflag = 1;
 800f124:	2301      	movs	r3, #1
	*ptr++ = (BYTE)val;
 800f126:	7051      	strb	r1, [r2, #1]
			fs->wflag = 1;
 800f128:	70e3      	strb	r3, [r4, #3]
			break;
 800f12a:	2000      	movs	r0, #0
}
 800f12c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800f130:	6a41      	ldr	r1, [r0, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 800f132:	6b03      	ldr	r3, [r0, #48]	; 0x30
			bc = (UINT)clst; bc += bc / 2;
 800f134:	eb05 0755 	add.w	r7, r5, r5, lsr #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800f138:	eb01 2157 	add.w	r1, r1, r7, lsr #9
	if (sector != fs->winsect) {	/* Window offset changed? */
 800f13c:	4299      	cmp	r1, r3
 800f13e:	d003      	beq.n	800f148 <put_fat.part.0+0x68>
 800f140:	f7ff ff94 	bl	800f06c <move_window.part.0>
			if (res != FR_OK) break;
 800f144:	2800      	cmp	r0, #0
 800f146:	d1d8      	bne.n	800f0fa <put_fat.part.0+0x1a>
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800f148:	07eb      	lsls	r3, r5, #31
			p = fs->win + bc++ % SS(fs);
 800f14a:	f107 0801 	add.w	r8, r7, #1
 800f14e:	f104 0934 	add.w	r9, r4, #52	; 0x34
 800f152:	f3c7 0708 	ubfx	r7, r7, #0, #9
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800f156:	d543      	bpl.n	800f1e0 <put_fat.part.0+0x100>
 800f158:	f819 3007 	ldrb.w	r3, [r9, r7]
 800f15c:	f003 030f 	and.w	r3, r3, #15
 800f160:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
 800f164:	f809 3007 	strb.w	r3, [r9, r7]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800f168:	6a61      	ldr	r1, [r4, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 800f16a:	6b23      	ldr	r3, [r4, #48]	; 0x30
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800f16c:	eb01 2158 	add.w	r1, r1, r8, lsr #9
			fs->wflag = 1;
 800f170:	2201      	movs	r2, #1
	if (sector != fs->winsect) {	/* Window offset changed? */
 800f172:	4299      	cmp	r1, r3
			fs->wflag = 1;
 800f174:	70e2      	strb	r2, [r4, #3]
	if (sector != fs->winsect) {	/* Window offset changed? */
 800f176:	d004      	beq.n	800f182 <put_fat.part.0+0xa2>
 800f178:	4620      	mov	r0, r4
 800f17a:	f7ff ff77 	bl	800f06c <move_window.part.0>
			if (res != FR_OK) break;
 800f17e:	2800      	cmp	r0, #0
 800f180:	d1bb      	bne.n	800f0fa <put_fat.part.0+0x1a>
			p = fs->win + bc % SS(fs);
 800f182:	f3c8 0808 	ubfx	r8, r8, #0, #9
 800f186:	44c8      	add	r8, r9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800f188:	f3c6 1207 	ubfx	r2, r6, #4, #8
			fs->wflag = 1;
 800f18c:	2301      	movs	r3, #1
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800f18e:	f888 2000 	strb.w	r2, [r8]
			fs->wflag = 1;
 800f192:	70e3      	strb	r3, [r4, #3]
			break;
 800f194:	2000      	movs	r0, #0
}
 800f196:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800f19a:	6a41      	ldr	r1, [r0, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 800f19c:	6b03      	ldr	r3, [r0, #48]	; 0x30
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800f19e:	eb01 11d5 	add.w	r1, r1, r5, lsr #7
	if (sector != fs->winsect) {	/* Window offset changed? */
 800f1a2:	4299      	cmp	r1, r3
 800f1a4:	d003      	beq.n	800f1ae <put_fat.part.0+0xce>
 800f1a6:	f7ff ff61 	bl	800f06c <move_window.part.0>
			if (res != FR_OK) break;
 800f1aa:	2800      	cmp	r0, #0
 800f1ac:	d1a5      	bne.n	800f0fa <put_fat.part.0+0x1a>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800f1ae:	00ad      	lsls	r5, r5, #2
 800f1b0:	f405 75fe 	and.w	r5, r5, #508	; 0x1fc
 800f1b4:	f104 0134 	add.w	r1, r4, #52	; 0x34
 800f1b8:	1948      	adds	r0, r1, r5
 800f1ba:	f026 4270 	bic.w	r2, r6, #4026531840	; 0xf0000000
	rv = rv << 8 | ptr[2];
 800f1be:	8843      	ldrh	r3, [r0, #2]
	rv = rv << 8 | ptr[0];
 800f1c0:	041b      	lsls	r3, r3, #16
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800f1c2:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800f1c6:	4313      	orrs	r3, r2
	*ptr++ = (BYTE)val; val >>= 8;
 800f1c8:	554b      	strb	r3, [r1, r5]
 800f1ca:	0a1f      	lsrs	r7, r3, #8
	*ptr++ = (BYTE)val; val >>= 8;
 800f1cc:	0c1e      	lsrs	r6, r3, #16
			fs->wflag = 1;
 800f1ce:	2201      	movs	r2, #1
	*ptr++ = (BYTE)val; val >>= 8;
 800f1d0:	0e1b      	lsrs	r3, r3, #24
	*ptr++ = (BYTE)val; val >>= 8;
 800f1d2:	7047      	strb	r7, [r0, #1]
	*ptr++ = (BYTE)val; val >>= 8;
 800f1d4:	7086      	strb	r6, [r0, #2]
	*ptr++ = (BYTE)val;
 800f1d6:	70c3      	strb	r3, [r0, #3]
			fs->wflag = 1;
 800f1d8:	70e2      	strb	r2, [r4, #3]
			break;
 800f1da:	2000      	movs	r0, #0
}
 800f1dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800f1e0:	f809 6007 	strb.w	r6, [r9, r7]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800f1e4:	6a61      	ldr	r1, [r4, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 800f1e6:	6b23      	ldr	r3, [r4, #48]	; 0x30
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800f1e8:	eb01 2158 	add.w	r1, r1, r8, lsr #9
			fs->wflag = 1;
 800f1ec:	2201      	movs	r2, #1
	if (sector != fs->winsect) {	/* Window offset changed? */
 800f1ee:	4299      	cmp	r1, r3
			fs->wflag = 1;
 800f1f0:	70e2      	strb	r2, [r4, #3]
	if (sector != fs->winsect) {	/* Window offset changed? */
 800f1f2:	d005      	beq.n	800f200 <put_fat.part.0+0x120>
 800f1f4:	4620      	mov	r0, r4
 800f1f6:	f7ff ff39 	bl	800f06c <move_window.part.0>
			if (res != FR_OK) break;
 800f1fa:	2800      	cmp	r0, #0
 800f1fc:	f47f af7d 	bne.w	800f0fa <put_fat.part.0+0x1a>
			p = fs->win + bc % SS(fs);
 800f200:	f3c8 0808 	ubfx	r8, r8, #0, #9
 800f204:	44c8      	add	r8, r9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800f206:	f3c6 2203 	ubfx	r2, r6, #8, #4
 800f20a:	f898 1000 	ldrb.w	r1, [r8]
 800f20e:	f021 060f 	bic.w	r6, r1, #15
 800f212:	4332      	orrs	r2, r6
 800f214:	e7ba      	b.n	800f18c <put_fat.part.0+0xac>
 800f216:	bf00      	nop

0800f218 <get_fat.isra.0>:
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800f218:	2901      	cmp	r1, #1
 800f21a:	d90e      	bls.n	800f23a <get_fat.isra.0+0x22>
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
 800f21c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800f21e:	6983      	ldr	r3, [r0, #24]
 800f220:	4299      	cmp	r1, r3
 800f222:	460c      	mov	r4, r1
 800f224:	4605      	mov	r5, r0
 800f226:	d206      	bcs.n	800f236 <get_fat.isra.0+0x1e>
		switch (fs->fs_type) {
 800f228:	7803      	ldrb	r3, [r0, #0]
 800f22a:	2b02      	cmp	r3, #2
 800f22c:	d046      	beq.n	800f2bc <get_fat.isra.0+0xa4>
 800f22e:	2b03      	cmp	r3, #3
 800f230:	d02c      	beq.n	800f28c <get_fat.isra.0+0x74>
 800f232:	2b01      	cmp	r3, #1
 800f234:	d003      	beq.n	800f23e <get_fat.isra.0+0x26>
 800f236:	2001      	movs	r0, #1
}
 800f238:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		val = 1;	/* Internal error */
 800f23a:	2001      	movs	r0, #1
}
 800f23c:	4770      	bx	lr
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800f23e:	6a43      	ldr	r3, [r0, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 800f240:	6b02      	ldr	r2, [r0, #48]	; 0x30
			bc = (UINT)clst; bc += bc / 2;
 800f242:	eb01 0751 	add.w	r7, r1, r1, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800f246:	eb03 2157 	add.w	r1, r3, r7, lsr #9
	if (sector != fs->winsect) {	/* Window offset changed? */
 800f24a:	4291      	cmp	r1, r2
 800f24c:	d005      	beq.n	800f25a <get_fat.isra.0+0x42>
 800f24e:	f7ff ff0d 	bl	800f06c <move_window.part.0>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800f252:	2800      	cmp	r0, #0
 800f254:	d13b      	bne.n	800f2ce <get_fat.isra.0+0xb6>
 800f256:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800f258:	6b2a      	ldr	r2, [r5, #48]	; 0x30
			wc = fs->win[bc++ % SS(fs)];
 800f25a:	f3c7 0008 	ubfx	r0, r7, #0, #9
 800f25e:	3701      	adds	r7, #1
 800f260:	4428      	add	r0, r5
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800f262:	eb03 2157 	add.w	r1, r3, r7, lsr #9
	if (sector != fs->winsect) {	/* Window offset changed? */
 800f266:	4291      	cmp	r1, r2
			wc = fs->win[bc++ % SS(fs)];
 800f268:	f890 6034 	ldrb.w	r6, [r0, #52]	; 0x34
	if (sector != fs->winsect) {	/* Window offset changed? */
 800f26c:	d003      	beq.n	800f276 <get_fat.isra.0+0x5e>
 800f26e:	4628      	mov	r0, r5
 800f270:	f7ff fefc 	bl	800f06c <move_window.part.0>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800f274:	bb58      	cbnz	r0, 800f2ce <get_fat.isra.0+0xb6>
			wc |= fs->win[bc % SS(fs)] << 8;
 800f276:	f3c7 0708 	ubfx	r7, r7, #0, #9
 800f27a:	443d      	add	r5, r7
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800f27c:	07e3      	lsls	r3, r4, #31
			wc |= fs->win[bc % SS(fs)] << 8;
 800f27e:	f895 0034 	ldrb.w	r0, [r5, #52]	; 0x34
 800f282:	ea46 2000 	orr.w	r0, r6, r0, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800f286:	d52f      	bpl.n	800f2e8 <get_fat.isra.0+0xd0>
 800f288:	0900      	lsrs	r0, r0, #4
}
 800f28a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800f28c:	6a41      	ldr	r1, [r0, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 800f28e:	6b03      	ldr	r3, [r0, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800f290:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
	if (sector != fs->winsect) {	/* Window offset changed? */
 800f294:	4299      	cmp	r1, r3
 800f296:	d002      	beq.n	800f29e <get_fat.isra.0+0x86>
 800f298:	f7ff fee8 	bl	800f06c <move_window.part.0>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800f29c:	b9b8      	cbnz	r0, 800f2ce <get_fat.isra.0+0xb6>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800f29e:	00a4      	lsls	r4, r4, #2
 800f2a0:	f404 74fe 	and.w	r4, r4, #508	; 0x1fc
 800f2a4:	3534      	adds	r5, #52	; 0x34
 800f2a6:	192a      	adds	r2, r5, r4
	rv = rv << 8 | ptr[0];
 800f2a8:	5d28      	ldrb	r0, [r5, r4]
	rv = rv << 8 | ptr[2];
 800f2aa:	8851      	ldrh	r1, [r2, #2]
	rv = rv << 8 | ptr[1];
 800f2ac:	7853      	ldrb	r3, [r2, #1]
 800f2ae:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	rv = rv << 8 | ptr[0];
 800f2b2:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800f2b6:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
}
 800f2ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800f2bc:	6a41      	ldr	r1, [r0, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 800f2be:	6b03      	ldr	r3, [r0, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800f2c0:	eb01 2114 	add.w	r1, r1, r4, lsr #8
	if (sector != fs->winsect) {	/* Window offset changed? */
 800f2c4:	4299      	cmp	r1, r3
 800f2c6:	d005      	beq.n	800f2d4 <get_fat.isra.0+0xbc>
 800f2c8:	f7ff fed0 	bl	800f06c <move_window.part.0>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800f2cc:	b110      	cbz	r0, 800f2d4 <get_fat.isra.0+0xbc>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800f2ce:	f04f 30ff 	mov.w	r0, #4294967295
}
 800f2d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800f2d4:	0064      	lsls	r4, r4, #1
 800f2d6:	f404 74ff 	and.w	r4, r4, #510	; 0x1fe
 800f2da:	3534      	adds	r5, #52	; 0x34
 800f2dc:	192b      	adds	r3, r5, r4
	rv = rv << 8 | ptr[0];
 800f2de:	5d28      	ldrb	r0, [r5, r4]
 800f2e0:	785b      	ldrb	r3, [r3, #1]
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800f2e2:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
}
 800f2e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800f2e8:	f3c0 000b 	ubfx	r0, r0, #0, #12
}
 800f2ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f2ee:	bf00      	nop

0800f2f0 <dir_next.constprop.0>:
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800f2f0:	69c3      	ldr	r3, [r0, #28]
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
 800f2f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800f2f6:	6945      	ldr	r5, [r0, #20]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800f2f8:	b37b      	cbz	r3, 800f35a <dir_next.constprop.0+0x6a>
 800f2fa:	3520      	adds	r5, #32
 800f2fc:	f5b5 1f00 	cmp.w	r5, #2097152	; 0x200000
 800f300:	d22b      	bcs.n	800f35a <dir_next.constprop.0+0x6a>
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800f302:	f3c5 0708 	ubfx	r7, r5, #0, #9
	FATFS *fs = dp->obj.fs;
 800f306:	6806      	ldr	r6, [r0, #0]
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800f308:	4604      	mov	r4, r0
 800f30a:	b137      	cbz	r7, 800f31a <dir_next.constprop.0+0x2a>
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800f30c:	3634      	adds	r6, #52	; 0x34
 800f30e:	443e      	add	r6, r7
 800f310:	6226      	str	r6, [r4, #32]
	dp->dptr = ofs;						/* Current entry */
 800f312:	6165      	str	r5, [r4, #20]
	return FR_OK;
 800f314:	2000      	movs	r0, #0
}
 800f316:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (!dp->clust) {		/* Static table */
 800f31a:	6981      	ldr	r1, [r0, #24]
		dp->sect++;				/* Next sector */
 800f31c:	3301      	adds	r3, #1
 800f31e:	61c3      	str	r3, [r0, #28]
		if (!dp->clust) {		/* Static table */
 800f320:	b1f1      	cbz	r1, 800f360 <dir_next.constprop.0+0x70>
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800f322:	8973      	ldrh	r3, [r6, #10]
 800f324:	3b01      	subs	r3, #1
 800f326:	ea13 2855 	ands.w	r8, r3, r5, lsr #9
 800f32a:	d1ef      	bne.n	800f30c <dir_next.constprop.0+0x1c>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800f32c:	4630      	mov	r0, r6
 800f32e:	f7ff ff73 	bl	800f218 <get_fat.isra.0>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800f332:	2801      	cmp	r0, #1
 800f334:	d91c      	bls.n	800f370 <dir_next.constprop.0+0x80>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800f336:	1c43      	adds	r3, r0, #1
 800f338:	d01c      	beq.n	800f374 <dir_next.constprop.0+0x84>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800f33a:	69b3      	ldr	r3, [r6, #24]
 800f33c:	4298      	cmp	r0, r3
 800f33e:	d213      	bcs.n	800f368 <dir_next.constprop.0+0x78>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800f340:	3b02      	subs	r3, #2
	clst -= 2;
 800f342:	1e82      	subs	r2, r0, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800f344:	429a      	cmp	r2, r3
				dp->clust = clst;		/* Initialize data for new cluster */
 800f346:	61a0      	str	r0, [r4, #24]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800f348:	d204      	bcs.n	800f354 <dir_next.constprop.0+0x64>
	return clst * fs->csize + fs->database;
 800f34a:	f8b6 800a 	ldrh.w	r8, [r6, #10]
 800f34e:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 800f350:	fb02 3808 	mla	r8, r2, r8, r3
				dp->sect = clust2sect(fs, clst);
 800f354:	f8c4 801c 	str.w	r8, [r4, #28]
 800f358:	e7d8      	b.n	800f30c <dir_next.constprop.0+0x1c>
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800f35a:	2004      	movs	r0, #4
}
 800f35c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800f360:	8933      	ldrh	r3, [r6, #8]
 800f362:	ebb3 1f55 	cmp.w	r3, r5, lsr #5
 800f366:	d8d1      	bhi.n	800f30c <dir_next.constprop.0+0x1c>
				dp->sect = 0; return FR_NO_FILE;
 800f368:	2300      	movs	r3, #0
 800f36a:	61e3      	str	r3, [r4, #28]
 800f36c:	2004      	movs	r0, #4
 800f36e:	e7d2      	b.n	800f316 <dir_next.constprop.0+0x26>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800f370:	2002      	movs	r0, #2
 800f372:	e7d0      	b.n	800f316 <dir_next.constprop.0+0x26>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800f374:	2001      	movs	r0, #1
 800f376:	e7ce      	b.n	800f316 <dir_next.constprop.0+0x26>

0800f378 <dir_read.constprop.0>:
FRESULT dir_read (
 800f378:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	while (dp->sect) {
 800f37c:	69c6      	ldr	r6, [r0, #28]
	FATFS *fs = dp->obj.fs;
 800f37e:	6807      	ldr	r7, [r0, #0]
FRESULT dir_read (
 800f380:	b083      	sub	sp, #12
 800f382:	4604      	mov	r4, r0
	while (dp->sect) {
 800f384:	2e00      	cmp	r6, #0
 800f386:	d05c      	beq.n	800f442 <dir_read.constprop.0+0xca>
	BYTE ord = 0xFF, sum = 0xFF;
 800f388:	f04f 0aff 	mov.w	sl, #255	; 0xff
 800f38c:	46d1      	mov	r9, sl
 800f38e:	f107 0834 	add.w	r8, r7, #52	; 0x34
	if (sector != fs->winsect) {	/* Window offset changed? */
 800f392:	6b3d      	ldr	r5, [r7, #48]	; 0x30
 800f394:	42b5      	cmp	r5, r6
 800f396:	d013      	beq.n	800f3c0 <dir_read.constprop.0+0x48>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800f398:	78fb      	ldrb	r3, [r7, #3]
 800f39a:	2b00      	cmp	r3, #0
 800f39c:	d158      	bne.n	800f450 <dir_read.constprop.0+0xd8>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800f39e:	7878      	ldrb	r0, [r7, #1]
 800f3a0:	2301      	movs	r3, #1
 800f3a2:	4632      	mov	r2, r6
 800f3a4:	4641      	mov	r1, r8
 800f3a6:	f7ff fd43 	bl	800ee30 <disk_read>
 800f3aa:	b140      	cbz	r0, 800f3be <dir_read.constprop.0+0x46>
			fs->winsect = sector;
 800f3ac:	f04f 33ff 	mov.w	r3, #4294967295
 800f3b0:	633b      	str	r3, [r7, #48]	; 0x30
				res = FR_DISK_ERR;
 800f3b2:	2001      	movs	r0, #1
	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800f3b4:	2300      	movs	r3, #0
 800f3b6:	61e3      	str	r3, [r4, #28]
}
 800f3b8:	b003      	add	sp, #12
 800f3ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			fs->winsect = sector;
 800f3be:	633e      	str	r6, [r7, #48]	; 0x30
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800f3c0:	6a21      	ldr	r1, [r4, #32]
 800f3c2:	780a      	ldrb	r2, [r1, #0]
		if (c == 0) {
 800f3c4:	2a00      	cmp	r2, #0
 800f3c6:	d03c      	beq.n	800f442 <dir_read.constprop.0+0xca>
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800f3c8:	7acb      	ldrb	r3, [r1, #11]
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 800f3ca:	2ae5      	cmp	r2, #229	; 0xe5
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800f3cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f3d0:	71a3      	strb	r3, [r4, #6]
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 800f3d2:	d005      	beq.n	800f3e0 <dir_read.constprop.0+0x68>
 800f3d4:	2a2e      	cmp	r2, #46	; 0x2e
 800f3d6:	d003      	beq.n	800f3e0 <dir_read.constprop.0+0x68>
 800f3d8:	f023 0020 	bic.w	r0, r3, #32
 800f3dc:	2808      	cmp	r0, #8
 800f3de:	d159      	bne.n	800f494 <dir_read.constprop.0+0x11c>
 800f3e0:	6965      	ldr	r5, [r4, #20]
				ord = 0xFF;
 800f3e2:	f04f 09ff 	mov.w	r9, #255	; 0xff
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800f3e6:	69e6      	ldr	r6, [r4, #28]
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800f3e8:	3520      	adds	r5, #32
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800f3ea:	b356      	cbz	r6, 800f442 <dir_read.constprop.0+0xca>
 800f3ec:	f5b5 1f00 	cmp.w	r5, #2097152	; 0x200000
 800f3f0:	d227      	bcs.n	800f442 <dir_read.constprop.0+0xca>
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800f3f2:	f3c5 0208 	ubfx	r2, r5, #0, #9
	FATFS *fs = dp->obj.fs;
 800f3f6:	6823      	ldr	r3, [r4, #0]
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800f3f8:	bb2a      	cbnz	r2, 800f446 <dir_read.constprop.0+0xce>
		if (!dp->clust) {		/* Static table */
 800f3fa:	69a1      	ldr	r1, [r4, #24]
		dp->sect++;				/* Next sector */
 800f3fc:	3601      	adds	r6, #1
 800f3fe:	61e6      	str	r6, [r4, #28]
		if (!dp->clust) {		/* Static table */
 800f400:	b961      	cbnz	r1, 800f41c <dir_read.constprop.0+0xa4>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800f402:	891a      	ldrh	r2, [r3, #8]
 800f404:	ebb2 1f55 	cmp.w	r2, r5, lsr #5
 800f408:	d91b      	bls.n	800f442 <dir_read.constprop.0+0xca>
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800f40a:	3334      	adds	r3, #52	; 0x34
 800f40c:	6223      	str	r3, [r4, #32]
	dp->dptr = ofs;						/* Current entry */
 800f40e:	6165      	str	r5, [r4, #20]
	while (dp->sect) {
 800f410:	2e00      	cmp	r6, #0
 800f412:	d1be      	bne.n	800f392 <dir_read.constprop.0+0x1a>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 800f414:	2000      	movs	r0, #0
}
 800f416:	b003      	add	sp, #12
 800f418:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800f41c:	895a      	ldrh	r2, [r3, #10]
 800f41e:	3a01      	subs	r2, #1
 800f420:	ea12 2b55 	ands.w	fp, r2, r5, lsr #9
 800f424:	d1f1      	bne.n	800f40a <dir_read.constprop.0+0x92>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800f426:	4618      	mov	r0, r3
 800f428:	9301      	str	r3, [sp, #4]
 800f42a:	f7ff fef5 	bl	800f218 <get_fat.isra.0>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800f42e:	2801      	cmp	r0, #1
 800f430:	f240 80e9 	bls.w	800f606 <dir_read.constprop.0+0x28e>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800f434:	1c43      	adds	r3, r0, #1
 800f436:	d0bc      	beq.n	800f3b2 <dir_read.constprop.0+0x3a>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800f438:	9b01      	ldr	r3, [sp, #4]
 800f43a:	699a      	ldr	r2, [r3, #24]
 800f43c:	4290      	cmp	r0, r2
 800f43e:	f0c0 80d7 	bcc.w	800f5f0 <dir_read.constprop.0+0x278>
	FRESULT res = FR_NO_FILE;
 800f442:	2004      	movs	r0, #4
 800f444:	e7b6      	b.n	800f3b4 <dir_read.constprop.0+0x3c>
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800f446:	3334      	adds	r3, #52	; 0x34
 800f448:	441a      	add	r2, r3
 800f44a:	6222      	str	r2, [r4, #32]
	dp->dptr = ofs;						/* Current entry */
 800f44c:	6165      	str	r5, [r4, #20]
	while (dp->sect) {
 800f44e:	e7a0      	b.n	800f392 <dir_read.constprop.0+0x1a>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800f450:	7878      	ldrb	r0, [r7, #1]
 800f452:	2301      	movs	r3, #1
 800f454:	462a      	mov	r2, r5
 800f456:	4641      	mov	r1, r8
 800f458:	f7ff fcf8 	bl	800ee4c <disk_write>
 800f45c:	2800      	cmp	r0, #0
 800f45e:	d1a8      	bne.n	800f3b2 <dir_read.constprop.0+0x3a>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800f460:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f462:	69fb      	ldr	r3, [r7, #28]
			fs->wflag = 0;
 800f464:	70f8      	strb	r0, [r7, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800f466:	1aaa      	subs	r2, r5, r2
 800f468:	429a      	cmp	r2, r3
 800f46a:	d298      	bcs.n	800f39e <dir_read.constprop.0+0x26>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800f46c:	f897 b002 	ldrb.w	fp, [r7, #2]
 800f470:	f1bb 0f01 	cmp.w	fp, #1
 800f474:	d801      	bhi.n	800f47a <dir_read.constprop.0+0x102>
 800f476:	e792      	b.n	800f39e <dir_read.constprop.0+0x26>
 800f478:	69fb      	ldr	r3, [r7, #28]
					disk_write(fs->drv, fs->win, wsect, 1);
 800f47a:	7878      	ldrb	r0, [r7, #1]
					wsect += fs->fsize;
 800f47c:	441d      	add	r5, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800f47e:	f10b 3bff 	add.w	fp, fp, #4294967295
					disk_write(fs->drv, fs->win, wsect, 1);
 800f482:	462a      	mov	r2, r5
 800f484:	2301      	movs	r3, #1
 800f486:	4641      	mov	r1, r8
 800f488:	f7ff fce0 	bl	800ee4c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800f48c:	f1bb 0f01 	cmp.w	fp, #1
 800f490:	d1f2      	bne.n	800f478 <dir_read.constprop.0+0x100>
 800f492:	e784      	b.n	800f39e <dir_read.constprop.0+0x26>
				if (a == AM_LFN) {			/* An LFN entry is found */
 800f494:	2b0f      	cmp	r3, #15
 800f496:	f040 8160 	bne.w	800f75a <dir_read.constprop.0+0x3e2>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 800f49a:	0650      	lsls	r0, r2, #25
						dp->blk_ofs = dp->dptr;
 800f49c:	6965      	ldr	r5, [r4, #20]
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 800f49e:	f140 80a3 	bpl.w	800f5e8 <dir_read.constprop.0+0x270>
						sum = dp->dir[LDIR_Chksum];
 800f4a2:	f891 a00d 	ldrb.w	sl, [r1, #13]
						dp->blk_ofs = dp->dptr;
 800f4a6:	6325      	str	r5, [r4, #48]	; 0x30
						c &= (BYTE)~LLEF; ord = c;
 800f4a8:	f002 09bf 	and.w	r9, r2, #191	; 0xbf
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800f4ac:	7b4b      	ldrb	r3, [r1, #13]
 800f4ae:	4553      	cmp	r3, sl
 800f4b0:	d197      	bne.n	800f3e2 <dir_read.constprop.0+0x6a>
	rv = rv << 8 | ptr[0];
 800f4b2:	7eca      	ldrb	r2, [r1, #27]
 800f4b4:	7e8b      	ldrb	r3, [r1, #26]
	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 800f4b6:	ea53 2302 	orrs.w	r3, r3, r2, lsl #8
 800f4ba:	d192      	bne.n	800f3e2 <dir_read.constprop.0+0x6a>
	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 800f4bc:	780b      	ldrb	r3, [r1, #0]
	rv = rv << 8 | ptr[0];
 800f4be:	788a      	ldrb	r2, [r1, #2]
 800f4c0:	7848      	ldrb	r0, [r1, #1]
	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 800f4c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f4c6:	3b01      	subs	r3, #1
 800f4c8:	eb03 0643 	add.w	r6, r3, r3, lsl #1
 800f4cc:	eb03 0386 	add.w	r3, r3, r6, lsl #2
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800f4d0:	2bfe      	cmp	r3, #254	; 0xfe
	rv = rv << 8 | ptr[0];
 800f4d2:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800f4d6:	d884      	bhi.n	800f3e2 <dir_read.constprop.0+0x6a>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800f4d8:	f8d7 c00c 	ldr.w	ip, [r7, #12]
			lfnbuf[i++] = wc = uc;			/* Store it */
 800f4dc:	f82c 0013 	strh.w	r0, [ip, r3, lsl #1]
	rv = rv << 8 | ptr[0];
 800f4e0:	790a      	ldrb	r2, [r1, #4]
 800f4e2:	78ce      	ldrb	r6, [r1, #3]
 800f4e4:	ea46 2602 	orr.w	r6, r6, r2, lsl #8
			lfnbuf[i++] = wc = uc;			/* Store it */
 800f4e8:	1c5a      	adds	r2, r3, #1
		if (wc) {
 800f4ea:	2800      	cmp	r0, #0
 800f4ec:	f040 8092 	bne.w	800f614 <dir_read.constprop.0+0x29c>
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800f4f0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f4f4:	429e      	cmp	r6, r3
 800f4f6:	f47f af74 	bne.w	800f3e2 <dir_read.constprop.0+0x6a>
	rv = rv << 8 | ptr[0];
 800f4fa:	798b      	ldrb	r3, [r1, #6]
 800f4fc:	f891 e005 	ldrb.w	lr, [r1, #5]
 800f500:	ea4e 2e03 	orr.w	lr, lr, r3, lsl #8
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800f504:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f508:	459e      	cmp	lr, r3
 800f50a:	f47f af6a 	bne.w	800f3e2 <dir_read.constprop.0+0x6a>
	rv = rv << 8 | ptr[0];
 800f50e:	7a0b      	ldrb	r3, [r1, #8]
 800f510:	79ce      	ldrb	r6, [r1, #7]
 800f512:	ea46 2603 	orr.w	r6, r6, r3, lsl #8
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800f516:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f51a:	429e      	cmp	r6, r3
 800f51c:	f47f af61 	bne.w	800f3e2 <dir_read.constprop.0+0x6a>
	rv = rv << 8 | ptr[0];
 800f520:	7a8b      	ldrb	r3, [r1, #10]
 800f522:	f891 e009 	ldrb.w	lr, [r1, #9]
 800f526:	ea4e 2e03 	orr.w	lr, lr, r3, lsl #8
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800f52a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f52e:	459e      	cmp	lr, r3
 800f530:	f47f af57 	bne.w	800f3e2 <dir_read.constprop.0+0x6a>
	rv = rv << 8 | ptr[0];
 800f534:	7bcb      	ldrb	r3, [r1, #15]
 800f536:	7b8e      	ldrb	r6, [r1, #14]
 800f538:	ea46 2603 	orr.w	r6, r6, r3, lsl #8
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800f53c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f540:	429e      	cmp	r6, r3
 800f542:	f47f af4e 	bne.w	800f3e2 <dir_read.constprop.0+0x6a>
	rv = rv << 8 | ptr[0];
 800f546:	7c4b      	ldrb	r3, [r1, #17]
 800f548:	f891 e010 	ldrb.w	lr, [r1, #16]
 800f54c:	ea4e 2e03 	orr.w	lr, lr, r3, lsl #8
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800f550:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f554:	459e      	cmp	lr, r3
 800f556:	f47f af44 	bne.w	800f3e2 <dir_read.constprop.0+0x6a>
	rv = rv << 8 | ptr[0];
 800f55a:	7ccb      	ldrb	r3, [r1, #19]
 800f55c:	7c8e      	ldrb	r6, [r1, #18]
 800f55e:	ea46 2603 	orr.w	r6, r6, r3, lsl #8
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800f562:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f566:	429e      	cmp	r6, r3
 800f568:	f47f af3b 	bne.w	800f3e2 <dir_read.constprop.0+0x6a>
	rv = rv << 8 | ptr[0];
 800f56c:	7d4b      	ldrb	r3, [r1, #21]
 800f56e:	f891 e014 	ldrb.w	lr, [r1, #20]
 800f572:	ea4e 2e03 	orr.w	lr, lr, r3, lsl #8
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800f576:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f57a:	459e      	cmp	lr, r3
 800f57c:	f47f af31 	bne.w	800f3e2 <dir_read.constprop.0+0x6a>
	rv = rv << 8 | ptr[0];
 800f580:	7dcb      	ldrb	r3, [r1, #23]
 800f582:	7d8e      	ldrb	r6, [r1, #22]
 800f584:	ea46 2603 	orr.w	r6, r6, r3, lsl #8
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800f588:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f58c:	429e      	cmp	r6, r3
 800f58e:	f47f af28 	bne.w	800f3e2 <dir_read.constprop.0+0x6a>
	rv = rv << 8 | ptr[0];
 800f592:	7e4b      	ldrb	r3, [r1, #25]
 800f594:	f891 e018 	ldrb.w	lr, [r1, #24]
 800f598:	ea4e 2e03 	orr.w	lr, lr, r3, lsl #8
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800f59c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f5a0:	459e      	cmp	lr, r3
 800f5a2:	f47f af1e 	bne.w	800f3e2 <dir_read.constprop.0+0x6a>
	rv = rv << 8 | ptr[0];
 800f5a6:	7f4b      	ldrb	r3, [r1, #29]
 800f5a8:	7f0e      	ldrb	r6, [r1, #28]
 800f5aa:	ea46 2603 	orr.w	r6, r6, r3, lsl #8
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800f5ae:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f5b2:	429e      	cmp	r6, r3
 800f5b4:	f47f af15 	bne.w	800f3e2 <dir_read.constprop.0+0x6a>
	rv = rv << 8 | ptr[0];
 800f5b8:	7fcb      	ldrb	r3, [r1, #31]
 800f5ba:	f891 e01e 	ldrb.w	lr, [r1, #30]
 800f5be:	ea4e 2e03 	orr.w	lr, lr, r3, lsl #8
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800f5c2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f5c6:	459e      	cmp	lr, r3
 800f5c8:	f47f af0b 	bne.w	800f3e2 <dir_read.constprop.0+0x6a>
	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 800f5cc:	780b      	ldrb	r3, [r1, #0]
 800f5ce:	0659      	lsls	r1, r3, #25
 800f5d0:	d505      	bpl.n	800f5de <dir_read.constprop.0+0x266>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 800f5d2:	2aff      	cmp	r2, #255	; 0xff
 800f5d4:	f000 8111 	beq.w	800f7fa <dir_read.constprop.0+0x482>
		lfnbuf[i] = 0;
 800f5d8:	2300      	movs	r3, #0
 800f5da:	f82c 3012 	strh.w	r3, [ip, r2, lsl #1]
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800f5de:	f109 39ff 	add.w	r9, r9, #4294967295
 800f5e2:	fa5f f989 	uxtb.w	r9, r9
 800f5e6:	e6fe      	b.n	800f3e6 <dir_read.constprop.0+0x6e>
 800f5e8:	454a      	cmp	r2, r9
 800f5ea:	f47f aefa 	bne.w	800f3e2 <dir_read.constprop.0+0x6a>
 800f5ee:	e75d      	b.n	800f4ac <dir_read.constprop.0+0x134>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800f5f0:	3a02      	subs	r2, #2
	clst -= 2;
 800f5f2:	1e81      	subs	r1, r0, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800f5f4:	4291      	cmp	r1, r2
				dp->clust = clst;		/* Initialize data for new cluster */
 800f5f6:	61a0      	str	r0, [r4, #24]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800f5f8:	d207      	bcs.n	800f60a <dir_read.constprop.0+0x292>
	return clst * fs->csize + fs->database;
 800f5fa:	895e      	ldrh	r6, [r3, #10]
 800f5fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f5fe:	fb01 2606 	mla	r6, r1, r6, r2
				dp->sect = clust2sect(fs, clst);
 800f602:	61e6      	str	r6, [r4, #28]
 800f604:	e701      	b.n	800f40a <dir_read.constprop.0+0x92>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800f606:	2002      	movs	r0, #2
 800f608:	e6d4      	b.n	800f3b4 <dir_read.constprop.0+0x3c>
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800f60a:	3334      	adds	r3, #52	; 0x34
				dp->sect = clust2sect(fs, clst);
 800f60c:	e9c4 b307 	strd	fp, r3, [r4, #28]
	dp->dptr = ofs;						/* Current entry */
 800f610:	6165      	str	r5, [r4, #20]
	while (dp->sect) {
 800f612:	e6ff      	b.n	800f414 <dir_read.constprop.0+0x9c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800f614:	2aff      	cmp	r2, #255	; 0xff
 800f616:	f000 80f0 	beq.w	800f7fa <dir_read.constprop.0+0x482>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800f61a:	f82c 6012 	strh.w	r6, [ip, r2, lsl #1]
	rv = rv << 8 | ptr[0];
 800f61e:	f891 b006 	ldrb.w	fp, [r1, #6]
 800f622:	f891 e005 	ldrb.w	lr, [r1, #5]
			lfnbuf[i++] = wc = uc;			/* Store it */
 800f626:	0050      	lsls	r0, r2, #1
	rv = rv << 8 | ptr[0];
 800f628:	ea4e 2e0b 	orr.w	lr, lr, fp, lsl #8
			lfnbuf[i++] = wc = uc;			/* Store it */
 800f62c:	1c9a      	adds	r2, r3, #2
		if (wc) {
 800f62e:	2e00      	cmp	r6, #0
 800f630:	f43f af68 	beq.w	800f504 <dir_read.constprop.0+0x18c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800f634:	2aff      	cmp	r2, #255	; 0xff
 800f636:	f000 80e0 	beq.w	800f7fa <dir_read.constprop.0+0x482>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800f63a:	4460      	add	r0, ip
 800f63c:	1cda      	adds	r2, r3, #3
 800f63e:	f8a0 e002 	strh.w	lr, [r0, #2]
	rv = rv << 8 | ptr[0];
 800f642:	f891 b008 	ldrb.w	fp, [r1, #8]
 800f646:	79ce      	ldrb	r6, [r1, #7]
 800f648:	ea46 260b 	orr.w	r6, r6, fp, lsl #8
		if (wc) {
 800f64c:	f1be 0f00 	cmp.w	lr, #0
 800f650:	f43f af61 	beq.w	800f516 <dir_read.constprop.0+0x19e>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800f654:	2aff      	cmp	r2, #255	; 0xff
 800f656:	f000 80d0 	beq.w	800f7fa <dir_read.constprop.0+0x482>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800f65a:	8086      	strh	r6, [r0, #4]
	rv = rv << 8 | ptr[0];
 800f65c:	7a8a      	ldrb	r2, [r1, #10]
 800f65e:	f891 e009 	ldrb.w	lr, [r1, #9]
 800f662:	ea4e 2e02 	orr.w	lr, lr, r2, lsl #8
			lfnbuf[i++] = wc = uc;			/* Store it */
 800f666:	1d1a      	adds	r2, r3, #4
		if (wc) {
 800f668:	2e00      	cmp	r6, #0
 800f66a:	f43f af5e 	beq.w	800f52a <dir_read.constprop.0+0x1b2>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800f66e:	2aff      	cmp	r2, #255	; 0xff
 800f670:	f000 80c3 	beq.w	800f7fa <dir_read.constprop.0+0x482>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800f674:	f8a0 e006 	strh.w	lr, [r0, #6]
	rv = rv << 8 | ptr[0];
 800f678:	7bca      	ldrb	r2, [r1, #15]
 800f67a:	7b8e      	ldrb	r6, [r1, #14]
 800f67c:	ea46 2602 	orr.w	r6, r6, r2, lsl #8
			lfnbuf[i++] = wc = uc;			/* Store it */
 800f680:	1d5a      	adds	r2, r3, #5
		if (wc) {
 800f682:	f1be 0f00 	cmp.w	lr, #0
 800f686:	f43f af59 	beq.w	800f53c <dir_read.constprop.0+0x1c4>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800f68a:	2aff      	cmp	r2, #255	; 0xff
 800f68c:	f000 80b5 	beq.w	800f7fa <dir_read.constprop.0+0x482>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800f690:	8106      	strh	r6, [r0, #8]
	rv = rv << 8 | ptr[0];
 800f692:	7c4a      	ldrb	r2, [r1, #17]
 800f694:	f891 e010 	ldrb.w	lr, [r1, #16]
 800f698:	ea4e 2e02 	orr.w	lr, lr, r2, lsl #8
			lfnbuf[i++] = wc = uc;			/* Store it */
 800f69c:	1d9a      	adds	r2, r3, #6
		if (wc) {
 800f69e:	2e00      	cmp	r6, #0
 800f6a0:	f43f af56 	beq.w	800f550 <dir_read.constprop.0+0x1d8>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800f6a4:	2aff      	cmp	r2, #255	; 0xff
 800f6a6:	f000 80a8 	beq.w	800f7fa <dir_read.constprop.0+0x482>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800f6aa:	f8a0 e00a 	strh.w	lr, [r0, #10]
	rv = rv << 8 | ptr[0];
 800f6ae:	7cca      	ldrb	r2, [r1, #19]
 800f6b0:	7c8e      	ldrb	r6, [r1, #18]
 800f6b2:	ea46 2602 	orr.w	r6, r6, r2, lsl #8
			lfnbuf[i++] = wc = uc;			/* Store it */
 800f6b6:	1dda      	adds	r2, r3, #7
		if (wc) {
 800f6b8:	f1be 0f00 	cmp.w	lr, #0
 800f6bc:	f43f af51 	beq.w	800f562 <dir_read.constprop.0+0x1ea>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800f6c0:	2aff      	cmp	r2, #255	; 0xff
 800f6c2:	f000 809a 	beq.w	800f7fa <dir_read.constprop.0+0x482>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800f6c6:	8186      	strh	r6, [r0, #12]
	rv = rv << 8 | ptr[0];
 800f6c8:	7d4a      	ldrb	r2, [r1, #21]
 800f6ca:	f891 e014 	ldrb.w	lr, [r1, #20]
 800f6ce:	ea4e 2e02 	orr.w	lr, lr, r2, lsl #8
			lfnbuf[i++] = wc = uc;			/* Store it */
 800f6d2:	f103 0208 	add.w	r2, r3, #8
		if (wc) {
 800f6d6:	2e00      	cmp	r6, #0
 800f6d8:	f43f af4d 	beq.w	800f576 <dir_read.constprop.0+0x1fe>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800f6dc:	2aff      	cmp	r2, #255	; 0xff
 800f6de:	f000 808c 	beq.w	800f7fa <dir_read.constprop.0+0x482>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800f6e2:	f8a0 e00e 	strh.w	lr, [r0, #14]
	rv = rv << 8 | ptr[0];
 800f6e6:	7dca      	ldrb	r2, [r1, #23]
 800f6e8:	7d8e      	ldrb	r6, [r1, #22]
 800f6ea:	ea46 2602 	orr.w	r6, r6, r2, lsl #8
			lfnbuf[i++] = wc = uc;			/* Store it */
 800f6ee:	f103 0209 	add.w	r2, r3, #9
		if (wc) {
 800f6f2:	f1be 0f00 	cmp.w	lr, #0
 800f6f6:	f43f af47 	beq.w	800f588 <dir_read.constprop.0+0x210>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800f6fa:	2aff      	cmp	r2, #255	; 0xff
 800f6fc:	f43f ae71 	beq.w	800f3e2 <dir_read.constprop.0+0x6a>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800f700:	8206      	strh	r6, [r0, #16]
	rv = rv << 8 | ptr[0];
 800f702:	7e4a      	ldrb	r2, [r1, #25]
 800f704:	f891 e018 	ldrb.w	lr, [r1, #24]
 800f708:	ea4e 2e02 	orr.w	lr, lr, r2, lsl #8
			lfnbuf[i++] = wc = uc;			/* Store it */
 800f70c:	f103 020a 	add.w	r2, r3, #10
		if (wc) {
 800f710:	2e00      	cmp	r6, #0
 800f712:	f43f af43 	beq.w	800f59c <dir_read.constprop.0+0x224>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800f716:	2aff      	cmp	r2, #255	; 0xff
 800f718:	d06f      	beq.n	800f7fa <dir_read.constprop.0+0x482>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800f71a:	f8a0 e012 	strh.w	lr, [r0, #18]
	rv = rv << 8 | ptr[0];
 800f71e:	7f4a      	ldrb	r2, [r1, #29]
 800f720:	7f0e      	ldrb	r6, [r1, #28]
 800f722:	ea46 2602 	orr.w	r6, r6, r2, lsl #8
			lfnbuf[i++] = wc = uc;			/* Store it */
 800f726:	f103 020b 	add.w	r2, r3, #11
		if (wc) {
 800f72a:	f1be 0f00 	cmp.w	lr, #0
 800f72e:	f43f af3e 	beq.w	800f5ae <dir_read.constprop.0+0x236>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800f732:	2aff      	cmp	r2, #255	; 0xff
 800f734:	d061      	beq.n	800f7fa <dir_read.constprop.0+0x482>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800f736:	8286      	strh	r6, [r0, #20]
	rv = rv << 8 | ptr[0];
 800f738:	7fca      	ldrb	r2, [r1, #31]
 800f73a:	f891 e01e 	ldrb.w	lr, [r1, #30]
 800f73e:	ea4e 2e02 	orr.w	lr, lr, r2, lsl #8
			lfnbuf[i++] = wc = uc;			/* Store it */
 800f742:	f103 020c 	add.w	r2, r3, #12
		if (wc) {
 800f746:	2e00      	cmp	r6, #0
 800f748:	f43f af3b 	beq.w	800f5c2 <dir_read.constprop.0+0x24a>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800f74c:	2aff      	cmp	r2, #255	; 0xff
 800f74e:	d054      	beq.n	800f7fa <dir_read.constprop.0+0x482>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800f750:	f103 020d 	add.w	r2, r3, #13
 800f754:	f8a0 e016 	strh.w	lr, [r0, #22]
 800f758:	e738      	b.n	800f5cc <dir_read.constprop.0+0x254>
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 800f75a:	f1b9 0f00 	cmp.w	r9, #0
 800f75e:	d148      	bne.n	800f7f2 <dir_read.constprop.0+0x47a>
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800f760:	780a      	ldrb	r2, [r1, #0]
 800f762:	7848      	ldrb	r0, [r1, #1]
 800f764:	01d3      	lsls	r3, r2, #7
 800f766:	ea43 0352 	orr.w	r3, r3, r2, lsr #1
 800f76a:	181a      	adds	r2, r3, r0
 800f76c:	f3c2 0346 	ubfx	r3, r2, #1, #7
 800f770:	7888      	ldrb	r0, [r1, #2]
 800f772:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 800f776:	fa50 f283 	uxtab	r2, r0, r3
 800f77a:	f3c2 0346 	ubfx	r3, r2, #1, #7
 800f77e:	78c8      	ldrb	r0, [r1, #3]
 800f780:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 800f784:	fa50 f283 	uxtab	r2, r0, r3
 800f788:	f3c2 0346 	ubfx	r3, r2, #1, #7
 800f78c:	7908      	ldrb	r0, [r1, #4]
 800f78e:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 800f792:	fa50 f283 	uxtab	r2, r0, r3
 800f796:	f3c2 0346 	ubfx	r3, r2, #1, #7
 800f79a:	7948      	ldrb	r0, [r1, #5]
 800f79c:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 800f7a0:	fa50 f283 	uxtab	r2, r0, r3
 800f7a4:	f3c2 0346 	ubfx	r3, r2, #1, #7
 800f7a8:	7988      	ldrb	r0, [r1, #6]
 800f7aa:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 800f7ae:	fa50 f283 	uxtab	r2, r0, r3
 800f7b2:	f3c2 0346 	ubfx	r3, r2, #1, #7
 800f7b6:	79c8      	ldrb	r0, [r1, #7]
 800f7b8:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 800f7bc:	fa50 f283 	uxtab	r2, r0, r3
 800f7c0:	f3c2 0346 	ubfx	r3, r2, #1, #7
 800f7c4:	7a08      	ldrb	r0, [r1, #8]
 800f7c6:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 800f7ca:	fa50 f283 	uxtab	r2, r0, r3
 800f7ce:	f3c2 0346 	ubfx	r3, r2, #1, #7
 800f7d2:	7a48      	ldrb	r0, [r1, #9]
 800f7d4:	7a89      	ldrb	r1, [r1, #10]
 800f7d6:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 800f7da:	fa50 f283 	uxtab	r2, r0, r3
 800f7de:	f3c2 0346 	ubfx	r3, r2, #1, #7
 800f7e2:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 800f7e6:	fa51 f383 	uxtab	r3, r1, r3
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 800f7ea:	b2db      	uxtb	r3, r3
 800f7ec:	4553      	cmp	r3, sl
 800f7ee:	f43f ae11 	beq.w	800f414 <dir_read.constprop.0+0x9c>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 800f7f2:	f04f 33ff 	mov.w	r3, #4294967295
 800f7f6:	6323      	str	r3, [r4, #48]	; 0x30
 800f7f8:	e60c      	b.n	800f414 <dir_read.constprop.0+0x9c>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800f7fa:	4691      	mov	r9, r2
 800f7fc:	e5f3      	b.n	800f3e6 <dir_read.constprop.0+0x6e>
 800f7fe:	bf00      	nop

0800f800 <sync_fs>:
{
 800f800:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800f802:	78c3      	ldrb	r3, [r0, #3]
{
 800f804:	4604      	mov	r4, r0
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800f806:	b95b      	cbnz	r3, 800f820 <sync_fs+0x20>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800f808:	7823      	ldrb	r3, [r4, #0]
 800f80a:	2b03      	cmp	r3, #3
 800f80c:	d029      	beq.n	800f862 <sync_fs+0x62>
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800f80e:	2200      	movs	r2, #0
 800f810:	7860      	ldrb	r0, [r4, #1]
 800f812:	4611      	mov	r1, r2
 800f814:	f7ff fb28 	bl	800ee68 <disk_ioctl>
			res = FR_DISK_ERR;
 800f818:	3800      	subs	r0, #0
 800f81a:	bf18      	it	ne
 800f81c:	2001      	movne	r0, #1
}
 800f81e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		wsect = fs->winsect;	/* Current sector number */
 800f820:	6b05      	ldr	r5, [r0, #48]	; 0x30
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800f822:	7840      	ldrb	r0, [r0, #1]
 800f824:	f104 0734 	add.w	r7, r4, #52	; 0x34
 800f828:	462a      	mov	r2, r5
 800f82a:	4639      	mov	r1, r7
 800f82c:	2301      	movs	r3, #1
 800f82e:	f7ff fb0d 	bl	800ee4c <disk_write>
 800f832:	2800      	cmp	r0, #0
 800f834:	d14f      	bne.n	800f8d6 <sync_fs+0xd6>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800f836:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800f838:	69e3      	ldr	r3, [r4, #28]
			fs->wflag = 0;
 800f83a:	70e0      	strb	r0, [r4, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800f83c:	1aaa      	subs	r2, r5, r2
 800f83e:	429a      	cmp	r2, r3
 800f840:	d2e2      	bcs.n	800f808 <sync_fs+0x8>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800f842:	78a6      	ldrb	r6, [r4, #2]
 800f844:	2e01      	cmp	r6, #1
 800f846:	d801      	bhi.n	800f84c <sync_fs+0x4c>
 800f848:	e7de      	b.n	800f808 <sync_fs+0x8>
 800f84a:	69e3      	ldr	r3, [r4, #28]
					disk_write(fs->drv, fs->win, wsect, 1);
 800f84c:	7860      	ldrb	r0, [r4, #1]
					wsect += fs->fsize;
 800f84e:	441d      	add	r5, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800f850:	3e01      	subs	r6, #1
					disk_write(fs->drv, fs->win, wsect, 1);
 800f852:	462a      	mov	r2, r5
 800f854:	2301      	movs	r3, #1
 800f856:	4639      	mov	r1, r7
 800f858:	f7ff faf8 	bl	800ee4c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800f85c:	2e01      	cmp	r6, #1
 800f85e:	d1f4      	bne.n	800f84a <sync_fs+0x4a>
 800f860:	e7d2      	b.n	800f808 <sync_fs+0x8>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800f862:	7926      	ldrb	r6, [r4, #4]
 800f864:	2e01      	cmp	r6, #1
 800f866:	d1d2      	bne.n	800f80e <sync_fs+0xe>
			mem_set(fs->win, 0, SS(fs));
 800f868:	f104 0334 	add.w	r3, r4, #52	; 0x34
	BYTE *d = (BYTE*)dst;
 800f86c:	4618      	mov	r0, r3
 800f86e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f872:	2100      	movs	r1, #0
 800f874:	f007 ffae 	bl	80177d4 <memset>
 800f878:	4603      	mov	r3, r0
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800f87a:	e9d4 0504 	ldrd	r0, r5, [r4, #16]
			fs->winsect = fs->volbase + 1;
 800f87e:	6a22      	ldr	r2, [r4, #32]
	*ptr++ = (BYTE)val; val >>= 8;
 800f880:	f884 521c 	strb.w	r5, [r4, #540]	; 0x21c
 800f884:	0a2f      	lsrs	r7, r5, #8
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800f886:	4619      	mov	r1, r3
 800f888:	4633      	mov	r3, r6
	*ptr++ = (BYTE)val; val >>= 8;
 800f88a:	0c2e      	lsrs	r6, r5, #16
	*ptr++ = (BYTE)val; val >>= 8;
 800f88c:	0e2d      	lsrs	r5, r5, #24
 800f88e:	f884 621e 	strb.w	r6, [r4, #542]	; 0x21e
	*ptr++ = (BYTE)val;
 800f892:	f884 521f 	strb.w	r5, [r4, #543]	; 0x21f
	*ptr++ = (BYTE)val; val >>= 8;
 800f896:	0a06      	lsrs	r6, r0, #8
	*ptr++ = (BYTE)val; val >>= 8;
 800f898:	0c05      	lsrs	r5, r0, #16
	*ptr++ = (BYTE)val; val >>= 8;
 800f89a:	f884 0220 	strb.w	r0, [r4, #544]	; 0x220
	*ptr++ = (BYTE)val; val >>= 8;
 800f89e:	0e00      	lsrs	r0, r0, #24
			fs->winsect = fs->volbase + 1;
 800f8a0:	3201      	adds	r2, #1
	*ptr++ = (BYTE)val; val >>= 8;
 800f8a2:	f884 721d 	strb.w	r7, [r4, #541]	; 0x21d
 800f8a6:	f884 6221 	strb.w	r6, [r4, #545]	; 0x221
	*ptr++ = (BYTE)val; val >>= 8;
 800f8aa:	f884 5222 	strb.w	r5, [r4, #546]	; 0x222
	*ptr++ = (BYTE)val;
 800f8ae:	f884 0223 	strb.w	r0, [r4, #547]	; 0x223
	*ptr++ = (BYTE)val; val >>= 8;
 800f8b2:	4d0a      	ldr	r5, [pc, #40]	; (800f8dc <sync_fs+0xdc>)
 800f8b4:	480a      	ldr	r0, [pc, #40]	; (800f8e0 <sync_fs+0xe0>)
 800f8b6:	f8c4 0218 	str.w	r0, [r4, #536]	; 0x218
	*ptr++ = (BYTE)val; val >>= 8;
 800f8ba:	2755      	movs	r7, #85	; 0x55
	*ptr++ = (BYTE)val;
 800f8bc:	26aa      	movs	r6, #170	; 0xaa
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800f8be:	7860      	ldrb	r0, [r4, #1]
			fs->winsect = fs->volbase + 1;
 800f8c0:	6322      	str	r2, [r4, #48]	; 0x30
	*ptr++ = (BYTE)val; val >>= 8;
 800f8c2:	f884 7232 	strb.w	r7, [r4, #562]	; 0x232
	*ptr++ = (BYTE)val;
 800f8c6:	f884 6233 	strb.w	r6, [r4, #563]	; 0x233
	*ptr++ = (BYTE)val; val >>= 8;
 800f8ca:	6365      	str	r5, [r4, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800f8cc:	f7ff fabe 	bl	800ee4c <disk_write>
			fs->fsi_flag = 0;
 800f8d0:	2300      	movs	r3, #0
 800f8d2:	7123      	strb	r3, [r4, #4]
 800f8d4:	e79b      	b.n	800f80e <sync_fs+0xe>
			res = FR_DISK_ERR;
 800f8d6:	2001      	movs	r0, #1
}
 800f8d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f8da:	bf00      	nop
 800f8dc:	41615252 	.word	0x41615252
 800f8e0:	61417272 	.word	0x61417272

0800f8e4 <create_chain>:
{
 800f8e4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	FATFS *fs = obj->fs;
 800f8e8:	f8d0 8000 	ldr.w	r8, [r0]
{
 800f8ec:	4681      	mov	r9, r0
	if (clst == 0) {	/* Create a new chain */
 800f8ee:	460f      	mov	r7, r1
 800f8f0:	2900      	cmp	r1, #0
 800f8f2:	f040 8098 	bne.w	800fa26 <create_chain+0x142>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800f8f6:	f8d8 6010 	ldr.w	r6, [r8, #16]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800f8fa:	f8d8 3018 	ldr.w	r3, [r8, #24]
 800f8fe:	b9c6      	cbnz	r6, 800f932 <create_chain+0x4e>
 800f900:	2601      	movs	r6, #1
		ncl = scl;	/* Start cluster */
 800f902:	4634      	mov	r4, r6
			ncl++;							/* Next cluster */
 800f904:	3401      	adds	r4, #1
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800f906:	429c      	cmp	r4, r3
 800f908:	d317      	bcc.n	800f93a <create_chain+0x56>
				if (ncl > scl) return 0;	/* No free cluster */
 800f90a:	2e01      	cmp	r6, #1
 800f90c:	f240 809b 	bls.w	800fa46 <create_chain+0x162>
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800f910:	f8d9 5000 	ldr.w	r5, [r9]
				ncl = 2;
 800f914:	2402      	movs	r4, #2
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800f916:	69ab      	ldr	r3, [r5, #24]
 800f918:	42a3      	cmp	r3, r4
 800f91a:	d906      	bls.n	800f92a <create_chain+0x46>
		switch (fs->fs_type) {
 800f91c:	782b      	ldrb	r3, [r5, #0]
 800f91e:	2b02      	cmp	r3, #2
 800f920:	d06c      	beq.n	800f9fc <create_chain+0x118>
 800f922:	2b03      	cmp	r3, #3
 800f924:	d050      	beq.n	800f9c8 <create_chain+0xe4>
 800f926:	2b01      	cmp	r3, #1
 800f928:	d00c      	beq.n	800f944 <create_chain+0x60>
 800f92a:	2401      	movs	r4, #1
}
 800f92c:	4620      	mov	r0, r4
 800f92e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800f932:	42b3      	cmp	r3, r6
 800f934:	bf98      	it	ls
 800f936:	2601      	movls	r6, #1
 800f938:	e7e3      	b.n	800f902 <create_chain+0x1e>
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800f93a:	2c01      	cmp	r4, #1
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800f93c:	f8d9 5000 	ldr.w	r5, [r9]
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800f940:	d9f3      	bls.n	800f92a <create_chain+0x46>
 800f942:	e7e8      	b.n	800f916 <create_chain+0x32>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800f944:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 800f946:	6b2a      	ldr	r2, [r5, #48]	; 0x30
			bc = (UINT)clst; bc += bc / 2;
 800f948:	eb04 0b54 	add.w	fp, r4, r4, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800f94c:	eb03 215b 	add.w	r1, r3, fp, lsr #9
	if (sector != fs->winsect) {	/* Window offset changed? */
 800f950:	4291      	cmp	r1, r2
 800f952:	d005      	beq.n	800f960 <create_chain+0x7c>
 800f954:	4628      	mov	r0, r5
 800f956:	f7ff fb89 	bl	800f06c <move_window.part.0>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800f95a:	bb80      	cbnz	r0, 800f9be <create_chain+0xda>
 800f95c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800f95e:	6b2a      	ldr	r2, [r5, #48]	; 0x30
			wc = fs->win[bc++ % SS(fs)];
 800f960:	f3cb 0008 	ubfx	r0, fp, #0, #9
 800f964:	f10b 0b01 	add.w	fp, fp, #1
 800f968:	4428      	add	r0, r5
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800f96a:	eb03 215b 	add.w	r1, r3, fp, lsr #9
	if (sector != fs->winsect) {	/* Window offset changed? */
 800f96e:	4291      	cmp	r1, r2
			wc = fs->win[bc++ % SS(fs)];
 800f970:	f890 a034 	ldrb.w	sl, [r0, #52]	; 0x34
	if (sector != fs->winsect) {	/* Window offset changed? */
 800f974:	d003      	beq.n	800f97e <create_chain+0x9a>
 800f976:	4628      	mov	r0, r5
 800f978:	f7ff fb78 	bl	800f06c <move_window.part.0>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800f97c:	b9f8      	cbnz	r0, 800f9be <create_chain+0xda>
			wc |= fs->win[bc % SS(fs)] << 8;
 800f97e:	f3cb 0b08 	ubfx	fp, fp, #0, #9
 800f982:	445d      	add	r5, fp
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800f984:	07e2      	lsls	r2, r4, #31
			wc |= fs->win[bc % SS(fs)] << 8;
 800f986:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
 800f98a:	ea4a 2303 	orr.w	r3, sl, r3, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800f98e:	d55e      	bpl.n	800fa4e <create_chain+0x16a>
 800f990:	091b      	lsrs	r3, r3, #4
			if (cs == 0) break;				/* Found a free cluster */
 800f992:	b133      	cbz	r3, 800f9a2 <create_chain+0xbe>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800f994:	2b01      	cmp	r3, #1
 800f996:	d0c8      	beq.n	800f92a <create_chain+0x46>
			if (ncl == scl) return 0;		/* No free cluster */
 800f998:	42a6      	cmp	r6, r4
 800f99a:	d054      	beq.n	800fa46 <create_chain+0x162>
 800f99c:	f8d8 3018 	ldr.w	r3, [r8, #24]
 800f9a0:	e7b0      	b.n	800f904 <create_chain+0x20>
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800f9a2:	f8d8 3018 	ldr.w	r3, [r8, #24]
 800f9a6:	42a3      	cmp	r3, r4
 800f9a8:	d9bf      	bls.n	800f92a <create_chain+0x46>
 800f9aa:	f04f 32ff 	mov.w	r2, #4294967295
 800f9ae:	4621      	mov	r1, r4
 800f9b0:	4640      	mov	r0, r8
 800f9b2:	f7ff fb95 	bl	800f0e0 <put_fat.part.0>
		if (res == FR_OK && clst != 0) {
 800f9b6:	2800      	cmp	r0, #0
 800f9b8:	d04c      	beq.n	800fa54 <create_chain+0x170>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800f9ba:	2801      	cmp	r0, #1
 800f9bc:	d1b5      	bne.n	800f92a <create_chain+0x46>
 800f9be:	f04f 34ff 	mov.w	r4, #4294967295
}
 800f9c2:	4620      	mov	r0, r4
 800f9c4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800f9c8:	6a69      	ldr	r1, [r5, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 800f9ca:	6b2b      	ldr	r3, [r5, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800f9cc:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
	if (sector != fs->winsect) {	/* Window offset changed? */
 800f9d0:	4299      	cmp	r1, r3
 800f9d2:	d004      	beq.n	800f9de <create_chain+0xfa>
 800f9d4:	4628      	mov	r0, r5
 800f9d6:	f7ff fb49 	bl	800f06c <move_window.part.0>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800f9da:	2800      	cmp	r0, #0
 800f9dc:	d1ef      	bne.n	800f9be <create_chain+0xda>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800f9de:	00a3      	lsls	r3, r4, #2
 800f9e0:	3534      	adds	r5, #52	; 0x34
 800f9e2:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800f9e6:	18e9      	adds	r1, r5, r3
	rv = rv << 8 | ptr[0];
 800f9e8:	5ceb      	ldrb	r3, [r5, r3]
	rv = rv << 8 | ptr[2];
 800f9ea:	8848      	ldrh	r0, [r1, #2]
	rv = rv << 8 | ptr[1];
 800f9ec:	784a      	ldrb	r2, [r1, #1]
 800f9ee:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
	rv = rv << 8 | ptr[0];
 800f9f2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800f9f6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
			break;
 800f9fa:	e7ca      	b.n	800f992 <create_chain+0xae>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800f9fc:	6a69      	ldr	r1, [r5, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 800f9fe:	6b2b      	ldr	r3, [r5, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800fa00:	eb01 2114 	add.w	r1, r1, r4, lsr #8
	if (sector != fs->winsect) {	/* Window offset changed? */
 800fa04:	4299      	cmp	r1, r3
 800fa06:	d004      	beq.n	800fa12 <create_chain+0x12e>
 800fa08:	4628      	mov	r0, r5
 800fa0a:	f7ff fb2f 	bl	800f06c <move_window.part.0>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800fa0e:	2800      	cmp	r0, #0
 800fa10:	d1d5      	bne.n	800f9be <create_chain+0xda>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800fa12:	0063      	lsls	r3, r4, #1
 800fa14:	3534      	adds	r5, #52	; 0x34
 800fa16:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800fa1a:	18ea      	adds	r2, r5, r3
	rv = rv << 8 | ptr[0];
 800fa1c:	5ceb      	ldrb	r3, [r5, r3]
 800fa1e:	7852      	ldrb	r2, [r2, #1]
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800fa20:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			break;
 800fa24:	e7b5      	b.n	800f992 <create_chain+0xae>
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800fa26:	4640      	mov	r0, r8
 800fa28:	f7ff fbf6 	bl	800f218 <get_fat.isra.0>
		if (cs < 2) return 1;				/* Invalid FAT value */
 800fa2c:	2801      	cmp	r0, #1
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800fa2e:	4604      	mov	r4, r0
		if (cs < 2) return 1;				/* Invalid FAT value */
 800fa30:	f67f af7b 	bls.w	800f92a <create_chain+0x46>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800fa34:	1c41      	adds	r1, r0, #1
 800fa36:	d0c2      	beq.n	800f9be <create_chain+0xda>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800fa38:	f8d8 3018 	ldr.w	r3, [r8, #24]
 800fa3c:	4283      	cmp	r3, r0
 800fa3e:	f63f af75 	bhi.w	800f92c <create_chain+0x48>
 800fa42:	463e      	mov	r6, r7
 800fa44:	e75d      	b.n	800f902 <create_chain+0x1e>
				if (ncl > scl) return 0;	/* No free cluster */
 800fa46:	2400      	movs	r4, #0
}
 800fa48:	4620      	mov	r0, r4
 800fa4a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800fa4e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800fa52:	e79e      	b.n	800f992 <create_chain+0xae>
		if (res == FR_OK && clst != 0) {
 800fa54:	b177      	cbz	r7, 800fa74 <create_chain+0x190>
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800fa56:	2f01      	cmp	r7, #1
 800fa58:	f67f af67 	bls.w	800f92a <create_chain+0x46>
 800fa5c:	f8d8 3018 	ldr.w	r3, [r8, #24]
 800fa60:	429f      	cmp	r7, r3
 800fa62:	f4bf af62 	bcs.w	800f92a <create_chain+0x46>
 800fa66:	4639      	mov	r1, r7
 800fa68:	4622      	mov	r2, r4
 800fa6a:	4640      	mov	r0, r8
 800fa6c:	f7ff fb38 	bl	800f0e0 <put_fat.part.0>
	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800fa70:	2800      	cmp	r0, #0
 800fa72:	d1a2      	bne.n	800f9ba <create_chain+0xd6>
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800fa74:	e9d8 2305 	ldrd	r2, r3, [r8, #20]
 800fa78:	3b02      	subs	r3, #2
 800fa7a:	429a      	cmp	r2, r3
		fs->last_clst = ncl;
 800fa7c:	f8c8 4010 	str.w	r4, [r8, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800fa80:	d802      	bhi.n	800fa88 <create_chain+0x1a4>
 800fa82:	3a01      	subs	r2, #1
 800fa84:	f8c8 2014 	str.w	r2, [r8, #20]
		fs->fsi_flag |= 1;
 800fa88:	f898 3004 	ldrb.w	r3, [r8, #4]
 800fa8c:	f043 0301 	orr.w	r3, r3, #1
 800fa90:	f888 3004 	strb.w	r3, [r8, #4]
 800fa94:	e74a      	b.n	800f92c <create_chain+0x48>
 800fa96:	bf00      	nop

0800fa98 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800fa98:	b570      	push	{r4, r5, r6, lr}
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800fa9a:	f04f 36ff 	mov.w	r6, #4294967295
 800fa9e:	2300      	movs	r3, #0
	if (sector != fs->winsect) {	/* Window offset changed? */
 800faa0:	42b1      	cmp	r1, r6
{
 800faa2:	4604      	mov	r4, r0
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800faa4:	70c3      	strb	r3, [r0, #3]
 800faa6:	6306      	str	r6, [r0, #48]	; 0x30
	if (sector != fs->winsect) {	/* Window offset changed? */
 800faa8:	d00c      	beq.n	800fac4 <check_fs+0x2c>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800faaa:	460d      	mov	r5, r1
 800faac:	460a      	mov	r2, r1
 800faae:	2301      	movs	r3, #1
 800fab0:	f100 0134 	add.w	r1, r0, #52	; 0x34
 800fab4:	7840      	ldrb	r0, [r0, #1]
 800fab6:	f7ff f9bb 	bl	800ee30 <disk_read>
 800faba:	b110      	cbz	r0, 800fac2 <check_fs+0x2a>
			fs->winsect = sector;
 800fabc:	6326      	str	r6, [r4, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800fabe:	2004      	movs	r0, #4
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
}
 800fac0:	bd70      	pop	{r4, r5, r6, pc}
			fs->winsect = sector;
 800fac2:	6325      	str	r5, [r4, #48]	; 0x30
	rv = rv << 8 | ptr[0];
 800fac4:	f894 1233 	ldrb.w	r1, [r4, #563]	; 0x233
 800fac8:	f894 3232 	ldrb.w	r3, [r4, #562]	; 0x232
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800facc:	f64a 2255 	movw	r2, #43605	; 0xaa55
	rv = rv << 8 | ptr[0];
 800fad0:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800fad4:	4293      	cmp	r3, r2
 800fad6:	d12a      	bne.n	800fb2e <check_fs+0x96>
	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800fad8:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 800fadc:	2be9      	cmp	r3, #233	; 0xe9
 800fade:	d007      	beq.n	800faf0 <check_fs+0x58>
 800fae0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800fae2:	4a15      	ldr	r2, [pc, #84]	; (800fb38 <check_fs+0xa0>)
 800fae4:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 800fae8:	4293      	cmp	r3, r2
 800faea:	d001      	beq.n	800faf0 <check_fs+0x58>
	return 2;
 800faec:	2002      	movs	r0, #2
}
 800faee:	bd70      	pop	{r4, r5, r6, pc}
	rv = rv << 8 | ptr[2];
 800faf0:	f8b4 006c 	ldrh.w	r0, [r4, #108]	; 0x6c
	rv = rv << 8 | ptr[1];
 800faf4:	f894 206b 	ldrb.w	r2, [r4, #107]	; 0x6b
	rv = rv << 8 | ptr[0];
 800faf8:	f894 306a 	ldrb.w	r3, [r4, #106]	; 0x6a
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800fafc:	490f      	ldr	r1, [pc, #60]	; (800fb3c <check_fs+0xa4>)
	rv = rv << 8 | ptr[1];
 800fafe:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
	rv = rv << 8 | ptr[0];
 800fb02:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800fb06:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800fb0a:	428b      	cmp	r3, r1
 800fb0c:	d011      	beq.n	800fb32 <check_fs+0x9a>
	rv = rv << 8 | ptr[2];
 800fb0e:	f8b4 1088 	ldrh.w	r1, [r4, #136]	; 0x88
	rv = rv << 8 | ptr[1];
 800fb12:	f894 3087 	ldrb.w	r3, [r4, #135]	; 0x87
	rv = rv << 8 | ptr[0];
 800fb16:	f894 0086 	ldrb.w	r0, [r4, #134]	; 0x86
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800fb1a:	4a09      	ldr	r2, [pc, #36]	; (800fb40 <check_fs+0xa8>)
	rv = rv << 8 | ptr[1];
 800fb1c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	rv = rv << 8 | ptr[0];
 800fb20:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800fb24:	4290      	cmp	r0, r2
 800fb26:	bf14      	ite	ne
 800fb28:	2002      	movne	r0, #2
 800fb2a:	2000      	moveq	r0, #0
}
 800fb2c:	bd70      	pop	{r4, r5, r6, pc}
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800fb2e:	2003      	movs	r0, #3
}
 800fb30:	bd70      	pop	{r4, r5, r6, pc}
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800fb32:	2000      	movs	r0, #0
}
 800fb34:	bd70      	pop	{r4, r5, r6, pc}
 800fb36:	bf00      	nop
 800fb38:	009000eb 	.word	0x009000eb
 800fb3c:	00544146 	.word	0x00544146
 800fb40:	33544146 	.word	0x33544146

0800fb44 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800fb44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (*path) {	/* If the pointer is not a null */
 800fb48:	6803      	ldr	r3, [r0, #0]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800fb4a:	2400      	movs	r4, #0
 800fb4c:	600c      	str	r4, [r1, #0]
	if (*path) {	/* If the pointer is not a null */
 800fb4e:	b173      	cbz	r3, 800fb6e <find_volume+0x2a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800fb50:	781e      	ldrb	r6, [r3, #0]
 800fb52:	2e1f      	cmp	r6, #31
 800fb54:	d913      	bls.n	800fb7e <find_volume+0x3a>
 800fb56:	4634      	mov	r4, r6
 800fb58:	461d      	mov	r5, r3
 800fb5a:	e003      	b.n	800fb64 <find_volume+0x20>
 800fb5c:	f815 4f01 	ldrb.w	r4, [r5, #1]!
 800fb60:	2c1f      	cmp	r4, #31
 800fb62:	d90c      	bls.n	800fb7e <find_volume+0x3a>
 800fb64:	2c3a      	cmp	r4, #58	; 0x3a
 800fb66:	d1f9      	bne.n	800fb5c <find_volume+0x18>
			i = *tp++ - '0';
 800fb68:	3301      	adds	r3, #1
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800fb6a:	429d      	cmp	r5, r3
 800fb6c:	d003      	beq.n	800fb76 <find_volume+0x32>
	vol = get_ldnumber(path);
	if (vol < 0) return FR_INVALID_DRIVE;
 800fb6e:	250b      	movs	r5, #11
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
#endif
	return FR_OK;
}
 800fb70:	4628      	mov	r0, r5
 800fb72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800fb76:	2e30      	cmp	r6, #48	; 0x30
 800fb78:	d1f9      	bne.n	800fb6e <find_volume+0x2a>
					*path = ++tt;
 800fb7a:	3501      	adds	r5, #1
 800fb7c:	6005      	str	r5, [r0, #0]
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800fb7e:	4ec0      	ldr	r6, [pc, #768]	; (800fe80 <find_volume+0x33c>)
 800fb80:	6834      	ldr	r4, [r6, #0]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800fb82:	2c00      	cmp	r4, #0
 800fb84:	f000 8128 	beq.w	800fdd8 <find_volume+0x294>
	*rfs = fs;							/* Return pointer to the file system object */
 800fb88:	600c      	str	r4, [r1, #0]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800fb8a:	7823      	ldrb	r3, [r4, #0]
	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800fb8c:	f002 05fe 	and.w	r5, r2, #254	; 0xfe
	if (fs->fs_type) {					/* If the volume has been mounted */
 800fb90:	b17b      	cbz	r3, 800fbb2 <find_volume+0x6e>
		stat = disk_status(fs->drv);
 800fb92:	7860      	ldrb	r0, [r4, #1]
 800fb94:	f7ff f932 	bl	800edfc <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800fb98:	07c1      	lsls	r1, r0, #31
 800fb9a:	d40a      	bmi.n	800fbb2 <find_volume+0x6e>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800fb9c:	2d00      	cmp	r5, #0
 800fb9e:	f000 810a 	beq.w	800fdb6 <find_volume+0x272>
 800fba2:	f010 0504 	ands.w	r5, r0, #4
 800fba6:	f000 8106 	beq.w	800fdb6 <find_volume+0x272>
				return FR_WRITE_PROTECTED;
 800fbaa:	250a      	movs	r5, #10
}
 800fbac:	4628      	mov	r0, r5
 800fbae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	fs->fs_type = 0;					/* Clear the file system object */
 800fbb2:	2000      	movs	r0, #0
 800fbb4:	8020      	strh	r0, [r4, #0]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800fbb6:	f7ff f92b 	bl	800ee10 <disk_initialize>
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800fbba:	07c2      	lsls	r2, r0, #31
 800fbbc:	f100 80fe 	bmi.w	800fdbc <find_volume+0x278>
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800fbc0:	b10d      	cbz	r5, 800fbc6 <find_volume+0x82>
 800fbc2:	0743      	lsls	r3, r0, #29
 800fbc4:	d4f1      	bmi.n	800fbaa <find_volume+0x66>
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800fbc6:	2100      	movs	r1, #0
 800fbc8:	4620      	mov	r0, r4
 800fbca:	f7ff ff65 	bl	800fa98 <check_fs>
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800fbce:	2802      	cmp	r0, #2
 800fbd0:	f000 80ac 	beq.w	800fd2c <find_volume+0x1e8>
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800fbd4:	2804      	cmp	r0, #4
 800fbd6:	f000 80fd 	beq.w	800fdd4 <find_volume+0x290>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800fbda:	2801      	cmp	r0, #1
	bsect = 0;
 800fbdc:	bf98      	it	ls
 800fbde:	2500      	movls	r5, #0
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800fbe0:	f200 80e8 	bhi.w	800fdb4 <find_volume+0x270>
	rv = rv << 8 | ptr[0];
 800fbe4:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
 800fbe8:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
 800fbec:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800fbf0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800fbf4:	f040 80de 	bne.w	800fdb4 <find_volume+0x270>
	rv = rv << 8 | ptr[0];
 800fbf8:	f894 204b 	ldrb.w	r2, [r4, #75]	; 0x4b
 800fbfc:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800fc00:	ea53 2302 	orrs.w	r3, r3, r2, lsl #8
 800fc04:	d109      	bne.n	800fc1a <find_volume+0xd6>
	rv = rv << 8 | ptr[2];
 800fc06:	f8b4 105a 	ldrh.w	r1, [r4, #90]	; 0x5a
	rv = rv << 8 | ptr[1];
 800fc0a:	f894 3059 	ldrb.w	r3, [r4, #89]	; 0x59
	rv = rv << 8 | ptr[0];
 800fc0e:	f894 2058 	ldrb.w	r2, [r4, #88]	; 0x58
	rv = rv << 8 | ptr[1];
 800fc12:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	rv = rv << 8 | ptr[0];
 800fc16:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800fc1a:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
		fs->fsize = fasize;
 800fc1e:	61e3      	str	r3, [r4, #28]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800fc20:	1e51      	subs	r1, r2, #1
 800fc22:	2901      	cmp	r1, #1
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800fc24:	70a2      	strb	r2, [r4, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800fc26:	f200 80c5 	bhi.w	800fdb4 <find_volume+0x270>
		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800fc2a:	f894 7041 	ldrb.w	r7, [r4, #65]	; 0x41
 800fc2e:	b2b9      	uxth	r1, r7
 800fc30:	8161      	strh	r1, [r4, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800fc32:	2900      	cmp	r1, #0
 800fc34:	f000 80be 	beq.w	800fdb4 <find_volume+0x270>
 800fc38:	1e79      	subs	r1, r7, #1
 800fc3a:	4239      	tst	r1, r7
 800fc3c:	f040 80ba 	bne.w	800fdb4 <find_volume+0x270>
	rv = rv << 8 | ptr[0];
 800fc40:	f894 0046 	ldrb.w	r0, [r4, #70]	; 0x46
 800fc44:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800fc48:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
 800fc4c:	468c      	mov	ip, r1
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800fc4e:	f01c 0f0f 	tst.w	ip, #15
		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800fc52:	8121      	strh	r1, [r4, #8]
	rv = rv << 8 | ptr[0];
 800fc54:	b209      	sxth	r1, r1
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800fc56:	f040 80ad 	bne.w	800fdb4 <find_volume+0x270>
	rv = rv << 8 | ptr[0];
 800fc5a:	f894 e048 	ldrb.w	lr, [r4, #72]	; 0x48
 800fc5e:	f894 0047 	ldrb.w	r0, [r4, #71]	; 0x47
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800fc62:	ea50 200e 	orrs.w	r0, r0, lr, lsl #8
 800fc66:	d109      	bne.n	800fc7c <find_volume+0x138>
	rv = rv << 8 | ptr[2];
 800fc68:	f8b4 8056 	ldrh.w	r8, [r4, #86]	; 0x56
	rv = rv << 8 | ptr[1];
 800fc6c:	f894 0055 	ldrb.w	r0, [r4, #85]	; 0x55
	rv = rv << 8 | ptr[0];
 800fc70:	f894 e054 	ldrb.w	lr, [r4, #84]	; 0x54
	rv = rv << 8 | ptr[1];
 800fc74:	ea40 2008 	orr.w	r0, r0, r8, lsl #8
	rv = rv << 8 | ptr[0];
 800fc78:	ea4e 2000 	orr.w	r0, lr, r0, lsl #8
	rv = rv << 8 | ptr[0];
 800fc7c:	f894 8043 	ldrb.w	r8, [r4, #67]	; 0x43
 800fc80:	f894 e042 	ldrb.w	lr, [r4, #66]	; 0x42
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800fc84:	ea5e 2e08 	orrs.w	lr, lr, r8, lsl #8
 800fc88:	f000 8094 	beq.w	800fdb4 <find_volume+0x270>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800fc8c:	fb03 f202 	mul.w	r2, r3, r2
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800fc90:	eb0e 181c 	add.w	r8, lr, ip, lsr #4
 800fc94:	4490      	add	r8, r2
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800fc96:	4540      	cmp	r0, r8
 800fc98:	f0c0 808c 	bcc.w	800fdb4 <find_volume+0x270>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800fc9c:	eba0 0908 	sub.w	r9, r0, r8
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800fca0:	45b9      	cmp	r9, r7
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800fca2:	fbb9 f0f7 	udiv	r0, r9, r7
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800fca6:	f0c0 8085 	bcc.w	800fdb4 <find_volume+0x270>
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800fcaa:	f64f 77f5 	movw	r7, #65525	; 0xfff5
 800fcae:	42b8      	cmp	r0, r7
 800fcb0:	f200 80a8 	bhi.w	800fe04 <find_volume+0x2c0>
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800fcb4:	f640 71f5 	movw	r1, #4085	; 0xff5
 800fcb8:	4288      	cmp	r0, r1
		fs->database = bsect + sysect;					/* Data start sector */
 800fcba:	eb08 0705 	add.w	r7, r8, r5
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800fcbe:	f100 0002 	add.w	r0, r0, #2
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800fcc2:	eb0e 0105 	add.w	r1, lr, r5
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800fcc6:	61a0      	str	r0, [r4, #24]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800fcc8:	6261      	str	r1, [r4, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800fcca:	62e7      	str	r7, [r4, #44]	; 0x2c
		fs->volbase = bsect;							/* Volume start sector */
 800fccc:	6225      	str	r5, [r4, #32]
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800fcce:	f200 80cd 	bhi.w	800fe6c <find_volume+0x328>
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800fcd2:	f1bc 0f00 	cmp.w	ip, #0
 800fcd6:	d06d      	beq.n	800fdb4 <find_volume+0x270>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800fcd8:	440a      	add	r2, r1
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800fcda:	eb00 0140 	add.w	r1, r0, r0, lsl #1
 800fcde:	f000 0001 	and.w	r0, r0, #1
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800fce2:	62a2      	str	r2, [r4, #40]	; 0x28
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800fce4:	eb00 0251 	add.w	r2, r0, r1, lsr #1
 800fce8:	2001      	movs	r0, #1
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800fcea:	f202 12ff 	addw	r2, r2, #511	; 0x1ff
 800fcee:	ebb3 2f52 	cmp.w	r3, r2, lsr #9
 800fcf2:	d35f      	bcc.n	800fdb4 <find_volume+0x270>
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800fcf4:	f04f 33ff 	mov.w	r3, #4294967295
 800fcf8:	e9c4 3304 	strd	r3, r3, [r4, #16]
		fs->fsi_flag = 0x80;
 800fcfc:	2280      	movs	r2, #128	; 0x80
 800fcfe:	7122      	strb	r2, [r4, #4]
	fs->id = ++Fsid;		/* File system mount ID */
 800fd00:	88b3      	ldrh	r3, [r6, #4]
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800fd02:	4960      	ldr	r1, [pc, #384]	; (800fe84 <find_volume+0x340>)
	fs->fs_type = fmt;		/* FAT sub-type */
 800fd04:	7020      	strb	r0, [r4, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800fd06:	3301      	adds	r3, #1
 800fd08:	b29b      	uxth	r3, r3
 800fd0a:	80b3      	strh	r3, [r6, #4]
 800fd0c:	80e3      	strh	r3, [r4, #6]
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800fd0e:	60e1      	str	r1, [r4, #12]
	for (i = 0; i < _FS_LOCK; i++) {
 800fd10:	f501 7300 	add.w	r3, r1, #512	; 0x200
		if (Files[i].fs == fs) Files[i].fs = 0;
 800fd14:	2000      	movs	r0, #0
 800fd16:	f501 7150 	add.w	r1, r1, #832	; 0x340
 800fd1a:	681a      	ldr	r2, [r3, #0]
 800fd1c:	4294      	cmp	r4, r2
 800fd1e:	bf08      	it	eq
 800fd20:	6018      	streq	r0, [r3, #0]
 800fd22:	3310      	adds	r3, #16
	for (i = 0; i < _FS_LOCK; i++) {
 800fd24:	4299      	cmp	r1, r3
 800fd26:	d1f8      	bne.n	800fd1a <find_volume+0x1d6>
	return FR_OK;
 800fd28:	2500      	movs	r5, #0
 800fd2a:	e044      	b.n	800fdb6 <find_volume+0x272>
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800fd2c:	f894 11f6 	ldrb.w	r1, [r4, #502]	; 0x1f6
 800fd30:	2900      	cmp	r1, #0
 800fd32:	d055      	beq.n	800fde0 <find_volume+0x29c>
	rv = rv << 8 | ptr[2];
 800fd34:	f8b4 31fc 	ldrh.w	r3, [r4, #508]	; 0x1fc
	rv = rv << 8 | ptr[1];
 800fd38:	f894 11fb 	ldrb.w	r1, [r4, #507]	; 0x1fb
	rv = rv << 8 | ptr[0];
 800fd3c:	f894 91fa 	ldrb.w	r9, [r4, #506]	; 0x1fa
	rv = rv << 8 | ptr[1];
 800fd40:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
	rv = rv << 8 | ptr[0];
 800fd44:	ea49 2901 	orr.w	r9, r9, r1, lsl #8
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800fd48:	f894 5206 	ldrb.w	r5, [r4, #518]	; 0x206
 800fd4c:	b14d      	cbz	r5, 800fd62 <find_volume+0x21e>
	rv = rv << 8 | ptr[2];
 800fd4e:	f8b4 220c 	ldrh.w	r2, [r4, #524]	; 0x20c
	rv = rv << 8 | ptr[1];
 800fd52:	f894 320b 	ldrb.w	r3, [r4, #523]	; 0x20b
	rv = rv << 8 | ptr[0];
 800fd56:	f894 520a 	ldrb.w	r5, [r4, #522]	; 0x20a
	rv = rv << 8 | ptr[1];
 800fd5a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	rv = rv << 8 | ptr[0];
 800fd5e:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800fd62:	f894 3216 	ldrb.w	r3, [r4, #534]	; 0x216
 800fd66:	b3cb      	cbz	r3, 800fddc <find_volume+0x298>
	rv = rv << 8 | ptr[2];
 800fd68:	f8b4 221c 	ldrh.w	r2, [r4, #540]	; 0x21c
	rv = rv << 8 | ptr[1];
 800fd6c:	f894 321b 	ldrb.w	r3, [r4, #539]	; 0x21b
	rv = rv << 8 | ptr[0];
 800fd70:	f894 821a 	ldrb.w	r8, [r4, #538]	; 0x21a
	rv = rv << 8 | ptr[1];
 800fd74:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	rv = rv << 8 | ptr[0];
 800fd78:	ea48 2803 	orr.w	r8, r8, r3, lsl #8
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800fd7c:	f894 7226 	ldrb.w	r7, [r4, #550]	; 0x226
 800fd80:	b14f      	cbz	r7, 800fd96 <find_volume+0x252>
	rv = rv << 8 | ptr[2];
 800fd82:	f8b4 222c 	ldrh.w	r2, [r4, #556]	; 0x22c
	rv = rv << 8 | ptr[1];
 800fd86:	f894 322b 	ldrb.w	r3, [r4, #555]	; 0x22b
	rv = rv << 8 | ptr[0];
 800fd8a:	f894 722a 	ldrb.w	r7, [r4, #554]	; 0x22a
	rv = rv << 8 | ptr[1];
 800fd8e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	rv = rv << 8 | ptr[0];
 800fd92:	ea47 2703 	orr.w	r7, r7, r3, lsl #8
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800fd96:	f1b9 0f00 	cmp.w	r9, #0
 800fd9a:	d123      	bne.n	800fde4 <find_volume+0x2a0>
 800fd9c:	b135      	cbz	r5, 800fdac <find_volume+0x268>
 800fd9e:	4629      	mov	r1, r5
 800fda0:	4620      	mov	r0, r4
 800fda2:	f7ff fe79 	bl	800fa98 <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800fda6:	2801      	cmp	r0, #1
 800fda8:	f67f af1c 	bls.w	800fbe4 <find_volume+0xa0>
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800fdac:	f1b8 0f00 	cmp.w	r8, #0
 800fdb0:	d120      	bne.n	800fdf4 <find_volume+0x2b0>
 800fdb2:	b93f      	cbnz	r7, 800fdc4 <find_volume+0x280>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800fdb4:	250d      	movs	r5, #13
}
 800fdb6:	4628      	mov	r0, r5
 800fdb8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800fdbc:	2503      	movs	r5, #3
}
 800fdbe:	4628      	mov	r0, r5
 800fdc0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800fdc4:	4639      	mov	r1, r7
 800fdc6:	4620      	mov	r0, r4
 800fdc8:	f7ff fe66 	bl	800fa98 <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800fdcc:	2801      	cmp	r0, #1
 800fdce:	d955      	bls.n	800fe7c <find_volume+0x338>
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800fdd0:	2804      	cmp	r0, #4
 800fdd2:	d1ef      	bne.n	800fdb4 <find_volume+0x270>
 800fdd4:	2501      	movs	r5, #1
 800fdd6:	e7ee      	b.n	800fdb6 <find_volume+0x272>
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800fdd8:	250c      	movs	r5, #12
 800fdda:	e7ec      	b.n	800fdb6 <find_volume+0x272>
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800fddc:	4698      	mov	r8, r3
 800fdde:	e7cd      	b.n	800fd7c <find_volume+0x238>
 800fde0:	4689      	mov	r9, r1
 800fde2:	e7b1      	b.n	800fd48 <find_volume+0x204>
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800fde4:	4649      	mov	r1, r9
 800fde6:	4620      	mov	r0, r4
 800fde8:	f7ff fe56 	bl	800fa98 <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800fdec:	2801      	cmp	r0, #1
 800fdee:	d8d5      	bhi.n	800fd9c <find_volume+0x258>
 800fdf0:	464d      	mov	r5, r9
 800fdf2:	e6f7      	b.n	800fbe4 <find_volume+0xa0>
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800fdf4:	4641      	mov	r1, r8
 800fdf6:	4620      	mov	r0, r4
 800fdf8:	f7ff fe4e 	bl	800fa98 <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800fdfc:	2801      	cmp	r0, #1
 800fdfe:	d8d8      	bhi.n	800fdb2 <find_volume+0x26e>
 800fe00:	4645      	mov	r5, r8
 800fe02:	e6ef      	b.n	800fbe4 <find_volume+0xa0>
	rv = rv << 8 | ptr[0];
 800fe04:	f894 705f 	ldrb.w	r7, [r4, #95]	; 0x5f
 800fe08:	f894 205e 	ldrb.w	r2, [r4, #94]	; 0x5e
		fs->volbase = bsect;							/* Volume start sector */
 800fe0c:	6225      	str	r5, [r4, #32]
	rv = rv << 8 | ptr[0];
 800fe0e:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800fe12:	4311      	orrs	r1, r2
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800fe14:	3002      	adds	r0, #2
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800fe16:	eb0e 0205 	add.w	r2, lr, r5
		fs->database = bsect + sysect;					/* Data start sector */
 800fe1a:	eb08 0705 	add.w	r7, r8, r5
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800fe1e:	b209      	sxth	r1, r1
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800fe20:	61a0      	str	r0, [r4, #24]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800fe22:	6262      	str	r2, [r4, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800fe24:	62e7      	str	r7, [r4, #44]	; 0x2c
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800fe26:	2900      	cmp	r1, #0
 800fe28:	d1c4      	bne.n	800fdb4 <find_volume+0x270>
	rv = rv << 8 | ptr[2];
 800fe2a:	f8b4 2062 	ldrh.w	r2, [r4, #98]	; 0x62
	rv = rv << 8 | ptr[1];
 800fe2e:	f894 7061 	ldrb.w	r7, [r4, #97]	; 0x61
	rv = rv << 8 | ptr[0];
 800fe32:	f894 1060 	ldrb.w	r1, [r4, #96]	; 0x60
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800fe36:	0080      	lsls	r0, r0, #2
	rv = rv << 8 | ptr[1];
 800fe38:	ea47 2702 	orr.w	r7, r7, r2, lsl #8
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800fe3c:	f200 12ff 	addw	r2, r0, #511	; 0x1ff
	rv = rv << 8 | ptr[0];
 800fe40:	ea41 2107 	orr.w	r1, r1, r7, lsl #8
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800fe44:	ebb3 2f52 	cmp.w	r3, r2, lsr #9
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800fe48:	62a1      	str	r1, [r4, #40]	; 0x28
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800fe4a:	d3b3      	bcc.n	800fdb4 <find_volume+0x270>
	rv = rv << 8 | ptr[0];
 800fe4c:	f894 2065 	ldrb.w	r2, [r4, #101]	; 0x65
 800fe50:	f894 3064 	ldrb.w	r3, [r4, #100]	; 0x64
 800fe54:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		fs->fsi_flag = 0x80;
 800fe58:	2180      	movs	r1, #128	; 0x80
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800fe5a:	f04f 32ff 	mov.w	r2, #4294967295
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800fe5e:	2b01      	cmp	r3, #1
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800fe60:	e9c4 2204 	strd	r2, r2, [r4, #16]
		fs->fsi_flag = 0x80;
 800fe64:	7121      	strb	r1, [r4, #4]
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800fe66:	d00f      	beq.n	800fe88 <find_volume+0x344>
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800fe68:	2003      	movs	r0, #3
 800fe6a:	e749      	b.n	800fd00 <find_volume+0x1bc>
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800fe6c:	f1bc 0f00 	cmp.w	ip, #0
 800fe70:	d0a0      	beq.n	800fdb4 <find_volume+0x270>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800fe72:	440a      	add	r2, r1
 800fe74:	62a2      	str	r2, [r4, #40]	; 0x28
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800fe76:	0042      	lsls	r2, r0, #1
 800fe78:	2002      	movs	r0, #2
 800fe7a:	e736      	b.n	800fcea <find_volume+0x1a6>
 800fe7c:	463d      	mov	r5, r7
 800fe7e:	e6b1      	b.n	800fbe4 <find_volume+0xa0>
 800fe80:	20001d00 	.word	0x20001d00
 800fe84:	20001d08 	.word	0x20001d08
	if (sector != fs->winsect) {	/* Window offset changed? */
 800fe88:	6b23      	ldr	r3, [r4, #48]	; 0x30
			&& move_window(fs, bsect + 1) == FR_OK)
 800fe8a:	1c69      	adds	r1, r5, #1
	if (sector != fs->winsect) {	/* Window offset changed? */
 800fe8c:	4299      	cmp	r1, r3
 800fe8e:	d004      	beq.n	800fe9a <find_volume+0x356>
 800fe90:	4620      	mov	r0, r4
 800fe92:	f7ff f8eb 	bl	800f06c <move_window.part.0>
			&& move_window(fs, bsect + 1) == FR_OK)
 800fe96:	2800      	cmp	r0, #0
 800fe98:	d1e6      	bne.n	800fe68 <find_volume+0x324>
	rv = rv << 8 | ptr[0];
 800fe9a:	f894 2233 	ldrb.w	r2, [r4, #563]	; 0x233
 800fe9e:	f894 3232 	ldrb.w	r3, [r4, #562]	; 0x232
 800fea2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800fea6:	f64a 2255 	movw	r2, #43605	; 0xaa55
			fs->fsi_flag = 0;
 800feaa:	2100      	movs	r1, #0
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800feac:	4293      	cmp	r3, r2
			fs->fsi_flag = 0;
 800feae:	7121      	strb	r1, [r4, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800feb0:	d1da      	bne.n	800fe68 <find_volume+0x324>
	rv = rv << 8 | ptr[2];
 800feb2:	8ee0      	ldrh	r0, [r4, #54]	; 0x36
	rv = rv << 8 | ptr[1];
 800feb4:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
	rv = rv << 8 | ptr[0];
 800feb8:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800febc:	4917      	ldr	r1, [pc, #92]	; (800ff1c <find_volume+0x3d8>)
	rv = rv << 8 | ptr[1];
 800febe:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
	rv = rv << 8 | ptr[0];
 800fec2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800fec6:	428b      	cmp	r3, r1
 800fec8:	d1ce      	bne.n	800fe68 <find_volume+0x324>
	rv = rv << 8 | ptr[2];
 800feca:	f8b4 021a 	ldrh.w	r0, [r4, #538]	; 0x21a
	rv = rv << 8 | ptr[1];
 800fece:	f894 2219 	ldrb.w	r2, [r4, #537]	; 0x219
	rv = rv << 8 | ptr[0];
 800fed2:	f894 3218 	ldrb.w	r3, [r4, #536]	; 0x218
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800fed6:	f101 51ff 	add.w	r1, r1, #534773760	; 0x1fe00000
 800feda:	f501 5100 	add.w	r1, r1, #8192	; 0x2000
	rv = rv << 8 | ptr[1];
 800fede:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800fee2:	3120      	adds	r1, #32
	rv = rv << 8 | ptr[0];
 800fee4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800fee8:	428b      	cmp	r3, r1
 800feea:	d1bd      	bne.n	800fe68 <find_volume+0x324>
	rv = rv << 8 | ptr[1];
 800feec:	f894 3221 	ldrb.w	r3, [r4, #545]	; 0x221
	rv = rv << 8 | ptr[2];
 800fef0:	f8b4 1222 	ldrh.w	r1, [r4, #546]	; 0x222
 800fef4:	f8b4 521e 	ldrh.w	r5, [r4, #542]	; 0x21e
	rv = rv << 8 | ptr[1];
 800fef8:	f894 021d 	ldrb.w	r0, [r4, #541]	; 0x21d
	rv = rv << 8 | ptr[0];
 800fefc:	f894 221c 	ldrb.w	r2, [r4, #540]	; 0x21c
	rv = rv << 8 | ptr[1];
 800ff00:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
	rv = rv << 8 | ptr[0];
 800ff04:	f894 3220 	ldrb.w	r3, [r4, #544]	; 0x220
	rv = rv << 8 | ptr[1];
 800ff08:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
	rv = rv << 8 | ptr[0];
 800ff0c:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 800ff10:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800ff14:	e9c4 3204 	strd	r3, r2, [r4, #16]
 800ff18:	e7a6      	b.n	800fe68 <find_volume+0x324>
 800ff1a:	bf00      	nop
 800ff1c:	41615252 	.word	0x41615252

0800ff20 <dir_sdi>:
	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800ff20:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800ff24:	d274      	bcs.n	8010010 <dir_sdi+0xf0>
 800ff26:	06ca      	lsls	r2, r1, #27
{
 800ff28:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ff2c:	460c      	mov	r4, r1
	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800ff2e:	d151      	bne.n	800ffd4 <dir_sdi+0xb4>
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800ff30:	6885      	ldr	r5, [r0, #8]
	FATFS *fs = dp->obj.fs;
 800ff32:	f8d0 8000 	ldr.w	r8, [r0]
	dp->dptr = ofs;				/* Set current offset */
 800ff36:	6141      	str	r1, [r0, #20]
 800ff38:	4607      	mov	r7, r0
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800ff3a:	2d00      	cmp	r5, #0
 800ff3c:	d04d      	beq.n	800ffda <dir_sdi+0xba>
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800ff3e:	f8b8 300a 	ldrh.w	r3, [r8, #10]
		while (ofs >= csz) {				/* Follow cluster chain */
 800ff42:	ebb4 2f43 	cmp.w	r4, r3, lsl #9
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800ff46:	ea4f 2943 	mov.w	r9, r3, lsl #9
		while (ofs >= csz) {				/* Follow cluster chain */
 800ff4a:	f0c0 8099 	bcc.w	8010080 <dir_sdi+0x160>
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800ff4e:	2d01      	cmp	r5, #1
 800ff50:	d940      	bls.n	800ffd4 <dir_sdi+0xb4>
 800ff52:	4646      	mov	r6, r8
 800ff54:	e03b      	b.n	800ffce <dir_sdi+0xae>
		switch (fs->fs_type) {
 800ff56:	7833      	ldrb	r3, [r6, #0]
 800ff58:	2b02      	cmp	r3, #2
 800ff5a:	d07a      	beq.n	8010052 <dir_sdi+0x132>
 800ff5c:	2b03      	cmp	r3, #3
 800ff5e:	d05f      	beq.n	8010020 <dir_sdi+0x100>
 800ff60:	2b01      	cmp	r3, #1
 800ff62:	d137      	bne.n	800ffd4 <dir_sdi+0xb4>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ff64:	6a73      	ldr	r3, [r6, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 800ff66:	6b32      	ldr	r2, [r6, #48]	; 0x30
			bc = (UINT)clst; bc += bc / 2;
 800ff68:	eb05 0a55 	add.w	sl, r5, r5, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ff6c:	eb03 215a 	add.w	r1, r3, sl, lsr #9
	if (sector != fs->winsect) {	/* Window offset changed? */
 800ff70:	4291      	cmp	r1, r2
 800ff72:	d006      	beq.n	800ff82 <dir_sdi+0x62>
 800ff74:	4630      	mov	r0, r6
 800ff76:	f7ff f879 	bl	800f06c <move_window.part.0>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ff7a:	2800      	cmp	r0, #0
 800ff7c:	d17d      	bne.n	801007a <dir_sdi+0x15a>
 800ff7e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800ff80:	6b32      	ldr	r2, [r6, #48]	; 0x30
			wc = fs->win[bc++ % SS(fs)];
 800ff82:	f3ca 0008 	ubfx	r0, sl, #0, #9
 800ff86:	f10a 0a01 	add.w	sl, sl, #1
 800ff8a:	4430      	add	r0, r6
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ff8c:	eb03 215a 	add.w	r1, r3, sl, lsr #9
	if (sector != fs->winsect) {	/* Window offset changed? */
 800ff90:	4291      	cmp	r1, r2
			wc = fs->win[bc++ % SS(fs)];
 800ff92:	f890 b034 	ldrb.w	fp, [r0, #52]	; 0x34
	if (sector != fs->winsect) {	/* Window offset changed? */
 800ff96:	d004      	beq.n	800ffa2 <dir_sdi+0x82>
 800ff98:	4630      	mov	r0, r6
 800ff9a:	f7ff f867 	bl	800f06c <move_window.part.0>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ff9e:	2800      	cmp	r0, #0
 800ffa0:	d16b      	bne.n	801007a <dir_sdi+0x15a>
			wc |= fs->win[bc % SS(fs)] << 8;
 800ffa2:	f3ca 0a08 	ubfx	sl, sl, #0, #9
 800ffa6:	4456      	add	r6, sl
 800ffa8:	f896 3034 	ldrb.w	r3, [r6, #52]	; 0x34
 800ffac:	ea4b 2b03 	orr.w	fp, fp, r3, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800ffb0:	07eb      	lsls	r3, r5, #31
 800ffb2:	d573      	bpl.n	801009c <dir_sdi+0x17c>
 800ffb4:	ea4f 151b 	mov.w	r5, fp, lsr #4
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800ffb8:	2d01      	cmp	r5, #1
 800ffba:	d90b      	bls.n	800ffd4 <dir_sdi+0xb4>
 800ffbc:	f8d8 3018 	ldr.w	r3, [r8, #24]
 800ffc0:	42ab      	cmp	r3, r5
 800ffc2:	d907      	bls.n	800ffd4 <dir_sdi+0xb4>
			ofs -= csz;
 800ffc4:	eba4 0409 	sub.w	r4, r4, r9
		while (ofs >= csz) {				/* Follow cluster chain */
 800ffc8:	45a1      	cmp	r9, r4
 800ffca:	d85b      	bhi.n	8010084 <dir_sdi+0x164>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800ffcc:	683e      	ldr	r6, [r7, #0]
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800ffce:	69b3      	ldr	r3, [r6, #24]
 800ffd0:	42ab      	cmp	r3, r5
 800ffd2:	d8c0      	bhi.n	800ff56 <dir_sdi+0x36>
		switch (fs->fs_type) {
 800ffd4:	2002      	movs	r0, #2
}
 800ffd6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800ffda:	f898 3000 	ldrb.w	r3, [r8]
 800ffde:	2b02      	cmp	r3, #2
 800ffe0:	d818      	bhi.n	8010014 <dir_sdi+0xf4>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800ffe2:	f8b8 3008 	ldrh.w	r3, [r8, #8]
 800ffe6:	ebb3 1f54 	cmp.w	r3, r4, lsr #5
 800ffea:	d9f3      	bls.n	800ffd4 <dir_sdi+0xb4>
		dp->sect = fs->dirbase;
 800ffec:	f8d8 1028 	ldr.w	r1, [r8, #40]	; 0x28
 800fff0:	61f9      	str	r1, [r7, #28]
	dp->clust = clst;					/* Current cluster# */
 800fff2:	61bd      	str	r5, [r7, #24]
	if (!dp->sect) return FR_INT_ERR;
 800fff4:	2900      	cmp	r1, #0
 800fff6:	d0ed      	beq.n	800ffd4 <dir_sdi+0xb4>
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800fff8:	f108 0834 	add.w	r8, r8, #52	; 0x34
 800fffc:	f3c4 0308 	ubfx	r3, r4, #0, #9
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8010000:	eb01 2154 	add.w	r1, r1, r4, lsr #9
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8010004:	4443      	add	r3, r8
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8010006:	e9c7 1307 	strd	r1, r3, [r7, #28]
	return FR_OK;
 801000a:	2000      	movs	r0, #0
}
 801000c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return FR_INT_ERR;
 8010010:	2002      	movs	r0, #2
}
 8010012:	4770      	bx	lr
		clst = fs->dirbase;
 8010014:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28
	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8010018:	2b00      	cmp	r3, #0
 801001a:	d0e2      	beq.n	800ffe2 <dir_sdi+0xc2>
 801001c:	461d      	mov	r5, r3
 801001e:	e78e      	b.n	800ff3e <dir_sdi+0x1e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8010020:	6a71      	ldr	r1, [r6, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 8010022:	6b33      	ldr	r3, [r6, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8010024:	eb01 11d5 	add.w	r1, r1, r5, lsr #7
	if (sector != fs->winsect) {	/* Window offset changed? */
 8010028:	4299      	cmp	r1, r3
 801002a:	d003      	beq.n	8010034 <dir_sdi+0x114>
 801002c:	4630      	mov	r0, r6
 801002e:	f7ff f81d 	bl	800f06c <move_window.part.0>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8010032:	bb10      	cbnz	r0, 801007a <dir_sdi+0x15a>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8010034:	00ad      	lsls	r5, r5, #2
 8010036:	f405 75fe 	and.w	r5, r5, #508	; 0x1fc
 801003a:	3634      	adds	r6, #52	; 0x34
 801003c:	1972      	adds	r2, r6, r5
	rv = rv << 8 | ptr[0];
 801003e:	5d75      	ldrb	r5, [r6, r5]
	rv = rv << 8 | ptr[2];
 8010040:	8851      	ldrh	r1, [r2, #2]
	rv = rv << 8 | ptr[1];
 8010042:	7853      	ldrb	r3, [r2, #1]
 8010044:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	rv = rv << 8 | ptr[0];
 8010048:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 801004c:	f025 4570 	bic.w	r5, r5, #4026531840	; 0xf0000000
			break;
 8010050:	e7b2      	b.n	800ffb8 <dir_sdi+0x98>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8010052:	6a71      	ldr	r1, [r6, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 8010054:	6b33      	ldr	r3, [r6, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8010056:	eb01 2115 	add.w	r1, r1, r5, lsr #8
	if (sector != fs->winsect) {	/* Window offset changed? */
 801005a:	4299      	cmp	r1, r3
 801005c:	d003      	beq.n	8010066 <dir_sdi+0x146>
 801005e:	4630      	mov	r0, r6
 8010060:	f7ff f804 	bl	800f06c <move_window.part.0>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8010064:	b948      	cbnz	r0, 801007a <dir_sdi+0x15a>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8010066:	006d      	lsls	r5, r5, #1
 8010068:	f405 75ff 	and.w	r5, r5, #510	; 0x1fe
 801006c:	3634      	adds	r6, #52	; 0x34
 801006e:	1973      	adds	r3, r6, r5
	rv = rv << 8 | ptr[0];
 8010070:	5d75      	ldrb	r5, [r6, r5]
 8010072:	785b      	ldrb	r3, [r3, #1]
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8010074:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
			break;
 8010078:	e79e      	b.n	800ffb8 <dir_sdi+0x98>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 801007a:	2001      	movs	r0, #1
}
 801007c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010080:	f8d8 3018 	ldr.w	r3, [r8, #24]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8010084:	3b02      	subs	r3, #2
	clst -= 2;
 8010086:	1eaa      	subs	r2, r5, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8010088:	429a      	cmp	r2, r3
 801008a:	d20a      	bcs.n	80100a2 <dir_sdi+0x182>
	return clst * fs->csize + fs->database;
 801008c:	f8b8 100a 	ldrh.w	r1, [r8, #10]
 8010090:	f8d8 302c 	ldr.w	r3, [r8, #44]	; 0x2c
 8010094:	fb02 3101 	mla	r1, r2, r1, r3
		dp->sect = clust2sect(fs, clst);
 8010098:	61f9      	str	r1, [r7, #28]
 801009a:	e7aa      	b.n	800fff2 <dir_sdi+0xd2>
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 801009c:	f3cb 050b 	ubfx	r5, fp, #0, #12
 80100a0:	e78a      	b.n	800ffb8 <dir_sdi+0x98>
		dp->sect = clust2sect(fs, clst);
 80100a2:	2300      	movs	r3, #0
 80100a4:	e9c7 5306 	strd	r5, r3, [r7, #24]
	if (!dp->sect) return FR_INT_ERR;
 80100a8:	e794      	b.n	800ffd4 <dir_sdi+0xb4>
 80100aa:	bf00      	nop

080100ac <dir_find>:
{
 80100ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80100b0:	2100      	movs	r1, #0
{
 80100b2:	b085      	sub	sp, #20
	FATFS *fs = dp->obj.fs;
 80100b4:	6806      	ldr	r6, [r0, #0]
{
 80100b6:	4604      	mov	r4, r0
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80100b8:	f7ff ff32 	bl	800ff20 <dir_sdi>
	if (res != FR_OK) return res;
 80100bc:	4681      	mov	r9, r0
 80100be:	b9e0      	cbnz	r0, 80100fa <dir_find+0x4e>
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80100c0:	f04f 33ff 	mov.w	r3, #4294967295
 80100c4:	f04f 08ff 	mov.w	r8, #255	; 0xff
 80100c8:	69e7      	ldr	r7, [r4, #28]
 80100ca:	6323      	str	r3, [r4, #48]	; 0x30
 80100cc:	46c1      	mov	r9, r8
			if (uc != 0xFFFF) return 0;		/* Check filler */
 80100ce:	f64f 7bff 	movw	fp, #65535	; 0xffff
	if (sector != fs->winsect) {	/* Window offset changed? */
 80100d2:	6b35      	ldr	r5, [r6, #48]	; 0x30
 80100d4:	42bd      	cmp	r5, r7
 80100d6:	d015      	beq.n	8010104 <dir_find+0x58>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80100d8:	78f3      	ldrb	r3, [r6, #3]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80100da:	f106 0134 	add.w	r1, r6, #52	; 0x34
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80100de:	2b00      	cmp	r3, #0
 80100e0:	f040 809b 	bne.w	801021a <dir_find+0x16e>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80100e4:	7870      	ldrb	r0, [r6, #1]
 80100e6:	2301      	movs	r3, #1
 80100e8:	463a      	mov	r2, r7
 80100ea:	f7fe fea1 	bl	800ee30 <disk_read>
 80100ee:	b140      	cbz	r0, 8010102 <dir_find+0x56>
			fs->winsect = sector;
 80100f0:	f04f 33ff 	mov.w	r3, #4294967295
 80100f4:	6333      	str	r3, [r6, #48]	; 0x30
				res = FR_DISK_ERR;
 80100f6:	f04f 0901 	mov.w	r9, #1
}
 80100fa:	4648      	mov	r0, r9
 80100fc:	b005      	add	sp, #20
 80100fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			fs->winsect = sector;
 8010102:	6337      	str	r7, [r6, #48]	; 0x30
		c = dp->dir[DIR_Name];
 8010104:	6a25      	ldr	r5, [r4, #32]
 8010106:	782f      	ldrb	r7, [r5, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8010108:	2f00      	cmp	r7, #0
 801010a:	d03d      	beq.n	8010188 <dir_find+0xdc>
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 801010c:	7aea      	ldrb	r2, [r5, #11]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 801010e:	2fe5      	cmp	r7, #229	; 0xe5
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8010110:	f002 033f 	and.w	r3, r2, #63	; 0x3f
 8010114:	71a3      	strb	r3, [r4, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8010116:	d004      	beq.n	8010122 <dir_find+0x76>
 8010118:	0712      	lsls	r2, r2, #28
 801011a:	d53b      	bpl.n	8010194 <dir_find+0xe8>
 801011c:	2b0f      	cmp	r3, #15
 801011e:	f000 80a6 	beq.w	801026e <dir_find+0x1c2>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8010122:	f04f 33ff 	mov.w	r3, #4294967295
 8010126:	6323      	str	r3, [r4, #48]	; 0x30
 8010128:	f04f 09ff 	mov.w	r9, #255	; 0xff
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 801012c:	6965      	ldr	r5, [r4, #20]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 801012e:	69e7      	ldr	r7, [r4, #28]
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8010130:	3520      	adds	r5, #32
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8010132:	b34f      	cbz	r7, 8010188 <dir_find+0xdc>
 8010134:	f5b5 1f00 	cmp.w	r5, #2097152	; 0x200000
 8010138:	d226      	bcs.n	8010188 <dir_find+0xdc>
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 801013a:	f3c5 0208 	ubfx	r2, r5, #0, #9
	FATFS *fs = dp->obj.fs;
 801013e:	6823      	ldr	r3, [r4, #0]
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8010140:	b93a      	cbnz	r2, 8010152 <dir_find+0xa6>
		if (!dp->clust) {		/* Static table */
 8010142:	69a1      	ldr	r1, [r4, #24]
		dp->sect++;				/* Next sector */
 8010144:	3701      	adds	r7, #1
 8010146:	61e7      	str	r7, [r4, #28]
		if (!dp->clust) {		/* Static table */
 8010148:	b941      	cbnz	r1, 801015c <dir_find+0xb0>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 801014a:	8919      	ldrh	r1, [r3, #8]
 801014c:	ebb1 1f55 	cmp.w	r1, r5, lsr #5
 8010150:	d918      	bls.n	8010184 <dir_find+0xd8>
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8010152:	3334      	adds	r3, #52	; 0x34
 8010154:	4413      	add	r3, r2
 8010156:	6223      	str	r3, [r4, #32]
	dp->dptr = ofs;						/* Current entry */
 8010158:	6165      	str	r5, [r4, #20]
	} while (res == FR_OK);
 801015a:	e7ba      	b.n	80100d2 <dir_find+0x26>
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 801015c:	8958      	ldrh	r0, [r3, #10]
 801015e:	3801      	subs	r0, #1
 8010160:	ea10 2055 	ands.w	r0, r0, r5, lsr #9
 8010164:	d1f5      	bne.n	8010152 <dir_find+0xa6>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8010166:	4618      	mov	r0, r3
 8010168:	9201      	str	r2, [sp, #4]
 801016a:	9300      	str	r3, [sp, #0]
 801016c:	f7ff f854 	bl	800f218 <get_fat.isra.0>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8010170:	2801      	cmp	r0, #1
 8010172:	f240 8129 	bls.w	80103c8 <dir_find+0x31c>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8010176:	1c43      	adds	r3, r0, #1
 8010178:	d0bd      	beq.n	80100f6 <dir_find+0x4a>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 801017a:	9b00      	ldr	r3, [sp, #0]
 801017c:	6999      	ldr	r1, [r3, #24]
 801017e:	4288      	cmp	r0, r1
 8010180:	f0c0 8114 	bcc.w	80103ac <dir_find+0x300>
				dp->sect = 0; return FR_NO_FILE;
 8010184:	2300      	movs	r3, #0
 8010186:	61e3      	str	r3, [r4, #28]
 8010188:	f04f 0904 	mov.w	r9, #4
}
 801018c:	4648      	mov	r0, r9
 801018e:	b005      	add	sp, #20
 8010190:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (a == AM_LFN) {			/* An LFN entry is found */
 8010194:	2b0f      	cmp	r3, #15
 8010196:	d06a      	beq.n	801026e <dir_find+0x1c2>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8010198:	f1b9 0f00 	cmp.w	r9, #0
 801019c:	f000 80bc 	beq.w	8010318 <dir_find+0x26c>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 80101a0:	f894 902f 	ldrb.w	r9, [r4, #47]	; 0x2f
 80101a4:	f019 0901 	ands.w	r9, r9, #1
 80101a8:	d1bb      	bne.n	8010122 <dir_find+0x76>
	} while (--cnt && r == 0);
 80101aa:	782a      	ldrb	r2, [r5, #0]
 80101ac:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 80101b0:	429a      	cmp	r2, r3
 80101b2:	d1b6      	bne.n	8010122 <dir_find+0x76>
 80101b4:	f894 2025 	ldrb.w	r2, [r4, #37]	; 0x25
 80101b8:	786b      	ldrb	r3, [r5, #1]
 80101ba:	429a      	cmp	r2, r3
 80101bc:	d1b1      	bne.n	8010122 <dir_find+0x76>
 80101be:	f894 2026 	ldrb.w	r2, [r4, #38]	; 0x26
 80101c2:	78ab      	ldrb	r3, [r5, #2]
 80101c4:	429a      	cmp	r2, r3
 80101c6:	d1ac      	bne.n	8010122 <dir_find+0x76>
 80101c8:	78ea      	ldrb	r2, [r5, #3]
 80101ca:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
 80101ce:	429a      	cmp	r2, r3
 80101d0:	d1a7      	bne.n	8010122 <dir_find+0x76>
 80101d2:	792a      	ldrb	r2, [r5, #4]
 80101d4:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 80101d8:	429a      	cmp	r2, r3
 80101da:	d1a2      	bne.n	8010122 <dir_find+0x76>
 80101dc:	796a      	ldrb	r2, [r5, #5]
 80101de:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
 80101e2:	429a      	cmp	r2, r3
 80101e4:	d19d      	bne.n	8010122 <dir_find+0x76>
 80101e6:	79aa      	ldrb	r2, [r5, #6]
 80101e8:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
 80101ec:	429a      	cmp	r2, r3
 80101ee:	d198      	bne.n	8010122 <dir_find+0x76>
 80101f0:	79ea      	ldrb	r2, [r5, #7]
 80101f2:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
 80101f6:	429a      	cmp	r2, r3
 80101f8:	d193      	bne.n	8010122 <dir_find+0x76>
 80101fa:	7a2a      	ldrb	r2, [r5, #8]
 80101fc:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8010200:	429a      	cmp	r2, r3
 8010202:	d18e      	bne.n	8010122 <dir_find+0x76>
 8010204:	7a6a      	ldrb	r2, [r5, #9]
 8010206:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 801020a:	429a      	cmp	r2, r3
 801020c:	d189      	bne.n	8010122 <dir_find+0x76>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 801020e:	7aaa      	ldrb	r2, [r5, #10]
 8010210:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
 8010214:	429a      	cmp	r2, r3
 8010216:	d184      	bne.n	8010122 <dir_find+0x76>
 8010218:	e76f      	b.n	80100fa <dir_find+0x4e>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 801021a:	7870      	ldrb	r0, [r6, #1]
 801021c:	9100      	str	r1, [sp, #0]
 801021e:	2301      	movs	r3, #1
 8010220:	462a      	mov	r2, r5
 8010222:	f7fe fe13 	bl	800ee4c <disk_write>
 8010226:	9900      	ldr	r1, [sp, #0]
 8010228:	2800      	cmp	r0, #0
 801022a:	f47f af64 	bne.w	80100f6 <dir_find+0x4a>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 801022e:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8010230:	69f3      	ldr	r3, [r6, #28]
			fs->wflag = 0;
 8010232:	70f0      	strb	r0, [r6, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8010234:	1aaa      	subs	r2, r5, r2
 8010236:	429a      	cmp	r2, r3
 8010238:	f4bf af54 	bcs.w	80100e4 <dir_find+0x38>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801023c:	f896 a002 	ldrb.w	sl, [r6, #2]
 8010240:	f1ba 0f01 	cmp.w	sl, #1
 8010244:	f67f af4e 	bls.w	80100e4 <dir_find+0x38>
 8010248:	9400      	str	r4, [sp, #0]
 801024a:	460c      	mov	r4, r1
 801024c:	e000      	b.n	8010250 <dir_find+0x1a4>
 801024e:	69f3      	ldr	r3, [r6, #28]
					disk_write(fs->drv, fs->win, wsect, 1);
 8010250:	7870      	ldrb	r0, [r6, #1]
					wsect += fs->fsize;
 8010252:	441d      	add	r5, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8010254:	f10a 3aff 	add.w	sl, sl, #4294967295
					disk_write(fs->drv, fs->win, wsect, 1);
 8010258:	462a      	mov	r2, r5
 801025a:	2301      	movs	r3, #1
 801025c:	4621      	mov	r1, r4
 801025e:	f7fe fdf5 	bl	800ee4c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8010262:	f1ba 0f01 	cmp.w	sl, #1
 8010266:	d1f2      	bne.n	801024e <dir_find+0x1a2>
 8010268:	4621      	mov	r1, r4
 801026a:	9c00      	ldr	r4, [sp, #0]
 801026c:	e73a      	b.n	80100e4 <dir_find+0x38>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 801026e:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
 8010272:	0658      	lsls	r0, r3, #25
 8010274:	f53f af5a 	bmi.w	801012c <dir_find+0x80>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8010278:	0679      	lsls	r1, r7, #25
 801027a:	d548      	bpl.n	801030e <dir_find+0x262>
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 801027c:	6963      	ldr	r3, [r4, #20]
						sum = dp->dir[LDIR_Chksum];
 801027e:	f895 800d 	ldrb.w	r8, [r5, #13]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8010282:	6323      	str	r3, [r4, #48]	; 0x30
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8010284:	f007 07bf 	and.w	r7, r7, #191	; 0xbf
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8010288:	7b6b      	ldrb	r3, [r5, #13]
 801028a:	4543      	cmp	r3, r8
 801028c:	d141      	bne.n	8010312 <dir_find+0x266>
	rv = rv << 8 | ptr[0];
 801028e:	7eea      	ldrb	r2, [r5, #27]
 8010290:	7eab      	ldrb	r3, [r5, #26]
	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8010292:	ea53 2302 	orrs.w	r3, r3, r2, lsl #8
 8010296:	d13c      	bne.n	8010312 <dir_find+0x266>
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8010298:	f895 a000 	ldrb.w	sl, [r5]
 801029c:	4b55      	ldr	r3, [pc, #340]	; (80103f4 <dir_find+0x348>)
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 801029e:	68f0      	ldr	r0, [r6, #12]
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80102a0:	9702      	str	r7, [sp, #8]
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 80102a2:	f00a 0a3f 	and.w	sl, sl, #63	; 0x3f
 80102a6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80102aa:	eb0a 024a 	add.w	r2, sl, sl, lsl #1
 80102ae:	eb0a 0a82 	add.w	sl, sl, r2, lsl #2
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80102b2:	2101      	movs	r1, #1
 80102b4:	462f      	mov	r7, r5
 80102b6:	9401      	str	r4, [sp, #4]
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 80102b8:	9003      	str	r0, [sp, #12]
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80102ba:	4654      	mov	r4, sl
 80102bc:	9600      	str	r6, [sp, #0]
 80102be:	469a      	mov	sl, r3
 80102c0:	4605      	mov	r5, r0
 80102c2:	460b      	mov	r3, r1
 80102c4:	e010      	b.n	80102e8 <dir_find+0x23c>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 80102c6:	2cfe      	cmp	r4, #254	; 0xfe
 80102c8:	d81c      	bhi.n	8010304 <dir_find+0x258>
 80102ca:	f002 f961 	bl	8012590 <ff_wtoupper>
 80102ce:	4684      	mov	ip, r0
 80102d0:	f835 0014 	ldrh.w	r0, [r5, r4, lsl #1]
 80102d4:	4664      	mov	r4, ip
 80102d6:	f002 f95b 	bl	8012590 <ff_wtoupper>
 80102da:	4284      	cmp	r4, r0
 80102dc:	d112      	bne.n	8010304 <dir_find+0x258>
	rv = rv << 8 | ptr[0];
 80102de:	464b      	mov	r3, r9
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 80102e0:	4634      	mov	r4, r6
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80102e2:	4a45      	ldr	r2, [pc, #276]	; (80103f8 <dir_find+0x34c>)
 80102e4:	4552      	cmp	r2, sl
 80102e6:	d072      	beq.n	80103ce <dir_find+0x322>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 80102e8:	f81a 2b01 	ldrb.w	r2, [sl], #1
 80102ec:	18b8      	adds	r0, r7, r2
	rv = rv << 8 | ptr[0];
 80102ee:	f817 9002 	ldrb.w	r9, [r7, r2]
 80102f2:	7840      	ldrb	r0, [r0, #1]
 80102f4:	ea49 2900 	orr.w	r9, r9, r0, lsl #8
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 80102f8:	1c66      	adds	r6, r4, #1
 80102fa:	4648      	mov	r0, r9
		if (wc) {
 80102fc:	2b00      	cmp	r3, #0
 80102fe:	d1e2      	bne.n	80102c6 <dir_find+0x21a>
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8010300:	45d9      	cmp	r9, fp
 8010302:	d0ee      	beq.n	80102e2 <dir_find+0x236>
 8010304:	e9dd 6400 	ldrd	r6, r4, [sp]
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8010308:	f04f 09ff 	mov.w	r9, #255	; 0xff
 801030c:	e70e      	b.n	801012c <dir_find+0x80>
 801030e:	45b9      	cmp	r9, r7
 8010310:	d0ba      	beq.n	8010288 <dir_find+0x1dc>
 8010312:	f04f 09ff 	mov.w	r9, #255	; 0xff
 8010316:	e709      	b.n	801012c <dir_find+0x80>
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8010318:	782a      	ldrb	r2, [r5, #0]
 801031a:	7869      	ldrb	r1, [r5, #1]
 801031c:	01d3      	lsls	r3, r2, #7
 801031e:	ea43 0352 	orr.w	r3, r3, r2, lsr #1
 8010322:	185a      	adds	r2, r3, r1
 8010324:	f3c2 0346 	ubfx	r3, r2, #1, #7
 8010328:	78a9      	ldrb	r1, [r5, #2]
 801032a:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 801032e:	fa51 f383 	uxtab	r3, r1, r3
 8010332:	f3c3 0246 	ubfx	r2, r3, #1, #7
 8010336:	78e9      	ldrb	r1, [r5, #3]
 8010338:	ea42 12c3 	orr.w	r2, r2, r3, lsl #7
 801033c:	fa51 f382 	uxtab	r3, r1, r2
 8010340:	f3c3 0246 	ubfx	r2, r3, #1, #7
 8010344:	7929      	ldrb	r1, [r5, #4]
 8010346:	ea42 12c3 	orr.w	r2, r2, r3, lsl #7
 801034a:	fa51 f282 	uxtab	r2, r1, r2
 801034e:	f3c2 0346 	ubfx	r3, r2, #1, #7
 8010352:	7969      	ldrb	r1, [r5, #5]
 8010354:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 8010358:	fa51 f283 	uxtab	r2, r1, r3
 801035c:	f3c2 0346 	ubfx	r3, r2, #1, #7
 8010360:	79a9      	ldrb	r1, [r5, #6]
 8010362:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 8010366:	fa51 f383 	uxtab	r3, r1, r3
 801036a:	f3c3 0246 	ubfx	r2, r3, #1, #7
 801036e:	79e9      	ldrb	r1, [r5, #7]
 8010370:	ea42 12c3 	orr.w	r2, r2, r3, lsl #7
 8010374:	fa51 f382 	uxtab	r3, r1, r2
 8010378:	f3c3 0246 	ubfx	r2, r3, #1, #7
 801037c:	7a29      	ldrb	r1, [r5, #8]
 801037e:	ea42 12c3 	orr.w	r2, r2, r3, lsl #7
 8010382:	fa51 f282 	uxtab	r2, r1, r2
 8010386:	f3c2 0346 	ubfx	r3, r2, #1, #7
 801038a:	7a69      	ldrb	r1, [r5, #9]
 801038c:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 8010390:	fa51 f283 	uxtab	r2, r1, r3
 8010394:	f3c2 0346 	ubfx	r3, r2, #1, #7
 8010398:	7aa9      	ldrb	r1, [r5, #10]
 801039a:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 801039e:	fa51 f383 	uxtab	r3, r1, r3
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 80103a2:	b2db      	uxtb	r3, r3
 80103a4:	4598      	cmp	r8, r3
 80103a6:	f47f aefb 	bne.w	80101a0 <dir_find+0xf4>
 80103aa:	e6a6      	b.n	80100fa <dir_find+0x4e>
	clst -= 2;
 80103ac:	1e87      	subs	r7, r0, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80103ae:	3902      	subs	r1, #2
 80103b0:	428f      	cmp	r7, r1
	return clst * fs->csize + fs->database;
 80103b2:	bf38      	it	cc
 80103b4:	6ad9      	ldrcc	r1, [r3, #44]	; 0x2c
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80103b6:	9a01      	ldr	r2, [sp, #4]
				dp->clust = clst;		/* Initialize data for new cluster */
 80103b8:	61a0      	str	r0, [r4, #24]
	return clst * fs->csize + fs->database;
 80103ba:	bf36      	itet	cc
 80103bc:	8958      	ldrhcc	r0, [r3, #10]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80103be:	4617      	movcs	r7, r2
	return clst * fs->csize + fs->database;
 80103c0:	fb07 1700 	mlacc	r7, r7, r0, r1
				dp->sect = clust2sect(fs, clst);
 80103c4:	61e7      	str	r7, [r4, #28]
 80103c6:	e6c4      	b.n	8010152 <dir_find+0xa6>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80103c8:	f04f 0902 	mov.w	r9, #2
 80103cc:	e695      	b.n	80100fa <dir_find+0x4e>
	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 80103ce:	463d      	mov	r5, r7
 80103d0:	4619      	mov	r1, r3
 80103d2:	782b      	ldrb	r3, [r5, #0]
 80103d4:	9e00      	ldr	r6, [sp, #0]
 80103d6:	9f02      	ldr	r7, [sp, #8]
 80103d8:	065a      	lsls	r2, r3, #25
 80103da:	46a2      	mov	sl, r4
 80103dc:	9c01      	ldr	r4, [sp, #4]
 80103de:	d505      	bpl.n	80103ec <dir_find+0x340>
 80103e0:	b121      	cbz	r1, 80103ec <dir_find+0x340>
 80103e2:	9b03      	ldr	r3, [sp, #12]
 80103e4:	f833 301a 	ldrh.w	r3, [r3, sl, lsl #1]
 80103e8:	2b00      	cmp	r3, #0
 80103ea:	d192      	bne.n	8010312 <dir_find+0x266>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 80103ec:	3f01      	subs	r7, #1
 80103ee:	fa5f f987 	uxtb.w	r9, r7
 80103f2:	e69b      	b.n	801012c <dir_find+0x80>
 80103f4:	0801b97c 	.word	0x0801b97c
 80103f8:	0801b989 	.word	0x0801b989

080103fc <follow_path>:
{
 80103fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010400:	b083      	sub	sp, #12
	FATFS *fs = obj->fs;
 8010402:	6803      	ldr	r3, [r0, #0]
 8010404:	9300      	str	r3, [sp, #0]
{
 8010406:	4606      	mov	r6, r0
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8010408:	460f      	mov	r7, r1
 801040a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801040e:	2b2f      	cmp	r3, #47	; 0x2f
 8010410:	d0fa      	beq.n	8010408 <follow_path+0xc>
 8010412:	2b5c      	cmp	r3, #92	; 0x5c
 8010414:	d0f8      	beq.n	8010408 <follow_path+0xc>
		obj->sclust = 0;					/* Start from root directory */
 8010416:	2100      	movs	r1, #0
 8010418:	60b1      	str	r1, [r6, #8]
	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 801041a:	783b      	ldrb	r3, [r7, #0]
 801041c:	2b1f      	cmp	r3, #31
 801041e:	f240 8140 	bls.w	80106a2 <follow_path+0x2a6>
 8010422:	9a00      	ldr	r2, [sp, #0]
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8010424:	f8d2 b00c 	ldr.w	fp, [r2, #12]
		if (w < ' ') break;				/* Break if end of the path name */
 8010428:	2b1f      	cmp	r3, #31
		w = p[si++];					/* Get a character */
 801042a:	b298      	uxth	r0, r3
		if (w < ' ') break;				/* Break if end of the path name */
 801042c:	d941      	bls.n	80104b2 <follow_path+0xb6>
 801042e:	f1ab 0802 	sub.w	r8, fp, #2
 8010432:	46c1      	mov	r9, r8
 8010434:	46ba      	mov	sl, r7
		w = p[si++];					/* Get a character */
 8010436:	2501      	movs	r5, #1
 8010438:	e009      	b.n	801044e <follow_path+0x52>
		lfn[di++] = w;					/* Store the Unicode character */
 801043a:	f829 0f02 	strh.w	r0, [r9, #2]!
		w = p[si++];					/* Get a character */
 801043e:	f81a 0f01 	ldrb.w	r0, [sl, #1]!
		if (w < ' ') break;				/* Break if end of the path name */
 8010442:	281f      	cmp	r0, #31
		w = p[si++];					/* Get a character */
 8010444:	f105 0301 	add.w	r3, r5, #1
		if (w < ' ') break;				/* Break if end of the path name */
 8010448:	f240 80fc 	bls.w	8010644 <follow_path+0x248>
		w = p[si++];					/* Get a character */
 801044c:	461d      	mov	r5, r3
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 801044e:	282f      	cmp	r0, #47	; 0x2f
 8010450:	f105 34ff 	add.w	r4, r5, #4294967295
 8010454:	d017      	beq.n	8010486 <follow_path+0x8a>
 8010456:	285c      	cmp	r0, #92	; 0x5c
 8010458:	d015      	beq.n	8010486 <follow_path+0x8a>
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 801045a:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 801045e:	d00e      	beq.n	801047e <follow_path+0x82>
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8010460:	2101      	movs	r1, #1
 8010462:	f002 f871 	bl	8012548 <ff_convert>
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8010466:	b150      	cbz	r0, 801047e <follow_path+0x82>
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8010468:	287f      	cmp	r0, #127	; 0x7f
 801046a:	d8e6      	bhi.n	801043a <follow_path+0x3e>
 801046c:	4a9c      	ldr	r2, [pc, #624]	; (80106e0 <follow_path+0x2e4>)
	while (*str && *str != chr) str++;
 801046e:	2322      	movs	r3, #34	; 0x22
 8010470:	e003      	b.n	801047a <follow_path+0x7e>
 8010472:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8010476:	2b00      	cmp	r3, #0
 8010478:	d0df      	beq.n	801043a <follow_path+0x3e>
 801047a:	4298      	cmp	r0, r3
 801047c:	d1f9      	bne.n	8010472 <follow_path+0x76>
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 801047e:	2006      	movs	r0, #6
}
 8010480:	b003      	add	sp, #12
 8010482:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010486:	443d      	add	r5, r7
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8010488:	782b      	ldrb	r3, [r5, #0]
 801048a:	2b2f      	cmp	r3, #47	; 0x2f
 801048c:	462f      	mov	r7, r5
 801048e:	f105 0501 	add.w	r5, r5, #1
 8010492:	d0f9      	beq.n	8010488 <follow_path+0x8c>
 8010494:	2b5c      	cmp	r3, #92	; 0x5c
 8010496:	d0f7      	beq.n	8010488 <follow_path+0x8c>
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8010498:	b15c      	cbz	r4, 80104b2 <follow_path+0xb6>
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 801049a:	f04f 0900 	mov.w	r9, #0
 801049e:	eb0b 0144 	add.w	r1, fp, r4, lsl #1
		w = lfn[di - 1];
 80104a2:	f831 3d02 	ldrh.w	r3, [r1, #-2]!
		if (w != ' ' && w != '.') break;
 80104a6:	2b20      	cmp	r3, #32
 80104a8:	d001      	beq.n	80104ae <follow_path+0xb2>
 80104aa:	2b2e      	cmp	r3, #46	; 0x2e
 80104ac:	d105      	bne.n	80104ba <follow_path+0xbe>
	while (di) {						/* Snip off trailing spaces and dots if exist */
 80104ae:	3c01      	subs	r4, #1
 80104b0:	d1f7      	bne.n	80104a2 <follow_path+0xa6>
	lfn[di] = 0;						/* LFN is created */
 80104b2:	2300      	movs	r3, #0
 80104b4:	f8ab 3000 	strh.w	r3, [fp]
 80104b8:	e7e1      	b.n	801047e <follow_path+0x82>
		*d++ = (BYTE)val;
 80104ba:	2320      	movs	r3, #32
 80104bc:	f04f 3120 	mov.w	r1, #538976288	; 0x20202020
	lfn[di] = 0;						/* LFN is created */
 80104c0:	2500      	movs	r5, #0
 80104c2:	f82b 5014 	strh.w	r5, [fp, r4, lsl #1]
		*d++ = (BYTE)val;
 80104c6:	6271      	str	r1, [r6, #36]	; 0x24
 80104c8:	62b1      	str	r1, [r6, #40]	; 0x28
 80104ca:	f886 302c 	strb.w	r3, [r6, #44]	; 0x2c
 80104ce:	f886 302d 	strb.w	r3, [r6, #45]	; 0x2d
 80104d2:	f886 302e 	strb.w	r3, [r6, #46]	; 0x2e
	} while (--cnt);
 80104d6:	e000      	b.n	80104da <follow_path+0xde>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 80104d8:	3501      	adds	r5, #1
 80104da:	f838 0f02 	ldrh.w	r0, [r8, #2]!
 80104de:	2820      	cmp	r0, #32
 80104e0:	d0fa      	beq.n	80104d8 <follow_path+0xdc>
 80104e2:	282e      	cmp	r0, #46	; 0x2e
 80104e4:	d0f8      	beq.n	80104d8 <follow_path+0xdc>
	if (si) cf |= NS_LOSS | NS_LFN;
 80104e6:	b10d      	cbz	r5, 80104ec <follow_path+0xf0>
 80104e8:	f049 0903 	orr.w	r9, r9, #3
 80104ec:	eb0b 0344 	add.w	r3, fp, r4, lsl #1
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 80104f0:	f833 2d02 	ldrh.w	r2, [r3, #-2]!
 80104f4:	2a2e      	cmp	r2, #46	; 0x2e
 80104f6:	d001      	beq.n	80104fc <follow_path+0x100>
 80104f8:	3c01      	subs	r4, #1
 80104fa:	d1f9      	bne.n	80104f0 <follow_path+0xf4>
		w = lfn[si++];					/* Get an LFN character */
 80104fc:	3501      	adds	r5, #1
		if (!w) break;					/* Break on end of the LFN */
 80104fe:	2800      	cmp	r0, #0
 8010500:	d04b      	beq.n	801059a <follow_path+0x19e>
 8010502:	4632      	mov	r2, r6
 8010504:	f04f 0800 	mov.w	r8, #0
 8010508:	465e      	mov	r6, fp
 801050a:	463b      	mov	r3, r7
 801050c:	46a3      	mov	fp, r4
 801050e:	f04f 0a08 	mov.w	sl, #8
 8010512:	4644      	mov	r4, r8
 8010514:	4617      	mov	r7, r2
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8010516:	2820      	cmp	r0, #32
 8010518:	d067      	beq.n	80105ea <follow_path+0x1ee>
 801051a:	282e      	cmp	r0, #46	; 0x2e
 801051c:	d068      	beq.n	80105f0 <follow_path+0x1f4>
		if (i >= ni || si == di) {		/* Extension or end of SFN */
 801051e:	45a2      	cmp	sl, r4
 8010520:	d974      	bls.n	801060c <follow_path+0x210>
 8010522:	455d      	cmp	r5, fp
 8010524:	d066      	beq.n	80105f4 <follow_path+0x1f8>
		if (w >= 0x80) {				/* Non ASCII character */
 8010526:	287f      	cmp	r0, #127	; 0x7f
 8010528:	f200 809b 	bhi.w	8010662 <follow_path+0x266>
	while (*str && *str != chr) str++;
 801052c:	496d      	ldr	r1, [pc, #436]	; (80106e4 <follow_path+0x2e8>)
 801052e:	222b      	movs	r2, #43	; 0x2b
 8010530:	e004      	b.n	801053c <follow_path+0x140>
 8010532:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8010536:	2a00      	cmp	r2, #0
 8010538:	f000 80bc 	beq.w	80106b4 <follow_path+0x2b8>
 801053c:	4282      	cmp	r2, r0
 801053e:	d1f8      	bne.n	8010532 <follow_path+0x136>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8010540:	f049 0903 	orr.w	r9, r9, #3
 8010544:	205f      	movs	r0, #95	; 0x5f
		dp->fn[i++] = (BYTE)w;
 8010546:	193a      	adds	r2, r7, r4
 8010548:	3401      	adds	r4, #1
 801054a:	f882 0024 	strb.w	r0, [r2, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 801054e:	f836 0015 	ldrh.w	r0, [r6, r5, lsl #1]
 8010552:	3501      	adds	r5, #1
		if (!w) break;					/* Break on end of the LFN */
 8010554:	2800      	cmp	r0, #0
 8010556:	d1de      	bne.n	8010516 <follow_path+0x11a>
 8010558:	463e      	mov	r6, r7
 801055a:	461f      	mov	r7, r3
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 801055c:	f896 3024 	ldrb.w	r3, [r6, #36]	; 0x24
 8010560:	2be5      	cmp	r3, #229	; 0xe5
 8010562:	bf04      	itt	eq
 8010564:	2305      	moveq	r3, #5
 8010566:	f886 3024 	strbeq.w	r3, [r6, #36]	; 0x24
	if (ni == 8) b <<= 2;
 801056a:	f1ba 0f08 	cmp.w	sl, #8
 801056e:	d06e      	beq.n	801064e <follow_path+0x252>
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8010570:	f008 030c 	and.w	r3, r8, #12
 8010574:	2b0c      	cmp	r3, #12
 8010576:	d052      	beq.n	801061e <follow_path+0x222>
 8010578:	f008 0803 	and.w	r8, r8, #3
 801057c:	f1b8 0f03 	cmp.w	r8, #3
 8010580:	d04d      	beq.n	801061e <follow_path+0x222>
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8010582:	f019 0f02 	tst.w	r9, #2
 8010586:	d108      	bne.n	801059a <follow_path+0x19e>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8010588:	f1b8 0f01 	cmp.w	r8, #1
 801058c:	bf08      	it	eq
 801058e:	f049 0910 	orreq.w	r9, r9, #16
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8010592:	2b04      	cmp	r3, #4
 8010594:	bf08      	it	eq
 8010596:	f049 0908 	orreq.w	r9, r9, #8
	dp->fn[NSFLAG] = cf;	/* SFN is created */
 801059a:	f886 902f 	strb.w	r9, [r6, #47]	; 0x2f
			res = dir_find(dp);				/* Find an object with the segment name */
 801059e:	4630      	mov	r0, r6
 80105a0:	f7ff fd84 	bl	80100ac <dir_find>
			ns = dp->fn[NSFLAG];
 80105a4:	f896 302f 	ldrb.w	r3, [r6, #47]	; 0x2f
			if (res != FR_OK) {				/* Failed to find the object */
 80105a8:	2800      	cmp	r0, #0
 80105aa:	d143      	bne.n	8010634 <follow_path+0x238>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80105ac:	075a      	lsls	r2, r3, #29
 80105ae:	f53f af67 	bmi.w	8010480 <follow_path+0x84>
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80105b2:	79b3      	ldrb	r3, [r6, #6]
 80105b4:	06db      	lsls	r3, r3, #27
 80105b6:	f140 808f 	bpl.w	80106d8 <follow_path+0x2dc>
	if (fs->fs_type == FS_FAT32) {
 80105ba:	9800      	ldr	r0, [sp, #0]
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80105bc:	6973      	ldr	r3, [r6, #20]
	if (fs->fs_type == FS_FAT32) {
 80105be:	7801      	ldrb	r1, [r0, #0]
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80105c0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80105c4:	f100 0334 	add.w	r3, r0, #52	; 0x34
 80105c8:	4413      	add	r3, r2
	if (fs->fs_type == FS_FAT32) {
 80105ca:	2903      	cmp	r1, #3
	rv = rv << 8 | ptr[0];
 80105cc:	7ed8      	ldrb	r0, [r3, #27]
 80105ce:	7e9a      	ldrb	r2, [r3, #26]
	cl = ld_word(dir + DIR_FstClusLO);
 80105d0:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
	if (fs->fs_type == FS_FAT32) {
 80105d4:	d105      	bne.n	80105e2 <follow_path+0x1e6>
	rv = rv << 8 | ptr[0];
 80105d6:	7d59      	ldrb	r1, [r3, #21]
 80105d8:	7d1b      	ldrb	r3, [r3, #20]
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80105da:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80105de:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80105e2:	60b2      	str	r2, [r6, #8]
		for (;;) {
 80105e4:	783b      	ldrb	r3, [r7, #0]
 80105e6:	6832      	ldr	r2, [r6, #0]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80105e8:	e71c      	b.n	8010424 <follow_path+0x28>
			cf |= NS_LOSS | NS_LFN; continue;
 80105ea:	f049 0903 	orr.w	r9, r9, #3
 80105ee:	e7ae      	b.n	801054e <follow_path+0x152>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 80105f0:	455d      	cmp	r5, fp
 80105f2:	d1fa      	bne.n	80105ea <follow_path+0x1ee>
			if (ni == 11) {				/* Long extension */
 80105f4:	f1ba 0f0b 	cmp.w	sl, #11
 80105f8:	d046      	beq.n	8010688 <follow_path+0x28c>
			b <<= 2; continue;
 80105fa:	ea4f 0888 	mov.w	r8, r8, lsl #2
 80105fe:	fa5f f888 	uxtb.w	r8, r8
 8010602:	465d      	mov	r5, fp
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8010604:	f04f 0a0b 	mov.w	sl, #11
 8010608:	2408      	movs	r4, #8
			b <<= 2; continue;
 801060a:	e7a0      	b.n	801054e <follow_path+0x152>
			if (ni == 11) {				/* Long extension */
 801060c:	f1ba 0f0b 	cmp.w	sl, #11
 8010610:	d03a      	beq.n	8010688 <follow_path+0x28c>
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8010612:	455d      	cmp	r5, fp
 8010614:	d0f1      	beq.n	80105fa <follow_path+0x1fe>
 8010616:	f049 0903 	orr.w	r9, r9, #3
			if (si > di) break;			/* No extension */
 801061a:	d89d      	bhi.n	8010558 <follow_path+0x15c>
 801061c:	e7ed      	b.n	80105fa <follow_path+0x1fe>
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 801061e:	f049 0902 	orr.w	r9, r9, #2
	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8010622:	f886 902f 	strb.w	r9, [r6, #47]	; 0x2f
			res = dir_find(dp);				/* Find an object with the segment name */
 8010626:	4630      	mov	r0, r6
 8010628:	f7ff fd40 	bl	80100ac <dir_find>
			ns = dp->fn[NSFLAG];
 801062c:	f896 302f 	ldrb.w	r3, [r6, #47]	; 0x2f
			if (res != FR_OK) {				/* Failed to find the object */
 8010630:	2800      	cmp	r0, #0
 8010632:	d0bb      	beq.n	80105ac <follow_path+0x1b0>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8010634:	2804      	cmp	r0, #4
 8010636:	f47f af23 	bne.w	8010480 <follow_path+0x84>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 801063a:	f013 0f04 	tst.w	r3, #4
 801063e:	bf08      	it	eq
 8010640:	2005      	moveq	r0, #5
 8010642:	e71d      	b.n	8010480 <follow_path+0x84>
	*path = &p[si];						/* Return pointer to the next segment */
 8010644:	441f      	add	r7, r3
 8010646:	462c      	mov	r4, r5
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8010648:	f04f 0904 	mov.w	r9, #4
 801064c:	e727      	b.n	801049e <follow_path+0xa2>
	if (ni == 8) b <<= 2;
 801064e:	ea4f 0888 	mov.w	r8, r8, lsl #2
 8010652:	f008 030c 	and.w	r3, r8, #12
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8010656:	2b0c      	cmp	r3, #12
 8010658:	d0e1      	beq.n	801061e <follow_path+0x222>
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 801065a:	f019 0f02 	tst.w	r9, #2
 801065e:	d098      	beq.n	8010592 <follow_path+0x196>
 8010660:	e79b      	b.n	801059a <follow_path+0x19e>
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8010662:	2100      	movs	r1, #0
 8010664:	9301      	str	r3, [sp, #4]
 8010666:	f001 ff6f 	bl	8012548 <ff_convert>
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 801066a:	9b01      	ldr	r3, [sp, #4]
 801066c:	b148      	cbz	r0, 8010682 <follow_path+0x286>
 801066e:	4a1e      	ldr	r2, [pc, #120]	; (80106e8 <follow_path+0x2ec>)
 8010670:	4410      	add	r0, r2
			cf |= NS_LFN;				/* Force create LFN entry */
 8010672:	f049 0902 	orr.w	r9, r9, #2
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8010676:	f810 0c80 	ldrb.w	r0, [r0, #-128]
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 801067a:	2800      	cmp	r0, #0
 801067c:	f43f af60 	beq.w	8010540 <follow_path+0x144>
 8010680:	e754      	b.n	801052c <follow_path+0x130>
			cf |= NS_LFN;				/* Force create LFN entry */
 8010682:	f049 0902 	orr.w	r9, r9, #2
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8010686:	e75b      	b.n	8010540 <follow_path+0x144>
				cf |= NS_LOSS | NS_LFN; break;
 8010688:	463e      	mov	r6, r7
 801068a:	461f      	mov	r7, r3
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 801068c:	f896 3024 	ldrb.w	r3, [r6, #36]	; 0x24
 8010690:	2be5      	cmp	r3, #229	; 0xe5
				cf |= NS_LOSS | NS_LFN; break;
 8010692:	f049 0903 	orr.w	r9, r9, #3
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8010696:	f47f af6b 	bne.w	8010570 <follow_path+0x174>
 801069a:	2305      	movs	r3, #5
 801069c:	f886 3024 	strb.w	r3, [r6, #36]	; 0x24
	if (ni == 8) b <<= 2;
 80106a0:	e766      	b.n	8010570 <follow_path+0x174>
		dp->fn[NSFLAG] = NS_NONAME;
 80106a2:	2380      	movs	r3, #128	; 0x80
		res = dir_sdi(dp, 0);
 80106a4:	4630      	mov	r0, r6
		dp->fn[NSFLAG] = NS_NONAME;
 80106a6:	f886 302f 	strb.w	r3, [r6, #47]	; 0x2f
}
 80106aa:	b003      	add	sp, #12
 80106ac:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		res = dir_sdi(dp, 0);
 80106b0:	f7ff bc36 	b.w	800ff20 <dir_sdi>
				if (IsUpper(w)) {		/* ASCII large capital */
 80106b4:	f1a0 0241 	sub.w	r2, r0, #65	; 0x41
 80106b8:	2a19      	cmp	r2, #25
 80106ba:	d803      	bhi.n	80106c4 <follow_path+0x2c8>
					b |= 2;
 80106bc:	f048 0802 	orr.w	r8, r8, #2
 80106c0:	b2c0      	uxtb	r0, r0
 80106c2:	e740      	b.n	8010546 <follow_path+0x14a>
					if (IsLower(w)) {	/* ASCII small capital */
 80106c4:	f1a0 0261 	sub.w	r2, r0, #97	; 0x61
 80106c8:	2a19      	cmp	r2, #25
						b |= 1; w -= 0x20;
 80106ca:	bf97      	itett	ls
 80106cc:	3820      	subls	r0, #32
 80106ce:	b2c0      	uxtbhi	r0, r0
 80106d0:	b2c0      	uxtbls	r0, r0
 80106d2:	f048 0801 	orrls.w	r8, r8, #1
 80106d6:	e736      	b.n	8010546 <follow_path+0x14a>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80106d8:	2005      	movs	r0, #5
}
 80106da:	b003      	add	sp, #12
 80106dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80106e0:	0801c288 	.word	0x0801c288
 80106e4:	0801c294 	.word	0x0801c294
 80106e8:	0801b8fc 	.word	0x0801b8fc

080106ec <remove_chain>:
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80106ec:	2901      	cmp	r1, #1
{
 80106ee:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	FATFS *fs = obj->fs;
 80106f2:	6805      	ldr	r5, [r0, #0]
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80106f4:	d90f      	bls.n	8010716 <remove_chain+0x2a>
 80106f6:	69ab      	ldr	r3, [r5, #24]
 80106f8:	428b      	cmp	r3, r1
 80106fa:	460c      	mov	r4, r1
 80106fc:	d90b      	bls.n	8010716 <remove_chain+0x2a>
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80106fe:	4606      	mov	r6, r0
 8010700:	b962      	cbnz	r2, 801071c <remove_chain+0x30>
 8010702:	462f      	mov	r7, r5
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8010704:	42a3      	cmp	r3, r4
 8010706:	d906      	bls.n	8010716 <remove_chain+0x2a>
		switch (fs->fs_type) {
 8010708:	783b      	ldrb	r3, [r7, #0]
 801070a:	2b02      	cmp	r3, #2
 801070c:	d07a      	beq.n	8010804 <remove_chain+0x118>
 801070e:	2b03      	cmp	r3, #3
 8010710:	d05e      	beq.n	80107d0 <remove_chain+0xe4>
 8010712:	2b01      	cmp	r3, #1
 8010714:	d011      	beq.n	801073a <remove_chain+0x4e>
 8010716:	2002      	movs	r0, #2
}
 8010718:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 801071c:	2a01      	cmp	r2, #1
 801071e:	d9fa      	bls.n	8010716 <remove_chain+0x2a>
 8010720:	4293      	cmp	r3, r2
 8010722:	d9f8      	bls.n	8010716 <remove_chain+0x2a>
 8010724:	4611      	mov	r1, r2
 8010726:	4628      	mov	r0, r5
 8010728:	f04f 32ff 	mov.w	r2, #4294967295
 801072c:	f7fe fcd8 	bl	800f0e0 <put_fat.part.0>
		if (res != FR_OK) return res;
 8010730:	2800      	cmp	r0, #0
 8010732:	d1f1      	bne.n	8010718 <remove_chain+0x2c>
 8010734:	6837      	ldr	r7, [r6, #0]
 8010736:	69bb      	ldr	r3, [r7, #24]
 8010738:	e7e4      	b.n	8010704 <remove_chain+0x18>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801073a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 801073c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
			bc = (UINT)clst; bc += bc / 2;
 801073e:	eb04 0854 	add.w	r8, r4, r4, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8010742:	eb03 2158 	add.w	r1, r3, r8, lsr #9
	if (sector != fs->winsect) {	/* Window offset changed? */
 8010746:	4291      	cmp	r1, r2
 8010748:	d006      	beq.n	8010758 <remove_chain+0x6c>
 801074a:	4638      	mov	r0, r7
 801074c:	f7fe fc8e 	bl	800f06c <move_window.part.0>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8010750:	2800      	cmp	r0, #0
 8010752:	d16c      	bne.n	801082e <remove_chain+0x142>
 8010754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010756:	6b3a      	ldr	r2, [r7, #48]	; 0x30
			wc = fs->win[bc++ % SS(fs)];
 8010758:	f3c8 0008 	ubfx	r0, r8, #0, #9
 801075c:	f108 0801 	add.w	r8, r8, #1
 8010760:	4438      	add	r0, r7
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8010762:	eb03 2158 	add.w	r1, r3, r8, lsr #9
	if (sector != fs->winsect) {	/* Window offset changed? */
 8010766:	4291      	cmp	r1, r2
			wc = fs->win[bc++ % SS(fs)];
 8010768:	f890 9034 	ldrb.w	r9, [r0, #52]	; 0x34
	if (sector != fs->winsect) {	/* Window offset changed? */
 801076c:	d004      	beq.n	8010778 <remove_chain+0x8c>
 801076e:	4638      	mov	r0, r7
 8010770:	f7fe fc7c 	bl	800f06c <move_window.part.0>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8010774:	2800      	cmp	r0, #0
 8010776:	d15a      	bne.n	801082e <remove_chain+0x142>
			wc |= fs->win[bc % SS(fs)] << 8;
 8010778:	f3c8 0808 	ubfx	r8, r8, #0, #9
 801077c:	4447      	add	r7, r8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 801077e:	07e3      	lsls	r3, r4, #31
			wc |= fs->win[bc % SS(fs)] << 8;
 8010780:	f897 8034 	ldrb.w	r8, [r7, #52]	; 0x34
 8010784:	ea49 2808 	orr.w	r8, r9, r8, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8010788:	d553      	bpl.n	8010832 <remove_chain+0x146>
 801078a:	ea4f 1818 	mov.w	r8, r8, lsr #4
		if (nxt == 0) break;				/* Empty cluster? */
 801078e:	f1b8 0f00 	cmp.w	r8, #0
 8010792:	d051      	beq.n	8010838 <remove_chain+0x14c>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8010794:	f1b8 0f01 	cmp.w	r8, #1
 8010798:	d0bd      	beq.n	8010716 <remove_chain+0x2a>
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 801079a:	69ab      	ldr	r3, [r5, #24]
 801079c:	42a3      	cmp	r3, r4
 801079e:	d9ba      	bls.n	8010716 <remove_chain+0x2a>
 80107a0:	4621      	mov	r1, r4
 80107a2:	2200      	movs	r2, #0
 80107a4:	4628      	mov	r0, r5
 80107a6:	f7fe fc9b 	bl	800f0e0 <put_fat.part.0>
			if (res != FR_OK) return res;
 80107aa:	2800      	cmp	r0, #0
 80107ac:	d1b4      	bne.n	8010718 <remove_chain+0x2c>
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80107ae:	e9d5 3205 	ldrd	r3, r2, [r5, #20]
 80107b2:	1e91      	subs	r1, r2, #2
 80107b4:	428b      	cmp	r3, r1
 80107b6:	d205      	bcs.n	80107c4 <remove_chain+0xd8>
			fs->fsi_flag |= 1;
 80107b8:	7929      	ldrb	r1, [r5, #4]
			fs->free_clst++;
 80107ba:	3301      	adds	r3, #1
			fs->fsi_flag |= 1;
 80107bc:	f041 0101 	orr.w	r1, r1, #1
			fs->free_clst++;
 80107c0:	616b      	str	r3, [r5, #20]
			fs->fsi_flag |= 1;
 80107c2:	7129      	strb	r1, [r5, #4]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80107c4:	4542      	cmp	r2, r8
 80107c6:	d937      	bls.n	8010838 <remove_chain+0x14c>
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80107c8:	6837      	ldr	r7, [r6, #0]
 80107ca:	4644      	mov	r4, r8
 80107cc:	69bb      	ldr	r3, [r7, #24]
 80107ce:	e799      	b.n	8010704 <remove_chain+0x18>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80107d0:	6a79      	ldr	r1, [r7, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 80107d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80107d4:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
	if (sector != fs->winsect) {	/* Window offset changed? */
 80107d8:	4299      	cmp	r1, r3
 80107da:	d003      	beq.n	80107e4 <remove_chain+0xf8>
 80107dc:	4638      	mov	r0, r7
 80107de:	f7fe fc45 	bl	800f06c <move_window.part.0>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80107e2:	bb20      	cbnz	r0, 801082e <remove_chain+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80107e4:	00a3      	lsls	r3, r4, #2
 80107e6:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80107ea:	3734      	adds	r7, #52	; 0x34
 80107ec:	18fa      	adds	r2, r7, r3
	rv = rv << 8 | ptr[0];
 80107ee:	f817 8003 	ldrb.w	r8, [r7, r3]
	rv = rv << 8 | ptr[2];
 80107f2:	8851      	ldrh	r1, [r2, #2]
	rv = rv << 8 | ptr[1];
 80107f4:	7853      	ldrb	r3, [r2, #1]
 80107f6:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	rv = rv << 8 | ptr[0];
 80107fa:	ea48 2803 	orr.w	r8, r8, r3, lsl #8
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80107fe:	f028 4870 	bic.w	r8, r8, #4026531840	; 0xf0000000
			break;
 8010802:	e7c4      	b.n	801078e <remove_chain+0xa2>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8010804:	6a79      	ldr	r1, [r7, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 8010806:	6b3b      	ldr	r3, [r7, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8010808:	eb01 2114 	add.w	r1, r1, r4, lsr #8
	if (sector != fs->winsect) {	/* Window offset changed? */
 801080c:	4299      	cmp	r1, r3
 801080e:	d003      	beq.n	8010818 <remove_chain+0x12c>
 8010810:	4638      	mov	r0, r7
 8010812:	f7fe fc2b 	bl	800f06c <move_window.part.0>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8010816:	b950      	cbnz	r0, 801082e <remove_chain+0x142>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8010818:	0063      	lsls	r3, r4, #1
 801081a:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 801081e:	3734      	adds	r7, #52	; 0x34
 8010820:	18fa      	adds	r2, r7, r3
	rv = rv << 8 | ptr[0];
 8010822:	f817 8003 	ldrb.w	r8, [r7, r3]
 8010826:	7853      	ldrb	r3, [r2, #1]
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8010828:	ea48 2803 	orr.w	r8, r8, r3, lsl #8
			break;
 801082c:	e7af      	b.n	801078e <remove_chain+0xa2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 801082e:	2001      	movs	r0, #1
 8010830:	e772      	b.n	8010718 <remove_chain+0x2c>
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8010832:	f3c8 080b 	ubfx	r8, r8, #0, #12
 8010836:	e7aa      	b.n	801078e <remove_chain+0xa2>
	return FR_OK;
 8010838:	2000      	movs	r0, #0
 801083a:	e76d      	b.n	8010718 <remove_chain+0x2c>

0801083c <dir_register>:
{
 801083c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8010840:	f890 402f 	ldrb.w	r4, [r0, #47]	; 0x2f
 8010844:	f014 04a0 	ands.w	r4, r4, #160	; 0xa0
{
 8010848:	b091      	sub	sp, #68	; 0x44
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 801084a:	f040 830a 	bne.w	8010e62 <dir_register+0x626>
	FATFS *fs = dp->obj.fs;
 801084e:	6803      	ldr	r3, [r0, #0]
 8010850:	9300      	str	r3, [sp, #0]
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8010852:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 8010856:	f8bc 3000 	ldrh.w	r3, [ip]
 801085a:	4682      	mov	sl, r0
 801085c:	2b00      	cmp	r3, #0
 801085e:	f000 84b0 	beq.w	80111c2 <dir_register+0x986>
 8010862:	4663      	mov	r3, ip
 8010864:	f833 2f02 	ldrh.w	r2, [r3, #2]!
 8010868:	3401      	adds	r4, #1
 801086a:	2a00      	cmp	r2, #0
 801086c:	d1fa      	bne.n	8010864 <dir_register+0x28>
	mem_cpy(sn, dp->fn, 12);
 801086e:	f10a 0b24 	add.w	fp, sl, #36	; 0x24
	if (cnt) {
 8010872:	e89b 0007 	ldmia.w	fp, {r0, r1, r2}
 8010876:	ab10      	add	r3, sp, #64	; 0x40
 8010878:	e903 0007 	stmdb	r3, {r0, r1, r2}
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 801087c:	f89d 303f 	ldrb.w	r3, [sp, #63]	; 0x3f
 8010880:	9308      	str	r3, [sp, #32]
 8010882:	07d9      	lsls	r1, r3, #31
 8010884:	d46e      	bmi.n	8010964 <dir_register+0x128>
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8010886:	f013 0302 	ands.w	r3, r3, #2
 801088a:	f8dd 9000 	ldr.w	r9, [sp]
 801088e:	f000 828d 	beq.w	8010dac <dir_register+0x570>
 8010892:	4b5f      	ldr	r3, [pc, #380]	; (8010a10 <dir_register+0x1d4>)
 8010894:	340c      	adds	r4, #12
 8010896:	fba3 3404 	umull	r3, r4, r3, r4
 801089a:	08a3      	lsrs	r3, r4, #2
 801089c:	9302      	str	r3, [sp, #8]
	res = dir_sdi(dp, 0);
 801089e:	2100      	movs	r1, #0
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 80108a0:	3301      	adds	r3, #1
	res = dir_sdi(dp, 0);
 80108a2:	4650      	mov	r0, sl
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 80108a4:	461c      	mov	r4, r3
	res = dir_sdi(dp, 0);
 80108a6:	f7ff fb3b 	bl	800ff20 <dir_sdi>
	if (res == FR_OK) {
 80108aa:	9001      	str	r0, [sp, #4]
 80108ac:	2800      	cmp	r0, #0
 80108ae:	f040 8288 	bne.w	8010dc2 <dir_register+0x586>
						fs->wflag = 1;
 80108b2:	f8cd b00c 	str.w	fp, [sp, #12]
 80108b6:	f8da 101c 	ldr.w	r1, [sl, #28]
		n = 0;
 80108ba:	4680      	mov	r8, r0
						fs->wflag = 1;
 80108bc:	46a3      	mov	fp, r4
 80108be:	e027      	b.n	8010910 <dir_register+0xd4>
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80108c0:	b3ab      	cbz	r3, 801092e <dir_register+0xf2>
				n = 0;					/* Not a blank entry. Restart to search */
 80108c2:	f04f 0800 	mov.w	r8, #0
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80108c6:	f8da 4014 	ldr.w	r4, [sl, #20]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80108ca:	f8da 101c 	ldr.w	r1, [sl, #28]
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80108ce:	3420      	adds	r4, #32
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80108d0:	2900      	cmp	r1, #0
 80108d2:	f000 8279 	beq.w	8010dc8 <dir_register+0x58c>
 80108d6:	f5b4 1f00 	cmp.w	r4, #2097152	; 0x200000
 80108da:	f080 8275 	bcs.w	8010dc8 <dir_register+0x58c>
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80108de:	f3c4 0708 	ubfx	r7, r4, #0, #9
	FATFS *fs = dp->obj.fs;
 80108e2:	f8da 6000 	ldr.w	r6, [sl]
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80108e6:	b967      	cbnz	r7, 8010902 <dir_register+0xc6>
		if (!dp->clust) {		/* Static table */
 80108e8:	f8da 3018 	ldr.w	r3, [sl, #24]
		dp->sect++;				/* Next sector */
 80108ec:	3101      	adds	r1, #1
 80108ee:	f8ca 101c 	str.w	r1, [sl, #28]
		if (!dp->clust) {		/* Static table */
 80108f2:	2b00      	cmp	r3, #0
 80108f4:	f040 8282 	bne.w	8010dfc <dir_register+0x5c0>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80108f8:	8932      	ldrh	r2, [r6, #8]
 80108fa:	ebb2 1f54 	cmp.w	r2, r4, lsr #5
 80108fe:	f240 845d 	bls.w	80111bc <dir_register+0x980>
 8010902:	f106 0534 	add.w	r5, r6, #52	; 0x34
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8010906:	443d      	add	r5, r7
 8010908:	f8ca 5020 	str.w	r5, [sl, #32]
	dp->dptr = ofs;						/* Current entry */
 801090c:	f8ca 4014 	str.w	r4, [sl, #20]
	if (sector != fs->winsect) {	/* Window offset changed? */
 8010910:	f8d9 3030 	ldr.w	r3, [r9, #48]	; 0x30
 8010914:	428b      	cmp	r3, r1
 8010916:	d005      	beq.n	8010924 <dir_register+0xe8>
 8010918:	4648      	mov	r0, r9
 801091a:	f7fe fba7 	bl	800f06c <move_window.part.0>
			if (res != FR_OK) break;
 801091e:	2800      	cmp	r0, #0
 8010920:	f040 8452 	bne.w	80111c8 <dir_register+0x98c>
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8010924:	f8da 3020 	ldr.w	r3, [sl, #32]
 8010928:	781b      	ldrb	r3, [r3, #0]
 801092a:	2be5      	cmp	r3, #229	; 0xe5
 801092c:	d1c8      	bne.n	80108c0 <dir_register+0x84>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 801092e:	f108 0801 	add.w	r8, r8, #1
 8010932:	45c3      	cmp	fp, r8
 8010934:	d1c7      	bne.n	80108c6 <dir_register+0x8a>
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8010936:	e9dd 3b02 	ldrd	r3, fp, [sp, #8]
 801093a:	2b00      	cmp	r3, #0
 801093c:	f040 82c4 	bne.w	8010ec8 <dir_register+0x68c>
	if (sector != fs->winsect) {	/* Window offset changed? */
 8010940:	9b00      	ldr	r3, [sp, #0]
		res = move_window(fs, dp->sect);
 8010942:	f8da 101c 	ldr.w	r1, [sl, #28]
	if (sector != fs->winsect) {	/* Window offset changed? */
 8010946:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010948:	4299      	cmp	r1, r3
 801094a:	f000 8290 	beq.w	8010e6e <dir_register+0x632>
 801094e:	9800      	ldr	r0, [sp, #0]
 8010950:	f7fe fb8c 	bl	800f06c <move_window.part.0>
		if (res == FR_OK) {
 8010954:	2800      	cmp	r0, #0
 8010956:	f000 828a 	beq.w	8010e6e <dir_register+0x632>
 801095a:	9001      	str	r0, [sp, #4]
}
 801095c:	9801      	ldr	r0, [sp, #4]
 801095e:	b011      	add	sp, #68	; 0x44
 8010960:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8010964:	f89d 2034 	ldrb.w	r2, [sp, #52]	; 0x34
 8010968:	9201      	str	r2, [sp, #4]
 801096a:	f89d 2035 	ldrb.w	r2, [sp, #53]	; 0x35
 801096e:	9204      	str	r2, [sp, #16]
 8010970:	f89d 2036 	ldrb.w	r2, [sp, #54]	; 0x36
 8010974:	9203      	str	r2, [sp, #12]
 8010976:	f89d 2037 	ldrb.w	r2, [sp, #55]	; 0x37
 801097a:	9202      	str	r2, [sp, #8]
 801097c:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
 8010980:	f89d 103b 	ldrb.w	r1, [sp, #59]	; 0x3b
 8010984:	9207      	str	r2, [sp, #28]
 8010986:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
 801098a:	9206      	str	r2, [sp, #24]
		for (n = 1; n < 100; n++) {
 801098c:	f04f 0801 	mov.w	r8, #1
 8010990:	f89d 203a 	ldrb.w	r2, [sp, #58]	; 0x3a
 8010994:	f89d 603e 	ldrb.w	r6, [sp, #62]	; 0x3e
 8010998:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
				if (sr & 0x10000) sr ^= 0x11021;
 801099c:	4f1d      	ldr	r7, [pc, #116]	; (8010a14 <dir_register+0x1d8>)
 801099e:	9205      	str	r2, [sp, #20]
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 80109a0:	2340      	movs	r3, #64	; 0x40
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80109a2:	9409      	str	r4, [sp, #36]	; 0x24
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 80109a4:	f88a 302f 	strb.w	r3, [sl, #47]	; 0x2f
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80109a8:	4644      	mov	r4, r8
 80109aa:	f04f 0920 	mov.w	r9, #32
 80109ae:	4662      	mov	r2, ip
 80109b0:	4688      	mov	r8, r1
			*d++ = *s++;
 80109b2:	9901      	ldr	r1, [sp, #4]
 80109b4:	f8aa 502c 	strh.w	r5, [sl, #44]	; 0x2c
 80109b8:	2000      	movs	r0, #0
 80109ba:	4603      	mov	r3, r0
 80109bc:	f361 0007 	bfi	r0, r1, #0, #8
 80109c0:	9907      	ldr	r1, [sp, #28]
 80109c2:	f88a 602e 	strb.w	r6, [sl, #46]	; 0x2e
 80109c6:	f361 0307 	bfi	r3, r1, #0, #8
 80109ca:	9904      	ldr	r1, [sp, #16]
 80109cc:	f361 200f 	bfi	r0, r1, #8, #8
 80109d0:	9906      	ldr	r1, [sp, #24]
 80109d2:	f361 230f 	bfi	r3, r1, #8, #8
 80109d6:	9903      	ldr	r1, [sp, #12]
 80109d8:	f361 4017 	bfi	r0, r1, #16, #8
 80109dc:	9905      	ldr	r1, [sp, #20]
 80109de:	f361 4317 	bfi	r3, r1, #16, #8
 80109e2:	9902      	ldr	r1, [sp, #8]
 80109e4:	f368 631f 	bfi	r3, r8, #24, #8
 80109e8:	f361 601f 	bfi	r0, r1, #24, #8
	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 80109ec:	2c05      	cmp	r4, #5
			*d++ = *s++;
 80109ee:	e9ca 0309 	strd	r0, r3, [sl, #36]	; 0x24
	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 80109f2:	f240 8158 	bls.w	8010ca6 <dir_register+0x46a>
		while (*lfn) {	/* Create a CRC */
 80109f6:	8813      	ldrh	r3, [r2, #0]
 80109f8:	2b00      	cmp	r3, #0
 80109fa:	f000 8154 	beq.w	8010ca6 <dir_register+0x46a>
				sr = (sr << 1) + (wc & 1);
 80109fe:	f003 0001 	and.w	r0, r3, #1
 8010a02:	4694      	mov	ip, r2
 8010a04:	eb00 0044 	add.w	r0, r0, r4, lsl #1
				wc >>= 1;
 8010a08:	ea4f 0e53 	mov.w	lr, r3, lsr #1
				if (sr & 0x10000) sr ^= 0x11021;
 8010a0c:	e00d      	b.n	8010a2a <dir_register+0x1ee>
 8010a0e:	bf00      	nop
 8010a10:	4ec4ec4f 	.word	0x4ec4ec4f
 8010a14:	00011021 	.word	0x00011021
				sr = (sr << 1) + (wc & 1);
 8010a18:	f003 0001 	and.w	r0, r3, #1
 8010a1c:	eb00 0042 	add.w	r0, r0, r2, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 8010a20:	0412      	lsls	r2, r2, #16
				wc >>= 1;
 8010a22:	ea4f 0e53 	mov.w	lr, r3, lsr #1
				if (sr & 0x10000) sr ^= 0x11021;
 8010a26:	bf48      	it	mi
 8010a28:	4078      	eormi	r0, r7
				sr = (sr << 1) + (wc & 1);
 8010a2a:	f00e 0e01 	and.w	lr, lr, #1
 8010a2e:	eb0e 0e40 	add.w	lr, lr, r0, lsl #1
				wc >>= 1;
 8010a32:	0899      	lsrs	r1, r3, #2
				if (sr & 0x10000) sr ^= 0x11021;
 8010a34:	0400      	lsls	r0, r0, #16
 8010a36:	bf48      	it	mi
 8010a38:	ea8e 0e07 	eormi.w	lr, lr, r7
				sr = (sr << 1) + (wc & 1);
 8010a3c:	f001 0101 	and.w	r1, r1, #1
 8010a40:	eb01 014e 	add.w	r1, r1, lr, lsl #1
				wc >>= 1;
 8010a44:	08da      	lsrs	r2, r3, #3
				if (sr & 0x10000) sr ^= 0x11021;
 8010a46:	f41e 4f00 	tst.w	lr, #32768	; 0x8000
 8010a4a:	bf18      	it	ne
 8010a4c:	4079      	eorne	r1, r7
				sr = (sr << 1) + (wc & 1);
 8010a4e:	f002 0201 	and.w	r2, r2, #1
 8010a52:	eb02 0241 	add.w	r2, r2, r1, lsl #1
				wc >>= 1;
 8010a56:	0918      	lsrs	r0, r3, #4
				if (sr & 0x10000) sr ^= 0x11021;
 8010a58:	0409      	lsls	r1, r1, #16
 8010a5a:	bf48      	it	mi
 8010a5c:	407a      	eormi	r2, r7
				sr = (sr << 1) + (wc & 1);
 8010a5e:	f000 0001 	and.w	r0, r0, #1
 8010a62:	eb00 0042 	add.w	r0, r0, r2, lsl #1
				wc >>= 1;
 8010a66:	0959      	lsrs	r1, r3, #5
				if (sr & 0x10000) sr ^= 0x11021;
 8010a68:	0412      	lsls	r2, r2, #16
 8010a6a:	bf48      	it	mi
 8010a6c:	4078      	eormi	r0, r7
				sr = (sr << 1) + (wc & 1);
 8010a6e:	f001 0101 	and.w	r1, r1, #1
 8010a72:	eb01 0140 	add.w	r1, r1, r0, lsl #1
				wc >>= 1;
 8010a76:	099a      	lsrs	r2, r3, #6
				if (sr & 0x10000) sr ^= 0x11021;
 8010a78:	0400      	lsls	r0, r0, #16
 8010a7a:	bf48      	it	mi
 8010a7c:	4079      	eormi	r1, r7
				sr = (sr << 1) + (wc & 1);
 8010a7e:	f002 0201 	and.w	r2, r2, #1
 8010a82:	eb02 0241 	add.w	r2, r2, r1, lsl #1
				wc >>= 1;
 8010a86:	09d8      	lsrs	r0, r3, #7
				if (sr & 0x10000) sr ^= 0x11021;
 8010a88:	0409      	lsls	r1, r1, #16
 8010a8a:	bf48      	it	mi
 8010a8c:	407a      	eormi	r2, r7
				sr = (sr << 1) + (wc & 1);
 8010a8e:	f000 0001 	and.w	r0, r0, #1
 8010a92:	eb00 0042 	add.w	r0, r0, r2, lsl #1
				wc >>= 1;
 8010a96:	0a19      	lsrs	r1, r3, #8
				if (sr & 0x10000) sr ^= 0x11021;
 8010a98:	0412      	lsls	r2, r2, #16
 8010a9a:	bf48      	it	mi
 8010a9c:	4078      	eormi	r0, r7
				sr = (sr << 1) + (wc & 1);
 8010a9e:	f001 0101 	and.w	r1, r1, #1
 8010aa2:	eb01 0140 	add.w	r1, r1, r0, lsl #1
				wc >>= 1;
 8010aa6:	0a5a      	lsrs	r2, r3, #9
				if (sr & 0x10000) sr ^= 0x11021;
 8010aa8:	0400      	lsls	r0, r0, #16
 8010aaa:	bf48      	it	mi
 8010aac:	4079      	eormi	r1, r7
				sr = (sr << 1) + (wc & 1);
 8010aae:	f002 0201 	and.w	r2, r2, #1
 8010ab2:	eb02 0241 	add.w	r2, r2, r1, lsl #1
				wc >>= 1;
 8010ab6:	0a98      	lsrs	r0, r3, #10
				if (sr & 0x10000) sr ^= 0x11021;
 8010ab8:	0409      	lsls	r1, r1, #16
 8010aba:	bf48      	it	mi
 8010abc:	407a      	eormi	r2, r7
				sr = (sr << 1) + (wc & 1);
 8010abe:	f000 0001 	and.w	r0, r0, #1
 8010ac2:	eb00 0042 	add.w	r0, r0, r2, lsl #1
				wc >>= 1;
 8010ac6:	0ad9      	lsrs	r1, r3, #11
				if (sr & 0x10000) sr ^= 0x11021;
 8010ac8:	0412      	lsls	r2, r2, #16
 8010aca:	bf48      	it	mi
 8010acc:	4078      	eormi	r0, r7
				sr = (sr << 1) + (wc & 1);
 8010ace:	f001 0101 	and.w	r1, r1, #1
 8010ad2:	eb01 0140 	add.w	r1, r1, r0, lsl #1
				wc >>= 1;
 8010ad6:	0b1a      	lsrs	r2, r3, #12
				if (sr & 0x10000) sr ^= 0x11021;
 8010ad8:	0400      	lsls	r0, r0, #16
 8010ada:	bf48      	it	mi
 8010adc:	4079      	eormi	r1, r7
				sr = (sr << 1) + (wc & 1);
 8010ade:	f002 0201 	and.w	r2, r2, #1
 8010ae2:	eb02 0241 	add.w	r2, r2, r1, lsl #1
				wc >>= 1;
 8010ae6:	0b58      	lsrs	r0, r3, #13
				if (sr & 0x10000) sr ^= 0x11021;
 8010ae8:	0409      	lsls	r1, r1, #16
 8010aea:	bf48      	it	mi
 8010aec:	407a      	eormi	r2, r7
				sr = (sr << 1) + (wc & 1);
 8010aee:	f000 0001 	and.w	r0, r0, #1
 8010af2:	eb00 0042 	add.w	r0, r0, r2, lsl #1
				wc >>= 1;
 8010af6:	0b99      	lsrs	r1, r3, #14
				if (sr & 0x10000) sr ^= 0x11021;
 8010af8:	0412      	lsls	r2, r2, #16
 8010afa:	bf48      	it	mi
 8010afc:	4078      	eormi	r0, r7
				sr = (sr << 1) + (wc & 1);
 8010afe:	f001 0101 	and.w	r1, r1, #1
 8010b02:	eb01 0140 	add.w	r1, r1, r0, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 8010b06:	0400      	lsls	r0, r0, #16
				wc >>= 1;
 8010b08:	ea4f 33d3 	mov.w	r3, r3, lsr #15
				if (sr & 0x10000) sr ^= 0x11021;
 8010b0c:	bf48      	it	mi
 8010b0e:	4079      	eormi	r1, r7
				sr = (sr << 1) + (wc & 1);
 8010b10:	eb03 0241 	add.w	r2, r3, r1, lsl #1
		while (*lfn) {	/* Create a CRC */
 8010b14:	f83c 3f02 	ldrh.w	r3, [ip, #2]!
				if (sr & 0x10000) sr ^= 0x11021;
 8010b18:	0409      	lsls	r1, r1, #16
 8010b1a:	bf48      	it	mi
 8010b1c:	407a      	eormi	r2, r7
		while (*lfn) {	/* Create a CRC */
 8010b1e:	2b00      	cmp	r3, #0
 8010b20:	f47f af7a 	bne.w	8010a18 <dir_register+0x1dc>
		c = (BYTE)((seq % 16) + '0');
 8010b24:	f002 000f 	and.w	r0, r2, #15
 8010b28:	f100 0330 	add.w	r3, r0, #48	; 0x30
		if (c > '9') c += 7;
 8010b2c:	2b39      	cmp	r3, #57	; 0x39
 8010b2e:	bf88      	it	hi
 8010b30:	f100 0337 	addhi.w	r3, r0, #55	; 0x37
	} while (seq);
 8010b34:	2a0f      	cmp	r2, #15
		ns[i--] = c;
 8010b36:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
		seq /= 16;
 8010b3a:	ea4f 1012 	mov.w	r0, r2, lsr #4
	} while (seq);
 8010b3e:	f240 8149 	bls.w	8010dd4 <dir_register+0x598>
		c = (BYTE)((seq % 16) + '0');
 8010b42:	f000 0c0f 	and.w	ip, r0, #15
 8010b46:	f10c 0330 	add.w	r3, ip, #48	; 0x30
		if (c > '9') c += 7;
 8010b4a:	2b39      	cmp	r3, #57	; 0x39
 8010b4c:	bf88      	it	hi
 8010b4e:	f10c 0337 	addhi.w	r3, ip, #55	; 0x37
	} while (seq);
 8010b52:	280f      	cmp	r0, #15
		ns[i--] = c;
 8010b54:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
		seq /= 16;
 8010b58:	ea4f 2c12 	mov.w	ip, r2, lsr #8
	} while (seq);
 8010b5c:	f240 813f 	bls.w	8010dde <dir_register+0x5a2>
		c = (BYTE)((seq % 16) + '0');
 8010b60:	f00c 000f 	and.w	r0, ip, #15
 8010b64:	f100 0330 	add.w	r3, r0, #48	; 0x30
		if (c > '9') c += 7;
 8010b68:	2b39      	cmp	r3, #57	; 0x39
 8010b6a:	bf88      	it	hi
 8010b6c:	f100 0337 	addhi.w	r3, r0, #55	; 0x37
	} while (seq);
 8010b70:	f1bc 0f0f 	cmp.w	ip, #15
		ns[i--] = c;
 8010b74:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		seq /= 16;
 8010b78:	ea4f 3012 	mov.w	r0, r2, lsr #12
	} while (seq);
 8010b7c:	f240 8134 	bls.w	8010de8 <dir_register+0x5ac>
		c = (BYTE)((seq % 16) + '0');
 8010b80:	f000 0c0f 	and.w	ip, r0, #15
 8010b84:	f10c 0330 	add.w	r3, ip, #48	; 0x30
		if (c > '9') c += 7;
 8010b88:	2b39      	cmp	r3, #57	; 0x39
 8010b8a:	bf88      	it	hi
 8010b8c:	f10c 0337 	addhi.w	r3, ip, #55	; 0x37
	} while (seq);
 8010b90:	280f      	cmp	r0, #15
		ns[i--] = c;
 8010b92:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
		seq /= 16;
 8010b96:	ea4f 4c12 	mov.w	ip, r2, lsr #16
	} while (seq);
 8010b9a:	f240 812a 	bls.w	8010df2 <dir_register+0x5b6>
		c = (BYTE)((seq % 16) + '0');
 8010b9e:	f00c 000f 	and.w	r0, ip, #15
 8010ba2:	f100 0330 	add.w	r3, r0, #48	; 0x30
		if (c > '9') c += 7;
 8010ba6:	2b39      	cmp	r3, #57	; 0x39
 8010ba8:	bf88      	it	hi
 8010baa:	f100 0337 	addhi.w	r3, r0, #55	; 0x37
	} while (seq);
 8010bae:	f1bc 0f0f 	cmp.w	ip, #15
		ns[i--] = c;
 8010bb2:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
		seq /= 16;
 8010bb6:	ea4f 5012 	mov.w	r0, r2, lsr #20
	} while (seq);
 8010bba:	f240 8148 	bls.w	8010e4e <dir_register+0x612>
		c = (BYTE)((seq % 16) + '0');
 8010bbe:	f000 0c0f 	and.w	ip, r0, #15
 8010bc2:	f10c 0330 	add.w	r3, ip, #48	; 0x30
		if (c > '9') c += 7;
 8010bc6:	2b39      	cmp	r3, #57	; 0x39
 8010bc8:	bf88      	it	hi
 8010bca:	f10c 0337 	addhi.w	r3, ip, #55	; 0x37
	} while (seq);
 8010bce:	280f      	cmp	r0, #15
		ns[i--] = c;
 8010bd0:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
		seq /= 16;
 8010bd4:	ea4f 6c12 	mov.w	ip, r2, lsr #24
	} while (seq);
 8010bd8:	f240 813e 	bls.w	8010e58 <dir_register+0x61c>
		c = (BYTE)((seq % 16) + '0');
 8010bdc:	f00c 000f 	and.w	r0, ip, #15
 8010be0:	f100 0330 	add.w	r3, r0, #48	; 0x30
		if (c > '9') c += 7;
 8010be4:	2b39      	cmp	r3, #57	; 0x39
 8010be6:	bf88      	it	hi
 8010be8:	f100 0337 	addhi.w	r3, r0, #55	; 0x37
	} while (seq);
 8010bec:	f1bc 0f0f 	cmp.w	ip, #15
		ns[i--] = c;
 8010bf0:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
		seq /= 16;
 8010bf4:	ea4f 7212 	mov.w	r2, r2, lsr #28
	} while (seq);
 8010bf8:	d957      	bls.n	8010caa <dir_register+0x46e>
		c = (BYTE)((seq % 16) + '0');
 8010bfa:	f102 0330 	add.w	r3, r2, #48	; 0x30
		if (c > '9') c += 7;
 8010bfe:	2b39      	cmp	r3, #57	; 0x39
		c = (BYTE)((seq % 16) + '0');
 8010c00:	b2d2      	uxtb	r2, r2
		if (c > '9') c += 7;
 8010c02:	bf88      	it	hi
 8010c04:	f102 0337 	addhi.w	r3, r2, #55	; 0x37
		ns[i--] = c;
 8010c08:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 8010c0c:	f04f 32ff 	mov.w	r2, #4294967295
 8010c10:	f10a 0023 	add.w	r0, sl, #35	; 0x23
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8010c14:	2300      	movs	r3, #0
 8010c16:	e002      	b.n	8010c1e <dir_register+0x3e2>
 8010c18:	3301      	adds	r3, #1
 8010c1a:	4293      	cmp	r3, r2
 8010c1c:	d003      	beq.n	8010c26 <dir_register+0x3ea>
 8010c1e:	f810 1f01 	ldrb.w	r1, [r0, #1]!
 8010c22:	2920      	cmp	r1, #32
 8010c24:	d1f8      	bne.n	8010c18 <dir_register+0x3dc>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8010c26:	2a07      	cmp	r2, #7
 8010c28:	d944      	bls.n	8010cb4 <dir_register+0x478>
 8010c2a:	1c58      	adds	r0, r3, #1
	} while (j < 8);
 8010c2c:	2807      	cmp	r0, #7
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8010c2e:	f80b 9003 	strb.w	r9, [fp, r3]
	} while (j < 8);
 8010c32:	d82c      	bhi.n	8010c8e <dir_register+0x452>
 8010c34:	2807      	cmp	r0, #7
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8010c36:	f80b 9000 	strb.w	r9, [fp, r0]
 8010c3a:	f100 0c01 	add.w	ip, r0, #1
	} while (j < 8);
 8010c3e:	d026      	beq.n	8010c8e <dir_register+0x452>
 8010c40:	f1bc 0f07 	cmp.w	ip, #7
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8010c44:	f80b 900c 	strb.w	r9, [fp, ip]
 8010c48:	f10c 0001 	add.w	r0, ip, #1
	} while (j < 8);
 8010c4c:	d01f      	beq.n	8010c8e <dir_register+0x452>
 8010c4e:	2807      	cmp	r0, #7
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8010c50:	f80b 9000 	strb.w	r9, [fp, r0]
 8010c54:	f100 0c01 	add.w	ip, r0, #1
	} while (j < 8);
 8010c58:	d019      	beq.n	8010c8e <dir_register+0x452>
 8010c5a:	f1bc 0f07 	cmp.w	ip, #7
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8010c5e:	f80b 900c 	strb.w	r9, [fp, ip]
 8010c62:	f10c 0001 	add.w	r0, ip, #1
	} while (j < 8);
 8010c66:	d012      	beq.n	8010c8e <dir_register+0x452>
 8010c68:	2807      	cmp	r0, #7
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8010c6a:	f80b 9000 	strb.w	r9, [fp, r0]
 8010c6e:	f100 0c01 	add.w	ip, r0, #1
	} while (j < 8);
 8010c72:	d00c      	beq.n	8010c8e <dir_register+0x452>
 8010c74:	f1bc 0f07 	cmp.w	ip, #7
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8010c78:	f80b 900c 	strb.w	r9, [fp, ip]
 8010c7c:	f10c 0001 	add.w	r0, ip, #1
	} while (j < 8);
 8010c80:	d005      	beq.n	8010c8e <dir_register+0x452>
 8010c82:	2806      	cmp	r0, #6
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8010c84:	f80b 9000 	strb.w	r9, [fp, r0]
	} while (j < 8);
 8010c88:	d101      	bne.n	8010c8e <dir_register+0x452>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8010c8a:	f88a 902b 	strb.w	r9, [sl, #43]	; 0x2b
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8010c8e:	4650      	mov	r0, sl
 8010c90:	f7ff fa0c 	bl	80100ac <dir_find>
			if (res != FR_OK) break;
 8010c94:	2800      	cmp	r0, #0
 8010c96:	d17c      	bne.n	8010d92 <dir_register+0x556>
		for (n = 1; n < 100; n++) {
 8010c98:	3401      	adds	r4, #1
 8010c9a:	2c64      	cmp	r4, #100	; 0x64
 8010c9c:	f000 8094 	beq.w	8010dc8 <dir_register+0x58c>
 8010ca0:	9b00      	ldr	r3, [sp, #0]
 8010ca2:	68da      	ldr	r2, [r3, #12]
 8010ca4:	e685      	b.n	80109b2 <dir_register+0x176>
 8010ca6:	4622      	mov	r2, r4
 8010ca8:	e73c      	b.n	8010b24 <dir_register+0x2e8>
	ns[i] = '~';
 8010caa:	237e      	movs	r3, #126	; 0x7e
 8010cac:	2200      	movs	r2, #0
 8010cae:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8010cb2:	4613      	mov	r3, r2
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8010cb4:	a910      	add	r1, sp, #64	; 0x40
 8010cb6:	eb01 0c02 	add.w	ip, r1, r2
 8010cba:	1c58      	adds	r0, r3, #1
 8010cbc:	f81c cc14 	ldrb.w	ip, [ip, #-20]
 8010cc0:	f80b c003 	strb.w	ip, [fp, r3]
	} while (j < 8);
 8010cc4:	2807      	cmp	r0, #7
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8010cc6:	f102 0c01 	add.w	ip, r2, #1
	} while (j < 8);
 8010cca:	d8e0      	bhi.n	8010c8e <dir_register+0x452>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8010ccc:	f1bc 0f07 	cmp.w	ip, #7
 8010cd0:	d8b0      	bhi.n	8010c34 <dir_register+0x3f8>
 8010cd2:	448c      	add	ip, r1
	} while (j < 8);
 8010cd4:	2b06      	cmp	r3, #6
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8010cd6:	f81c cc14 	ldrb.w	ip, [ip, #-20]
 8010cda:	f80b c000 	strb.w	ip, [fp, r0]
 8010cde:	f102 0e02 	add.w	lr, r2, #2
 8010ce2:	f103 0c02 	add.w	ip, r3, #2
	} while (j < 8);
 8010ce6:	d0d2      	beq.n	8010c8e <dir_register+0x452>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8010ce8:	f1be 0f08 	cmp.w	lr, #8
 8010cec:	d0a8      	beq.n	8010c40 <dir_register+0x404>
 8010cee:	eb01 000e 	add.w	r0, r1, lr
	} while (j < 8);
 8010cf2:	2b05      	cmp	r3, #5
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8010cf4:	f810 0c14 	ldrb.w	r0, [r0, #-20]
 8010cf8:	f80b 000c 	strb.w	r0, [fp, ip]
 8010cfc:	f102 0e03 	add.w	lr, r2, #3
 8010d00:	f103 0003 	add.w	r0, r3, #3
	} while (j < 8);
 8010d04:	d0c3      	beq.n	8010c8e <dir_register+0x452>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8010d06:	f1be 0f07 	cmp.w	lr, #7
 8010d0a:	d8a0      	bhi.n	8010c4e <dir_register+0x412>
 8010d0c:	eb01 0c0e 	add.w	ip, r1, lr
	} while (j < 8);
 8010d10:	2b04      	cmp	r3, #4
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8010d12:	f81c cc14 	ldrb.w	ip, [ip, #-20]
 8010d16:	f80b c000 	strb.w	ip, [fp, r0]
 8010d1a:	f102 0e04 	add.w	lr, r2, #4
 8010d1e:	f103 0c04 	add.w	ip, r3, #4
	} while (j < 8);
 8010d22:	d0b4      	beq.n	8010c8e <dir_register+0x452>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8010d24:	f1be 0f08 	cmp.w	lr, #8
 8010d28:	d097      	beq.n	8010c5a <dir_register+0x41e>
 8010d2a:	eb01 000e 	add.w	r0, r1, lr
	} while (j < 8);
 8010d2e:	2b03      	cmp	r3, #3
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8010d30:	f810 0c14 	ldrb.w	r0, [r0, #-20]
 8010d34:	f80b 000c 	strb.w	r0, [fp, ip]
 8010d38:	f102 0e05 	add.w	lr, r2, #5
 8010d3c:	f103 0005 	add.w	r0, r3, #5
	} while (j < 8);
 8010d40:	d0a5      	beq.n	8010c8e <dir_register+0x452>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8010d42:	f1be 0f07 	cmp.w	lr, #7
 8010d46:	d88f      	bhi.n	8010c68 <dir_register+0x42c>
 8010d48:	eb01 0c0e 	add.w	ip, r1, lr
	} while (j < 8);
 8010d4c:	2b02      	cmp	r3, #2
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8010d4e:	f81c cc14 	ldrb.w	ip, [ip, #-20]
 8010d52:	f80b c000 	strb.w	ip, [fp, r0]
 8010d56:	f102 0e06 	add.w	lr, r2, #6
 8010d5a:	f103 0c06 	add.w	ip, r3, #6
	} while (j < 8);
 8010d5e:	d096      	beq.n	8010c8e <dir_register+0x452>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8010d60:	f1be 0f08 	cmp.w	lr, #8
 8010d64:	d086      	beq.n	8010c74 <dir_register+0x438>
 8010d66:	448e      	add	lr, r1
	} while (j < 8);
 8010d68:	2b01      	cmp	r3, #1
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8010d6a:	f81e ec14 	ldrb.w	lr, [lr, #-20]
 8010d6e:	f80b e00c 	strb.w	lr, [fp, ip]
 8010d72:	f103 0007 	add.w	r0, r3, #7
	} while (j < 8);
 8010d76:	d08a      	beq.n	8010c8e <dir_register+0x452>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8010d78:	2a00      	cmp	r2, #0
 8010d7a:	d182      	bne.n	8010c82 <dir_register+0x446>
 8010d7c:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8010d80:	f80b 3000 	strb.w	r3, [fp, r0]
	} while (j < 8);
 8010d84:	2806      	cmp	r0, #6
 8010d86:	d080      	beq.n	8010c8a <dir_register+0x44e>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8010d88:	4650      	mov	r0, sl
 8010d8a:	f7ff f98f 	bl	80100ac <dir_find>
			if (res != FR_OK) break;
 8010d8e:	2800      	cmp	r0, #0
 8010d90:	d082      	beq.n	8010c98 <dir_register+0x45c>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8010d92:	2804      	cmp	r0, #4
 8010d94:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8010d96:	9001      	str	r0, [sp, #4]
 8010d98:	d118      	bne.n	8010dcc <dir_register+0x590>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8010d9a:	9b08      	ldr	r3, [sp, #32]
 8010d9c:	f88a 302f 	strb.w	r3, [sl, #47]	; 0x2f
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8010da0:	f013 0302 	ands.w	r3, r3, #2
 8010da4:	f8da 9000 	ldr.w	r9, [sl]
 8010da8:	f47f ad73 	bne.w	8010892 <dir_register+0x56>
 8010dac:	9302      	str	r3, [sp, #8]
	res = dir_sdi(dp, 0);
 8010dae:	2100      	movs	r1, #0
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8010db0:	2301      	movs	r3, #1
	res = dir_sdi(dp, 0);
 8010db2:	4650      	mov	r0, sl
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8010db4:	461c      	mov	r4, r3
	res = dir_sdi(dp, 0);
 8010db6:	f7ff f8b3 	bl	800ff20 <dir_sdi>
	if (res == FR_OK) {
 8010dba:	9001      	str	r0, [sp, #4]
 8010dbc:	2800      	cmp	r0, #0
 8010dbe:	f43f ad78 	beq.w	80108b2 <dir_register+0x76>
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8010dc2:	9b01      	ldr	r3, [sp, #4]
 8010dc4:	2b04      	cmp	r3, #4
 8010dc6:	d101      	bne.n	8010dcc <dir_register+0x590>
 8010dc8:	2307      	movs	r3, #7
 8010dca:	9301      	str	r3, [sp, #4]
}
 8010dcc:	9801      	ldr	r0, [sp, #4]
 8010dce:	b011      	add	sp, #68	; 0x44
 8010dd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	ns[i] = '~';
 8010dd4:	237e      	movs	r3, #126	; 0x7e
 8010dd6:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
		ns[i--] = c;
 8010dda:	2206      	movs	r2, #6
 8010ddc:	e718      	b.n	8010c10 <dir_register+0x3d4>
	ns[i] = '~';
 8010dde:	237e      	movs	r3, #126	; 0x7e
 8010de0:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		ns[i--] = c;
 8010de4:	2205      	movs	r2, #5
 8010de6:	e713      	b.n	8010c10 <dir_register+0x3d4>
	ns[i] = '~';
 8010de8:	237e      	movs	r3, #126	; 0x7e
 8010dea:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
		ns[i--] = c;
 8010dee:	2204      	movs	r2, #4
 8010df0:	e70e      	b.n	8010c10 <dir_register+0x3d4>
	ns[i] = '~';
 8010df2:	237e      	movs	r3, #126	; 0x7e
 8010df4:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
		ns[i--] = c;
 8010df8:	2203      	movs	r2, #3
 8010dfa:	e709      	b.n	8010c10 <dir_register+0x3d4>
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8010dfc:	8972      	ldrh	r2, [r6, #10]
 8010dfe:	3a01      	subs	r2, #1
 8010e00:	ea12 2254 	ands.w	r2, r2, r4, lsr #9
 8010e04:	f47f ad7d 	bne.w	8010902 <dir_register+0xc6>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8010e08:	4619      	mov	r1, r3
 8010e0a:	4630      	mov	r0, r6
 8010e0c:	f7fe fa04 	bl	800f218 <get_fat.isra.0>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8010e10:	2801      	cmp	r0, #1
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8010e12:	9004      	str	r0, [sp, #16]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8010e14:	f240 8251 	bls.w	80112ba <dir_register+0xa7e>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8010e18:	1c42      	adds	r2, r0, #1
 8010e1a:	f000 81c9 	beq.w	80111b0 <dir_register+0x974>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8010e1e:	69b3      	ldr	r3, [r6, #24]
 8010e20:	4298      	cmp	r0, r3
 8010e22:	f080 81d3 	bcs.w	80111cc <dir_register+0x990>
 8010e26:	1e82      	subs	r2, r0, #2
 8010e28:	3b02      	subs	r3, #2
 8010e2a:	9205      	str	r2, [sp, #20]
 8010e2c:	f106 0534 	add.w	r5, r6, #52	; 0x34
				dp->clust = clst;		/* Initialize data for new cluster */
 8010e30:	9a04      	ldr	r2, [sp, #16]
 8010e32:	f8ca 2018 	str.w	r2, [sl, #24]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8010e36:	9a05      	ldr	r2, [sp, #20]
 8010e38:	4293      	cmp	r3, r2
 8010e3a:	4611      	mov	r1, r2
	return clst * fs->csize + fs->database;
 8010e3c:	bf85      	ittet	hi
 8010e3e:	6af3      	ldrhi	r3, [r6, #44]	; 0x2c
 8010e40:	8971      	ldrhhi	r1, [r6, #10]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8010e42:	2100      	movls	r1, #0
	return clst * fs->csize + fs->database;
 8010e44:	fb02 3101 	mlahi	r1, r2, r1, r3
				dp->sect = clust2sect(fs, clst);
 8010e48:	f8ca 101c 	str.w	r1, [sl, #28]
 8010e4c:	e55b      	b.n	8010906 <dir_register+0xca>
	ns[i] = '~';
 8010e4e:	237e      	movs	r3, #126	; 0x7e
 8010e50:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
		ns[i--] = c;
 8010e54:	2202      	movs	r2, #2
 8010e56:	e6db      	b.n	8010c10 <dir_register+0x3d4>
	ns[i] = '~';
 8010e58:	237e      	movs	r3, #126	; 0x7e
 8010e5a:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
		ns[i--] = c;
 8010e5e:	2201      	movs	r2, #1
 8010e60:	e6d6      	b.n	8010c10 <dir_register+0x3d4>
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8010e62:	2306      	movs	r3, #6
 8010e64:	9301      	str	r3, [sp, #4]
}
 8010e66:	9801      	ldr	r0, [sp, #4]
 8010e68:	b011      	add	sp, #68	; 0x44
 8010e6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	BYTE *d = (BYTE*)dst;
 8010e6e:	2220      	movs	r2, #32
 8010e70:	f8da 0020 	ldr.w	r0, [sl, #32]
 8010e74:	2100      	movs	r1, #0
 8010e76:	f006 fcad 	bl	80177d4 <memset>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8010e7a:	f8da 3020 	ldr.w	r3, [sl, #32]
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8010e7e:	1d1a      	adds	r2, r3, #4
 8010e80:	4593      	cmp	fp, r2
 8010e82:	d204      	bcs.n	8010e8e <dir_register+0x652>
 8010e84:	f10a 0228 	add.w	r2, sl, #40	; 0x28
 8010e88:	4293      	cmp	r3, r2
 8010e8a:	f0c0 81fd 	bcc.w	8011288 <dir_register+0xa4c>
			*d++ = *s++;
 8010e8e:	f8da 2024 	ldr.w	r2, [sl, #36]	; 0x24
 8010e92:	601a      	str	r2, [r3, #0]
 8010e94:	f8da 2028 	ldr.w	r2, [sl, #40]	; 0x28
 8010e98:	605a      	str	r2, [r3, #4]
 8010e9a:	f89a 202c 	ldrb.w	r2, [sl, #44]	; 0x2c
 8010e9e:	721a      	strb	r2, [r3, #8]
 8010ea0:	f89a 202d 	ldrb.w	r2, [sl, #45]	; 0x2d
 8010ea4:	725a      	strb	r2, [r3, #9]
 8010ea6:	f89a 202e 	ldrb.w	r2, [sl, #46]	; 0x2e
 8010eaa:	729a      	strb	r2, [r3, #10]
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8010eac:	f89a 302f 	ldrb.w	r3, [sl, #47]	; 0x2f
 8010eb0:	f8da 1020 	ldr.w	r1, [sl, #32]
}
 8010eb4:	9801      	ldr	r0, [sp, #4]
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8010eb6:	f003 0318 	and.w	r3, r3, #24
 8010eba:	730b      	strb	r3, [r1, #12]
			fs->wflag = 1;
 8010ebc:	9b00      	ldr	r3, [sp, #0]
 8010ebe:	2201      	movs	r2, #1
 8010ec0:	70da      	strb	r2, [r3, #3]
}
 8010ec2:	b011      	add	sp, #68	; 0x44
 8010ec4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8010ec8:	f8da 1014 	ldr.w	r1, [sl, #20]
 8010ecc:	4650      	mov	r0, sl
 8010ece:	eba1 1143 	sub.w	r1, r1, r3, lsl #5
 8010ed2:	461e      	mov	r6, r3
 8010ed4:	f7ff f824 	bl	800ff20 <dir_sdi>
		if (res == FR_OK) {
 8010ed8:	2800      	cmp	r0, #0
 8010eda:	f47f ad3e 	bne.w	801095a <dir_register+0x11e>
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8010ede:	f89a 2024 	ldrb.w	r2, [sl, #36]	; 0x24
 8010ee2:	f89a 4025 	ldrb.w	r4, [sl, #37]	; 0x25
 8010ee6:	f89a 1026 	ldrb.w	r1, [sl, #38]	; 0x26
	*ptr++ = (BYTE)val; val >>= 8;
 8010eea:	9602      	str	r6, [sp, #8]
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8010eec:	01d3      	lsls	r3, r2, #7
 8010eee:	ea43 0352 	orr.w	r3, r3, r2, lsr #1
 8010ef2:	191a      	adds	r2, r3, r4
 8010ef4:	f3c2 0346 	ubfx	r3, r2, #1, #7
 8010ef8:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 8010efc:	fa51 f283 	uxtab	r2, r1, r3
 8010f00:	f89a 4027 	ldrb.w	r4, [sl, #39]	; 0x27
 8010f04:	f89a 1028 	ldrb.w	r1, [sl, #40]	; 0x28
	*ptr++ = (BYTE)val; val >>= 8;
 8010f08:	9f00      	ldr	r7, [sp, #0]
 8010f0a:	f8cd b00c 	str.w	fp, [sp, #12]
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8010f0e:	f3c2 0346 	ubfx	r3, r2, #1, #7
 8010f12:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 8010f16:	fa54 f283 	uxtab	r2, r4, r3
 8010f1a:	f3c2 0346 	ubfx	r3, r2, #1, #7
 8010f1e:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 8010f22:	fa51 f283 	uxtab	r2, r1, r3
 8010f26:	f89a 4029 	ldrb.w	r4, [sl, #41]	; 0x29
 8010f2a:	f89a 102a 	ldrb.w	r1, [sl, #42]	; 0x2a
 8010f2e:	f3c2 0346 	ubfx	r3, r2, #1, #7
 8010f32:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 8010f36:	fa54 f283 	uxtab	r2, r4, r3
 8010f3a:	f3c2 0346 	ubfx	r3, r2, #1, #7
 8010f3e:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 8010f42:	fa51 f283 	uxtab	r2, r1, r3
 8010f46:	f89a 402b 	ldrb.w	r4, [sl, #43]	; 0x2b
 8010f4a:	f89a 102c 	ldrb.w	r1, [sl, #44]	; 0x2c
 8010f4e:	f3c2 0346 	ubfx	r3, r2, #1, #7
 8010f52:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 8010f56:	fa54 f283 	uxtab	r2, r4, r3
 8010f5a:	f3c2 0346 	ubfx	r3, r2, #1, #7
 8010f5e:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 8010f62:	fa51 f283 	uxtab	r2, r1, r3
 8010f66:	f89a 402d 	ldrb.w	r4, [sl, #45]	; 0x2d
 8010f6a:	f89a 102e 	ldrb.w	r1, [sl, #46]	; 0x2e
 8010f6e:	f3c2 0346 	ubfx	r3, r2, #1, #7
 8010f72:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 8010f76:	fa54 f383 	uxtab	r3, r4, r3
 8010f7a:	f3c3 0846 	ubfx	r8, r3, #1, #7
 8010f7e:	ea48 18c3 	orr.w	r8, r8, r3, lsl #7
 8010f82:	fa51 f888 	uxtab	r8, r1, r8
 8010f86:	fa5f f888 	uxtb.w	r8, r8
	dir[LDIR_Type] = 0;
 8010f8a:	4605      	mov	r5, r0
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8010f8c:	f04f 090f 	mov.w	r9, #15
	*ptr++ = (BYTE)val; val >>= 8;
 8010f90:	24ff      	movs	r4, #255	; 0xff
 8010f92:	4646      	mov	r6, r8
 8010f94:	e027      	b.n	8010fe6 <dir_register+0x7aa>
 8010f96:	70dc      	strb	r4, [r3, #3]
	*ptr++ = (BYTE)val;
 8010f98:	711c      	strb	r4, [r3, #4]
	*ptr++ = (BYTE)val; val >>= 8;
 8010f9a:	715c      	strb	r4, [r3, #5]
	*ptr++ = (BYTE)val;
 8010f9c:	719c      	strb	r4, [r3, #6]
	*ptr++ = (BYTE)val; val >>= 8;
 8010f9e:	71dc      	strb	r4, [r3, #7]
	*ptr++ = (BYTE)val;
 8010fa0:	721c      	strb	r4, [r3, #8]
	*ptr++ = (BYTE)val; val >>= 8;
 8010fa2:	725c      	strb	r4, [r3, #9]
	*ptr++ = (BYTE)val;
 8010fa4:	729c      	strb	r4, [r3, #10]
	*ptr++ = (BYTE)val; val >>= 8;
 8010fa6:	739c      	strb	r4, [r3, #14]
	*ptr++ = (BYTE)val;
 8010fa8:	73dc      	strb	r4, [r3, #15]
	*ptr++ = (BYTE)val; val >>= 8;
 8010faa:	741c      	strb	r4, [r3, #16]
	*ptr++ = (BYTE)val;
 8010fac:	745c      	strb	r4, [r3, #17]
	*ptr++ = (BYTE)val; val >>= 8;
 8010fae:	749c      	strb	r4, [r3, #18]
	*ptr++ = (BYTE)val;
 8010fb0:	74dc      	strb	r4, [r3, #19]
	*ptr++ = (BYTE)val; val >>= 8;
 8010fb2:	751c      	strb	r4, [r3, #20]
	*ptr++ = (BYTE)val;
 8010fb4:	755c      	strb	r4, [r3, #21]
	*ptr++ = (BYTE)val; val >>= 8;
 8010fb6:	759c      	strb	r4, [r3, #22]
	*ptr++ = (BYTE)val;
 8010fb8:	75dc      	strb	r4, [r3, #23]
	*ptr++ = (BYTE)val; val >>= 8;
 8010fba:	761c      	strb	r4, [r3, #24]
	*ptr++ = (BYTE)val;
 8010fbc:	765c      	strb	r4, [r3, #25]
	*ptr++ = (BYTE)val; val >>= 8;
 8010fbe:	771c      	strb	r4, [r3, #28]
	*ptr++ = (BYTE)val;
 8010fc0:	775c      	strb	r4, [r3, #29]
	*ptr++ = (BYTE)val; val >>= 8;
 8010fc2:	779c      	strb	r4, [r3, #30]
	*ptr++ = (BYTE)val;
 8010fc4:	77dc      	strb	r4, [r3, #31]
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8010fc6:	f040 0040 	orr.w	r0, r0, #64	; 0x40
				fs->wflag = 1;
 8010fca:	2201      	movs	r2, #1
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8010fcc:	7018      	strb	r0, [r3, #0]
				res = dir_next(dp, 0);	/* Next entry */
 8010fce:	4650      	mov	r0, sl
				fs->wflag = 1;
 8010fd0:	70fa      	strb	r2, [r7, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8010fd2:	f7fe f98d 	bl	800f2f0 <dir_next.constprop.0>
			} while (res == FR_OK && --nent);
 8010fd6:	2800      	cmp	r0, #0
 8010fd8:	f47f acbf 	bne.w	801095a <dir_register+0x11e>
 8010fdc:	9b02      	ldr	r3, [sp, #8]
 8010fde:	3b01      	subs	r3, #1
 8010fe0:	9302      	str	r3, [sp, #8]
 8010fe2:	f000 816d 	beq.w	80112c0 <dir_register+0xa84>
				res = move_window(fs, dp->sect);
 8010fe6:	f8da 101c 	ldr.w	r1, [sl, #28]
	if (sector != fs->winsect) {	/* Window offset changed? */
 8010fea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010fec:	4299      	cmp	r1, r3
 8010fee:	d005      	beq.n	8010ffc <dir_register+0x7c0>
 8010ff0:	4638      	mov	r0, r7
 8010ff2:	f7fe f83b 	bl	800f06c <move_window.part.0>
				if (res != FR_OK) break;
 8010ff6:	2800      	cmp	r0, #0
 8010ff8:	f47f acaf 	bne.w	801095a <dir_register+0x11e>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8010ffc:	f89d 0008 	ldrb.w	r0, [sp, #8]
 8011000:	f8da 3020 	ldr.w	r3, [sl, #32]
 8011004:	68f9      	ldr	r1, [r7, #12]
	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8011006:	735e      	strb	r6, [r3, #13]
	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8011008:	1e42      	subs	r2, r0, #1
 801100a:	eb02 0c42 	add.w	ip, r2, r2, lsl #1
 801100e:	eb02 028c 	add.w	r2, r2, ip, lsl #2
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8011012:	f883 900b 	strb.w	r9, [r3, #11]
	dir[LDIR_Type] = 0;
 8011016:	731d      	strb	r5, [r3, #12]
	*ptr++ = (BYTE)val; val >>= 8;
 8011018:	769d      	strb	r5, [r3, #26]
	*ptr++ = (BYTE)val;
 801101a:	76dd      	strb	r5, [r3, #27]
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 801101c:	f831 c012 	ldrh.w	ip, [r1, r2, lsl #1]
	*ptr++ = (BYTE)val; val >>= 8;
 8011020:	f883 c001 	strb.w	ip, [r3, #1]
 8011024:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
	*ptr++ = (BYTE)val;
 8011028:	f883 e002 	strb.w	lr, [r3, #2]
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 801102c:	ea4f 0e42 	mov.w	lr, r2, lsl #1
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8011030:	f1bc 0f00 	cmp.w	ip, #0
 8011034:	d0af      	beq.n	8010f96 <dir_register+0x75a>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8011036:	f64f 78ff 	movw	r8, #65535	; 0xffff
 801103a:	45c4      	cmp	ip, r8
 801103c:	d0ab      	beq.n	8010f96 <dir_register+0x75a>
 801103e:	3201      	adds	r2, #1
 8011040:	ea4f 0c42 	mov.w	ip, r2, lsl #1
 8011044:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
	*ptr++ = (BYTE)val; val >>= 8;
 8011048:	70da      	strb	r2, [r3, #3]
 801104a:	ea4f 2b12 	mov.w	fp, r2, lsr #8
	*ptr++ = (BYTE)val;
 801104e:	f883 b004 	strb.w	fp, [r3, #4]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8011052:	2a00      	cmp	r2, #0
 8011054:	d0a1      	beq.n	8010f9a <dir_register+0x75e>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8011056:	4542      	cmp	r2, r8
 8011058:	d09f      	beq.n	8010f9a <dir_register+0x75e>
 801105a:	eb01 020c 	add.w	r2, r1, ip
 801105e:	f8b2 c002 	ldrh.w	ip, [r2, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8011062:	f883 c005 	strb.w	ip, [r3, #5]
 8011066:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
	*ptr++ = (BYTE)val;
 801106a:	f883 b006 	strb.w	fp, [r3, #6]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 801106e:	f1bc 0f00 	cmp.w	ip, #0
 8011072:	d094      	beq.n	8010f9e <dir_register+0x762>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8011074:	45c4      	cmp	ip, r8
 8011076:	d092      	beq.n	8010f9e <dir_register+0x762>
 8011078:	f8b2 c004 	ldrh.w	ip, [r2, #4]
	*ptr++ = (BYTE)val; val >>= 8;
 801107c:	f883 c007 	strb.w	ip, [r3, #7]
 8011080:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
	*ptr++ = (BYTE)val;
 8011084:	f883 b008 	strb.w	fp, [r3, #8]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8011088:	f1bc 0f00 	cmp.w	ip, #0
 801108c:	d089      	beq.n	8010fa2 <dir_register+0x766>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 801108e:	45c4      	cmp	ip, r8
 8011090:	d087      	beq.n	8010fa2 <dir_register+0x766>
 8011092:	f8b2 c006 	ldrh.w	ip, [r2, #6]
	*ptr++ = (BYTE)val; val >>= 8;
 8011096:	f883 c009 	strb.w	ip, [r3, #9]
 801109a:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
	*ptr++ = (BYTE)val;
 801109e:	f883 b00a 	strb.w	fp, [r3, #10]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 80110a2:	f1bc 0f00 	cmp.w	ip, #0
 80110a6:	f43f af7e 	beq.w	8010fa6 <dir_register+0x76a>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 80110aa:	45c4      	cmp	ip, r8
 80110ac:	f43f af7b 	beq.w	8010fa6 <dir_register+0x76a>
 80110b0:	f8b2 c008 	ldrh.w	ip, [r2, #8]
	*ptr++ = (BYTE)val; val >>= 8;
 80110b4:	f883 c00e 	strb.w	ip, [r3, #14]
 80110b8:	ea4f 281c 	mov.w	r8, ip, lsr #8
	*ptr++ = (BYTE)val;
 80110bc:	f883 800f 	strb.w	r8, [r3, #15]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 80110c0:	f1bc 0f00 	cmp.w	ip, #0
 80110c4:	f43f af71 	beq.w	8010faa <dir_register+0x76e>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 80110c8:	f64f 78ff 	movw	r8, #65535	; 0xffff
 80110cc:	45c4      	cmp	ip, r8
 80110ce:	f43f af6c 	beq.w	8010faa <dir_register+0x76e>
 80110d2:	f8b2 c00a 	ldrh.w	ip, [r2, #10]
	*ptr++ = (BYTE)val; val >>= 8;
 80110d6:	f883 c010 	strb.w	ip, [r3, #16]
 80110da:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
	*ptr++ = (BYTE)val;
 80110de:	f883 b011 	strb.w	fp, [r3, #17]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 80110e2:	f1bc 0f00 	cmp.w	ip, #0
 80110e6:	f43f af62 	beq.w	8010fae <dir_register+0x772>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 80110ea:	45c4      	cmp	ip, r8
 80110ec:	f43f af5f 	beq.w	8010fae <dir_register+0x772>
 80110f0:	f8b2 c00c 	ldrh.w	ip, [r2, #12]
	*ptr++ = (BYTE)val; val >>= 8;
 80110f4:	f883 c012 	strb.w	ip, [r3, #18]
 80110f8:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
	*ptr++ = (BYTE)val;
 80110fc:	f883 b013 	strb.w	fp, [r3, #19]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8011100:	f1bc 0f00 	cmp.w	ip, #0
 8011104:	f43f af55 	beq.w	8010fb2 <dir_register+0x776>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8011108:	45c4      	cmp	ip, r8
 801110a:	f43f af52 	beq.w	8010fb2 <dir_register+0x776>
 801110e:	f8b2 c00e 	ldrh.w	ip, [r2, #14]
	*ptr++ = (BYTE)val; val >>= 8;
 8011112:	f883 c014 	strb.w	ip, [r3, #20]
 8011116:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
	*ptr++ = (BYTE)val;
 801111a:	f883 b015 	strb.w	fp, [r3, #21]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 801111e:	f1bc 0f00 	cmp.w	ip, #0
 8011122:	f43f af48 	beq.w	8010fb6 <dir_register+0x77a>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8011126:	45c4      	cmp	ip, r8
 8011128:	f43f af45 	beq.w	8010fb6 <dir_register+0x77a>
 801112c:	f8b2 c010 	ldrh.w	ip, [r2, #16]
	*ptr++ = (BYTE)val; val >>= 8;
 8011130:	f883 c016 	strb.w	ip, [r3, #22]
 8011134:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
	*ptr++ = (BYTE)val;
 8011138:	f883 b017 	strb.w	fp, [r3, #23]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 801113c:	f1bc 0f00 	cmp.w	ip, #0
 8011140:	f43f af3b 	beq.w	8010fba <dir_register+0x77e>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8011144:	45c4      	cmp	ip, r8
 8011146:	f43f af38 	beq.w	8010fba <dir_register+0x77e>
 801114a:	f8b2 c012 	ldrh.w	ip, [r2, #18]
	*ptr++ = (BYTE)val; val >>= 8;
 801114e:	f883 c018 	strb.w	ip, [r3, #24]
 8011152:	ea4f 281c 	mov.w	r8, ip, lsr #8
	*ptr++ = (BYTE)val;
 8011156:	f883 8019 	strb.w	r8, [r3, #25]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 801115a:	f1bc 0f00 	cmp.w	ip, #0
 801115e:	f43f af2e 	beq.w	8010fbe <dir_register+0x782>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8011162:	f64f 7bff 	movw	fp, #65535	; 0xffff
 8011166:	45dc      	cmp	ip, fp
 8011168:	f43f af29 	beq.w	8010fbe <dir_register+0x782>
 801116c:	f8b2 c014 	ldrh.w	ip, [r2, #20]
	*ptr++ = (BYTE)val; val >>= 8;
 8011170:	f883 c01c 	strb.w	ip, [r3, #28]
 8011174:	ea4f 281c 	mov.w	r8, ip, lsr #8
	*ptr++ = (BYTE)val;
 8011178:	f883 801d 	strb.w	r8, [r3, #29]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 801117c:	f1bc 0f00 	cmp.w	ip, #0
 8011180:	f43f af1f 	beq.w	8010fc2 <dir_register+0x786>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8011184:	45dc      	cmp	ip, fp
 8011186:	f43f af1c 	beq.w	8010fc2 <dir_register+0x786>
 801118a:	8ad2      	ldrh	r2, [r2, #22]
	*ptr++ = (BYTE)val; val >>= 8;
 801118c:	779a      	strb	r2, [r3, #30]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 801118e:	f102 3cff 	add.w	ip, r2, #4294967295
 8011192:	fa1f fc8c 	uxth.w	ip, ip
 8011196:	f64f 78fd 	movw	r8, #65533	; 0xfffd
	*ptr++ = (BYTE)val; val >>= 8;
 801119a:	0a12      	lsrs	r2, r2, #8
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 801119c:	45c4      	cmp	ip, r8
	*ptr++ = (BYTE)val;
 801119e:	77da      	strb	r2, [r3, #31]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 80111a0:	f63f af11 	bhi.w	8010fc6 <dir_register+0x78a>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 80111a4:	4471      	add	r1, lr
 80111a6:	8b4a      	ldrh	r2, [r1, #26]
 80111a8:	2a00      	cmp	r2, #0
 80111aa:	f47f af0e 	bne.w	8010fca <dir_register+0x78e>
 80111ae:	e70a      	b.n	8010fc6 <dir_register+0x78a>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80111b0:	2301      	movs	r3, #1
 80111b2:	9301      	str	r3, [sp, #4]
}
 80111b4:	9801      	ldr	r0, [sp, #4]
 80111b6:	b011      	add	sp, #68	; 0x44
 80111b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				dp->sect = 0; return FR_NO_FILE;
 80111bc:	f8ca 301c 	str.w	r3, [sl, #28]
 80111c0:	e602      	b.n	8010dc8 <dir_register+0x58c>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 80111c2:	461c      	mov	r4, r3
 80111c4:	f7ff bb53 	b.w	801086e <dir_register+0x32>
 80111c8:	9001      	str	r0, [sp, #4]
 80111ca:	e5fa      	b.n	8010dc2 <dir_register+0x586>
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80111cc:	f8da 1018 	ldr.w	r1, [sl, #24]
 80111d0:	4650      	mov	r0, sl
 80111d2:	f7fe fb87 	bl	800f8e4 <create_chain>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80111d6:	4603      	mov	r3, r0
 80111d8:	9004      	str	r0, [sp, #16]
 80111da:	2800      	cmp	r0, #0
 80111dc:	f43f adf4 	beq.w	8010dc8 <dir_register+0x58c>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80111e0:	2801      	cmp	r0, #1
 80111e2:	d06a      	beq.n	80112ba <dir_register+0xa7e>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80111e4:	3301      	adds	r3, #1
 80111e6:	d0e3      	beq.n	80111b0 <dir_register+0x974>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80111e8:	78f3      	ldrb	r3, [r6, #3]
 80111ea:	2b00      	cmp	r3, #0
 80111ec:	d177      	bne.n	80112de <dir_register+0xaa2>
 80111ee:	f106 0534 	add.w	r5, r6, #52	; 0x34
	BYTE *d = (BYTE*)dst;
 80111f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80111f6:	2100      	movs	r1, #0
 80111f8:	4628      	mov	r0, r5
 80111fa:	f006 faeb 	bl	80177d4 <memset>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80111fe:	69b3      	ldr	r3, [r6, #24]
	clst -= 2;
 8011200:	9a04      	ldr	r2, [sp, #16]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8011202:	3b02      	subs	r3, #2
	clst -= 2;
 8011204:	3a02      	subs	r2, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8011206:	429a      	cmp	r2, r3
	clst -= 2;
 8011208:	9205      	str	r2, [sp, #20]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 801120a:	f080 8095 	bcs.w	8011338 <dir_register+0xafc>
	return clst * fs->csize + fs->database;
 801120e:	4610      	mov	r0, r2
 8011210:	8971      	ldrh	r1, [r6, #10]
 8011212:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 8011214:	fb00 2201 	mla	r2, r0, r1, r2
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8011218:	6332      	str	r2, [r6, #48]	; 0x30
 801121a:	2900      	cmp	r1, #0
 801121c:	d05d      	beq.n	80112da <dir_register+0xa9e>
 801121e:	2300      	movs	r3, #0
 8011220:	e9cd b406 	strd	fp, r4, [sp, #24]
 8011224:	9708      	str	r7, [sp, #32]
 8011226:	461c      	mov	r4, r3
 8011228:	462f      	mov	r7, r5
 801122a:	4615      	mov	r5, r2
						fs->wflag = 1;
 801122c:	f04f 0301 	mov.w	r3, #1
 8011230:	70f3      	strb	r3, [r6, #3]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8011232:	7870      	ldrb	r0, [r6, #1]
 8011234:	2301      	movs	r3, #1
 8011236:	462a      	mov	r2, r5
 8011238:	4639      	mov	r1, r7
 801123a:	f7fd fe07 	bl	800ee4c <disk_write>
 801123e:	2800      	cmp	r0, #0
 8011240:	d1b6      	bne.n	80111b0 <dir_register+0x974>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8011242:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8011244:	69f3      	ldr	r3, [r6, #28]
			fs->wflag = 0;
 8011246:	70f0      	strb	r0, [r6, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8011248:	1aa8      	subs	r0, r5, r2
 801124a:	4298      	cmp	r0, r3
 801124c:	d212      	bcs.n	8011274 <dir_register+0xa38>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801124e:	f896 b002 	ldrb.w	fp, [r6, #2]
 8011252:	f1bb 0f01 	cmp.w	fp, #1
 8011256:	d801      	bhi.n	801125c <dir_register+0xa20>
 8011258:	e00c      	b.n	8011274 <dir_register+0xa38>
 801125a:	69f3      	ldr	r3, [r6, #28]
					disk_write(fs->drv, fs->win, wsect, 1);
 801125c:	7870      	ldrb	r0, [r6, #1]
					wsect += fs->fsize;
 801125e:	441d      	add	r5, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8011260:	f10b 3bff 	add.w	fp, fp, #4294967295
					disk_write(fs->drv, fs->win, wsect, 1);
 8011264:	462a      	mov	r2, r5
 8011266:	2301      	movs	r3, #1
 8011268:	4639      	mov	r1, r7
 801126a:	f7fd fdef 	bl	800ee4c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801126e:	f1bb 0f01 	cmp.w	fp, #1
 8011272:	d1f2      	bne.n	801125a <dir_register+0xa1e>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8011274:	6b30      	ldr	r0, [r6, #48]	; 0x30
 8011276:	f8b6 c00a 	ldrh.w	ip, [r6, #10]
 801127a:	1c63      	adds	r3, r4, #1
 801127c:	1c45      	adds	r5, r0, #1
 801127e:	4563      	cmp	r3, ip
 8011280:	6335      	str	r5, [r6, #48]	; 0x30
 8011282:	d221      	bcs.n	80112c8 <dir_register+0xa8c>
 8011284:	461c      	mov	r4, r3
 8011286:	e7d1      	b.n	801122c <dir_register+0x9f0>
			*d++ = *s++;
 8011288:	f89a 2024 	ldrb.w	r2, [sl, #36]	; 0x24
 801128c:	701a      	strb	r2, [r3, #0]
 801128e:	f89a 2025 	ldrb.w	r2, [sl, #37]	; 0x25
 8011292:	705a      	strb	r2, [r3, #1]
 8011294:	f89a 2026 	ldrb.w	r2, [sl, #38]	; 0x26
 8011298:	709a      	strb	r2, [r3, #2]
 801129a:	f89a 2027 	ldrb.w	r2, [sl, #39]	; 0x27
 801129e:	70da      	strb	r2, [r3, #3]
 80112a0:	f89a 2028 	ldrb.w	r2, [sl, #40]	; 0x28
 80112a4:	711a      	strb	r2, [r3, #4]
 80112a6:	f89a 2029 	ldrb.w	r2, [sl, #41]	; 0x29
 80112aa:	715a      	strb	r2, [r3, #5]
 80112ac:	f89a 202a 	ldrb.w	r2, [sl, #42]	; 0x2a
 80112b0:	719a      	strb	r2, [r3, #6]
 80112b2:	f89a 202b 	ldrb.w	r2, [sl, #43]	; 0x2b
 80112b6:	71da      	strb	r2, [r3, #7]
 80112b8:	e5ef      	b.n	8010e9a <dir_register+0x65e>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80112ba:	2302      	movs	r3, #2
 80112bc:	9301      	str	r3, [sp, #4]
 80112be:	e585      	b.n	8010dcc <dir_register+0x590>
 80112c0:	f8dd b00c 	ldr.w	fp, [sp, #12]
 80112c4:	f7ff bb3c 	b.w	8010940 <dir_register+0x104>
 80112c8:	69b3      	ldr	r3, [r6, #24]
 80112ca:	f8dd b018 	ldr.w	fp, [sp, #24]
 80112ce:	4622      	mov	r2, r4
 80112d0:	463d      	mov	r5, r7
 80112d2:	9c07      	ldr	r4, [sp, #28]
 80112d4:	9f08      	ldr	r7, [sp, #32]
 80112d6:	1a82      	subs	r2, r0, r2
 80112d8:	3b02      	subs	r3, #2
					fs->winsect -= n;							/* Restore window offset */
 80112da:	6332      	str	r2, [r6, #48]	; 0x30
 80112dc:	e5a8      	b.n	8010e30 <dir_register+0x5f4>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80112de:	f106 0534 	add.w	r5, r6, #52	; 0x34
		wsect = fs->winsect;	/* Current sector number */
 80112e2:	6b32      	ldr	r2, [r6, #48]	; 0x30
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80112e4:	7870      	ldrb	r0, [r6, #1]
 80112e6:	9205      	str	r2, [sp, #20]
 80112e8:	4629      	mov	r1, r5
 80112ea:	2301      	movs	r3, #1
 80112ec:	f7fd fdae 	bl	800ee4c <disk_write>
 80112f0:	2800      	cmp	r0, #0
 80112f2:	f47f af5d 	bne.w	80111b0 <dir_register+0x974>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80112f6:	6a71      	ldr	r1, [r6, #36]	; 0x24
 80112f8:	9a05      	ldr	r2, [sp, #20]
 80112fa:	69f3      	ldr	r3, [r6, #28]
			fs->wflag = 0;
 80112fc:	70f0      	strb	r0, [r6, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80112fe:	1a51      	subs	r1, r2, r1
 8011300:	4299      	cmp	r1, r3
 8011302:	f4bf af76 	bcs.w	80111f2 <dir_register+0x9b6>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8011306:	78b1      	ldrb	r1, [r6, #2]
 8011308:	2901      	cmp	r1, #1
 801130a:	f67f af72 	bls.w	80111f2 <dir_register+0x9b6>
 801130e:	e9cd 4705 	strd	r4, r7, [sp, #20]
 8011312:	462f      	mov	r7, r5
 8011314:	460c      	mov	r4, r1
 8011316:	4615      	mov	r5, r2
 8011318:	e000      	b.n	801131c <dir_register+0xae0>
 801131a:	69f3      	ldr	r3, [r6, #28]
					disk_write(fs->drv, fs->win, wsect, 1);
 801131c:	7870      	ldrb	r0, [r6, #1]
					wsect += fs->fsize;
 801131e:	441d      	add	r5, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8011320:	3c01      	subs	r4, #1
					disk_write(fs->drv, fs->win, wsect, 1);
 8011322:	462a      	mov	r2, r5
 8011324:	2301      	movs	r3, #1
 8011326:	4639      	mov	r1, r7
 8011328:	f7fd fd90 	bl	800ee4c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801132c:	2c01      	cmp	r4, #1
 801132e:	d1f4      	bne.n	801131a <dir_register+0xade>
 8011330:	463d      	mov	r5, r7
 8011332:	9c05      	ldr	r4, [sp, #20]
 8011334:	9f06      	ldr	r7, [sp, #24]
 8011336:	e75c      	b.n	80111f2 <dir_register+0x9b6>
 8011338:	8971      	ldrh	r1, [r6, #10]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 801133a:	2200      	movs	r2, #0
 801133c:	e76c      	b.n	8011218 <dir_register+0x9dc>
 801133e:	bf00      	nop

08011340 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8011340:	b570      	push	{r4, r5, r6, lr}
 8011342:	b082      	sub	sp, #8
 8011344:	e9cd 1000 	strd	r1, r0, [sp]
	if (*path) {	/* If the pointer is not a null */
 8011348:	b171      	cbz	r1, 8011368 <f_mount+0x28>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 801134a:	780c      	ldrb	r4, [r1, #0]
 801134c:	2c1f      	cmp	r4, #31
 801134e:	d910      	bls.n	8011372 <f_mount+0x32>
 8011350:	4623      	mov	r3, r4
 8011352:	4608      	mov	r0, r1
 8011354:	e003      	b.n	801135e <f_mount+0x1e>
 8011356:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 801135a:	2b1f      	cmp	r3, #31
 801135c:	d909      	bls.n	8011372 <f_mount+0x32>
 801135e:	2b3a      	cmp	r3, #58	; 0x3a
 8011360:	d1f9      	bne.n	8011356 <f_mount+0x16>
			i = *tp++ - '0';
 8011362:	3101      	adds	r1, #1
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8011364:	4288      	cmp	r0, r1
 8011366:	d002      	beq.n	801136e <f_mount+0x2e>
	const TCHAR *rp = path;


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
	if (vol < 0) return FR_INVALID_DRIVE;
 8011368:	200b      	movs	r0, #11

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
	LEAVE_FF(fs, res);
}
 801136a:	b002      	add	sp, #8
 801136c:	bd70      	pop	{r4, r5, r6, pc}
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 801136e:	2c30      	cmp	r4, #48	; 0x30
 8011370:	d1fa      	bne.n	8011368 <f_mount+0x28>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8011372:	4e11      	ldr	r6, [pc, #68]	; (80113b8 <f_mount+0x78>)
 8011374:	6830      	ldr	r0, [r6, #0]
	if (cfs) {
 8011376:	b168      	cbz	r0, 8011394 <f_mount+0x54>
 8011378:	f506 7302 	add.w	r3, r6, #520	; 0x208
 801137c:	f506 7452 	add.w	r4, r6, #840	; 0x348
		if (Files[i].fs == fs) Files[i].fs = 0;
 8011380:	2500      	movs	r5, #0
 8011382:	6819      	ldr	r1, [r3, #0]
 8011384:	4288      	cmp	r0, r1
 8011386:	bf08      	it	eq
 8011388:	601d      	streq	r5, [r3, #0]
 801138a:	3310      	adds	r3, #16
	for (i = 0; i < _FS_LOCK; i++) {
 801138c:	42a3      	cmp	r3, r4
 801138e:	d1f8      	bne.n	8011382 <f_mount+0x42>
		cfs->fs_type = 0;				/* Clear old fs object */
 8011390:	2300      	movs	r3, #0
 8011392:	7003      	strb	r3, [r0, #0]
	if (fs) {
 8011394:	9b01      	ldr	r3, [sp, #4]
 8011396:	b15b      	cbz	r3, 80113b0 <f_mount+0x70>
		fs->fs_type = 0;				/* Clear new fs object */
 8011398:	2000      	movs	r0, #0
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 801139a:	2a01      	cmp	r2, #1
	FatFs[vol] = fs;					/* Register new fs object */
 801139c:	6033      	str	r3, [r6, #0]
		fs->fs_type = 0;				/* Clear new fs object */
 801139e:	7018      	strb	r0, [r3, #0]
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80113a0:	d1e3      	bne.n	801136a <f_mount+0x2a>
	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80113a2:	4602      	mov	r2, r0
 80113a4:	a901      	add	r1, sp, #4
 80113a6:	4668      	mov	r0, sp
 80113a8:	f7fe fbcc 	bl	800fb44 <find_volume>
}
 80113ac:	b002      	add	sp, #8
 80113ae:	bd70      	pop	{r4, r5, r6, pc}
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80113b0:	4618      	mov	r0, r3
	FatFs[vol] = fs;					/* Register new fs object */
 80113b2:	6033      	str	r3, [r6, #0]
}
 80113b4:	b002      	add	sp, #8
 80113b6:	bd70      	pop	{r4, r5, r6, pc}
 80113b8:	20001d00 	.word	0x20001d00

080113bc <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80113bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80113c0:	b093      	sub	sp, #76	; 0x4c
 80113c2:	9101      	str	r1, [sp, #4]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80113c4:	2800      	cmp	r0, #0
 80113c6:	f000 8156 	beq.w	8011676 <f_open+0x2ba>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80113ca:	f002 073f 	and.w	r7, r2, #63	; 0x3f
	res = find_volume(&path, &fs, mode);
 80113ce:	4616      	mov	r6, r2
 80113d0:	4604      	mov	r4, r0
 80113d2:	463a      	mov	r2, r7
 80113d4:	a903      	add	r1, sp, #12
 80113d6:	a801      	add	r0, sp, #4
 80113d8:	f7fe fbb4 	bl	800fb44 <find_volume>
	if (res == FR_OK) {
 80113dc:	4605      	mov	r5, r0
 80113de:	b128      	cbz	r0, 80113ec <f_open+0x30>
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80113e0:	2300      	movs	r3, #0
 80113e2:	6023      	str	r3, [r4, #0]

	LEAVE_FF(fs, res);
}
 80113e4:	4628      	mov	r0, r5
 80113e6:	b013      	add	sp, #76	; 0x4c
 80113e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		dj.obj.fs = fs;
 80113ec:	9b03      	ldr	r3, [sp, #12]
		res = follow_path(&dj, path);	/* Follow the file path */
 80113ee:	9901      	ldr	r1, [sp, #4]
		dj.obj.fs = fs;
 80113f0:	9304      	str	r3, [sp, #16]
		res = follow_path(&dj, path);	/* Follow the file path */
 80113f2:	a804      	add	r0, sp, #16
 80113f4:	f7ff f802 	bl	80103fc <follow_path>
		if (res == FR_OK) {
 80113f8:	bb10      	cbnz	r0, 8011440 <f_open+0x84>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80113fa:	f99d 303f 	ldrsb.w	r3, [sp, #63]	; 0x3f
 80113fe:	2b00      	cmp	r3, #0
 8011400:	f2c0 8140 	blt.w	8011684 <f_open+0x2c8>
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8011404:	f8df 8378 	ldr.w	r8, [pc, #888]	; 8011780 <f_open+0x3c4>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8011408:	9b04      	ldr	r3, [sp, #16]
				Files[i].clu == dp->obj.sclust &&
 801140a:	9906      	ldr	r1, [sp, #24]
				Files[i].ofs == dp->dptr) break;
 801140c:	9809      	ldr	r0, [sp, #36]	; 0x24
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 801140e:	f027 0b01 	bic.w	fp, r7, #1
 8011412:	46c4      	mov	ip, r8
 8011414:	46da      	mov	sl, fp
	for (i = be = 0; i < _FS_LOCK; i++) {
 8011416:	46a9      	mov	r9, r5
 8011418:	46ae      	mov	lr, r5
 801141a:	e00a      	b.n	8011432 <f_open+0x76>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 801141c:	429a      	cmp	r2, r3
 801141e:	f000 8109 	beq.w	8011634 <f_open+0x278>
	for (i = be = 0; i < _FS_LOCK; i++) {
 8011422:	f10e 0e01 	add.w	lr, lr, #1
 8011426:	f1be 0f14 	cmp.w	lr, #20
 801142a:	f10c 0c10 	add.w	ip, ip, #16
 801142e:	f000 8170 	beq.w	8011712 <f_open+0x356>
		if (Files[i].fs) {	/* Existing entry */
 8011432:	f8dc 2000 	ldr.w	r2, [ip]
 8011436:	2a00      	cmp	r2, #0
 8011438:	d1f0      	bne.n	801141c <f_open+0x60>
			be = 1;
 801143a:	f04f 0901 	mov.w	r9, #1
 801143e:	e7f0      	b.n	8011422 <f_open+0x66>
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8011440:	f016 0f1c 	tst.w	r6, #28
 8011444:	f000 811c 	beq.w	8011680 <f_open+0x2c4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8011448:	2804      	cmp	r0, #4
 801144a:	f040 8119 	bne.w	8011680 <f_open+0x2c4>
 801144e:	f8df 8330 	ldr.w	r8, [pc, #816]	; 8011780 <f_open+0x3c4>
 8011452:	4643      	mov	r3, r8
 8011454:	f508 71a0 	add.w	r1, r8, #320	; 0x140
 8011458:	e002      	b.n	8011460 <f_open+0xa4>
	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 801145a:	428b      	cmp	r3, r1
 801145c:	f000 815c 	beq.w	8011718 <f_open+0x35c>
 8011460:	681a      	ldr	r2, [r3, #0]
 8011462:	3310      	adds	r3, #16
 8011464:	2a00      	cmp	r2, #0
 8011466:	d1f8      	bne.n	801145a <f_open+0x9e>
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8011468:	a804      	add	r0, sp, #16
 801146a:	f7ff f9e7 	bl	801083c <dir_register>
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 801146e:	f047 0708 	orr.w	r7, r7, #8
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8011472:	2800      	cmp	r0, #0
 8011474:	f040 8104 	bne.w	8011680 <f_open+0x2c4>
				dw = GET_FATTIME();
 8011478:	f7fd fd04 	bl	800ee84 <get_fattime>
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 801147c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 801147e:	f8dd 900c 	ldr.w	r9, [sp, #12]
	*ptr++ = (BYTE)val; val >>= 8;
 8011482:	b2c6      	uxtb	r6, r0
	*ptr++ = (BYTE)val; val >>= 8;
 8011484:	f3c0 2107 	ubfx	r1, r0, #8, #8
	*ptr++ = (BYTE)val; val >>= 8;
 8011488:	f3c0 4207 	ubfx	r2, r0, #16, #8
	*ptr++ = (BYTE)val;
 801148c:	0e00      	lsrs	r0, r0, #24
	*ptr++ = (BYTE)val; val >>= 8;
 801148e:	741a      	strb	r2, [r3, #16]
	*ptr++ = (BYTE)val; val >>= 8;
 8011490:	739e      	strb	r6, [r3, #14]
	*ptr++ = (BYTE)val; val >>= 8;
 8011492:	73d9      	strb	r1, [r3, #15]
	*ptr++ = (BYTE)val;
 8011494:	7458      	strb	r0, [r3, #17]
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8011496:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	*ptr++ = (BYTE)val; val >>= 8;
 8011498:	761a      	strb	r2, [r3, #24]
	*ptr++ = (BYTE)val; val >>= 8;
 801149a:	759e      	strb	r6, [r3, #22]
	*ptr++ = (BYTE)val; val >>= 8;
 801149c:	75d9      	strb	r1, [r3, #23]
	*ptr++ = (BYTE)val;
 801149e:	7658      	strb	r0, [r3, #25]
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80114a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80114a2:	2220      	movs	r2, #32
 80114a4:	72da      	strb	r2, [r3, #11]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80114a6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	if (fs->fs_type == FS_FAT32) {
 80114a8:	f899 1000 	ldrb.w	r1, [r9]
	rv = rv << 8 | ptr[0];
 80114ac:	7ed6      	ldrb	r6, [r2, #27]
 80114ae:	7e93      	ldrb	r3, [r2, #26]
	if (fs->fs_type == FS_FAT32) {
 80114b0:	2903      	cmp	r1, #3
	cl = ld_word(dir + DIR_FstClusLO);
 80114b2:	ea43 2606 	orr.w	r6, r3, r6, lsl #8
	if (fs->fs_type == FS_FAT32) {
 80114b6:	d105      	bne.n	80114c4 <f_open+0x108>
	rv = rv << 8 | ptr[0];
 80114b8:	7d51      	ldrb	r1, [r2, #21]
 80114ba:	7d13      	ldrb	r3, [r2, #20]
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80114bc:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80114c0:	ea46 4603 	orr.w	r6, r6, r3, lsl #16
	*ptr++ = (BYTE)val; val >>= 8;
 80114c4:	2300      	movs	r3, #0
 80114c6:	7693      	strb	r3, [r2, #26]
	*ptr++ = (BYTE)val;
 80114c8:	76d3      	strb	r3, [r2, #27]
	if (fs->fs_type == FS_FAT32) {
 80114ca:	f899 1000 	ldrb.w	r1, [r9]
 80114ce:	2903      	cmp	r1, #3
 80114d0:	d101      	bne.n	80114d6 <f_open+0x11a>
	*ptr++ = (BYTE)val; val >>= 8;
 80114d2:	7513      	strb	r3, [r2, #20]
	*ptr++ = (BYTE)val;
 80114d4:	7553      	strb	r3, [r2, #21]
					st_dword(dj.dir + DIR_FileSize, 0);
 80114d6:	990c      	ldr	r1, [sp, #48]	; 0x30
	*ptr++ = (BYTE)val; val >>= 8;
 80114d8:	2200      	movs	r2, #0
					fs->wflag = 1;
 80114da:	2301      	movs	r3, #1
	*ptr++ = (BYTE)val; val >>= 8;
 80114dc:	61ca      	str	r2, [r1, #28]
					fs->wflag = 1;
 80114de:	f889 3003 	strb.w	r3, [r9, #3]
					if (cl) {							/* Remove the cluster chain if exist */
 80114e2:	b1ee      	cbz	r6, 8011520 <f_open+0x164>
						dw = fs->winsect;
 80114e4:	f8d9 3030 	ldr.w	r3, [r9, #48]	; 0x30
 80114e8:	9300      	str	r3, [sp, #0]
						res = remove_chain(&dj.obj, cl, 0);
 80114ea:	a804      	add	r0, sp, #16
 80114ec:	4631      	mov	r1, r6
 80114ee:	f7ff f8fd 	bl	80106ec <remove_chain>
						if (res == FR_OK) {
 80114f2:	2800      	cmp	r0, #0
 80114f4:	f040 80c4 	bne.w	8011680 <f_open+0x2c4>
							res = move_window(fs, dw);
 80114f8:	f8dd 900c 	ldr.w	r9, [sp, #12]
	if (sector != fs->winsect) {	/* Window offset changed? */
 80114fc:	9b00      	ldr	r3, [sp, #0]
 80114fe:	f8d9 2030 	ldr.w	r2, [r9, #48]	; 0x30
 8011502:	4293      	cmp	r3, r2
 8011504:	f000 8133 	beq.w	801176e <f_open+0x3b2>
 8011508:	4648      	mov	r0, r9
 801150a:	4619      	mov	r1, r3
 801150c:	f7fd fdae 	bl	800f06c <move_window.part.0>
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8011510:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8011514:	3e01      	subs	r6, #1
 8011516:	f8c9 6010 	str.w	r6, [r9, #16]
		if (res == FR_OK) {
 801151a:	2800      	cmp	r0, #0
 801151c:	f040 80b0 	bne.w	8011680 <f_open+0x2c4>
 8011520:	9b04      	ldr	r3, [sp, #16]
 8011522:	9906      	ldr	r1, [sp, #24]
 8011524:	9809      	ldr	r0, [sp, #36]	; 0x24
				mode |= FA_MODIFIED;
 8011526:	f047 0740 	orr.w	r7, r7, #64	; 0x40
 801152a:	f027 0a01 	bic.w	sl, r7, #1
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 801152e:	f8d9 2030 	ldr.w	r2, [r9, #48]	; 0x30
			fp->dir_ptr = dj.dir;
 8011532:	f8dd e030 	ldr.w	lr, [sp, #48]	; 0x30
 8011536:	46c4      	mov	ip, r8
 8011538:	e9c4 2e09 	strd	r2, lr, [r4, #36]	; 0x24
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 801153c:	2600      	movs	r6, #0
 801153e:	e005      	b.n	801154c <f_open+0x190>
 8011540:	3601      	adds	r6, #1
 8011542:	2e14      	cmp	r6, #20
 8011544:	f10c 0c10 	add.w	ip, ip, #16
 8011548:	f000 80a0 	beq.w	801168c <f_open+0x2d0>
		if (Files[i].fs == dp->obj.fs &&
 801154c:	f8dc 2000 	ldr.w	r2, [ip]
 8011550:	429a      	cmp	r2, r3
 8011552:	d1f5      	bne.n	8011540 <f_open+0x184>
 8011554:	f8dc 2004 	ldr.w	r2, [ip, #4]
 8011558:	428a      	cmp	r2, r1
 801155a:	d1f1      	bne.n	8011540 <f_open+0x184>
			Files[i].clu == dp->obj.sclust &&
 801155c:	f8dc 2008 	ldr.w	r2, [ip, #8]
 8011560:	4282      	cmp	r2, r0
 8011562:	d1ed      	bne.n	8011540 <f_open+0x184>
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8011564:	4a85      	ldr	r2, [pc, #532]	; (801177c <f_open+0x3c0>)
 8011566:	ea4f 1c06 	mov.w	ip, r6, lsl #4
 801156a:	eb02 1306 	add.w	r3, r2, r6, lsl #4
 801156e:	f1ba 0f00 	cmp.w	sl, #0
 8011572:	f000 80bb 	beq.w	80116ec <f_open+0x330>
 8011576:	f8b3 3214 	ldrh.w	r3, [r3, #532]	; 0x214
 801157a:	2b00      	cmp	r3, #0
 801157c:	f040 80c3 	bne.w	8011706 <f_open+0x34a>
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8011580:	f44f 7a80 	mov.w	sl, #256	; 0x100
 8011584:	4462      	add	r2, ip
	return i + 1;
 8011586:	3601      	adds	r6, #1
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8011588:	f8a2 a214 	strh.w	sl, [r2, #532]	; 0x214
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 801158c:	6126      	str	r6, [r4, #16]
	if (fs->fs_type == FS_FAT32) {
 801158e:	f899 3000 	ldrb.w	r3, [r9]
	rv = rv << 8 | ptr[0];
 8011592:	f89e 001b 	ldrb.w	r0, [lr, #27]
 8011596:	f89e 601a 	ldrb.w	r6, [lr, #26]
	if (fs->fs_type == FS_FAT32) {
 801159a:	2b03      	cmp	r3, #3
	cl = ld_word(dir + DIR_FstClusLO);
 801159c:	ea46 2600 	orr.w	r6, r6, r0, lsl #8
	if (fs->fs_type == FS_FAT32) {
 80115a0:	d107      	bne.n	80115b2 <f_open+0x1f6>
	rv = rv << 8 | ptr[0];
 80115a2:	f89e 2015 	ldrb.w	r2, [lr, #21]
 80115a6:	f89e 3014 	ldrb.w	r3, [lr, #20]
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80115aa:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80115ae:	ea46 4603 	orr.w	r6, r6, r3, lsl #16
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80115b2:	60a6      	str	r6, [r4, #8]
	rv = rv << 8 | ptr[2];
 80115b4:	f8be 101e 	ldrh.w	r1, [lr, #30]
	rv = rv << 8 | ptr[1];
 80115b8:	f89e 301d 	ldrb.w	r3, [lr, #29]
	rv = rv << 8 | ptr[0];
 80115bc:	f89e 801c 	ldrb.w	r8, [lr, #28]
			fp->obj.id = fs->id;
 80115c0:	f8b9 2006 	ldrh.w	r2, [r9, #6]
 80115c4:	80a2      	strh	r2, [r4, #4]
	rv = rv << 8 | ptr[1];
 80115c6:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	rv = rv << 8 | ptr[0];
 80115ca:	ea48 2803 	orr.w	r8, r8, r3, lsl #8
			fp->cltbl = 0;			/* Disable fast seek mode */
 80115ce:	2100      	movs	r1, #0
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80115d0:	f104 0a30 	add.w	sl, r4, #48	; 0x30
 80115d4:	f44f 7200 	mov.w	r2, #512	; 0x200
			fp->obj.fs = fs;	 	/* Validate the file object */
 80115d8:	f8c4 9000 	str.w	r9, [r4]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80115dc:	f8c4 800c 	str.w	r8, [r4, #12]
			fp->cltbl = 0;			/* Disable fast seek mode */
 80115e0:	62e1      	str	r1, [r4, #44]	; 0x2c
			fp->err = 0;			/* Clear error flag */
 80115e2:	7561      	strb	r1, [r4, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 80115e4:	6221      	str	r1, [r4, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80115e6:	61a1      	str	r1, [r4, #24]
			fp->flag = mode;		/* Set file access mode */
 80115e8:	7527      	strb	r7, [r4, #20]
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80115ea:	4650      	mov	r0, sl
 80115ec:	f006 f8f2 	bl	80177d4 <memset>
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80115f0:	06ba      	lsls	r2, r7, #26
 80115f2:	f57f aef7 	bpl.w	80113e4 <f_open+0x28>
 80115f6:	f1b8 0f00 	cmp.w	r8, #0
 80115fa:	f43f aef3 	beq.w	80113e4 <f_open+0x28>
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80115fe:	f8b9 300a 	ldrh.w	r3, [r9, #10]
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8011602:	f8c4 8018 	str.w	r8, [r4, #24]
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8011606:	ebb8 2f43 	cmp.w	r8, r3, lsl #9
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 801160a:	ea4f 2743 	mov.w	r7, r3, lsl #9
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 801160e:	d807      	bhi.n	8011620 <f_open+0x264>
 8011610:	e08d      	b.n	801172e <f_open+0x372>
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8011612:	1c43      	adds	r3, r0, #1
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8011614:	eba8 0807 	sub.w	r8, r8, r7
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8011618:	d066      	beq.n	80116e8 <f_open+0x32c>
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 801161a:	4547      	cmp	r7, r8
 801161c:	f080 8087 	bcs.w	801172e <f_open+0x372>
					clst = get_fat(&fp->obj, clst);
 8011620:	4631      	mov	r1, r6
 8011622:	6820      	ldr	r0, [r4, #0]
 8011624:	f7fd fdf8 	bl	800f218 <get_fat.isra.0>
					if (clst <= 1) res = FR_INT_ERR;
 8011628:	2801      	cmp	r0, #1
					clst = get_fat(&fp->obj, clst);
 801162a:	4606      	mov	r6, r0
					if (clst <= 1) res = FR_INT_ERR;
 801162c:	d8f1      	bhi.n	8011612 <f_open+0x256>
 801162e:	2502      	movs	r5, #2
				fp->clust = clst;
 8011630:	61e6      	str	r6, [r4, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8011632:	e6d5      	b.n	80113e0 <f_open+0x24>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8011634:	f8dc 2004 	ldr.w	r2, [ip, #4]
 8011638:	428a      	cmp	r2, r1
 801163a:	f47f aef2 	bne.w	8011422 <f_open+0x66>
				Files[i].clu == dp->obj.sclust &&
 801163e:	f8dc 2008 	ldr.w	r2, [ip, #8]
 8011642:	4282      	cmp	r2, r0
 8011644:	f47f aeed 	bne.w	8011422 <f_open+0x66>
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8011648:	f1bb 0f00 	cmp.w	fp, #0
 801164c:	d11c      	bne.n	8011688 <f_open+0x2cc>
 801164e:	4a4b      	ldr	r2, [pc, #300]	; (801177c <f_open+0x3c0>)
 8011650:	eb02 1e0e 	add.w	lr, r2, lr, lsl #4
 8011654:	f8be 2214 	ldrh.w	r2, [lr, #532]	; 0x214
 8011658:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 801165c:	d014      	beq.n	8011688 <f_open+0x2cc>
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 801165e:	f016 0f1c 	tst.w	r6, #28
 8011662:	d030      	beq.n	80116c6 <f_open+0x30a>
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8011664:	f89d 2016 	ldrb.w	r2, [sp, #22]
 8011668:	f012 0f11 	tst.w	r2, #17
 801166c:	d14f      	bne.n	801170e <f_open+0x352>
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 801166e:	0772      	lsls	r2, r6, #29
 8011670:	d543      	bpl.n	80116fa <f_open+0x33e>
 8011672:	2508      	movs	r5, #8
 8011674:	e6b4      	b.n	80113e0 <f_open+0x24>
	if (!fp) return FR_INVALID_OBJECT;
 8011676:	2509      	movs	r5, #9
}
 8011678:	4628      	mov	r0, r5
 801167a:	b013      	add	sp, #76	; 0x4c
 801167c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011680:	4605      	mov	r5, r0
 8011682:	e6ad      	b.n	80113e0 <f_open+0x24>
				res = FR_INVALID_NAME;
 8011684:	2506      	movs	r5, #6
 8011686:	e6ab      	b.n	80113e0 <f_open+0x24>
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8011688:	2510      	movs	r5, #16
 801168a:	e6a9      	b.n	80113e0 <f_open+0x24>
 801168c:	4a3b      	ldr	r2, [pc, #236]	; (801177c <f_open+0x3c0>)
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 801168e:	2600      	movs	r6, #0
 8011690:	e002      	b.n	8011698 <f_open+0x2dc>
 8011692:	3601      	adds	r6, #1
 8011694:	2e14      	cmp	r6, #20
 8011696:	d036      	beq.n	8011706 <f_open+0x34a>
 8011698:	ea4f 1c06 	mov.w	ip, r6, lsl #4
 801169c:	f858 b00c 	ldr.w	fp, [r8, ip]
 80116a0:	f1bb 0f00 	cmp.w	fp, #0
 80116a4:	d1f5      	bne.n	8011692 <f_open+0x2d6>
		Files[i].fs = dp->obj.fs;
 80116a6:	eb02 080c 	add.w	r8, r2, ip
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80116aa:	f1ba 0f00 	cmp.w	sl, #0
		Files[i].clu = dp->obj.sclust;
 80116ae:	e9c8 3182 	strd	r3, r1, [r8, #520]	; 0x208
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80116b2:	bf14      	ite	ne
 80116b4:	f44f 7a80 	movne.w	sl, #256	; 0x100
 80116b8:	f04f 0a01 	moveq.w	sl, #1
		Files[i].ofs = dp->dptr;
 80116bc:	f8c8 0210 	str.w	r0, [r8, #528]	; 0x210
		Files[i].ctr = 0;
 80116c0:	f8a8 b214 	strh.w	fp, [r8, #532]	; 0x214
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80116c4:	e75e      	b.n	8011584 <f_open+0x1c8>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80116c6:	f89d 2016 	ldrb.w	r2, [sp, #22]
 80116ca:	f012 0f10 	tst.w	r2, #16
 80116ce:	d12c      	bne.n	801172a <f_open+0x36e>
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80116d0:	f016 0f02 	tst.w	r6, #2
 80116d4:	d122      	bne.n	801171c <f_open+0x360>
 80116d6:	f8dd 900c 	ldr.w	r9, [sp, #12]
 80116da:	f006 0608 	and.w	r6, r6, #8
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80116de:	2e00      	cmp	r6, #0
 80116e0:	f47f af21 	bne.w	8011526 <f_open+0x16a>
 80116e4:	46da      	mov	sl, fp
 80116e6:	e722      	b.n	801152e <f_open+0x172>
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80116e8:	2501      	movs	r5, #1
 80116ea:	e7a1      	b.n	8011630 <f_open+0x274>
 80116ec:	f8b3 a214 	ldrh.w	sl, [r3, #532]	; 0x214
 80116f0:	f10a 0a01 	add.w	sl, sl, #1
 80116f4:	fa1f fa8a 	uxth.w	sl, sl
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80116f8:	e744      	b.n	8011584 <f_open+0x1c8>
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80116fa:	0732      	lsls	r2, r6, #28
 80116fc:	f53f aebc 	bmi.w	8011478 <f_open+0xbc>
 8011700:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8011704:	e713      	b.n	801152e <f_open+0x172>
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8011706:	2300      	movs	r3, #0
 8011708:	6123      	str	r3, [r4, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 801170a:	2502      	movs	r5, #2
 801170c:	e668      	b.n	80113e0 <f_open+0x24>
						res = FR_DENIED;
 801170e:	2507      	movs	r5, #7
 8011710:	e666      	b.n	80113e0 <f_open+0x24>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8011712:	f1b9 0f00 	cmp.w	r9, #0
 8011716:	d1a2      	bne.n	801165e <f_open+0x2a2>
 8011718:	2512      	movs	r5, #18
 801171a:	e661      	b.n	80113e0 <f_open+0x24>
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 801171c:	07d2      	lsls	r2, r2, #31
 801171e:	d4f6      	bmi.n	801170e <f_open+0x352>
 8011720:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8011724:	f006 0608 	and.w	r6, r6, #8
 8011728:	e7d9      	b.n	80116de <f_open+0x322>
					res = FR_NO_FILE;
 801172a:	2504      	movs	r5, #4
 801172c:	e658      	b.n	80113e0 <f_open+0x24>
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 801172e:	f3c8 0308 	ubfx	r3, r8, #0, #9
				fp->clust = clst;
 8011732:	61e6      	str	r6, [r4, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8011734:	2b00      	cmp	r3, #0
 8011736:	f43f ae55 	beq.w	80113e4 <f_open+0x28>
					if ((sc = clust2sect(fs, clst)) == 0) {
 801173a:	9903      	ldr	r1, [sp, #12]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 801173c:	698b      	ldr	r3, [r1, #24]
	clst -= 2;
 801173e:	3e02      	subs	r6, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8011740:	3b02      	subs	r3, #2
 8011742:	429e      	cmp	r6, r3
 8011744:	d204      	bcs.n	8011750 <f_open+0x394>
	return clst * fs->csize + fs->database;
 8011746:	894b      	ldrh	r3, [r1, #10]
 8011748:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801174a:	fb06 2203 	mla	r2, r6, r3, r2
					if ((sc = clust2sect(fs, clst)) == 0) {
 801174e:	b90a      	cbnz	r2, 8011754 <f_open+0x398>
 8011750:	2502      	movs	r5, #2
 8011752:	e645      	b.n	80113e0 <f_open+0x24>
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8011754:	eb02 2258 	add.w	r2, r2, r8, lsr #9
 8011758:	6222      	str	r2, [r4, #32]
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 801175a:	7848      	ldrb	r0, [r1, #1]
 801175c:	2301      	movs	r3, #1
 801175e:	4651      	mov	r1, sl
 8011760:	f7fd fb66 	bl	800ee30 <disk_read>
 8011764:	2800      	cmp	r0, #0
 8011766:	f43f ae3d 	beq.w	80113e4 <f_open+0x28>
 801176a:	2501      	movs	r5, #1
 801176c:	e638      	b.n	80113e0 <f_open+0x24>
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 801176e:	3e01      	subs	r6, #1
 8011770:	9b04      	ldr	r3, [sp, #16]
 8011772:	9906      	ldr	r1, [sp, #24]
 8011774:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011776:	f8c9 6010 	str.w	r6, [r9, #16]
		if (res == FR_OK) {
 801177a:	e6d4      	b.n	8011526 <f_open+0x16a>
 801177c:	20001d00 	.word	0x20001d00
 8011780:	20001f08 	.word	0x20001f08

08011784 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8011784:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011788:	461f      	mov	r7, r3
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;


	*br = 0;	/* Clear read byte counter */
 801178a:	2300      	movs	r3, #0
{
 801178c:	b085      	sub	sp, #20
	*br = 0;	/* Clear read byte counter */
 801178e:	603b      	str	r3, [r7, #0]
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8011790:	b150      	cbz	r0, 80117a8 <f_read+0x24>
 8011792:	6803      	ldr	r3, [r0, #0]
 8011794:	4604      	mov	r4, r0
 8011796:	b13b      	cbz	r3, 80117a8 <f_read+0x24>
 8011798:	4690      	mov	r8, r2
 801179a:	781a      	ldrb	r2, [r3, #0]
 801179c:	b122      	cbz	r2, 80117a8 <f_read+0x24>
 801179e:	88da      	ldrh	r2, [r3, #6]
 80117a0:	460e      	mov	r6, r1
 80117a2:	8881      	ldrh	r1, [r0, #4]
 80117a4:	4291      	cmp	r1, r2
 80117a6:	d005      	beq.n	80117b4 <f_read+0x30>
	FRESULT res = FR_INVALID_OBJECT;
 80117a8:	f04f 0909 	mov.w	r9, #9
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#endif
	}

	LEAVE_FF(fs, FR_OK);
}
 80117ac:	4648      	mov	r0, r9
 80117ae:	b005      	add	sp, #20
 80117b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80117b4:	7858      	ldrb	r0, [r3, #1]
 80117b6:	f7fd fb21 	bl	800edfc <disk_status>
 80117ba:	07c2      	lsls	r2, r0, #31
 80117bc:	d4f4      	bmi.n	80117a8 <f_read+0x24>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80117be:	f894 9015 	ldrb.w	r9, [r4, #21]
 80117c2:	f1b9 0f00 	cmp.w	r9, #0
 80117c6:	d1f1      	bne.n	80117ac <f_read+0x28>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 80117c8:	7d23      	ldrb	r3, [r4, #20]
 80117ca:	f013 0301 	ands.w	r3, r3, #1
 80117ce:	9301      	str	r3, [sp, #4]
 80117d0:	f000 80d4 	beq.w	801197c <f_read+0x1f8>
	remain = fp->obj.objsize - fp->fptr;
 80117d4:	69a1      	ldr	r1, [r4, #24]
 80117d6:	68e2      	ldr	r2, [r4, #12]
 80117d8:	1a52      	subs	r2, r2, r1
 80117da:	4590      	cmp	r8, r2
 80117dc:	bf28      	it	cs
 80117de:	4690      	movcs	r8, r2
	for ( ;  btr;								/* Repeat until all data read */
 80117e0:	f1b8 0f00 	cmp.w	r8, #0
 80117e4:	d0e2      	beq.n	80117ac <f_read+0x28>
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80117e6:	46a3      	mov	fp, r4
 80117e8:	f104 0334 	add.w	r3, r4, #52	; 0x34
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 80117ec:	f3c1 0208 	ubfx	r2, r1, #0, #9
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80117f0:	f85b ab30 	ldr.w	sl, [fp], #48
 80117f4:	9302      	str	r3, [sp, #8]
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 80117f6:	2a00      	cmp	r2, #0
 80117f8:	d140      	bne.n	801187c <f_read+0xf8>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 80117fa:	f8ba 200a 	ldrh.w	r2, [sl, #10]
 80117fe:	3a01      	subs	r2, #1
			if (csect == 0) {					/* On the cluster boundary? */
 8011800:	ea12 2251 	ands.w	r2, r2, r1, lsr #9
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8011804:	ea4f 2351 	mov.w	r3, r1, lsr #9
			if (csect == 0) {					/* On the cluster boundary? */
 8011808:	d06a      	beq.n	80118e0 <f_read+0x15c>
 801180a:	69e0      	ldr	r0, [r4, #28]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 801180c:	f8da 3018 	ldr.w	r3, [sl, #24]
	clst -= 2;
 8011810:	3802      	subs	r0, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8011812:	3b02      	subs	r3, #2
 8011814:	4298      	cmp	r0, r3
 8011816:	d270      	bcs.n	80118fa <f_read+0x176>
	return clst * fs->csize + fs->database;
 8011818:	f8ba 100a 	ldrh.w	r1, [sl, #10]
 801181c:	f8da 502c 	ldr.w	r5, [sl, #44]	; 0x2c
 8011820:	fb01 5500 	mla	r5, r1, r0, r5
			if (!sect) ABORT(fs, FR_INT_ERR);
 8011824:	2d00      	cmp	r5, #0
 8011826:	d068      	beq.n	80118fa <f_read+0x176>
			if (cc) {							/* Read maximum contiguous sectors directly */
 8011828:	f5b8 7f00 	cmp.w	r8, #512	; 0x200
			sect += csect;
 801182c:	4415      	add	r5, r2
			if (cc) {							/* Read maximum contiguous sectors directly */
 801182e:	d36c      	bcc.n	801190a <f_read+0x186>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8011830:	eb02 2058 	add.w	r0, r2, r8, lsr #9
 8011834:	4288      	cmp	r0, r1
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8011836:	ea4f 2358 	mov.w	r3, r8, lsr #9
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801183a:	f89a 0001 	ldrb.w	r0, [sl, #1]
					cc = fs->csize - csect;
 801183e:	bf88      	it	hi
 8011840:	1a8b      	subhi	r3, r1, r2
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8011842:	462a      	mov	r2, r5
 8011844:	4631      	mov	r1, r6
 8011846:	9303      	str	r3, [sp, #12]
 8011848:	f7fd faf2 	bl	800ee30 <disk_read>
 801184c:	2800      	cmp	r0, #0
 801184e:	f040 8084 	bne.w	801195a <f_read+0x1d6>
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8011852:	f994 2014 	ldrsb.w	r2, [r4, #20]
 8011856:	9b03      	ldr	r3, [sp, #12]
 8011858:	2a00      	cmp	r2, #0
 801185a:	f2c0 80a6 	blt.w	80119aa <f_read+0x226>
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 801185e:	025b      	lsls	r3, r3, #9
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8011860:	69a1      	ldr	r1, [r4, #24]
 8011862:	683a      	ldr	r2, [r7, #0]
 8011864:	4419      	add	r1, r3
 8011866:	441a      	add	r2, r3
	for ( ;  btr;								/* Repeat until all data read */
 8011868:	ebb8 0803 	subs.w	r8, r8, r3
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 801186c:	61a1      	str	r1, [r4, #24]
 801186e:	441e      	add	r6, r3
 8011870:	603a      	str	r2, [r7, #0]
	for ( ;  btr;								/* Repeat until all data read */
 8011872:	d09b      	beq.n	80117ac <f_read+0x28>
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8011874:	f3c1 0208 	ubfx	r2, r1, #0, #9
 8011878:	2a00      	cmp	r2, #0
 801187a:	d0be      	beq.n	80117fa <f_read+0x76>
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 801187c:	f5c2 7300 	rsb	r3, r2, #512	; 0x200
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8011880:	1d10      	adds	r0, r2, #4
 8011882:	4543      	cmp	r3, r8
 8011884:	4458      	add	r0, fp
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8011886:	445a      	add	r2, fp
 8011888:	f106 0104 	add.w	r1, r6, #4
 801188c:	bf28      	it	cs
 801188e:	4643      	movcs	r3, r8
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8011890:	428a      	cmp	r2, r1
 8011892:	bf38      	it	cc
 8011894:	4286      	cmpcc	r6, r0
 8011896:	f103 3cff 	add.w	ip, r3, #4294967295
 801189a:	d366      	bcc.n	801196a <f_read+0x1e6>
 801189c:	f1bc 0f07 	cmp.w	ip, #7
 80118a0:	d963      	bls.n	801196a <f_read+0x1e6>
 80118a2:	f023 0503 	bic.w	r5, r3, #3
 80118a6:	4435      	add	r5, r6
 80118a8:	4631      	mov	r1, r6
 80118aa:	4610      	mov	r0, r2
			*d++ = *s++;
 80118ac:	f850 eb04 	ldr.w	lr, [r0], #4
 80118b0:	f841 eb04 	str.w	lr, [r1], #4
		} while (--cnt);
 80118b4:	428d      	cmp	r5, r1
 80118b6:	d1f9      	bne.n	80118ac <f_read+0x128>
 80118b8:	f023 0103 	bic.w	r1, r3, #3
 80118bc:	428b      	cmp	r3, r1
 80118be:	eb06 0001 	add.w	r0, r6, r1
 80118c2:	eb02 0501 	add.w	r5, r2, r1
 80118c6:	d0cb      	beq.n	8011860 <f_read+0xdc>
			*d++ = *s++;
 80118c8:	5c52      	ldrb	r2, [r2, r1]
 80118ca:	5472      	strb	r2, [r6, r1]
		} while (--cnt);
 80118cc:	ebbc 0101 	subs.w	r1, ip, r1
 80118d0:	d0c6      	beq.n	8011860 <f_read+0xdc>
			*d++ = *s++;
 80118d2:	786a      	ldrb	r2, [r5, #1]
 80118d4:	7042      	strb	r2, [r0, #1]
		} while (--cnt);
 80118d6:	2901      	cmp	r1, #1
 80118d8:	d0c2      	beq.n	8011860 <f_read+0xdc>
			*d++ = *s++;
 80118da:	78aa      	ldrb	r2, [r5, #2]
 80118dc:	7082      	strb	r2, [r0, #2]
		} while (--cnt);
 80118de:	e7bf      	b.n	8011860 <f_read+0xdc>
				if (fp->fptr == 0) {			/* On the top of the file? */
 80118e0:	bb39      	cbnz	r1, 8011932 <f_read+0x1ae>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 80118e2:	68a0      	ldr	r0, [r4, #8]
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 80118e4:	2801      	cmp	r0, #1
 80118e6:	d908      	bls.n	80118fa <f_read+0x176>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80118e8:	1c43      	adds	r3, r0, #1
 80118ea:	d036      	beq.n	801195a <f_read+0x1d6>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80118ec:	f8da 3018 	ldr.w	r3, [sl, #24]
				fp->clust = clst;				/* Update current cluster */
 80118f0:	61e0      	str	r0, [r4, #28]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80118f2:	3b02      	subs	r3, #2
	clst -= 2;
 80118f4:	3802      	subs	r0, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80118f6:	4298      	cmp	r0, r3
 80118f8:	d38e      	bcc.n	8011818 <f_read+0x94>
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 80118fa:	f04f 0902 	mov.w	r9, #2
}
 80118fe:	4648      	mov	r0, r9
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8011900:	f884 9015 	strb.w	r9, [r4, #21]
}
 8011904:	b005      	add	sp, #20
 8011906:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 801190a:	6a22      	ldr	r2, [r4, #32]
 801190c:	42aa      	cmp	r2, r5
 801190e:	d00b      	beq.n	8011928 <f_read+0x1a4>
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8011910:	f994 3014 	ldrsb.w	r3, [r4, #20]
 8011914:	2b00      	cmp	r3, #0
 8011916:	db3b      	blt.n	8011990 <f_read+0x20c>
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8011918:	f89a 0001 	ldrb.w	r0, [sl, #1]
 801191c:	2301      	movs	r3, #1
 801191e:	462a      	mov	r2, r5
 8011920:	4659      	mov	r1, fp
 8011922:	f7fd fa85 	bl	800ee30 <disk_read>
 8011926:	b9c0      	cbnz	r0, 801195a <f_read+0x1d6>
			fp->sect = sect;
 8011928:	69a2      	ldr	r2, [r4, #24]
 801192a:	6225      	str	r5, [r4, #32]
 801192c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8011930:	e7a4      	b.n	801187c <f_read+0xf8>
					if (fp->cltbl) {
 8011932:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8011934:	b328      	cbz	r0, 8011982 <f_read+0x1fe>
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8011936:	6825      	ldr	r5, [r4, #0]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8011938:	6841      	ldr	r1, [r0, #4]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 801193a:	896d      	ldrh	r5, [r5, #10]
 801193c:	fbb3 f3f5 	udiv	r3, r3, r5
	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8011940:	3004      	adds	r0, #4
		if (ncl == 0) return 0;	/* End of table? (error) */
 8011942:	b929      	cbnz	r1, 8011950 <f_read+0x1cc>
 8011944:	e7d9      	b.n	80118fa <f_read+0x176>
		cl -= ncl; tbl++;		/* Next fragment */
 8011946:	1a5b      	subs	r3, r3, r1
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8011948:	f850 1f08 	ldr.w	r1, [r0, #8]!
		if (ncl == 0) return 0;	/* End of table? (error) */
 801194c:	2900      	cmp	r1, #0
 801194e:	d0d4      	beq.n	80118fa <f_read+0x176>
		if (cl < ncl) break;	/* In this fragment? */
 8011950:	4299      	cmp	r1, r3
 8011952:	d9f8      	bls.n	8011946 <f_read+0x1c2>
	return cl + *tbl;	/* Return the cluster number */
 8011954:	6840      	ldr	r0, [r0, #4]
 8011956:	4418      	add	r0, r3
 8011958:	e7c4      	b.n	80118e4 <f_read+0x160>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801195a:	f8dd 9004 	ldr.w	r9, [sp, #4]
 801195e:	2301      	movs	r3, #1
}
 8011960:	4648      	mov	r0, r9
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8011962:	7563      	strb	r3, [r4, #21]
}
 8011964:	b005      	add	sp, #20
 8011966:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801196a:	1e71      	subs	r1, r6, #1
 801196c:	18d5      	adds	r5, r2, r3
			*d++ = *s++;
 801196e:	f812 0b01 	ldrb.w	r0, [r2], #1
 8011972:	f801 0f01 	strb.w	r0, [r1, #1]!
		} while (--cnt);
 8011976:	42aa      	cmp	r2, r5
 8011978:	d1f9      	bne.n	801196e <f_read+0x1ea>
 801197a:	e771      	b.n	8011860 <f_read+0xdc>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 801197c:	f04f 0907 	mov.w	r9, #7
 8011980:	e714      	b.n	80117ac <f_read+0x28>
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8011982:	69e1      	ldr	r1, [r4, #28]
 8011984:	6820      	ldr	r0, [r4, #0]
 8011986:	9203      	str	r2, [sp, #12]
 8011988:	f7fd fc46 	bl	800f218 <get_fat.isra.0>
 801198c:	9a03      	ldr	r2, [sp, #12]
 801198e:	e7a9      	b.n	80118e4 <f_read+0x160>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8011990:	f89a 0001 	ldrb.w	r0, [sl, #1]
 8011994:	2301      	movs	r3, #1
 8011996:	4659      	mov	r1, fp
 8011998:	f7fd fa58 	bl	800ee4c <disk_write>
 801199c:	2800      	cmp	r0, #0
 801199e:	d1dc      	bne.n	801195a <f_read+0x1d6>
					fp->flag &= (BYTE)~FA_DIRTY;
 80119a0:	7d23      	ldrb	r3, [r4, #20]
 80119a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80119a6:	7523      	strb	r3, [r4, #20]
 80119a8:	e7b6      	b.n	8011918 <f_read+0x194>
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 80119aa:	6a22      	ldr	r2, [r4, #32]
 80119ac:	1b55      	subs	r5, r2, r5
 80119ae:	429d      	cmp	r5, r3
 80119b0:	f4bf af55 	bcs.w	801185e <f_read+0xda>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 80119b4:	eb06 2045 	add.w	r0, r6, r5, lsl #9
 80119b8:	3004      	adds	r0, #4
 80119ba:	4583      	cmp	fp, r0
 80119bc:	eb06 2245 	add.w	r2, r6, r5, lsl #9
 80119c0:	4659      	mov	r1, fp
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80119c2:	d202      	bcs.n	80119ca <f_read+0x246>
 80119c4:	9802      	ldr	r0, [sp, #8]
 80119c6:	4282      	cmp	r2, r0
 80119c8:	d309      	bcc.n	80119de <f_read+0x25a>
 80119ca:	f502 7500 	add.w	r5, r2, #512	; 0x200
 80119ce:	4659      	mov	r1, fp
			*d++ = *s++;
 80119d0:	f851 0b04 	ldr.w	r0, [r1], #4
 80119d4:	f842 0b04 	str.w	r0, [r2], #4
		} while (--cnt);
 80119d8:	42aa      	cmp	r2, r5
 80119da:	d1f9      	bne.n	80119d0 <f_read+0x24c>
 80119dc:	e73f      	b.n	801185e <f_read+0xda>
 80119de:	3a01      	subs	r2, #1
 80119e0:	f504 750c 	add.w	r5, r4, #560	; 0x230
			*d++ = *s++;
 80119e4:	f811 0b01 	ldrb.w	r0, [r1], #1
 80119e8:	f802 0f01 	strb.w	r0, [r2, #1]!
		} while (--cnt);
 80119ec:	428d      	cmp	r5, r1
 80119ee:	d1f9      	bne.n	80119e4 <f_read+0x260>
 80119f0:	e735      	b.n	801185e <f_read+0xda>
 80119f2:	bf00      	nop

080119f4 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80119f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80119f8:	461f      	mov	r7, r3
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;


	*bw = 0;	/* Clear write byte counter */
 80119fa:	2300      	movs	r3, #0
{
 80119fc:	b085      	sub	sp, #20
	*bw = 0;	/* Clear write byte counter */
 80119fe:	603b      	str	r3, [r7, #0]
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8011a00:	b150      	cbz	r0, 8011a18 <f_write+0x24>
 8011a02:	6803      	ldr	r3, [r0, #0]
 8011a04:	4604      	mov	r4, r0
 8011a06:	b13b      	cbz	r3, 8011a18 <f_write+0x24>
 8011a08:	4616      	mov	r6, r2
 8011a0a:	781a      	ldrb	r2, [r3, #0]
 8011a0c:	b122      	cbz	r2, 8011a18 <f_write+0x24>
 8011a0e:	88da      	ldrh	r2, [r3, #6]
 8011a10:	460d      	mov	r5, r1
 8011a12:	8881      	ldrh	r1, [r0, #4]
 8011a14:	4291      	cmp	r1, r2
 8011a16:	d005      	beq.n	8011a24 <f_write+0x30>
	FRESULT res = FR_INVALID_OBJECT;
 8011a18:	f04f 0809 	mov.w	r8, #9
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */

	LEAVE_FF(fs, FR_OK);
}
 8011a1c:	4640      	mov	r0, r8
 8011a1e:	b005      	add	sp, #20
 8011a20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8011a24:	7858      	ldrb	r0, [r3, #1]
 8011a26:	f7fd f9e9 	bl	800edfc <disk_status>
 8011a2a:	07c1      	lsls	r1, r0, #31
 8011a2c:	d4f4      	bmi.n	8011a18 <f_write+0x24>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8011a2e:	f894 8015 	ldrb.w	r8, [r4, #21]
 8011a32:	f1b8 0f00 	cmp.w	r8, #0
 8011a36:	d1f1      	bne.n	8011a1c <f_write+0x28>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8011a38:	7d23      	ldrb	r3, [r4, #20]
 8011a3a:	079a      	lsls	r2, r3, #30
 8011a3c:	f140 80f8 	bpl.w	8011c30 <f_write+0x23c>
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8011a40:	69a1      	ldr	r1, [r4, #24]
 8011a42:	42f1      	cmn	r1, r6
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8011a44:	bf28      	it	cs
 8011a46:	43ce      	mvncs	r6, r1
	for ( ;  btw;							/* Repeat until all data written */
 8011a48:	2e00      	cmp	r6, #0
 8011a4a:	d067      	beq.n	8011b1c <f_write+0x128>
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8011a4c:	46a2      	mov	sl, r4
 8011a4e:	f504 730c 	add.w	r3, r4, #560	; 0x230
 8011a52:	f85a 9b30 	ldr.w	r9, [sl], #48
 8011a56:	9301      	str	r3, [sp, #4]
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8011a58:	f3c1 0208 	ubfx	r2, r1, #0, #9
 8011a5c:	2a00      	cmp	r2, #0
 8011a5e:	d16c      	bne.n	8011b3a <f_write+0x146>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8011a60:	f8b9 b00a 	ldrh.w	fp, [r9, #10]
 8011a64:	f10b 3bff 	add.w	fp, fp, #4294967295
			if (csect == 0) {				/* On the cluster boundary? */
 8011a68:	ea1b 2b51 	ands.w	fp, fp, r1, lsr #9
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8011a6c:	ea4f 2351 	mov.w	r3, r1, lsr #9
			if (csect == 0) {				/* On the cluster boundary? */
 8011a70:	d110      	bne.n	8011a94 <f_write+0xa0>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8011a72:	2900      	cmp	r1, #0
 8011a74:	f040 80a5 	bne.w	8011bc2 <f_write+0x1ce>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8011a78:	68a0      	ldr	r0, [r4, #8]
					if (clst == 0) {		/* If no cluster is allocated, */
 8011a7a:	2800      	cmp	r0, #0
 8011a7c:	f000 80e3 	beq.w	8011c46 <f_write+0x252>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8011a80:	2801      	cmp	r0, #1
 8011a82:	f000 8096 	beq.w	8011bb2 <f_write+0x1be>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8011a86:	1c43      	adds	r3, r0, #1
 8011a88:	f000 80c0 	beq.w	8011c0c <f_write+0x218>
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8011a8c:	68a3      	ldr	r3, [r4, #8]
				fp->clust = clst;			/* Update current cluster */
 8011a8e:	61e0      	str	r0, [r4, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8011a90:	b903      	cbnz	r3, 8011a94 <f_write+0xa0>
 8011a92:	60a0      	str	r0, [r4, #8]
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8011a94:	f994 3014 	ldrsb.w	r3, [r4, #20]
 8011a98:	2b00      	cmp	r3, #0
 8011a9a:	f2c0 80aa 	blt.w	8011bf2 <f_write+0x1fe>
	clst -= 2;
 8011a9e:	69e2      	ldr	r2, [r4, #28]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8011aa0:	f8d9 3018 	ldr.w	r3, [r9, #24]
	clst -= 2;
 8011aa4:	3a02      	subs	r2, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8011aa6:	3b02      	subs	r3, #2
 8011aa8:	429a      	cmp	r2, r3
 8011aaa:	f080 8082 	bcs.w	8011bb2 <f_write+0x1be>
	return clst * fs->csize + fs->database;
 8011aae:	f8b9 100a 	ldrh.w	r1, [r9, #10]
 8011ab2:	f8d9 302c 	ldr.w	r3, [r9, #44]	; 0x2c
 8011ab6:	fb01 3202 	mla	r2, r1, r2, r3
			if (!sect) ABORT(fs, FR_INT_ERR);
 8011aba:	2a00      	cmp	r2, #0
 8011abc:	d079      	beq.n	8011bb2 <f_write+0x1be>
			if (cc) {						/* Write maximum contiguous sectors directly */
 8011abe:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
			sect += csect;
 8011ac2:	445a      	add	r2, fp
			if (cc) {						/* Write maximum contiguous sectors directly */
 8011ac4:	d32e      	bcc.n	8011b24 <f_write+0x130>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8011ac6:	eb0b 2056 	add.w	r0, fp, r6, lsr #9
 8011aca:	4288      	cmp	r0, r1
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8011acc:	ea4f 2356 	mov.w	r3, r6, lsr #9
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8011ad0:	f899 0001 	ldrb.w	r0, [r9, #1]
					cc = fs->csize - csect;
 8011ad4:	bf88      	it	hi
 8011ad6:	eba1 030b 	subhi.w	r3, r1, fp
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8011ada:	4629      	mov	r1, r5
 8011adc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8011ae0:	f7fd f9b4 	bl	800ee4c <disk_write>
 8011ae4:	2800      	cmp	r0, #0
 8011ae6:	f040 8091 	bne.w	8011c0c <f_write+0x218>
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8011aea:	6a21      	ldr	r1, [r4, #32]
 8011aec:	9a02      	ldr	r2, [sp, #8]
 8011aee:	9b03      	ldr	r3, [sp, #12]
 8011af0:	1a8a      	subs	r2, r1, r2
 8011af2:	429a      	cmp	r2, r3
 8011af4:	f0c0 80bb 	bcc.w	8011c6e <f_write+0x27a>
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8011af8:	eb05 2c43 	add.w	ip, r5, r3, lsl #9
 8011afc:	025b      	lsls	r3, r3, #9
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8011afe:	69a1      	ldr	r1, [r4, #24]
 8011b00:	68e0      	ldr	r0, [r4, #12]
 8011b02:	683a      	ldr	r2, [r7, #0]
 8011b04:	4419      	add	r1, r3
 8011b06:	4288      	cmp	r0, r1
 8011b08:	bf38      	it	cc
 8011b0a:	4608      	movcc	r0, r1
 8011b0c:	441a      	add	r2, r3
	for ( ;  btw;							/* Repeat until all data written */
 8011b0e:	1af6      	subs	r6, r6, r3
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8011b10:	61a1      	str	r1, [r4, #24]
 8011b12:	60e0      	str	r0, [r4, #12]
 8011b14:	4665      	mov	r5, ip
 8011b16:	603a      	str	r2, [r7, #0]
	for ( ;  btw;							/* Repeat until all data written */
 8011b18:	d19e      	bne.n	8011a58 <f_write+0x64>
 8011b1a:	7d23      	ldrb	r3, [r4, #20]
	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8011b1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011b20:	7523      	strb	r3, [r4, #20]
	LEAVE_FF(fs, FR_OK);
 8011b22:	e77b      	b.n	8011a1c <f_write+0x28>
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8011b24:	6a23      	ldr	r3, [r4, #32]
 8011b26:	4293      	cmp	r3, r2
				fp->fptr < fp->obj.objsize &&
 8011b28:	69a3      	ldr	r3, [r4, #24]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8011b2a:	d003      	beq.n	8011b34 <f_write+0x140>
 8011b2c:	68e1      	ldr	r1, [r4, #12]
 8011b2e:	428b      	cmp	r3, r1
 8011b30:	f0c0 8091 	bcc.w	8011c56 <f_write+0x262>
			fp->sect = sect;
 8011b34:	6222      	str	r2, [r4, #32]
 8011b36:	f3c3 0208 	ubfx	r2, r3, #0, #9
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8011b3a:	f5c2 7300 	rsb	r3, r2, #512	; 0x200
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8011b3e:	1d10      	adds	r0, r2, #4
 8011b40:	42b3      	cmp	r3, r6
 8011b42:	4450      	add	r0, sl
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8011b44:	4452      	add	r2, sl
 8011b46:	f105 0104 	add.w	r1, r5, #4
 8011b4a:	bf28      	it	cs
 8011b4c:	4633      	movcs	r3, r6
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8011b4e:	428a      	cmp	r2, r1
 8011b50:	bf38      	it	cc
 8011b52:	4285      	cmpcc	r5, r0
 8011b54:	f103 3eff 	add.w	lr, r3, #4294967295
 8011b58:	d360      	bcc.n	8011c1c <f_write+0x228>
 8011b5a:	f1be 0f07 	cmp.w	lr, #7
 8011b5e:	d95d      	bls.n	8011c1c <f_write+0x228>
 8011b60:	f023 0c03 	bic.w	ip, r3, #3
 8011b64:	44ac      	add	ip, r5
 8011b66:	4629      	mov	r1, r5
 8011b68:	4610      	mov	r0, r2
			*d++ = *s++;
 8011b6a:	f851 bb04 	ldr.w	fp, [r1], #4
 8011b6e:	f840 bb04 	str.w	fp, [r0], #4
		} while (--cnt);
 8011b72:	458c      	cmp	ip, r1
 8011b74:	d1f9      	bne.n	8011b6a <f_write+0x176>
 8011b76:	f023 0103 	bic.w	r1, r3, #3
 8011b7a:	428b      	cmp	r3, r1
 8011b7c:	eb02 0001 	add.w	r0, r2, r1
 8011b80:	eb05 0c01 	add.w	ip, r5, r1
 8011b84:	d010      	beq.n	8011ba8 <f_write+0x1b4>
			*d++ = *s++;
 8011b86:	f815 b001 	ldrb.w	fp, [r5, r1]
 8011b8a:	f802 b001 	strb.w	fp, [r2, r1]
		} while (--cnt);
 8011b8e:	ebbe 0101 	subs.w	r1, lr, r1
 8011b92:	d007      	beq.n	8011ba4 <f_write+0x1b0>
			*d++ = *s++;
 8011b94:	f89c 2001 	ldrb.w	r2, [ip, #1]
 8011b98:	7042      	strb	r2, [r0, #1]
		} while (--cnt);
 8011b9a:	2901      	cmp	r1, #1
			*d++ = *s++;
 8011b9c:	bf1c      	itt	ne
 8011b9e:	f89c 2002 	ldrbne.w	r2, [ip, #2]
 8011ba2:	7082      	strbne	r2, [r0, #2]
		} while (--cnt);
 8011ba4:	eb05 0c03 	add.w	ip, r5, r3
		fp->flag |= FA_DIRTY;
 8011ba8:	7d22      	ldrb	r2, [r4, #20]
 8011baa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8011bae:	7522      	strb	r2, [r4, #20]
 8011bb0:	e7a5      	b.n	8011afe <f_write+0x10a>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8011bb2:	f04f 0802 	mov.w	r8, #2
}
 8011bb6:	4640      	mov	r0, r8
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8011bb8:	f884 8015 	strb.w	r8, [r4, #21]
}
 8011bbc:	b005      	add	sp, #20
 8011bbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					if (fp->cltbl) {
 8011bc2:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8011bc4:	2900      	cmp	r1, #0
 8011bc6:	d036      	beq.n	8011c36 <f_write+0x242>
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8011bc8:	6820      	ldr	r0, [r4, #0]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8011bca:	684a      	ldr	r2, [r1, #4]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8011bcc:	8940      	ldrh	r0, [r0, #10]
 8011bce:	fbb3 f3f0 	udiv	r3, r3, r0
	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8011bd2:	3104      	adds	r1, #4
		if (ncl == 0) return 0;	/* End of table? (error) */
 8011bd4:	b92a      	cbnz	r2, 8011be2 <f_write+0x1ee>
 8011bd6:	e7a0      	b.n	8011b1a <f_write+0x126>
		cl -= ncl; tbl++;		/* Next fragment */
 8011bd8:	1a9b      	subs	r3, r3, r2
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8011bda:	f851 2f08 	ldr.w	r2, [r1, #8]!
		if (ncl == 0) return 0;	/* End of table? (error) */
 8011bde:	2a00      	cmp	r2, #0
 8011be0:	d09b      	beq.n	8011b1a <f_write+0x126>
		if (cl < ncl) break;	/* In this fragment? */
 8011be2:	4293      	cmp	r3, r2
 8011be4:	d2f8      	bcs.n	8011bd8 <f_write+0x1e4>
	return cl + *tbl;	/* Return the cluster number */
 8011be6:	6848      	ldr	r0, [r1, #4]
 8011be8:	4418      	add	r0, r3
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8011bea:	2800      	cmp	r0, #0
 8011bec:	f47f af48 	bne.w	8011a80 <f_write+0x8c>
 8011bf0:	e793      	b.n	8011b1a <f_write+0x126>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8011bf2:	6a22      	ldr	r2, [r4, #32]
 8011bf4:	f899 0001 	ldrb.w	r0, [r9, #1]
 8011bf8:	2301      	movs	r3, #1
 8011bfa:	4651      	mov	r1, sl
 8011bfc:	f7fd f926 	bl	800ee4c <disk_write>
 8011c00:	b920      	cbnz	r0, 8011c0c <f_write+0x218>
				fp->flag &= (BYTE)~FA_DIRTY;
 8011c02:	7d23      	ldrb	r3, [r4, #20]
 8011c04:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011c08:	7523      	strb	r3, [r4, #20]
 8011c0a:	e748      	b.n	8011a9e <f_write+0xaa>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8011c0c:	f04f 0801 	mov.w	r8, #1
}
 8011c10:	4640      	mov	r0, r8
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8011c12:	f884 8015 	strb.w	r8, [r4, #21]
}
 8011c16:	b005      	add	sp, #20
 8011c18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011c1c:	3a01      	subs	r2, #1
 8011c1e:	eb05 0c03 	add.w	ip, r5, r3
			*d++ = *s++;
 8011c22:	f815 1b01 	ldrb.w	r1, [r5], #1
 8011c26:	f802 1f01 	strb.w	r1, [r2, #1]!
		} while (--cnt);
 8011c2a:	4565      	cmp	r5, ip
 8011c2c:	d1f9      	bne.n	8011c22 <f_write+0x22e>
 8011c2e:	e7bb      	b.n	8011ba8 <f_write+0x1b4>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8011c30:	f04f 0807 	mov.w	r8, #7
 8011c34:	e6f2      	b.n	8011a1c <f_write+0x28>
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8011c36:	69e1      	ldr	r1, [r4, #28]
 8011c38:	4620      	mov	r0, r4
 8011c3a:	f7fd fe53 	bl	800f8e4 <create_chain>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8011c3e:	2800      	cmp	r0, #0
 8011c40:	f47f af1e 	bne.w	8011a80 <f_write+0x8c>
 8011c44:	e769      	b.n	8011b1a <f_write+0x126>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8011c46:	4659      	mov	r1, fp
 8011c48:	4620      	mov	r0, r4
 8011c4a:	f7fd fe4b 	bl	800f8e4 <create_chain>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8011c4e:	2800      	cmp	r0, #0
 8011c50:	f47f af16 	bne.w	8011a80 <f_write+0x8c>
 8011c54:	e761      	b.n	8011b1a <f_write+0x126>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8011c56:	f899 0001 	ldrb.w	r0, [r9, #1]
 8011c5a:	9202      	str	r2, [sp, #8]
 8011c5c:	2301      	movs	r3, #1
 8011c5e:	4651      	mov	r1, sl
 8011c60:	f7fd f8e6 	bl	800ee30 <disk_read>
				fp->fptr < fp->obj.objsize &&
 8011c64:	2800      	cmp	r0, #0
 8011c66:	d1d1      	bne.n	8011c0c <f_write+0x218>
 8011c68:	69a3      	ldr	r3, [r4, #24]
 8011c6a:	9a02      	ldr	r2, [sp, #8]
 8011c6c:	e762      	b.n	8011b34 <f_write+0x140>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8011c6e:	eb05 2142 	add.w	r1, r5, r2, lsl #9
 8011c72:	3104      	adds	r1, #4
 8011c74:	458a      	cmp	sl, r1
 8011c76:	eb05 2242 	add.w	r2, r5, r2, lsl #9
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8011c7a:	d203      	bcs.n	8011c84 <f_write+0x290>
 8011c7c:	f104 0134 	add.w	r1, r4, #52	; 0x34
 8011c80:	428a      	cmp	r2, r1
 8011c82:	d30d      	bcc.n	8011ca0 <f_write+0x2ac>
 8011c84:	f8dd c004 	ldr.w	ip, [sp, #4]
 8011c88:	4651      	mov	r1, sl
			*d++ = *s++;
 8011c8a:	f852 0b04 	ldr.w	r0, [r2], #4
 8011c8e:	f841 0b04 	str.w	r0, [r1], #4
		} while (--cnt);
 8011c92:	4561      	cmp	r1, ip
 8011c94:	d1f9      	bne.n	8011c8a <f_write+0x296>
					fp->flag &= (BYTE)~FA_DIRTY;
 8011c96:	7d22      	ldrb	r2, [r4, #20]
 8011c98:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8011c9c:	7522      	strb	r2, [r4, #20]
 8011c9e:	e72b      	b.n	8011af8 <f_write+0x104>
 8011ca0:	f104 012f 	add.w	r1, r4, #47	; 0x2f
 8011ca4:	f502 7c00 	add.w	ip, r2, #512	; 0x200
			*d++ = *s++;
 8011ca8:	f812 0b01 	ldrb.w	r0, [r2], #1
 8011cac:	f801 0f01 	strb.w	r0, [r1, #1]!
		} while (--cnt);
 8011cb0:	4594      	cmp	ip, r2
 8011cb2:	d1f9      	bne.n	8011ca8 <f_write+0x2b4>
 8011cb4:	e7ef      	b.n	8011c96 <f_write+0x2a2>
 8011cb6:	bf00      	nop

08011cb8 <f_close>:
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8011cb8:	b158      	cbz	r0, 8011cd2 <f_close+0x1a>
 8011cba:	6803      	ldr	r3, [r0, #0]
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8011cbc:	b570      	push	{r4, r5, r6, lr}
 8011cbe:	4604      	mov	r4, r0
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8011cc0:	b12b      	cbz	r3, 8011cce <f_close+0x16>
 8011cc2:	781a      	ldrb	r2, [r3, #0]
 8011cc4:	b11a      	cbz	r2, 8011cce <f_close+0x16>
 8011cc6:	8881      	ldrh	r1, [r0, #4]
 8011cc8:	88da      	ldrh	r2, [r3, #6]
 8011cca:	4291      	cmp	r1, r2
 8011ccc:	d003      	beq.n	8011cd6 <f_close+0x1e>
	FRESULT res = FR_INVALID_OBJECT;
 8011cce:	2009      	movs	r0, #9
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
}
 8011cd0:	bd70      	pop	{r4, r5, r6, pc}
	FRESULT res = FR_INVALID_OBJECT;
 8011cd2:	2009      	movs	r0, #9
}
 8011cd4:	4770      	bx	lr
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8011cd6:	7858      	ldrb	r0, [r3, #1]
 8011cd8:	f7fd f890 	bl	800edfc <disk_status>
 8011cdc:	07c1      	lsls	r1, r0, #31
 8011cde:	d4f6      	bmi.n	8011cce <f_close+0x16>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8011ce0:	7d23      	ldrb	r3, [r4, #20]
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8011ce2:	6825      	ldr	r5, [r4, #0]
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8011ce4:	065a      	lsls	r2, r3, #25
 8011ce6:	d53d      	bpl.n	8011d64 <f_close+0xac>
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8011ce8:	061b      	lsls	r3, r3, #24
 8011cea:	d460      	bmi.n	8011dae <f_close+0xf6>
			tm = GET_FATTIME();				/* Modified time */
 8011cec:	f7fd f8ca 	bl	800ee84 <get_fattime>
				res = move_window(fs, fp->dir_sect);
 8011cf0:	6a61      	ldr	r1, [r4, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 8011cf2:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8011cf4:	4299      	cmp	r1, r3
			tm = GET_FATTIME();				/* Modified time */
 8011cf6:	4606      	mov	r6, r0
	if (sector != fs->winsect) {	/* Window offset changed? */
 8011cf8:	d004      	beq.n	8011d04 <f_close+0x4c>
 8011cfa:	4628      	mov	r0, r5
 8011cfc:	f7fd f9b6 	bl	800f06c <move_window.part.0>
				if (res == FR_OK) {
 8011d00:	2800      	cmp	r0, #0
 8011d02:	d1e5      	bne.n	8011cd0 <f_close+0x18>
					dir = fp->dir_ptr;
 8011d04:	6aa2      	ldr	r2, [r4, #40]	; 0x28
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8011d06:	7ad3      	ldrb	r3, [r2, #11]
 8011d08:	f043 0320 	orr.w	r3, r3, #32
 8011d0c:	72d3      	strb	r3, [r2, #11]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8011d0e:	68a3      	ldr	r3, [r4, #8]
 8011d10:	6821      	ldr	r1, [r4, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8011d12:	7693      	strb	r3, [r2, #26]
 8011d14:	f3c3 2007 	ubfx	r0, r3, #8, #8
	*ptr++ = (BYTE)val;
 8011d18:	76d0      	strb	r0, [r2, #27]
	if (fs->fs_type == FS_FAT32) {
 8011d1a:	7809      	ldrb	r1, [r1, #0]
 8011d1c:	2903      	cmp	r1, #3
 8011d1e:	d103      	bne.n	8011d28 <f_close+0x70>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8011d20:	0c1b      	lsrs	r3, r3, #16
	*ptr++ = (BYTE)val; val >>= 8;
 8011d22:	0a19      	lsrs	r1, r3, #8
 8011d24:	7513      	strb	r3, [r2, #20]
	*ptr++ = (BYTE)val;
 8011d26:	7551      	strb	r1, [r2, #21]
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8011d28:	68e3      	ldr	r3, [r4, #12]
	*ptr++ = (BYTE)val; val >>= 8;
 8011d2a:	7713      	strb	r3, [r2, #28]
 8011d2c:	0a19      	lsrs	r1, r3, #8
	*ptr++ = (BYTE)val; val >>= 8;
 8011d2e:	0c18      	lsrs	r0, r3, #16
 8011d30:	7751      	strb	r1, [r2, #29]
	*ptr++ = (BYTE)val; val >>= 8;
 8011d32:	0e1b      	lsrs	r3, r3, #24
	*ptr++ = (BYTE)val; val >>= 8;
 8011d34:	0a31      	lsrs	r1, r6, #8
 8011d36:	7596      	strb	r6, [r2, #22]
	*ptr++ = (BYTE)val; val >>= 8;
 8011d38:	7790      	strb	r0, [r2, #30]
	*ptr++ = (BYTE)val;
 8011d3a:	77d3      	strb	r3, [r2, #31]
	*ptr++ = (BYTE)val; val >>= 8;
 8011d3c:	0c30      	lsrs	r0, r6, #16
	*ptr++ = (BYTE)val; val >>= 8;
 8011d3e:	2300      	movs	r3, #0
	*ptr++ = (BYTE)val; val >>= 8;
 8011d40:	75d1      	strb	r1, [r2, #23]
	*ptr++ = (BYTE)val; val >>= 8;
 8011d42:	0e36      	lsrs	r6, r6, #24
					fs->wflag = 1;
 8011d44:	2101      	movs	r1, #1
	*ptr++ = (BYTE)val; val >>= 8;
 8011d46:	7610      	strb	r0, [r2, #24]
	*ptr++ = (BYTE)val; val >>= 8;
 8011d48:	7493      	strb	r3, [r2, #18]
	*ptr++ = (BYTE)val;
 8011d4a:	74d3      	strb	r3, [r2, #19]
	*ptr++ = (BYTE)val;
 8011d4c:	7656      	strb	r6, [r2, #25]
					res = sync_fs(fs);					/* Restore it to the directory */
 8011d4e:	4628      	mov	r0, r5
					fs->wflag = 1;
 8011d50:	70e9      	strb	r1, [r5, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8011d52:	f7fd fd55 	bl	800f800 <sync_fs>
					fp->flag &= (BYTE)~FA_MODIFIED;
 8011d56:	7d23      	ldrb	r3, [r4, #20]
 8011d58:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011d5c:	7523      	strb	r3, [r4, #20]
	if (res == FR_OK)
 8011d5e:	2800      	cmp	r0, #0
 8011d60:	d1b6      	bne.n	8011cd0 <f_close+0x18>
 8011d62:	6825      	ldr	r5, [r4, #0]
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8011d64:	2d00      	cmp	r5, #0
 8011d66:	d0b2      	beq.n	8011cce <f_close+0x16>
 8011d68:	782b      	ldrb	r3, [r5, #0]
 8011d6a:	2b00      	cmp	r3, #0
 8011d6c:	d0af      	beq.n	8011cce <f_close+0x16>
 8011d6e:	88a2      	ldrh	r2, [r4, #4]
 8011d70:	88eb      	ldrh	r3, [r5, #6]
 8011d72:	429a      	cmp	r2, r3
 8011d74:	d1ab      	bne.n	8011cce <f_close+0x16>
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8011d76:	7868      	ldrb	r0, [r5, #1]
 8011d78:	f7fd f840 	bl	800edfc <disk_status>
 8011d7c:	f010 0001 	ands.w	r0, r0, #1
 8011d80:	d1a5      	bne.n	8011cce <f_close+0x16>
	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8011d82:	6923      	ldr	r3, [r4, #16]
 8011d84:	3b01      	subs	r3, #1
 8011d86:	2b13      	cmp	r3, #19
 8011d88:	d825      	bhi.n	8011dd6 <f_close+0x11e>
		n = Files[i].ctr;
 8011d8a:	4915      	ldr	r1, [pc, #84]	; (8011de0 <f_close+0x128>)
 8011d8c:	eb01 1503 	add.w	r5, r1, r3, lsl #4
 8011d90:	011b      	lsls	r3, r3, #4
 8011d92:	f8b5 2214 	ldrh.w	r2, [r5, #532]	; 0x214
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8011d96:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8011d9a:	d015      	beq.n	8011dc8 <f_close+0x110>
		if (n > 0) n--;				/* Decrement read mode open count */
 8011d9c:	b1b2      	cbz	r2, 8011dcc <f_close+0x114>
 8011d9e:	3a01      	subs	r2, #1
 8011da0:	b292      	uxth	r2, r2
		Files[i].ctr = n;
 8011da2:	f8a5 2214 	strh.w	r2, [r5, #532]	; 0x214
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8011da6:	b18a      	cbz	r2, 8011dcc <f_close+0x114>
				fp->obj.fs = 0;			/* Invalidate file object */
 8011da8:	2300      	movs	r3, #0
 8011daa:	6023      	str	r3, [r4, #0]
}
 8011dac:	bd70      	pop	{r4, r5, r6, pc}
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8011dae:	6a22      	ldr	r2, [r4, #32]
 8011db0:	7868      	ldrb	r0, [r5, #1]
 8011db2:	2301      	movs	r3, #1
 8011db4:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8011db8:	f7fd f848 	bl	800ee4c <disk_write>
 8011dbc:	b968      	cbnz	r0, 8011dda <f_close+0x122>
				fp->flag &= (BYTE)~FA_DIRTY;
 8011dbe:	7d23      	ldrb	r3, [r4, #20]
 8011dc0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011dc4:	7523      	strb	r3, [r4, #20]
 8011dc6:	e791      	b.n	8011cec <f_close+0x34>
		Files[i].ctr = n;
 8011dc8:	f8a5 0214 	strh.w	r0, [r5, #532]	; 0x214
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8011dcc:	440b      	add	r3, r1
 8011dce:	2200      	movs	r2, #0
 8011dd0:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
			if (res == FR_OK)
 8011dd4:	e7e8      	b.n	8011da8 <f_close+0xf0>
		res = FR_INT_ERR;			/* Invalid index nunber */
 8011dd6:	2002      	movs	r0, #2
}
 8011dd8:	bd70      	pop	{r4, r5, r6, pc}
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8011dda:	2001      	movs	r0, #1
}
 8011ddc:	bd70      	pop	{r4, r5, r6, pc}
 8011dde:	bf00      	nop
 8011de0:	20001d00 	.word	0x20001d00

08011de4 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 8011de4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011de6:	b085      	sub	sp, #20
 8011de8:	9101      	str	r1, [sp, #4]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 8011dea:	2800      	cmp	r0, #0
 8011dec:	d037      	beq.n	8011e5e <f_opendir+0x7a>

	/* Get logical drive */
	obj = &dp->obj;
 8011dee:	4604      	mov	r4, r0
	res = find_volume(&path, &fs, 0);
 8011df0:	2200      	movs	r2, #0
 8011df2:	a903      	add	r1, sp, #12
 8011df4:	a801      	add	r0, sp, #4
 8011df6:	f7fd fea5 	bl	800fb44 <find_volume>
	if (res == FR_OK) {
 8011dfa:	b118      	cbz	r0, 8011e04 <f_opendir+0x20>
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 8011dfc:	2300      	movs	r3, #0
 8011dfe:	6023      	str	r3, [r4, #0]

	LEAVE_FF(fs, res);
}
 8011e00:	b005      	add	sp, #20
 8011e02:	bdf0      	pop	{r4, r5, r6, r7, pc}
		obj->fs = fs;
 8011e04:	9b03      	ldr	r3, [sp, #12]
		res = follow_path(dp, path);			/* Follow the path to the directory */
 8011e06:	9901      	ldr	r1, [sp, #4]
		obj->fs = fs;
 8011e08:	6023      	str	r3, [r4, #0]
		res = follow_path(dp, path);			/* Follow the path to the directory */
 8011e0a:	4620      	mov	r0, r4
 8011e0c:	f7fe faf6 	bl	80103fc <follow_path>
		if (res == FR_OK) {						/* Follow completed */
 8011e10:	bb08      	cbnz	r0, 8011e56 <f_opendir+0x72>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 8011e12:	f994 302f 	ldrsb.w	r3, [r4, #47]	; 0x2f
 8011e16:	2b00      	cmp	r3, #0
 8011e18:	db24      	blt.n	8011e64 <f_opendir+0x80>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 8011e1a:	79a3      	ldrb	r3, [r4, #6]
 8011e1c:	06db      	lsls	r3, r3, #27
 8011e1e:	d51c      	bpl.n	8011e5a <f_opendir+0x76>
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 8011e20:	9a03      	ldr	r2, [sp, #12]
 8011e22:	6a21      	ldr	r1, [r4, #32]
	if (fs->fs_type == FS_FAT32) {
 8011e24:	7810      	ldrb	r0, [r2, #0]
	rv = rv << 8 | ptr[0];
 8011e26:	7ecd      	ldrb	r5, [r1, #27]
 8011e28:	7e8b      	ldrb	r3, [r1, #26]
	if (fs->fs_type == FS_FAT32) {
 8011e2a:	2803      	cmp	r0, #3
	cl = ld_word(dir + DIR_FstClusLO);
 8011e2c:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
	if (fs->fs_type == FS_FAT32) {
 8011e30:	d105      	bne.n	8011e3e <f_opendir+0x5a>
	rv = rv << 8 | ptr[0];
 8011e32:	7d48      	ldrb	r0, [r1, #21]
 8011e34:	7d09      	ldrb	r1, [r1, #20]
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8011e36:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
 8011e3a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 8011e3e:	60a3      	str	r3, [r4, #8]
				obj->id = fs->id;
 8011e40:	88d3      	ldrh	r3, [r2, #6]
 8011e42:	80a3      	strh	r3, [r4, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 8011e44:	2100      	movs	r1, #0
 8011e46:	4620      	mov	r0, r4
 8011e48:	f7fe f86a 	bl	800ff20 <dir_sdi>
				if (res == FR_OK) {
 8011e4c:	b918      	cbnz	r0, 8011e56 <f_opendir+0x72>
					if (obj->sclust) {
 8011e4e:	68a6      	ldr	r6, [r4, #8]
 8011e50:	b956      	cbnz	r6, 8011e68 <f_opendir+0x84>
						obj->lockid = 0;	/* Root directory need not to be locked */
 8011e52:	6120      	str	r0, [r4, #16]
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 8011e54:	e7d4      	b.n	8011e00 <f_opendir+0x1c>
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8011e56:	2804      	cmp	r0, #4
 8011e58:	d1d0      	bne.n	8011dfc <f_opendir+0x18>
 8011e5a:	2005      	movs	r0, #5
 8011e5c:	e7ce      	b.n	8011dfc <f_opendir+0x18>
	if (!dp) return FR_INVALID_OBJECT;
 8011e5e:	2009      	movs	r0, #9
}
 8011e60:	b005      	add	sp, #20
 8011e62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011e64:	9a03      	ldr	r2, [sp, #12]
 8011e66:	e7eb      	b.n	8011e40 <f_opendir+0x5c>
 8011e68:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8011ee8 <f_opendir+0x104>
		if (Files[i].fs == dp->obj.fs &&
 8011e6c:	6825      	ldr	r5, [r4, #0]
 8011e6e:	4662      	mov	r2, ip
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8011e70:	4603      	mov	r3, r0
 8011e72:	e004      	b.n	8011e7e <f_opendir+0x9a>
 8011e74:	3301      	adds	r3, #1
 8011e76:	2b14      	cmp	r3, #20
 8011e78:	f102 0210 	add.w	r2, r2, #16
 8011e7c:	d018      	beq.n	8011eb0 <f_opendir+0xcc>
		if (Files[i].fs == dp->obj.fs &&
 8011e7e:	6811      	ldr	r1, [r2, #0]
 8011e80:	42a9      	cmp	r1, r5
 8011e82:	d1f7      	bne.n	8011e74 <f_opendir+0x90>
 8011e84:	6851      	ldr	r1, [r2, #4]
 8011e86:	428e      	cmp	r6, r1
 8011e88:	d1f4      	bne.n	8011e74 <f_opendir+0x90>
			Files[i].clu == dp->obj.sclust &&
 8011e8a:	6897      	ldr	r7, [r2, #8]
 8011e8c:	6961      	ldr	r1, [r4, #20]
 8011e8e:	428f      	cmp	r7, r1
 8011e90:	d1f0      	bne.n	8011e74 <f_opendir+0x90>
 8011e92:	f8df e058 	ldr.w	lr, [pc, #88]	; 8011eec <f_opendir+0x108>
 8011e96:	eb0e 1103 	add.w	r1, lr, r3, lsl #4
 8011e9a:	011a      	lsls	r2, r3, #4
 8011e9c:	f8b1 1214 	ldrh.w	r1, [r1, #532]	; 0x214
 8011ea0:	3101      	adds	r1, #1
 8011ea2:	b289      	uxth	r1, r1
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8011ea4:	4472      	add	r2, lr
	return i + 1;
 8011ea6:	3301      	adds	r3, #1
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8011ea8:	f8a2 1214 	strh.w	r1, [r2, #532]	; 0x214
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 8011eac:	6123      	str	r3, [r4, #16]
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 8011eae:	e7a7      	b.n	8011e00 <f_opendir+0x1c>
 8011eb0:	f8df e038 	ldr.w	lr, [pc, #56]	; 8011eec <f_opendir+0x108>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8011eb4:	2300      	movs	r3, #0
 8011eb6:	e002      	b.n	8011ebe <f_opendir+0xda>
 8011eb8:	3301      	adds	r3, #1
 8011eba:	2b14      	cmp	r3, #20
 8011ebc:	d00f      	beq.n	8011ede <f_opendir+0xfa>
 8011ebe:	011a      	lsls	r2, r3, #4
 8011ec0:	f85c 1002 	ldr.w	r1, [ip, r2]
 8011ec4:	2900      	cmp	r1, #0
 8011ec6:	d1f7      	bne.n	8011eb8 <f_opendir+0xd4>
		Files[i].fs = dp->obj.fs;
 8011ec8:	eb0e 0c02 	add.w	ip, lr, r2
		Files[i].ofs = dp->dptr;
 8011ecc:	6967      	ldr	r7, [r4, #20]
 8011ece:	f8cc 7210 	str.w	r7, [ip, #528]	; 0x210
		Files[i].ctr = 0;
 8011ed2:	f8ac 1214 	strh.w	r1, [ip, #532]	; 0x214
		Files[i].clu = dp->obj.sclust;
 8011ed6:	e9cc 5682 	strd	r5, r6, [ip, #520]	; 0x208
		Files[i].ctr = 0;
 8011eda:	2101      	movs	r1, #1
 8011edc:	e7e2      	b.n	8011ea4 <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 8011ede:	2300      	movs	r3, #0
 8011ee0:	6123      	str	r3, [r4, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 8011ee2:	2012      	movs	r0, #18
 8011ee4:	e78a      	b.n	8011dfc <f_opendir+0x18>
 8011ee6:	bf00      	nop
 8011ee8:	20001f08 	.word	0x20001f08
 8011eec:	20001d00 	.word	0x20001d00

08011ef0 <f_closedir>:
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8011ef0:	b340      	cbz	r0, 8011f44 <f_closedir+0x54>
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 8011ef2:	b538      	push	{r3, r4, r5, lr}
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8011ef4:	6803      	ldr	r3, [r0, #0]
 8011ef6:	4604      	mov	r4, r0
 8011ef8:	b12b      	cbz	r3, 8011f06 <f_closedir+0x16>
 8011efa:	781a      	ldrb	r2, [r3, #0]
 8011efc:	b11a      	cbz	r2, 8011f06 <f_closedir+0x16>
 8011efe:	8881      	ldrh	r1, [r0, #4]
 8011f00:	88da      	ldrh	r2, [r3, #6]
 8011f02:	4291      	cmp	r1, r2
 8011f04:	d001      	beq.n	8011f0a <f_closedir+0x1a>
	FRESULT res = FR_INVALID_OBJECT;
 8011f06:	2009      	movs	r0, #9
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
}
 8011f08:	bd38      	pop	{r3, r4, r5, pc}
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8011f0a:	7858      	ldrb	r0, [r3, #1]
 8011f0c:	f7fc ff76 	bl	800edfc <disk_status>
 8011f10:	f010 0001 	ands.w	r0, r0, #1
 8011f14:	d1f7      	bne.n	8011f06 <f_closedir+0x16>
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 8011f16:	6923      	ldr	r3, [r4, #16]
 8011f18:	b18b      	cbz	r3, 8011f3e <f_closedir+0x4e>
	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8011f1a:	3b01      	subs	r3, #1
 8011f1c:	2b13      	cmp	r3, #19
 8011f1e:	d81a      	bhi.n	8011f56 <f_closedir+0x66>
		n = Files[i].ctr;
 8011f20:	490e      	ldr	r1, [pc, #56]	; (8011f5c <f_closedir+0x6c>)
 8011f22:	eb01 1503 	add.w	r5, r1, r3, lsl #4
 8011f26:	011b      	lsls	r3, r3, #4
 8011f28:	f8b5 2214 	ldrh.w	r2, [r5, #532]	; 0x214
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8011f2c:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8011f30:	d00a      	beq.n	8011f48 <f_closedir+0x58>
		if (n > 0) n--;				/* Decrement read mode open count */
 8011f32:	b15a      	cbz	r2, 8011f4c <f_closedir+0x5c>
 8011f34:	3a01      	subs	r2, #1
 8011f36:	b292      	uxth	r2, r2
		Files[i].ctr = n;
 8011f38:	f8a5 2214 	strh.w	r2, [r5, #532]	; 0x214
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8011f3c:	b132      	cbz	r2, 8011f4c <f_closedir+0x5c>
			dp->obj.fs = 0;			/* Invalidate directory object */
 8011f3e:	2300      	movs	r3, #0
 8011f40:	6023      	str	r3, [r4, #0]
}
 8011f42:	bd38      	pop	{r3, r4, r5, pc}
	FRESULT res = FR_INVALID_OBJECT;
 8011f44:	2009      	movs	r0, #9
}
 8011f46:	4770      	bx	lr
		Files[i].ctr = n;
 8011f48:	f8a5 0214 	strh.w	r0, [r5, #532]	; 0x214
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8011f4c:	440b      	add	r3, r1
 8011f4e:	2200      	movs	r2, #0
 8011f50:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
		if (res == FR_OK)
 8011f54:	e7f3      	b.n	8011f3e <f_closedir+0x4e>
		res = FR_INT_ERR;			/* Invalid index nunber */
 8011f56:	2002      	movs	r0, #2
}
 8011f58:	bd38      	pop	{r3, r4, r5, pc}
 8011f5a:	bf00      	nop
 8011f5c:	20001d00 	.word	0x20001d00

08011f60 <f_readdir>:
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8011f60:	b318      	cbz	r0, 8011faa <f_readdir+0x4a>

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 8011f62:	b538      	push	{r3, r4, r5, lr}
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8011f64:	6803      	ldr	r3, [r0, #0]
 8011f66:	4604      	mov	r4, r0
 8011f68:	b133      	cbz	r3, 8011f78 <f_readdir+0x18>
 8011f6a:	781a      	ldrb	r2, [r3, #0]
 8011f6c:	b122      	cbz	r2, 8011f78 <f_readdir+0x18>
 8011f6e:	88da      	ldrh	r2, [r3, #6]
 8011f70:	460d      	mov	r5, r1
 8011f72:	8881      	ldrh	r1, [r0, #4]
 8011f74:	4291      	cmp	r1, r2
 8011f76:	d001      	beq.n	8011f7c <f_readdir+0x1c>
	FRESULT res = FR_INVALID_OBJECT;
 8011f78:	2009      	movs	r0, #9
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
}
 8011f7a:	bd38      	pop	{r3, r4, r5, pc}
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8011f7c:	7858      	ldrb	r0, [r3, #1]
 8011f7e:	f7fc ff3d 	bl	800edfc <disk_status>
 8011f82:	07c3      	lsls	r3, r0, #31
 8011f84:	d4f8      	bmi.n	8011f78 <f_readdir+0x18>
		if (!fno) {
 8011f86:	b195      	cbz	r5, 8011fae <f_readdir+0x4e>
			res = dir_read(dp, 0);			/* Read an item */
 8011f88:	4620      	mov	r0, r4
 8011f8a:	f7fd f9f5 	bl	800f378 <dir_read.constprop.0>
			if (res == FR_OK) {				/* A valid entry is found */
 8011f8e:	f010 0ffb 	tst.w	r0, #251	; 0xfb
 8011f92:	d1f2      	bne.n	8011f7a <f_readdir+0x1a>
				get_fileinfo(dp, fno);		/* Get the object information */
 8011f94:	4629      	mov	r1, r5
 8011f96:	4620      	mov	r0, r4
 8011f98:	f7fc ffe8 	bl	800ef6c <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 8011f9c:	4620      	mov	r0, r4
 8011f9e:	f7fd f9a7 	bl	800f2f0 <dir_next.constprop.0>
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 8011fa2:	2804      	cmp	r0, #4
 8011fa4:	bf08      	it	eq
 8011fa6:	2000      	moveq	r0, #0
}
 8011fa8:	bd38      	pop	{r3, r4, r5, pc}
	FRESULT res = FR_INVALID_OBJECT;
 8011faa:	2009      	movs	r0, #9
}
 8011fac:	4770      	bx	lr
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 8011fae:	4629      	mov	r1, r5
 8011fb0:	4620      	mov	r0, r4
}
 8011fb2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 8011fb6:	f7fd bfb3 	b.w	800ff20 <dir_sdi>
 8011fba:	bf00      	nop

08011fbc <f_findnext>:
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8011fbc:	b168      	cbz	r0, 8011fda <f_findnext+0x1e>

FRESULT f_findnext (
	DIR* dp,		/* Pointer to the open directory object */
	FILINFO* fno	/* Pointer to the file information structure */
)
{
 8011fbe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (chr >= 0x80) chr = ExCvt[chr - 0x80];	/* To upper SBCS extended char */
 8011fc0:	4e3c      	ldr	r6, [pc, #240]	; (80120b4 <f_findnext+0xf8>)
 8011fc2:	460d      	mov	r5, r1
 8011fc4:	4604      	mov	r4, r0
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8011fc6:	6823      	ldr	r3, [r4, #0]
 8011fc8:	b12b      	cbz	r3, 8011fd6 <f_findnext+0x1a>
 8011fca:	781a      	ldrb	r2, [r3, #0]
 8011fcc:	b11a      	cbz	r2, 8011fd6 <f_findnext+0x1a>
 8011fce:	88a1      	ldrh	r1, [r4, #4]
 8011fd0:	88da      	ldrh	r2, [r3, #6]
 8011fd2:	4291      	cmp	r1, r2
 8011fd4:	d003      	beq.n	8011fde <f_findnext+0x22>
					if (*pp++ == '?') nm++; else nx = 1;
 8011fd6:	2009      	movs	r0, #9
#if _USE_LFN != 0 && _USE_FIND == 2
		if (pattern_matching(dp->pat, fno->altname, 0, 0)) break;	/* Test for alternative name if exist */
#endif
	}
	return res;
}
 8011fd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					if (*pp++ == '?') nm++; else nx = 1;
 8011fda:	2009      	movs	r0, #9
}
 8011fdc:	4770      	bx	lr
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8011fde:	7858      	ldrb	r0, [r3, #1]
 8011fe0:	f7fc ff0c 	bl	800edfc <disk_status>
 8011fe4:	07c3      	lsls	r3, r0, #31
 8011fe6:	d4f6      	bmi.n	8011fd6 <f_findnext+0x1a>
		if (!fno) {
 8011fe8:	2d00      	cmp	r5, #0
 8011fea:	d043      	beq.n	8012074 <f_findnext+0xb8>
			res = dir_read(dp, 0);			/* Read an item */
 8011fec:	4620      	mov	r0, r4
 8011fee:	f7fd f9c3 	bl	800f378 <dir_read.constprop.0>
			if (res == FR_OK) {				/* A valid entry is found */
 8011ff2:	f010 0ffb 	tst.w	r0, #251	; 0xfb
 8011ff6:	d1ef      	bne.n	8011fd8 <f_findnext+0x1c>
				get_fileinfo(dp, fno);		/* Get the object information */
 8011ff8:	4629      	mov	r1, r5
 8011ffa:	4620      	mov	r0, r4
 8011ffc:	f7fc ffb6 	bl	800ef6c <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 8012000:	4620      	mov	r0, r4
 8012002:	f7fd f975 	bl	800f2f0 <dir_next.constprop.0>
		if (res != FR_OK || !fno || !fno->fname[0]) break;	/* Terminate if any error or end of directory */
 8012006:	f010 0ffb 	tst.w	r0, #251	; 0xfb
 801200a:	d1e5      	bne.n	8011fd8 <f_findnext+0x1c>
 801200c:	7dab      	ldrb	r3, [r5, #22]
 801200e:	b3bb      	cbz	r3, 8012080 <f_findnext+0xc4>
		if (pattern_matching(dp->pat, fno->fname, 0, 0)) break;		/* Test for the file name */
 8012010:	f8d4 c034 	ldr.w	ip, [r4, #52]	; 0x34
 8012014:	f105 0116 	add.w	r1, r5, #22
		pp = pat; np = nam;			/* Top of pattern and name to match */
 8012018:	e00d      	b.n	8012036 <f_findnext+0x7a>
	chr = (BYTE)*(*ptr)++;					/* Get a byte */
 801201a:	f811 0b01 	ldrb.w	r0, [r1], #1
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
 801201e:	f1a0 0761 	sub.w	r7, r0, #97	; 0x61
 8012022:	3a20      	subs	r2, #32
 8012024:	2f19      	cmp	r7, #25
 8012026:	b292      	uxth	r2, r2
	chr = (BYTE)*(*ptr)++;					/* Get a byte */
 8012028:	b283      	uxth	r3, r0
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
 801202a:	d81d      	bhi.n	8012068 <f_findnext+0xac>
 801202c:	3b20      	subs	r3, #32
 801202e:	b29b      	uxth	r3, r3
			if (pc != nc) break;	/* Branch mismatched? */
 8012030:	4293      	cmp	r3, r2
 8012032:	d1c8      	bne.n	8011fc6 <f_findnext+0xa>
			if (pc == 0) return 1;	/* Branch matched? (matched at end of both strings) */
 8012034:	b323      	cbz	r3, 8012080 <f_findnext+0xc4>
 8012036:	4667      	mov	r7, ip
			if (*pp == '?' || *pp == '*') {	/* Wildcard? */
 8012038:	f81c 3b01 	ldrb.w	r3, [ip], #1
 801203c:	2b3f      	cmp	r3, #63	; 0x3f
 801203e:	d021      	beq.n	8012084 <f_findnext+0xc8>
 8012040:	2b2a      	cmp	r3, #42	; 0x2a
 8012042:	d01f      	beq.n	8012084 <f_findnext+0xc8>
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
 8012044:	f1a3 0061 	sub.w	r0, r3, #97	; 0x61
 8012048:	2819      	cmp	r0, #25
	chr = (BYTE)*(*ptr)++;					/* Get a byte */
 801204a:	b29a      	uxth	r2, r3
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
 801204c:	d9e5      	bls.n	801201a <f_findnext+0x5e>
	if (chr >= 0x80) chr = ExCvt[chr - 0x80];	/* To upper SBCS extended char */
 801204e:	2a7f      	cmp	r2, #127	; 0x7f
	chr = (BYTE)*(*ptr)++;					/* Get a byte */
 8012050:	f811 0b01 	ldrb.w	r0, [r1], #1
	if (chr >= 0x80) chr = ExCvt[chr - 0x80];	/* To upper SBCS extended char */
 8012054:	bf88      	it	hi
 8012056:	199b      	addhi	r3, r3, r6
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
 8012058:	f1a0 0761 	sub.w	r7, r0, #97	; 0x61
	if (chr >= 0x80) chr = ExCvt[chr - 0x80];	/* To upper SBCS extended char */
 801205c:	bf88      	it	hi
 801205e:	f813 2c80 	ldrbhi.w	r2, [r3, #-128]
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
 8012062:	2f19      	cmp	r7, #25
	chr = (BYTE)*(*ptr)++;					/* Get a byte */
 8012064:	b283      	uxth	r3, r0
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
 8012066:	d9e1      	bls.n	801202c <f_findnext+0x70>
	if (chr >= 0x80) chr = ExCvt[chr - 0x80];	/* To upper SBCS extended char */
 8012068:	2b7f      	cmp	r3, #127	; 0x7f
 801206a:	bf84      	itt	hi
 801206c:	1980      	addhi	r0, r0, r6
 801206e:	f810 3c80 	ldrbhi.w	r3, [r0, #-128]
 8012072:	e7dd      	b.n	8012030 <f_findnext+0x74>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 8012074:	4629      	mov	r1, r5
 8012076:	4620      	mov	r0, r4
 8012078:	f7fd ff52 	bl	800ff20 <dir_sdi>
		if (res != FR_OK || !fno || !fno->fname[0]) break;	/* Terminate if any error or end of directory */
 801207c:	2800      	cmp	r0, #0
 801207e:	d1ab      	bne.n	8011fd8 <f_findnext+0x1c>
		res = f_readdir(dp, fno);		/* Get a directory item */
 8012080:	2000      	movs	r0, #0
}
 8012082:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
{
 8012084:	2300      	movs	r3, #0
 8012086:	f817 cb01 	ldrb.w	ip, [r7], #1
 801208a:	461a      	mov	r2, r3
					if (*pp++ == '?') nm++; else nx = 1;
 801208c:	f1bc 0f3f 	cmp.w	ip, #63	; 0x3f
 8012090:	4638      	mov	r0, r7
				} while (*pp == '?' || *pp == '*');
 8012092:	f817 cb01 	ldrb.w	ip, [r7], #1
					if (*pp++ == '?') nm++; else nx = 1;
 8012096:	bf0c      	ite	eq
 8012098:	3201      	addeq	r2, #1
 801209a:	2301      	movne	r3, #1
				} while (*pp == '?' || *pp == '*');
 801209c:	f1bc 0f3f 	cmp.w	ip, #63	; 0x3f
 80120a0:	d0f4      	beq.n	801208c <f_findnext+0xd0>
 80120a2:	f1bc 0f2a 	cmp.w	ip, #42	; 0x2a
 80120a6:	d0f1      	beq.n	801208c <f_findnext+0xd0>
				if (pattern_matching(pp, np, nm, nx)) return 1;	/* Test new branch (recurs upto number of wildcard blocks in the pattern) */
 80120a8:	f7fc feee 	bl	800ee88 <pattern_matching>
 80120ac:	2800      	cmp	r0, #0
 80120ae:	d08a      	beq.n	8011fc6 <f_findnext+0xa>
 80120b0:	e7e6      	b.n	8012080 <f_findnext+0xc4>
 80120b2:	bf00      	nop
 80120b4:	0801b8fc 	.word	0x0801b8fc

080120b8 <f_findfirst>:
	DIR* dp,				/* Pointer to the blank directory object */
	FILINFO* fno,			/* Pointer to the file information structure */
	const TCHAR* path,		/* Pointer to the directory to open */
	const TCHAR* pattern	/* Pointer to the matching pattern */
)
{
 80120b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80120ba:	b083      	sub	sp, #12
	FRESULT res;


	dp->pat = pattern;		/* Save pointer to pattern string */
 80120bc:	6343      	str	r3, [r0, #52]	; 0x34
{
 80120be:	4604      	mov	r4, r0
 80120c0:	4613      	mov	r3, r2
 80120c2:	460d      	mov	r5, r1
	res = find_volume(&path, &fs, 0);
 80120c4:	2200      	movs	r2, #0
 80120c6:	a901      	add	r1, sp, #4
 80120c8:	4668      	mov	r0, sp
 80120ca:	9300      	str	r3, [sp, #0]
 80120cc:	f7fd fd3a 	bl	800fb44 <find_volume>
	if (res == FR_OK) {
 80120d0:	b118      	cbz	r0, 80120da <f_findfirst+0x22>
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 80120d2:	2300      	movs	r3, #0
 80120d4:	6023      	str	r3, [r4, #0]
	res = f_opendir(dp, path);		/* Open the target directory */
	if (res == FR_OK) {
		res = f_findnext(dp, fno);	/* Find the first item */
	}
	return res;
}
 80120d6:	b003      	add	sp, #12
 80120d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		obj->fs = fs;
 80120da:	9b01      	ldr	r3, [sp, #4]
		res = follow_path(dp, path);			/* Follow the path to the directory */
 80120dc:	9900      	ldr	r1, [sp, #0]
		obj->fs = fs;
 80120de:	6023      	str	r3, [r4, #0]
		res = follow_path(dp, path);			/* Follow the path to the directory */
 80120e0:	4620      	mov	r0, r4
 80120e2:	f7fe f98b 	bl	80103fc <follow_path>
		if (res == FR_OK) {						/* Follow completed */
 80120e6:	bb30      	cbnz	r0, 8012136 <f_findfirst+0x7e>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 80120e8:	f994 302f 	ldrsb.w	r3, [r4, #47]	; 0x2f
 80120ec:	2b00      	cmp	r3, #0
 80120ee:	db2a      	blt.n	8012146 <f_findfirst+0x8e>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 80120f0:	79a3      	ldrb	r3, [r4, #6]
 80120f2:	06db      	lsls	r3, r3, #27
 80120f4:	d525      	bpl.n	8012142 <f_findfirst+0x8a>
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 80120f6:	9a01      	ldr	r2, [sp, #4]
 80120f8:	6a21      	ldr	r1, [r4, #32]
	if (fs->fs_type == FS_FAT32) {
 80120fa:	7810      	ldrb	r0, [r2, #0]
	rv = rv << 8 | ptr[0];
 80120fc:	7ece      	ldrb	r6, [r1, #27]
 80120fe:	7e8b      	ldrb	r3, [r1, #26]
	if (fs->fs_type == FS_FAT32) {
 8012100:	2803      	cmp	r0, #3
	cl = ld_word(dir + DIR_FstClusLO);
 8012102:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
	if (fs->fs_type == FS_FAT32) {
 8012106:	d105      	bne.n	8012114 <f_findfirst+0x5c>
	rv = rv << 8 | ptr[0];
 8012108:	7d48      	ldrb	r0, [r1, #21]
 801210a:	7d09      	ldrb	r1, [r1, #20]
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 801210c:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
 8012110:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 8012114:	60a3      	str	r3, [r4, #8]
				obj->id = fs->id;
 8012116:	88d3      	ldrh	r3, [r2, #6]
 8012118:	80a3      	strh	r3, [r4, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 801211a:	2100      	movs	r1, #0
 801211c:	4620      	mov	r0, r4
 801211e:	f7fd feff 	bl	800ff20 <dir_sdi>
				if (res == FR_OK) {
 8012122:	b940      	cbnz	r0, 8012136 <f_findfirst+0x7e>
					if (obj->sclust) {
 8012124:	68a7      	ldr	r7, [r4, #8]
 8012126:	b987      	cbnz	r7, 801214a <f_findfirst+0x92>
						obj->lockid = 0;	/* Root directory need not to be locked */
 8012128:	6127      	str	r7, [r4, #16]
		res = f_findnext(dp, fno);	/* Find the first item */
 801212a:	4629      	mov	r1, r5
 801212c:	4620      	mov	r0, r4
 801212e:	f7ff ff45 	bl	8011fbc <f_findnext>
}
 8012132:	b003      	add	sp, #12
 8012134:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8012136:	2804      	cmp	r0, #4
 8012138:	d1cb      	bne.n	80120d2 <f_findfirst+0x1a>
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 801213a:	2300      	movs	r3, #0
 801213c:	6023      	str	r3, [r4, #0]
	res = f_opendir(dp, path);		/* Open the target directory */
 801213e:	2005      	movs	r0, #5
 8012140:	e7c9      	b.n	80120d6 <f_findfirst+0x1e>
 8012142:	2005      	movs	r0, #5
 8012144:	e7c5      	b.n	80120d2 <f_findfirst+0x1a>
 8012146:	9a01      	ldr	r2, [sp, #4]
 8012148:	e7e5      	b.n	8012116 <f_findfirst+0x5e>
 801214a:	f8df c080 	ldr.w	ip, [pc, #128]	; 80121cc <f_findfirst+0x114>
		if (Files[i].fs == dp->obj.fs &&
 801214e:	6826      	ldr	r6, [r4, #0]
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8012150:	4603      	mov	r3, r0
 8012152:	4662      	mov	r2, ip
 8012154:	e004      	b.n	8012160 <f_findfirst+0xa8>
 8012156:	3301      	adds	r3, #1
 8012158:	2b14      	cmp	r3, #20
 801215a:	f102 0210 	add.w	r2, r2, #16
 801215e:	d017      	beq.n	8012190 <f_findfirst+0xd8>
		if (Files[i].fs == dp->obj.fs &&
 8012160:	6811      	ldr	r1, [r2, #0]
 8012162:	42b1      	cmp	r1, r6
 8012164:	d1f7      	bne.n	8012156 <f_findfirst+0x9e>
 8012166:	6851      	ldr	r1, [r2, #4]
 8012168:	428f      	cmp	r7, r1
 801216a:	d1f4      	bne.n	8012156 <f_findfirst+0x9e>
			Files[i].clu == dp->obj.sclust &&
 801216c:	6890      	ldr	r0, [r2, #8]
 801216e:	6961      	ldr	r1, [r4, #20]
 8012170:	4288      	cmp	r0, r1
 8012172:	d1f0      	bne.n	8012156 <f_findfirst+0x9e>
 8012174:	4914      	ldr	r1, [pc, #80]	; (80121c8 <f_findfirst+0x110>)
 8012176:	eb01 1003 	add.w	r0, r1, r3, lsl #4
 801217a:	011a      	lsls	r2, r3, #4
 801217c:	f8b0 6214 	ldrh.w	r6, [r0, #532]	; 0x214
 8012180:	3601      	adds	r6, #1
 8012182:	b2b6      	uxth	r6, r6
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8012184:	440a      	add	r2, r1
	return i + 1;
 8012186:	3301      	adds	r3, #1
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8012188:	f8a2 6214 	strh.w	r6, [r2, #532]	; 0x214
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 801218c:	6123      	str	r3, [r4, #16]
	if (res == FR_OK) {
 801218e:	e7cc      	b.n	801212a <f_findfirst+0x72>
 8012190:	490d      	ldr	r1, [pc, #52]	; (80121c8 <f_findfirst+0x110>)
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8012192:	2300      	movs	r3, #0
 8012194:	e002      	b.n	801219c <f_findfirst+0xe4>
 8012196:	3301      	adds	r3, #1
 8012198:	2b14      	cmp	r3, #20
 801219a:	d010      	beq.n	80121be <f_findfirst+0x106>
 801219c:	011a      	lsls	r2, r3, #4
 801219e:	f85c e002 	ldr.w	lr, [ip, r2]
 80121a2:	f1be 0f00 	cmp.w	lr, #0
 80121a6:	d1f6      	bne.n	8012196 <f_findfirst+0xde>
		Files[i].fs = dp->obj.fs;
 80121a8:	eb01 0c02 	add.w	ip, r1, r2
		Files[i].ofs = dp->dptr;
 80121ac:	6960      	ldr	r0, [r4, #20]
 80121ae:	f8cc 0210 	str.w	r0, [ip, #528]	; 0x210
		Files[i].clu = dp->obj.sclust;
 80121b2:	e9cc 6782 	strd	r6, r7, [ip, #520]	; 0x208
		Files[i].ctr = 0;
 80121b6:	f8ac e214 	strh.w	lr, [ip, #532]	; 0x214
 80121ba:	2601      	movs	r6, #1
 80121bc:	e7e2      	b.n	8012184 <f_findfirst+0xcc>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 80121be:	2300      	movs	r3, #0
 80121c0:	6123      	str	r3, [r4, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 80121c2:	2012      	movs	r0, #18
 80121c4:	e785      	b.n	80120d2 <f_findfirst+0x1a>
 80121c6:	bf00      	nop
 80121c8:	20001d00 	.word	0x20001d00
 80121cc:	20001f08 	.word	0x20001f08

080121d0 <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 80121d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80121d4:	b099      	sub	sp, #100	; 0x64
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 80121d6:	2202      	movs	r2, #2
{
 80121d8:	9007      	str	r0, [sp, #28]
	res = find_volume(&path, &fs, FA_WRITE);
 80121da:	a909      	add	r1, sp, #36	; 0x24
 80121dc:	a807      	add	r0, sp, #28
 80121de:	f7fd fcb1 	bl	800fb44 <find_volume>
	dj.obj.fs = fs;
 80121e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80121e4:	930a      	str	r3, [sp, #40]	; 0x28
	if (res == FR_OK) {
 80121e6:	4605      	mov	r5, r0
 80121e8:	b118      	cbz	r0, 80121f2 <f_mkdir+0x22>
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
}
 80121ea:	4628      	mov	r0, r5
 80121ec:	b019      	add	sp, #100	; 0x64
 80121ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		res = follow_path(&dj, path);			/* Follow the file path */
 80121f2:	9907      	ldr	r1, [sp, #28]
 80121f4:	a80a      	add	r0, sp, #40	; 0x28
 80121f6:	f7fe f901 	bl	80103fc <follow_path>
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 80121fa:	b130      	cbz	r0, 801220a <f_mkdir+0x3a>
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 80121fc:	2804      	cmp	r0, #4
 80121fe:	d009      	beq.n	8012214 <f_mkdir+0x44>
 8012200:	4605      	mov	r5, r0
}
 8012202:	4628      	mov	r0, r5
 8012204:	b019      	add	sp, #100	; 0x64
 8012206:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 801220a:	2508      	movs	r5, #8
}
 801220c:	4628      	mov	r0, r5
 801220e:	b019      	add	sp, #100	; 0x64
 8012210:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 8012214:	4629      	mov	r1, r5
 8012216:	a80a      	add	r0, sp, #40	; 0x28
 8012218:	f7fd fb64 	bl	800f8e4 <create_chain>
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 801221c:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801221e:	8963      	ldrh	r3, [r4, #10]
 8012220:	025b      	lsls	r3, r3, #9
 8012222:	930d      	str	r3, [sp, #52]	; 0x34
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 8012224:	4607      	mov	r7, r0
 8012226:	2800      	cmp	r0, #0
 8012228:	f000 810e 	beq.w	8012448 <f_mkdir+0x278>
			if (dcl == 1) res = FR_INT_ERR;
 801222c:	2801      	cmp	r0, #1
 801222e:	f000 810f 	beq.w	8012450 <f_mkdir+0x280>
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 8012232:	1c43      	adds	r3, r0, #1
 8012234:	f000 8115 	beq.w	8012462 <f_mkdir+0x292>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8012238:	78e3      	ldrb	r3, [r4, #3]
 801223a:	2b00      	cmp	r3, #0
 801223c:	f040 8113 	bne.w	8012466 <f_mkdir+0x296>
			tm = GET_FATTIME();
 8012240:	f7fc fe20 	bl	800ee84 <get_fattime>
				dsc = clust2sect(fs, dcl);
 8012244:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8012248:	f8d8 3018 	ldr.w	r3, [r8, #24]
	clst -= 2;
 801224c:	1eba      	subs	r2, r7, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 801224e:	3b02      	subs	r3, #2
 8012250:	429a      	cmp	r2, r3
	return clst * fs->csize + fs->database;
 8012252:	bf3c      	itt	cc
 8012254:	f8d8 302c 	ldrcc.w	r3, [r8, #44]	; 0x2c
 8012258:	f8b8 600a 	ldrhcc.w	r6, [r8, #10]
				dir = fs->win;
 801225c:	f108 0934 	add.w	r9, r8, #52	; 0x34
			tm = GET_FATTIME();
 8012260:	4683      	mov	fp, r0
	return clst * fs->csize + fs->database;
 8012262:	bf38      	it	cc
 8012264:	fb02 3606 	mlacc	r6, r2, r6, r3
 8012268:	f04f 0100 	mov.w	r1, #0
 801226c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8012270:	4648      	mov	r0, r9
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8012272:	bf28      	it	cs
 8012274:	2600      	movcs	r6, #0
				mem_set(dir, 0, SS(fs));
 8012276:	f005 faad 	bl	80177d4 <memset>
 801227a:	f04f 3320 	mov.w	r3, #538976288	; 0x20202020
 801227e:	f8c8 3034 	str.w	r3, [r8, #52]	; 0x34
	*ptr++ = (BYTE)val; val >>= 8;
 8012282:	f3cb 4207 	ubfx	r2, fp, #16, #8
 8012286:	f8c9 3004 	str.w	r3, [r9, #4]
 801228a:	f8c9 3007 	str.w	r3, [r9, #7]
	*ptr++ = (BYTE)val;
 801228e:	ea4f 6c1b 	mov.w	ip, fp, lsr #24
	if (fs->fs_type == FS_FAT32) {
 8012292:	f898 3000 	ldrb.w	r3, [r8]
	*ptr++ = (BYTE)val; val >>= 8;
 8012296:	9202      	str	r2, [sp, #8]
 8012298:	9a02      	ldr	r2, [sp, #8]
	*ptr++ = (BYTE)val;
 801229a:	f8cd c00c 	str.w	ip, [sp, #12]
					dir[DIR_Name] = '.';
 801229e:	212e      	movs	r1, #46	; 0x2e
	*ptr++ = (BYTE)val; val >>= 8;
 80122a0:	fa5f f08b 	uxtb.w	r0, fp
	*ptr++ = (BYTE)val; val >>= 8;
 80122a4:	f3cb 2407 	ubfx	r4, fp, #8, #8
	*ptr++ = (BYTE)val; val >>= 8;
 80122a8:	fa5f fc87 	uxtb.w	ip, r7
					dir[DIR_Attr] = AM_DIR;
 80122ac:	f04f 0e10 	mov.w	lr, #16
					dir[DIR_Name] = '.';
 80122b0:	f888 1034 	strb.w	r1, [r8, #52]	; 0x34
	*ptr++ = (BYTE)val; val >>= 8;
 80122b4:	f888 204c 	strb.w	r2, [r8, #76]	; 0x4c
	*ptr++ = (BYTE)val;
 80122b8:	f3c7 2107 	ubfx	r1, r7, #8, #8
	*ptr++ = (BYTE)val;
 80122bc:	9a03      	ldr	r2, [sp, #12]
	*ptr++ = (BYTE)val; val >>= 8;
 80122be:	9005      	str	r0, [sp, #20]
	if (fs->fs_type == FS_FAT32) {
 80122c0:	2b03      	cmp	r3, #3
	*ptr++ = (BYTE)val; val >>= 8;
 80122c2:	9406      	str	r4, [sp, #24]
	*ptr++ = (BYTE)val; val >>= 8;
 80122c4:	f8cd c004 	str.w	ip, [sp, #4]
	*ptr++ = (BYTE)val;
 80122c8:	9104      	str	r1, [sp, #16]
					dir[DIR_Attr] = AM_DIR;
 80122ca:	f888 e03f 	strb.w	lr, [r8, #63]	; 0x3f
	*ptr++ = (BYTE)val; val >>= 8;
 80122ce:	f888 004a 	strb.w	r0, [r8, #74]	; 0x4a
	*ptr++ = (BYTE)val; val >>= 8;
 80122d2:	f888 404b 	strb.w	r4, [r8, #75]	; 0x4b
	*ptr++ = (BYTE)val;
 80122d6:	f888 204d 	strb.w	r2, [r8, #77]	; 0x4d
	*ptr++ = (BYTE)val; val >>= 8;
 80122da:	f888 c04e 	strb.w	ip, [r8, #78]	; 0x4e
	*ptr++ = (BYTE)val;
 80122de:	f888 104f 	strb.w	r1, [r8, #79]	; 0x4f
	if (fs->fs_type == FS_FAT32) {
 80122e2:	d106      	bne.n	80122f2 <f_mkdir+0x122>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80122e4:	fa27 f30e 	lsr.w	r3, r7, lr
	*ptr++ = (BYTE)val; val >>= 8;
 80122e8:	0a1a      	lsrs	r2, r3, #8
 80122ea:	f888 3048 	strb.w	r3, [r8, #72]	; 0x48
	*ptr++ = (BYTE)val;
 80122ee:	f888 2049 	strb.w	r2, [r8, #73]	; 0x49
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80122f2:	f108 0358 	add.w	r3, r8, #88	; 0x58
 80122f6:	4599      	cmp	r9, r3
 80122f8:	d206      	bcs.n	8012308 <f_mkdir+0x138>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 80122fa:	f108 0154 	add.w	r1, r8, #84	; 0x54
 80122fe:	f108 0338 	add.w	r3, r8, #56	; 0x38
 8012302:	4299      	cmp	r1, r3
 8012304:	f0c0 80bd 	bcc.w	8012482 <f_mkdir+0x2b2>
			*d++ = *s++;
 8012308:	f8d8 2034 	ldr.w	r2, [r8, #52]	; 0x34
 801230c:	f8d8 3038 	ldr.w	r3, [r8, #56]	; 0x38
 8012310:	f8c8 2054 	str.w	r2, [r8, #84]	; 0x54
 8012314:	f8c8 3058 	str.w	r3, [r8, #88]	; 0x58
 8012318:	f8d8 203c 	ldr.w	r2, [r8, #60]	; 0x3c
 801231c:	f8d8 3040 	ldr.w	r3, [r8, #64]	; 0x40
 8012320:	f8c8 205c 	str.w	r2, [r8, #92]	; 0x5c
 8012324:	f8c8 3060 	str.w	r3, [r8, #96]	; 0x60
 8012328:	f8d8 2044 	ldr.w	r2, [r8, #68]	; 0x44
 801232c:	f8d8 3048 	ldr.w	r3, [r8, #72]	; 0x48
 8012330:	f8c8 2064 	str.w	r2, [r8, #100]	; 0x64
 8012334:	f8c8 3068 	str.w	r3, [r8, #104]	; 0x68
 8012338:	f8d8 204c 	ldr.w	r2, [r8, #76]	; 0x4c
 801233c:	f8d8 3050 	ldr.w	r3, [r8, #80]	; 0x50
 8012340:	f8c8 206c 	str.w	r2, [r8, #108]	; 0x6c
 8012344:	f8c8 3070 	str.w	r3, [r8, #112]	; 0x70
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 8012348:	232e      	movs	r3, #46	; 0x2e
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 801234a:	9c09      	ldr	r4, [sp, #36]	; 0x24
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 801234c:	f888 3055 	strb.w	r3, [r8, #85]	; 0x55
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 8012350:	7822      	ldrb	r2, [r4, #0]
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 8012352:	9b0c      	ldr	r3, [sp, #48]	; 0x30
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 8012354:	2a03      	cmp	r2, #3
 8012356:	d07d      	beq.n	8012454 <f_mkdir+0x284>
 8012358:	b2dd      	uxtb	r5, r3
 801235a:	f3c3 2207 	ubfx	r2, r3, #8, #8
	*ptr++ = (BYTE)val; val >>= 8;
 801235e:	f888 506e 	strb.w	r5, [r8, #110]	; 0x6e
	*ptr++ = (BYTE)val;
 8012362:	f888 206f 	strb.w	r2, [r8, #111]	; 0x6f
	if (fs->fs_type == FS_FAT32) {
 8012366:	7822      	ldrb	r2, [r4, #0]
 8012368:	2a03      	cmp	r2, #3
 801236a:	d105      	bne.n	8012378 <f_mkdir+0x1a8>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 801236c:	0c1b      	lsrs	r3, r3, #16
	*ptr++ = (BYTE)val; val >>= 8;
 801236e:	0a1a      	lsrs	r2, r3, #8
 8012370:	f888 3068 	strb.w	r3, [r8, #104]	; 0x68
	*ptr++ = (BYTE)val;
 8012374:	f888 2069 	strb.w	r2, [r8, #105]	; 0x69
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 8012378:	8963      	ldrh	r3, [r4, #10]
 801237a:	2b00      	cmp	r3, #0
 801237c:	d03b      	beq.n	80123f6 <f_mkdir+0x226>
 801237e:	3b01      	subs	r3, #1
 8012380:	4433      	add	r3, r6
					fs->wflag = 1;
 8012382:	f04f 0a01 	mov.w	sl, #1
 8012386:	9700      	str	r7, [sp, #0]
 8012388:	469b      	mov	fp, r3
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 801238a:	f104 0734 	add.w	r7, r4, #52	; 0x34
 801238e:	7860      	ldrb	r0, [r4, #1]
					fs->winsect = dsc++;
 8012390:	6326      	str	r6, [r4, #48]	; 0x30
					fs->wflag = 1;
 8012392:	f884 a003 	strb.w	sl, [r4, #3]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8012396:	4639      	mov	r1, r7
 8012398:	2301      	movs	r3, #1
 801239a:	4632      	mov	r2, r6
 801239c:	f7fc fd56 	bl	800ee4c <disk_write>
 80123a0:	bb00      	cbnz	r0, 80123e4 <f_mkdir+0x214>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80123a2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80123a4:	69e3      	ldr	r3, [r4, #28]
			fs->wflag = 0;
 80123a6:	70e0      	strb	r0, [r4, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80123a8:	1ab2      	subs	r2, r6, r2
 80123aa:	429a      	cmp	r2, r3
 80123ac:	d20f      	bcs.n	80123ce <f_mkdir+0x1fe>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80123ae:	78a5      	ldrb	r5, [r4, #2]
 80123b0:	2d01      	cmp	r5, #1
 80123b2:	d90c      	bls.n	80123ce <f_mkdir+0x1fe>
 80123b4:	46b0      	mov	r8, r6
 80123b6:	e000      	b.n	80123ba <f_mkdir+0x1ea>
 80123b8:	69e3      	ldr	r3, [r4, #28]
					disk_write(fs->drv, fs->win, wsect, 1);
 80123ba:	7860      	ldrb	r0, [r4, #1]
					wsect += fs->fsize;
 80123bc:	4498      	add	r8, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80123be:	3d01      	subs	r5, #1
					disk_write(fs->drv, fs->win, wsect, 1);
 80123c0:	4642      	mov	r2, r8
 80123c2:	2301      	movs	r3, #1
 80123c4:	4639      	mov	r1, r7
 80123c6:	f7fc fd41 	bl	800ee4c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80123ca:	2d01      	cmp	r5, #1
 80123cc:	d1f4      	bne.n	80123b8 <f_mkdir+0x1e8>
 80123ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 80123d2:	2100      	movs	r1, #0
 80123d4:	4648      	mov	r0, r9
 80123d6:	f005 f9fd 	bl	80177d4 <memset>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 80123da:	45b3      	cmp	fp, r6
 80123dc:	d00a      	beq.n	80123f4 <f_mkdir+0x224>
 80123de:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80123e0:	3601      	adds	r6, #1
 80123e2:	e7d2      	b.n	801238a <f_mkdir+0x1ba>
 80123e4:	9f00      	ldr	r7, [sp, #0]
			res = FR_DISK_ERR;
 80123e6:	2501      	movs	r5, #1
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 80123e8:	4639      	mov	r1, r7
 80123ea:	a80a      	add	r0, sp, #40	; 0x28
 80123ec:	2200      	movs	r2, #0
 80123ee:	f7fe f97d 	bl	80106ec <remove_chain>
 80123f2:	e6fa      	b.n	80121ea <f_mkdir+0x1a>
 80123f4:	9f00      	ldr	r7, [sp, #0]
				res = dir_register(&dj);	/* Register the object to the directoy */
 80123f6:	a80a      	add	r0, sp, #40	; 0x28
 80123f8:	f7fe fa20 	bl	801083c <dir_register>
			if (res == FR_OK) {
 80123fc:	4605      	mov	r5, r0
 80123fe:	2800      	cmp	r0, #0
 8012400:	d1f2      	bne.n	80123e8 <f_mkdir+0x218>
	*ptr++ = (BYTE)val; val >>= 8;
 8012402:	9b05      	ldr	r3, [sp, #20]
	*ptr++ = (BYTE)val; val >>= 8;
 8012404:	9a01      	ldr	r2, [sp, #4]
					st_clust(fs, dir, dcl);				/* Table start cluster */
 8012406:	9809      	ldr	r0, [sp, #36]	; 0x24
	*ptr++ = (BYTE)val; val >>= 8;
 8012408:	f363 0507 	bfi	r5, r3, #0, #8
 801240c:	9b06      	ldr	r3, [sp, #24]
 801240e:	f363 250f 	bfi	r5, r3, #8, #8
 8012412:	9b02      	ldr	r3, [sp, #8]
 8012414:	f363 4517 	bfi	r5, r3, #16, #8
					dir = dj.dir;
 8012418:	9b12      	ldr	r3, [sp, #72]	; 0x48
	*ptr++ = (BYTE)val; val >>= 8;
 801241a:	769a      	strb	r2, [r3, #26]
	*ptr++ = (BYTE)val; val >>= 8;
 801241c:	9a03      	ldr	r2, [sp, #12]
 801241e:	f362 651f 	bfi	r5, r2, #24, #8
	*ptr++ = (BYTE)val;
 8012422:	9a04      	ldr	r2, [sp, #16]
	*ptr++ = (BYTE)val; val >>= 8;
 8012424:	f8c3 5016 	str.w	r5, [r3, #22]
	*ptr++ = (BYTE)val;
 8012428:	76da      	strb	r2, [r3, #27]
	if (fs->fs_type == FS_FAT32) {
 801242a:	7802      	ldrb	r2, [r0, #0]
 801242c:	2a03      	cmp	r2, #3
 801242e:	d103      	bne.n	8012438 <f_mkdir+0x268>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8012430:	0c3f      	lsrs	r7, r7, #16
	*ptr++ = (BYTE)val; val >>= 8;
 8012432:	0a3a      	lsrs	r2, r7, #8
 8012434:	751f      	strb	r7, [r3, #20]
	*ptr++ = (BYTE)val;
 8012436:	755a      	strb	r2, [r3, #21]
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 8012438:	2110      	movs	r1, #16
					fs->wflag = 1;
 801243a:	2201      	movs	r2, #1
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 801243c:	72d9      	strb	r1, [r3, #11]
					fs->wflag = 1;
 801243e:	70c2      	strb	r2, [r0, #3]
					res = sync_fs(fs);
 8012440:	f7fd f9de 	bl	800f800 <sync_fs>
 8012444:	4605      	mov	r5, r0
 8012446:	e6d0      	b.n	80121ea <f_mkdir+0x1a>
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 8012448:	2507      	movs	r5, #7
			tm = GET_FATTIME();
 801244a:	f7fc fd1b 	bl	800ee84 <get_fattime>
			if (res == FR_OK) {					/* Initialize the new directory table */
 801244e:	e7cb      	b.n	80123e8 <f_mkdir+0x218>
			if (dcl == 1) res = FR_INT_ERR;
 8012450:	2502      	movs	r5, #2
 8012452:	e7fa      	b.n	801244a <f_mkdir+0x27a>
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 8012454:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8012456:	429a      	cmp	r2, r3
 8012458:	f47f af7e 	bne.w	8012358 <f_mkdir+0x188>
 801245c:	2200      	movs	r2, #0
 801245e:	4613      	mov	r3, r2
 8012460:	e77d      	b.n	801235e <f_mkdir+0x18e>
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 8012462:	2501      	movs	r5, #1
 8012464:	e7f1      	b.n	801244a <f_mkdir+0x27a>
		wsect = fs->winsect;	/* Current sector number */
 8012466:	6b26      	ldr	r6, [r4, #48]	; 0x30
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8012468:	7860      	ldrb	r0, [r4, #1]
 801246a:	f104 0934 	add.w	r9, r4, #52	; 0x34
 801246e:	4632      	mov	r2, r6
 8012470:	4649      	mov	r1, r9
 8012472:	2301      	movs	r3, #1
 8012474:	f7fc fcea 	bl	800ee4c <disk_write>
 8012478:	b150      	cbz	r0, 8012490 <f_mkdir+0x2c0>
			tm = GET_FATTIME();
 801247a:	f7fc fd03 	bl	800ee84 <get_fattime>
			res = FR_DISK_ERR;
 801247e:	2501      	movs	r5, #1
 8012480:	e7b2      	b.n	80123e8 <f_mkdir+0x218>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 8012482:	464b      	mov	r3, r9
			*d++ = *s++;
 8012484:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012488:	77da      	strb	r2, [r3, #31]
		} while (--cnt);
 801248a:	4299      	cmp	r1, r3
 801248c:	d1fa      	bne.n	8012484 <f_mkdir+0x2b4>
 801248e:	e75b      	b.n	8012348 <f_mkdir+0x178>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8012490:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8012492:	69e3      	ldr	r3, [r4, #28]
			fs->wflag = 0;
 8012494:	70e5      	strb	r5, [r4, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8012496:	1ab2      	subs	r2, r6, r2
 8012498:	429a      	cmp	r2, r3
 801249a:	f4bf aed1 	bcs.w	8012240 <f_mkdir+0x70>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801249e:	f894 8002 	ldrb.w	r8, [r4, #2]
 80124a2:	f1b8 0f01 	cmp.w	r8, #1
 80124a6:	d801      	bhi.n	80124ac <f_mkdir+0x2dc>
 80124a8:	e6ca      	b.n	8012240 <f_mkdir+0x70>
 80124aa:	69e3      	ldr	r3, [r4, #28]
					disk_write(fs->drv, fs->win, wsect, 1);
 80124ac:	7860      	ldrb	r0, [r4, #1]
					wsect += fs->fsize;
 80124ae:	441e      	add	r6, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80124b0:	f108 38ff 	add.w	r8, r8, #4294967295
					disk_write(fs->drv, fs->win, wsect, 1);
 80124b4:	4632      	mov	r2, r6
 80124b6:	2301      	movs	r3, #1
 80124b8:	4649      	mov	r1, r9
 80124ba:	f7fc fcc7 	bl	800ee4c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80124be:	f1b8 0f01 	cmp.w	r8, #1
 80124c2:	d1f2      	bne.n	80124aa <f_mkdir+0x2da>
 80124c4:	e6bc      	b.n	8012240 <f_mkdir+0x70>
 80124c6:	bf00      	nop

080124c8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80124c8:	b4f0      	push	{r4, r5, r6, r7}
  if(disk.nbr < _VOLUMES)
 80124ca:	4b0f      	ldr	r3, [pc, #60]	; (8012508 <FATFS_LinkDriver+0x40>)
 80124cc:	7a5c      	ldrb	r4, [r3, #9]
 80124ce:	b9c4      	cbnz	r4, 8012502 <FATFS_LinkDriver+0x3a>
    disk.is_initialized[disk.nbr] = 0;
 80124d0:	7a5f      	ldrb	r7, [r3, #9]
    disk.drv[disk.nbr] = drv;
 80124d2:	7a5e      	ldrb	r6, [r3, #9]
    disk.lun[disk.nbr] = lun;
 80124d4:	7a5d      	ldrb	r5, [r3, #9]
 80124d6:	4602      	mov	r2, r0
    disk.drv[disk.nbr] = drv;
 80124d8:	eb03 0686 	add.w	r6, r3, r6, lsl #2
 80124dc:	f004 00ff 	and.w	r0, r4, #255	; 0xff
    DiskNum = disk.nbr++;
 80124e0:	7a5c      	ldrb	r4, [r3, #9]
    disk.drv[disk.nbr] = drv;
 80124e2:	6072      	str	r2, [r6, #4]
    disk.lun[disk.nbr] = lun;
 80124e4:	441d      	add	r5, r3
    DiskNum = disk.nbr++;
 80124e6:	1c62      	adds	r2, r4, #1
    disk.is_initialized[disk.nbr] = 0;
 80124e8:	55d8      	strb	r0, [r3, r7]
    DiskNum = disk.nbr++;
 80124ea:	b2d2      	uxtb	r2, r2
    disk.lun[disk.nbr] = lun;
 80124ec:	7228      	strb	r0, [r5, #8]
    DiskNum = disk.nbr++;
 80124ee:	725a      	strb	r2, [r3, #9]
    path[0] = DiskNum + '0';
 80124f0:	3430      	adds	r4, #48	; 0x30
    path[1] = ':';
 80124f2:	253a      	movs	r5, #58	; 0x3a
    path[2] = '/';
 80124f4:	232f      	movs	r3, #47	; 0x2f
    path[0] = DiskNum + '0';
 80124f6:	700c      	strb	r4, [r1, #0]
    path[1] = ':';
 80124f8:	704d      	strb	r5, [r1, #1]
    path[3] = 0;
 80124fa:	70c8      	strb	r0, [r1, #3]
  return FATFS_LinkDriverEx(drv, path, 0);
}
 80124fc:	bcf0      	pop	{r4, r5, r6, r7}
    path[2] = '/';
 80124fe:	708b      	strb	r3, [r1, #2]
}
 8012500:	4770      	bx	lr
  uint8_t ret = 1;
 8012502:	2001      	movs	r0, #1
}
 8012504:	bcf0      	pop	{r4, r5, r6, r7}
 8012506:	4770      	bx	lr
 8012508:	20002048 	.word	0x20002048

0801250c <FATFS_UnLinkDriver>:
uint8_t FATFS_UnLinkDriverEx(char *path, uint8_t lun)
{
  uint8_t DiskNum = 0;
  uint8_t ret = 1;

  if(disk.nbr >= 1)
 801250c:	4a0d      	ldr	r2, [pc, #52]	; (8012544 <FATFS_UnLinkDriver+0x38>)
 801250e:	7a53      	ldrb	r3, [r2, #9]
 8012510:	b193      	cbz	r3, 8012538 <FATFS_UnLinkDriver+0x2c>
  *         drivers.
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_UnLinkDriver(char *path)
{
 8012512:	b410      	push	{r4}
    DiskNum = path[0] - '0';
 8012514:	7803      	ldrb	r3, [r0, #0]
 8012516:	3b30      	subs	r3, #48	; 0x30
    if(disk.drv[DiskNum] != 0)
 8012518:	b2db      	uxtb	r3, r3
 801251a:	eb02 0483 	add.w	r4, r2, r3, lsl #2
 801251e:	6861      	ldr	r1, [r4, #4]
 8012520:	b161      	cbz	r1, 801253c <FATFS_UnLinkDriver+0x30>
      disk.nbr--;
 8012522:	7a51      	ldrb	r1, [r2, #9]
      disk.lun[DiskNum] = 0;
 8012524:	4413      	add	r3, r2
      disk.nbr--;
 8012526:	3901      	subs	r1, #1
      disk.drv[DiskNum] = 0;
 8012528:	2000      	movs	r0, #0
      disk.nbr--;
 801252a:	b2c9      	uxtb	r1, r1
      disk.lun[DiskNum] = 0;
 801252c:	7218      	strb	r0, [r3, #8]
      disk.nbr--;
 801252e:	7251      	strb	r1, [r2, #9]
      disk.drv[DiskNum] = 0;
 8012530:	6060      	str	r0, [r4, #4]
  return FATFS_UnLinkDriverEx(path, 0);
}
 8012532:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012536:	4770      	bx	lr
  uint8_t ret = 1;
 8012538:	2001      	movs	r0, #1
}
 801253a:	4770      	bx	lr
  uint8_t ret = 1;
 801253c:	2001      	movs	r0, #1
}
 801253e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012542:	4770      	bx	lr
 8012544:	20002048 	.word	0x20002048

08012548 <ff_convert>:
)
{
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8012548:	287f      	cmp	r0, #127	; 0x7f
 801254a:	d912      	bls.n	8012572 <ff_convert+0x2a>
		c = chr;

	} else {
		if (dir) {		/* OEM code to Unicode */
 801254c:	b991      	cbnz	r1, 8012574 <ff_convert+0x2c>
{
 801254e:	b410      	push	{r4}
 8012550:	4b0e      	ldr	r3, [pc, #56]	; (801258c <ff_convert+0x44>)
 8012552:	e001      	b.n	8012558 <ff_convert+0x10>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 8012554:	2980      	cmp	r1, #128	; 0x80
 8012556:	d016      	beq.n	8012586 <ff_convert+0x3e>
				if (chr == Tbl[c]) break;
 8012558:	f833 2b02 	ldrh.w	r2, [r3], #2
 801255c:	4282      	cmp	r2, r0
 801255e:	b28c      	uxth	r4, r1
 8012560:	f101 0101 	add.w	r1, r1, #1
 8012564:	d1f6      	bne.n	8012554 <ff_convert+0xc>
 8012566:	f104 0080 	add.w	r0, r4, #128	; 0x80
 801256a:	b280      	uxth	r0, r0
			c = (c + 0x80) & 0xFF;
		}
	}

	return c;
}
 801256c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012570:	4770      	bx	lr
 8012572:	4770      	bx	lr
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8012574:	28ff      	cmp	r0, #255	; 0xff
 8012576:	d804      	bhi.n	8012582 <ff_convert+0x3a>
 8012578:	4b04      	ldr	r3, [pc, #16]	; (801258c <ff_convert+0x44>)
 801257a:	3880      	subs	r0, #128	; 0x80
 801257c:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 8012580:	4770      	bx	lr
 8012582:	2000      	movs	r0, #0
 8012584:	4770      	bx	lr
 8012586:	2000      	movs	r0, #0
 8012588:	e7f0      	b.n	801256c <ff_convert+0x24>
 801258a:	bf00      	nop
 801258c:	0801b98c 	.word	0x0801b98c

08012590 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8012590:	b470      	push	{r4, r5, r6}
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8012592:	4b24      	ldr	r3, [pc, #144]	; (8012624 <ff_wtoupper+0x94>)
 8012594:	f503 72fa 	add.w	r2, r3, #500	; 0x1f4
 8012598:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 801259c:	bf28      	it	cs
 801259e:	4613      	movcs	r3, r2
 80125a0:	3304      	adds	r3, #4
 80125a2:	e00b      	b.n	80125bc <ff_wtoupper+0x2c>
	for (;;) {
		bc = *p++;								/* Get block base */
		if (!bc || chr < bc) break;
 80125a4:	4288      	cmp	r0, r1
 80125a6:	d30e      	bcc.n	80125c6 <ff_wtoupper+0x36>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 80125a8:	f833 2c02 	ldrh.w	r2, [r3, #-2]
 80125ac:	b2d4      	uxtb	r4, r2
		if (chr < bc + nc) {	/* In the block? */
 80125ae:	1865      	adds	r5, r4, r1
 80125b0:	42a8      	cmp	r0, r5
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 80125b2:	ea4f 2212 	mov.w	r2, r2, lsr #8
		if (chr < bc + nc) {	/* In the block? */
 80125b6:	db08      	blt.n	80125ca <ff_wtoupper+0x3a>
 80125b8:	3304      	adds	r3, #4
			case 7: chr -= 80; break;				/* Shift -80 */
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
			}
			break;
		}
		if (!cmd) p += nc;
 80125ba:	b17a      	cbz	r2, 80125dc <ff_wtoupper+0x4c>
		bc = *p++;								/* Get block base */
 80125bc:	f833 1c04 	ldrh.w	r1, [r3, #-4]
		if (!bc || chr < bc) break;
 80125c0:	461e      	mov	r6, r3
 80125c2:	2900      	cmp	r1, #0
 80125c4:	d1ee      	bne.n	80125a4 <ff_wtoupper+0x14>
	}

	return chr;
}
 80125c6:	bc70      	pop	{r4, r5, r6}
 80125c8:	4770      	bx	lr
			switch (cmd) {
 80125ca:	2a08      	cmp	r2, #8
 80125cc:	d8fb      	bhi.n	80125c6 <ff_wtoupper+0x36>
 80125ce:	e8df f002 	tbb	[pc, r2]
 80125d2:	100c      	.short	0x100c
 80125d4:	1f1c1916 	.word	0x1f1c1916
 80125d8:	2522      	.short	0x2522
 80125da:	08          	.byte	0x08
 80125db:	00          	.byte	0x00
		if (!cmd) p += nc;
 80125dc:	eb06 0344 	add.w	r3, r6, r4, lsl #1
 80125e0:	e7de      	b.n	80125a0 <ff_wtoupper+0x10>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 80125e2:	f5a0 50e3 	sub.w	r0, r0, #7264	; 0x1c60
 80125e6:	b280      	uxth	r0, r0
 80125e8:	e7ed      	b.n	80125c6 <ff_wtoupper+0x36>
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 80125ea:	1a41      	subs	r1, r0, r1
 80125ec:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
 80125f0:	e7e9      	b.n	80125c6 <ff_wtoupper+0x36>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 80125f2:	1a41      	subs	r1, r0, r1
 80125f4:	f001 0301 	and.w	r3, r1, #1
 80125f8:	1ac0      	subs	r0, r0, r3
 80125fa:	b280      	uxth	r0, r0
 80125fc:	e7e3      	b.n	80125c6 <ff_wtoupper+0x36>
			case 2: chr -= 16; break;				/* Shift -16 */
 80125fe:	3810      	subs	r0, #16
 8012600:	b280      	uxth	r0, r0
 8012602:	e7e0      	b.n	80125c6 <ff_wtoupper+0x36>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8012604:	3820      	subs	r0, #32
 8012606:	b280      	uxth	r0, r0
 8012608:	e7dd      	b.n	80125c6 <ff_wtoupper+0x36>
			case 4:	chr -= 48; break;				/* Shift -48 */
 801260a:	3830      	subs	r0, #48	; 0x30
 801260c:	b280      	uxth	r0, r0
 801260e:	e7da      	b.n	80125c6 <ff_wtoupper+0x36>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8012610:	381a      	subs	r0, #26
 8012612:	b280      	uxth	r0, r0
 8012614:	e7d7      	b.n	80125c6 <ff_wtoupper+0x36>
			case 6:	chr += 8; break;				/* Shift +8 */
 8012616:	3008      	adds	r0, #8
 8012618:	b280      	uxth	r0, r0
 801261a:	e7d4      	b.n	80125c6 <ff_wtoupper+0x36>
			case 7: chr -= 80; break;				/* Shift -80 */
 801261c:	3850      	subs	r0, #80	; 0x50
 801261e:	b280      	uxth	r0, r0
 8012620:	e7d1      	b.n	80125c6 <ff_wtoupper+0x36>
 8012622:	bf00      	nop
 8012624:	0801ba8c 	.word	0x0801ba8c

08012628 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8012628:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 801262a:	f001 fb0d 	bl	8013c48 <vTaskStartScheduler>
  
  return osOK;
}
 801262e:	2000      	movs	r0, #0
 8012630:	bd08      	pop	{r3, pc}
 8012632:	bf00      	nop

08012634 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8012634:	b530      	push	{r4, r5, lr}

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8012636:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
{
 801263a:	b085      	sub	sp, #20
  if (priority != osPriorityError) {
 801263c:	2c84      	cmp	r4, #132	; 0x84
{
 801263e:	4602      	mov	r2, r0
    fpriority += (priority - osPriorityIdle);
 8012640:	bf14      	ite	ne
 8012642:	3403      	addne	r4, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8012644:	2400      	moveq	r4, #0
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8012646:	ad03      	add	r5, sp, #12
{
 8012648:	460b      	mov	r3, r1
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 801264a:	6840      	ldr	r0, [r0, #4]
 801264c:	6811      	ldr	r1, [r2, #0]
 801264e:	8a12      	ldrh	r2, [r2, #16]
 8012650:	e9cd 4500 	strd	r4, r5, [sp]
 8012654:	f001 f918 	bl	8013888 <xTaskCreate>
 8012658:	2801      	cmp	r0, #1
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 801265a:	bf0c      	ite	eq
 801265c:	9803      	ldreq	r0, [sp, #12]
    return NULL;
 801265e:	2000      	movne	r0, #0
}
 8012660:	b005      	add	sp, #20
 8012662:	bd30      	pop	{r4, r5, pc}

08012664 <osSemaphoreCreate>:
#endif    
  }
#else  // configSUPPORT_STATIC_ALLOCATION == 0  && configSUPPORT_DYNAMIC_ALLOCATION == 1
  osSemaphoreId sema;
 
  if (count == 1) {
 8012664:	2901      	cmp	r1, #1
{ 
 8012666:	4608      	mov	r0, r1
  if (count == 1) {
 8012668:	d001      	beq.n	801266e <osSemaphoreCreate+0xa>
    vSemaphoreCreateBinary(sema);
    return sema;
  }
  else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
    return xSemaphoreCreateCounting(count, count);
 801266a:	f000 ba6d 	b.w	8012b48 <xQueueCreateCountingSemaphore>
{ 
 801266e:	b510      	push	{r4, lr}
    vSemaphoreCreateBinary(sema);
 8012670:	2203      	movs	r2, #3
 8012672:	2100      	movs	r1, #0
 8012674:	f000 fa20 	bl	8012ab8 <xQueueGenericCreate>
 8012678:	4604      	mov	r4, r0
 801267a:	b120      	cbz	r0, 8012686 <osSemaphoreCreate+0x22>
 801267c:	2300      	movs	r3, #0
 801267e:	461a      	mov	r2, r3
 8012680:	4619      	mov	r1, r3
 8012682:	f000 faa5 	bl	8012bd0 <xQueueGenericSend>
#else
    return NULL;
#endif
  }
#endif
}
 8012686:	4620      	mov	r0, r4
 8012688:	bd10      	pop	{r4, pc}
 801268a:	bf00      	nop

0801268c <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 801268c:	b510      	push	{r4, lr}
 801268e:	b082      	sub	sp, #8
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8012690:	2400      	movs	r4, #0
 8012692:	9401      	str	r4, [sp, #4]
  
  
  if (semaphore_id == NULL) {
 8012694:	b300      	cbz	r0, 80126d8 <osSemaphoreWait+0x4c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012696:	f3ef 8305 	mrs	r3, IPSR
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 801269a:	b933      	cbnz	r3, 80126aa <osSemaphoreWait+0x1e>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
      return osErrorOS;
    }
	portEND_SWITCHING_ISR(taskWoken);
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 801269c:	f000 fe60 	bl	8013360 <xQueueSemaphoreTake>
 80126a0:	2801      	cmp	r0, #1
 80126a2:	d116      	bne.n	80126d2 <osSemaphoreWait+0x46>
    return osErrorOS;
  }
  
  return osOK;
 80126a4:	2000      	movs	r0, #0
}
 80126a6:	b002      	add	sp, #8
 80126a8:	bd10      	pop	{r4, pc}
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80126aa:	aa01      	add	r2, sp, #4
 80126ac:	4621      	mov	r1, r4
 80126ae:	f000 ffe7 	bl	8013680 <xQueueReceiveFromISR>
 80126b2:	2801      	cmp	r0, #1
 80126b4:	d10d      	bne.n	80126d2 <osSemaphoreWait+0x46>
	portEND_SWITCHING_ISR(taskWoken);
 80126b6:	9b01      	ldr	r3, [sp, #4]
 80126b8:	2b00      	cmp	r3, #0
 80126ba:	d0f3      	beq.n	80126a4 <osSemaphoreWait+0x18>
 80126bc:	4b08      	ldr	r3, [pc, #32]	; (80126e0 <osSemaphoreWait+0x54>)
 80126be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80126c2:	601a      	str	r2, [r3, #0]
 80126c4:	f3bf 8f4f 	dsb	sy
 80126c8:	f3bf 8f6f 	isb	sy
  return osOK;
 80126cc:	4620      	mov	r0, r4
}
 80126ce:	b002      	add	sp, #8
 80126d0:	bd10      	pop	{r4, pc}
    return osErrorOS;
 80126d2:	20ff      	movs	r0, #255	; 0xff
}
 80126d4:	b002      	add	sp, #8
 80126d6:	bd10      	pop	{r4, pc}
    return osErrorParameter;
 80126d8:	2080      	movs	r0, #128	; 0x80
}
 80126da:	b002      	add	sp, #8
 80126dc:	bd10      	pop	{r4, pc}
 80126de:	bf00      	nop
 80126e0:	e000ed04 	.word	0xe000ed04

080126e4 <osSemaphoreRelease>:
 80126e4:	b510      	push	{r4, lr}
 80126e6:	b082      	sub	sp, #8
 80126e8:	2400      	movs	r4, #0
 80126ea:	9401      	str	r4, [sp, #4]
 80126ec:	f3ef 8305 	mrs	r3, IPSR
 80126f0:	b18b      	cbz	r3, 8012716 <osSemaphoreRelease+0x32>
 80126f2:	a901      	add	r1, sp, #4
 80126f4:	f000 fc58 	bl	8012fa8 <xQueueGiveFromISR>
 80126f8:	2801      	cmp	r0, #1
 80126fa:	d112      	bne.n	8012722 <osSemaphoreRelease+0x3e>
 80126fc:	9b01      	ldr	r3, [sp, #4]
 80126fe:	b19b      	cbz	r3, 8012728 <osSemaphoreRelease+0x44>
 8012700:	4b0b      	ldr	r3, [pc, #44]	; (8012730 <osSemaphoreRelease+0x4c>)
 8012702:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012706:	601a      	str	r2, [r3, #0]
 8012708:	f3bf 8f4f 	dsb	sy
 801270c:	f3bf 8f6f 	isb	sy
 8012710:	4620      	mov	r0, r4
 8012712:	b002      	add	sp, #8
 8012714:	bd10      	pop	{r4, pc}
 8012716:	461a      	mov	r2, r3
 8012718:	4619      	mov	r1, r3
 801271a:	f000 fa59 	bl	8012bd0 <xQueueGenericSend>
 801271e:	2801      	cmp	r0, #1
 8012720:	d002      	beq.n	8012728 <osSemaphoreRelease+0x44>
 8012722:	20ff      	movs	r0, #255	; 0xff
 8012724:	b002      	add	sp, #8
 8012726:	bd10      	pop	{r4, pc}
 8012728:	2000      	movs	r0, #0
 801272a:	b002      	add	sp, #8
 801272c:	bd10      	pop	{r4, pc}
 801272e:	bf00      	nop
 8012730:	e000ed04 	.word	0xe000ed04

08012734 <osPoolCreate>:
* @param  pool_def      memory pool definition referenced with \ref osPool.
* @retval  memory pool ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osPoolCreate shall be consistent in every CMSIS-RTOS.
*/
osPoolId osPoolCreate (const osPoolDef_t *pool_def)
{
 8012734:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012736:	4606      	mov	r6, r0
 8012738:	b083      	sub	sp, #12
  osPoolId thePool;
  int itemSize = 4 * ((pool_def->item_sz + 3) / 4);
  uint32_t i;
  
  /* First have to allocate memory for the pool control block. */
 thePool = pvPortMalloc(sizeof(os_pool_cb_t));
 801273a:	2014      	movs	r0, #20
  int itemSize = 4 * ((pool_def->item_sz + 3) / 4);
 801273c:	6874      	ldr	r4, [r6, #4]
 thePool = pvPortMalloc(sizeof(os_pool_cb_t));
 801273e:	f002 fb83 	bl	8014e48 <pvPortMalloc>

  
  if (thePool) {
 8012742:	4605      	mov	r5, r0
 8012744:	b1e8      	cbz	r0, 8012782 <osPoolCreate+0x4e>
  int itemSize = 4 * ((pool_def->item_sz + 3) / 4);
 8012746:	3403      	adds	r4, #3
    thePool->pool_sz = pool_def->pool_sz;
 8012748:	6830      	ldr	r0, [r6, #0]
 801274a:	60a8      	str	r0, [r5, #8]
  int itemSize = 4 * ((pool_def->item_sz + 3) / 4);
 801274c:	f024 0703 	bic.w	r7, r4, #3
    thePool->item_sz = itemSize;
    thePool->currentIndex = 0;
 8012750:	2400      	movs	r4, #0
 8012752:	e9c5 7403 	strd	r7, r4, [r5, #12]
    
    /* Memory for markers */
    thePool->markers = pvPortMalloc(pool_def->pool_sz);
 8012756:	f002 fb77 	bl	8014e48 <pvPortMalloc>
 801275a:	6068      	str	r0, [r5, #4]
   
    if (thePool->markers) {
 801275c:	b1a0      	cbz	r0, 8012788 <osPoolCreate+0x54>
      /* Now allocate the pool itself. */
     thePool->pool = pvPortMalloc(pool_def->pool_sz * itemSize);
 801275e:	6830      	ldr	r0, [r6, #0]
 8012760:	fb00 f007 	mul.w	r0, r0, r7
 8012764:	f002 fb70 	bl	8014e48 <pvPortMalloc>
 8012768:	4607      	mov	r7, r0
 801276a:	6028      	str	r0, [r5, #0]
      
      if (thePool->pool) {
 801276c:	b198      	cbz	r0, 8012796 <osPoolCreate+0x62>
        for (i = 0; i < pool_def->pool_sz; i++) {
 801276e:	6833      	ldr	r3, [r6, #0]
 8012770:	b13b      	cbz	r3, 8012782 <osPoolCreate+0x4e>
 8012772:	4623      	mov	r3, r4
          thePool->markers[i] = 0;
 8012774:	4621      	mov	r1, r4
 8012776:	686a      	ldr	r2, [r5, #4]
 8012778:	54d1      	strb	r1, [r2, r3]
        for (i = 0; i < pool_def->pool_sz; i++) {
 801277a:	6832      	ldr	r2, [r6, #0]
 801277c:	3301      	adds	r3, #1
 801277e:	429a      	cmp	r2, r3
 8012780:	d8f9      	bhi.n	8012776 <osPoolCreate+0x42>
  return thePool;
 
#else
  return NULL;
#endif
}
 8012782:	4628      	mov	r0, r5
 8012784:	b003      	add	sp, #12
 8012786:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012788:	9001      	str	r0, [sp, #4]
      vPortFree(thePool);
 801278a:	4628      	mov	r0, r5
 801278c:	f002 fbfe 	bl	8014f8c <vPortFree>
      thePool = NULL;
 8012790:	9b01      	ldr	r3, [sp, #4]
 8012792:	461d      	mov	r5, r3
  return thePool;
 8012794:	e7f5      	b.n	8012782 <osPoolCreate+0x4e>
        vPortFree(thePool->markers);
 8012796:	6868      	ldr	r0, [r5, #4]
 8012798:	f002 fbf8 	bl	8014f8c <vPortFree>
        vPortFree(thePool);
 801279c:	4628      	mov	r0, r5
 801279e:	f002 fbf5 	bl	8014f8c <vPortFree>
        thePool = NULL;
 80127a2:	463d      	mov	r5, r7
 80127a4:	e7ed      	b.n	8012782 <osPoolCreate+0x4e>
 80127a6:	bf00      	nop

080127a8 <osPoolAlloc>:
* @param pool_id       memory pool ID obtain referenced with \ref osPoolCreate.
* @retval  address of the allocated memory block or NULL in case of no memory available.
* @note   MUST REMAIN UNCHANGED: \b osPoolAlloc shall be consistent in every CMSIS-RTOS.
*/
void *osPoolAlloc (osPoolId pool_id)
{
 80127a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80127ac:	4680      	mov	r8, r0
 80127ae:	b083      	sub	sp, #12
 80127b0:	f3ef 8905 	mrs	r9, IPSR
  int dummy = 0;
  void *p = NULL;
  uint32_t i;
  uint32_t index;
  
  if (inHandlerMode()) {
 80127b4:	f1b9 0f00 	cmp.w	r9, #0
 80127b8:	d03b      	beq.n	8012832 <osPoolAlloc+0x8a>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80127ba:	f3ef 8911 	mrs	r9, BASEPRI
 80127be:	f04f 0320 	mov.w	r3, #32
 80127c2:	f383 8811 	msr	BASEPRI, r3
 80127c6:	f3bf 8f6f 	isb	sy
 80127ca:	f3bf 8f4f 	dsb	sy
  }
  else {
    vPortEnterCritical();
  }
  
  for (i = 0; i < pool_id->pool_sz; i++) {
 80127ce:	f8d8 0008 	ldr.w	r0, [r8, #8]
 80127d2:	b1d0      	cbz	r0, 801280a <osPoolAlloc+0x62>
    index = (pool_id->currentIndex + i) % pool_id->pool_sz;
 80127d4:	f8d8 2010 	ldr.w	r2, [r8, #16]
    
    if (pool_id->markers[index] == 0) {
 80127d8:	f8d8 4004 	ldr.w	r4, [r8, #4]
 80127dc:	1887      	adds	r7, r0, r2
 80127de:	e001      	b.n	80127e4 <osPoolAlloc+0x3c>
  for (i = 0; i < pool_id->pool_sz; i++) {
 80127e0:	4297      	cmp	r7, r2
 80127e2:	d01a      	beq.n	801281a <osPoolAlloc+0x72>
    index = (pool_id->currentIndex + i) % pool_id->pool_sz;
 80127e4:	fbb2 f3f0 	udiv	r3, r2, r0
 80127e8:	fb00 2313 	mls	r3, r0, r3, r2
    if (pool_id->markers[index] == 0) {
 80127ec:	18e6      	adds	r6, r4, r3
 80127ee:	5ce5      	ldrb	r5, [r4, r3]
 80127f0:	3201      	adds	r2, #1
 80127f2:	2d00      	cmp	r5, #0
 80127f4:	d1f4      	bne.n	80127e0 <osPoolAlloc+0x38>
      pool_id->markers[index] = 1;
 80127f6:	2201      	movs	r2, #1
 80127f8:	7032      	strb	r2, [r6, #0]
      p = (void *)((uint32_t)(pool_id->pool) + (index * pool_id->item_sz));
 80127fa:	f8d8 200c 	ldr.w	r2, [r8, #12]
 80127fe:	f8d8 0000 	ldr.w	r0, [r8]
      pool_id->currentIndex = index;
 8012802:	f8c8 3010 	str.w	r3, [r8, #16]
      p = (void *)((uint32_t)(pool_id->pool) + (index * pool_id->item_sz));
 8012806:	fb02 0003 	mla	r0, r2, r3, r0
 801280a:	f3ef 8305 	mrs	r3, IPSR
      break;
    }
  }
  
  if (inHandlerMode()) {
 801280e:	b14b      	cbz	r3, 8012824 <osPoolAlloc+0x7c>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8012810:	f389 8811 	msr	BASEPRI, r9
  else {
    vPortExitCritical();
  }
  
  return p;
}
 8012814:	b003      	add	sp, #12
 8012816:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  void *p = NULL;
 801281a:	2000      	movs	r0, #0
 801281c:	f3ef 8305 	mrs	r3, IPSR
  if (inHandlerMode()) {
 8012820:	2b00      	cmp	r3, #0
 8012822:	d1f5      	bne.n	8012810 <osPoolAlloc+0x68>
 8012824:	9001      	str	r0, [sp, #4]
    vPortExitCritical();
 8012826:	f002 f9cf 	bl	8014bc8 <vPortExitCritical>
 801282a:	9801      	ldr	r0, [sp, #4]
}
 801282c:	b003      	add	sp, #12
 801282e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    vPortEnterCritical();
 8012832:	f002 f9a7 	bl	8014b84 <vPortEnterCritical>
 8012836:	e7ca      	b.n	80127ce <osPoolAlloc+0x26>

08012838 <osPoolFree>:
*/
osStatus osPoolFree (osPoolId pool_id, void *block)
{
  uint32_t index;
  
  if (pool_id == NULL) {
 8012838:	b188      	cbz	r0, 801285e <osPoolFree+0x26>
    return osErrorParameter;
  }
  
  if (block == NULL) {
 801283a:	b181      	cbz	r1, 801285e <osPoolFree+0x26>
    return osErrorParameter;
  }
  
  if (block < pool_id->pool) {
 801283c:	6802      	ldr	r2, [r0, #0]
 801283e:	428a      	cmp	r2, r1
 8012840:	d80d      	bhi.n	801285e <osPoolFree+0x26>
    return osErrorParameter;
  }
  
  index = (uint32_t)block - (uint32_t)(pool_id->pool);
  if (index % pool_id->item_sz) {
 8012842:	68c3      	ldr	r3, [r0, #12]
  index = (uint32_t)block - (uint32_t)(pool_id->pool);
 8012844:	1a89      	subs	r1, r1, r2
  if (index % pool_id->item_sz) {
 8012846:	fbb1 f2f3 	udiv	r2, r1, r3
 801284a:	fb03 1112 	mls	r1, r3, r2, r1
 801284e:	b931      	cbnz	r1, 801285e <osPoolFree+0x26>
    return osErrorParameter;
  }
  index = index / pool_id->item_sz;
  if (index >= pool_id->pool_sz) {
 8012850:	6883      	ldr	r3, [r0, #8]
 8012852:	4293      	cmp	r3, r2
 8012854:	d903      	bls.n	801285e <osPoolFree+0x26>
    return osErrorParameter;
  }
  
  pool_id->markers[index] = 0;
 8012856:	6843      	ldr	r3, [r0, #4]
  
  return osOK;
}
 8012858:	4608      	mov	r0, r1
  pool_id->markers[index] = 0;
 801285a:	5499      	strb	r1, [r3, r2]
}
 801285c:	4770      	bx	lr
    return osErrorParameter;
 801285e:	2180      	movs	r1, #128	; 0x80
}
 8012860:	4608      	mov	r0, r1
 8012862:	4770      	bx	lr

08012864 <osMessageCreate>:
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8012864:	e9d0 0100 	ldrd	r0, r1, [r0]
 8012868:	2200      	movs	r2, #0
 801286a:	f000 b925 	b.w	8012ab8 <xQueueGenericCreate>
 801286e:	bf00      	nop

08012870 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8012870:	b510      	push	{r4, lr}
 8012872:	b084      	sub	sp, #16
  portBASE_TYPE taskWoken = pdFALSE;
 8012874:	2400      	movs	r4, #0
{
 8012876:	9101      	str	r1, [sp, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8012878:	9403      	str	r4, [sp, #12]
 801287a:	f3ef 8305 	mrs	r3, IPSR
  ticks = millisec / portTICK_PERIOD_MS;
  if (ticks == 0) {
    ticks = 1;
  }
  
  if (inHandlerMode()) {
 801287e:	b15b      	cbz	r3, 8012898 <osMessagePut+0x28>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8012880:	4623      	mov	r3, r4
 8012882:	aa03      	add	r2, sp, #12
 8012884:	a901      	add	r1, sp, #4
 8012886:	f000 fb29 	bl	8012edc <xQueueGenericSendFromISR>
 801288a:	2801      	cmp	r0, #1
 801288c:	d10c      	bne.n	80128a8 <osMessagePut+0x38>
      return osErrorOS;
    }
    portEND_SWITCHING_ISR(taskWoken);
 801288e:	9b03      	ldr	r3, [sp, #12]
 8012890:	b96b      	cbnz	r3, 80128ae <osMessagePut+0x3e>
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
      return osErrorOS;
    }
  }
  
  return osOK;
 8012892:	2000      	movs	r0, #0
}
 8012894:	b004      	add	sp, #16
 8012896:	bd10      	pop	{r4, pc}
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8012898:	2a01      	cmp	r2, #1
 801289a:	bf38      	it	cc
 801289c:	2201      	movcc	r2, #1
 801289e:	a901      	add	r1, sp, #4
 80128a0:	f000 f996 	bl	8012bd0 <xQueueGenericSend>
 80128a4:	2801      	cmp	r0, #1
 80128a6:	d0f4      	beq.n	8012892 <osMessagePut+0x22>
      return osErrorOS;
 80128a8:	20ff      	movs	r0, #255	; 0xff
}
 80128aa:	b004      	add	sp, #16
 80128ac:	bd10      	pop	{r4, pc}
    portEND_SWITCHING_ISR(taskWoken);
 80128ae:	4b05      	ldr	r3, [pc, #20]	; (80128c4 <osMessagePut+0x54>)
 80128b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80128b4:	601a      	str	r2, [r3, #0]
 80128b6:	f3bf 8f4f 	dsb	sy
 80128ba:	f3bf 8f6f 	isb	sy
  return osOK;
 80128be:	4620      	mov	r0, r4
}
 80128c0:	b004      	add	sp, #16
 80128c2:	bd10      	pop	{r4, pc}
 80128c4:	e000ed04 	.word	0xe000ed04

080128c8 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 80128c8:	b530      	push	{r4, r5, lr}
 80128ca:	b085      	sub	sp, #20
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
  event.value.v = 0;
 80128cc:	2300      	movs	r3, #0
  event.def.message_id = queue_id;
 80128ce:	9103      	str	r1, [sp, #12]
{
 80128d0:	4604      	mov	r4, r0
  event.value.v = 0;
 80128d2:	9302      	str	r3, [sp, #8]
  
  if (queue_id == NULL) {
 80128d4:	b361      	cbz	r1, 8012930 <osMessageGet+0x68>
    event.status = osErrorParameter;
    return event;
  }
  
  taskWoken = pdFALSE;
 80128d6:	9300      	str	r3, [sp, #0]
 80128d8:	f3ef 8305 	mrs	r3, IPSR
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 80128dc:	b993      	cbnz	r3, 8012904 <osMessageGet+0x3c>
      event.status = osOK;
    }
    portEND_SWITCHING_ISR(taskWoken);
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 80128de:	4608      	mov	r0, r1
 80128e0:	a902      	add	r1, sp, #8
 80128e2:	4615      	mov	r5, r2
 80128e4:	f000 fbb8 	bl	8013058 <xQueueReceive>
 80128e8:	2801      	cmp	r0, #1
 80128ea:	d02b      	beq.n	8012944 <osMessageGet+0x7c>
      /* We have mail */
      event.status = osEventMessage;
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 80128ec:	2d00      	cmp	r5, #0
 80128ee:	bf18      	it	ne
 80128f0:	2540      	movne	r5, #64	; 0x40
 80128f2:	9501      	str	r5, [sp, #4]
    }
  }
  
  return event;
 80128f4:	ab04      	add	r3, sp, #16
 80128f6:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 80128fa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80128fe:	4620      	mov	r0, r4
 8012900:	b005      	add	sp, #20
 8012902:	bd30      	pop	{r4, r5, pc}
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8012904:	466a      	mov	r2, sp
 8012906:	4608      	mov	r0, r1
 8012908:	a902      	add	r1, sp, #8
 801290a:	f000 feb9 	bl	8013680 <xQueueReceiveFromISR>
    portEND_SWITCHING_ISR(taskWoken);
 801290e:	9b00      	ldr	r3, [sp, #0]
      event.status = osOK;
 8012910:	2801      	cmp	r0, #1
 8012912:	bf0c      	ite	eq
 8012914:	2210      	moveq	r2, #16
 8012916:	2200      	movne	r2, #0
 8012918:	9201      	str	r2, [sp, #4]
    portEND_SWITCHING_ISR(taskWoken);
 801291a:	2b00      	cmp	r3, #0
 801291c:	d0ea      	beq.n	80128f4 <osMessageGet+0x2c>
 801291e:	4b0b      	ldr	r3, [pc, #44]	; (801294c <osMessageGet+0x84>)
 8012920:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012924:	601a      	str	r2, [r3, #0]
 8012926:	f3bf 8f4f 	dsb	sy
 801292a:	f3bf 8f6f 	isb	sy
 801292e:	e7e1      	b.n	80128f4 <osMessageGet+0x2c>
    event.status = osErrorParameter;
 8012930:	2380      	movs	r3, #128	; 0x80
 8012932:	9301      	str	r3, [sp, #4]
    return event;
 8012934:	ab04      	add	r3, sp, #16
 8012936:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 801293a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 801293e:	4620      	mov	r0, r4
 8012940:	b005      	add	sp, #20
 8012942:	bd30      	pop	{r4, r5, pc}
      event.status = osEventMessage;
 8012944:	2310      	movs	r3, #16
 8012946:	9301      	str	r3, [sp, #4]
 8012948:	e7d4      	b.n	80128f4 <osMessageGet+0x2c>
 801294a:	bf00      	nop
 801294c:	e000ed04 	.word	0xe000ed04

08012950 <osSystickHandler>:
* @brief  Handles the tick increment
* @param  none.
* @retval none.
*/
void osSystickHandler(void)
{
 8012950:	b508      	push	{r3, lr}

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8012952:	f001 fdc1 	bl	80144d8 <xTaskGetSchedulerState>
 8012956:	2801      	cmp	r0, #1
 8012958:	d100      	bne.n	801295c <osSystickHandler+0xc>
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  }
#endif  /* INCLUDE_xTaskGetSchedulerState */  
}
 801295a:	bd08      	pop	{r3, pc}
 801295c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    xPortSysTickHandler();
 8012960:	f002 b978 	b.w	8014c54 <xPortSysTickHandler>

08012964 <osThreadSuspend>:
* @brief  Suspend execution of a thread.
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osThreadSuspend (osThreadId thread_id)
{
 8012964:	b508      	push	{r3, lr}
#if (INCLUDE_vTaskSuspend == 1)
    vTaskSuspend(thread_id);
 8012966:	f001 fbf3 	bl	8014150 <vTaskSuspend>
  
  return osOK;
#else
  return osErrorResource;
#endif
}
 801296a:	2000      	movs	r0, #0
 801296c:	bd08      	pop	{r3, pc}
 801296e:	bf00      	nop

08012970 <osThreadResume>:
* @brief  Resume execution of a suspended thread.
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osThreadResume (osThreadId thread_id)
{
 8012970:	b508      	push	{r3, lr}
 8012972:	f3ef 8305 	mrs	r3, IPSR
#if (INCLUDE_vTaskSuspend == 1)  
  if(inHandlerMode())
 8012976:	b12b      	cbz	r3, 8012984 <osThreadResume+0x14>
  {
    if (xTaskResumeFromISR(thread_id) == pdTRUE)
 8012978:	f001 f90c 	bl	8013b94 <xTaskResumeFromISR>
 801297c:	2801      	cmp	r0, #1
 801297e:	d005      	beq.n	801298c <osThreadResume+0x1c>
  }
  return osOK;
#else
  return osErrorResource;
#endif
}
 8012980:	2000      	movs	r0, #0
 8012982:	bd08      	pop	{r3, pc}
    vTaskResume(thread_id);
 8012984:	f001 f8b6 	bl	8013af4 <vTaskResume>
}
 8012988:	2000      	movs	r0, #0
 801298a:	bd08      	pop	{r3, pc}
      portYIELD_FROM_ISR(pdTRUE);
 801298c:	4b04      	ldr	r3, [pc, #16]	; (80129a0 <osThreadResume+0x30>)
 801298e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012992:	601a      	str	r2, [r3, #0]
 8012994:	f3bf 8f4f 	dsb	sy
 8012998:	f3bf 8f6f 	isb	sy
}
 801299c:	2000      	movs	r0, #0
 801299e:	bd08      	pop	{r3, pc}
 80129a0:	e000ed04 	.word	0xe000ed04

080129a4 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80129a4:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80129a8:	f04f 31ff 	mov.w	r1, #4294967295
	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80129ac:	2200      	movs	r2, #0
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80129ae:	e9c0 3303 	strd	r3, r3, [r0, #12]
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80129b2:	6081      	str	r1, [r0, #8]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80129b4:	6002      	str	r2, [r0, #0]
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80129b6:	6043      	str	r3, [r0, #4]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80129b8:	4770      	bx	lr
 80129ba:	bf00      	nop

080129bc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80129bc:	2300      	movs	r3, #0
 80129be:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80129c0:	4770      	bx	lr
 80129c2:	bf00      	nop

080129c4 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 80129c4:	6843      	ldr	r3, [r0, #4]
	pxIndex->pxPrevious = pxNewListItem;

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 80129c6:	6802      	ldr	r2, [r0, #0]
{
 80129c8:	b410      	push	{r4}
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80129ca:	689c      	ldr	r4, [r3, #8]
 80129cc:	608c      	str	r4, [r1, #8]
	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80129ce:	689c      	ldr	r4, [r3, #8]
	pxNewListItem->pxNext = pxIndex;
 80129d0:	604b      	str	r3, [r1, #4]
	( pxList->uxNumberOfItems )++;
 80129d2:	3201      	adds	r2, #1
	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80129d4:	6061      	str	r1, [r4, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80129d6:	6099      	str	r1, [r3, #8]
}
 80129d8:	f85d 4b04 	ldr.w	r4, [sp], #4
	pxNewListItem->pxContainer = pxList;
 80129dc:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 80129de:	6002      	str	r2, [r0, #0]
}
 80129e0:	4770      	bx	lr
 80129e2:	bf00      	nop

080129e4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80129e4:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80129e6:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80129e8:	1c6b      	adds	r3, r5, #1
 80129ea:	d010      	beq.n	8012a0e <vListInsert+0x2a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80129ec:	f100 0308 	add.w	r3, r0, #8
 80129f0:	461c      	mov	r4, r3
 80129f2:	685b      	ldr	r3, [r3, #4]
 80129f4:	681a      	ldr	r2, [r3, #0]
 80129f6:	42aa      	cmp	r2, r5
 80129f8:	d9fa      	bls.n	80129f0 <vListInsert+0xc>

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 80129fa:	6802      	ldr	r2, [r0, #0]
	pxNewListItem->pxNext = pxIterator->pxNext;
 80129fc:	604b      	str	r3, [r1, #4]
	( pxList->uxNumberOfItems )++;
 80129fe:	3201      	adds	r2, #1
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8012a00:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8012a02:	608c      	str	r4, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8012a04:	6061      	str	r1, [r4, #4]
	pxNewListItem->pxContainer = pxList;
 8012a06:	6108      	str	r0, [r1, #16]
}
 8012a08:	bc30      	pop	{r4, r5}
	( pxList->uxNumberOfItems )++;
 8012a0a:	6002      	str	r2, [r0, #0]
}
 8012a0c:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
 8012a0e:	6904      	ldr	r4, [r0, #16]
 8012a10:	6863      	ldr	r3, [r4, #4]
 8012a12:	e7f2      	b.n	80129fa <vListInsert+0x16>

08012a14 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8012a14:	6903      	ldr	r3, [r0, #16]
{
 8012a16:	b410      	push	{r4}

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8012a18:	e9d0 1201 	ldrd	r1, r2, [r0, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8012a1c:	685c      	ldr	r4, [r3, #4]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8012a1e:	608a      	str	r2, [r1, #8]
	if( pxList->pxIndex == pxItemToRemove )
 8012a20:	4284      	cmp	r4, r0
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8012a22:	6051      	str	r1, [r2, #4]
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8012a24:	bf08      	it	eq
 8012a26:	605a      	streq	r2, [r3, #4]
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
	( pxList->uxNumberOfItems )--;
 8012a28:	681a      	ldr	r2, [r3, #0]

	return pxList->uxNumberOfItems;
}
 8012a2a:	f85d 4b04 	ldr.w	r4, [sp], #4
	pxItemToRemove->pxContainer = NULL;
 8012a2e:	2100      	movs	r1, #0
	( pxList->uxNumberOfItems )--;
 8012a30:	3a01      	subs	r2, #1
	pxItemToRemove->pxContainer = NULL;
 8012a32:	6101      	str	r1, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8012a34:	601a      	str	r2, [r3, #0]
	return pxList->uxNumberOfItems;
 8012a36:	6818      	ldr	r0, [r3, #0]
}
 8012a38:	4770      	bx	lr
 8012a3a:	bf00      	nop

08012a3c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8012a3c:	b570      	push	{r4, r5, r6, lr}
 8012a3e:	4604      	mov	r4, r0

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8012a40:	6c00      	ldr	r0, [r0, #64]	; 0x40
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8012a42:	6ba6      	ldr	r6, [r4, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8012a44:	b920      	cbnz	r0, 8012a50 <prvCopyDataToQueue+0x14>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8012a46:	6825      	ldr	r5, [r4, #0]
 8012a48:	b35d      	cbz	r5, 8012aa2 <prvCopyDataToQueue+0x66>
 8012a4a:	3601      	adds	r6, #1
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8012a4c:	63a6      	str	r6, [r4, #56]	; 0x38

	return xReturn;
}
 8012a4e:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 8012a50:	4615      	mov	r5, r2
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8012a52:	4602      	mov	r2, r0
	else if( xPosition == queueSEND_TO_BACK )
 8012a54:	b985      	cbnz	r5, 8012a78 <prvCopyDataToQueue+0x3c>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8012a56:	6860      	ldr	r0, [r4, #4]
 8012a58:	f004 fe94 	bl	8017784 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8012a5c:	6863      	ldr	r3, [r4, #4]
 8012a5e:	6c21      	ldr	r1, [r4, #64]	; 0x40
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8012a60:	68a2      	ldr	r2, [r4, #8]
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8012a62:	440b      	add	r3, r1
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8012a64:	4293      	cmp	r3, r2
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8012a66:	6063      	str	r3, [r4, #4]
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8012a68:	f106 0601 	add.w	r6, r6, #1
 8012a6c:	bf24      	itt	cs
 8012a6e:	6823      	ldrcs	r3, [r4, #0]
 8012a70:	6063      	strcs	r3, [r4, #4]
BaseType_t xReturn = pdFALSE;
 8012a72:	4628      	mov	r0, r5
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8012a74:	63a6      	str	r6, [r4, #56]	; 0x38
}
 8012a76:	bd70      	pop	{r4, r5, r6, pc}
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8012a78:	68e0      	ldr	r0, [r4, #12]
 8012a7a:	f004 fe83 	bl	8017784 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8012a7e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8012a80:	68e3      	ldr	r3, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8012a82:	6821      	ldr	r1, [r4, #0]
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8012a84:	1a9b      	subs	r3, r3, r2
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8012a86:	428b      	cmp	r3, r1
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8012a88:	60e3      	str	r3, [r4, #12]
 8012a8a:	f1c2 0200 	rsb	r2, r2, #0
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8012a8e:	d202      	bcs.n	8012a96 <prvCopyDataToQueue+0x5a>
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8012a90:	68a3      	ldr	r3, [r4, #8]
 8012a92:	441a      	add	r2, r3
 8012a94:	60e2      	str	r2, [r4, #12]
		if( xPosition == queueOVERWRITE )
 8012a96:	2d02      	cmp	r5, #2
 8012a98:	d008      	beq.n	8012aac <prvCopyDataToQueue+0x70>
 8012a9a:	3601      	adds	r6, #1
BaseType_t xReturn = pdFALSE;
 8012a9c:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8012a9e:	63a6      	str	r6, [r4, #56]	; 0x38
}
 8012aa0:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8012aa2:	68a0      	ldr	r0, [r4, #8]
 8012aa4:	f001 fd84 	bl	80145b0 <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8012aa8:	60a5      	str	r5, [r4, #8]
 8012aaa:	e7ce      	b.n	8012a4a <prvCopyDataToQueue+0xe>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8012aac:	2e01      	cmp	r6, #1
 8012aae:	bf38      	it	cc
 8012ab0:	2601      	movcc	r6, #1
BaseType_t xReturn = pdFALSE;
 8012ab2:	2000      	movs	r0, #0
 8012ab4:	e7ca      	b.n	8012a4c <prvCopyDataToQueue+0x10>
 8012ab6:	bf00      	nop

08012ab8 <xQueueGenericCreate>:
	{
 8012ab8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8012aba:	b940      	cbnz	r0, 8012ace <xQueueGenericCreate+0x16>
	__asm volatile
 8012abc:	f04f 0320 	mov.w	r3, #32
 8012ac0:	f383 8811 	msr	BASEPRI, r3
 8012ac4:	f3bf 8f6f 	isb	sy
 8012ac8:	f3bf 8f4f 	dsb	sy
 8012acc:	e7fe      	b.n	8012acc <xQueueGenericCreate+0x14>
 8012ace:	460e      	mov	r6, r1
 8012ad0:	4617      	mov	r7, r2
		if( uxItemSize == ( UBaseType_t ) 0 )
 8012ad2:	4605      	mov	r5, r0
 8012ad4:	b931      	cbnz	r1, 8012ae4 <xQueueGenericCreate+0x2c>
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8012ad6:	2050      	movs	r0, #80	; 0x50
 8012ad8:	f002 f9b6 	bl	8014e48 <pvPortMalloc>
		if( pxNewQueue != NULL )
 8012adc:	4604      	mov	r4, r0
 8012ade:	b378      	cbz	r0, 8012b40 <xQueueGenericCreate+0x88>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8012ae0:	6024      	str	r4, [r4, #0]
 8012ae2:	e009      	b.n	8012af8 <xQueueGenericCreate+0x40>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012ae4:	fb01 f000 	mul.w	r0, r1, r0
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8012ae8:	3050      	adds	r0, #80	; 0x50
 8012aea:	f002 f9ad 	bl	8014e48 <pvPortMalloc>
		if( pxNewQueue != NULL )
 8012aee:	4604      	mov	r4, r0
 8012af0:	b330      	cbz	r0, 8012b40 <xQueueGenericCreate+0x88>
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8012af2:	f100 0350 	add.w	r3, r0, #80	; 0x50
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8012af6:	6003      	str	r3, [r0, #0]
	pxNewQueue->uxItemSize = uxItemSize;
 8012af8:	e9c4 560f 	strd	r5, r6, [r4, #60]	; 0x3c
	taskENTER_CRITICAL();
 8012afc:	f002 f842 	bl	8014b84 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8012b00:	e9d4 130f 	ldrd	r1, r3, [r4, #60]	; 0x3c
 8012b04:	6822      	ldr	r2, [r4, #0]
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8012b06:	6062      	str	r2, [r4, #4]
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8012b08:	fb01 f103 	mul.w	r1, r1, r3
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8012b0c:	1acb      	subs	r3, r1, r3
 8012b0e:	4413      	add	r3, r2
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8012b10:	2000      	movs	r0, #0
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8012b12:	440a      	add	r2, r1
		pxQueue->cRxLock = queueUNLOCKED;
 8012b14:	21ff      	movs	r1, #255	; 0xff
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8012b16:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8012b18:	e9c4 2302 	strd	r2, r3, [r4, #8]
		pxQueue->cRxLock = queueUNLOCKED;
 8012b1c:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8012b20:	f104 0010 	add.w	r0, r4, #16
		pxQueue->cTxLock = queueUNLOCKED;
 8012b24:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8012b28:	f7ff ff3c 	bl	80129a4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8012b2c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8012b30:	f7ff ff38 	bl	80129a4 <vListInitialise>
	taskEXIT_CRITICAL();
 8012b34:	f002 f848 	bl	8014bc8 <vPortExitCritical>
		pxNewQueue->ucQueueType = ucQueueType;
 8012b38:	f884 704c 	strb.w	r7, [r4, #76]	; 0x4c
	}
 8012b3c:	4620      	mov	r0, r4
 8012b3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8012b40:	2400      	movs	r4, #0
	}
 8012b42:	4620      	mov	r0, r4
 8012b44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012b46:	bf00      	nop

08012b48 <xQueueCreateCountingSemaphore>:
	{
 8012b48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		configASSERT( uxMaxCount != 0 );
 8012b4a:	b940      	cbnz	r0, 8012b5e <xQueueCreateCountingSemaphore+0x16>
 8012b4c:	f04f 0320 	mov.w	r3, #32
 8012b50:	f383 8811 	msr	BASEPRI, r3
 8012b54:	f3bf 8f6f 	isb	sy
 8012b58:	f3bf 8f4f 	dsb	sy
 8012b5c:	e7fe      	b.n	8012b5c <xQueueCreateCountingSemaphore+0x14>
		configASSERT( uxInitialCount <= uxMaxCount );
 8012b5e:	4288      	cmp	r0, r1
 8012b60:	460d      	mov	r5, r1
 8012b62:	4606      	mov	r6, r0
 8012b64:	d208      	bcs.n	8012b78 <xQueueCreateCountingSemaphore+0x30>
 8012b66:	f04f 0320 	mov.w	r3, #32
 8012b6a:	f383 8811 	msr	BASEPRI, r3
 8012b6e:	f3bf 8f6f 	isb	sy
 8012b72:	f3bf 8f4f 	dsb	sy
 8012b76:	e7fe      	b.n	8012b76 <xQueueCreateCountingSemaphore+0x2e>
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8012b78:	2050      	movs	r0, #80	; 0x50
 8012b7a:	f002 f965 	bl	8014e48 <pvPortMalloc>
		if( pxNewQueue != NULL )
 8012b7e:	4604      	mov	r4, r0
 8012b80:	b320      	cbz	r0, 8012bcc <xQueueCreateCountingSemaphore+0x84>
	pxNewQueue->uxItemSize = uxItemSize;
 8012b82:	2700      	movs	r7, #0
 8012b84:	e9c0 670f 	strd	r6, r7, [r0, #60]	; 0x3c
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8012b88:	6000      	str	r0, [r0, #0]
	taskENTER_CRITICAL();
 8012b8a:	f001 fffb 	bl	8014b84 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8012b8e:	e9d4 320f 	ldrd	r3, r2, [r4, #60]	; 0x3c
 8012b92:	6821      	ldr	r1, [r4, #0]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8012b94:	63a7      	str	r7, [r4, #56]	; 0x38
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8012b96:	fb03 f302 	mul.w	r3, r3, r2
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8012b9a:	1a9a      	subs	r2, r3, r2
 8012b9c:	440a      	add	r2, r1
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8012b9e:	440b      	add	r3, r1
		pxQueue->cRxLock = queueUNLOCKED;
 8012ba0:	26ff      	movs	r6, #255	; 0xff
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8012ba2:	e9c4 3202 	strd	r3, r2, [r4, #8]
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8012ba6:	6061      	str	r1, [r4, #4]
		pxQueue->cRxLock = queueUNLOCKED;
 8012ba8:	f884 6044 	strb.w	r6, [r4, #68]	; 0x44
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8012bac:	f104 0010 	add.w	r0, r4, #16
		pxQueue->cTxLock = queueUNLOCKED;
 8012bb0:	f884 6045 	strb.w	r6, [r4, #69]	; 0x45
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8012bb4:	f7ff fef6 	bl	80129a4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8012bb8:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8012bbc:	f7ff fef2 	bl	80129a4 <vListInitialise>
	taskEXIT_CRITICAL();
 8012bc0:	f002 f802 	bl	8014bc8 <vPortExitCritical>
		pxNewQueue->ucQueueType = ucQueueType;
 8012bc4:	2302      	movs	r3, #2
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8012bc6:	63a5      	str	r5, [r4, #56]	; 0x38
		pxNewQueue->ucQueueType = ucQueueType;
 8012bc8:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
	}
 8012bcc:	4620      	mov	r0, r4
 8012bce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08012bd0 <xQueueGenericSend>:
{
 8012bd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012bd4:	b084      	sub	sp, #16
 8012bd6:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 8012bd8:	2800      	cmp	r0, #0
 8012bda:	f000 80ac 	beq.w	8012d36 <xQueueGenericSend+0x166>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8012bde:	4688      	mov	r8, r1
 8012be0:	461f      	mov	r7, r3
 8012be2:	4604      	mov	r4, r0
 8012be4:	2900      	cmp	r1, #0
 8012be6:	f000 8099 	beq.w	8012d1c <xQueueGenericSend+0x14c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8012bea:	2f02      	cmp	r7, #2
 8012bec:	d10b      	bne.n	8012c06 <xQueueGenericSend+0x36>
 8012bee:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8012bf0:	2b01      	cmp	r3, #1
 8012bf2:	d008      	beq.n	8012c06 <xQueueGenericSend+0x36>
 8012bf4:	f04f 0320 	mov.w	r3, #32
 8012bf8:	f383 8811 	msr	BASEPRI, r3
 8012bfc:	f3bf 8f6f 	isb	sy
 8012c00:	f3bf 8f4f 	dsb	sy
 8012c04:	e7fe      	b.n	8012c04 <xQueueGenericSend+0x34>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8012c06:	f001 fc67 	bl	80144d8 <xTaskGetSchedulerState>
 8012c0a:	4682      	mov	sl, r0
 8012c0c:	2800      	cmp	r0, #0
 8012c0e:	f000 809b 	beq.w	8012d48 <xQueueGenericSend+0x178>
 8012c12:	f04f 0a00 	mov.w	sl, #0
					portYIELD_WITHIN_API();
 8012c16:	f8df 92c0 	ldr.w	r9, [pc, #704]	; 8012ed8 <xQueueGenericSend+0x308>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8012c1a:	f104 0624 	add.w	r6, r4, #36	; 0x24
		taskENTER_CRITICAL();
 8012c1e:	f001 ffb1 	bl	8014b84 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8012c22:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8012c24:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8012c26:	429a      	cmp	r2, r3
 8012c28:	f0c0 80f4 	bcc.w	8012e14 <xQueueGenericSend+0x244>
 8012c2c:	2f02      	cmp	r7, #2
 8012c2e:	f000 80f1 	beq.w	8012e14 <xQueueGenericSend+0x244>
				if( xTicksToWait == ( TickType_t ) 0 )
 8012c32:	9d01      	ldr	r5, [sp, #4]
 8012c34:	2d00      	cmp	r5, #0
 8012c36:	f000 814a 	beq.w	8012ece <xQueueGenericSend+0x2fe>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8012c3a:	ad02      	add	r5, sp, #8
				else if( xEntryTimeSet == pdFALSE )
 8012c3c:	f1ba 0f00 	cmp.w	sl, #0
 8012c40:	f000 80e4 	beq.w	8012e0c <xQueueGenericSend+0x23c>
		taskEXIT_CRITICAL();
 8012c44:	f001 ffc0 	bl	8014bc8 <vPortExitCritical>
		vTaskSuspendAll();
 8012c48:	f001 f8f2 	bl	8013e30 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8012c4c:	f001 ff9a 	bl	8014b84 <vPortEnterCritical>
 8012c50:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8012c54:	2bff      	cmp	r3, #255	; 0xff
 8012c56:	bf04      	itt	eq
 8012c58:	2300      	moveq	r3, #0
 8012c5a:	f884 3044 	strbeq.w	r3, [r4, #68]	; 0x44
 8012c5e:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8012c62:	2bff      	cmp	r3, #255	; 0xff
 8012c64:	bf04      	itt	eq
 8012c66:	2300      	moveq	r3, #0
 8012c68:	f884 3045 	strbeq.w	r3, [r4, #69]	; 0x45
 8012c6c:	f001 ffac 	bl	8014bc8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8012c70:	4628      	mov	r0, r5
 8012c72:	a901      	add	r1, sp, #4
 8012c74:	f001 fbe2 	bl	801443c <xTaskCheckForTimeOut>
 8012c78:	2800      	cmp	r0, #0
 8012c7a:	f040 80e8 	bne.w	8012e4e <xQueueGenericSend+0x27e>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8012c7e:	f001 ff81 	bl	8014b84 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8012c82:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8012c84:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8012c86:	429a      	cmp	r2, r3
 8012c88:	d06b      	beq.n	8012d62 <xQueueGenericSend+0x192>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8012c8a:	f001 ff9d 	bl	8014bc8 <vPortExitCritical>
	taskENTER_CRITICAL();
 8012c8e:	f001 ff79 	bl	8014b84 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8012c92:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
 8012c96:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8012c98:	2d00      	cmp	r5, #0
 8012c9a:	dc05      	bgt.n	8012ca8 <xQueueGenericSend+0xd8>
 8012c9c:	e012      	b.n	8012cc4 <xQueueGenericSend+0xf4>
			--cTxLock;
 8012c9e:	1e6b      	subs	r3, r5, #1
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8012ca0:	f013 0fff 	tst.w	r3, #255	; 0xff
 8012ca4:	b25d      	sxtb	r5, r3
 8012ca6:	d00d      	beq.n	8012cc4 <xQueueGenericSend+0xf4>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8012ca8:	6a63      	ldr	r3, [r4, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8012caa:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8012cac:	b153      	cbz	r3, 8012cc4 <xQueueGenericSend+0xf4>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8012cae:	f001 fb79 	bl	80143a4 <xTaskRemoveFromEventList>
 8012cb2:	2800      	cmp	r0, #0
 8012cb4:	d0f3      	beq.n	8012c9e <xQueueGenericSend+0xce>
						vTaskMissedYield();
 8012cb6:	f001 fc07 	bl	80144c8 <vTaskMissedYield>
			--cTxLock;
 8012cba:	1e6b      	subs	r3, r5, #1
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8012cbc:	f013 0fff 	tst.w	r3, #255	; 0xff
 8012cc0:	b25d      	sxtb	r5, r3
 8012cc2:	d1f1      	bne.n	8012ca8 <xQueueGenericSend+0xd8>
		pxQueue->cTxLock = queueUNLOCKED;
 8012cc4:	23ff      	movs	r3, #255	; 0xff
 8012cc6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 8012cca:	f001 ff7d 	bl	8014bc8 <vPortExitCritical>
	taskENTER_CRITICAL();
 8012cce:	f001 ff59 	bl	8014b84 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8012cd2:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 8012cd6:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8012cd8:	2d00      	cmp	r5, #0
 8012cda:	dd15      	ble.n	8012d08 <xQueueGenericSend+0x138>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012cdc:	f104 0a10 	add.w	sl, r4, #16
 8012ce0:	e004      	b.n	8012cec <xQueueGenericSend+0x11c>
				--cRxLock;
 8012ce2:	1e6b      	subs	r3, r5, #1
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8012ce4:	f013 0fff 	tst.w	r3, #255	; 0xff
 8012ce8:	b25d      	sxtb	r5, r3
 8012cea:	d00d      	beq.n	8012d08 <xQueueGenericSend+0x138>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012cec:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012cee:	4650      	mov	r0, sl
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012cf0:	b153      	cbz	r3, 8012d08 <xQueueGenericSend+0x138>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012cf2:	f001 fb57 	bl	80143a4 <xTaskRemoveFromEventList>
 8012cf6:	2800      	cmp	r0, #0
 8012cf8:	d0f3      	beq.n	8012ce2 <xQueueGenericSend+0x112>
					vTaskMissedYield();
 8012cfa:	f001 fbe5 	bl	80144c8 <vTaskMissedYield>
				--cRxLock;
 8012cfe:	1e6b      	subs	r3, r5, #1
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8012d00:	f013 0fff 	tst.w	r3, #255	; 0xff
 8012d04:	b25d      	sxtb	r5, r3
 8012d06:	d1f1      	bne.n	8012cec <xQueueGenericSend+0x11c>
		pxQueue->cRxLock = queueUNLOCKED;
 8012d08:	23ff      	movs	r3, #255	; 0xff
 8012d0a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
 8012d0e:	f001 ff5b 	bl	8014bc8 <vPortExitCritical>
				( void ) xTaskResumeAll();
 8012d12:	f001 f9b7 	bl	8014084 <xTaskResumeAll>
 8012d16:	f04f 0a01 	mov.w	sl, #1
 8012d1a:	e780      	b.n	8012c1e <xQueueGenericSend+0x4e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8012d1c:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8012d1e:	2b00      	cmp	r3, #0
 8012d20:	f43f af63 	beq.w	8012bea <xQueueGenericSend+0x1a>
 8012d24:	f04f 0320 	mov.w	r3, #32
 8012d28:	f383 8811 	msr	BASEPRI, r3
 8012d2c:	f3bf 8f6f 	isb	sy
 8012d30:	f3bf 8f4f 	dsb	sy
 8012d34:	e7fe      	b.n	8012d34 <xQueueGenericSend+0x164>
 8012d36:	f04f 0320 	mov.w	r3, #32
 8012d3a:	f383 8811 	msr	BASEPRI, r3
 8012d3e:	f3bf 8f6f 	isb	sy
 8012d42:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8012d46:	e7fe      	b.n	8012d46 <xQueueGenericSend+0x176>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8012d48:	9b01      	ldr	r3, [sp, #4]
 8012d4a:	2b00      	cmp	r3, #0
 8012d4c:	f43f af63 	beq.w	8012c16 <xQueueGenericSend+0x46>
 8012d50:	f04f 0320 	mov.w	r3, #32
 8012d54:	f383 8811 	msr	BASEPRI, r3
 8012d58:	f3bf 8f6f 	isb	sy
 8012d5c:	f3bf 8f4f 	dsb	sy
 8012d60:	e7fe      	b.n	8012d60 <xQueueGenericSend+0x190>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8012d62:	f104 0a10 	add.w	sl, r4, #16
	taskEXIT_CRITICAL();
 8012d66:	f001 ff2f 	bl	8014bc8 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8012d6a:	9901      	ldr	r1, [sp, #4]
 8012d6c:	4650      	mov	r0, sl
 8012d6e:	f001 fa69 	bl	8014244 <vTaskPlaceOnEventList>
	taskENTER_CRITICAL();
 8012d72:	f001 ff07 	bl	8014b84 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8012d76:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
 8012d7a:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8012d7c:	2d00      	cmp	r5, #0
 8012d7e:	dc05      	bgt.n	8012d8c <xQueueGenericSend+0x1bc>
 8012d80:	e012      	b.n	8012da8 <xQueueGenericSend+0x1d8>
			--cTxLock;
 8012d82:	1e6b      	subs	r3, r5, #1
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8012d84:	f013 0fff 	tst.w	r3, #255	; 0xff
 8012d88:	b25d      	sxtb	r5, r3
 8012d8a:	d00d      	beq.n	8012da8 <xQueueGenericSend+0x1d8>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8012d8c:	6a63      	ldr	r3, [r4, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8012d8e:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8012d90:	b153      	cbz	r3, 8012da8 <xQueueGenericSend+0x1d8>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8012d92:	f001 fb07 	bl	80143a4 <xTaskRemoveFromEventList>
 8012d96:	2800      	cmp	r0, #0
 8012d98:	d0f3      	beq.n	8012d82 <xQueueGenericSend+0x1b2>
						vTaskMissedYield();
 8012d9a:	f001 fb95 	bl	80144c8 <vTaskMissedYield>
			--cTxLock;
 8012d9e:	1e6b      	subs	r3, r5, #1
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8012da0:	f013 0fff 	tst.w	r3, #255	; 0xff
 8012da4:	b25d      	sxtb	r5, r3
 8012da6:	d1f1      	bne.n	8012d8c <xQueueGenericSend+0x1bc>
		pxQueue->cTxLock = queueUNLOCKED;
 8012da8:	23ff      	movs	r3, #255	; 0xff
 8012daa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 8012dae:	f001 ff0b 	bl	8014bc8 <vPortExitCritical>
	taskENTER_CRITICAL();
 8012db2:	f001 fee7 	bl	8014b84 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8012db6:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 8012dba:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8012dbc:	2d00      	cmp	r5, #0
 8012dbe:	dc05      	bgt.n	8012dcc <xQueueGenericSend+0x1fc>
 8012dc0:	e012      	b.n	8012de8 <xQueueGenericSend+0x218>
				--cRxLock;
 8012dc2:	1e6b      	subs	r3, r5, #1
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8012dc4:	f013 0fff 	tst.w	r3, #255	; 0xff
 8012dc8:	b25d      	sxtb	r5, r3
 8012dca:	d00d      	beq.n	8012de8 <xQueueGenericSend+0x218>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012dcc:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012dce:	4650      	mov	r0, sl
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012dd0:	b153      	cbz	r3, 8012de8 <xQueueGenericSend+0x218>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012dd2:	f001 fae7 	bl	80143a4 <xTaskRemoveFromEventList>
 8012dd6:	2800      	cmp	r0, #0
 8012dd8:	d0f3      	beq.n	8012dc2 <xQueueGenericSend+0x1f2>
					vTaskMissedYield();
 8012dda:	f001 fb75 	bl	80144c8 <vTaskMissedYield>
				--cRxLock;
 8012dde:	1e6b      	subs	r3, r5, #1
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8012de0:	f013 0fff 	tst.w	r3, #255	; 0xff
 8012de4:	b25d      	sxtb	r5, r3
 8012de6:	d1f1      	bne.n	8012dcc <xQueueGenericSend+0x1fc>
		pxQueue->cRxLock = queueUNLOCKED;
 8012de8:	23ff      	movs	r3, #255	; 0xff
 8012dea:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
 8012dee:	f001 feeb 	bl	8014bc8 <vPortExitCritical>
				if( xTaskResumeAll() == pdFALSE )
 8012df2:	f001 f947 	bl	8014084 <xTaskResumeAll>
 8012df6:	2800      	cmp	r0, #0
 8012df8:	d18d      	bne.n	8012d16 <xQueueGenericSend+0x146>
					portYIELD_WITHIN_API();
 8012dfa:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8012dfe:	f8c9 3000 	str.w	r3, [r9]
 8012e02:	f3bf 8f4f 	dsb	sy
 8012e06:	f3bf 8f6f 	isb	sy
 8012e0a:	e784      	b.n	8012d16 <xQueueGenericSend+0x146>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8012e0c:	4628      	mov	r0, r5
 8012e0e:	f001 fb0b 	bl	8014428 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8012e12:	e717      	b.n	8012c44 <xQueueGenericSend+0x74>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8012e14:	463a      	mov	r2, r7
 8012e16:	4641      	mov	r1, r8
 8012e18:	4620      	mov	r0, r4
 8012e1a:	f7ff fe0f 	bl	8012a3c <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8012e1e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012e20:	b973      	cbnz	r3, 8012e40 <xQueueGenericSend+0x270>
					else if( xYieldRequired != pdFALSE )
 8012e22:	b138      	cbz	r0, 8012e34 <xQueueGenericSend+0x264>
						queueYIELD_IF_USING_PREEMPTION();
 8012e24:	4b2c      	ldr	r3, [pc, #176]	; (8012ed8 <xQueueGenericSend+0x308>)
 8012e26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012e2a:	601a      	str	r2, [r3, #0]
 8012e2c:	f3bf 8f4f 	dsb	sy
 8012e30:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8012e34:	f001 fec8 	bl	8014bc8 <vPortExitCritical>
				return pdPASS;
 8012e38:	2001      	movs	r0, #1
}
 8012e3a:	b004      	add	sp, #16
 8012e3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8012e40:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8012e44:	f001 faae 	bl	80143a4 <xTaskRemoveFromEventList>
 8012e48:	2800      	cmp	r0, #0
 8012e4a:	d0f3      	beq.n	8012e34 <xQueueGenericSend+0x264>
 8012e4c:	e7ea      	b.n	8012e24 <xQueueGenericSend+0x254>
	taskENTER_CRITICAL();
 8012e4e:	f001 fe99 	bl	8014b84 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8012e52:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
 8012e56:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8012e58:	2d00      	cmp	r5, #0
 8012e5a:	dd11      	ble.n	8012e80 <xQueueGenericSend+0x2b0>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8012e5c:	f104 0624 	add.w	r6, r4, #36	; 0x24
 8012e60:	e004      	b.n	8012e6c <xQueueGenericSend+0x29c>
			--cTxLock;
 8012e62:	1e6b      	subs	r3, r5, #1
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8012e64:	f013 0fff 	tst.w	r3, #255	; 0xff
 8012e68:	b25d      	sxtb	r5, r3
 8012e6a:	d009      	beq.n	8012e80 <xQueueGenericSend+0x2b0>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8012e6c:	6a63      	ldr	r3, [r4, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8012e6e:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8012e70:	b133      	cbz	r3, 8012e80 <xQueueGenericSend+0x2b0>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8012e72:	f001 fa97 	bl	80143a4 <xTaskRemoveFromEventList>
 8012e76:	2800      	cmp	r0, #0
 8012e78:	d0f3      	beq.n	8012e62 <xQueueGenericSend+0x292>
						vTaskMissedYield();
 8012e7a:	f001 fb25 	bl	80144c8 <vTaskMissedYield>
 8012e7e:	e7f0      	b.n	8012e62 <xQueueGenericSend+0x292>
		pxQueue->cTxLock = queueUNLOCKED;
 8012e80:	23ff      	movs	r3, #255	; 0xff
 8012e82:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 8012e86:	f001 fe9f 	bl	8014bc8 <vPortExitCritical>
	taskENTER_CRITICAL();
 8012e8a:	f001 fe7b 	bl	8014b84 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8012e8e:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 8012e92:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8012e94:	2d00      	cmp	r5, #0
 8012e96:	dd11      	ble.n	8012ebc <xQueueGenericSend+0x2ec>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012e98:	f104 0610 	add.w	r6, r4, #16
 8012e9c:	e004      	b.n	8012ea8 <xQueueGenericSend+0x2d8>
				--cRxLock;
 8012e9e:	1e6b      	subs	r3, r5, #1
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8012ea0:	f013 0fff 	tst.w	r3, #255	; 0xff
 8012ea4:	b25d      	sxtb	r5, r3
 8012ea6:	d009      	beq.n	8012ebc <xQueueGenericSend+0x2ec>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012ea8:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012eaa:	4630      	mov	r0, r6
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012eac:	b133      	cbz	r3, 8012ebc <xQueueGenericSend+0x2ec>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012eae:	f001 fa79 	bl	80143a4 <xTaskRemoveFromEventList>
 8012eb2:	2800      	cmp	r0, #0
 8012eb4:	d0f3      	beq.n	8012e9e <xQueueGenericSend+0x2ce>
					vTaskMissedYield();
 8012eb6:	f001 fb07 	bl	80144c8 <vTaskMissedYield>
 8012eba:	e7f0      	b.n	8012e9e <xQueueGenericSend+0x2ce>
		pxQueue->cRxLock = queueUNLOCKED;
 8012ebc:	23ff      	movs	r3, #255	; 0xff
 8012ebe:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
 8012ec2:	f001 fe81 	bl	8014bc8 <vPortExitCritical>
			( void ) xTaskResumeAll();
 8012ec6:	f001 f8dd 	bl	8014084 <xTaskResumeAll>
			return errQUEUE_FULL;
 8012eca:	2000      	movs	r0, #0
 8012ecc:	e7b5      	b.n	8012e3a <xQueueGenericSend+0x26a>
					taskEXIT_CRITICAL();
 8012ece:	f001 fe7b 	bl	8014bc8 <vPortExitCritical>
					return errQUEUE_FULL;
 8012ed2:	4628      	mov	r0, r5
 8012ed4:	e7b1      	b.n	8012e3a <xQueueGenericSend+0x26a>
 8012ed6:	bf00      	nop
 8012ed8:	e000ed04 	.word	0xe000ed04

08012edc <xQueueGenericSendFromISR>:
{
 8012edc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 8012ee0:	2800      	cmp	r0, #0
 8012ee2:	d035      	beq.n	8012f50 <xQueueGenericSendFromISR+0x74>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8012ee4:	4689      	mov	r9, r1
 8012ee6:	4690      	mov	r8, r2
 8012ee8:	461f      	mov	r7, r3
 8012eea:	4604      	mov	r4, r0
 8012eec:	b321      	cbz	r1, 8012f38 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8012eee:	2f02      	cmp	r7, #2
 8012ef0:	d10b      	bne.n	8012f0a <xQueueGenericSendFromISR+0x2e>
 8012ef2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8012ef4:	2b01      	cmp	r3, #1
 8012ef6:	d008      	beq.n	8012f0a <xQueueGenericSendFromISR+0x2e>
 8012ef8:	f04f 0320 	mov.w	r3, #32
 8012efc:	f383 8811 	msr	BASEPRI, r3
 8012f00:	f3bf 8f6f 	isb	sy
 8012f04:	f3bf 8f4f 	dsb	sy
 8012f08:	e7fe      	b.n	8012f08 <xQueueGenericSendFromISR+0x2c>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8012f0a:	f001 ff71 	bl	8014df0 <vPortValidateInterruptPriority>
	__asm volatile
 8012f0e:	f3ef 8611 	mrs	r6, BASEPRI
 8012f12:	f04f 0320 	mov.w	r3, #32
 8012f16:	f383 8811 	msr	BASEPRI, r3
 8012f1a:	f3bf 8f6f 	isb	sy
 8012f1e:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8012f22:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8012f24:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8012f26:	429a      	cmp	r2, r3
 8012f28:	d31b      	bcc.n	8012f62 <xQueueGenericSendFromISR+0x86>
 8012f2a:	2f02      	cmp	r7, #2
 8012f2c:	d019      	beq.n	8012f62 <xQueueGenericSendFromISR+0x86>
			xReturn = errQUEUE_FULL;
 8012f2e:	2000      	movs	r0, #0
	__asm volatile
 8012f30:	f386 8811 	msr	BASEPRI, r6
}
 8012f34:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8012f38:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8012f3a:	2b00      	cmp	r3, #0
 8012f3c:	d0d7      	beq.n	8012eee <xQueueGenericSendFromISR+0x12>
	__asm volatile
 8012f3e:	f04f 0320 	mov.w	r3, #32
 8012f42:	f383 8811 	msr	BASEPRI, r3
 8012f46:	f3bf 8f6f 	isb	sy
 8012f4a:	f3bf 8f4f 	dsb	sy
 8012f4e:	e7fe      	b.n	8012f4e <xQueueGenericSendFromISR+0x72>
 8012f50:	f04f 0320 	mov.w	r3, #32
 8012f54:	f383 8811 	msr	BASEPRI, r3
 8012f58:	f3bf 8f6f 	isb	sy
 8012f5c:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8012f60:	e7fe      	b.n	8012f60 <xQueueGenericSendFromISR+0x84>
			const int8_t cTxLock = pxQueue->cTxLock;
 8012f62:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8012f66:	463a      	mov	r2, r7
 8012f68:	4649      	mov	r1, r9
			const int8_t cTxLock = pxQueue->cTxLock;
 8012f6a:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8012f6c:	4620      	mov	r0, r4
 8012f6e:	f7ff fd65 	bl	8012a3c <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 8012f72:	1c6b      	adds	r3, r5, #1
 8012f74:	d008      	beq.n	8012f88 <xQueueGenericSendFromISR+0xac>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8012f76:	1c6b      	adds	r3, r5, #1
 8012f78:	b25b      	sxtb	r3, r3
 8012f7a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
			xReturn = pdPASS;
 8012f7e:	2001      	movs	r0, #1
	__asm volatile
 8012f80:	f386 8811 	msr	BASEPRI, r6
}
 8012f84:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8012f88:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012f8a:	2b00      	cmp	r3, #0
 8012f8c:	d0f7      	beq.n	8012f7e <xQueueGenericSendFromISR+0xa2>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8012f8e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8012f92:	f001 fa07 	bl	80143a4 <xTaskRemoveFromEventList>
 8012f96:	2800      	cmp	r0, #0
 8012f98:	d0f1      	beq.n	8012f7e <xQueueGenericSendFromISR+0xa2>
							if( pxHigherPriorityTaskWoken != NULL )
 8012f9a:	f1b8 0f00 	cmp.w	r8, #0
 8012f9e:	d0ee      	beq.n	8012f7e <xQueueGenericSendFromISR+0xa2>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8012fa0:	2001      	movs	r0, #1
 8012fa2:	f8c8 0000 	str.w	r0, [r8]
 8012fa6:	e7c3      	b.n	8012f30 <xQueueGenericSendFromISR+0x54>

08012fa8 <xQueueGiveFromISR>:
	configASSERT( pxQueue );
 8012fa8:	b370      	cbz	r0, 8013008 <xQueueGiveFromISR+0x60>
	configASSERT( pxQueue->uxItemSize == 0 );
 8012faa:	6c03      	ldr	r3, [r0, #64]	; 0x40
{
 8012fac:	b570      	push	{r4, r5, r6, lr}
 8012fae:	4604      	mov	r4, r0
	configASSERT( pxQueue->uxItemSize == 0 );
 8012fb0:	b143      	cbz	r3, 8012fc4 <xQueueGiveFromISR+0x1c>
	__asm volatile
 8012fb2:	f04f 0320 	mov.w	r3, #32
 8012fb6:	f383 8811 	msr	BASEPRI, r3
 8012fba:	f3bf 8f6f 	isb	sy
 8012fbe:	f3bf 8f4f 	dsb	sy
 8012fc2:	e7fe      	b.n	8012fc2 <xQueueGiveFromISR+0x1a>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8012fc4:	6803      	ldr	r3, [r0, #0]
 8012fc6:	460d      	mov	r5, r1
 8012fc8:	b33b      	cbz	r3, 801301a <xQueueGiveFromISR+0x72>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8012fca:	f001 ff11 	bl	8014df0 <vPortValidateInterruptPriority>
	__asm volatile
 8012fce:	f3ef 8611 	mrs	r6, BASEPRI
 8012fd2:	f04f 0320 	mov.w	r3, #32
 8012fd6:	f383 8811 	msr	BASEPRI, r3
 8012fda:	f3bf 8f6f 	isb	sy
 8012fde:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8012fe2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 8012fe4:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8012fe6:	429a      	cmp	r2, r3
 8012fe8:	d923      	bls.n	8013032 <xQueueGiveFromISR+0x8a>
			const int8_t cTxLock = pxQueue->cTxLock;
 8012fea:	f894 2045 	ldrb.w	r2, [r4, #69]	; 0x45
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8012fee:	3301      	adds	r3, #1
			if( cTxLock == queueUNLOCKED )
 8012ff0:	2aff      	cmp	r2, #255	; 0xff
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8012ff2:	63a3      	str	r3, [r4, #56]	; 0x38
			const int8_t cTxLock = pxQueue->cTxLock;
 8012ff4:	b253      	sxtb	r3, r2
			if( cTxLock == queueUNLOCKED )
 8012ff6:	d020      	beq.n	801303a <xQueueGiveFromISR+0x92>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8012ff8:	3301      	adds	r3, #1
 8012ffa:	b25b      	sxtb	r3, r3
 8012ffc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
			xReturn = pdPASS;
 8013000:	2001      	movs	r0, #1
	__asm volatile
 8013002:	f386 8811 	msr	BASEPRI, r6
}
 8013006:	bd70      	pop	{r4, r5, r6, pc}
	__asm volatile
 8013008:	f04f 0320 	mov.w	r3, #32
 801300c:	f383 8811 	msr	BASEPRI, r3
 8013010:	f3bf 8f6f 	isb	sy
 8013014:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8013018:	e7fe      	b.n	8013018 <xQueueGiveFromISR+0x70>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 801301a:	6883      	ldr	r3, [r0, #8]
 801301c:	2b00      	cmp	r3, #0
 801301e:	d0d4      	beq.n	8012fca <xQueueGiveFromISR+0x22>
 8013020:	f04f 0320 	mov.w	r3, #32
 8013024:	f383 8811 	msr	BASEPRI, r3
 8013028:	f3bf 8f6f 	isb	sy
 801302c:	f3bf 8f4f 	dsb	sy
 8013030:	e7fe      	b.n	8013030 <xQueueGiveFromISR+0x88>
			xReturn = errQUEUE_FULL;
 8013032:	2000      	movs	r0, #0
	__asm volatile
 8013034:	f386 8811 	msr	BASEPRI, r6
}
 8013038:	bd70      	pop	{r4, r5, r6, pc}
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801303a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801303c:	2b00      	cmp	r3, #0
 801303e:	d0df      	beq.n	8013000 <xQueueGiveFromISR+0x58>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8013040:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8013044:	f001 f9ae 	bl	80143a4 <xTaskRemoveFromEventList>
 8013048:	2800      	cmp	r0, #0
 801304a:	d0d9      	beq.n	8013000 <xQueueGiveFromISR+0x58>
							if( pxHigherPriorityTaskWoken != NULL )
 801304c:	2d00      	cmp	r5, #0
 801304e:	d0d7      	beq.n	8013000 <xQueueGiveFromISR+0x58>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8013050:	2001      	movs	r0, #1
 8013052:	6028      	str	r0, [r5, #0]
 8013054:	e7ee      	b.n	8013034 <xQueueGiveFromISR+0x8c>
 8013056:	bf00      	nop

08013058 <xQueueReceive>:
{
 8013058:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801305c:	b085      	sub	sp, #20
 801305e:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 8013060:	2800      	cmp	r0, #0
 8013062:	f000 80f5 	beq.w	8013250 <xQueueReceive+0x1f8>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8013066:	460e      	mov	r6, r1
 8013068:	4604      	mov	r4, r0
 801306a:	2900      	cmp	r1, #0
 801306c:	f000 808a 	beq.w	8013184 <xQueueReceive+0x12c>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8013070:	f001 fa32 	bl	80144d8 <xTaskGetSchedulerState>
 8013074:	2800      	cmp	r0, #0
 8013076:	d079      	beq.n	801316c <xQueueReceive+0x114>
		taskENTER_CRITICAL();
 8013078:	f001 fd84 	bl	8014b84 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801307c:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801307e:	2d00      	cmp	r5, #0
 8013080:	f040 8148 	bne.w	8013314 <xQueueReceive+0x2bc>
				if( xTicksToWait == ( TickType_t ) 0 )
 8013084:	9b01      	ldr	r3, [sp, #4]
 8013086:	2b00      	cmp	r3, #0
 8013088:	f000 80dc 	beq.w	8013244 <xQueueReceive+0x1ec>
					vTaskInternalSetTimeOutState( &xTimeOut );
 801308c:	a802      	add	r0, sp, #8
 801308e:	f001 f9cb 	bl	8014428 <vTaskInternalSetTimeOutState>
					portYIELD_WITHIN_API();
 8013092:	f8df 82c8 	ldr.w	r8, [pc, #712]	; 801335c <xQueueReceive+0x304>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8013096:	f104 0724 	add.w	r7, r4, #36	; 0x24
		taskEXIT_CRITICAL();
 801309a:	f001 fd95 	bl	8014bc8 <vPortExitCritical>
		vTaskSuspendAll();
 801309e:	f000 fec7 	bl	8013e30 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80130a2:	f001 fd6f 	bl	8014b84 <vPortEnterCritical>
 80130a6:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80130aa:	2bff      	cmp	r3, #255	; 0xff
 80130ac:	bf04      	itt	eq
 80130ae:	2300      	moveq	r3, #0
 80130b0:	f884 3044 	strbeq.w	r3, [r4, #68]	; 0x44
 80130b4:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80130b8:	2bff      	cmp	r3, #255	; 0xff
 80130ba:	bf04      	itt	eq
 80130bc:	2300      	moveq	r3, #0
 80130be:	f884 3045 	strbeq.w	r3, [r4, #69]	; 0x45
 80130c2:	f001 fd81 	bl	8014bc8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80130c6:	a901      	add	r1, sp, #4
 80130c8:	a802      	add	r0, sp, #8
 80130ca:	f001 f9b7 	bl	801443c <xTaskCheckForTimeOut>
 80130ce:	2800      	cmp	r0, #0
 80130d0:	d165      	bne.n	801319e <xQueueReceive+0x146>
	taskENTER_CRITICAL();
 80130d2:	f001 fd57 	bl	8014b84 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80130d6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80130d8:	2b00      	cmp	r3, #0
 80130da:	f000 80c2 	beq.w	8013262 <xQueueReceive+0x20a>
	taskEXIT_CRITICAL();
 80130de:	f001 fd73 	bl	8014bc8 <vPortExitCritical>
	taskENTER_CRITICAL();
 80130e2:	f001 fd4f 	bl	8014b84 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 80130e6:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
 80130ea:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80130ec:	2d00      	cmp	r5, #0
 80130ee:	dc05      	bgt.n	80130fc <xQueueReceive+0xa4>
 80130f0:	e012      	b.n	8013118 <xQueueReceive+0xc0>
			--cTxLock;
 80130f2:	1e6b      	subs	r3, r5, #1
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80130f4:	f013 0fff 	tst.w	r3, #255	; 0xff
 80130f8:	b25d      	sxtb	r5, r3
 80130fa:	d00d      	beq.n	8013118 <xQueueReceive+0xc0>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80130fc:	6a63      	ldr	r3, [r4, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80130fe:	4638      	mov	r0, r7
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8013100:	b153      	cbz	r3, 8013118 <xQueueReceive+0xc0>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8013102:	f001 f94f 	bl	80143a4 <xTaskRemoveFromEventList>
 8013106:	2800      	cmp	r0, #0
 8013108:	d0f3      	beq.n	80130f2 <xQueueReceive+0x9a>
						vTaskMissedYield();
 801310a:	f001 f9dd 	bl	80144c8 <vTaskMissedYield>
			--cTxLock;
 801310e:	1e6b      	subs	r3, r5, #1
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8013110:	f013 0fff 	tst.w	r3, #255	; 0xff
 8013114:	b25d      	sxtb	r5, r3
 8013116:	d1f1      	bne.n	80130fc <xQueueReceive+0xa4>
		pxQueue->cTxLock = queueUNLOCKED;
 8013118:	23ff      	movs	r3, #255	; 0xff
 801311a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 801311e:	f001 fd53 	bl	8014bc8 <vPortExitCritical>
	taskENTER_CRITICAL();
 8013122:	f001 fd2f 	bl	8014b84 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8013126:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 801312a:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 801312c:	2d00      	cmp	r5, #0
 801312e:	dd15      	ble.n	801315c <xQueueReceive+0x104>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013130:	f104 0910 	add.w	r9, r4, #16
 8013134:	e004      	b.n	8013140 <xQueueReceive+0xe8>
				--cRxLock;
 8013136:	1e6b      	subs	r3, r5, #1
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8013138:	f013 0fff 	tst.w	r3, #255	; 0xff
 801313c:	b25d      	sxtb	r5, r3
 801313e:	d00d      	beq.n	801315c <xQueueReceive+0x104>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013140:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013142:	4648      	mov	r0, r9
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013144:	b153      	cbz	r3, 801315c <xQueueReceive+0x104>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013146:	f001 f92d 	bl	80143a4 <xTaskRemoveFromEventList>
 801314a:	2800      	cmp	r0, #0
 801314c:	d0f3      	beq.n	8013136 <xQueueReceive+0xde>
					vTaskMissedYield();
 801314e:	f001 f9bb 	bl	80144c8 <vTaskMissedYield>
				--cRxLock;
 8013152:	1e6b      	subs	r3, r5, #1
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8013154:	f013 0fff 	tst.w	r3, #255	; 0xff
 8013158:	b25d      	sxtb	r5, r3
 801315a:	d1f1      	bne.n	8013140 <xQueueReceive+0xe8>
		pxQueue->cRxLock = queueUNLOCKED;
 801315c:	23ff      	movs	r3, #255	; 0xff
 801315e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
 8013162:	f001 fd31 	bl	8014bc8 <vPortExitCritical>
				( void ) xTaskResumeAll();
 8013166:	f000 ff8d 	bl	8014084 <xTaskResumeAll>
		taskENTER_CRITICAL();
 801316a:	e062      	b.n	8013232 <xQueueReceive+0x1da>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801316c:	9b01      	ldr	r3, [sp, #4]
 801316e:	2b00      	cmp	r3, #0
 8013170:	d082      	beq.n	8013078 <xQueueReceive+0x20>
	__asm volatile
 8013172:	f04f 0320 	mov.w	r3, #32
 8013176:	f383 8811 	msr	BASEPRI, r3
 801317a:	f3bf 8f6f 	isb	sy
 801317e:	f3bf 8f4f 	dsb	sy
 8013182:	e7fe      	b.n	8013182 <xQueueReceive+0x12a>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8013184:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8013186:	2b00      	cmp	r3, #0
 8013188:	f43f af72 	beq.w	8013070 <xQueueReceive+0x18>
 801318c:	f04f 0320 	mov.w	r3, #32
 8013190:	f383 8811 	msr	BASEPRI, r3
 8013194:	f3bf 8f6f 	isb	sy
 8013198:	f3bf 8f4f 	dsb	sy
 801319c:	e7fe      	b.n	801319c <xQueueReceive+0x144>
	taskENTER_CRITICAL();
 801319e:	f001 fcf1 	bl	8014b84 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 80131a2:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
 80131a6:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80131a8:	2d00      	cmp	r5, #0
 80131aa:	dc05      	bgt.n	80131b8 <xQueueReceive+0x160>
 80131ac:	e012      	b.n	80131d4 <xQueueReceive+0x17c>
			--cTxLock;
 80131ae:	1e6b      	subs	r3, r5, #1
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80131b0:	f013 0fff 	tst.w	r3, #255	; 0xff
 80131b4:	b25d      	sxtb	r5, r3
 80131b6:	d00d      	beq.n	80131d4 <xQueueReceive+0x17c>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80131b8:	6a63      	ldr	r3, [r4, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80131ba:	4638      	mov	r0, r7
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80131bc:	b153      	cbz	r3, 80131d4 <xQueueReceive+0x17c>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80131be:	f001 f8f1 	bl	80143a4 <xTaskRemoveFromEventList>
 80131c2:	2800      	cmp	r0, #0
 80131c4:	d0f3      	beq.n	80131ae <xQueueReceive+0x156>
						vTaskMissedYield();
 80131c6:	f001 f97f 	bl	80144c8 <vTaskMissedYield>
			--cTxLock;
 80131ca:	1e6b      	subs	r3, r5, #1
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80131cc:	f013 0fff 	tst.w	r3, #255	; 0xff
 80131d0:	b25d      	sxtb	r5, r3
 80131d2:	d1f1      	bne.n	80131b8 <xQueueReceive+0x160>
		pxQueue->cTxLock = queueUNLOCKED;
 80131d4:	23ff      	movs	r3, #255	; 0xff
 80131d6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 80131da:	f001 fcf5 	bl	8014bc8 <vPortExitCritical>
	taskENTER_CRITICAL();
 80131de:	f001 fcd1 	bl	8014b84 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 80131e2:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 80131e6:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80131e8:	2d00      	cmp	r5, #0
 80131ea:	dd15      	ble.n	8013218 <xQueueReceive+0x1c0>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80131ec:	f104 0910 	add.w	r9, r4, #16
 80131f0:	e004      	b.n	80131fc <xQueueReceive+0x1a4>
				--cRxLock;
 80131f2:	1e6b      	subs	r3, r5, #1
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80131f4:	f013 0fff 	tst.w	r3, #255	; 0xff
 80131f8:	b25d      	sxtb	r5, r3
 80131fa:	d00d      	beq.n	8013218 <xQueueReceive+0x1c0>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80131fc:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80131fe:	4648      	mov	r0, r9
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013200:	b153      	cbz	r3, 8013218 <xQueueReceive+0x1c0>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013202:	f001 f8cf 	bl	80143a4 <xTaskRemoveFromEventList>
 8013206:	2800      	cmp	r0, #0
 8013208:	d0f3      	beq.n	80131f2 <xQueueReceive+0x19a>
					vTaskMissedYield();
 801320a:	f001 f95d 	bl	80144c8 <vTaskMissedYield>
				--cRxLock;
 801320e:	1e6b      	subs	r3, r5, #1
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8013210:	f013 0fff 	tst.w	r3, #255	; 0xff
 8013214:	b25d      	sxtb	r5, r3
 8013216:	d1f1      	bne.n	80131fc <xQueueReceive+0x1a4>
		pxQueue->cRxLock = queueUNLOCKED;
 8013218:	23ff      	movs	r3, #255	; 0xff
 801321a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
 801321e:	f001 fcd3 	bl	8014bc8 <vPortExitCritical>
			( void ) xTaskResumeAll();
 8013222:	f000 ff2f 	bl	8014084 <xTaskResumeAll>
	taskENTER_CRITICAL();
 8013226:	f001 fcad 	bl	8014b84 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 801322a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801322c:	b153      	cbz	r3, 8013244 <xQueueReceive+0x1ec>
	taskEXIT_CRITICAL();
 801322e:	f001 fccb 	bl	8014bc8 <vPortExitCritical>
		taskENTER_CRITICAL();
 8013232:	f001 fca7 	bl	8014b84 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8013236:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8013238:	2d00      	cmp	r5, #0
 801323a:	d16b      	bne.n	8013314 <xQueueReceive+0x2bc>
				if( xTicksToWait == ( TickType_t ) 0 )
 801323c:	9b01      	ldr	r3, [sp, #4]
 801323e:	2b00      	cmp	r3, #0
 8013240:	f47f af2b 	bne.w	801309a <xQueueReceive+0x42>
					taskEXIT_CRITICAL();
 8013244:	f001 fcc0 	bl	8014bc8 <vPortExitCritical>
					return errQUEUE_EMPTY;
 8013248:	2000      	movs	r0, #0
}
 801324a:	b005      	add	sp, #20
 801324c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013250:	f04f 0320 	mov.w	r3, #32
 8013254:	f383 8811 	msr	BASEPRI, r3
 8013258:	f3bf 8f6f 	isb	sy
 801325c:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
 8013260:	e7fe      	b.n	8013260 <xQueueReceive+0x208>
	taskEXIT_CRITICAL();
 8013262:	f001 fcb1 	bl	8014bc8 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8013266:	9901      	ldr	r1, [sp, #4]
 8013268:	4638      	mov	r0, r7
 801326a:	f000 ffeb 	bl	8014244 <vTaskPlaceOnEventList>
	taskENTER_CRITICAL();
 801326e:	f001 fc89 	bl	8014b84 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8013272:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
 8013276:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8013278:	2d00      	cmp	r5, #0
 801327a:	dc05      	bgt.n	8013288 <xQueueReceive+0x230>
 801327c:	e012      	b.n	80132a4 <xQueueReceive+0x24c>
			--cTxLock;
 801327e:	1e6b      	subs	r3, r5, #1
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8013280:	f013 0fff 	tst.w	r3, #255	; 0xff
 8013284:	b25d      	sxtb	r5, r3
 8013286:	d00d      	beq.n	80132a4 <xQueueReceive+0x24c>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8013288:	6a63      	ldr	r3, [r4, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801328a:	4638      	mov	r0, r7
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801328c:	b153      	cbz	r3, 80132a4 <xQueueReceive+0x24c>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801328e:	f001 f889 	bl	80143a4 <xTaskRemoveFromEventList>
 8013292:	2800      	cmp	r0, #0
 8013294:	d0f3      	beq.n	801327e <xQueueReceive+0x226>
						vTaskMissedYield();
 8013296:	f001 f917 	bl	80144c8 <vTaskMissedYield>
			--cTxLock;
 801329a:	1e6b      	subs	r3, r5, #1
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801329c:	f013 0fff 	tst.w	r3, #255	; 0xff
 80132a0:	b25d      	sxtb	r5, r3
 80132a2:	d1f1      	bne.n	8013288 <xQueueReceive+0x230>
		pxQueue->cTxLock = queueUNLOCKED;
 80132a4:	23ff      	movs	r3, #255	; 0xff
 80132a6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 80132aa:	f001 fc8d 	bl	8014bc8 <vPortExitCritical>
	taskENTER_CRITICAL();
 80132ae:	f001 fc69 	bl	8014b84 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 80132b2:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 80132b6:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80132b8:	2d00      	cmp	r5, #0
 80132ba:	dd15      	ble.n	80132e8 <xQueueReceive+0x290>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80132bc:	f104 0910 	add.w	r9, r4, #16
 80132c0:	e004      	b.n	80132cc <xQueueReceive+0x274>
				--cRxLock;
 80132c2:	1e6b      	subs	r3, r5, #1
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80132c4:	f013 0fff 	tst.w	r3, #255	; 0xff
 80132c8:	b25d      	sxtb	r5, r3
 80132ca:	d00d      	beq.n	80132e8 <xQueueReceive+0x290>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80132cc:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80132ce:	4648      	mov	r0, r9
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80132d0:	b153      	cbz	r3, 80132e8 <xQueueReceive+0x290>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80132d2:	f001 f867 	bl	80143a4 <xTaskRemoveFromEventList>
 80132d6:	2800      	cmp	r0, #0
 80132d8:	d0f3      	beq.n	80132c2 <xQueueReceive+0x26a>
					vTaskMissedYield();
 80132da:	f001 f8f5 	bl	80144c8 <vTaskMissedYield>
				--cRxLock;
 80132de:	1e6b      	subs	r3, r5, #1
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80132e0:	f013 0fff 	tst.w	r3, #255	; 0xff
 80132e4:	b25d      	sxtb	r5, r3
 80132e6:	d1f1      	bne.n	80132cc <xQueueReceive+0x274>
		pxQueue->cRxLock = queueUNLOCKED;
 80132e8:	23ff      	movs	r3, #255	; 0xff
 80132ea:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
 80132ee:	f001 fc6b 	bl	8014bc8 <vPortExitCritical>
				if( xTaskResumeAll() == pdFALSE )
 80132f2:	f000 fec7 	bl	8014084 <xTaskResumeAll>
 80132f6:	2800      	cmp	r0, #0
 80132f8:	d19b      	bne.n	8013232 <xQueueReceive+0x1da>
					portYIELD_WITHIN_API();
 80132fa:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80132fe:	f8c8 3000 	str.w	r3, [r8]
 8013302:	f3bf 8f4f 	dsb	sy
 8013306:	f3bf 8f6f 	isb	sy
		taskENTER_CRITICAL();
 801330a:	f001 fc3b 	bl	8014b84 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801330e:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8013310:	2d00      	cmp	r5, #0
 8013312:	d093      	beq.n	801323c <xQueueReceive+0x1e4>
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8013314:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8013316:	b152      	cbz	r2, 801332e <xQueueReceive+0x2d6>
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8013318:	e9d4 0302 	ldrd	r0, r3, [r4, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801331c:	1899      	adds	r1, r3, r2
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 801331e:	4281      	cmp	r1, r0
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8013320:	60e1      	str	r1, [r4, #12]
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8013322:	bf24      	itt	cs
 8013324:	6821      	ldrcs	r1, [r4, #0]
 8013326:	60e1      	strcs	r1, [r4, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8013328:	4630      	mov	r0, r6
 801332a:	f004 fa2b 	bl	8017784 <memcpy>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 801332e:	3d01      	subs	r5, #1
 8013330:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013332:	6923      	ldr	r3, [r4, #16]
 8013334:	b91b      	cbnz	r3, 801333e <xQueueReceive+0x2e6>
				taskEXIT_CRITICAL();
 8013336:	f001 fc47 	bl	8014bc8 <vPortExitCritical>
				return pdPASS;
 801333a:	2001      	movs	r0, #1
 801333c:	e785      	b.n	801324a <xQueueReceive+0x1f2>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801333e:	f104 0010 	add.w	r0, r4, #16
 8013342:	f001 f82f 	bl	80143a4 <xTaskRemoveFromEventList>
 8013346:	2800      	cmp	r0, #0
 8013348:	d0f5      	beq.n	8013336 <xQueueReceive+0x2de>
						queueYIELD_IF_USING_PREEMPTION();
 801334a:	4b04      	ldr	r3, [pc, #16]	; (801335c <xQueueReceive+0x304>)
 801334c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013350:	601a      	str	r2, [r3, #0]
 8013352:	f3bf 8f4f 	dsb	sy
 8013356:	f3bf 8f6f 	isb	sy
 801335a:	e7ec      	b.n	8013336 <xQueueReceive+0x2de>
 801335c:	e000ed04 	.word	0xe000ed04

08013360 <xQueueSemaphoreTake>:
{
 8013360:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013364:	b085      	sub	sp, #20
 8013366:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 8013368:	b158      	cbz	r0, 8013382 <xQueueSemaphoreTake+0x22>
	configASSERT( pxQueue->uxItemSize == 0 );
 801336a:	6c05      	ldr	r5, [r0, #64]	; 0x40
 801336c:	4604      	mov	r4, r0
 801336e:	b18d      	cbz	r5, 8013394 <xQueueSemaphoreTake+0x34>
 8013370:	f04f 0320 	mov.w	r3, #32
 8013374:	f383 8811 	msr	BASEPRI, r3
 8013378:	f3bf 8f6f 	isb	sy
 801337c:	f3bf 8f4f 	dsb	sy
 8013380:	e7fe      	b.n	8013380 <xQueueSemaphoreTake+0x20>
 8013382:	f04f 0320 	mov.w	r3, #32
 8013386:	f383 8811 	msr	BASEPRI, r3
 801338a:	f3bf 8f6f 	isb	sy
 801338e:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
 8013392:	e7fe      	b.n	8013392 <xQueueSemaphoreTake+0x32>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8013394:	f001 f8a0 	bl	80144d8 <xTaskGetSchedulerState>
 8013398:	4606      	mov	r6, r0
 801339a:	2800      	cmp	r0, #0
 801339c:	f000 80c7 	beq.w	801352e <xQueueSemaphoreTake+0x1ce>
 80133a0:	462e      	mov	r6, r5
					portYIELD_WITHIN_API();
 80133a2:	f8df 82d8 	ldr.w	r8, [pc, #728]	; 801367c <xQueueSemaphoreTake+0x31c>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80133a6:	f104 0724 	add.w	r7, r4, #36	; 0x24
		taskENTER_CRITICAL();
 80133aa:	f001 fbeb 	bl	8014b84 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80133ae:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80133b0:	2b00      	cmp	r3, #0
 80133b2:	f040 8121 	bne.w	80135f8 <xQueueSemaphoreTake+0x298>
				if( xTicksToWait == ( TickType_t ) 0 )
 80133b6:	9b01      	ldr	r3, [sp, #4]
 80133b8:	2b00      	cmp	r3, #0
 80133ba:	f000 8152 	beq.w	8013662 <xQueueSemaphoreTake+0x302>
				else if( xEntryTimeSet == pdFALSE )
 80133be:	2e00      	cmp	r6, #0
 80133c0:	f000 80b0 	beq.w	8013524 <xQueueSemaphoreTake+0x1c4>
 80133c4:	ae02      	add	r6, sp, #8
		taskEXIT_CRITICAL();
 80133c6:	f001 fbff 	bl	8014bc8 <vPortExitCritical>
		vTaskSuspendAll();
 80133ca:	f000 fd31 	bl	8013e30 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80133ce:	f001 fbd9 	bl	8014b84 <vPortEnterCritical>
 80133d2:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80133d6:	2bff      	cmp	r3, #255	; 0xff
 80133d8:	bf04      	itt	eq
 80133da:	2300      	moveq	r3, #0
 80133dc:	f884 3044 	strbeq.w	r3, [r4, #68]	; 0x44
 80133e0:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80133e4:	2bff      	cmp	r3, #255	; 0xff
 80133e6:	bf04      	itt	eq
 80133e8:	2300      	moveq	r3, #0
 80133ea:	f884 3045 	strbeq.w	r3, [r4, #69]	; 0x45
 80133ee:	f001 fbeb 	bl	8014bc8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80133f2:	4630      	mov	r0, r6
 80133f4:	a901      	add	r1, sp, #4
 80133f6:	f001 f821 	bl	801443c <xTaskCheckForTimeOut>
 80133fa:	b9f8      	cbnz	r0, 801343c <xQueueSemaphoreTake+0xdc>
	taskENTER_CRITICAL();
 80133fc:	f001 fbc2 	bl	8014b84 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8013400:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8013402:	2b00      	cmp	r3, #0
 8013404:	f000 80a0 	beq.w	8013548 <xQueueSemaphoreTake+0x1e8>
	taskEXIT_CRITICAL();
 8013408:	f001 fbde 	bl	8014bc8 <vPortExitCritical>
	taskENTER_CRITICAL();
 801340c:	f001 fbba 	bl	8014b84 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8013410:	f894 6045 	ldrb.w	r6, [r4, #69]	; 0x45
 8013414:	b276      	sxtb	r6, r6
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8013416:	2e00      	cmp	r6, #0
 8013418:	dc05      	bgt.n	8013426 <xQueueSemaphoreTake+0xc6>
 801341a:	e05d      	b.n	80134d8 <xQueueSemaphoreTake+0x178>
			--cTxLock;
 801341c:	1e73      	subs	r3, r6, #1
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801341e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8013422:	b25e      	sxtb	r6, r3
 8013424:	d058      	beq.n	80134d8 <xQueueSemaphoreTake+0x178>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8013426:	6a63      	ldr	r3, [r4, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8013428:	4638      	mov	r0, r7
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801342a:	2b00      	cmp	r3, #0
 801342c:	d054      	beq.n	80134d8 <xQueueSemaphoreTake+0x178>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801342e:	f000 ffb9 	bl	80143a4 <xTaskRemoveFromEventList>
 8013432:	2800      	cmp	r0, #0
 8013434:	d0f2      	beq.n	801341c <xQueueSemaphoreTake+0xbc>
						vTaskMissedYield();
 8013436:	f001 f847 	bl	80144c8 <vTaskMissedYield>
 801343a:	e7ef      	b.n	801341c <xQueueSemaphoreTake+0xbc>
	taskENTER_CRITICAL();
 801343c:	f001 fba2 	bl	8014b84 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8013440:	f894 6045 	ldrb.w	r6, [r4, #69]	; 0x45
 8013444:	b276      	sxtb	r6, r6
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8013446:	2e00      	cmp	r6, #0
 8013448:	dc05      	bgt.n	8013456 <xQueueSemaphoreTake+0xf6>
 801344a:	e012      	b.n	8013472 <xQueueSemaphoreTake+0x112>
			--cTxLock;
 801344c:	1e73      	subs	r3, r6, #1
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801344e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8013452:	b25e      	sxtb	r6, r3
 8013454:	d00d      	beq.n	8013472 <xQueueSemaphoreTake+0x112>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8013456:	6a63      	ldr	r3, [r4, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8013458:	4638      	mov	r0, r7
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801345a:	b153      	cbz	r3, 8013472 <xQueueSemaphoreTake+0x112>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801345c:	f000 ffa2 	bl	80143a4 <xTaskRemoveFromEventList>
 8013460:	2800      	cmp	r0, #0
 8013462:	d0f3      	beq.n	801344c <xQueueSemaphoreTake+0xec>
						vTaskMissedYield();
 8013464:	f001 f830 	bl	80144c8 <vTaskMissedYield>
			--cTxLock;
 8013468:	1e73      	subs	r3, r6, #1
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801346a:	f013 0fff 	tst.w	r3, #255	; 0xff
 801346e:	b25e      	sxtb	r6, r3
 8013470:	d1f1      	bne.n	8013456 <xQueueSemaphoreTake+0xf6>
		pxQueue->cTxLock = queueUNLOCKED;
 8013472:	23ff      	movs	r3, #255	; 0xff
 8013474:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 8013478:	f001 fba6 	bl	8014bc8 <vPortExitCritical>
	taskENTER_CRITICAL();
 801347c:	f001 fb82 	bl	8014b84 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8013480:	f894 6044 	ldrb.w	r6, [r4, #68]	; 0x44
 8013484:	b276      	sxtb	r6, r6
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8013486:	2e00      	cmp	r6, #0
 8013488:	dd15      	ble.n	80134b6 <xQueueSemaphoreTake+0x156>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801348a:	f104 0910 	add.w	r9, r4, #16
 801348e:	e004      	b.n	801349a <xQueueSemaphoreTake+0x13a>
				--cRxLock;
 8013490:	1e73      	subs	r3, r6, #1
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8013492:	f013 0fff 	tst.w	r3, #255	; 0xff
 8013496:	b25e      	sxtb	r6, r3
 8013498:	d00d      	beq.n	80134b6 <xQueueSemaphoreTake+0x156>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801349a:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801349c:	4648      	mov	r0, r9
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801349e:	b153      	cbz	r3, 80134b6 <xQueueSemaphoreTake+0x156>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80134a0:	f000 ff80 	bl	80143a4 <xTaskRemoveFromEventList>
 80134a4:	2800      	cmp	r0, #0
 80134a6:	d0f3      	beq.n	8013490 <xQueueSemaphoreTake+0x130>
					vTaskMissedYield();
 80134a8:	f001 f80e 	bl	80144c8 <vTaskMissedYield>
				--cRxLock;
 80134ac:	1e73      	subs	r3, r6, #1
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80134ae:	f013 0fff 	tst.w	r3, #255	; 0xff
 80134b2:	b25e      	sxtb	r6, r3
 80134b4:	d1f1      	bne.n	801349a <xQueueSemaphoreTake+0x13a>
		pxQueue->cRxLock = queueUNLOCKED;
 80134b6:	23ff      	movs	r3, #255	; 0xff
 80134b8:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
 80134bc:	f001 fb84 	bl	8014bc8 <vPortExitCritical>
			( void ) xTaskResumeAll();
 80134c0:	f000 fde0 	bl	8014084 <xTaskResumeAll>
	taskENTER_CRITICAL();
 80134c4:	f001 fb5e 	bl	8014b84 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80134c8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80134ca:	2b00      	cmp	r3, #0
 80134cc:	f000 808d 	beq.w	80135ea <xQueueSemaphoreTake+0x28a>
	taskEXIT_CRITICAL();
 80134d0:	f001 fb7a 	bl	8014bc8 <vPortExitCritical>
	return xReturn;
 80134d4:	2601      	movs	r6, #1
 80134d6:	e768      	b.n	80133aa <xQueueSemaphoreTake+0x4a>
		pxQueue->cTxLock = queueUNLOCKED;
 80134d8:	23ff      	movs	r3, #255	; 0xff
 80134da:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 80134de:	f001 fb73 	bl	8014bc8 <vPortExitCritical>
	taskENTER_CRITICAL();
 80134e2:	f001 fb4f 	bl	8014b84 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 80134e6:	f894 6044 	ldrb.w	r6, [r4, #68]	; 0x44
 80134ea:	b276      	sxtb	r6, r6
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80134ec:	2e00      	cmp	r6, #0
 80134ee:	dd11      	ble.n	8013514 <xQueueSemaphoreTake+0x1b4>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80134f0:	f104 0910 	add.w	r9, r4, #16
 80134f4:	e004      	b.n	8013500 <xQueueSemaphoreTake+0x1a0>
				--cRxLock;
 80134f6:	1e73      	subs	r3, r6, #1
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80134f8:	f013 0fff 	tst.w	r3, #255	; 0xff
 80134fc:	b25e      	sxtb	r6, r3
 80134fe:	d009      	beq.n	8013514 <xQueueSemaphoreTake+0x1b4>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013500:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013502:	4648      	mov	r0, r9
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013504:	b133      	cbz	r3, 8013514 <xQueueSemaphoreTake+0x1b4>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013506:	f000 ff4d 	bl	80143a4 <xTaskRemoveFromEventList>
 801350a:	2800      	cmp	r0, #0
 801350c:	d0f3      	beq.n	80134f6 <xQueueSemaphoreTake+0x196>
					vTaskMissedYield();
 801350e:	f000 ffdb 	bl	80144c8 <vTaskMissedYield>
 8013512:	e7f0      	b.n	80134f6 <xQueueSemaphoreTake+0x196>
		pxQueue->cRxLock = queueUNLOCKED;
 8013514:	23ff      	movs	r3, #255	; 0xff
 8013516:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
 801351a:	f001 fb55 	bl	8014bc8 <vPortExitCritical>
				( void ) xTaskResumeAll();
 801351e:	f000 fdb1 	bl	8014084 <xTaskResumeAll>
 8013522:	e7d7      	b.n	80134d4 <xQueueSemaphoreTake+0x174>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8013524:	ae02      	add	r6, sp, #8
 8013526:	4630      	mov	r0, r6
 8013528:	f000 ff7e 	bl	8014428 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801352c:	e74b      	b.n	80133c6 <xQueueSemaphoreTake+0x66>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801352e:	9b01      	ldr	r3, [sp, #4]
 8013530:	b143      	cbz	r3, 8013544 <xQueueSemaphoreTake+0x1e4>
 8013532:	f04f 0320 	mov.w	r3, #32
 8013536:	f383 8811 	msr	BASEPRI, r3
 801353a:	f3bf 8f6f 	isb	sy
 801353e:	f3bf 8f4f 	dsb	sy
 8013542:	e7fe      	b.n	8013542 <xQueueSemaphoreTake+0x1e2>
 8013544:	4605      	mov	r5, r0
 8013546:	e72c      	b.n	80133a2 <xQueueSemaphoreTake+0x42>
	taskEXIT_CRITICAL();
 8013548:	f001 fb3e 	bl	8014bc8 <vPortExitCritical>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801354c:	6823      	ldr	r3, [r4, #0]
 801354e:	2b00      	cmp	r3, #0
 8013550:	d07e      	beq.n	8013650 <xQueueSemaphoreTake+0x2f0>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8013552:	9901      	ldr	r1, [sp, #4]
 8013554:	4638      	mov	r0, r7
 8013556:	f000 fe75 	bl	8014244 <vTaskPlaceOnEventList>
	taskENTER_CRITICAL();
 801355a:	f001 fb13 	bl	8014b84 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 801355e:	f894 6045 	ldrb.w	r6, [r4, #69]	; 0x45
 8013562:	b276      	sxtb	r6, r6
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8013564:	2e00      	cmp	r6, #0
 8013566:	dc05      	bgt.n	8013574 <xQueueSemaphoreTake+0x214>
 8013568:	e00e      	b.n	8013588 <xQueueSemaphoreTake+0x228>
			--cTxLock;
 801356a:	1e73      	subs	r3, r6, #1
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801356c:	f013 0fff 	tst.w	r3, #255	; 0xff
 8013570:	b25e      	sxtb	r6, r3
 8013572:	d009      	beq.n	8013588 <xQueueSemaphoreTake+0x228>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8013574:	6a63      	ldr	r3, [r4, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8013576:	4638      	mov	r0, r7
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8013578:	b133      	cbz	r3, 8013588 <xQueueSemaphoreTake+0x228>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801357a:	f000 ff13 	bl	80143a4 <xTaskRemoveFromEventList>
 801357e:	2800      	cmp	r0, #0
 8013580:	d0f3      	beq.n	801356a <xQueueSemaphoreTake+0x20a>
						vTaskMissedYield();
 8013582:	f000 ffa1 	bl	80144c8 <vTaskMissedYield>
 8013586:	e7f0      	b.n	801356a <xQueueSemaphoreTake+0x20a>
		pxQueue->cTxLock = queueUNLOCKED;
 8013588:	23ff      	movs	r3, #255	; 0xff
 801358a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 801358e:	f001 fb1b 	bl	8014bc8 <vPortExitCritical>
	taskENTER_CRITICAL();
 8013592:	f001 faf7 	bl	8014b84 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8013596:	f894 6044 	ldrb.w	r6, [r4, #68]	; 0x44
 801359a:	b276      	sxtb	r6, r6
		while( cRxLock > queueLOCKED_UNMODIFIED )
 801359c:	2e00      	cmp	r6, #0
 801359e:	dd11      	ble.n	80135c4 <xQueueSemaphoreTake+0x264>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80135a0:	f104 0910 	add.w	r9, r4, #16
 80135a4:	e004      	b.n	80135b0 <xQueueSemaphoreTake+0x250>
				--cRxLock;
 80135a6:	1e73      	subs	r3, r6, #1
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80135a8:	f013 0fff 	tst.w	r3, #255	; 0xff
 80135ac:	b25e      	sxtb	r6, r3
 80135ae:	d009      	beq.n	80135c4 <xQueueSemaphoreTake+0x264>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80135b0:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80135b2:	4648      	mov	r0, r9
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80135b4:	b133      	cbz	r3, 80135c4 <xQueueSemaphoreTake+0x264>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80135b6:	f000 fef5 	bl	80143a4 <xTaskRemoveFromEventList>
 80135ba:	2800      	cmp	r0, #0
 80135bc:	d0f3      	beq.n	80135a6 <xQueueSemaphoreTake+0x246>
					vTaskMissedYield();
 80135be:	f000 ff83 	bl	80144c8 <vTaskMissedYield>
 80135c2:	e7f0      	b.n	80135a6 <xQueueSemaphoreTake+0x246>
		pxQueue->cRxLock = queueUNLOCKED;
 80135c4:	23ff      	movs	r3, #255	; 0xff
 80135c6:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
 80135ca:	f001 fafd 	bl	8014bc8 <vPortExitCritical>
				if( xTaskResumeAll() == pdFALSE )
 80135ce:	f000 fd59 	bl	8014084 <xTaskResumeAll>
 80135d2:	2800      	cmp	r0, #0
 80135d4:	f47f af7e 	bne.w	80134d4 <xQueueSemaphoreTake+0x174>
					portYIELD_WITHIN_API();
 80135d8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80135dc:	f8c8 3000 	str.w	r3, [r8]
 80135e0:	f3bf 8f4f 	dsb	sy
 80135e4:	f3bf 8f6f 	isb	sy
 80135e8:	e774      	b.n	80134d4 <xQueueSemaphoreTake+0x174>
	taskEXIT_CRITICAL();
 80135ea:	f001 faed 	bl	8014bc8 <vPortExitCritical>
					if( xInheritanceOccurred != pdFALSE )
 80135ee:	b96d      	cbnz	r5, 801360c <xQueueSemaphoreTake+0x2ac>
}
 80135f0:	4628      	mov	r0, r5
 80135f2:	b005      	add	sp, #20
 80135f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80135f8:	6822      	ldr	r2, [r4, #0]
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80135fa:	3b01      	subs	r3, #1
 80135fc:	63a3      	str	r3, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80135fe:	b31a      	cbz	r2, 8013648 <xQueueSemaphoreTake+0x2e8>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013600:	6923      	ldr	r3, [r4, #16]
 8013602:	b993      	cbnz	r3, 801362a <xQueueSemaphoreTake+0x2ca>
				taskEXIT_CRITICAL();
 8013604:	f001 fae0 	bl	8014bc8 <vPortExitCritical>
				return pdPASS;
 8013608:	2501      	movs	r5, #1
 801360a:	e7f1      	b.n	80135f0 <xQueueSemaphoreTake+0x290>
						taskENTER_CRITICAL();
 801360c:	f001 faba 	bl	8014b84 <vPortEnterCritical>
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8013610:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8013612:	b119      	cbz	r1, 801361c <xQueueSemaphoreTake+0x2bc>
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8013614:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8013616:	6819      	ldr	r1, [r3, #0]
 8013618:	f1c1 0107 	rsb	r1, r1, #7
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 801361c:	68a0      	ldr	r0, [r4, #8]
 801361e:	f001 f821 	bl	8014664 <vTaskPriorityDisinheritAfterTimeout>
				return errQUEUE_EMPTY;
 8013622:	2500      	movs	r5, #0
						taskEXIT_CRITICAL();
 8013624:	f001 fad0 	bl	8014bc8 <vPortExitCritical>
 8013628:	e7e2      	b.n	80135f0 <xQueueSemaphoreTake+0x290>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801362a:	f104 0010 	add.w	r0, r4, #16
 801362e:	f000 feb9 	bl	80143a4 <xTaskRemoveFromEventList>
 8013632:	2800      	cmp	r0, #0
 8013634:	d0e6      	beq.n	8013604 <xQueueSemaphoreTake+0x2a4>
						queueYIELD_IF_USING_PREEMPTION();
 8013636:	4b11      	ldr	r3, [pc, #68]	; (801367c <xQueueSemaphoreTake+0x31c>)
 8013638:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801363c:	601a      	str	r2, [r3, #0]
 801363e:	f3bf 8f4f 	dsb	sy
 8013642:	f3bf 8f6f 	isb	sy
 8013646:	e7dd      	b.n	8013604 <xQueueSemaphoreTake+0x2a4>
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8013648:	f001 f874 	bl	8014734 <pvTaskIncrementMutexHeldCount>
 801364c:	60a0      	str	r0, [r4, #8]
 801364e:	e7d7      	b.n	8013600 <xQueueSemaphoreTake+0x2a0>
						taskENTER_CRITICAL();
 8013650:	f001 fa98 	bl	8014b84 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8013654:	68a0      	ldr	r0, [r4, #8]
 8013656:	f000 ff4f 	bl	80144f8 <xTaskPriorityInherit>
 801365a:	4605      	mov	r5, r0
						taskEXIT_CRITICAL();
 801365c:	f001 fab4 	bl	8014bc8 <vPortExitCritical>
 8013660:	e777      	b.n	8013552 <xQueueSemaphoreTake+0x1f2>
						configASSERT( xInheritanceOccurred == pdFALSE );
 8013662:	b145      	cbz	r5, 8013676 <xQueueSemaphoreTake+0x316>
 8013664:	f04f 0320 	mov.w	r3, #32
 8013668:	f383 8811 	msr	BASEPRI, r3
 801366c:	f3bf 8f6f 	isb	sy
 8013670:	f3bf 8f4f 	dsb	sy
 8013674:	e7fe      	b.n	8013674 <xQueueSemaphoreTake+0x314>
					taskEXIT_CRITICAL();
 8013676:	f001 faa7 	bl	8014bc8 <vPortExitCritical>
					return errQUEUE_EMPTY;
 801367a:	e7b9      	b.n	80135f0 <xQueueSemaphoreTake+0x290>
 801367c:	e000ed04 	.word	0xe000ed04

08013680 <xQueueReceiveFromISR>:
{
 8013680:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 8013684:	b310      	cbz	r0, 80136cc <xQueueReceiveFromISR+0x4c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8013686:	4689      	mov	r9, r1
 8013688:	4690      	mov	r8, r2
 801368a:	4604      	mov	r4, r0
 801368c:	b191      	cbz	r1, 80136b4 <xQueueReceiveFromISR+0x34>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801368e:	f001 fbaf 	bl	8014df0 <vPortValidateInterruptPriority>
	__asm volatile
 8013692:	f3ef 8711 	mrs	r7, BASEPRI
 8013696:	f04f 0320 	mov.w	r3, #32
 801369a:	f383 8811 	msr	BASEPRI, r3
 801369e:	f3bf 8f6f 	isb	sy
 80136a2:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80136a6:	6ba5      	ldr	r5, [r4, #56]	; 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80136a8:	b9cd      	cbnz	r5, 80136de <xQueueReceiveFromISR+0x5e>
			xReturn = pdFAIL;
 80136aa:	4628      	mov	r0, r5
	__asm volatile
 80136ac:	f387 8811 	msr	BASEPRI, r7
}
 80136b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80136b4:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80136b6:	2b00      	cmp	r3, #0
 80136b8:	d0e9      	beq.n	801368e <xQueueReceiveFromISR+0xe>
	__asm volatile
 80136ba:	f04f 0320 	mov.w	r3, #32
 80136be:	f383 8811 	msr	BASEPRI, r3
 80136c2:	f3bf 8f6f 	isb	sy
 80136c6:	f3bf 8f4f 	dsb	sy
 80136ca:	e7fe      	b.n	80136ca <xQueueReceiveFromISR+0x4a>
 80136cc:	f04f 0320 	mov.w	r3, #32
 80136d0:	f383 8811 	msr	BASEPRI, r3
 80136d4:	f3bf 8f6f 	isb	sy
 80136d8:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 80136dc:	e7fe      	b.n	80136dc <xQueueReceiveFromISR+0x5c>
			const int8_t cRxLock = pxQueue->cRxLock;
 80136de:	f894 6044 	ldrb.w	r6, [r4, #68]	; 0x44
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80136e2:	6c22      	ldr	r2, [r4, #64]	; 0x40
			const int8_t cRxLock = pxQueue->cRxLock;
 80136e4:	b276      	sxtb	r6, r6
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80136e6:	b152      	cbz	r2, 80136fe <xQueueReceiveFromISR+0x7e>
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80136e8:	68e3      	ldr	r3, [r4, #12]
 80136ea:	1899      	adds	r1, r3, r2
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80136ec:	68a3      	ldr	r3, [r4, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80136ee:	60e1      	str	r1, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80136f0:	4299      	cmp	r1, r3
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80136f2:	bf24      	itt	cs
 80136f4:	6821      	ldrcs	r1, [r4, #0]
 80136f6:	60e1      	strcs	r1, [r4, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80136f8:	4648      	mov	r0, r9
 80136fa:	f004 f843 	bl	8017784 <memcpy>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80136fe:	3d01      	subs	r5, #1
			if( cRxLock == queueUNLOCKED )
 8013700:	1c73      	adds	r3, r6, #1
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8013702:	63a5      	str	r5, [r4, #56]	; 0x38
			if( cRxLock == queueUNLOCKED )
 8013704:	d008      	beq.n	8013718 <xQueueReceiveFromISR+0x98>
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8013706:	1c73      	adds	r3, r6, #1
 8013708:	b25b      	sxtb	r3, r3
 801370a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
			xReturn = pdPASS;
 801370e:	2001      	movs	r0, #1
	__asm volatile
 8013710:	f387 8811 	msr	BASEPRI, r7
}
 8013714:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013718:	6923      	ldr	r3, [r4, #16]
 801371a:	2b00      	cmp	r3, #0
 801371c:	d0f7      	beq.n	801370e <xQueueReceiveFromISR+0x8e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801371e:	f104 0010 	add.w	r0, r4, #16
 8013722:	f000 fe3f 	bl	80143a4 <xTaskRemoveFromEventList>
 8013726:	2800      	cmp	r0, #0
 8013728:	d0f1      	beq.n	801370e <xQueueReceiveFromISR+0x8e>
						if( pxHigherPriorityTaskWoken != NULL )
 801372a:	f1b8 0f00 	cmp.w	r8, #0
 801372e:	d0ee      	beq.n	801370e <xQueueReceiveFromISR+0x8e>
							*pxHigherPriorityTaskWoken = pdTRUE;
 8013730:	2001      	movs	r0, #1
 8013732:	f8c8 0000 	str.w	r0, [r8]
 8013736:	e7b9      	b.n	80136ac <xQueueReceiveFromISR+0x2c>

08013738 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8013738:	b430      	push	{r4, r5}
 801373a:	4a08      	ldr	r2, [pc, #32]	; (801375c <vQueueAddToRegistry+0x24>)
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801373c:	2300      	movs	r3, #0
 801373e:	e002      	b.n	8013746 <vQueueAddToRegistry+0xe>
 8013740:	3301      	adds	r3, #1
 8013742:	2b64      	cmp	r3, #100	; 0x64
 8013744:	d008      	beq.n	8013758 <vQueueAddToRegistry+0x20>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8013746:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
 801374a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 801374e:	2c00      	cmp	r4, #0
 8013750:	d1f6      	bne.n	8013740 <vQueueAddToRegistry+0x8>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8013752:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8013756:	6068      	str	r0, [r5, #4]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8013758:	bc30      	pop	{r4, r5}
 801375a:	4770      	bx	lr
 801375c:	2001e0cc 	.word	0x2001e0cc

08013760 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8013760:	b570      	push	{r4, r5, r6, lr}
 8013762:	4604      	mov	r4, r0
 8013764:	460e      	mov	r6, r1
 8013766:	4615      	mov	r5, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8013768:	f001 fa0c 	bl	8014b84 <vPortEnterCritical>
 801376c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8013770:	2bff      	cmp	r3, #255	; 0xff
 8013772:	bf04      	itt	eq
 8013774:	2300      	moveq	r3, #0
 8013776:	f884 3044 	strbeq.w	r3, [r4, #68]	; 0x44
 801377a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 801377e:	2bff      	cmp	r3, #255	; 0xff
 8013780:	bf04      	itt	eq
 8013782:	2300      	moveq	r3, #0
 8013784:	f884 3045 	strbeq.w	r3, [r4, #69]	; 0x45
 8013788:	f001 fa1e 	bl	8014bc8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 801378c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801378e:	2b00      	cmp	r3, #0
 8013790:	d045      	beq.n	801381e <vQueueWaitForMessageRestricted+0xbe>
	taskENTER_CRITICAL();
 8013792:	f001 f9f7 	bl	8014b84 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8013796:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
 801379a:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801379c:	2d00      	cmp	r5, #0
 801379e:	dd15      	ble.n	80137cc <vQueueWaitForMessageRestricted+0x6c>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80137a0:	f104 0624 	add.w	r6, r4, #36	; 0x24
 80137a4:	e004      	b.n	80137b0 <vQueueWaitForMessageRestricted+0x50>
			--cTxLock;
 80137a6:	1e6b      	subs	r3, r5, #1
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80137a8:	f013 0fff 	tst.w	r3, #255	; 0xff
 80137ac:	b25d      	sxtb	r5, r3
 80137ae:	d00d      	beq.n	80137cc <vQueueWaitForMessageRestricted+0x6c>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80137b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80137b2:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80137b4:	b153      	cbz	r3, 80137cc <vQueueWaitForMessageRestricted+0x6c>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80137b6:	f000 fdf5 	bl	80143a4 <xTaskRemoveFromEventList>
 80137ba:	2800      	cmp	r0, #0
 80137bc:	d0f3      	beq.n	80137a6 <vQueueWaitForMessageRestricted+0x46>
						vTaskMissedYield();
 80137be:	f000 fe83 	bl	80144c8 <vTaskMissedYield>
			--cTxLock;
 80137c2:	1e6b      	subs	r3, r5, #1
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80137c4:	f013 0fff 	tst.w	r3, #255	; 0xff
 80137c8:	b25d      	sxtb	r5, r3
 80137ca:	d1f1      	bne.n	80137b0 <vQueueWaitForMessageRestricted+0x50>
		pxQueue->cTxLock = queueUNLOCKED;
 80137cc:	23ff      	movs	r3, #255	; 0xff
 80137ce:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 80137d2:	f001 f9f9 	bl	8014bc8 <vPortExitCritical>
	taskENTER_CRITICAL();
 80137d6:	f001 f9d5 	bl	8014b84 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 80137da:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 80137de:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80137e0:	2d00      	cmp	r5, #0
 80137e2:	dd15      	ble.n	8013810 <vQueueWaitForMessageRestricted+0xb0>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80137e4:	f104 0610 	add.w	r6, r4, #16
 80137e8:	e004      	b.n	80137f4 <vQueueWaitForMessageRestricted+0x94>
				--cRxLock;
 80137ea:	1e6b      	subs	r3, r5, #1
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80137ec:	f013 0fff 	tst.w	r3, #255	; 0xff
 80137f0:	b25d      	sxtb	r5, r3
 80137f2:	d00d      	beq.n	8013810 <vQueueWaitForMessageRestricted+0xb0>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80137f4:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80137f6:	4630      	mov	r0, r6
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80137f8:	b153      	cbz	r3, 8013810 <vQueueWaitForMessageRestricted+0xb0>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80137fa:	f000 fdd3 	bl	80143a4 <xTaskRemoveFromEventList>
 80137fe:	2800      	cmp	r0, #0
 8013800:	d0f3      	beq.n	80137ea <vQueueWaitForMessageRestricted+0x8a>
					vTaskMissedYield();
 8013802:	f000 fe61 	bl	80144c8 <vTaskMissedYield>
				--cRxLock;
 8013806:	1e6b      	subs	r3, r5, #1
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8013808:	f013 0fff 	tst.w	r3, #255	; 0xff
 801380c:	b25d      	sxtb	r5, r3
 801380e:	d1f1      	bne.n	80137f4 <vQueueWaitForMessageRestricted+0x94>
		pxQueue->cRxLock = queueUNLOCKED;
 8013810:	23ff      	movs	r3, #255	; 0xff
 8013812:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
	}
 8013816:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 801381a:	f001 b9d5 	b.w	8014bc8 <vPortExitCritical>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 801381e:	462a      	mov	r2, r5
 8013820:	4631      	mov	r1, r6
 8013822:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8013826:	f000 fd5d 	bl	80142e4 <vTaskPlaceOnEventListRestricted>
 801382a:	e7b2      	b.n	8013792 <vQueueWaitForMessageRestricted+0x32>

0801382c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 801382c:	b580      	push	{r7, lr}
 801382e:	4c14      	ldr	r4, [pc, #80]	; (8013880 <prvIdleTask+0x54>)
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
			{
				taskYIELD();
 8013830:	4f14      	ldr	r7, [pc, #80]	; (8013884 <prvIdleTask+0x58>)
 8013832:	f04f 5680 	mov.w	r6, #268435456	; 0x10000000
 8013836:	e014      	b.n	8013862 <prvIdleTask+0x36>

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
		{
			taskENTER_CRITICAL();
 8013838:	f001 f9a4 	bl	8014b84 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801383c:	6923      	ldr	r3, [r4, #16]
 801383e:	68dd      	ldr	r5, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8013840:	1d28      	adds	r0, r5, #4
 8013842:	f7ff f8e7 	bl	8012a14 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8013846:	69a3      	ldr	r3, [r4, #24]
 8013848:	3b01      	subs	r3, #1
 801384a:	61a3      	str	r3, [r4, #24]
				--uxDeletedTasksWaitingCleanUp;
 801384c:	6823      	ldr	r3, [r4, #0]
 801384e:	3b01      	subs	r3, #1
 8013850:	6023      	str	r3, [r4, #0]
			}
			taskEXIT_CRITICAL();
 8013852:	f001 f9b9 	bl	8014bc8 <vPortExitCritical>

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8013856:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8013858:	f001 fb98 	bl	8014f8c <vPortFree>
			vPortFree( pxTCB );
 801385c:	4628      	mov	r0, r5
 801385e:	f001 fb95 	bl	8014f8c <vPortFree>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8013862:	6823      	ldr	r3, [r4, #0]
 8013864:	2b00      	cmp	r3, #0
 8013866:	d1e7      	bne.n	8013838 <prvIdleTask+0xc>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8013868:	69e3      	ldr	r3, [r4, #28]
 801386a:	2b01      	cmp	r3, #1
 801386c:	d904      	bls.n	8013878 <prvIdleTask+0x4c>
				taskYIELD();
 801386e:	603e      	str	r6, [r7, #0]
 8013870:	f3bf 8f4f 	dsb	sy
 8013874:	f3bf 8f6f 	isb	sy
			vApplicationIdleHook();
 8013878:	f7ef faf8 	bl	8002e6c <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 801387c:	e7f1      	b.n	8013862 <prvIdleTask+0x36>
 801387e:	bf00      	nop
 8013880:	20002054 	.word	0x20002054
 8013884:	e000ed04 	.word	0xe000ed04

08013888 <xTaskCreate>:
	{
 8013888:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 801388c:	0096      	lsls	r6, r2, #2
	{
 801388e:	4680      	mov	r8, r0
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8013890:	4630      	mov	r0, r6
	{
 8013892:	460d      	mov	r5, r1
 8013894:	4699      	mov	r9, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8013896:	f001 fad7 	bl	8014e48 <pvPortMalloc>
			if( pxStack != NULL )
 801389a:	2800      	cmp	r0, #0
 801389c:	f000 80cd 	beq.w	8013a3a <xTaskCreate+0x1b2>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80138a0:	4607      	mov	r7, r0
 80138a2:	2060      	movs	r0, #96	; 0x60
 80138a4:	f001 fad0 	bl	8014e48 <pvPortMalloc>
				if( pxNewTCB != NULL )
 80138a8:	4604      	mov	r4, r0
 80138aa:	2800      	cmp	r0, #0
 80138ac:	f000 80d4 	beq.w	8013a58 <xTaskCreate+0x1d0>
					pxNewTCB->pxStack = pxStack;
 80138b0:	6307      	str	r7, [r0, #48]	; 0x30
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80138b2:	4632      	mov	r2, r6
 80138b4:	4638      	mov	r0, r7
 80138b6:	21a5      	movs	r1, #165	; 0xa5
 80138b8:	f003 ff8c 	bl	80177d4 <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80138bc:	f8d4 b030 	ldr.w	fp, [r4, #48]	; 0x30
	if( pcName != NULL )
 80138c0:	2d00      	cmp	r5, #0
 80138c2:	f000 810f 	beq.w	8013ae4 <xTaskCreate+0x25c>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80138c6:	782b      	ldrb	r3, [r5, #0]
 80138c8:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
			if( pcName[ x ] == ( char ) 0x00 )
 80138cc:	782b      	ldrb	r3, [r5, #0]
 80138ce:	2b00      	cmp	r3, #0
 80138d0:	d04d      	beq.n	801396e <xTaskCreate+0xe6>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80138d2:	786b      	ldrb	r3, [r5, #1]
 80138d4:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
			if( pcName[ x ] == ( char ) 0x00 )
 80138d8:	786b      	ldrb	r3, [r5, #1]
 80138da:	2b00      	cmp	r3, #0
 80138dc:	d047      	beq.n	801396e <xTaskCreate+0xe6>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80138de:	78ab      	ldrb	r3, [r5, #2]
 80138e0:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
			if( pcName[ x ] == ( char ) 0x00 )
 80138e4:	78ab      	ldrb	r3, [r5, #2]
 80138e6:	2b00      	cmp	r3, #0
 80138e8:	d041      	beq.n	801396e <xTaskCreate+0xe6>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80138ea:	78eb      	ldrb	r3, [r5, #3]
 80138ec:	f884 3037 	strb.w	r3, [r4, #55]	; 0x37
			if( pcName[ x ] == ( char ) 0x00 )
 80138f0:	78eb      	ldrb	r3, [r5, #3]
 80138f2:	2b00      	cmp	r3, #0
 80138f4:	d03b      	beq.n	801396e <xTaskCreate+0xe6>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80138f6:	792b      	ldrb	r3, [r5, #4]
 80138f8:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
			if( pcName[ x ] == ( char ) 0x00 )
 80138fc:	792b      	ldrb	r3, [r5, #4]
 80138fe:	2b00      	cmp	r3, #0
 8013900:	d035      	beq.n	801396e <xTaskCreate+0xe6>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8013902:	796b      	ldrb	r3, [r5, #5]
 8013904:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
			if( pcName[ x ] == ( char ) 0x00 )
 8013908:	796b      	ldrb	r3, [r5, #5]
 801390a:	2b00      	cmp	r3, #0
 801390c:	d02f      	beq.n	801396e <xTaskCreate+0xe6>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 801390e:	79ab      	ldrb	r3, [r5, #6]
 8013910:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
			if( pcName[ x ] == ( char ) 0x00 )
 8013914:	79ab      	ldrb	r3, [r5, #6]
 8013916:	b353      	cbz	r3, 801396e <xTaskCreate+0xe6>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8013918:	79eb      	ldrb	r3, [r5, #7]
 801391a:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b
			if( pcName[ x ] == ( char ) 0x00 )
 801391e:	79eb      	ldrb	r3, [r5, #7]
 8013920:	b32b      	cbz	r3, 801396e <xTaskCreate+0xe6>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8013922:	7a2b      	ldrb	r3, [r5, #8]
 8013924:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
			if( pcName[ x ] == ( char ) 0x00 )
 8013928:	7a2b      	ldrb	r3, [r5, #8]
 801392a:	b303      	cbz	r3, 801396e <xTaskCreate+0xe6>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 801392c:	7a6b      	ldrb	r3, [r5, #9]
 801392e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
			if( pcName[ x ] == ( char ) 0x00 )
 8013932:	7a6b      	ldrb	r3, [r5, #9]
 8013934:	b1db      	cbz	r3, 801396e <xTaskCreate+0xe6>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8013936:	7aab      	ldrb	r3, [r5, #10]
 8013938:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
			if( pcName[ x ] == ( char ) 0x00 )
 801393c:	7aab      	ldrb	r3, [r5, #10]
 801393e:	b1b3      	cbz	r3, 801396e <xTaskCreate+0xe6>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8013940:	7aeb      	ldrb	r3, [r5, #11]
 8013942:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
			if( pcName[ x ] == ( char ) 0x00 )
 8013946:	7aeb      	ldrb	r3, [r5, #11]
 8013948:	b18b      	cbz	r3, 801396e <xTaskCreate+0xe6>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 801394a:	7b2b      	ldrb	r3, [r5, #12]
 801394c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
			if( pcName[ x ] == ( char ) 0x00 )
 8013950:	7b2b      	ldrb	r3, [r5, #12]
 8013952:	b163      	cbz	r3, 801396e <xTaskCreate+0xe6>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8013954:	7b6b      	ldrb	r3, [r5, #13]
 8013956:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
			if( pcName[ x ] == ( char ) 0x00 )
 801395a:	7b6b      	ldrb	r3, [r5, #13]
 801395c:	b13b      	cbz	r3, 801396e <xTaskCreate+0xe6>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 801395e:	7bab      	ldrb	r3, [r5, #14]
 8013960:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
			if( pcName[ x ] == ( char ) 0x00 )
 8013964:	7bab      	ldrb	r3, [r5, #14]
 8013966:	b113      	cbz	r3, 801396e <xTaskCreate+0xe6>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8013968:	7beb      	ldrb	r3, [r5, #15]
 801396a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 801396e:	2300      	movs	r3, #0
 8013970:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8013974:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8013976:	2d06      	cmp	r5, #6
 8013978:	bf28      	it	cs
 801397a:	2506      	movcs	r5, #6
		pxNewTCB->uxMutexesHeld = 0;
 801397c:	f04f 0a00 	mov.w	sl, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8013980:	1d27      	adds	r7, r4, #4
		pxNewTCB->uxMutexesHeld = 0;
 8013982:	e9c4 5a13 	strd	r5, sl, [r4, #76]	; 0x4c
	pxNewTCB->uxPriority = uxPriority;
 8013986:	62e5      	str	r5, [r4, #44]	; 0x2c
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8013988:	4638      	mov	r0, r7
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 801398a:	3e04      	subs	r6, #4
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 801398c:	f7ff f816 	bl	80129bc <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013990:	f1c5 0507 	rsb	r5, r5, #7
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8013994:	f104 0018 	add.w	r0, r4, #24
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8013998:	445e      	add	r6, fp
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 801399a:	f7ff f80f 	bl	80129bc <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 801399e:	f8c4 a058 	str.w	sl, [r4, #88]	; 0x58
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80139a2:	61a5      	str	r5, [r4, #24]
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80139a4:	f026 0007 	bic.w	r0, r6, #7
		pxNewTCB->pxTaskTag = NULL;
 80139a8:	f8c4 a054 	str.w	sl, [r4, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80139ac:	f884 a05c 	strb.w	sl, [r4, #92]	; 0x5c
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80139b0:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80139b2:	6264      	str	r4, [r4, #36]	; 0x24
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80139b4:	464a      	mov	r2, r9
 80139b6:	4641      	mov	r1, r8
 80139b8:	f001 f8b8 	bl	8014b2c <pxPortInitialiseStack>
	if( pxCreatedTask != NULL )
 80139bc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80139be:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 80139c0:	b103      	cbz	r3, 80139c4 <xTaskCreate+0x13c>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80139c2:	601c      	str	r4, [r3, #0]
		uxCurrentNumberOfTasks++;
 80139c4:	4e49      	ldr	r6, [pc, #292]	; (8013aec <xTaskCreate+0x264>)
	taskENTER_CRITICAL();
 80139c6:	f001 f8dd 	bl	8014b84 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 80139ca:	69b3      	ldr	r3, [r6, #24]
 80139cc:	3301      	adds	r3, #1
 80139ce:	61b3      	str	r3, [r6, #24]
		if( pxCurrentTCB == NULL )
 80139d0:	f8d6 30ac 	ldr.w	r3, [r6, #172]	; 0xac
 80139d4:	2b00      	cmp	r3, #0
 80139d6:	d048      	beq.n	8013a6a <xTaskCreate+0x1e2>
			if( xSchedulerRunning == pdFALSE )
 80139d8:	f8d6 3110 	ldr.w	r3, [r6, #272]	; 0x110
 80139dc:	b38b      	cbz	r3, 8013a42 <xTaskCreate+0x1ba>
 80139de:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80139e0:	f106 081c 	add.w	r8, r6, #28
		uxTaskNumber++;
 80139e4:	f8d6 3114 	ldr.w	r3, [r6, #276]	; 0x114
		prvAddTaskToReadyList( pxNewTCB );
 80139e8:	f8d6 c0b0 	ldr.w	ip, [r6, #176]	; 0xb0
 80139ec:	2501      	movs	r5, #1
		uxTaskNumber++;
 80139ee:	442b      	add	r3, r5
		prvAddTaskToReadyList( pxNewTCB );
 80139f0:	fa05 f200 	lsl.w	r2, r5, r0
 80139f4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80139f8:	ea42 020c 	orr.w	r2, r2, ip
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80139fc:	6463      	str	r3, [r4, #68]	; 0x44
		prvAddTaskToReadyList( pxNewTCB );
 80139fe:	4639      	mov	r1, r7
 8013a00:	eb08 0080 	add.w	r0, r8, r0, lsl #2
		uxTaskNumber++;
 8013a04:	f8c6 3114 	str.w	r3, [r6, #276]	; 0x114
		prvAddTaskToReadyList( pxNewTCB );
 8013a08:	f8c6 20b0 	str.w	r2, [r6, #176]	; 0xb0
 8013a0c:	f7fe ffda 	bl	80129c4 <vListInsertEnd>
	taskEXIT_CRITICAL();
 8013a10:	f001 f8da 	bl	8014bc8 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8013a14:	f8d6 3110 	ldr.w	r3, [r6, #272]	; 0x110
 8013a18:	b323      	cbz	r3, 8013a64 <xTaskCreate+0x1dc>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8013a1a:	f8d6 20ac 	ldr.w	r2, [r6, #172]	; 0xac
 8013a1e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8013a20:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8013a22:	429a      	cmp	r2, r3
 8013a24:	d21e      	bcs.n	8013a64 <xTaskCreate+0x1dc>
			taskYIELD_IF_USING_PREEMPTION();
 8013a26:	4b32      	ldr	r3, [pc, #200]	; (8013af0 <xTaskCreate+0x268>)
 8013a28:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013a2c:	601a      	str	r2, [r3, #0]
 8013a2e:	f3bf 8f4f 	dsb	sy
 8013a32:	f3bf 8f6f 	isb	sy
			xReturn = pdPASS;
 8013a36:	4628      	mov	r0, r5
 8013a38:	e001      	b.n	8013a3e <xTaskCreate+0x1b6>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8013a3a:	f04f 30ff 	mov.w	r0, #4294967295
	}
 8013a3e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8013a42:	f8d6 30ac 	ldr.w	r3, [r6, #172]	; 0xac
 8013a46:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8013a48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013a4a:	4283      	cmp	r3, r0
					pxCurrentTCB = pxNewTCB;
 8013a4c:	bf98      	it	ls
 8013a4e:	f8c6 40ac 	strls.w	r4, [r6, #172]	; 0xac
 8013a52:	f106 081c 	add.w	r8, r6, #28
 8013a56:	e7c5      	b.n	80139e4 <xTaskCreate+0x15c>
					vPortFree( pxStack );
 8013a58:	4638      	mov	r0, r7
 8013a5a:	f001 fa97 	bl	8014f8c <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8013a5e:	f04f 30ff 	mov.w	r0, #4294967295
 8013a62:	e7ec      	b.n	8013a3e <xTaskCreate+0x1b6>
			xReturn = pdPASS;
 8013a64:	4628      	mov	r0, r5
	}
 8013a66:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			pxCurrentTCB = pxNewTCB;
 8013a6a:	f8c6 40ac 	str.w	r4, [r6, #172]	; 0xac
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8013a6e:	69b3      	ldr	r3, [r6, #24]
 8013a70:	2b01      	cmp	r3, #1
 8013a72:	d1b4      	bne.n	80139de <xTaskCreate+0x156>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8013a74:	f106 081c 	add.w	r8, r6, #28
 8013a78:	4640      	mov	r0, r8
 8013a7a:	f7fe ff93 	bl	80129a4 <vListInitialise>
 8013a7e:	f106 0030 	add.w	r0, r6, #48	; 0x30
 8013a82:	f7fe ff8f 	bl	80129a4 <vListInitialise>
 8013a86:	f106 0044 	add.w	r0, r6, #68	; 0x44
 8013a8a:	f7fe ff8b 	bl	80129a4 <vListInitialise>
 8013a8e:	f106 0058 	add.w	r0, r6, #88	; 0x58
 8013a92:	f7fe ff87 	bl	80129a4 <vListInitialise>
 8013a96:	f106 006c 	add.w	r0, r6, #108	; 0x6c
 8013a9a:	f7fe ff83 	bl	80129a4 <vListInitialise>
 8013a9e:	f106 0080 	add.w	r0, r6, #128	; 0x80
 8013aa2:	f7fe ff7f 	bl	80129a4 <vListInitialise>
	vListInitialise( &xDelayedTaskList1 );
 8013aa6:	f106 09d4 	add.w	r9, r6, #212	; 0xd4
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8013aaa:	f106 0094 	add.w	r0, r6, #148	; 0x94
 8013aae:	f7fe ff79 	bl	80129a4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8013ab2:	f106 05e8 	add.w	r5, r6, #232	; 0xe8
	vListInitialise( &xDelayedTaskList1 );
 8013ab6:	4648      	mov	r0, r9
 8013ab8:	f7fe ff74 	bl	80129a4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8013abc:	4628      	mov	r0, r5
 8013abe:	f7fe ff71 	bl	80129a4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8013ac2:	f106 00fc 	add.w	r0, r6, #252	; 0xfc
 8013ac6:	f7fe ff6d 	bl	80129a4 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 8013aca:	1d30      	adds	r0, r6, #4
 8013acc:	f7fe ff6a 	bl	80129a4 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 8013ad0:	f106 00b4 	add.w	r0, r6, #180	; 0xb4
 8013ad4:	f7fe ff66 	bl	80129a4 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 8013ad8:	f8c6 90cc 	str.w	r9, [r6, #204]	; 0xcc
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8013adc:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8013ade:	f8c6 50c8 	str.w	r5, [r6, #200]	; 0xc8
}
 8013ae2:	e77f      	b.n	80139e4 <xTaskCreate+0x15c>
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8013ae4:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
 8013ae8:	e744      	b.n	8013974 <xTaskCreate+0xec>
 8013aea:	bf00      	nop
 8013aec:	20002054 	.word	0x20002054
 8013af0:	e000ed04 	.word	0xe000ed04

08013af4 <vTaskResume>:
		configASSERT( xTaskToResume );
 8013af4:	b1a8      	cbz	r0, 8013b22 <vTaskResume+0x2e>
	{
 8013af6:	b570      	push	{r4, r5, r6, lr}
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 8013af8:	4d24      	ldr	r5, [pc, #144]	; (8013b8c <vTaskResume+0x98>)
 8013afa:	f8d5 30ac 	ldr.w	r3, [r5, #172]	; 0xac
 8013afe:	4283      	cmp	r3, r0
	{
 8013b00:	b082      	sub	sp, #8
 8013b02:	4604      	mov	r4, r0
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 8013b04:	d00b      	beq.n	8013b1e <vTaskResume+0x2a>
			taskENTER_CRITICAL();
 8013b06:	f001 f83d 	bl	8014b84 <vPortEnterCritical>
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8013b0a:	6962      	ldr	r2, [r4, #20]
 8013b0c:	f105 03b4 	add.w	r3, r5, #180	; 0xb4
 8013b10:	429a      	cmp	r2, r3
 8013b12:	d00f      	beq.n	8013b34 <vTaskResume+0x40>
	}
 8013b14:	b002      	add	sp, #8
 8013b16:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			taskEXIT_CRITICAL();
 8013b1a:	f001 b855 	b.w	8014bc8 <vPortExitCritical>
	}
 8013b1e:	b002      	add	sp, #8
 8013b20:	bd70      	pop	{r4, r5, r6, pc}
	__asm volatile
 8013b22:	f04f 0320 	mov.w	r3, #32
 8013b26:	f383 8811 	msr	BASEPRI, r3
 8013b2a:	f3bf 8f6f 	isb	sy
 8013b2e:	f3bf 8f4f 	dsb	sy
		configASSERT( xTaskToResume );
 8013b32:	e7fe      	b.n	8013b32 <vTaskResume+0x3e>
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8013b34:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8013b36:	f105 02fc 	add.w	r2, r5, #252	; 0xfc
 8013b3a:	4293      	cmp	r3, r2
 8013b3c:	d0ea      	beq.n	8013b14 <vTaskResume+0x20>
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8013b3e:	2b00      	cmp	r3, #0
 8013b40:	d1e8      	bne.n	8013b14 <vTaskResume+0x20>
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 8013b42:	1d21      	adds	r1, r4, #4
 8013b44:	4608      	mov	r0, r1
 8013b46:	9101      	str	r1, [sp, #4]
 8013b48:	f7fe ff64 	bl	8012a14 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8013b4c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8013b4e:	f8d5 60b0 	ldr.w	r6, [r5, #176]	; 0xb0
 8013b52:	9901      	ldr	r1, [sp, #4]
 8013b54:	2301      	movs	r3, #1
 8013b56:	f105 021c 	add.w	r2, r5, #28
 8013b5a:	4083      	lsls	r3, r0
 8013b5c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8013b60:	4333      	orrs	r3, r6
 8013b62:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 8013b66:	f8c5 30b0 	str.w	r3, [r5, #176]	; 0xb0
 8013b6a:	f7fe ff2b 	bl	80129c4 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8013b6e:	f8d5 30ac 	ldr.w	r3, [r5, #172]	; 0xac
 8013b72:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8013b74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013b76:	429a      	cmp	r2, r3
 8013b78:	d3cc      	bcc.n	8013b14 <vTaskResume+0x20>
						taskYIELD_IF_USING_PREEMPTION();
 8013b7a:	4b05      	ldr	r3, [pc, #20]	; (8013b90 <vTaskResume+0x9c>)
 8013b7c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013b80:	601a      	str	r2, [r3, #0]
 8013b82:	f3bf 8f4f 	dsb	sy
 8013b86:	f3bf 8f6f 	isb	sy
 8013b8a:	e7c3      	b.n	8013b14 <vTaskResume+0x20>
 8013b8c:	20002054 	.word	0x20002054
 8013b90:	e000ed04 	.word	0xe000ed04

08013b94 <xTaskResumeFromISR>:
		configASSERT( xTaskToResume );
 8013b94:	b1d0      	cbz	r0, 8013bcc <xTaskResumeFromISR+0x38>
	{
 8013b96:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013b98:	b083      	sub	sp, #12
 8013b9a:	4605      	mov	r5, r0
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8013b9c:	f001 f928 	bl	8014df0 <vPortValidateInterruptPriority>
	__asm volatile
 8013ba0:	f3ef 8611 	mrs	r6, BASEPRI
 8013ba4:	f04f 0320 	mov.w	r3, #32
 8013ba8:	f383 8811 	msr	BASEPRI, r3
 8013bac:	f3bf 8f6f 	isb	sy
 8013bb0:	f3bf 8f4f 	dsb	sy
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8013bb4:	4f23      	ldr	r7, [pc, #140]	; (8013c44 <xTaskResumeFromISR+0xb0>)
 8013bb6:	696a      	ldr	r2, [r5, #20]
 8013bb8:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8013bbc:	429a      	cmp	r2, r3
 8013bbe:	d00e      	beq.n	8013bde <xTaskResumeFromISR+0x4a>
	BaseType_t xYieldRequired = pdFALSE;
 8013bc0:	2400      	movs	r4, #0
	__asm volatile
 8013bc2:	f386 8811 	msr	BASEPRI, r6
	}
 8013bc6:	4620      	mov	r0, r4
 8013bc8:	b003      	add	sp, #12
 8013bca:	bdf0      	pop	{r4, r5, r6, r7, pc}
	__asm volatile
 8013bcc:	f04f 0320 	mov.w	r3, #32
 8013bd0:	f383 8811 	msr	BASEPRI, r3
 8013bd4:	f3bf 8f6f 	isb	sy
 8013bd8:	f3bf 8f4f 	dsb	sy
		configASSERT( xTaskToResume );
 8013bdc:	e7fe      	b.n	8013bdc <xTaskResumeFromISR+0x48>
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8013bde:	6aac      	ldr	r4, [r5, #40]	; 0x28
 8013be0:	f107 00fc 	add.w	r0, r7, #252	; 0xfc
 8013be4:	4284      	cmp	r4, r0
 8013be6:	d0eb      	beq.n	8013bc0 <xTaskResumeFromISR+0x2c>
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8013be8:	2c00      	cmp	r4, #0
 8013bea:	d1e9      	bne.n	8013bc0 <xTaskResumeFromISR+0x2c>
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013bec:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8013bf0:	bb13      	cbnz	r3, 8013c38 <xTaskResumeFromISR+0xa4>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8013bf2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8013bf6:	6aec      	ldr	r4, [r5, #44]	; 0x2c
 8013bf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8013bfa:	1d29      	adds	r1, r5, #4
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8013bfc:	429c      	cmp	r4, r3
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8013bfe:	4608      	mov	r0, r1
 8013c00:	9101      	str	r1, [sp, #4]
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8013c02:	bf34      	ite	cc
 8013c04:	2400      	movcc	r4, #0
 8013c06:	2401      	movcs	r4, #1
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8013c08:	f7fe ff04 	bl	8012a14 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8013c0c:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 8013c0e:	f8d7 50b0 	ldr.w	r5, [r7, #176]	; 0xb0
 8013c12:	9901      	ldr	r1, [sp, #4]
 8013c14:	2301      	movs	r3, #1
 8013c16:	f107 021c 	add.w	r2, r7, #28
 8013c1a:	4083      	lsls	r3, r0
 8013c1c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8013c20:	432b      	orrs	r3, r5
 8013c22:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 8013c26:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8013c2a:	f7fe fecb 	bl	80129c4 <vListInsertEnd>
	__asm volatile
 8013c2e:	f386 8811 	msr	BASEPRI, r6
	}
 8013c32:	4620      	mov	r0, r4
 8013c34:	b003      	add	sp, #12
 8013c36:	bdf0      	pop	{r4, r5, r6, r7, pc}
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8013c38:	f105 0118 	add.w	r1, r5, #24
 8013c3c:	f7fe fec2 	bl	80129c4 <vListInsertEnd>
 8013c40:	e7bf      	b.n	8013bc2 <xTaskResumeFromISR+0x2e>
 8013c42:	bf00      	nop
 8013c44:	20002054 	.word	0x20002054

08013c48 <vTaskStartScheduler>:
{
 8013c48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8013c4c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8013c50:	f001 f8fa 	bl	8014e48 <pvPortMalloc>
			if( pxStack != NULL )
 8013c54:	2800      	cmp	r0, #0
 8013c56:	d078      	beq.n	8013d4a <vTaskStartScheduler+0x102>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8013c58:	4604      	mov	r4, r0
 8013c5a:	2060      	movs	r0, #96	; 0x60
 8013c5c:	f001 f8f4 	bl	8014e48 <pvPortMalloc>
				if( pxNewTCB != NULL )
 8013c60:	4605      	mov	r5, r0
 8013c62:	2800      	cmp	r0, #0
 8013c64:	d06e      	beq.n	8013d44 <vTaskStartScheduler+0xfc>
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8013c66:	f44f 7200 	mov.w	r2, #512	; 0x200
 8013c6a:	21a5      	movs	r1, #165	; 0xa5
					pxNewTCB->pxStack = pxStack;
 8013c6c:	6304      	str	r4, [r0, #48]	; 0x30
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8013c6e:	4620      	mov	r0, r4
 8013c70:	f003 fdb0 	bl	80177d4 <memset>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8013c74:	2600      	movs	r6, #0
 8013c76:	4b6a      	ldr	r3, [pc, #424]	; (8013e20 <vTaskStartScheduler+0x1d8>)
 8013c78:	636b      	str	r3, [r5, #52]	; 0x34
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8013c7a:	1d2f      	adds	r7, r5, #4
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8013c7c:	f8d5 8030 	ldr.w	r8, [r5, #48]	; 0x30
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8013c80:	f885 6038 	strb.w	r6, [r5, #56]	; 0x38
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8013c84:	4638      	mov	r0, r7
		pxNewTCB->uxMutexesHeld = 0;
 8013c86:	e9c5 6613 	strd	r6, r6, [r5, #76]	; 0x4c
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8013c8a:	f885 6043 	strb.w	r6, [r5, #67]	; 0x43
	pxNewTCB->uxPriority = uxPriority;
 8013c8e:	62ee      	str	r6, [r5, #44]	; 0x2c
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8013c90:	f7fe fe94 	bl	80129bc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8013c94:	f105 0018 	add.w	r0, r5, #24
 8013c98:	f7fe fe90 	bl	80129bc <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013c9c:	2307      	movs	r3, #7
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8013c9e:	f508 70fe 	add.w	r0, r8, #508	; 0x1fc
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013ca2:	61ab      	str	r3, [r5, #24]
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8013ca4:	495f      	ldr	r1, [pc, #380]	; (8013e24 <vTaskStartScheduler+0x1dc>)
		pxNewTCB->ulNotifiedValue = 0;
 8013ca6:	65ae      	str	r6, [r5, #88]	; 0x58
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8013ca8:	4632      	mov	r2, r6
 8013caa:	f020 0007 	bic.w	r0, r0, #7
		pxNewTCB->pxTaskTag = NULL;
 8013cae:	656e      	str	r6, [r5, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8013cb0:	f885 605c 	strb.w	r6, [r5, #92]	; 0x5c
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8013cb4:	612d      	str	r5, [r5, #16]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8013cb6:	626d      	str	r5, [r5, #36]	; 0x24
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8013cb8:	f000 ff38 	bl	8014b2c <pxPortInitialiseStack>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8013cbc:	4c5a      	ldr	r4, [pc, #360]	; (8013e28 <vTaskStartScheduler+0x1e0>)
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8013cbe:	6028      	str	r0, [r5, #0]
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8013cc0:	f8c4 511c 	str.w	r5, [r4, #284]	; 0x11c
	taskENTER_CRITICAL();
 8013cc4:	f000 ff5e 	bl	8014b84 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 8013cc8:	69a3      	ldr	r3, [r4, #24]
 8013cca:	3301      	adds	r3, #1
 8013ccc:	61a3      	str	r3, [r4, #24]
		if( pxCurrentTCB == NULL )
 8013cce:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
 8013cd2:	2b00      	cmp	r3, #0
 8013cd4:	d067      	beq.n	8013da6 <vTaskStartScheduler+0x15e>
			if( xSchedulerRunning == pdFALSE )
 8013cd6:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
 8013cda:	2b00      	cmp	r3, #0
 8013cdc:	d058      	beq.n	8013d90 <vTaskStartScheduler+0x148>
 8013cde:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 8013ce0:	f104 061c 	add.w	r6, r4, #28
		uxTaskNumber++;
 8013ce4:	f8d4 2114 	ldr.w	r2, [r4, #276]	; 0x114
		prvAddTaskToReadyList( pxNewTCB );
 8013ce8:	f8d4 c0b0 	ldr.w	ip, [r4, #176]	; 0xb0
 8013cec:	2301      	movs	r3, #1
		uxTaskNumber++;
 8013cee:	3201      	adds	r2, #1
		prvAddTaskToReadyList( pxNewTCB );
 8013cf0:	4083      	lsls	r3, r0
 8013cf2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8013cf6:	ea43 030c 	orr.w	r3, r3, ip
 8013cfa:	4639      	mov	r1, r7
 8013cfc:	eb06 0080 	add.w	r0, r6, r0, lsl #2
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8013d00:	646a      	str	r2, [r5, #68]	; 0x44
		prvAddTaskToReadyList( pxNewTCB );
 8013d02:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0
		uxTaskNumber++;
 8013d06:	f8c4 2114 	str.w	r2, [r4, #276]	; 0x114
		prvAddTaskToReadyList( pxNewTCB );
 8013d0a:	f7fe fe5b 	bl	80129c4 <vListInsertEnd>
	taskEXIT_CRITICAL();
 8013d0e:	f000 ff5b 	bl	8014bc8 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8013d12:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
 8013d16:	b16b      	cbz	r3, 8013d34 <vTaskStartScheduler+0xec>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8013d18:	f8d4 20ac 	ldr.w	r2, [r4, #172]	; 0xac
 8013d1c:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8013d1e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8013d20:	429a      	cmp	r2, r3
 8013d22:	d207      	bcs.n	8013d34 <vTaskStartScheduler+0xec>
			taskYIELD_IF_USING_PREEMPTION();
 8013d24:	4b41      	ldr	r3, [pc, #260]	; (8013e2c <vTaskStartScheduler+0x1e4>)
 8013d26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013d2a:	601a      	str	r2, [r3, #0]
 8013d2c:	f3bf 8f4f 	dsb	sy
 8013d30:	f3bf 8f6f 	isb	sy
			xReturn = xTimerCreateTimerTask();
 8013d34:	f000 fe78 	bl	8014a28 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 8013d38:	2801      	cmp	r0, #1
 8013d3a:	d00f      	beq.n	8013d5c <vTaskStartScheduler+0x114>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8013d3c:	3001      	adds	r0, #1
 8013d3e:	d004      	beq.n	8013d4a <vTaskStartScheduler+0x102>
}
 8013d40:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
 8013d44:	4620      	mov	r0, r4
 8013d46:	f001 f921 	bl	8014f8c <vPortFree>
	__asm volatile
 8013d4a:	f04f 0320 	mov.w	r3, #32
 8013d4e:	f383 8811 	msr	BASEPRI, r3
 8013d52:	f3bf 8f6f 	isb	sy
 8013d56:	f3bf 8f4f 	dsb	sy
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8013d5a:	e7fe      	b.n	8013d5a <vTaskStartScheduler+0x112>
 8013d5c:	f04f 0320 	mov.w	r3, #32
 8013d60:	f383 8811 	msr	BASEPRI, r3
 8013d64:	f3bf 8f6f 	isb	sy
 8013d68:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 8013d6c:	f04f 32ff 	mov.w	r2, #4294967295
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8013d70:	2300      	movs	r3, #0
		xNextTaskUnblockTime = portMAX_DELAY;
 8013d72:	f8c4 20d0 	str.w	r2, [r4, #208]	; 0xd0
		xSchedulerRunning = pdTRUE;
 8013d76:	f8c4 0110 	str.w	r0, [r4, #272]	; 0x110
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8013d7a:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
		traceTASK_SWITCHED_IN();
 8013d7e:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
 8013d82:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8013d84:	f7f2 f81e 	bl	8005dc4 <BSP_DEBUG_PIN_On>
}
 8013d88:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		if( xPortStartScheduler() != pdFALSE )
 8013d8c:	f000 bf96 	b.w	8014cbc <xPortStartScheduler>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8013d90:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
 8013d94:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 8013d96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013d98:	4283      	cmp	r3, r0
					pxCurrentTCB = pxNewTCB;
 8013d9a:	bf98      	it	ls
 8013d9c:	f8c4 50ac 	strls.w	r5, [r4, #172]	; 0xac
 8013da0:	f104 061c 	add.w	r6, r4, #28
 8013da4:	e79e      	b.n	8013ce4 <vTaskStartScheduler+0x9c>
			pxCurrentTCB = pxNewTCB;
 8013da6:	f8c4 50ac 	str.w	r5, [r4, #172]	; 0xac
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8013daa:	69a3      	ldr	r3, [r4, #24]
 8013dac:	2b01      	cmp	r3, #1
 8013dae:	d196      	bne.n	8013cde <vTaskStartScheduler+0x96>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8013db0:	f104 061c 	add.w	r6, r4, #28
 8013db4:	4630      	mov	r0, r6
 8013db6:	f7fe fdf5 	bl	80129a4 <vListInitialise>
 8013dba:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8013dbe:	f7fe fdf1 	bl	80129a4 <vListInitialise>
 8013dc2:	f104 0044 	add.w	r0, r4, #68	; 0x44
 8013dc6:	f7fe fded 	bl	80129a4 <vListInitialise>
 8013dca:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8013dce:	f7fe fde9 	bl	80129a4 <vListInitialise>
 8013dd2:	f104 006c 	add.w	r0, r4, #108	; 0x6c
 8013dd6:	f7fe fde5 	bl	80129a4 <vListInitialise>
 8013dda:	f104 0080 	add.w	r0, r4, #128	; 0x80
 8013dde:	f7fe fde1 	bl	80129a4 <vListInitialise>
	vListInitialise( &xDelayedTaskList1 );
 8013de2:	f104 09d4 	add.w	r9, r4, #212	; 0xd4
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8013de6:	f104 0094 	add.w	r0, r4, #148	; 0x94
 8013dea:	f7fe fddb 	bl	80129a4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8013dee:	f104 08e8 	add.w	r8, r4, #232	; 0xe8
	vListInitialise( &xDelayedTaskList1 );
 8013df2:	4648      	mov	r0, r9
 8013df4:	f7fe fdd6 	bl	80129a4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8013df8:	4640      	mov	r0, r8
 8013dfa:	f7fe fdd3 	bl	80129a4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8013dfe:	f104 00fc 	add.w	r0, r4, #252	; 0xfc
 8013e02:	f7fe fdcf 	bl	80129a4 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 8013e06:	1d20      	adds	r0, r4, #4
 8013e08:	f7fe fdcc 	bl	80129a4 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 8013e0c:	f104 00b4 	add.w	r0, r4, #180	; 0xb4
 8013e10:	f7fe fdc8 	bl	80129a4 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 8013e14:	f8c4 90cc 	str.w	r9, [r4, #204]	; 0xcc
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8013e18:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 8013e1a:	f8c4 80c8 	str.w	r8, [r4, #200]	; 0xc8
}
 8013e1e:	e761      	b.n	8013ce4 <vTaskStartScheduler+0x9c>
 8013e20:	454c4449 	.word	0x454c4449
 8013e24:	0801382d 	.word	0x0801382d
 8013e28:	20002054 	.word	0x20002054
 8013e2c:	e000ed04 	.word	0xe000ed04

08013e30 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8013e30:	4a03      	ldr	r2, [pc, #12]	; (8013e40 <vTaskSuspendAll+0x10>)
 8013e32:	f8d2 3118 	ldr.w	r3, [r2, #280]	; 0x118
 8013e36:	3301      	adds	r3, #1
 8013e38:	f8c2 3118 	str.w	r3, [r2, #280]	; 0x118
}
 8013e3c:	4770      	bx	lr
 8013e3e:	bf00      	nop
 8013e40:	20002054 	.word	0x20002054

08013e44 <xTaskGetTickCount>:
		xTicks = xTickCount;
 8013e44:	4b01      	ldr	r3, [pc, #4]	; (8013e4c <xTaskGetTickCount+0x8>)
 8013e46:	f8d3 00a8 	ldr.w	r0, [r3, #168]	; 0xa8
}
 8013e4a:	4770      	bx	lr
 8013e4c:	20002054 	.word	0x20002054

08013e50 <xTaskIncrementTick>:
{
 8013e50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013e54:	4c4a      	ldr	r4, [pc, #296]	; (8013f80 <xTaskIncrementTick+0x130>)
 8013e56:	f8d4 3118 	ldr.w	r3, [r4, #280]	; 0x118
 8013e5a:	2b00      	cmp	r3, #0
 8013e5c:	d15e      	bne.n	8013f1c <xTaskIncrementTick+0xcc>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8013e5e:	f8d4 60a8 	ldr.w	r6, [r4, #168]	; 0xa8
 8013e62:	3601      	adds	r6, #1
		xTickCount = xConstTickCount;
 8013e64:	f8c4 60a8 	str.w	r6, [r4, #168]	; 0xa8
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8013e68:	b9d6      	cbnz	r6, 8013ea0 <xTaskIncrementTick+0x50>
			taskSWITCH_DELAYED_LISTS();
 8013e6a:	f8d4 30cc 	ldr.w	r3, [r4, #204]	; 0xcc
 8013e6e:	681b      	ldr	r3, [r3, #0]
 8013e70:	2b00      	cmp	r3, #0
 8013e72:	d16e      	bne.n	8013f52 <xTaskIncrementTick+0x102>
 8013e74:	f8d4 30cc 	ldr.w	r3, [r4, #204]	; 0xcc
 8013e78:	f8d4 20c8 	ldr.w	r2, [r4, #200]	; 0xc8
 8013e7c:	f8c4 20cc 	str.w	r2, [r4, #204]	; 0xcc
 8013e80:	f8c4 30c8 	str.w	r3, [r4, #200]	; 0xc8
 8013e84:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8013e88:	3301      	adds	r3, #1
 8013e8a:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8013e8e:	f8d4 30cc 	ldr.w	r3, [r4, #204]	; 0xcc
 8013e92:	681b      	ldr	r3, [r3, #0]
 8013e94:	2b00      	cmp	r3, #0
 8013e96:	d16a      	bne.n	8013f6e <xTaskIncrementTick+0x11e>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8013e98:	f04f 33ff 	mov.w	r3, #4294967295
 8013e9c:	f8c4 30d0 	str.w	r3, [r4, #208]	; 0xd0
		if( xConstTickCount >= xNextTaskUnblockTime )
 8013ea0:	f8d4 30d0 	ldr.w	r3, [r4, #208]	; 0xd0
 8013ea4:	42b3      	cmp	r3, r6
 8013ea6:	d847      	bhi.n	8013f38 <xTaskIncrementTick+0xe8>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8013ea8:	f8d4 30cc 	ldr.w	r3, [r4, #204]	; 0xcc
 8013eac:	681d      	ldr	r5, [r3, #0]
 8013eae:	2d00      	cmp	r5, #0
 8013eb0:	d058      	beq.n	8013f64 <xTaskIncrementTick+0x114>
					prvAddTaskToReadyList( pxTCB );
 8013eb2:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8013f84 <xTaskIncrementTick+0x134>
BaseType_t xSwitchRequired = pdFALSE;
 8013eb6:	2500      	movs	r5, #0
					prvAddTaskToReadyList( pxTCB );
 8013eb8:	f04f 0901 	mov.w	r9, #1
 8013ebc:	e021      	b.n	8013f02 <xTaskIncrementTick+0xb2>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8013ebe:	f7fe fda9 	bl	8012a14 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8013ec2:	6abb      	ldr	r3, [r7, #40]	; 0x28
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8013ec4:	f107 0018 	add.w	r0, r7, #24
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8013ec8:	b10b      	cbz	r3, 8013ece <xTaskIncrementTick+0x7e>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8013eca:	f7fe fda3 	bl	8012a14 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8013ece:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8013ed0:	f8d4 20b0 	ldr.w	r2, [r4, #176]	; 0xb0
 8013ed4:	fa09 f300 	lsl.w	r3, r9, r0
 8013ed8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8013edc:	4313      	orrs	r3, r2
 8013ede:	4651      	mov	r1, sl
 8013ee0:	eb08 0080 	add.w	r0, r8, r0, lsl #2
 8013ee4:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0
 8013ee8:	f7fe fd6c 	bl	80129c4 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8013eec:	f8d4 20ac 	ldr.w	r2, [r4, #172]	; 0xac
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8013ef0:	f8d4 30cc 	ldr.w	r3, [r4, #204]	; 0xcc
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8013ef4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8013ef6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8013ef8:	681b      	ldr	r3, [r3, #0]
							xSwitchRequired = pdTRUE;
 8013efa:	4291      	cmp	r1, r2
 8013efc:	bf28      	it	cs
 8013efe:	2501      	movcs	r5, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8013f00:	b383      	cbz	r3, 8013f64 <xTaskIncrementTick+0x114>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013f02:	f8d4 30cc 	ldr.w	r3, [r4, #204]	; 0xcc
 8013f06:	68db      	ldr	r3, [r3, #12]
 8013f08:	68df      	ldr	r7, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8013f0a:	687b      	ldr	r3, [r7, #4]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8013f0c:	f107 0a04 	add.w	sl, r7, #4
					if( xConstTickCount < xItemValue )
 8013f10:	429e      	cmp	r6, r3
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8013f12:	4650      	mov	r0, sl
					if( xConstTickCount < xItemValue )
 8013f14:	d2d3      	bcs.n	8013ebe <xTaskIncrementTick+0x6e>
						xNextTaskUnblockTime = xItemValue;
 8013f16:	f8c4 30d0 	str.w	r3, [r4, #208]	; 0xd0
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8013f1a:	e00e      	b.n	8013f3a <xTaskIncrementTick+0xea>
		++uxPendedTicks;
 8013f1c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8013f20:	3301      	adds	r3, #1
 8013f22:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
BaseType_t xSwitchRequired = pdFALSE;
 8013f26:	2500      	movs	r5, #0
		if( xYieldPending != pdFALSE )
 8013f28:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
			xSwitchRequired = pdTRUE;
 8013f2c:	2b00      	cmp	r3, #0
}
 8013f2e:	bf0c      	ite	eq
 8013f30:	4628      	moveq	r0, r5
 8013f32:	2001      	movne	r0, #1
 8013f34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
BaseType_t xSwitchRequired = pdFALSE;
 8013f38:	2500      	movs	r5, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8013f3a:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
 8013f3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013f40:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8013f44:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8013f48:	69db      	ldr	r3, [r3, #28]
				xSwitchRequired = pdTRUE;
 8013f4a:	2b02      	cmp	r3, #2
 8013f4c:	bf28      	it	cs
 8013f4e:	2501      	movcs	r5, #1
 8013f50:	e7ea      	b.n	8013f28 <xTaskIncrementTick+0xd8>
 8013f52:	f04f 0320 	mov.w	r3, #32
 8013f56:	f383 8811 	msr	BASEPRI, r3
 8013f5a:	f3bf 8f6f 	isb	sy
 8013f5e:	f3bf 8f4f 	dsb	sy
			taskSWITCH_DELAYED_LISTS();
 8013f62:	e7fe      	b.n	8013f62 <xTaskIncrementTick+0x112>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013f64:	f04f 33ff 	mov.w	r3, #4294967295
 8013f68:	f8c4 30d0 	str.w	r3, [r4, #208]	; 0xd0
					break;
 8013f6c:	e7e5      	b.n	8013f3a <xTaskIncrementTick+0xea>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013f6e:	f8d4 30cc 	ldr.w	r3, [r4, #204]	; 0xcc
 8013f72:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8013f74:	68db      	ldr	r3, [r3, #12]
 8013f76:	685b      	ldr	r3, [r3, #4]
 8013f78:	f8c4 30d0 	str.w	r3, [r4, #208]	; 0xd0
	}
}
 8013f7c:	e790      	b.n	8013ea0 <xTaskIncrementTick+0x50>
 8013f7e:	bf00      	nop
 8013f80:	20002054 	.word	0x20002054
 8013f84:	20002070 	.word	0x20002070

08013f88 <xTaskResumeAll.part.0>:
BaseType_t xTaskResumeAll( void )
 8013f88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		--uxSchedulerSuspended;
 8013f8c:	4c3b      	ldr	r4, [pc, #236]	; (801407c <xTaskResumeAll.part.0+0xf4>)
BaseType_t xTaskResumeAll( void )
 8013f8e:	b082      	sub	sp, #8
	taskENTER_CRITICAL();
 8013f90:	f000 fdf8 	bl	8014b84 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8013f94:	f8d4 3118 	ldr.w	r3, [r4, #280]	; 0x118
 8013f98:	3b01      	subs	r3, #1
 8013f9a:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013f9e:	f8d4 3118 	ldr.w	r3, [r4, #280]	; 0x118
 8013fa2:	2b00      	cmp	r3, #0
 8013fa4:	d147      	bne.n	8014036 <xTaskResumeAll.part.0+0xae>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8013fa6:	69a3      	ldr	r3, [r4, #24]
 8013fa8:	2b00      	cmp	r3, #0
 8013faa:	d044      	beq.n	8014036 <xTaskResumeAll.part.0+0xae>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8013fac:	f8d4 30fc 	ldr.w	r3, [r4, #252]	; 0xfc
 8013fb0:	b38b      	cbz	r3, 8014016 <xTaskResumeAll.part.0+0x8e>
 8013fb2:	f104 071c 	add.w	r7, r4, #28
					prvAddTaskToReadyList( pxTCB );
 8013fb6:	2601      	movs	r6, #1
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013fb8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8013fbc:	68dd      	ldr	r5, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8013fbe:	f105 0804 	add.w	r8, r5, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8013fc2:	f105 0018 	add.w	r0, r5, #24
 8013fc6:	f7fe fd25 	bl	8012a14 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8013fca:	4640      	mov	r0, r8
 8013fcc:	f7fe fd22 	bl	8012a14 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8013fd0:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 8013fd2:	f8d4 20b0 	ldr.w	r2, [r4, #176]	; 0xb0
 8013fd6:	fa06 f300 	lsl.w	r3, r6, r0
 8013fda:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8013fde:	4313      	orrs	r3, r2
 8013fe0:	4641      	mov	r1, r8
 8013fe2:	eb07 0080 	add.w	r0, r7, r0, lsl #2
 8013fe6:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0
 8013fea:	f7fe fceb 	bl	80129c4 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8013fee:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
 8013ff2:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8013ff4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013ff6:	429a      	cmp	r2, r3
 8013ff8:	d325      	bcc.n	8014046 <xTaskResumeAll.part.0+0xbe>
						xYieldPending = pdTRUE;
 8013ffa:	f8c4 6128 	str.w	r6, [r4, #296]	; 0x128
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8013ffe:	f8d4 30fc 	ldr.w	r3, [r4, #252]	; 0xfc
 8014002:	2b00      	cmp	r3, #0
 8014004:	d1d8      	bne.n	8013fb8 <xTaskResumeAll.part.0+0x30>
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8014006:	f8d4 30cc 	ldr.w	r3, [r4, #204]	; 0xcc
 801400a:	681b      	ldr	r3, [r3, #0]
 801400c:	bb73      	cbnz	r3, 801406c <xTaskResumeAll.part.0+0xe4>
		xNextTaskUnblockTime = portMAX_DELAY;
 801400e:	f04f 33ff 	mov.w	r3, #4294967295
 8014012:	f8c4 30d0 	str.w	r3, [r4, #208]	; 0xd0
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8014016:	f8d4 5124 	ldr.w	r5, [r4, #292]	; 0x124
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 801401a:	b14d      	cbz	r5, 8014030 <xTaskResumeAll.part.0+0xa8>
								xYieldPending = pdTRUE;
 801401c:	2601      	movs	r6, #1
							if( xTaskIncrementTick() != pdFALSE )
 801401e:	f7ff ff17 	bl	8013e50 <xTaskIncrementTick>
 8014022:	b108      	cbz	r0, 8014028 <xTaskResumeAll.part.0+0xa0>
								xYieldPending = pdTRUE;
 8014024:	f8c4 6128 	str.w	r6, [r4, #296]	; 0x128
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8014028:	3d01      	subs	r5, #1
 801402a:	d1f8      	bne.n	801401e <xTaskResumeAll.part.0+0x96>
						uxPendedTicks = 0;
 801402c:	f8c4 5124 	str.w	r5, [r4, #292]	; 0x124
				if( xYieldPending != pdFALSE )
 8014030:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 8014034:	b983      	cbnz	r3, 8014058 <xTaskResumeAll.part.0+0xd0>
BaseType_t xAlreadyYielded = pdFALSE;
 8014036:	2000      	movs	r0, #0
 8014038:	9001      	str	r0, [sp, #4]
	taskEXIT_CRITICAL();
 801403a:	f000 fdc5 	bl	8014bc8 <vPortExitCritical>
}
 801403e:	9801      	ldr	r0, [sp, #4]
 8014040:	b002      	add	sp, #8
 8014042:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8014046:	f8d4 30fc 	ldr.w	r3, [r4, #252]	; 0xfc
 801404a:	2b00      	cmp	r3, #0
 801404c:	d1b4      	bne.n	8013fb8 <xTaskResumeAll.part.0+0x30>
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801404e:	f8d4 30cc 	ldr.w	r3, [r4, #204]	; 0xcc
 8014052:	681b      	ldr	r3, [r3, #0]
 8014054:	b953      	cbnz	r3, 801406c <xTaskResumeAll.part.0+0xe4>
 8014056:	e7da      	b.n	801400e <xTaskResumeAll.part.0+0x86>
					taskYIELD_IF_USING_PREEMPTION();
 8014058:	4b09      	ldr	r3, [pc, #36]	; (8014080 <xTaskResumeAll.part.0+0xf8>)
 801405a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801405e:	601a      	str	r2, [r3, #0]
 8014060:	f3bf 8f4f 	dsb	sy
 8014064:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8014068:	2001      	movs	r0, #1
 801406a:	e7e5      	b.n	8014038 <xTaskResumeAll.part.0+0xb0>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801406c:	f8d4 30cc 	ldr.w	r3, [r4, #204]	; 0xcc
 8014070:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8014072:	68db      	ldr	r3, [r3, #12]
 8014074:	685b      	ldr	r3, [r3, #4]
 8014076:	f8c4 30d0 	str.w	r3, [r4, #208]	; 0xd0
}
 801407a:	e7cc      	b.n	8014016 <xTaskResumeAll.part.0+0x8e>
 801407c:	20002054 	.word	0x20002054
 8014080:	e000ed04 	.word	0xe000ed04

08014084 <xTaskResumeAll>:
	configASSERT( uxSchedulerSuspended );
 8014084:	4b07      	ldr	r3, [pc, #28]	; (80140a4 <xTaskResumeAll+0x20>)
 8014086:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 801408a:	b943      	cbnz	r3, 801409e <xTaskResumeAll+0x1a>
 801408c:	f04f 0320 	mov.w	r3, #32
 8014090:	f383 8811 	msr	BASEPRI, r3
 8014094:	f3bf 8f6f 	isb	sy
 8014098:	f3bf 8f4f 	dsb	sy
 801409c:	e7fe      	b.n	801409c <xTaskResumeAll+0x18>
 801409e:	f7ff bf73 	b.w	8013f88 <xTaskResumeAll.part.0>
 80140a2:	bf00      	nop
 80140a4:	20002054 	.word	0x20002054

080140a8 <vTaskSetApplicationTaskTag>:
	{
 80140a8:	b538      	push	{r3, r4, r5, lr}
 80140aa:	460d      	mov	r5, r1
		if( xTask == NULL )
 80140ac:	b138      	cbz	r0, 80140be <vTaskSetApplicationTaskTag+0x16>
 80140ae:	4604      	mov	r4, r0
		taskENTER_CRITICAL();
 80140b0:	f000 fd68 	bl	8014b84 <vPortEnterCritical>
			xTCB->pxTaskTag = pxHookFunction;
 80140b4:	6565      	str	r5, [r4, #84]	; 0x54
	}
 80140b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		taskEXIT_CRITICAL();
 80140ba:	f000 bd85 	b.w	8014bc8 <vPortExitCritical>
			xTCB = ( TCB_t * ) pxCurrentTCB;
 80140be:	4b05      	ldr	r3, [pc, #20]	; (80140d4 <vTaskSetApplicationTaskTag+0x2c>)
 80140c0:	f8d3 40ac 	ldr.w	r4, [r3, #172]	; 0xac
		taskENTER_CRITICAL();
 80140c4:	f000 fd5e 	bl	8014b84 <vPortEnterCritical>
			xTCB->pxTaskTag = pxHookFunction;
 80140c8:	6565      	str	r5, [r4, #84]	; 0x54
	}
 80140ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		taskEXIT_CRITICAL();
 80140ce:	f000 bd7b 	b.w	8014bc8 <vPortExitCritical>
 80140d2:	bf00      	nop
 80140d4:	20002054 	.word	0x20002054

080140d8 <vTaskSwitchContext>:
{
 80140d8:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80140da:	4c1c      	ldr	r4, [pc, #112]	; (801414c <vTaskSwitchContext+0x74>)
 80140dc:	f8d4 3118 	ldr.w	r3, [r4, #280]	; 0x118
 80140e0:	b11b      	cbz	r3, 80140ea <vTaskSwitchContext+0x12>
		xYieldPending = pdTRUE;
 80140e2:	2301      	movs	r3, #1
 80140e4:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
}
 80140e8:	bd10      	pop	{r4, pc}
		xYieldPending = pdFALSE;
 80140ea:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
		traceTASK_SWITCHED_OUT();
 80140ee:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
 80140f2:	6d58      	ldr	r0, [r3, #84]	; 0x54
 80140f4:	f7f1 fe74 	bl	8005de0 <BSP_DEBUG_PIN_Off>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80140f8:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80140fc:	fab3 f383 	clz	r3, r3
 8014100:	b2db      	uxtb	r3, r3
 8014102:	f1c3 031f 	rsb	r3, r3, #31
 8014106:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801410a:	eb04 0183 	add.w	r1, r4, r3, lsl #2
 801410e:	009b      	lsls	r3, r3, #2
 8014110:	69ca      	ldr	r2, [r1, #28]
 8014112:	b942      	cbnz	r2, 8014126 <vTaskSwitchContext+0x4e>
	__asm volatile
 8014114:	f04f 0320 	mov.w	r3, #32
 8014118:	f383 8811 	msr	BASEPRI, r3
 801411c:	f3bf 8f6f 	isb	sy
 8014120:	f3bf 8f4f 	dsb	sy
 8014124:	e7fe      	b.n	8014124 <vTaskSwitchContext+0x4c>
 8014126:	6a0a      	ldr	r2, [r1, #32]
 8014128:	4423      	add	r3, r4
 801412a:	6852      	ldr	r2, [r2, #4]
 801412c:	620a      	str	r2, [r1, #32]
 801412e:	3324      	adds	r3, #36	; 0x24
 8014130:	429a      	cmp	r2, r3
 8014132:	bf04      	itt	eq
 8014134:	6852      	ldreq	r2, [r2, #4]
 8014136:	620a      	streq	r2, [r1, #32]
 8014138:	68d3      	ldr	r3, [r2, #12]
 801413a:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
		traceTASK_SWITCHED_IN();
 801413e:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
}
 8014142:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		traceTASK_SWITCHED_IN();
 8014146:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8014148:	f7f1 be3c 	b.w	8005dc4 <BSP_DEBUG_PIN_On>
 801414c:	20002054 	.word	0x20002054

08014150 <vTaskSuspend>:
	{
 8014150:	b570      	push	{r4, r5, r6, lr}
 8014152:	4605      	mov	r5, r0
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8014154:	4c38      	ldr	r4, [pc, #224]	; (8014238 <vTaskSuspend+0xe8>)
		taskENTER_CRITICAL();
 8014156:	f000 fd15 	bl	8014b84 <vPortEnterCritical>
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 801415a:	2d00      	cmp	r5, #0
 801415c:	d04e      	beq.n	80141fc <vTaskSuspend+0xac>
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801415e:	1d2e      	adds	r6, r5, #4
 8014160:	4630      	mov	r0, r6
 8014162:	f7fe fc57 	bl	8012a14 <uxListRemove>
 8014166:	b930      	cbnz	r0, 8014176 <vTaskSuspend+0x26>
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8014168:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 801416a:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 801416e:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8014172:	69db      	ldr	r3, [r3, #28]
 8014174:	b34b      	cbz	r3, 80141ca <vTaskSuspend+0x7a>
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8014176:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8014178:	b11b      	cbz	r3, 8014182 <vTaskSuspend+0x32>
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801417a:	f105 0018 	add.w	r0, r5, #24
 801417e:	f7fe fc49 	bl	8012a14 <uxListRemove>
			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8014182:	482e      	ldr	r0, [pc, #184]	; (801423c <vTaskSuspend+0xec>)
 8014184:	4631      	mov	r1, r6
 8014186:	f7fe fc1d 	bl	80129c4 <vListInsertEnd>
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 801418a:	f895 305c 	ldrb.w	r3, [r5, #92]	; 0x5c
 801418e:	2b01      	cmp	r3, #1
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8014190:	bf04      	itt	eq
 8014192:	2300      	moveq	r3, #0
 8014194:	f885 305c 	strbeq.w	r3, [r5, #92]	; 0x5c
		taskEXIT_CRITICAL();
 8014198:	f000 fd16 	bl	8014bc8 <vPortExitCritical>
		if( xSchedulerRunning != pdFALSE )
 801419c:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
 80141a0:	b9e3      	cbnz	r3, 80141dc <vTaskSuspend+0x8c>
		if( pxTCB == pxCurrentTCB )
 80141a2:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
 80141a6:	42ab      	cmp	r3, r5
 80141a8:	d000      	beq.n	80141ac <vTaskSuspend+0x5c>
	}
 80141aa:	bd70      	pop	{r4, r5, r6, pc}
			if( xSchedulerRunning != pdFALSE )
 80141ac:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
 80141b0:	b363      	cbz	r3, 801420c <vTaskSuspend+0xbc>
				configASSERT( uxSchedulerSuspended == 0 );
 80141b2:	f8d4 3118 	ldr.w	r3, [r4, #280]	; 0x118
 80141b6:	b38b      	cbz	r3, 801421c <vTaskSuspend+0xcc>
 80141b8:	f04f 0320 	mov.w	r3, #32
 80141bc:	f383 8811 	msr	BASEPRI, r3
 80141c0:	f3bf 8f6f 	isb	sy
 80141c4:	f3bf 8f4f 	dsb	sy
 80141c8:	e7fe      	b.n	80141c8 <vTaskSuspend+0x78>
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80141ca:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 80141ce:	2201      	movs	r2, #1
 80141d0:	4082      	lsls	r2, r0
 80141d2:	ea23 0302 	bic.w	r3, r3, r2
 80141d6:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0
 80141da:	e7cc      	b.n	8014176 <vTaskSuspend+0x26>
			taskENTER_CRITICAL();
 80141dc:	f000 fcd2 	bl	8014b84 <vPortEnterCritical>
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80141e0:	f8d4 30cc 	ldr.w	r3, [r4, #204]	; 0xcc
 80141e4:	681b      	ldr	r3, [r3, #0]
 80141e6:	b163      	cbz	r3, 8014202 <vTaskSuspend+0xb2>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80141e8:	f8d4 30cc 	ldr.w	r3, [r4, #204]	; 0xcc
 80141ec:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80141ee:	68db      	ldr	r3, [r3, #12]
 80141f0:	685b      	ldr	r3, [r3, #4]
 80141f2:	f8c4 30d0 	str.w	r3, [r4, #208]	; 0xd0
			taskEXIT_CRITICAL();
 80141f6:	f000 fce7 	bl	8014bc8 <vPortExitCritical>
 80141fa:	e7d2      	b.n	80141a2 <vTaskSuspend+0x52>
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 80141fc:	f8d4 50ac 	ldr.w	r5, [r4, #172]	; 0xac
 8014200:	e7ad      	b.n	801415e <vTaskSuspend+0xe>
		xNextTaskUnblockTime = portMAX_DELAY;
 8014202:	f04f 33ff 	mov.w	r3, #4294967295
 8014206:	f8c4 30d0 	str.w	r3, [r4, #208]	; 0xd0
 801420a:	e7f4      	b.n	80141f6 <vTaskSuspend+0xa6>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 801420c:	f8d4 10b4 	ldr.w	r1, [r4, #180]	; 0xb4
 8014210:	69a2      	ldr	r2, [r4, #24]
 8014212:	4291      	cmp	r1, r2
 8014214:	d10b      	bne.n	801422e <vTaskSuspend+0xde>
					pxCurrentTCB = NULL;
 8014216:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
	}
 801421a:	bd70      	pop	{r4, r5, r6, pc}
				portYIELD_WITHIN_API();
 801421c:	4b08      	ldr	r3, [pc, #32]	; (8014240 <vTaskSuspend+0xf0>)
 801421e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014222:	601a      	str	r2, [r3, #0]
 8014224:	f3bf 8f4f 	dsb	sy
 8014228:	f3bf 8f6f 	isb	sy
	}
 801422c:	bd70      	pop	{r4, r5, r6, pc}
 801422e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
					vTaskSwitchContext();
 8014232:	f7ff bf51 	b.w	80140d8 <vTaskSwitchContext>
 8014236:	bf00      	nop
 8014238:	20002054 	.word	0x20002054
 801423c:	20002108 	.word	0x20002108
 8014240:	e000ed04 	.word	0xe000ed04

08014244 <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
 8014244:	b350      	cbz	r0, 801429c <vTaskPlaceOnEventList+0x58>
{
 8014246:	b570      	push	{r4, r5, r6, lr}
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8014248:	4c24      	ldr	r4, [pc, #144]	; (80142dc <vTaskPlaceOnEventList+0x98>)
 801424a:	460d      	mov	r5, r1
 801424c:	f8d4 10ac 	ldr.w	r1, [r4, #172]	; 0xac
 8014250:	3118      	adds	r1, #24
 8014252:	f7fe fbc7 	bl	80129e4 <vListInsert>
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8014256:	f8d4 60a8 	ldr.w	r6, [r4, #168]	; 0xa8
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801425a:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
 801425e:	3004      	adds	r0, #4
 8014260:	f7fe fbd8 	bl	8012a14 <uxListRemove>
 8014264:	b950      	cbnz	r0, 801427c <vTaskPlaceOnEventList+0x38>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8014266:	f8d4 20ac 	ldr.w	r2, [r4, #172]	; 0xac
 801426a:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 801426e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8014270:	2201      	movs	r2, #1
 8014272:	408a      	lsls	r2, r1
 8014274:	ea23 0302 	bic.w	r3, r3, r2
 8014278:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 801427c:	1c6b      	adds	r3, r5, #1
 801427e:	d016      	beq.n	80142ae <vTaskPlaceOnEventList+0x6a>
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8014280:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
 8014284:	19ad      	adds	r5, r5, r6
 8014286:	605d      	str	r5, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 8014288:	d319      	bcc.n	80142be <vTaskPlaceOnEventList+0x7a>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801428a:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
 801428e:	f8d4 10ac 	ldr.w	r1, [r4, #172]	; 0xac
}
 8014292:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8014296:	3104      	adds	r1, #4
 8014298:	f7fe bba4 	b.w	80129e4 <vListInsert>
 801429c:	f04f 0320 	mov.w	r3, #32
 80142a0:	f383 8811 	msr	BASEPRI, r3
 80142a4:	f3bf 8f6f 	isb	sy
 80142a8:	f3bf 8f4f 	dsb	sy
	configASSERT( pxEventList );
 80142ac:	e7fe      	b.n	80142ac <vTaskPlaceOnEventList+0x68>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80142ae:	f8d4 10ac 	ldr.w	r1, [r4, #172]	; 0xac
 80142b2:	480b      	ldr	r0, [pc, #44]	; (80142e0 <vTaskPlaceOnEventList+0x9c>)
}
 80142b4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80142b8:	3104      	adds	r1, #4
 80142ba:	f7fe bb83 	b.w	80129c4 <vListInsertEnd>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80142be:	f8d4 00cc 	ldr.w	r0, [r4, #204]	; 0xcc
 80142c2:	f8d4 10ac 	ldr.w	r1, [r4, #172]	; 0xac
 80142c6:	3104      	adds	r1, #4
 80142c8:	f7fe fb8c 	bl	80129e4 <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
 80142cc:	f8d4 30d0 	ldr.w	r3, [r4, #208]	; 0xd0
 80142d0:	429d      	cmp	r5, r3
				{
					xNextTaskUnblockTime = xTimeToWake;
 80142d2:	bf38      	it	cc
 80142d4:	f8c4 50d0 	strcc.w	r5, [r4, #208]	; 0xd0
}
 80142d8:	bd70      	pop	{r4, r5, r6, pc}
 80142da:	bf00      	nop
 80142dc:	20002054 	.word	0x20002054
 80142e0:	20002108 	.word	0x20002108

080142e4 <vTaskPlaceOnEventListRestricted>:
	{
 80142e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		configASSERT( pxEventList );
 80142e6:	2800      	cmp	r0, #0
 80142e8:	d045      	beq.n	8014376 <vTaskPlaceOnEventListRestricted+0x92>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80142ea:	4c2c      	ldr	r4, [pc, #176]	; (801439c <vTaskPlaceOnEventListRestricted+0xb8>)
 80142ec:	460d      	mov	r5, r1
 80142ee:	f8d4 10ac 	ldr.w	r1, [r4, #172]	; 0xac
 80142f2:	3118      	adds	r1, #24
 80142f4:	4617      	mov	r7, r2
 80142f6:	f7fe fb65 	bl	80129c4 <vListInsertEnd>
const TickType_t xConstTickCount = xTickCount;
 80142fa:	f8d4 60a8 	ldr.w	r6, [r4, #168]	; 0xa8
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80142fe:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
 8014302:	3004      	adds	r0, #4
		if( xWaitIndefinitely != pdFALSE )
 8014304:	b307      	cbz	r7, 8014348 <vTaskPlaceOnEventListRestricted+0x64>
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8014306:	f7fe fb85 	bl	8012a14 <uxListRemove>
 801430a:	2800      	cmp	r0, #0
 801430c:	d13e      	bne.n	801438c <vTaskPlaceOnEventListRestricted+0xa8>
			xTicksToWait = portMAX_DELAY;
 801430e:	f04f 35ff 	mov.w	r5, #4294967295
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8014312:	f8d4 20ac 	ldr.w	r2, [r4, #172]	; 0xac
 8014316:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 801431a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 801431c:	2201      	movs	r2, #1
 801431e:	408a      	lsls	r2, r1
 8014320:	ea23 0302 	bic.w	r3, r3, r2
 8014324:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8014328:	1c6b      	adds	r3, r5, #1
 801432a:	d02d      	beq.n	8014388 <vTaskPlaceOnEventListRestricted+0xa4>
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 801432c:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
 8014330:	1975      	adds	r5, r6, r5
 8014332:	605d      	str	r5, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8014334:	d311      	bcc.n	801435a <vTaskPlaceOnEventListRestricted+0x76>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8014336:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
 801433a:	f8d4 10ac 	ldr.w	r1, [r4, #172]	; 0xac
	}
 801433e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8014342:	3104      	adds	r1, #4
 8014344:	f7fe bb4e 	b.w	80129e4 <vListInsert>
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8014348:	f7fe fb64 	bl	8012a14 <uxListRemove>
 801434c:	2800      	cmp	r0, #0
 801434e:	d0e0      	beq.n	8014312 <vTaskPlaceOnEventListRestricted+0x2e>
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8014350:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
 8014354:	1975      	adds	r5, r6, r5
 8014356:	605d      	str	r5, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8014358:	d2ed      	bcs.n	8014336 <vTaskPlaceOnEventListRestricted+0x52>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801435a:	f8d4 00cc 	ldr.w	r0, [r4, #204]	; 0xcc
 801435e:	f8d4 10ac 	ldr.w	r1, [r4, #172]	; 0xac
 8014362:	3104      	adds	r1, #4
 8014364:	f7fe fb3e 	bl	80129e4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8014368:	f8d4 30d0 	ldr.w	r3, [r4, #208]	; 0xd0
 801436c:	429d      	cmp	r5, r3
 801436e:	d201      	bcs.n	8014374 <vTaskPlaceOnEventListRestricted+0x90>
					xNextTaskUnblockTime = xTimeToWake;
 8014370:	f8c4 50d0 	str.w	r5, [r4, #208]	; 0xd0
	}
 8014374:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014376:	f04f 0320 	mov.w	r3, #32
 801437a:	f383 8811 	msr	BASEPRI, r3
 801437e:	f3bf 8f6f 	isb	sy
 8014382:	f3bf 8f4f 	dsb	sy
		configASSERT( pxEventList );
 8014386:	e7fe      	b.n	8014386 <vTaskPlaceOnEventListRestricted+0xa2>
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8014388:	2f00      	cmp	r7, #0
 801438a:	d0cf      	beq.n	801432c <vTaskPlaceOnEventListRestricted+0x48>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801438c:	f8d4 10ac 	ldr.w	r1, [r4, #172]	; 0xac
 8014390:	4803      	ldr	r0, [pc, #12]	; (80143a0 <vTaskPlaceOnEventListRestricted+0xbc>)
	}
 8014392:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8014396:	3104      	adds	r1, #4
 8014398:	f7fe bb14 	b.w	80129c4 <vListInsertEnd>
 801439c:	20002054 	.word	0x20002054
 80143a0:	20002108 	.word	0x20002108

080143a4 <xTaskRemoveFromEventList>:
{
 80143a4:	b570      	push	{r4, r5, r6, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80143a6:	68c3      	ldr	r3, [r0, #12]
 80143a8:	68dd      	ldr	r5, [r3, #12]
{
 80143aa:	b082      	sub	sp, #8
	configASSERT( pxUnblockedTCB );
 80143ac:	b38d      	cbz	r5, 8014412 <xTaskRemoveFromEventList+0x6e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80143ae:	f105 0118 	add.w	r1, r5, #24
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80143b2:	4c1c      	ldr	r4, [pc, #112]	; (8014424 <xTaskRemoveFromEventList+0x80>)
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80143b4:	9101      	str	r1, [sp, #4]
 80143b6:	4608      	mov	r0, r1
 80143b8:	f7fe fb2c 	bl	8012a14 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80143bc:	f8d4 3118 	ldr.w	r3, [r4, #280]	; 0x118
 80143c0:	9901      	ldr	r1, [sp, #4]
 80143c2:	b17b      	cbz	r3, 80143e4 <xTaskRemoveFromEventList+0x40>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80143c4:	f104 00fc 	add.w	r0, r4, #252	; 0xfc
 80143c8:	f7fe fafc 	bl	80129c4 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80143cc:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
 80143d0:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 80143d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80143d4:	429a      	cmp	r2, r3
		xYieldPending = pdTRUE;
 80143d6:	bf8a      	itet	hi
 80143d8:	2001      	movhi	r0, #1
		xReturn = pdFALSE;
 80143da:	2000      	movls	r0, #0
		xYieldPending = pdTRUE;
 80143dc:	f8c4 0128 	strhi.w	r0, [r4, #296]	; 0x128
}
 80143e0:	b002      	add	sp, #8
 80143e2:	bd70      	pop	{r4, r5, r6, pc}
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80143e4:	1d29      	adds	r1, r5, #4
 80143e6:	4608      	mov	r0, r1
 80143e8:	9101      	str	r1, [sp, #4]
 80143ea:	f7fe fb13 	bl	8012a14 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80143ee:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 80143f0:	f8d4 60b0 	ldr.w	r6, [r4, #176]	; 0xb0
 80143f4:	9901      	ldr	r1, [sp, #4]
 80143f6:	2301      	movs	r3, #1
 80143f8:	4083      	lsls	r3, r0
 80143fa:	f104 021c 	add.w	r2, r4, #28
 80143fe:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8014402:	4333      	orrs	r3, r6
 8014404:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 8014408:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0
 801440c:	f7fe fada 	bl	80129c4 <vListInsertEnd>
 8014410:	e7dc      	b.n	80143cc <xTaskRemoveFromEventList+0x28>
 8014412:	f04f 0320 	mov.w	r3, #32
 8014416:	f383 8811 	msr	BASEPRI, r3
 801441a:	f3bf 8f6f 	isb	sy
 801441e:	f3bf 8f4f 	dsb	sy
	configASSERT( pxUnblockedTCB );
 8014422:	e7fe      	b.n	8014422 <xTaskRemoveFromEventList+0x7e>
 8014424:	20002054 	.word	0x20002054

08014428 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8014428:	4b03      	ldr	r3, [pc, #12]	; (8014438 <vTaskInternalSetTimeOutState+0x10>)
 801442a:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
	pxTimeOut->xTimeOnEntering = xTickCount;
 801442e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8014432:	e9c0 2300 	strd	r2, r3, [r0]
}
 8014436:	4770      	bx	lr
 8014438:	20002054 	.word	0x20002054

0801443c <xTaskCheckForTimeOut>:
{
 801443c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( pxTimeOut );
 801443e:	b300      	cbz	r0, 8014482 <xTaskCheckForTimeOut+0x46>
	configASSERT( pxTicksToWait );
 8014440:	460d      	mov	r5, r1
 8014442:	b1a9      	cbz	r1, 8014470 <xTaskCheckForTimeOut+0x34>
 8014444:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8014446:	f000 fb9d 	bl	8014b84 <vPortEnterCritical>
			if( *pxTicksToWait == portMAX_DELAY )
 801444a:	682b      	ldr	r3, [r5, #0]
		const TickType_t xConstTickCount = xTickCount;
 801444c:	4a1d      	ldr	r2, [pc, #116]	; (80144c4 <xTaskCheckForTimeOut+0x88>)
			if( *pxTicksToWait == portMAX_DELAY )
 801444e:	1c59      	adds	r1, r3, #1
		const TickType_t xConstTickCount = xTickCount;
 8014450:	f8d2 00a8 	ldr.w	r0, [r2, #168]	; 0xa8
			if( *pxTicksToWait == portMAX_DELAY )
 8014454:	d02c      	beq.n	80144b0 <xTaskCheckForTimeOut+0x74>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8014456:	e9d4 7100 	ldrd	r7, r1, [r4]
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 801445a:	f8d2 6120 	ldr.w	r6, [r2, #288]	; 0x120
 801445e:	42b7      	cmp	r7, r6
 8014460:	d018      	beq.n	8014494 <xTaskCheckForTimeOut+0x58>
 8014462:	4281      	cmp	r1, r0
 8014464:	d816      	bhi.n	8014494 <xTaskCheckForTimeOut+0x58>
			xReturn = pdTRUE;
 8014466:	2501      	movs	r5, #1
	taskEXIT_CRITICAL();
 8014468:	f000 fbae 	bl	8014bc8 <vPortExitCritical>
}
 801446c:	4628      	mov	r0, r5
 801446e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014470:	f04f 0320 	mov.w	r3, #32
 8014474:	f383 8811 	msr	BASEPRI, r3
 8014478:	f3bf 8f6f 	isb	sy
 801447c:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTicksToWait );
 8014480:	e7fe      	b.n	8014480 <xTaskCheckForTimeOut+0x44>
 8014482:	f04f 0320 	mov.w	r3, #32
 8014486:	f383 8811 	msr	BASEPRI, r3
 801448a:	f3bf 8f6f 	isb	sy
 801448e:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTimeOut );
 8014492:	e7fe      	b.n	8014492 <xTaskCheckForTimeOut+0x56>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8014494:	1a46      	subs	r6, r0, r1
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8014496:	42b3      	cmp	r3, r6
 8014498:	d90f      	bls.n	80144ba <xTaskCheckForTimeOut+0x7e>
			*pxTicksToWait -= xElapsedTime;
 801449a:	1a1b      	subs	r3, r3, r0
 801449c:	440b      	add	r3, r1
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 801449e:	f8d2 1120 	ldr.w	r1, [r2, #288]	; 0x120
	pxTimeOut->xTimeOnEntering = xTickCount;
 80144a2:	f8d2 20a8 	ldr.w	r2, [r2, #168]	; 0xa8
			*pxTicksToWait -= xElapsedTime;
 80144a6:	602b      	str	r3, [r5, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80144a8:	e9c4 1200 	strd	r1, r2, [r4]
			xReturn = pdFALSE;
 80144ac:	2500      	movs	r5, #0
 80144ae:	e7db      	b.n	8014468 <xTaskCheckForTimeOut+0x2c>
				xReturn = pdFALSE;
 80144b0:	2500      	movs	r5, #0
	taskEXIT_CRITICAL();
 80144b2:	f000 fb89 	bl	8014bc8 <vPortExitCritical>
}
 80144b6:	4628      	mov	r0, r5
 80144b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			*pxTicksToWait = 0;
 80144ba:	2300      	movs	r3, #0
 80144bc:	602b      	str	r3, [r5, #0]
			xReturn = pdTRUE;
 80144be:	2501      	movs	r5, #1
 80144c0:	e7d2      	b.n	8014468 <xTaskCheckForTimeOut+0x2c>
 80144c2:	bf00      	nop
 80144c4:	20002054 	.word	0x20002054

080144c8 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 80144c8:	4b02      	ldr	r3, [pc, #8]	; (80144d4 <vTaskMissedYield+0xc>)
 80144ca:	2201      	movs	r2, #1
 80144cc:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 80144d0:	4770      	bx	lr
 80144d2:	bf00      	nop
 80144d4:	20002054 	.word	0x20002054

080144d8 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 80144d8:	4b06      	ldr	r3, [pc, #24]	; (80144f4 <xTaskGetSchedulerState+0x1c>)
 80144da:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
 80144de:	b132      	cbz	r2, 80144ee <xTaskGetSchedulerState+0x16>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80144e0:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 80144e4:	2b00      	cmp	r3, #0
				xReturn = taskSCHEDULER_SUSPENDED;
 80144e6:	bf0c      	ite	eq
 80144e8:	2002      	moveq	r0, #2
 80144ea:	2000      	movne	r0, #0
 80144ec:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 80144ee:	2001      	movs	r0, #1
	}
 80144f0:	4770      	bx	lr
 80144f2:	bf00      	nop
 80144f4:	20002054 	.word	0x20002054

080144f8 <xTaskPriorityInherit>:
	{
 80144f8:	b570      	push	{r4, r5, r6, lr}
		if( pxMutexHolder != NULL )
 80144fa:	4604      	mov	r4, r0
	{
 80144fc:	b082      	sub	sp, #8
		if( pxMutexHolder != NULL )
 80144fe:	b1e0      	cbz	r0, 801453a <xTaskPriorityInherit+0x42>
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8014500:	4d29      	ldr	r5, [pc, #164]	; (80145a8 <xTaskPriorityInherit+0xb0>)
 8014502:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8014504:	f8d5 20ac 	ldr.w	r2, [r5, #172]	; 0xac
 8014508:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 801450a:	4293      	cmp	r3, r2
 801450c:	d217      	bcs.n	801453e <xTaskPriorityInherit+0x46>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 801450e:	6982      	ldr	r2, [r0, #24]
 8014510:	2a00      	cmp	r2, #0
 8014512:	db05      	blt.n	8014520 <xTaskPriorityInherit+0x28>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014514:	f8d5 20ac 	ldr.w	r2, [r5, #172]	; 0xac
 8014518:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 801451a:	f1c2 0207 	rsb	r2, r2, #7
 801451e:	6182      	str	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8014520:	4e22      	ldr	r6, [pc, #136]	; (80145ac <xTaskPriorityInherit+0xb4>)
 8014522:	6962      	ldr	r2, [r4, #20]
 8014524:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8014528:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 801452c:	429a      	cmp	r2, r3
 801452e:	d010      	beq.n	8014552 <xTaskPriorityInherit+0x5a>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8014530:	f8d5 30ac 	ldr.w	r3, [r5, #172]	; 0xac
 8014534:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014536:	62e3      	str	r3, [r4, #44]	; 0x2c
				xReturn = pdTRUE;
 8014538:	2001      	movs	r0, #1
	}
 801453a:	b002      	add	sp, #8
 801453c:	bd70      	pop	{r4, r5, r6, pc}
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 801453e:	f8d5 30ac 	ldr.w	r3, [r5, #172]	; 0xac
 8014542:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8014544:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8014546:	42a0      	cmp	r0, r4
 8014548:	bf2c      	ite	cs
 801454a:	2000      	movcs	r0, #0
 801454c:	2001      	movcc	r0, #1
	}
 801454e:	b002      	add	sp, #8
 8014550:	bd70      	pop	{r4, r5, r6, pc}
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8014552:	1d21      	adds	r1, r4, #4
 8014554:	4608      	mov	r0, r1
 8014556:	9101      	str	r1, [sp, #4]
 8014558:	f7fe fa5c 	bl	8012a14 <uxListRemove>
 801455c:	9901      	ldr	r1, [sp, #4]
 801455e:	b978      	cbnz	r0, 8014580 <xTaskPriorityInherit+0x88>
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8014560:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8014562:	eb02 0382 	add.w	r3, r2, r2, lsl #2
 8014566:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 801456a:	69db      	ldr	r3, [r3, #28]
 801456c:	b943      	cbnz	r3, 8014580 <xTaskPriorityInherit+0x88>
 801456e:	f8d5 30b0 	ldr.w	r3, [r5, #176]	; 0xb0
 8014572:	2001      	movs	r0, #1
 8014574:	fa00 f202 	lsl.w	r2, r0, r2
 8014578:	ea23 0302 	bic.w	r3, r3, r2
 801457c:	f8c5 30b0 	str.w	r3, [r5, #176]	; 0xb0
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8014580:	f8d5 30ac 	ldr.w	r3, [r5, #172]	; 0xac
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8014584:	f8d5 20b0 	ldr.w	r2, [r5, #176]	; 0xb0
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8014588:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 801458a:	62e0      	str	r0, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 801458c:	2401      	movs	r4, #1
 801458e:	fa04 f300 	lsl.w	r3, r4, r0
 8014592:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8014596:	eb06 0080 	add.w	r0, r6, r0, lsl #2
 801459a:	4313      	orrs	r3, r2
 801459c:	f8c5 30b0 	str.w	r3, [r5, #176]	; 0xb0
 80145a0:	f7fe fa10 	bl	80129c4 <vListInsertEnd>
				xReturn = pdTRUE;
 80145a4:	4620      	mov	r0, r4
 80145a6:	e7c8      	b.n	801453a <xTaskPriorityInherit+0x42>
 80145a8:	20002054 	.word	0x20002054
 80145ac:	20002070 	.word	0x20002070

080145b0 <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
 80145b0:	b1e0      	cbz	r0, 80145ec <xTaskPriorityDisinherit+0x3c>
	{
 80145b2:	b5f0      	push	{r4, r5, r6, r7, lr}
			configASSERT( pxTCB == pxCurrentTCB );
 80145b4:	4d29      	ldr	r5, [pc, #164]	; (801465c <xTaskPriorityDisinherit+0xac>)
 80145b6:	f8d5 30ac 	ldr.w	r3, [r5, #172]	; 0xac
 80145ba:	4283      	cmp	r3, r0
	{
 80145bc:	b083      	sub	sp, #12
 80145be:	4604      	mov	r4, r0
			configASSERT( pxTCB == pxCurrentTCB );
 80145c0:	d008      	beq.n	80145d4 <xTaskPriorityDisinherit+0x24>
 80145c2:	f04f 0320 	mov.w	r3, #32
 80145c6:	f383 8811 	msr	BASEPRI, r3
 80145ca:	f3bf 8f6f 	isb	sy
 80145ce:	f3bf 8f4f 	dsb	sy
 80145d2:	e7fe      	b.n	80145d2 <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 80145d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80145d6:	b15b      	cbz	r3, 80145f0 <xTaskPriorityDisinherit+0x40>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80145d8:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 80145da:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
			( pxTCB->uxMutexesHeld )--;
 80145dc:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80145de:	4291      	cmp	r1, r2
			( pxTCB->uxMutexesHeld )--;
 80145e0:	6503      	str	r3, [r0, #80]	; 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80145e2:	d000      	beq.n	80145e6 <xTaskPriorityDisinherit+0x36>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80145e4:	b16b      	cbz	r3, 8014602 <xTaskPriorityDisinherit+0x52>
	BaseType_t xReturn = pdFALSE;
 80145e6:	2000      	movs	r0, #0
	}
 80145e8:	b003      	add	sp, #12
 80145ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
	BaseType_t xReturn = pdFALSE;
 80145ec:	2000      	movs	r0, #0
	}
 80145ee:	4770      	bx	lr
 80145f0:	f04f 0320 	mov.w	r3, #32
 80145f4:	f383 8811 	msr	BASEPRI, r3
 80145f8:	f3bf 8f6f 	isb	sy
 80145fc:	f3bf 8f4f 	dsb	sy
			configASSERT( pxTCB->uxMutexesHeld );
 8014600:	e7fe      	b.n	8014600 <xTaskPriorityDisinherit+0x50>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8014602:	1d01      	adds	r1, r0, #4
 8014604:	4608      	mov	r0, r1
 8014606:	9101      	str	r1, [sp, #4]
 8014608:	f7fe fa04 	bl	8012a14 <uxListRemove>
 801460c:	9901      	ldr	r1, [sp, #4]
 801460e:	b970      	cbnz	r0, 801462e <xTaskPriorityDisinherit+0x7e>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8014610:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8014612:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 8014616:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 801461a:	69db      	ldr	r3, [r3, #28]
 801461c:	b93b      	cbnz	r3, 801462e <xTaskPriorityDisinherit+0x7e>
 801461e:	f8d5 30b0 	ldr.w	r3, [r5, #176]	; 0xb0
 8014622:	2201      	movs	r2, #1
 8014624:	4082      	lsls	r2, r0
 8014626:	ea23 0302 	bic.w	r3, r3, r2
 801462a:	f8c5 30b0 	str.w	r3, [r5, #176]	; 0xb0
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 801462e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
					prvAddTaskToReadyList( pxTCB );
 8014630:	f8d5 70b0 	ldr.w	r7, [r5, #176]	; 0xb0
 8014634:	480a      	ldr	r0, [pc, #40]	; (8014660 <xTaskPriorityDisinherit+0xb0>)
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8014636:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 8014638:	2601      	movs	r6, #1
 801463a:	fa06 f203 	lsl.w	r2, r6, r3
 801463e:	433a      	orrs	r2, r7
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014640:	f1c3 0707 	rsb	r7, r3, #7
					prvAddTaskToReadyList( pxTCB );
 8014644:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8014648:	eb00 0083 	add.w	r0, r0, r3, lsl #2
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801464c:	61a7      	str	r7, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 801464e:	f8c5 20b0 	str.w	r2, [r5, #176]	; 0xb0
 8014652:	f7fe f9b7 	bl	80129c4 <vListInsertEnd>
					xReturn = pdTRUE;
 8014656:	4630      	mov	r0, r6
		return xReturn;
 8014658:	e7c6      	b.n	80145e8 <xTaskPriorityDisinherit+0x38>
 801465a:	bf00      	nop
 801465c:	20002054 	.word	0x20002054
 8014660:	20002070 	.word	0x20002070

08014664 <vTaskPriorityDisinheritAfterTimeout>:
		if( pxMutexHolder != NULL )
 8014664:	b1c0      	cbz	r0, 8014698 <vTaskPriorityDisinheritAfterTimeout+0x34>
	{
 8014666:	b570      	push	{r4, r5, r6, lr}
 8014668:	4604      	mov	r4, r0
			configASSERT( pxTCB->uxMutexesHeld );
 801466a:	6d00      	ldr	r0, [r0, #80]	; 0x50
	{
 801466c:	b082      	sub	sp, #8
			configASSERT( pxTCB->uxMutexesHeld );
 801466e:	b150      	cbz	r0, 8014686 <vTaskPriorityDisinheritAfterTimeout+0x22>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8014670:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
			if( pxTCB->uxPriority != uxPriorityToUse )
 8014672:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8014674:	428b      	cmp	r3, r1
 8014676:	bf38      	it	cc
 8014678:	460b      	movcc	r3, r1
 801467a:	429a      	cmp	r2, r3
 801467c:	d001      	beq.n	8014682 <vTaskPriorityDisinheritAfterTimeout+0x1e>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 801467e:	2801      	cmp	r0, #1
 8014680:	d00b      	beq.n	801469a <vTaskPriorityDisinheritAfterTimeout+0x36>
	}
 8014682:	b002      	add	sp, #8
 8014684:	bd70      	pop	{r4, r5, r6, pc}
 8014686:	f04f 0320 	mov.w	r3, #32
 801468a:	f383 8811 	msr	BASEPRI, r3
 801468e:	f3bf 8f6f 	isb	sy
 8014692:	f3bf 8f4f 	dsb	sy
			configASSERT( pxTCB->uxMutexesHeld );
 8014696:	e7fe      	b.n	8014696 <vTaskPriorityDisinheritAfterTimeout+0x32>
 8014698:	4770      	bx	lr
					configASSERT( pxTCB != pxCurrentTCB );
 801469a:	4d24      	ldr	r5, [pc, #144]	; (801472c <vTaskPriorityDisinheritAfterTimeout+0xc8>)
 801469c:	f8d5 10ac 	ldr.w	r1, [r5, #172]	; 0xac
 80146a0:	42a1      	cmp	r1, r4
 80146a2:	d027      	beq.n	80146f4 <vTaskPriorityDisinheritAfterTimeout+0x90>
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80146a4:	69a1      	ldr	r1, [r4, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80146a6:	4e22      	ldr	r6, [pc, #136]	; (8014730 <vTaskPriorityDisinheritAfterTimeout+0xcc>)
					pxTCB->uxPriority = uxPriorityToUse;
 80146a8:	62e3      	str	r3, [r4, #44]	; 0x2c
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80146aa:	2900      	cmp	r1, #0
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80146ac:	bfa8      	it	ge
 80146ae:	f1c3 0307 	rsbge	r3, r3, #7
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80146b2:	6961      	ldr	r1, [r4, #20]
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80146b4:	bfa8      	it	ge
 80146b6:	61a3      	strge	r3, [r4, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80146b8:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80146bc:	eb06 0382 	add.w	r3, r6, r2, lsl #2
 80146c0:	4299      	cmp	r1, r3
 80146c2:	d1de      	bne.n	8014682 <vTaskPriorityDisinheritAfterTimeout+0x1e>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80146c4:	1d21      	adds	r1, r4, #4
 80146c6:	4608      	mov	r0, r1
 80146c8:	9101      	str	r1, [sp, #4]
 80146ca:	f7fe f9a3 	bl	8012a14 <uxListRemove>
 80146ce:	9901      	ldr	r1, [sp, #4]
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80146d0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80146d2:	b1c0      	cbz	r0, 8014706 <vTaskPriorityDisinheritAfterTimeout+0xa2>
 80146d4:	2301      	movs	r3, #1
 80146d6:	4093      	lsls	r3, r2
 80146d8:	0090      	lsls	r0, r2, #2
						prvAddTaskToReadyList( pxTCB );
 80146da:	f8d5 40b0 	ldr.w	r4, [r5, #176]	; 0xb0
 80146de:	4410      	add	r0, r2
 80146e0:	4323      	orrs	r3, r4
 80146e2:	eb06 0080 	add.w	r0, r6, r0, lsl #2
 80146e6:	f8c5 30b0 	str.w	r3, [r5, #176]	; 0xb0
	}
 80146ea:	b002      	add	sp, #8
 80146ec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
						prvAddTaskToReadyList( pxTCB );
 80146f0:	f7fe b968 	b.w	80129c4 <vListInsertEnd>
 80146f4:	f04f 0320 	mov.w	r3, #32
 80146f8:	f383 8811 	msr	BASEPRI, r3
 80146fc:	f3bf 8f6f 	isb	sy
 8014700:	f3bf 8f4f 	dsb	sy
					configASSERT( pxTCB != pxCurrentTCB );
 8014704:	e7fe      	b.n	8014704 <vTaskPriorityDisinheritAfterTimeout+0xa0>
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8014706:	eb02 0382 	add.w	r3, r2, r2, lsl #2
 801470a:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 801470e:	0090      	lsls	r0, r2, #2
 8014710:	69db      	ldr	r3, [r3, #28]
 8014712:	b113      	cbz	r3, 801471a <vTaskPriorityDisinheritAfterTimeout+0xb6>
 8014714:	2301      	movs	r3, #1
 8014716:	4093      	lsls	r3, r2
 8014718:	e7df      	b.n	80146da <vTaskPriorityDisinheritAfterTimeout+0x76>
 801471a:	f8d5 40b0 	ldr.w	r4, [r5, #176]	; 0xb0
 801471e:	2301      	movs	r3, #1
 8014720:	4093      	lsls	r3, r2
 8014722:	ea24 0403 	bic.w	r4, r4, r3
 8014726:	f8c5 40b0 	str.w	r4, [r5, #176]	; 0xb0
 801472a:	e7d6      	b.n	80146da <vTaskPriorityDisinheritAfterTimeout+0x76>
 801472c:	20002054 	.word	0x20002054
 8014730:	20002070 	.word	0x20002070

08014734 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 8014734:	4b05      	ldr	r3, [pc, #20]	; (801474c <pvTaskIncrementMutexHeldCount+0x18>)
 8014736:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 801473a:	b122      	cbz	r2, 8014746 <pvTaskIncrementMutexHeldCount+0x12>
			( pxCurrentTCB->uxMutexesHeld )++;
 801473c:	f8d3 10ac 	ldr.w	r1, [r3, #172]	; 0xac
 8014740:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8014742:	3201      	adds	r2, #1
 8014744:	650a      	str	r2, [r1, #80]	; 0x50
		return pxCurrentTCB;
 8014746:	f8d3 00ac 	ldr.w	r0, [r3, #172]	; 0xac
	}
 801474a:	4770      	bx	lr
 801474c:	20002054 	.word	0x20002054

08014750 <prvSwitchTimerLists>:
	}
}
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8014750:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014754:	4e1f      	ldr	r6, [pc, #124]	; (80147d4 <prvSwitchTimerLists+0x84>)
 8014756:	b084      	sub	sp, #16
		xMessage.xMessageID = xCommandID;
 8014758:	f04f 0800 	mov.w	r8, #0

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801475c:	e00d      	b.n	801477a <prvSwitchTimerLists+0x2a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801475e:	68db      	ldr	r3, [r3, #12]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014760:	68dc      	ldr	r4, [r3, #12]
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8014762:	681f      	ldr	r7, [r3, #0]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8014764:	1d25      	adds	r5, r4, #4
 8014766:	4628      	mov	r0, r5
 8014768:	f7fe f954 	bl	8012a14 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801476c:	6a23      	ldr	r3, [r4, #32]
 801476e:	4620      	mov	r0, r4
 8014770:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8014772:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8014776:	075b      	lsls	r3, r3, #29
 8014778:	d409      	bmi.n	801478e <prvSwitchTimerLists+0x3e>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801477a:	6833      	ldr	r3, [r6, #0]
 801477c:	681a      	ldr	r2, [r3, #0]
 801477e:	2a00      	cmp	r2, #0
 8014780:	d1ed      	bne.n	801475e <prvSwitchTimerLists+0xe>
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
	pxCurrentTimerList = pxOverflowTimerList;
 8014782:	68b2      	ldr	r2, [r6, #8]
 8014784:	6032      	str	r2, [r6, #0]
	pxOverflowTimerList = pxTemp;
 8014786:	60b3      	str	r3, [r6, #8]
}
 8014788:	b004      	add	sp, #16
 801478a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 801478e:	69a3      	ldr	r3, [r4, #24]
 8014790:	443b      	add	r3, r7
			if( xReloadTime > xNextExpireTime )
 8014792:	429f      	cmp	r7, r3
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8014794:	4629      	mov	r1, r5
			if( xReloadTime > xNextExpireTime )
 8014796:	d205      	bcs.n	80147a4 <prvSwitchTimerLists+0x54>
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8014798:	6830      	ldr	r0, [r6, #0]
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 801479a:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 801479c:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801479e:	f7fe f921 	bl	80129e4 <vListInsert>
 80147a2:	e7ea      	b.n	801477a <prvSwitchTimerLists+0x2a>
	if( xTimerQueue != NULL )
 80147a4:	6873      	ldr	r3, [r6, #4]
 80147a6:	b163      	cbz	r3, 80147c2 <prvSwitchTimerLists+0x72>
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80147a8:	e9cd 8701 	strd	r8, r7, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80147ac:	9403      	str	r4, [sp, #12]
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80147ae:	f7ff fe93 	bl	80144d8 <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80147b2:	2300      	movs	r3, #0
 80147b4:	6870      	ldr	r0, [r6, #4]
 80147b6:	461a      	mov	r2, r3
 80147b8:	a901      	add	r1, sp, #4
 80147ba:	f7fe fa09 	bl	8012bd0 <xQueueGenericSend>
				configASSERT( xResult );
 80147be:	2800      	cmp	r0, #0
 80147c0:	d1db      	bne.n	801477a <prvSwitchTimerLists+0x2a>
 80147c2:	f04f 0320 	mov.w	r3, #32
 80147c6:	f383 8811 	msr	BASEPRI, r3
 80147ca:	f3bf 8f6f 	isb	sy
 80147ce:	f3bf 8f4f 	dsb	sy
 80147d2:	e7fe      	b.n	80147d2 <prvSwitchTimerLists+0x82>
 80147d4:	20002180 	.word	0x20002180

080147d8 <prvTimerTask>:
{
 80147d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80147dc:	4c90      	ldr	r4, [pc, #576]	; (8014a20 <prvTimerTask+0x248>)
					portYIELD_WITHIN_API();
 80147de:	f8df 8244 	ldr.w	r8, [pc, #580]	; 8014a24 <prvTimerTask+0x24c>
{
 80147e2:	b088      	sub	sp, #32
					portYIELD_WITHIN_API();
 80147e4:	f04f 5980 	mov.w	r9, #268435456	; 0x10000000
 80147e8:	2600      	movs	r6, #0
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80147ea:	6823      	ldr	r3, [r4, #0]
 80147ec:	681f      	ldr	r7, [r3, #0]
 80147ee:	2f00      	cmp	r7, #0
 80147f0:	f000 809a 	beq.w	8014928 <prvTimerTask+0x150>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80147f4:	68db      	ldr	r3, [r3, #12]
 80147f6:	681f      	ldr	r7, [r3, #0]
	vTaskSuspendAll();
 80147f8:	f7ff fb1a 	bl	8013e30 <vTaskSuspendAll>
	xTimeNow = xTaskGetTickCount();
 80147fc:	f7ff fb22 	bl	8013e44 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 8014800:	68e3      	ldr	r3, [r4, #12]
 8014802:	4283      	cmp	r3, r0
	xTimeNow = xTaskGetTickCount();
 8014804:	4605      	mov	r5, r0
	if( xTimeNow < xLastTime )
 8014806:	f200 809e 	bhi.w	8014946 <prvTimerTask+0x16e>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 801480a:	4287      	cmp	r7, r0
	xLastTime = xTimeNow;
 801480c:	60e0      	str	r0, [r4, #12]
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 801480e:	f240 80a3 	bls.w	8014958 <prvTimerTask+0x180>
 8014812:	2200      	movs	r2, #0
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8014814:	6860      	ldr	r0, [r4, #4]
 8014816:	1b79      	subs	r1, r7, r5
 8014818:	f7fe ffa2 	bl	8013760 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 801481c:	f7ff fc32 	bl	8014084 <xTaskResumeAll>
 8014820:	b928      	cbnz	r0, 801482e <prvTimerTask+0x56>
					portYIELD_WITHIN_API();
 8014822:	f8c8 9000 	str.w	r9, [r8]
 8014826:	f3bf 8f4f 	dsb	sy
 801482a:	f3bf 8f6f 	isb	sy
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801482e:	6860      	ldr	r0, [r4, #4]
 8014830:	2200      	movs	r2, #0
 8014832:	a902      	add	r1, sp, #8
 8014834:	f7fe fc10 	bl	8013058 <xQueueReceive>
 8014838:	2800      	cmp	r0, #0
 801483a:	d0d6      	beq.n	80147ea <prvTimerTask+0x12>
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 801483c:	9b02      	ldr	r3, [sp, #8]
 801483e:	2b00      	cmp	r3, #0
 8014840:	dbf5      	blt.n	801482e <prvTimerTask+0x56>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8014842:	9d04      	ldr	r5, [sp, #16]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8014844:	696b      	ldr	r3, [r5, #20]
 8014846:	b113      	cbz	r3, 801484e <prvTimerTask+0x76>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8014848:	1d28      	adds	r0, r5, #4
 801484a:	f7fe f8e3 	bl	8012a14 <uxListRemove>
	xTimeNow = xTaskGetTickCount();
 801484e:	f7ff faf9 	bl	8013e44 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 8014852:	68e3      	ldr	r3, [r4, #12]
 8014854:	4298      	cmp	r0, r3
	xTimeNow = xTaskGetTickCount();
 8014856:	4607      	mov	r7, r0
	if( xTimeNow < xLastTime )
 8014858:	d37b      	bcc.n	8014952 <prvTimerTask+0x17a>
	xLastTime = xTimeNow;
 801485a:	9b02      	ldr	r3, [sp, #8]
 801485c:	60e7      	str	r7, [r4, #12]
			switch( xMessage.xMessageID )
 801485e:	2b09      	cmp	r3, #9
 8014860:	d8e5      	bhi.n	801482e <prvTimerTask+0x56>
 8014862:	e8df f003 	tbb	[pc, r3]
 8014866:	0505      	.short	0x0505
 8014868:	583b5105 	.word	0x583b5105
 801486c:	3b510505 	.word	0x3b510505
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8014870:	f895 1028 	ldrb.w	r1, [r5, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8014874:	9b03      	ldr	r3, [sp, #12]
 8014876:	69aa      	ldr	r2, [r5, #24]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8014878:	612d      	str	r5, [r5, #16]
 801487a:	1898      	adds	r0, r3, r2
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801487c:	f041 0101 	orr.w	r1, r1, #1
 8014880:	f885 1028 	strb.w	r1, [r5, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8014884:	bf2c      	ite	cs
 8014886:	2101      	movcs	r1, #1
 8014888:	2100      	movcc	r1, #0
	if( xNextExpiryTime <= xTimeNow )
 801488a:	42b8      	cmp	r0, r7
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 801488c:	6068      	str	r0, [r5, #4]
	if( xNextExpiryTime <= xTimeNow )
 801488e:	d87e      	bhi.n	801498e <prvTimerTask+0x1b6>
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014890:	1afb      	subs	r3, r7, r3
 8014892:	429a      	cmp	r2, r3
 8014894:	f200 8088 	bhi.w	80149a8 <prvTimerTask+0x1d0>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8014898:	6a2b      	ldr	r3, [r5, #32]
 801489a:	4628      	mov	r0, r5
 801489c:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801489e:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
 80148a2:	075b      	lsls	r3, r3, #29
 80148a4:	d5c3      	bpl.n	801482e <prvTimerTask+0x56>
	if( xTimerQueue != NULL )
 80148a6:	6863      	ldr	r3, [r4, #4]
 80148a8:	b17b      	cbz	r3, 80148ca <prvTimerTask+0xf2>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80148aa:	69aa      	ldr	r2, [r5, #24]
 80148ac:	9b03      	ldr	r3, [sp, #12]
		xMessage.xMessageID = xCommandID;
 80148ae:	9605      	str	r6, [sp, #20]
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80148b0:	4413      	add	r3, r2
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80148b2:	e9cd 3506 	strd	r3, r5, [sp, #24]
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80148b6:	f7ff fe0f 	bl	80144d8 <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80148ba:	2300      	movs	r3, #0
 80148bc:	6860      	ldr	r0, [r4, #4]
 80148be:	461a      	mov	r2, r3
 80148c0:	a905      	add	r1, sp, #20
 80148c2:	f7fe f985 	bl	8012bd0 <xQueueGenericSend>
							configASSERT( xResult );
 80148c6:	2800      	cmp	r0, #0
 80148c8:	d1b1      	bne.n	801482e <prvTimerTask+0x56>
 80148ca:	f04f 0320 	mov.w	r3, #32
 80148ce:	f383 8811 	msr	BASEPRI, r3
 80148d2:	f3bf 8f6f 	isb	sy
 80148d6:	f3bf 8f4f 	dsb	sy
 80148da:	e7fe      	b.n	80148da <prvTimerTask+0x102>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80148dc:	f895 2028 	ldrb.w	r2, [r5, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80148e0:	9b03      	ldr	r3, [sp, #12]
 80148e2:	61ab      	str	r3, [r5, #24]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80148e4:	f042 0201 	orr.w	r2, r2, #1
 80148e8:	f885 2028 	strb.w	r2, [r5, #40]	; 0x28
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80148ec:	2b00      	cmp	r3, #0
 80148ee:	f000 8089 	beq.w	8014a04 <prvTimerTask+0x22c>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80148f2:	443b      	add	r3, r7
	if( xNextExpiryTime <= xTimeNow )
 80148f4:	42bb      	cmp	r3, r7
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80148f6:	bf94      	ite	ls
 80148f8:	68a0      	ldrls	r0, [r4, #8]
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80148fa:	6820      	ldrhi	r0, [r4, #0]
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80148fc:	606b      	str	r3, [r5, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80148fe:	612d      	str	r5, [r5, #16]
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8014900:	1d29      	adds	r1, r5, #4
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8014902:	f7fe f86f 	bl	80129e4 <vListInsert>
 8014906:	e792      	b.n	801482e <prvTimerTask+0x56>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8014908:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
 801490c:	f023 0301 	bic.w	r3, r3, #1
 8014910:	f885 3028 	strb.w	r3, [r5, #40]	; 0x28
					break;
 8014914:	e78b      	b.n	801482e <prvTimerTask+0x56>
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8014916:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
 801491a:	079a      	lsls	r2, r3, #30
 801491c:	d540      	bpl.n	80149a0 <prvTimerTask+0x1c8>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801491e:	f023 0301 	bic.w	r3, r3, #1
 8014922:	f885 3028 	strb.w	r3, [r5, #40]	; 0x28
 8014926:	e782      	b.n	801482e <prvTimerTask+0x56>
	vTaskSuspendAll();
 8014928:	f7ff fa82 	bl	8013e30 <vTaskSuspendAll>
	xTimeNow = xTaskGetTickCount();
 801492c:	f7ff fa8a 	bl	8013e44 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 8014930:	68e3      	ldr	r3, [r4, #12]
 8014932:	4283      	cmp	r3, r0
	xTimeNow = xTaskGetTickCount();
 8014934:	4605      	mov	r5, r0
	if( xTimeNow < xLastTime )
 8014936:	d806      	bhi.n	8014946 <prvTimerTask+0x16e>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8014938:	68a3      	ldr	r3, [r4, #8]
	xLastTime = xTimeNow;
 801493a:	60e5      	str	r5, [r4, #12]
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 801493c:	681a      	ldr	r2, [r3, #0]
 801493e:	fab2 f282 	clz	r2, r2
 8014942:	0952      	lsrs	r2, r2, #5
 8014944:	e766      	b.n	8014814 <prvTimerTask+0x3c>
		prvSwitchTimerLists();
 8014946:	f7ff ff03 	bl	8014750 <prvSwitchTimerLists>
	xLastTime = xTimeNow;
 801494a:	60e5      	str	r5, [r4, #12]
			( void ) xTaskResumeAll();
 801494c:	f7ff fb9a 	bl	8014084 <xTaskResumeAll>
 8014950:	e76d      	b.n	801482e <prvTimerTask+0x56>
		prvSwitchTimerLists();
 8014952:	f7ff fefd 	bl	8014750 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8014956:	e780      	b.n	801485a <prvTimerTask+0x82>
				( void ) xTaskResumeAll();
 8014958:	f7ff fb94 	bl	8014084 <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801495c:	6823      	ldr	r3, [r4, #0]
 801495e:	68db      	ldr	r3, [r3, #12]
 8014960:	f8d3 a00c 	ldr.w	sl, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8014964:	f10a 0104 	add.w	r1, sl, #4
 8014968:	4608      	mov	r0, r1
 801496a:	9101      	str	r1, [sp, #4]
 801496c:	f7fe f852 	bl	8012a14 <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8014970:	f89a 3028 	ldrb.w	r3, [sl, #40]	; 0x28
 8014974:	9901      	ldr	r1, [sp, #4]
 8014976:	f013 0f04 	tst.w	r3, #4
 801497a:	d11a      	bne.n	80149b2 <prvTimerTask+0x1da>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801497c:	f023 0301 	bic.w	r3, r3, #1
 8014980:	f88a 3028 	strb.w	r3, [sl, #40]	; 0x28
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8014984:	f8da 3020 	ldr.w	r3, [sl, #32]
 8014988:	4650      	mov	r0, sl
 801498a:	4798      	blx	r3
}
 801498c:	e74f      	b.n	801482e <prvTimerTask+0x56>
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 801498e:	42bb      	cmp	r3, r7
 8014990:	d901      	bls.n	8014996 <prvTimerTask+0x1be>
 8014992:	2900      	cmp	r1, #0
 8014994:	d080      	beq.n	8014898 <prvTimerTask+0xc0>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8014996:	6820      	ldr	r0, [r4, #0]
 8014998:	1d29      	adds	r1, r5, #4
 801499a:	f7fe f823 	bl	80129e4 <vListInsert>
	return xProcessTimerNow;
 801499e:	e746      	b.n	801482e <prvTimerTask+0x56>
							vPortFree( pxTimer );
 80149a0:	4628      	mov	r0, r5
 80149a2:	f000 faf3 	bl	8014f8c <vPortFree>
 80149a6:	e742      	b.n	801482e <prvTimerTask+0x56>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80149a8:	68a0      	ldr	r0, [r4, #8]
 80149aa:	1d29      	adds	r1, r5, #4
 80149ac:	f7fe f81a 	bl	80129e4 <vListInsert>
	return xProcessTimerNow;
 80149b0:	e73d      	b.n	801482e <prvTimerTask+0x56>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80149b2:	f8da 3018 	ldr.w	r3, [sl, #24]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80149b6:	f8ca a010 	str.w	sl, [sl, #16]
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80149ba:	18fa      	adds	r2, r7, r3
	if( xNextExpiryTime <= xTimeNow )
 80149bc:	42aa      	cmp	r2, r5
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80149be:	f8ca 2004 	str.w	r2, [sl, #4]
	if( xNextExpiryTime <= xTimeNow )
 80149c2:	d903      	bls.n	80149cc <prvTimerTask+0x1f4>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80149c4:	6820      	ldr	r0, [r4, #0]
 80149c6:	f7fe f80d 	bl	80129e4 <vListInsert>
	return xProcessTimerNow;
 80149ca:	e7db      	b.n	8014984 <prvTimerTask+0x1ac>
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80149cc:	1bed      	subs	r5, r5, r7
 80149ce:	42ab      	cmp	r3, r5
 80149d0:	d821      	bhi.n	8014a16 <prvTimerTask+0x23e>
	if( xTimerQueue != NULL )
 80149d2:	6863      	ldr	r3, [r4, #4]
 80149d4:	b16b      	cbz	r3, 80149f2 <prvTimerTask+0x21a>
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80149d6:	e9cd 6705 	strd	r6, r7, [sp, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80149da:	f8cd a01c 	str.w	sl, [sp, #28]
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80149de:	f7ff fd7b 	bl	80144d8 <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80149e2:	2300      	movs	r3, #0
 80149e4:	6860      	ldr	r0, [r4, #4]
 80149e6:	461a      	mov	r2, r3
 80149e8:	a905      	add	r1, sp, #20
 80149ea:	f7fe f8f1 	bl	8012bd0 <xQueueGenericSend>
			configASSERT( xResult );
 80149ee:	2800      	cmp	r0, #0
 80149f0:	d1c8      	bne.n	8014984 <prvTimerTask+0x1ac>
 80149f2:	f04f 0320 	mov.w	r3, #32
 80149f6:	f383 8811 	msr	BASEPRI, r3
 80149fa:	f3bf 8f6f 	isb	sy
 80149fe:	f3bf 8f4f 	dsb	sy
 8014a02:	e7fe      	b.n	8014a02 <prvTimerTask+0x22a>
 8014a04:	f04f 0320 	mov.w	r3, #32
 8014a08:	f383 8811 	msr	BASEPRI, r3
 8014a0c:	f3bf 8f6f 	isb	sy
 8014a10:	f3bf 8f4f 	dsb	sy
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8014a14:	e7fe      	b.n	8014a14 <prvTimerTask+0x23c>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8014a16:	68a0      	ldr	r0, [r4, #8]
 8014a18:	f7fd ffe4 	bl	80129e4 <vListInsert>
	return xProcessTimerNow;
 8014a1c:	e7b2      	b.n	8014984 <prvTimerTask+0x1ac>
 8014a1e:	bf00      	nop
 8014a20:	20002180 	.word	0x20002180
 8014a24:	e000ed04 	.word	0xe000ed04

08014a28 <xTimerCreateTimerTask>:
{
 8014a28:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
 8014a2a:	4c1c      	ldr	r4, [pc, #112]	; (8014a9c <xTimerCreateTimerTask+0x74>)
{
 8014a2c:	b083      	sub	sp, #12
	taskENTER_CRITICAL();
 8014a2e:	f000 f8a9 	bl	8014b84 <vPortEnterCritical>
		if( xTimerQueue == NULL )
 8014a32:	6867      	ldr	r7, [r4, #4]
 8014a34:	b1d7      	cbz	r7, 8014a6c <xTimerCreateTimerTask+0x44>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8014a36:	f000 f8c7 	bl	8014bc8 <vPortExitCritical>
	if( xTimerQueue != NULL )
 8014a3a:	6863      	ldr	r3, [r4, #4]
 8014a3c:	b15b      	cbz	r3, 8014a56 <xTimerCreateTimerTask+0x2e>
			xReturn = xTaskCreate(	prvTimerTask,
 8014a3e:	4b18      	ldr	r3, [pc, #96]	; (8014aa0 <xTimerCreateTimerTask+0x78>)
 8014a40:	9301      	str	r3, [sp, #4]
 8014a42:	2306      	movs	r3, #6
 8014a44:	9300      	str	r3, [sp, #0]
 8014a46:	4917      	ldr	r1, [pc, #92]	; (8014aa4 <xTimerCreateTimerTask+0x7c>)
 8014a48:	4817      	ldr	r0, [pc, #92]	; (8014aa8 <xTimerCreateTimerTask+0x80>)
 8014a4a:	2300      	movs	r3, #0
 8014a4c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8014a50:	f7fe ff1a 	bl	8013888 <xTaskCreate>
	configASSERT( xReturn );
 8014a54:	b940      	cbnz	r0, 8014a68 <xTimerCreateTimerTask+0x40>
 8014a56:	f04f 0320 	mov.w	r3, #32
 8014a5a:	f383 8811 	msr	BASEPRI, r3
 8014a5e:	f3bf 8f6f 	isb	sy
 8014a62:	f3bf 8f4f 	dsb	sy
 8014a66:	e7fe      	b.n	8014a66 <xTimerCreateTimerTask+0x3e>
}
 8014a68:	b003      	add	sp, #12
 8014a6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
			vListInitialise( &xActiveTimerList1 );
 8014a6c:	f104 0610 	add.w	r6, r4, #16
 8014a70:	4630      	mov	r0, r6
			vListInitialise( &xActiveTimerList2 );
 8014a72:	f104 0524 	add.w	r5, r4, #36	; 0x24
			vListInitialise( &xActiveTimerList1 );
 8014a76:	f7fd ff95 	bl	80129a4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8014a7a:	4628      	mov	r0, r5
 8014a7c:	f7fd ff92 	bl	80129a4 <vListInitialise>
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8014a80:	463a      	mov	r2, r7
 8014a82:	210c      	movs	r1, #12
 8014a84:	2064      	movs	r0, #100	; 0x64
			pxCurrentTimerList = &xActiveTimerList1;
 8014a86:	6026      	str	r6, [r4, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8014a88:	60a5      	str	r5, [r4, #8]
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8014a8a:	f7fe f815 	bl	8012ab8 <xQueueGenericCreate>
 8014a8e:	6060      	str	r0, [r4, #4]
				if( xTimerQueue != NULL )
 8014a90:	2800      	cmp	r0, #0
 8014a92:	d0d0      	beq.n	8014a36 <xTimerCreateTimerTask+0xe>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8014a94:	4905      	ldr	r1, [pc, #20]	; (8014aac <xTimerCreateTimerTask+0x84>)
 8014a96:	f7fe fe4f 	bl	8013738 <vQueueAddToRegistry>
 8014a9a:	e7cc      	b.n	8014a36 <xTimerCreateTimerTask+0xe>
 8014a9c:	20002180 	.word	0x20002180
 8014aa0:	200021b8 	.word	0x200021b8
 8014aa4:	0801c2d8 	.word	0x0801c2d8
 8014aa8:	080147d9 	.word	0x080147d9
 8014aac:	0801c2d0 	.word	0x0801c2d0

08014ab0 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8014ab0:	4808      	ldr	r0, [pc, #32]	; (8014ad4 <prvPortStartFirstTask+0x24>)
 8014ab2:	6800      	ldr	r0, [r0, #0]
 8014ab4:	6800      	ldr	r0, [r0, #0]
 8014ab6:	f380 8808 	msr	MSP, r0
 8014aba:	f04f 0000 	mov.w	r0, #0
 8014abe:	f380 8814 	msr	CONTROL, r0
 8014ac2:	b662      	cpsie	i
 8014ac4:	b661      	cpsie	f
 8014ac6:	f3bf 8f4f 	dsb	sy
 8014aca:	f3bf 8f6f 	isb	sy
 8014ace:	df00      	svc	0
 8014ad0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8014ad2:	0000      	.short	0x0000
 8014ad4:	e000ed08 	.word	0xe000ed08

08014ad8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8014ad8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8014ae8 <vPortEnableVFP+0x10>
 8014adc:	6801      	ldr	r1, [r0, #0]
 8014ade:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8014ae2:	6001      	str	r1, [r0, #0]
 8014ae4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8014ae6:	0000      	.short	0x0000
 8014ae8:	e000ed88 	.word	0xe000ed88

08014aec <prvTaskExitError>:
	configASSERT( uxCriticalNesting == ~0UL );
 8014aec:	4b0e      	ldr	r3, [pc, #56]	; (8014b28 <prvTaskExitError+0x3c>)
 8014aee:	681b      	ldr	r3, [r3, #0]
{
 8014af0:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 8014af2:	2200      	movs	r2, #0
	configASSERT( uxCriticalNesting == ~0UL );
 8014af4:	3301      	adds	r3, #1
volatile uint32_t ulDummy = 0;
 8014af6:	9201      	str	r2, [sp, #4]
	configASSERT( uxCriticalNesting == ~0UL );
 8014af8:	d008      	beq.n	8014b0c <prvTaskExitError+0x20>
 8014afa:	f04f 0320 	mov.w	r3, #32
 8014afe:	f383 8811 	msr	BASEPRI, r3
 8014b02:	f3bf 8f6f 	isb	sy
 8014b06:	f3bf 8f4f 	dsb	sy
 8014b0a:	e7fe      	b.n	8014b0a <prvTaskExitError+0x1e>
 8014b0c:	f04f 0320 	mov.w	r3, #32
 8014b10:	f383 8811 	msr	BASEPRI, r3
 8014b14:	f3bf 8f6f 	isb	sy
 8014b18:	f3bf 8f4f 	dsb	sy
	while( ulDummy == 0 )
 8014b1c:	9b01      	ldr	r3, [sp, #4]
 8014b1e:	2b00      	cmp	r3, #0
 8014b20:	d0fc      	beq.n	8014b1c <prvTaskExitError+0x30>
}
 8014b22:	b002      	add	sp, #8
 8014b24:	4770      	bx	lr
 8014b26:	bf00      	nop
 8014b28:	20000360 	.word	0x20000360

08014b2c <pxPortInitialiseStack>:
{
 8014b2c:	b430      	push	{r4, r5}
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8014b2e:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8014b32:	4c09      	ldr	r4, [pc, #36]	; (8014b58 <pxPortInitialiseStack+0x2c>)
 8014b34:	f840 4c0c 	str.w	r4, [r0, #-12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8014b38:	f04f 7580 	mov.w	r5, #16777216	; 0x1000000
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8014b3c:	f06f 0302 	mvn.w	r3, #2
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8014b40:	f840 5c04 	str.w	r5, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8014b44:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8014b48:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8014b4c:	f840 3c24 	str.w	r3, [r0, #-36]
}
 8014b50:	bc30      	pop	{r4, r5}
 8014b52:	3844      	subs	r0, #68	; 0x44
 8014b54:	4770      	bx	lr
 8014b56:	bf00      	nop
 8014b58:	08014aed 	.word	0x08014aed
 8014b5c:	00000000 	.word	0x00000000

08014b60 <SVC_Handler>:
	__asm volatile (
 8014b60:	4b07      	ldr	r3, [pc, #28]	; (8014b80 <pxCurrentTCBConst2>)
 8014b62:	6819      	ldr	r1, [r3, #0]
 8014b64:	6808      	ldr	r0, [r1, #0]
 8014b66:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014b6a:	f380 8809 	msr	PSP, r0
 8014b6e:	f3bf 8f6f 	isb	sy
 8014b72:	f04f 0000 	mov.w	r0, #0
 8014b76:	f380 8811 	msr	BASEPRI, r0
 8014b7a:	4770      	bx	lr
 8014b7c:	f3af 8000 	nop.w

08014b80 <pxCurrentTCBConst2>:
 8014b80:	20002100 	.word	0x20002100

08014b84 <vPortEnterCritical>:
 8014b84:	f04f 0320 	mov.w	r3, #32
 8014b88:	f383 8811 	msr	BASEPRI, r3
 8014b8c:	f3bf 8f6f 	isb	sy
 8014b90:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 8014b94:	4a0a      	ldr	r2, [pc, #40]	; (8014bc0 <vPortEnterCritical+0x3c>)
 8014b96:	6813      	ldr	r3, [r2, #0]
 8014b98:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 8014b9a:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 8014b9c:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 8014b9e:	d000      	beq.n	8014ba2 <vPortEnterCritical+0x1e>
}
 8014ba0:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8014ba2:	4b08      	ldr	r3, [pc, #32]	; (8014bc4 <vPortEnterCritical+0x40>)
 8014ba4:	681b      	ldr	r3, [r3, #0]
 8014ba6:	f013 0fff 	tst.w	r3, #255	; 0xff
 8014baa:	d0f9      	beq.n	8014ba0 <vPortEnterCritical+0x1c>
 8014bac:	f04f 0320 	mov.w	r3, #32
 8014bb0:	f383 8811 	msr	BASEPRI, r3
 8014bb4:	f3bf 8f6f 	isb	sy
 8014bb8:	f3bf 8f4f 	dsb	sy
 8014bbc:	e7fe      	b.n	8014bbc <vPortEnterCritical+0x38>
 8014bbe:	bf00      	nop
 8014bc0:	20000360 	.word	0x20000360
 8014bc4:	e000ed04 	.word	0xe000ed04

08014bc8 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8014bc8:	4a08      	ldr	r2, [pc, #32]	; (8014bec <vPortExitCritical+0x24>)
 8014bca:	6813      	ldr	r3, [r2, #0]
 8014bcc:	b943      	cbnz	r3, 8014be0 <vPortExitCritical+0x18>
 8014bce:	f04f 0320 	mov.w	r3, #32
 8014bd2:	f383 8811 	msr	BASEPRI, r3
 8014bd6:	f3bf 8f6f 	isb	sy
 8014bda:	f3bf 8f4f 	dsb	sy
 8014bde:	e7fe      	b.n	8014bde <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8014be0:	3b01      	subs	r3, #1
 8014be2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8014be4:	b90b      	cbnz	r3, 8014bea <vPortExitCritical+0x22>
	__asm volatile
 8014be6:	f383 8811 	msr	BASEPRI, r3
}
 8014bea:	4770      	bx	lr
 8014bec:	20000360 	.word	0x20000360

08014bf0 <PendSV_Handler>:
	__asm volatile
 8014bf0:	f3ef 8009 	mrs	r0, PSP
 8014bf4:	f3bf 8f6f 	isb	sy
 8014bf8:	4b15      	ldr	r3, [pc, #84]	; (8014c50 <pxCurrentTCBConst>)
 8014bfa:	681a      	ldr	r2, [r3, #0]
 8014bfc:	f01e 0f10 	tst.w	lr, #16
 8014c00:	bf08      	it	eq
 8014c02:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8014c06:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014c0a:	6010      	str	r0, [r2, #0]
 8014c0c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8014c10:	f04f 0020 	mov.w	r0, #32
 8014c14:	f380 8811 	msr	BASEPRI, r0
 8014c18:	f3bf 8f4f 	dsb	sy
 8014c1c:	f3bf 8f6f 	isb	sy
 8014c20:	f7ff fa5a 	bl	80140d8 <vTaskSwitchContext>
 8014c24:	f04f 0000 	mov.w	r0, #0
 8014c28:	f380 8811 	msr	BASEPRI, r0
 8014c2c:	bc09      	pop	{r0, r3}
 8014c2e:	6819      	ldr	r1, [r3, #0]
 8014c30:	6808      	ldr	r0, [r1, #0]
 8014c32:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014c36:	f01e 0f10 	tst.w	lr, #16
 8014c3a:	bf08      	it	eq
 8014c3c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8014c40:	f380 8809 	msr	PSP, r0
 8014c44:	f3bf 8f6f 	isb	sy
 8014c48:	4770      	bx	lr
 8014c4a:	bf00      	nop
 8014c4c:	f3af 8000 	nop.w

08014c50 <pxCurrentTCBConst>:
 8014c50:	20002100 	.word	0x20002100

08014c54 <xPortSysTickHandler>:
{
 8014c54:	b508      	push	{r3, lr}
	__asm volatile
 8014c56:	f04f 0320 	mov.w	r3, #32
 8014c5a:	f383 8811 	msr	BASEPRI, r3
 8014c5e:	f3bf 8f6f 	isb	sy
 8014c62:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 8014c66:	f7ff f8f3 	bl	8013e50 <xTaskIncrementTick>
 8014c6a:	b118      	cbz	r0, 8014c74 <xPortSysTickHandler+0x20>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8014c6c:	4b03      	ldr	r3, [pc, #12]	; (8014c7c <xPortSysTickHandler+0x28>)
 8014c6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014c72:	601a      	str	r2, [r3, #0]
	__asm volatile
 8014c74:	2300      	movs	r3, #0
 8014c76:	f383 8811 	msr	BASEPRI, r3
}
 8014c7a:	bd08      	pop	{r3, pc}
 8014c7c:	e000ed04 	.word	0xe000ed04

08014c80 <vPortSetupTimerInterrupt>:
{
 8014c80:	b430      	push	{r4, r5}
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8014c82:	4a09      	ldr	r2, [pc, #36]	; (8014ca8 <vPortSetupTimerInterrupt+0x28>)
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8014c84:	4d09      	ldr	r5, [pc, #36]	; (8014cac <vPortSetupTimerInterrupt+0x2c>)
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8014c86:	4b0a      	ldr	r3, [pc, #40]	; (8014cb0 <vPortSetupTimerInterrupt+0x30>)
 8014c88:	4c0a      	ldr	r4, [pc, #40]	; (8014cb4 <vPortSetupTimerInterrupt+0x34>)
 8014c8a:	480b      	ldr	r0, [pc, #44]	; (8014cb8 <vPortSetupTimerInterrupt+0x38>)
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8014c8c:	2100      	movs	r1, #0
 8014c8e:	6011      	str	r1, [r2, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8014c90:	6029      	str	r1, [r5, #0]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8014c92:	681b      	ldr	r3, [r3, #0]
 8014c94:	fba4 1303 	umull	r1, r3, r4, r3
 8014c98:	099b      	lsrs	r3, r3, #6
 8014c9a:	3b01      	subs	r3, #1
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8014c9c:	2107      	movs	r1, #7
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8014c9e:	6003      	str	r3, [r0, #0]
}
 8014ca0:	bc30      	pop	{r4, r5}
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8014ca2:	6011      	str	r1, [r2, #0]
}
 8014ca4:	4770      	bx	lr
 8014ca6:	bf00      	nop
 8014ca8:	e000e010 	.word	0xe000e010
 8014cac:	e000e018 	.word	0xe000e018
 8014cb0:	200000f8 	.word	0x200000f8
 8014cb4:	10624dd3 	.word	0x10624dd3
 8014cb8:	e000e014 	.word	0xe000e014

08014cbc <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8014cbc:	4b44      	ldr	r3, [pc, #272]	; (8014dd0 <xPortStartScheduler+0x114>)
 8014cbe:	4a45      	ldr	r2, [pc, #276]	; (8014dd4 <xPortStartScheduler+0x118>)
 8014cc0:	6819      	ldr	r1, [r3, #0]
 8014cc2:	4291      	cmp	r1, r2
 8014cc4:	d03f      	beq.n	8014d46 <xPortStartScheduler+0x8a>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8014cc6:	681a      	ldr	r2, [r3, #0]
 8014cc8:	4b43      	ldr	r3, [pc, #268]	; (8014dd8 <xPortStartScheduler+0x11c>)
 8014cca:	429a      	cmp	r2, r3
 8014ccc:	d032      	beq.n	8014d34 <xPortStartScheduler+0x78>
{
 8014cce:	b530      	push	{r4, r5, lr}
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8014cd0:	4b42      	ldr	r3, [pc, #264]	; (8014ddc <xPortStartScheduler+0x120>)
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8014cd2:	4a43      	ldr	r2, [pc, #268]	; (8014de0 <xPortStartScheduler+0x124>)
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8014cd4:	7819      	ldrb	r1, [r3, #0]
{
 8014cd6:	b085      	sub	sp, #20
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8014cd8:	20ff      	movs	r0, #255	; 0xff
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8014cda:	b2c9      	uxtb	r1, r1
 8014cdc:	9102      	str	r1, [sp, #8]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8014cde:	7018      	strb	r0, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8014ce0:	781b      	ldrb	r3, [r3, #0]
 8014ce2:	b2db      	uxtb	r3, r3
 8014ce4:	f88d 3007 	strb.w	r3, [sp, #7]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8014ce8:	f89d 3007 	ldrb.w	r3, [sp, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8014cec:	f89d 1007 	ldrb.w	r1, [sp, #7]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8014cf0:	f003 0320 	and.w	r3, r3, #32
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8014cf4:	2007      	movs	r0, #7
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8014cf6:	060c      	lsls	r4, r1, #24
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8014cf8:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8014cfa:	6050      	str	r0, [r2, #4]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8014cfc:	bf48      	it	mi
 8014cfe:	2106      	movmi	r1, #6
 8014d00:	d50f      	bpl.n	8014d22 <xPortStartScheduler+0x66>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8014d02:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8014d06:	005b      	lsls	r3, r3, #1
 8014d08:	b2db      	uxtb	r3, r3
 8014d0a:	f88d 3007 	strb.w	r3, [sp, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8014d0e:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8014d12:	0600      	lsls	r0, r0, #24
 8014d14:	460b      	mov	r3, r1
 8014d16:	f101 31ff 	add.w	r1, r1, #4294967295
 8014d1a:	d4f2      	bmi.n	8014d02 <xPortStartScheduler+0x46>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8014d1c:	2b03      	cmp	r3, #3
 8014d1e:	d01b      	beq.n	8014d58 <xPortStartScheduler+0x9c>
 8014d20:	6053      	str	r3, [r2, #4]
	__asm volatile
 8014d22:	f04f 0320 	mov.w	r3, #32
 8014d26:	f383 8811 	msr	BASEPRI, r3
 8014d2a:	f3bf 8f6f 	isb	sy
 8014d2e:	f3bf 8f4f 	dsb	sy
 8014d32:	e7fe      	b.n	8014d32 <xPortStartScheduler+0x76>
 8014d34:	f04f 0320 	mov.w	r3, #32
 8014d38:	f383 8811 	msr	BASEPRI, r3
 8014d3c:	f3bf 8f6f 	isb	sy
 8014d40:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8014d44:	e7fe      	b.n	8014d44 <xPortStartScheduler+0x88>
 8014d46:	f04f 0320 	mov.w	r3, #32
 8014d4a:	f383 8811 	msr	BASEPRI, r3
 8014d4e:	f3bf 8f6f 	isb	sy
 8014d52:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8014d56:	e7fe      	b.n	8014d56 <xPortStartScheduler+0x9a>
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8014d58:	9902      	ldr	r1, [sp, #8]
 8014d5a:	4820      	ldr	r0, [pc, #128]	; (8014ddc <xPortStartScheduler+0x120>)
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8014d5c:	4b21      	ldr	r3, [pc, #132]	; (8014de4 <xPortStartScheduler+0x128>)
	uxCriticalNesting = 0;
 8014d5e:	4c22      	ldr	r4, [pc, #136]	; (8014de8 <xPortStartScheduler+0x12c>)
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8014d60:	b2c9      	uxtb	r1, r1
 8014d62:	7001      	strb	r1, [r0, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8014d64:	6819      	ldr	r1, [r3, #0]
 8014d66:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8014d6a:	6019      	str	r1, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8014d6c:	6819      	ldr	r1, [r3, #0]
 8014d6e:	f041 4170 	orr.w	r1, r1, #4026531840	; 0xf0000000
 8014d72:	6019      	str	r1, [r3, #0]
	uxCriticalNesting = 0;
 8014d74:	2500      	movs	r5, #0
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8014d76:	f44f 7340 	mov.w	r3, #768	; 0x300
 8014d7a:	6053      	str	r3, [r2, #4]
	vPortSetupTimerInterrupt();
 8014d7c:	f7ff ff80 	bl	8014c80 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8014d80:	6025      	str	r5, [r4, #0]
	vPortEnableVFP();
 8014d82:	f7ff fea9 	bl	8014ad8 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8014d86:	4a19      	ldr	r2, [pc, #100]	; (8014dec <xPortStartScheduler+0x130>)
 8014d88:	6813      	ldr	r3, [r2, #0]
 8014d8a:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8014d8e:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
 8014d90:	f7ff fe8e 	bl	8014ab0 <prvPortStartFirstTask>
	vTaskSwitchContext();
 8014d94:	f7ff f9a0 	bl	80140d8 <vTaskSwitchContext>
	configASSERT( uxCriticalNesting == ~0UL );
 8014d98:	6823      	ldr	r3, [r4, #0]
volatile uint32_t ulDummy = 0;
 8014d9a:	9503      	str	r5, [sp, #12]
	configASSERT( uxCriticalNesting == ~0UL );
 8014d9c:	3301      	adds	r3, #1
 8014d9e:	d008      	beq.n	8014db2 <xPortStartScheduler+0xf6>
 8014da0:	f04f 0320 	mov.w	r3, #32
 8014da4:	f383 8811 	msr	BASEPRI, r3
 8014da8:	f3bf 8f6f 	isb	sy
 8014dac:	f3bf 8f4f 	dsb	sy
 8014db0:	e7fe      	b.n	8014db0 <xPortStartScheduler+0xf4>
 8014db2:	f04f 0320 	mov.w	r3, #32
 8014db6:	f383 8811 	msr	BASEPRI, r3
 8014dba:	f3bf 8f6f 	isb	sy
 8014dbe:	f3bf 8f4f 	dsb	sy
	while( ulDummy == 0 )
 8014dc2:	9b03      	ldr	r3, [sp, #12]
 8014dc4:	2b00      	cmp	r3, #0
 8014dc6:	d0fc      	beq.n	8014dc2 <xPortStartScheduler+0x106>
}
 8014dc8:	2000      	movs	r0, #0
 8014dca:	b005      	add	sp, #20
 8014dcc:	bd30      	pop	{r4, r5, pc}
 8014dce:	bf00      	nop
 8014dd0:	e000ed00 	.word	0xe000ed00
 8014dd4:	410fc271 	.word	0x410fc271
 8014dd8:	410fc270 	.word	0x410fc270
 8014ddc:	e000e400 	.word	0xe000e400
 8014de0:	200021bc 	.word	0x200021bc
 8014de4:	e000ed20 	.word	0xe000ed20
 8014de8:	20000360 	.word	0x20000360
 8014dec:	e000ef34 	.word	0xe000ef34

08014df0 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8014df0:	f3ef 8205 	mrs	r2, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8014df4:	2a0f      	cmp	r2, #15
 8014df6:	d811      	bhi.n	8014e1c <vPortValidateInterruptPriority+0x2c>
 8014df8:	4b10      	ldr	r3, [pc, #64]	; (8014e3c <vPortValidateInterruptPriority+0x4c>)
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8014dfa:	4911      	ldr	r1, [pc, #68]	; (8014e40 <vPortValidateInterruptPriority+0x50>)
 8014dfc:	685a      	ldr	r2, [r3, #4]
 8014dfe:	680b      	ldr	r3, [r1, #0]
 8014e00:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8014e04:	4293      	cmp	r3, r2
 8014e06:	d908      	bls.n	8014e1a <vPortValidateInterruptPriority+0x2a>
 8014e08:	f04f 0320 	mov.w	r3, #32
 8014e0c:	f383 8811 	msr	BASEPRI, r3
 8014e10:	f3bf 8f6f 	isb	sy
 8014e14:	f3bf 8f4f 	dsb	sy
 8014e18:	e7fe      	b.n	8014e18 <vPortValidateInterruptPriority+0x28>
	}
 8014e1a:	4770      	bx	lr
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8014e1c:	4909      	ldr	r1, [pc, #36]	; (8014e44 <vPortValidateInterruptPriority+0x54>)
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8014e1e:	4b07      	ldr	r3, [pc, #28]	; (8014e3c <vPortValidateInterruptPriority+0x4c>)
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8014e20:	5c52      	ldrb	r2, [r2, r1]
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8014e22:	7819      	ldrb	r1, [r3, #0]
 8014e24:	4291      	cmp	r1, r2
 8014e26:	d9e8      	bls.n	8014dfa <vPortValidateInterruptPriority+0xa>
 8014e28:	f04f 0320 	mov.w	r3, #32
 8014e2c:	f383 8811 	msr	BASEPRI, r3
 8014e30:	f3bf 8f6f 	isb	sy
 8014e34:	f3bf 8f4f 	dsb	sy
 8014e38:	e7fe      	b.n	8014e38 <vPortValidateInterruptPriority+0x48>
 8014e3a:	bf00      	nop
 8014e3c:	200021bc 	.word	0x200021bc
 8014e40:	e000ed0c 	.word	0xe000ed0c
 8014e44:	e000e3f0 	.word	0xe000e3f0

08014e48 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8014e48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	vTaskSuspendAll();
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8014e4c:	4d4d      	ldr	r5, [pc, #308]	; (8014f84 <pvPortMalloc+0x13c>)
{
 8014e4e:	4607      	mov	r7, r0
	vTaskSuspendAll();
 8014e50:	f7fe ffee 	bl	8013e30 <vTaskSuspendAll>
		if( pxEnd == NULL )
 8014e54:	68ab      	ldr	r3, [r5, #8]
 8014e56:	2b00      	cmp	r3, #0
 8014e58:	d037      	beq.n	8014eca <pvPortMalloc+0x82>
 8014e5a:	68ee      	ldr	r6, [r5, #12]

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8014e5c:	4237      	tst	r7, r6
 8014e5e:	d12e      	bne.n	8014ebe <pvPortMalloc+0x76>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8014e60:	b36f      	cbz	r7, 8014ebe <pvPortMalloc+0x76>
			{
				xWantedSize += xHeapStructSize;
 8014e62:	f107 0408 	add.w	r4, r7, #8

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8014e66:	077f      	lsls	r7, r7, #29
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8014e68:	bf1c      	itt	ne
 8014e6a:	f024 0407 	bicne.w	r4, r4, #7
 8014e6e:	3408      	addne	r4, #8
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8014e70:	b32c      	cbz	r4, 8014ebe <pvPortMalloc+0x76>
 8014e72:	f8d5 c014 	ldr.w	ip, [r5, #20]
 8014e76:	45a4      	cmp	ip, r4
 8014e78:	d321      	bcc.n	8014ebe <pvPortMalloc+0x76>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
				pxBlock = xStart.pxNextFreeBlock;
 8014e7a:	6829      	ldr	r1, [r5, #0]
				pxPreviousBlock = &xStart;
 8014e7c:	4a41      	ldr	r2, [pc, #260]	; (8014f84 <pvPortMalloc+0x13c>)
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8014e7e:	e003      	b.n	8014e88 <pvPortMalloc+0x40>
 8014e80:	680f      	ldr	r7, [r1, #0]
 8014e82:	b127      	cbz	r7, 8014e8e <pvPortMalloc+0x46>
 8014e84:	460a      	mov	r2, r1
 8014e86:	4639      	mov	r1, r7
 8014e88:	6848      	ldr	r0, [r1, #4]
 8014e8a:	42a0      	cmp	r0, r4
 8014e8c:	d3f8      	bcc.n	8014e80 <pvPortMalloc+0x38>
					pxBlock = pxBlock->pxNextFreeBlock;
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8014e8e:	4299      	cmp	r1, r3
 8014e90:	d015      	beq.n	8014ebe <pvPortMalloc+0x76>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8014e92:	460f      	mov	r7, r1
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8014e94:	eba0 0e04 	sub.w	lr, r0, r4
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8014e98:	f857 8b08 	ldr.w	r8, [r7], #8
 8014e9c:	f8c2 8000 	str.w	r8, [r2]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8014ea0:	f1be 0f10 	cmp.w	lr, #16
 8014ea4:	d94c      	bls.n	8014f40 <pvPortMalloc+0xf8>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8014ea6:	190a      	adds	r2, r1, r4
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8014ea8:	0750      	lsls	r0, r2, #29
 8014eaa:	d02c      	beq.n	8014f06 <pvPortMalloc+0xbe>
 8014eac:	f04f 0320 	mov.w	r3, #32
 8014eb0:	f383 8811 	msr	BASEPRI, r3
 8014eb4:	f3bf 8f6f 	isb	sy
 8014eb8:	f3bf 8f4f 	dsb	sy
 8014ebc:	e7fe      	b.n	8014ebc <pvPortMalloc+0x74>
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8014ebe:	f7ff f8e1 	bl	8014084 <xTaskResumeAll>
 8014ec2:	2700      	movs	r7, #0
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
	return pvReturn;
}
 8014ec4:	4638      	mov	r0, r7
 8014ec6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8014eca:	4b2f      	ldr	r3, [pc, #188]	; (8014f88 <pvPortMalloc+0x140>)

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8014ecc:	075a      	lsls	r2, r3, #29
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8014ece:	bf14      	ite	ne
 8014ed0:	1dda      	addne	r2, r3, #7
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8014ed2:	461a      	moveq	r2, r3
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8014ed4:	f503 4370 	add.w	r3, r3, #61440	; 0xf000
	xStart.xBlockSize = ( size_t ) 0;

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
	uxAddress -= xHeapStructSize;
 8014ed8:	f1a3 0308 	sub.w	r3, r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8014edc:	f023 0307 	bic.w	r3, r3, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8014ee0:	bf18      	it	ne
 8014ee2:	f022 0207 	bicne.w	r2, r2, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8014ee6:	4611      	mov	r1, r2
	xStart.xBlockSize = ( size_t ) 0;
 8014ee8:	2000      	movs	r0, #0
	pxEnd->pxNextFreeBlock = NULL;

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8014eea:	1a9a      	subs	r2, r3, r2
	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8014eec:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
	xStart.xBlockSize = ( size_t ) 0;
 8014ef0:	e9c5 1000 	strd	r1, r0, [r5]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8014ef4:	e9c5 2204 	strd	r2, r2, [r5, #16]
	pxEnd->pxNextFreeBlock = NULL;
 8014ef8:	e9c3 0000 	strd	r0, r0, [r3]
	pxEnd = ( void * ) uxAddress;
 8014efc:	60ab      	str	r3, [r5, #8]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8014efe:	e9c1 3200 	strd	r3, r2, [r1]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8014f02:	60ee      	str	r6, [r5, #12]
}
 8014f04:	e7aa      	b.n	8014e5c <pvPortMalloc+0x14>
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8014f06:	481f      	ldr	r0, [pc, #124]	; (8014f84 <pvPortMalloc+0x13c>)
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8014f08:	f8c2 e004 	str.w	lr, [r2, #4]
						pxBlock->xBlockSize = xWantedSize;
 8014f0c:	604c      	str	r4, [r1, #4]
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8014f0e:	4686      	mov	lr, r0
 8014f10:	6800      	ldr	r0, [r0, #0]
 8014f12:	4282      	cmp	r2, r0
 8014f14:	d8fb      	bhi.n	8014f0e <pvPortMalloc+0xc6>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8014f16:	f8de 4004 	ldr.w	r4, [lr, #4]
 8014f1a:	eb0e 0804 	add.w	r8, lr, r4
 8014f1e:	4542      	cmp	r2, r8
 8014f20:	d126      	bne.n	8014f70 <pvPortMalloc+0x128>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8014f22:	6852      	ldr	r2, [r2, #4]
 8014f24:	4414      	add	r4, r2
 8014f26:	f8ce 4004 	str.w	r4, [lr, #4]
		pxBlockToInsert = pxIterator;
 8014f2a:	4672      	mov	r2, lr
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8014f2c:	eb02 0804 	add.w	r8, r2, r4
 8014f30:	4540      	cmp	r0, r8
 8014f32:	d01f      	beq.n	8014f74 <pvPortMalloc+0x12c>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8014f34:	6010      	str	r0, [r2, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8014f36:	4596      	cmp	lr, r2
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8014f38:	6848      	ldr	r0, [r1, #4]
 8014f3a:	bf18      	it	ne
 8014f3c:	f8ce 2000 	strne.w	r2, [lr]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8014f40:	692a      	ldr	r2, [r5, #16]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8014f42:	ebac 0300 	sub.w	r3, ip, r0
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8014f46:	4293      	cmp	r3, r2
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8014f48:	bf38      	it	cc
 8014f4a:	612b      	strcc	r3, [r5, #16]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8014f4c:	616b      	str	r3, [r5, #20]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8014f4e:	4330      	orrs	r0, r6
					pxBlock->pxNextFreeBlock = NULL;
 8014f50:	2300      	movs	r3, #0
 8014f52:	e9c1 3000 	strd	r3, r0, [r1]
	( void ) xTaskResumeAll();
 8014f56:	f7ff f895 	bl	8014084 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8014f5a:	077b      	lsls	r3, r7, #29
 8014f5c:	d0b2      	beq.n	8014ec4 <pvPortMalloc+0x7c>
 8014f5e:	f04f 0320 	mov.w	r3, #32
 8014f62:	f383 8811 	msr	BASEPRI, r3
 8014f66:	f3bf 8f6f 	isb	sy
 8014f6a:	f3bf 8f4f 	dsb	sy
 8014f6e:	e7fe      	b.n	8014f6e <pvPortMalloc+0x126>
 8014f70:	6854      	ldr	r4, [r2, #4]
 8014f72:	e7db      	b.n	8014f2c <pvPortMalloc+0xe4>
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8014f74:	4298      	cmp	r0, r3
 8014f76:	d0dd      	beq.n	8014f34 <pvPortMalloc+0xec>
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8014f78:	e9d0 0300 	ldrd	r0, r3, [r0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8014f7c:	441c      	add	r4, r3
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8014f7e:	6010      	str	r0, [r2, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8014f80:	6054      	str	r4, [r2, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8014f82:	e7d8      	b.n	8014f36 <pvPortMalloc+0xee>
 8014f84:	200021c4 	.word	0x200021c4
 8014f88:	200021dc 	.word	0x200021dc

08014f8c <vPortFree>:
	if( pv != NULL )
 8014f8c:	b1e0      	cbz	r0, 8014fc8 <vPortFree+0x3c>
{
 8014f8e:	b570      	push	{r4, r5, r6, lr}
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8014f90:	4d25      	ldr	r5, [pc, #148]	; (8015028 <vPortFree+0x9c>)
 8014f92:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8014f96:	68ea      	ldr	r2, [r5, #12]
 8014f98:	4213      	tst	r3, r2
 8014f9a:	4604      	mov	r4, r0
 8014f9c:	d00b      	beq.n	8014fb6 <vPortFree+0x2a>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8014f9e:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8014fa2:	b191      	cbz	r1, 8014fca <vPortFree+0x3e>
 8014fa4:	f04f 0320 	mov.w	r3, #32
 8014fa8:	f383 8811 	msr	BASEPRI, r3
 8014fac:	f3bf 8f6f 	isb	sy
 8014fb0:	f3bf 8f4f 	dsb	sy
 8014fb4:	e7fe      	b.n	8014fb4 <vPortFree+0x28>
 8014fb6:	f04f 0320 	mov.w	r3, #32
 8014fba:	f383 8811 	msr	BASEPRI, r3
 8014fbe:	f3bf 8f6f 	isb	sy
 8014fc2:	f3bf 8f4f 	dsb	sy
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8014fc6:	e7fe      	b.n	8014fc6 <vPortFree+0x3a>
 8014fc8:	4770      	bx	lr
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8014fca:	ea23 0302 	bic.w	r3, r3, r2
 8014fce:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 8014fd2:	f7fe ff2d 	bl	8013e30 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8014fd6:	696b      	ldr	r3, [r5, #20]
 8014fd8:	f854 0c04 	ldr.w	r0, [r4, #-4]
 8014fdc:	181a      	adds	r2, r3, r0
 8014fde:	616a      	str	r2, [r5, #20]
		puc -= xHeapStructSize;
 8014fe0:	f1a4 0308 	sub.w	r3, r4, #8
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8014fe4:	462a      	mov	r2, r5
 8014fe6:	4611      	mov	r1, r2
 8014fe8:	6812      	ldr	r2, [r2, #0]
 8014fea:	4293      	cmp	r3, r2
 8014fec:	d8fb      	bhi.n	8014fe6 <vPortFree+0x5a>
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8014fee:	684c      	ldr	r4, [r1, #4]
 8014ff0:	190e      	adds	r6, r1, r4
 8014ff2:	42b3      	cmp	r3, r6
 8014ff4:	d00a      	beq.n	801500c <vPortFree+0x80>
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8014ff6:	181c      	adds	r4, r3, r0
 8014ff8:	42a2      	cmp	r2, r4
 8014ffa:	d00b      	beq.n	8015014 <vPortFree+0x88>
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8014ffc:	601a      	str	r2, [r3, #0]
	if( pxIterator != pxBlockToInsert )
 8014ffe:	4299      	cmp	r1, r3
}
 8015000:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8015004:	bf18      	it	ne
 8015006:	600b      	strne	r3, [r1, #0]
				( void ) xTaskResumeAll();
 8015008:	f7ff b83c 	b.w	8014084 <xTaskResumeAll>
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 801500c:	4420      	add	r0, r4
 801500e:	6048      	str	r0, [r1, #4]
		pxBlockToInsert = pxIterator;
 8015010:	460b      	mov	r3, r1
 8015012:	e7f0      	b.n	8014ff6 <vPortFree+0x6a>
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8015014:	68ac      	ldr	r4, [r5, #8]
 8015016:	42a2      	cmp	r2, r4
 8015018:	d0f0      	beq.n	8014ffc <vPortFree+0x70>
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801501a:	e9d2 2400 	ldrd	r2, r4, [r2]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801501e:	4420      	add	r0, r4
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8015020:	601a      	str	r2, [r3, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8015022:	6058      	str	r0, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8015024:	e7eb      	b.n	8014ffe <vPortFree+0x72>
 8015026:	bf00      	nop
 8015028:	200021c4 	.word	0x200021c4

0801502c <json_object_resize>:

static JSON_Status json_object_resize(JSON_Object *object, size_t new_capacity) {
    char **temp_names = NULL;
    JSON_Value **temp_values = NULL;

    if ((object->names == NULL && object->values != NULL) ||
 801502c:	6843      	ldr	r3, [r0, #4]
static JSON_Status json_object_resize(JSON_Object *object, size_t new_capacity) {
 801502e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015032:	4604      	mov	r4, r0
 8015034:	460d      	mov	r5, r1
    if ((object->names == NULL && object->values != NULL) ||
 8015036:	b323      	cbz	r3, 8015082 <json_object_resize+0x56>
        (object->names != NULL && object->values == NULL) ||
 8015038:	6883      	ldr	r3, [r0, #8]
 801503a:	b32b      	cbz	r3, 8015088 <json_object_resize+0x5c>
 801503c:	b325      	cbz	r5, 8015088 <json_object_resize+0x5c>
        new_capacity == 0) {
            return JSONFailure; /* Shouldn't happen */
    }
    temp_names = (char**)parson_malloc(new_capacity * sizeof(char*));
 801503e:	f8df 8074 	ldr.w	r8, [pc, #116]	; 80150b4 <json_object_resize+0x88>
 8015042:	00af      	lsls	r7, r5, #2
 8015044:	f8d8 3000 	ldr.w	r3, [r8]
 8015048:	4638      	mov	r0, r7
 801504a:	4798      	blx	r3
    if (temp_names == NULL) {
 801504c:	4606      	mov	r6, r0
 801504e:	b1d8      	cbz	r0, 8015088 <json_object_resize+0x5c>
        return JSONFailure;
    }
    temp_values = (JSON_Value**)parson_malloc(new_capacity * sizeof(JSON_Value*));
 8015050:	4638      	mov	r0, r7
 8015052:	f8d8 3000 	ldr.w	r3, [r8]
 8015056:	4798      	blx	r3
    if (temp_values == NULL) {
 8015058:	4607      	mov	r7, r0
 801505a:	b328      	cbz	r0, 80150a8 <json_object_resize+0x7c>
        parson_free(temp_names);
        return JSONFailure;
    }
    if (object->names != NULL && object->values != NULL && object->count > 0) {
 801505c:	6860      	ldr	r0, [r4, #4]
 801505e:	b118      	cbz	r0, 8015068 <json_object_resize+0x3c>
 8015060:	68a3      	ldr	r3, [r4, #8]
 8015062:	b10b      	cbz	r3, 8015068 <json_object_resize+0x3c>
 8015064:	68e2      	ldr	r2, [r4, #12]
 8015066:	b992      	cbnz	r2, 801508e <json_object_resize+0x62>
        memcpy(temp_names, object->names, object->count * sizeof(char*));
        memcpy(temp_values, object->values, object->count * sizeof(JSON_Value*));
    }
    parson_free(object->names);
 8015068:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801506c:	4798      	blx	r3
    parson_free(object->values);
 801506e:	68a0      	ldr	r0, [r4, #8]
 8015070:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8015074:	4798      	blx	r3
    object->names = temp_names;
    object->values = temp_values;
 8015076:	e9c4 6701 	strd	r6, r7, [r4, #4]
    object->capacity = new_capacity;
 801507a:	6125      	str	r5, [r4, #16]
    return JSONSuccess;
 801507c:	2000      	movs	r0, #0
}
 801507e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((object->names == NULL && object->values != NULL) ||
 8015082:	6883      	ldr	r3, [r0, #8]
 8015084:	2b00      	cmp	r3, #0
 8015086:	d0d9      	beq.n	801503c <json_object_resize+0x10>
        return JSONFailure;
 8015088:	f04f 30ff 	mov.w	r0, #4294967295
 801508c:	e7f7      	b.n	801507e <json_object_resize+0x52>
        memcpy(temp_names, object->names, object->count * sizeof(char*));
 801508e:	4601      	mov	r1, r0
 8015090:	0092      	lsls	r2, r2, #2
 8015092:	4630      	mov	r0, r6
 8015094:	f002 fb76 	bl	8017784 <memcpy>
        memcpy(temp_values, object->values, object->count * sizeof(JSON_Value*));
 8015098:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 801509c:	4638      	mov	r0, r7
 801509e:	0092      	lsls	r2, r2, #2
 80150a0:	f002 fb70 	bl	8017784 <memcpy>
 80150a4:	6860      	ldr	r0, [r4, #4]
 80150a6:	e7df      	b.n	8015068 <json_object_resize+0x3c>
        parson_free(temp_names);
 80150a8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80150ac:	4630      	mov	r0, r6
 80150ae:	4798      	blx	r3
 80150b0:	e7ea      	b.n	8015088 <json_object_resize+0x5c>
 80150b2:	bf00      	nop
 80150b4:	20000364 	.word	0x20000364

080150b8 <json_object_addn>:
    if (object == NULL || name == NULL || value == NULL) {
 80150b8:	2800      	cmp	r0, #0
 80150ba:	d05b      	beq.n	8015174 <json_object_addn+0xbc>
static JSON_Status json_object_addn(JSON_Object *object, const char *name, size_t name_len, JSON_Value *value) {
 80150bc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80150c0:	4688      	mov	r8, r1
    if (object == NULL || name == NULL || value == NULL) {
 80150c2:	2900      	cmp	r1, #0
 80150c4:	d053      	beq.n	801516e <json_object_addn+0xb6>
 80150c6:	461f      	mov	r7, r3
 80150c8:	2b00      	cmp	r3, #0
 80150ca:	d050      	beq.n	801516e <json_object_addn+0xb6>
int json_object_dotget_boolean(const JSON_Object *object, const char *name) {
    return json_value_get_boolean(json_object_dotget_value(object, name));
}

size_t json_object_get_count(const JSON_Object *object) {
    return object ? object->count : 0;
 80150cc:	68c5      	ldr	r5, [r0, #12]
 80150ce:	4616      	mov	r6, r2
 80150d0:	4604      	mov	r4, r0
    for (i = 0; i < json_object_get_count(object); i++) {
 80150d2:	b1c5      	cbz	r5, 8015106 <json_object_addn+0x4e>
 80150d4:	6843      	ldr	r3, [r0, #4]
 80150d6:	f04f 0900 	mov.w	r9, #0
 80150da:	f1a3 0a04 	sub.w	sl, r3, #4
        name_length = strlen(object->names[i]);
 80150de:	f85a bf04 	ldr.w	fp, [sl, #4]!
 80150e2:	4658      	mov	r0, fp
 80150e4:	f7eb f896 	bl	8000214 <strlen>
 80150e8:	4603      	mov	r3, r0
        if (name_length != name_len) {
 80150ea:	429e      	cmp	r6, r3
        if (strncmp(object->names[i], name, name_len) == 0) {
 80150ec:	4658      	mov	r0, fp
 80150ee:	4632      	mov	r2, r6
 80150f0:	ea4f 0b89 	mov.w	fp, r9, lsl #2
 80150f4:	4641      	mov	r1, r8
    for (i = 0; i < json_object_get_count(object); i++) {
 80150f6:	f109 0901 	add.w	r9, r9, #1
        if (name_length != name_len) {
 80150fa:	d102      	bne.n	8015102 <json_object_addn+0x4a>
        if (strncmp(object->names[i], name, name_len) == 0) {
 80150fc:	f003 f916 	bl	801832c <strncmp>
 8015100:	b380      	cbz	r0, 8015164 <json_object_addn+0xac>
    for (i = 0; i < json_object_get_count(object); i++) {
 8015102:	45a9      	cmp	r9, r5
 8015104:	d1eb      	bne.n	80150de <json_object_addn+0x26>
    if (object->count >= object->capacity) {
 8015106:	6921      	ldr	r1, [r4, #16]
 8015108:	42a9      	cmp	r1, r5
 801510a:	d920      	bls.n	801514e <json_object_addn+0x96>
    char *output_string = (char*)parson_malloc(n + 1);
 801510c:	4b1b      	ldr	r3, [pc, #108]	; (801517c <json_object_addn+0xc4>)
    object->names[index] = parson_strndup(name, name_len);
 801510e:	f8d4 9004 	ldr.w	r9, [r4, #4]
    char *output_string = (char*)parson_malloc(n + 1);
 8015112:	681b      	ldr	r3, [r3, #0]
 8015114:	1c70      	adds	r0, r6, #1
 8015116:	4798      	blx	r3
    object->names[index] = parson_strndup(name, name_len);
 8015118:	ea4f 0a85 	mov.w	sl, r5, lsl #2
    if (!output_string) {
 801511c:	4605      	mov	r5, r0
 801511e:	b128      	cbz	r0, 801512c <json_object_addn+0x74>
    output_string[n] = '\0';
 8015120:	2300      	movs	r3, #0
 8015122:	5583      	strb	r3, [r0, r6]
    strncpy(output_string, string, n);
 8015124:	4641      	mov	r1, r8
 8015126:	4632      	mov	r2, r6
 8015128:	f003 f912 	bl	8018350 <strncpy>
    object->names[index] = parson_strndup(name, name_len);
 801512c:	f849 500a 	str.w	r5, [r9, sl]
    if (object->names[index] == NULL) {
 8015130:	6863      	ldr	r3, [r4, #4]
 8015132:	f853 300a 	ldr.w	r3, [r3, sl]
 8015136:	b1d3      	cbz	r3, 801516e <json_object_addn+0xb6>
    object->values[index] = value;
 8015138:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
    value->parent = json_object_get_wrapping_value(object);
 801513c:	6821      	ldr	r1, [r4, #0]
 801513e:	6039      	str	r1, [r7, #0]
    object->count++;
 8015140:	3301      	adds	r3, #1
    object->values[index] = value;
 8015142:	f842 700a 	str.w	r7, [r2, sl]
    return JSONSuccess;
 8015146:	2000      	movs	r0, #0
    object->count++;
 8015148:	60e3      	str	r3, [r4, #12]
}
 801514a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        size_t new_capacity = MAX(object->capacity * 2, STARTING_CAPACITY);
 801514e:	0049      	lsls	r1, r1, #1
        if (json_object_resize(object, new_capacity) == JSONFailure) {
 8015150:	2910      	cmp	r1, #16
 8015152:	bf38      	it	cc
 8015154:	2110      	movcc	r1, #16
 8015156:	4620      	mov	r0, r4
 8015158:	f7ff ff68 	bl	801502c <json_object_resize>
 801515c:	3001      	adds	r0, #1
 801515e:	d006      	beq.n	801516e <json_object_addn+0xb6>
 8015160:	68e5      	ldr	r5, [r4, #12]
 8015162:	e7d3      	b.n	801510c <json_object_addn+0x54>
            return object->values[i];
 8015164:	68a3      	ldr	r3, [r4, #8]
    if (json_object_getn_value(object, name, name_len) != NULL) {
 8015166:	f853 300b 	ldr.w	r3, [r3, fp]
 801516a:	2b00      	cmp	r3, #0
 801516c:	d0cb      	beq.n	8015106 <json_object_addn+0x4e>
        return JSONFailure;
 801516e:	f04f 30ff 	mov.w	r0, #4294967295
 8015172:	e7ea      	b.n	801514a <json_object_addn+0x92>
 8015174:	f04f 30ff 	mov.w	r0, #4294967295
}
 8015178:	4770      	bx	lr
 801517a:	bf00      	nop
 801517c:	20000364 	.word	0x20000364

08015180 <json_array_add>:
static JSON_Status json_array_add(JSON_Array *array, JSON_Value *value) {
 8015180:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if (array->count >= array->capacity) {
 8015184:	e9d0 3702 	ldrd	r3, r7, [r0, #8]
 8015188:	42bb      	cmp	r3, r7
static JSON_Status json_array_add(JSON_Array *array, JSON_Value *value) {
 801518a:	4604      	mov	r4, r0
 801518c:	460d      	mov	r5, r1
    if (array->count >= array->capacity) {
 801518e:	d209      	bcs.n	80151a4 <json_array_add+0x24>
 8015190:	6846      	ldr	r6, [r0, #4]
    value->parent = json_array_get_wrapping_value(array);
 8015192:	6822      	ldr	r2, [r4, #0]
 8015194:	602a      	str	r2, [r5, #0]
    array->count++;
 8015196:	1c5a      	adds	r2, r3, #1
    array->items[array->count] = value;
 8015198:	f846 5023 	str.w	r5, [r6, r3, lsl #2]
    return JSONSuccess;
 801519c:	2000      	movs	r0, #0
    array->count++;
 801519e:	60a2      	str	r2, [r4, #8]
}
 80151a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        size_t new_capacity = MAX(array->capacity * 2, STARTING_CAPACITY);
 80151a4:	007f      	lsls	r7, r7, #1
 80151a6:	2f10      	cmp	r7, #16
    new_items = (JSON_Value**)parson_malloc(new_capacity * sizeof(JSON_Value*));
 80151a8:	f8df 8038 	ldr.w	r8, [pc, #56]	; 80151e4 <json_array_add+0x64>
        size_t new_capacity = MAX(array->capacity * 2, STARTING_CAPACITY);
 80151ac:	bf38      	it	cc
 80151ae:	2710      	movcc	r7, #16
    new_items = (JSON_Value**)parson_malloc(new_capacity * sizeof(JSON_Value*));
 80151b0:	f8d8 3000 	ldr.w	r3, [r8]
 80151b4:	00b8      	lsls	r0, r7, #2
 80151b6:	4798      	blx	r3
    if (new_items == NULL) {
 80151b8:	4606      	mov	r6, r0
 80151ba:	b180      	cbz	r0, 80151de <json_array_add+0x5e>
    if (array->items != NULL && array->count > 0) {
 80151bc:	6861      	ldr	r1, [r4, #4]
 80151be:	b109      	cbz	r1, 80151c4 <json_array_add+0x44>
 80151c0:	68a2      	ldr	r2, [r4, #8]
 80151c2:	b93a      	cbnz	r2, 80151d4 <json_array_add+0x54>
    parson_free(array->items);
 80151c4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80151c8:	4608      	mov	r0, r1
 80151ca:	4798      	blx	r3
    array->items = new_items;
 80151cc:	68a3      	ldr	r3, [r4, #8]
 80151ce:	6066      	str	r6, [r4, #4]
    array->capacity = new_capacity;
 80151d0:	60e7      	str	r7, [r4, #12]
    return JSONSuccess;
 80151d2:	e7de      	b.n	8015192 <json_array_add+0x12>
        memcpy(new_items, array->items, array->count * sizeof(JSON_Value*));
 80151d4:	0092      	lsls	r2, r2, #2
 80151d6:	f002 fad5 	bl	8017784 <memcpy>
 80151da:	6861      	ldr	r1, [r4, #4]
 80151dc:	e7f2      	b.n	80151c4 <json_array_add+0x44>
            return JSONFailure;
 80151de:	f04f 30ff 	mov.w	r0, #4294967295
 80151e2:	e7dd      	b.n	80151a0 <json_array_add+0x20>
 80151e4:	20000364 	.word	0x20000364

080151e8 <parse_utf16_hex>:
    if (s[0] == '\0' || s[1] == '\0' || s[2] == '\0' || s[3] == '\0') {
 80151e8:	7803      	ldrb	r3, [r0, #0]
 80151ea:	2b00      	cmp	r3, #0
 80151ec:	d05d      	beq.n	80152aa <parse_utf16_hex+0xc2>
static int parse_utf16_hex(const char *s, unsigned int *result) {
 80151ee:	b470      	push	{r4, r5, r6}
    if (s[0] == '\0' || s[1] == '\0' || s[2] == '\0' || s[3] == '\0') {
 80151f0:	7844      	ldrb	r4, [r0, #1]
 80151f2:	2c00      	cmp	r4, #0
 80151f4:	d056      	beq.n	80152a4 <parse_utf16_hex+0xbc>
 80151f6:	7885      	ldrb	r5, [r0, #2]
 80151f8:	2d00      	cmp	r5, #0
 80151fa:	d053      	beq.n	80152a4 <parse_utf16_hex+0xbc>
 80151fc:	78c0      	ldrb	r0, [r0, #3]
 80151fe:	2800      	cmp	r0, #0
 8015200:	d051      	beq.n	80152a6 <parse_utf16_hex+0xbe>
    if (c >= '0' && c <= '9') {
 8015202:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8015206:	b2d6      	uxtb	r6, r2
 8015208:	2e09      	cmp	r6, #9
 801520a:	d90b      	bls.n	8015224 <parse_utf16_hex+0x3c>
    } else if (c >= 'a' && c <= 'f') {
 801520c:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8015210:	2a05      	cmp	r2, #5
 8015212:	d94c      	bls.n	80152ae <parse_utf16_hex+0xc6>
    } else if (c >= 'A' && c <= 'F') {
 8015214:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8015218:	2a05      	cmp	r2, #5
        return c - 'A' + 10;
 801521a:	bf94      	ite	ls
 801521c:	f1a3 0237 	subls.w	r2, r3, #55	; 0x37
    return -1;
 8015220:	f04f 32ff 	movhi.w	r2, #4294967295
    if (c >= '0' && c <= '9') {
 8015224:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8015228:	b2de      	uxtb	r6, r3
 801522a:	2e09      	cmp	r6, #9
 801522c:	d90b      	bls.n	8015246 <parse_utf16_hex+0x5e>
    } else if (c >= 'a' && c <= 'f') {
 801522e:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8015232:	2b05      	cmp	r3, #5
 8015234:	d944      	bls.n	80152c0 <parse_utf16_hex+0xd8>
    } else if (c >= 'A' && c <= 'F') {
 8015236:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 801523a:	2b05      	cmp	r3, #5
        return c - 'A' + 10;
 801523c:	bf94      	ite	ls
 801523e:	f1a4 0337 	subls.w	r3, r4, #55	; 0x37
    return -1;
 8015242:	f04f 33ff 	movhi.w	r3, #4294967295
    if (c >= '0' && c <= '9') {
 8015246:	f1a5 0630 	sub.w	r6, r5, #48	; 0x30
 801524a:	b2f4      	uxtb	r4, r6
 801524c:	2c09      	cmp	r4, #9
 801524e:	d90b      	bls.n	8015268 <parse_utf16_hex+0x80>
    } else if (c >= 'a' && c <= 'f') {
 8015250:	f1a5 0461 	sub.w	r4, r5, #97	; 0x61
 8015254:	2c05      	cmp	r4, #5
 8015256:	d930      	bls.n	80152ba <parse_utf16_hex+0xd2>
    } else if (c >= 'A' && c <= 'F') {
 8015258:	f1a5 0441 	sub.w	r4, r5, #65	; 0x41
 801525c:	2c05      	cmp	r4, #5
        return c - 'A' + 10;
 801525e:	bf94      	ite	ls
 8015260:	f1a5 0637 	subls.w	r6, r5, #55	; 0x37
    return -1;
 8015264:	f04f 36ff 	movhi.w	r6, #4294967295
    if (c >= '0' && c <= '9') {
 8015268:	f1a0 0530 	sub.w	r5, r0, #48	; 0x30
 801526c:	b2ec      	uxtb	r4, r5
 801526e:	2c09      	cmp	r4, #9
 8015270:	d909      	bls.n	8015286 <parse_utf16_hex+0x9e>
    } else if (c >= 'a' && c <= 'f') {
 8015272:	f1a0 0461 	sub.w	r4, r0, #97	; 0x61
 8015276:	2c05      	cmp	r4, #5
 8015278:	d91c      	bls.n	80152b4 <parse_utf16_hex+0xcc>
    } else if (c >= 'A' && c <= 'F') {
 801527a:	f1a0 0441 	sub.w	r4, r0, #65	; 0x41
 801527e:	2c05      	cmp	r4, #5
 8015280:	d810      	bhi.n	80152a4 <parse_utf16_hex+0xbc>
        return c - 'A' + 10;
 8015282:	f1a0 0537 	sub.w	r5, r0, #55	; 0x37
    if (x1 == -1 || x2 == -1 || x3 == -1 || x4 == -1) {
 8015286:	1c50      	adds	r0, r2, #1
 8015288:	d00c      	beq.n	80152a4 <parse_utf16_hex+0xbc>
 801528a:	1c5c      	adds	r4, r3, #1
 801528c:	d00a      	beq.n	80152a4 <parse_utf16_hex+0xbc>
 801528e:	1c70      	adds	r0, r6, #1
 8015290:	d008      	beq.n	80152a4 <parse_utf16_hex+0xbc>
    *result = (unsigned int)((x1 << 12) | (x2 << 8) | (x3 << 4) | x4);
 8015292:	021b      	lsls	r3, r3, #8
 8015294:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 8015298:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
 801529c:	432b      	orrs	r3, r5
 801529e:	600b      	str	r3, [r1, #0]
    return 1;
 80152a0:	2001      	movs	r0, #1
 80152a2:	e000      	b.n	80152a6 <parse_utf16_hex+0xbe>
        return 0;
 80152a4:	2000      	movs	r0, #0
}
 80152a6:	bc70      	pop	{r4, r5, r6}
 80152a8:	4770      	bx	lr
        return 0;
 80152aa:	4618      	mov	r0, r3
}
 80152ac:	4770      	bx	lr
        return c - 'a' + 10;
 80152ae:	f1a3 0257 	sub.w	r2, r3, #87	; 0x57
 80152b2:	e7b7      	b.n	8015224 <parse_utf16_hex+0x3c>
 80152b4:	f1a0 0557 	sub.w	r5, r0, #87	; 0x57
 80152b8:	e7e5      	b.n	8015286 <parse_utf16_hex+0x9e>
 80152ba:	f1a5 0657 	sub.w	r6, r5, #87	; 0x57
 80152be:	e7d3      	b.n	8015268 <parse_utf16_hex+0x80>
 80152c0:	f1a4 0357 	sub.w	r3, r4, #87	; 0x57
 80152c4:	e7bf      	b.n	8015246 <parse_utf16_hex+0x5e>
 80152c6:	bf00      	nop

080152c8 <get_quoted_string>:
static char * get_quoted_string(const char **string) {
 80152c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    const char *string_start = *string;
 80152cc:	6805      	ldr	r5, [r0, #0]
    if (**string != '\"') {
 80152ce:	782b      	ldrb	r3, [r5, #0]
 80152d0:	2b22      	cmp	r3, #34	; 0x22
static char * get_quoted_string(const char **string) {
 80152d2:	b085      	sub	sp, #20
    if (**string != '\"') {
 80152d4:	d157      	bne.n	8015386 <get_quoted_string+0xbe>
    SKIP_CHAR(string);
 80152d6:	1c6e      	adds	r6, r5, #1
 80152d8:	6006      	str	r6, [r0, #0]
    while (**string != '\"') {
 80152da:	786a      	ldrb	r2, [r5, #1]
 80152dc:	2a22      	cmp	r2, #34	; 0x22
 80152de:	4634      	mov	r4, r6
 80152e0:	d009      	beq.n	80152f6 <get_quoted_string+0x2e>
        if (**string == '\0') {
 80152e2:	2a00      	cmp	r2, #0
 80152e4:	d04f      	beq.n	8015386 <get_quoted_string+0xbe>
        } else if (**string == '\\') {
 80152e6:	2a5c      	cmp	r2, #92	; 0x5c
 80152e8:	d052      	beq.n	8015390 <get_quoted_string+0xc8>
 80152ea:	6802      	ldr	r2, [r0, #0]
        SKIP_CHAR(string);
 80152ec:	1c54      	adds	r4, r2, #1
 80152ee:	6004      	str	r4, [r0, #0]
    while (**string != '\"') {
 80152f0:	7852      	ldrb	r2, [r2, #1]
 80152f2:	2a22      	cmp	r2, #34	; 0x22
 80152f4:	d1f5      	bne.n	80152e2 <get_quoted_string+0x1a>
    SKIP_CHAR(string);
 80152f6:	3401      	adds	r4, #1
    output = (char*)parson_malloc(initial_size);
 80152f8:	4f79      	ldr	r7, [pc, #484]	; (80154e0 <get_quoted_string+0x218>)
    SKIP_CHAR(string);
 80152fa:	6004      	str	r4, [r0, #0]
    string_len = *string - string_start - 2; /* length without quotes */
 80152fc:	1b64      	subs	r4, r4, r5
    output = (char*)parson_malloc(initial_size);
 80152fe:	1e60      	subs	r0, r4, #1
 8015300:	683b      	ldr	r3, [r7, #0]
 8015302:	4798      	blx	r3
    string_len = *string - string_start - 2; /* length without quotes */
 8015304:	3c02      	subs	r4, #2
    if (output == NULL) {
 8015306:	4681      	mov	r9, r0
 8015308:	2800      	cmp	r0, #0
 801530a:	d039      	beq.n	8015380 <get_quoted_string+0xb8>
    while ((*input_ptr != '\0') && (size_t)(input_ptr - input) < len) {
 801530c:	786b      	ldrb	r3, [r5, #1]
 801530e:	2b00      	cmp	r3, #0
 8015310:	f000 80e3 	beq.w	80154da <get_quoted_string+0x212>
 8015314:	2c00      	cmp	r4, #0
 8015316:	f000 80e0 	beq.w	80154da <get_quoted_string+0x212>
        cp = ((((lead - 0xD800) & 0x3FF) << 10) | ((trail - 0xDC00) & 0x3FF)) + 0x010000;
 801531a:	f8df a1c8 	ldr.w	sl, [pc, #456]	; 80154e4 <get_quoted_string+0x21c>
    while ((*input_ptr != '\0') && (size_t)(input_ptr - input) < len) {
 801531e:	4605      	mov	r5, r0
    const char *input_ptr = input;
 8015320:	46b0      	mov	r8, r6
 8015322:	e00d      	b.n	8015340 <get_quoted_string+0x78>
        } else if ((unsigned char)*input_ptr < 0x20) {
 8015324:	2b1f      	cmp	r3, #31
 8015326:	d92b      	bls.n	8015380 <get_quoted_string+0xb8>
            *output_ptr = *input_ptr;
 8015328:	702b      	strb	r3, [r5, #0]
 801532a:	4640      	mov	r0, r8
    while ((*input_ptr != '\0') && (size_t)(input_ptr - input) < len) {
 801532c:	7843      	ldrb	r3, [r0, #1]
        output_ptr++;
 801532e:	3501      	adds	r5, #1
        input_ptr++;
 8015330:	f100 0801 	add.w	r8, r0, #1
    while ((*input_ptr != '\0') && (size_t)(input_ptr - input) < len) {
 8015334:	2b00      	cmp	r3, #0
 8015336:	d039      	beq.n	80153ac <get_quoted_string+0xe4>
 8015338:	eba8 0206 	sub.w	r2, r8, r6
 801533c:	4294      	cmp	r4, r2
 801533e:	d935      	bls.n	80153ac <get_quoted_string+0xe4>
        if (*input_ptr == '\\') {
 8015340:	2b5c      	cmp	r3, #92	; 0x5c
 8015342:	d1ef      	bne.n	8015324 <get_quoted_string+0x5c>
            switch (*input_ptr) {
 8015344:	f898 3001 	ldrb.w	r3, [r8, #1]
 8015348:	2b75      	cmp	r3, #117	; 0x75
            input_ptr++;
 801534a:	f108 0001 	add.w	r0, r8, #1
            switch (*input_ptr) {
 801534e:	d817      	bhi.n	8015380 <get_quoted_string+0xb8>
 8015350:	2b5b      	cmp	r3, #91	; 0x5b
 8015352:	d911      	bls.n	8015378 <get_quoted_string+0xb0>
 8015354:	3b5c      	subs	r3, #92	; 0x5c
 8015356:	2b19      	cmp	r3, #25
 8015358:	d812      	bhi.n	8015380 <get_quoted_string+0xb8>
 801535a:	e8df f003 	tbb	[pc, r3]
 801535e:	111f      	.short	0x111f
 8015360:	11111111 	.word	0x11111111
 8015364:	11111166 	.word	0x11111166
 8015368:	11111163 	.word	0x11111163
 801536c:	11111111 	.word	0x11111111
 8015370:	11111160 	.word	0x11111160
 8015374:	3e5a115d 	.word	0x3e5a115d
 8015378:	2b22      	cmp	r3, #34	; 0x22
 801537a:	d010      	beq.n	801539e <get_quoted_string+0xd6>
 801537c:	2b2f      	cmp	r3, #47	; 0x2f
 801537e:	d00e      	beq.n	801539e <get_quoted_string+0xd6>
    parson_free(output);
 8015380:	687b      	ldr	r3, [r7, #4]
 8015382:	4648      	mov	r0, r9
 8015384:	4798      	blx	r3
    return NULL;
 8015386:	2400      	movs	r4, #0
}
 8015388:	4620      	mov	r0, r4
 801538a:	b005      	add	sp, #20
 801538c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            SKIP_CHAR(string);
 8015390:	1c62      	adds	r2, r4, #1
 8015392:	6002      	str	r2, [r0, #0]
            if (**string == '\0') {
 8015394:	7863      	ldrb	r3, [r4, #1]
 8015396:	2b00      	cmp	r3, #0
 8015398:	d1a8      	bne.n	80152ec <get_quoted_string+0x24>
 801539a:	e7f4      	b.n	8015386 <get_quoted_string+0xbe>
                case '\\': *output_ptr = '\\'; break;
 801539c:	235c      	movs	r3, #92	; 0x5c
 801539e:	702b      	strb	r3, [r5, #0]
    while ((*input_ptr != '\0') && (size_t)(input_ptr - input) < len) {
 80153a0:	7843      	ldrb	r3, [r0, #1]
        output_ptr++;
 80153a2:	3501      	adds	r5, #1
        input_ptr++;
 80153a4:	f100 0801 	add.w	r8, r0, #1
    while ((*input_ptr != '\0') && (size_t)(input_ptr - input) < len) {
 80153a8:	2b00      	cmp	r3, #0
 80153aa:	d1c5      	bne.n	8015338 <get_quoted_string+0x70>
 80153ac:	eba5 0209 	sub.w	r2, r5, r9
 80153b0:	3201      	adds	r2, #1
    *output_ptr = '\0';
 80153b2:	2300      	movs	r3, #0
 80153b4:	702b      	strb	r3, [r5, #0]
    resized_output = (char*)parson_malloc(final_size);
 80153b6:	4610      	mov	r0, r2
 80153b8:	683b      	ldr	r3, [r7, #0]
 80153ba:	9201      	str	r2, [sp, #4]
 80153bc:	4798      	blx	r3
    if (resized_output == NULL) {
 80153be:	4604      	mov	r4, r0
 80153c0:	2800      	cmp	r0, #0
 80153c2:	d0dd      	beq.n	8015380 <get_quoted_string+0xb8>
    memcpy(resized_output, output, final_size);
 80153c4:	9a01      	ldr	r2, [sp, #4]
 80153c6:	4649      	mov	r1, r9
 80153c8:	f002 f9dc 	bl	8017784 <memcpy>
    parson_free(output);
 80153cc:	4648      	mov	r0, r9
 80153ce:	687b      	ldr	r3, [r7, #4]
 80153d0:	4798      	blx	r3
}
 80153d2:	4620      	mov	r0, r4
 80153d4:	b005      	add	sp, #20
 80153d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    unprocessed_ptr++; /* skips u */
 80153da:	f108 0b02 	add.w	fp, r8, #2
    parse_succeeded = parse_utf16_hex(unprocessed_ptr, &cp);
 80153de:	4658      	mov	r0, fp
 80153e0:	a902      	add	r1, sp, #8
 80153e2:	f7ff ff01 	bl	80151e8 <parse_utf16_hex>
    if (!parse_succeeded) {
 80153e6:	2800      	cmp	r0, #0
 80153e8:	d0ca      	beq.n	8015380 <get_quoted_string+0xb8>
    if (cp < 0x80) {
 80153ea:	9b02      	ldr	r3, [sp, #8]
 80153ec:	2b7f      	cmp	r3, #127	; 0x7f
 80153ee:	d91f      	bls.n	8015430 <get_quoted_string+0x168>
    } else if (cp < 0x800) {
 80153f0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80153f4:	d21e      	bcs.n	8015434 <get_quoted_string+0x16c>
        processed_ptr[0] = ((cp >> 6) & 0x1F) | 0xC0; /* 110xxxxx */
 80153f6:	099b      	lsrs	r3, r3, #6
 80153f8:	f063 033f 	orn	r3, r3, #63	; 0x3f
 80153fc:	702b      	strb	r3, [r5, #0]
        processed_ptr[1] = ((cp)      & 0x3F) | 0x80; /* 10xxxxxx */
 80153fe:	9b02      	ldr	r3, [sp, #8]
 8015400:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8015404:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8015408:	f805 3f01 	strb.w	r3, [r5, #1]!
    unprocessed_ptr += 3;
 801540c:	f10b 0003 	add.w	r0, fp, #3
    return JSONSuccess;
 8015410:	e78c      	b.n	801532c <get_quoted_string+0x64>
                case 't':  *output_ptr = '\t'; break;
 8015412:	2309      	movs	r3, #9
 8015414:	702b      	strb	r3, [r5, #0]
 8015416:	e789      	b.n	801532c <get_quoted_string+0x64>
                case 'r':  *output_ptr = '\r'; break;
 8015418:	230d      	movs	r3, #13
 801541a:	702b      	strb	r3, [r5, #0]
 801541c:	e786      	b.n	801532c <get_quoted_string+0x64>
                case 'n':  *output_ptr = '\n'; break;
 801541e:	230a      	movs	r3, #10
 8015420:	702b      	strb	r3, [r5, #0]
 8015422:	e783      	b.n	801532c <get_quoted_string+0x64>
                case 'f':  *output_ptr = '\f'; break;
 8015424:	230c      	movs	r3, #12
 8015426:	702b      	strb	r3, [r5, #0]
 8015428:	e780      	b.n	801532c <get_quoted_string+0x64>
                case 'b':  *output_ptr = '\b'; break;
 801542a:	2308      	movs	r3, #8
 801542c:	702b      	strb	r3, [r5, #0]
 801542e:	e77d      	b.n	801532c <get_quoted_string+0x64>
        processed_ptr[0] = (char)cp; /* 0xxxxxxx */
 8015430:	702b      	strb	r3, [r5, #0]
 8015432:	e7eb      	b.n	801540c <get_quoted_string+0x144>
    } else if (cp < 0xD800 || cp > 0xDFFF) {
 8015434:	f5a3 4258 	sub.w	r2, r3, #55296	; 0xd800
 8015438:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 801543c:	d23a      	bcs.n	80154b4 <get_quoted_string+0x1ec>
    } else if (cp >= 0xD800 && cp <= 0xDBFF) { /* lead surrogate (0xD800..0xDBFF) */
 801543e:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8015442:	9301      	str	r3, [sp, #4]
 8015444:	d29c      	bcs.n	8015380 <get_quoted_string+0xb8>
        if (*unprocessed_ptr++ != '\\' || *unprocessed_ptr++ != 'u') {
 8015446:	f898 2006 	ldrb.w	r2, [r8, #6]
 801544a:	2a5c      	cmp	r2, #92	; 0x5c
 801544c:	d198      	bne.n	8015380 <get_quoted_string+0xb8>
 801544e:	f898 2007 	ldrb.w	r2, [r8, #7]
 8015452:	2a75      	cmp	r2, #117	; 0x75
 8015454:	f108 0b08 	add.w	fp, r8, #8
 8015458:	d192      	bne.n	8015380 <get_quoted_string+0xb8>
        parse_succeeded = parse_utf16_hex(unprocessed_ptr, &trail);
 801545a:	a903      	add	r1, sp, #12
 801545c:	4658      	mov	r0, fp
 801545e:	f7ff fec3 	bl	80151e8 <parse_utf16_hex>
        if (!parse_succeeded || trail < 0xDC00 || trail > 0xDFFF) { /* valid trail surrogate? (0xDC00..0xDFFF) */
 8015462:	2800      	cmp	r0, #0
 8015464:	d08c      	beq.n	8015380 <get_quoted_string+0xb8>
 8015466:	9a03      	ldr	r2, [sp, #12]
 8015468:	f5a2 415c 	sub.w	r1, r2, #56320	; 0xdc00
 801546c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8015470:	d286      	bcs.n	8015380 <get_quoted_string+0xb8>
        cp = ((((lead - 0xD800) & 0x3FF) << 10) | ((trail - 0xDC00) & 0x3FF)) + 0x010000;
 8015472:	9b01      	ldr	r3, [sp, #4]
 8015474:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8015478:	ea0a 2383 	and.w	r3, sl, r3, lsl #10
 801547c:	4313      	orrs	r3, r2
 801547e:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
        processed_ptr[0] = (((cp >> 18) & 0x07) | 0xF0); /* 11110xxx */
 8015482:	0c9a      	lsrs	r2, r3, #18
 8015484:	f062 020f 	orn	r2, r2, #15
        cp = ((((lead - 0xD800) & 0x3FF) << 10) | ((trail - 0xDC00) & 0x3FF)) + 0x010000;
 8015488:	9302      	str	r3, [sp, #8]
        processed_ptr[0] = (((cp >> 18) & 0x07) | 0xF0); /* 11110xxx */
 801548a:	702a      	strb	r2, [r5, #0]
        processed_ptr[1] = (((cp >> 12) & 0x3F) | 0x80); /* 10xxxxxx */
 801548c:	9b02      	ldr	r3, [sp, #8]
 801548e:	f3c3 3305 	ubfx	r3, r3, #12, #6
 8015492:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8015496:	706b      	strb	r3, [r5, #1]
        processed_ptr[2] = (((cp >> 6)  & 0x3F) | 0x80); /* 10xxxxxx */
 8015498:	9b02      	ldr	r3, [sp, #8]
 801549a:	f3c3 1385 	ubfx	r3, r3, #6, #6
 801549e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80154a2:	70ab      	strb	r3, [r5, #2]
        processed_ptr[3] = (((cp)       & 0x3F) | 0x80); /* 10xxxxxx */
 80154a4:	9b02      	ldr	r3, [sp, #8]
 80154a6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80154aa:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80154ae:	f805 3f03 	strb.w	r3, [r5, #3]!
        processed_ptr += 3;
 80154b2:	e7ab      	b.n	801540c <get_quoted_string+0x144>
        processed_ptr[0] = ((cp >> 12) & 0x0F) | 0xE0; /* 1110xxxx */
 80154b4:	f3c3 3303 	ubfx	r3, r3, #12, #4
 80154b8:	f063 031f 	orn	r3, r3, #31
 80154bc:	702b      	strb	r3, [r5, #0]
        processed_ptr[1] = ((cp >> 6)  & 0x3F) | 0x80; /* 10xxxxxx */
 80154be:	9b02      	ldr	r3, [sp, #8]
 80154c0:	f3c3 1385 	ubfx	r3, r3, #6, #6
 80154c4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80154c8:	706b      	strb	r3, [r5, #1]
        processed_ptr[2] = ((cp)       & 0x3F) | 0x80; /* 10xxxxxx */
 80154ca:	9b02      	ldr	r3, [sp, #8]
 80154cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80154d0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80154d4:	f805 3f02 	strb.w	r3, [r5, #2]!
        processed_ptr += 2;
 80154d8:	e798      	b.n	801540c <get_quoted_string+0x144>
    while ((*input_ptr != '\0') && (size_t)(input_ptr - input) < len) {
 80154da:	464d      	mov	r5, r9
 80154dc:	2201      	movs	r2, #1
 80154de:	e768      	b.n	80153b2 <get_quoted_string+0xea>
 80154e0:	20000364 	.word	0x20000364
 80154e4:	000ffc00 	.word	0x000ffc00

080154e8 <json_serialize_string>:
static int json_serialize_string(const char *string, char *buf) {
 80154e8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80154ec:	460c      	mov	r4, r1
 80154ee:	4605      	mov	r5, r0
    size_t i = 0, len = strlen(string);
 80154f0:	f7ea fe90 	bl	8000214 <strlen>
 80154f4:	4606      	mov	r6, r0
    if (buf == NULL) {
 80154f6:	2c00      	cmp	r4, #0
 80154f8:	f000 81e0 	beq.w	80158bc <json_serialize_string+0x3d4>
    return sprintf(buf, "%s", string);
 80154fc:	4b98      	ldr	r3, [pc, #608]	; (8015760 <json_serialize_string+0x278>)
 80154fe:	881a      	ldrh	r2, [r3, #0]
 8015500:	f824 2b01 	strh.w	r2, [r4], #1
    for (i = 0; i < len; i++) {
 8015504:	2800      	cmp	r0, #0
 8015506:	f000 81de 	beq.w	80158c6 <json_serialize_string+0x3de>
    return sprintf(buf, "%s", string);
 801550a:	f8df 9278 	ldr.w	r9, [pc, #632]	; 8015784 <json_serialize_string+0x29c>
 801550e:	f8df 8278 	ldr.w	r8, [pc, #632]	; 8015788 <json_serialize_string+0x2a0>
 8015512:	f8df e278 	ldr.w	lr, [pc, #632]	; 801578c <json_serialize_string+0x2a4>
 8015516:	f8df c278 	ldr.w	ip, [pc, #632]	; 8015790 <json_serialize_string+0x2a8>
 801551a:	1e6a      	subs	r2, r5, #1
static int json_serialize_string(const char *string, char *buf) {
 801551c:	2101      	movs	r1, #1
        c = string[i];
 801551e:	4613      	mov	r3, r2
 8015520:	f812 0f01 	ldrb.w	r0, [r2, #1]!
        switch (c) {
 8015524:	285c      	cmp	r0, #92	; 0x5c
 8015526:	d85e      	bhi.n	80155e6 <json_serialize_string+0xfe>
 8015528:	e8df f010 	tbh	[pc, r0, lsl #1]
 801552c:	01b101b7 	.word	0x01b101b7
 8015530:	01a501ab 	.word	0x01a501ab
 8015534:	0199019f 	.word	0x0199019f
 8015538:	018d0193 	.word	0x018d0193
 801553c:	01730180 	.word	0x01730180
 8015540:	01600166 	.word	0x01600166
 8015544:	01460153 	.word	0x01460153
 8015548:	010f0114 	.word	0x010f0114
 801554c:	0105010a 	.word	0x0105010a
 8015550:	00fb0100 	.word	0x00fb0100
 8015554:	00f100f6 	.word	0x00f100f6
 8015558:	00de00ec 	.word	0x00de00ec
 801555c:	00d500d9 	.word	0x00d500d9
 8015560:	00cd00d1 	.word	0x00cd00d1
 8015564:	00b100bf 	.word	0x00b100bf
 8015568:	009000a3 	.word	0x009000a3
 801556c:	005d005d 	.word	0x005d005d
 8015570:	005d0084 	.word	0x005d0084
 8015574:	005d005d 	.word	0x005d005d
 8015578:	005d005d 	.word	0x005d005d
 801557c:	005d005d 	.word	0x005d005d
 8015580:	005d005d 	.word	0x005d005d
 8015584:	005d005d 	.word	0x005d005d
 8015588:	0078005d 	.word	0x0078005d
 801558c:	005d005d 	.word	0x005d005d
 8015590:	005d005d 	.word	0x005d005d
 8015594:	005d005d 	.word	0x005d005d
 8015598:	005d005d 	.word	0x005d005d
 801559c:	005d005d 	.word	0x005d005d
 80155a0:	005d005d 	.word	0x005d005d
 80155a4:	005d005d 	.word	0x005d005d
 80155a8:	005d005d 	.word	0x005d005d
 80155ac:	005d005d 	.word	0x005d005d
 80155b0:	005d005d 	.word	0x005d005d
 80155b4:	005d005d 	.word	0x005d005d
 80155b8:	005d005d 	.word	0x005d005d
 80155bc:	005d005d 	.word	0x005d005d
 80155c0:	005d005d 	.word	0x005d005d
 80155c4:	005d005d 	.word	0x005d005d
 80155c8:	005d005d 	.word	0x005d005d
 80155cc:	005d005d 	.word	0x005d005d
 80155d0:	005d005d 	.word	0x005d005d
 80155d4:	005d005d 	.word	0x005d005d
 80155d8:	005d005d 	.word	0x005d005d
 80155dc:	005d005d 	.word	0x005d005d
 80155e0:	005d005d 	.word	0x005d005d
 80155e4:	006d      	.short	0x006d
                if (buf != NULL) {
 80155e6:	b10c      	cbz	r4, 80155ec <json_serialize_string+0x104>
                    buf[0] = c;
 80155e8:	f804 0b01 	strb.w	r0, [r4], #1
    for (i = 0; i < len; i++) {
 80155ec:	3302      	adds	r3, #2
 80155ee:	1b5b      	subs	r3, r3, r5
 80155f0:	429e      	cmp	r6, r3
                written_total += 1;
 80155f2:	f101 0101 	add.w	r1, r1, #1
    for (i = 0; i < len; i++) {
 80155f6:	d892      	bhi.n	801551e <json_serialize_string+0x36>
    if (buf == NULL) {
 80155f8:	b114      	cbz	r4, 8015600 <json_serialize_string+0x118>
 80155fa:	4b59      	ldr	r3, [pc, #356]	; (8015760 <json_serialize_string+0x278>)
    return sprintf(buf, "%s", string);
 80155fc:	881b      	ldrh	r3, [r3, #0]
 80155fe:	8023      	strh	r3, [r4, #0]
    APPEND_STRING("\"");
 8015600:	1c48      	adds	r0, r1, #1
}
 8015602:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (buf == NULL) {
 8015606:	b13c      	cbz	r4, 8015618 <json_serialize_string+0x130>
    return sprintf(buf, "%s", string);
 8015608:	4856      	ldr	r0, [pc, #344]	; (8015764 <json_serialize_string+0x27c>)
 801560a:	f8b0 a000 	ldrh.w	sl, [r0]
 801560e:	7880      	ldrb	r0, [r0, #2]
 8015610:	f8a4 a000 	strh.w	sl, [r4]
 8015614:	f804 0f02 	strb.w	r0, [r4, #2]!
            case '\t': APPEND_STRING("\\t"); break;
 8015618:	3102      	adds	r1, #2
 801561a:	e024      	b.n	8015666 <json_serialize_string+0x17e>
    if (buf == NULL) {
 801561c:	2c00      	cmp	r4, #0
 801561e:	d0fb      	beq.n	8015618 <json_serialize_string+0x130>
    return sprintf(buf, "%s", string);
 8015620:	4851      	ldr	r0, [pc, #324]	; (8015768 <json_serialize_string+0x280>)
 8015622:	f8b0 a000 	ldrh.w	sl, [r0]
 8015626:	7880      	ldrb	r0, [r0, #2]
 8015628:	f8a4 a000 	strh.w	sl, [r4]
            case '\t': APPEND_STRING("\\t"); break;
 801562c:	3102      	adds	r1, #2
    return sprintf(buf, "%s", string);
 801562e:	f804 0f02 	strb.w	r0, [r4, #2]!
            case '\t': APPEND_STRING("\\t"); break;
 8015632:	e018      	b.n	8015666 <json_serialize_string+0x17e>
    if (buf == NULL) {
 8015634:	2c00      	cmp	r4, #0
 8015636:	d0ef      	beq.n	8015618 <json_serialize_string+0x130>
    return sprintf(buf, "%s", string);
 8015638:	484c      	ldr	r0, [pc, #304]	; (801576c <json_serialize_string+0x284>)
 801563a:	f8b0 a000 	ldrh.w	sl, [r0]
 801563e:	7880      	ldrb	r0, [r0, #2]
 8015640:	f8a4 a000 	strh.w	sl, [r4]
            case '\t': APPEND_STRING("\\t"); break;
 8015644:	3102      	adds	r1, #2
    return sprintf(buf, "%s", string);
 8015646:	f804 0f02 	strb.w	r0, [r4, #2]!
            case '\t': APPEND_STRING("\\t"); break;
 801564a:	e00c      	b.n	8015666 <json_serialize_string+0x17e>
    if (buf == NULL) {
 801564c:	b154      	cbz	r4, 8015664 <json_serialize_string+0x17c>
    return sprintf(buf, "%s", string);
 801564e:	f8d9 0000 	ldr.w	r0, [r9]
 8015652:	6020      	str	r0, [r4, #0]
 8015654:	f8b9 a004 	ldrh.w	sl, [r9, #4]
 8015658:	f899 0006 	ldrb.w	r0, [r9, #6]
 801565c:	f8a4 a004 	strh.w	sl, [r4, #4]
 8015660:	f804 0f06 	strb.w	r0, [r4, #6]!
            case '\x1f': APPEND_STRING("\\u001f"); break;
 8015664:	3106      	adds	r1, #6
    for (i = 0; i < len; i++) {
 8015666:	3302      	adds	r3, #2
 8015668:	1b5b      	subs	r3, r3, r5
 801566a:	429e      	cmp	r6, r3
 801566c:	f63f af57 	bhi.w	801551e <json_serialize_string+0x36>
 8015670:	e7c2      	b.n	80155f8 <json_serialize_string+0x110>
    if (buf == NULL) {
 8015672:	2c00      	cmp	r4, #0
 8015674:	d0f6      	beq.n	8015664 <json_serialize_string+0x17c>
    return sprintf(buf, "%s", string);
 8015676:	f8d8 0000 	ldr.w	r0, [r8]
 801567a:	6020      	str	r0, [r4, #0]
 801567c:	f8b8 a004 	ldrh.w	sl, [r8, #4]
 8015680:	f898 0006 	ldrb.w	r0, [r8, #6]
 8015684:	f8a4 a004 	strh.w	sl, [r4, #4]
 8015688:	f804 0f06 	strb.w	r0, [r4, #6]!
            case '\x1e': APPEND_STRING("\\u001e"); break;
 801568c:	e7ea      	b.n	8015664 <json_serialize_string+0x17c>
    if (buf == NULL) {
 801568e:	2c00      	cmp	r4, #0
 8015690:	d0e8      	beq.n	8015664 <json_serialize_string+0x17c>
    return sprintf(buf, "%s", string);
 8015692:	f8de 0000 	ldr.w	r0, [lr]
 8015696:	6020      	str	r0, [r4, #0]
 8015698:	f8be a004 	ldrh.w	sl, [lr, #4]
 801569c:	f89e 0006 	ldrb.w	r0, [lr, #6]
 80156a0:	f8a4 a004 	strh.w	sl, [r4, #4]
 80156a4:	f804 0f06 	strb.w	r0, [r4, #6]!
            case '\x1d': APPEND_STRING("\\u001d"); break;
 80156a8:	e7dc      	b.n	8015664 <json_serialize_string+0x17c>
    if (buf == NULL) {
 80156aa:	2c00      	cmp	r4, #0
 80156ac:	d0da      	beq.n	8015664 <json_serialize_string+0x17c>
    return sprintf(buf, "%s", string);
 80156ae:	f8dc 0000 	ldr.w	r0, [ip]
 80156b2:	6020      	str	r0, [r4, #0]
 80156b4:	f8bc a004 	ldrh.w	sl, [ip, #4]
 80156b8:	f89c 0006 	ldrb.w	r0, [ip, #6]
 80156bc:	f8a4 a004 	strh.w	sl, [r4, #4]
 80156c0:	f804 0f06 	strb.w	r0, [r4, #6]!
            case '\x1c': APPEND_STRING("\\u001c"); break;
 80156c4:	e7ce      	b.n	8015664 <json_serialize_string+0x17c>
    if (buf == NULL) {
 80156c6:	2c00      	cmp	r4, #0
 80156c8:	d0cc      	beq.n	8015664 <json_serialize_string+0x17c>
    return sprintf(buf, "%s", string);
 80156ca:	4f29      	ldr	r7, [pc, #164]	; (8015770 <json_serialize_string+0x288>)
 80156cc:	e00a      	b.n	80156e4 <json_serialize_string+0x1fc>
    if (buf == NULL) {
 80156ce:	2c00      	cmp	r4, #0
 80156d0:	d0c8      	beq.n	8015664 <json_serialize_string+0x17c>
    return sprintf(buf, "%s", string);
 80156d2:	4f28      	ldr	r7, [pc, #160]	; (8015774 <json_serialize_string+0x28c>)
 80156d4:	e006      	b.n	80156e4 <json_serialize_string+0x1fc>
    if (buf == NULL) {
 80156d6:	2c00      	cmp	r4, #0
 80156d8:	d0c4      	beq.n	8015664 <json_serialize_string+0x17c>
    return sprintf(buf, "%s", string);
 80156da:	4f27      	ldr	r7, [pc, #156]	; (8015778 <json_serialize_string+0x290>)
 80156dc:	e002      	b.n	80156e4 <json_serialize_string+0x1fc>
    if (buf == NULL) {
 80156de:	2c00      	cmp	r4, #0
 80156e0:	d0c0      	beq.n	8015664 <json_serialize_string+0x17c>
    return sprintf(buf, "%s", string);
 80156e2:	4f26      	ldr	r7, [pc, #152]	; (801577c <json_serialize_string+0x294>)
 80156e4:	6838      	ldr	r0, [r7, #0]
 80156e6:	e004      	b.n	80156f2 <json_serialize_string+0x20a>
    if (buf == NULL) {
 80156e8:	2c00      	cmp	r4, #0
 80156ea:	d0bb      	beq.n	8015664 <json_serialize_string+0x17c>
    return sprintf(buf, "%s", string);
 80156ec:	4824      	ldr	r0, [pc, #144]	; (8015780 <json_serialize_string+0x298>)
 80156ee:	4607      	mov	r7, r0
 80156f0:	6800      	ldr	r0, [r0, #0]
 80156f2:	6020      	str	r0, [r4, #0]
 80156f4:	f8b7 a004 	ldrh.w	sl, [r7, #4]
 80156f8:	79b8      	ldrb	r0, [r7, #6]
 80156fa:	f8a4 a004 	strh.w	sl, [r4, #4]
 80156fe:	f804 0f06 	strb.w	r0, [r4, #6]!
            case '\x1b': APPEND_STRING("\\u001b"); break;
 8015702:	e7af      	b.n	8015664 <json_serialize_string+0x17c>
    if (buf == NULL) {
 8015704:	2c00      	cmp	r4, #0
 8015706:	d0ad      	beq.n	8015664 <json_serialize_string+0x17c>
    return sprintf(buf, "%s", string);
 8015708:	f8df a088 	ldr.w	sl, [pc, #136]	; 8015794 <json_serialize_string+0x2ac>
 801570c:	e0ca      	b.n	80158a4 <json_serialize_string+0x3bc>
    if (buf == NULL) {
 801570e:	2c00      	cmp	r4, #0
 8015710:	d0a8      	beq.n	8015664 <json_serialize_string+0x17c>
    return sprintf(buf, "%s", string);
 8015712:	f8df a084 	ldr.w	sl, [pc, #132]	; 8015798 <json_serialize_string+0x2b0>
 8015716:	e0c5      	b.n	80158a4 <json_serialize_string+0x3bc>
    if (buf == NULL) {
 8015718:	2c00      	cmp	r4, #0
 801571a:	d0a3      	beq.n	8015664 <json_serialize_string+0x17c>
    return sprintf(buf, "%s", string);
 801571c:	f8df a07c 	ldr.w	sl, [pc, #124]	; 801579c <json_serialize_string+0x2b4>
 8015720:	e0c0      	b.n	80158a4 <json_serialize_string+0x3bc>
    if (buf == NULL) {
 8015722:	2c00      	cmp	r4, #0
 8015724:	d09e      	beq.n	8015664 <json_serialize_string+0x17c>
    return sprintf(buf, "%s", string);
 8015726:	f8df a078 	ldr.w	sl, [pc, #120]	; 80157a0 <json_serialize_string+0x2b8>
 801572a:	e0bb      	b.n	80158a4 <json_serialize_string+0x3bc>
    if (buf == NULL) {
 801572c:	2c00      	cmp	r4, #0
 801572e:	d099      	beq.n	8015664 <json_serialize_string+0x17c>
    return sprintf(buf, "%s", string);
 8015730:	f8df a070 	ldr.w	sl, [pc, #112]	; 80157a4 <json_serialize_string+0x2bc>
 8015734:	e0b6      	b.n	80158a4 <json_serialize_string+0x3bc>
    if (buf == NULL) {
 8015736:	2c00      	cmp	r4, #0
 8015738:	d094      	beq.n	8015664 <json_serialize_string+0x17c>
    return sprintf(buf, "%s", string);
 801573a:	f8df a06c 	ldr.w	sl, [pc, #108]	; 80157a8 <json_serialize_string+0x2c0>
 801573e:	e0b1      	b.n	80158a4 <json_serialize_string+0x3bc>
    if (buf == NULL) {
 8015740:	2c00      	cmp	r4, #0
 8015742:	d08f      	beq.n	8015664 <json_serialize_string+0x17c>
    return sprintf(buf, "%s", string);
 8015744:	f8df a064 	ldr.w	sl, [pc, #100]	; 80157ac <json_serialize_string+0x2c4>
 8015748:	e0ac      	b.n	80158a4 <json_serialize_string+0x3bc>
    if (buf == NULL) {
 801574a:	2c00      	cmp	r4, #0
 801574c:	d08a      	beq.n	8015664 <json_serialize_string+0x17c>
    return sprintf(buf, "%s", string);
 801574e:	f8df a060 	ldr.w	sl, [pc, #96]	; 80157b0 <json_serialize_string+0x2c8>
 8015752:	e0a7      	b.n	80158a4 <json_serialize_string+0x3bc>
    if (buf == NULL) {
 8015754:	2c00      	cmp	r4, #0
 8015756:	d085      	beq.n	8015664 <json_serialize_string+0x17c>
    return sprintf(buf, "%s", string);
 8015758:	f8df a058 	ldr.w	sl, [pc, #88]	; 80157b4 <json_serialize_string+0x2cc>
 801575c:	e0a2      	b.n	80158a4 <json_serialize_string+0x3bc>
 801575e:	bf00      	nop
 8015760:	0801c2e0 	.word	0x0801c2e0
 8015764:	0801c2e8 	.word	0x0801c2e8
 8015768:	0801c2ec 	.word	0x0801c2ec
 801576c:	0801c2e4 	.word	0x0801c2e4
 8015770:	0801c3b4 	.word	0x0801c3b4
 8015774:	0801c3ac 	.word	0x0801c3ac
 8015778:	0801c3a4 	.word	0x0801c3a4
 801577c:	0801c39c 	.word	0x0801c39c
 8015780:	0801c394 	.word	0x0801c394
 8015784:	0801c3d4 	.word	0x0801c3d4
 8015788:	0801c3cc 	.word	0x0801c3cc
 801578c:	0801c3c4 	.word	0x0801c3c4
 8015790:	0801c3bc 	.word	0x0801c3bc
 8015794:	0801c38c 	.word	0x0801c38c
 8015798:	0801c384 	.word	0x0801c384
 801579c:	0801c37c 	.word	0x0801c37c
 80157a0:	0801c374 	.word	0x0801c374
 80157a4:	0801c36c 	.word	0x0801c36c
 80157a8:	0801c364 	.word	0x0801c364
 80157ac:	0801c35c 	.word	0x0801c35c
 80157b0:	0801c354 	.word	0x0801c354
 80157b4:	0801c34c 	.word	0x0801c34c
    if (buf == NULL) {
 80157b8:	2c00      	cmp	r4, #0
 80157ba:	f43f af2d 	beq.w	8015618 <json_serialize_string+0x130>
    return sprintf(buf, "%s", string);
 80157be:	4843      	ldr	r0, [pc, #268]	; (80158cc <json_serialize_string+0x3e4>)
 80157c0:	f8b0 a000 	ldrh.w	sl, [r0]
 80157c4:	7880      	ldrb	r0, [r0, #2]
 80157c6:	f8a4 a000 	strh.w	sl, [r4]
            case '\t': APPEND_STRING("\\t"); break;
 80157ca:	3102      	adds	r1, #2
    return sprintf(buf, "%s", string);
 80157cc:	f804 0f02 	strb.w	r0, [r4, #2]!
            case '\t': APPEND_STRING("\\t"); break;
 80157d0:	e749      	b.n	8015666 <json_serialize_string+0x17e>
    if (buf == NULL) {
 80157d2:	2c00      	cmp	r4, #0
 80157d4:	f43f af20 	beq.w	8015618 <json_serialize_string+0x130>
    return sprintf(buf, "%s", string);
 80157d8:	483d      	ldr	r0, [pc, #244]	; (80158d0 <json_serialize_string+0x3e8>)
 80157da:	f8b0 a000 	ldrh.w	sl, [r0]
 80157de:	7880      	ldrb	r0, [r0, #2]
 80157e0:	f8a4 a000 	strh.w	sl, [r4]
            case '\t': APPEND_STRING("\\t"); break;
 80157e4:	3102      	adds	r1, #2
    return sprintf(buf, "%s", string);
 80157e6:	f804 0f02 	strb.w	r0, [r4, #2]!
            case '\t': APPEND_STRING("\\t"); break;
 80157ea:	e73c      	b.n	8015666 <json_serialize_string+0x17e>
    if (buf == NULL) {
 80157ec:	2c00      	cmp	r4, #0
 80157ee:	f43f af39 	beq.w	8015664 <json_serialize_string+0x17c>
    return sprintf(buf, "%s", string);
 80157f2:	f8df a0ec 	ldr.w	sl, [pc, #236]	; 80158e0 <json_serialize_string+0x3f8>
 80157f6:	e055      	b.n	80158a4 <json_serialize_string+0x3bc>
    if (buf == NULL) {
 80157f8:	2c00      	cmp	r4, #0
 80157fa:	f43f af0d 	beq.w	8015618 <json_serialize_string+0x130>
    return sprintf(buf, "%s", string);
 80157fe:	4835      	ldr	r0, [pc, #212]	; (80158d4 <json_serialize_string+0x3ec>)
 8015800:	f8b0 a000 	ldrh.w	sl, [r0]
 8015804:	7880      	ldrb	r0, [r0, #2]
 8015806:	f8a4 a000 	strh.w	sl, [r4]
            case '\t': APPEND_STRING("\\t"); break;
 801580a:	3102      	adds	r1, #2
    return sprintf(buf, "%s", string);
 801580c:	f804 0f02 	strb.w	r0, [r4, #2]!
            case '\t': APPEND_STRING("\\t"); break;
 8015810:	e729      	b.n	8015666 <json_serialize_string+0x17e>
    if (buf == NULL) {
 8015812:	2c00      	cmp	r4, #0
 8015814:	f43f af00 	beq.w	8015618 <json_serialize_string+0x130>
    return sprintf(buf, "%s", string);
 8015818:	482f      	ldr	r0, [pc, #188]	; (80158d8 <json_serialize_string+0x3f0>)
 801581a:	f8b0 a000 	ldrh.w	sl, [r0]
 801581e:	7880      	ldrb	r0, [r0, #2]
 8015820:	f8a4 a000 	strh.w	sl, [r4]
            case '\t': APPEND_STRING("\\t"); break;
 8015824:	3102      	adds	r1, #2
    return sprintf(buf, "%s", string);
 8015826:	f804 0f02 	strb.w	r0, [r4, #2]!
            case '\t': APPEND_STRING("\\t"); break;
 801582a:	e71c      	b.n	8015666 <json_serialize_string+0x17e>
    if (buf == NULL) {
 801582c:	2c00      	cmp	r4, #0
 801582e:	f43f aef3 	beq.w	8015618 <json_serialize_string+0x130>
    return sprintf(buf, "%s", string);
 8015832:	482a      	ldr	r0, [pc, #168]	; (80158dc <json_serialize_string+0x3f4>)
 8015834:	f8b0 a000 	ldrh.w	sl, [r0]
 8015838:	7880      	ldrb	r0, [r0, #2]
 801583a:	f8a4 a000 	strh.w	sl, [r4]
            case '\t': APPEND_STRING("\\t"); break;
 801583e:	3102      	adds	r1, #2
    return sprintf(buf, "%s", string);
 8015840:	f804 0f02 	strb.w	r0, [r4, #2]!
            case '\t': APPEND_STRING("\\t"); break;
 8015844:	e70f      	b.n	8015666 <json_serialize_string+0x17e>
    if (buf == NULL) {
 8015846:	2c00      	cmp	r4, #0
 8015848:	f43f af0c 	beq.w	8015664 <json_serialize_string+0x17c>
    return sprintf(buf, "%s", string);
 801584c:	f8df a094 	ldr.w	sl, [pc, #148]	; 80158e4 <json_serialize_string+0x3fc>
 8015850:	e028      	b.n	80158a4 <json_serialize_string+0x3bc>
    if (buf == NULL) {
 8015852:	2c00      	cmp	r4, #0
 8015854:	f43f af06 	beq.w	8015664 <json_serialize_string+0x17c>
    return sprintf(buf, "%s", string);
 8015858:	f8df a08c 	ldr.w	sl, [pc, #140]	; 80158e8 <json_serialize_string+0x400>
 801585c:	e022      	b.n	80158a4 <json_serialize_string+0x3bc>
    if (buf == NULL) {
 801585e:	2c00      	cmp	r4, #0
 8015860:	f43f af00 	beq.w	8015664 <json_serialize_string+0x17c>
    return sprintf(buf, "%s", string);
 8015864:	f8df a084 	ldr.w	sl, [pc, #132]	; 80158ec <json_serialize_string+0x404>
 8015868:	e01c      	b.n	80158a4 <json_serialize_string+0x3bc>
    if (buf == NULL) {
 801586a:	2c00      	cmp	r4, #0
 801586c:	f43f aefa 	beq.w	8015664 <json_serialize_string+0x17c>
    return sprintf(buf, "%s", string);
 8015870:	f8df a07c 	ldr.w	sl, [pc, #124]	; 80158f0 <json_serialize_string+0x408>
 8015874:	e016      	b.n	80158a4 <json_serialize_string+0x3bc>
    if (buf == NULL) {
 8015876:	2c00      	cmp	r4, #0
 8015878:	f43f aef4 	beq.w	8015664 <json_serialize_string+0x17c>
    return sprintf(buf, "%s", string);
 801587c:	f8df a074 	ldr.w	sl, [pc, #116]	; 80158f4 <json_serialize_string+0x40c>
 8015880:	e010      	b.n	80158a4 <json_serialize_string+0x3bc>
    if (buf == NULL) {
 8015882:	2c00      	cmp	r4, #0
 8015884:	f43f aeee 	beq.w	8015664 <json_serialize_string+0x17c>
    return sprintf(buf, "%s", string);
 8015888:	f8df a06c 	ldr.w	sl, [pc, #108]	; 80158f8 <json_serialize_string+0x410>
 801588c:	e00a      	b.n	80158a4 <json_serialize_string+0x3bc>
    if (buf == NULL) {
 801588e:	2c00      	cmp	r4, #0
 8015890:	f43f aee8 	beq.w	8015664 <json_serialize_string+0x17c>
    return sprintf(buf, "%s", string);
 8015894:	f8df a064 	ldr.w	sl, [pc, #100]	; 80158fc <json_serialize_string+0x414>
 8015898:	e004      	b.n	80158a4 <json_serialize_string+0x3bc>
    if (buf == NULL) {
 801589a:	2c00      	cmp	r4, #0
 801589c:	f43f aee2 	beq.w	8015664 <json_serialize_string+0x17c>
    return sprintf(buf, "%s", string);
 80158a0:	f8df a05c 	ldr.w	sl, [pc, #92]	; 8015900 <json_serialize_string+0x418>
 80158a4:	f8da 0000 	ldr.w	r0, [sl]
 80158a8:	f8ba b004 	ldrh.w	fp, [sl, #4]
 80158ac:	f89a a006 	ldrb.w	sl, [sl, #6]
 80158b0:	6020      	str	r0, [r4, #0]
 80158b2:	f8a4 b004 	strh.w	fp, [r4, #4]
 80158b6:	f804 af06 	strb.w	sl, [r4, #6]!
            case '\x16': APPEND_STRING("\\u0016"); break;
 80158ba:	e6d3      	b.n	8015664 <json_serialize_string+0x17c>
    for (i = 0; i < len; i++) {
 80158bc:	2002      	movs	r0, #2
 80158be:	2e00      	cmp	r6, #0
 80158c0:	f47f ae23 	bne.w	801550a <json_serialize_string+0x22>
 80158c4:	e69d      	b.n	8015602 <json_serialize_string+0x11a>
 80158c6:	2101      	movs	r1, #1
 80158c8:	e698      	b.n	80155fc <json_serialize_string+0x114>
 80158ca:	bf00      	nop
 80158cc:	0801c2fc 	.word	0x0801c2fc
 80158d0:	0801c2f4 	.word	0x0801c2f4
 80158d4:	0801c2f8 	.word	0x0801c2f8
 80158d8:	0801c300 	.word	0x0801c300
 80158dc:	0801c2f0 	.word	0x0801c2f0
 80158e0:	0801c344 	.word	0x0801c344
 80158e4:	0801c33c 	.word	0x0801c33c
 80158e8:	0801c334 	.word	0x0801c334
 80158ec:	0801c32c 	.word	0x0801c32c
 80158f0:	0801c324 	.word	0x0801c324
 80158f4:	0801c31c 	.word	0x0801c31c
 80158f8:	0801c314 	.word	0x0801c314
 80158fc:	0801c30c 	.word	0x0801c30c
 8015900:	0801c304 	.word	0x0801c304

08015904 <json_serialize_to_buffer_r>:
{
 8015904:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015908:	b089      	sub	sp, #36	; 0x24
 801590a:	4614      	mov	r4, r2
 801590c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801590e:	9202      	str	r2, [sp, #8]
    return array->wrapping_value;
}

/* JSON Value API */
JSON_Value_Type json_value_get_type(const JSON_Value *value) {
    return value ? value->type : JSONError;
 8015910:	b168      	cbz	r0, 801592e <json_serialize_to_buffer_r+0x2a>
 8015912:	6842      	ldr	r2, [r0, #4]
 8015914:	3a01      	subs	r2, #1
 8015916:	461d      	mov	r5, r3
 8015918:	4603      	mov	r3, r0
 801591a:	2a05      	cmp	r2, #5
 801591c:	d807      	bhi.n	801592e <json_serialize_to_buffer_r+0x2a>
 801591e:	e8df f012 	tbh	[pc, r2, lsl #1]
 8015922:	0018      	.short	0x0018
 8015924:	000b0124 	.word	0x000b0124
 8015928:	00dd002e 	.word	0x00dd002e
 801592c:	0022      	.short	0x0022
 801592e:	f04f 30ff 	mov.w	r0, #4294967295
}
 8015932:	b009      	add	sp, #36	; 0x24
 8015934:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            written = sprintf(num_buf, FLOAT_FORMAT, num);
 8015938:	9a02      	ldr	r2, [sp, #8]
 801593a:	2900      	cmp	r1, #0
 801593c:	bf18      	it	ne
 801593e:	460a      	movne	r2, r1
 8015940:	4610      	mov	r0, r2
 8015942:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8015946:	49be      	ldr	r1, [pc, #760]	; (8015c40 <json_serialize_to_buffer_r+0x33c>)
}
 8015948:	b009      	add	sp, #36	; 0x24
 801594a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
            written = sprintf(num_buf, FLOAT_FORMAT, num);
 801594e:	f002 bc7d 	b.w	801824c <siprintf>
    if (buf == NULL) {
 8015952:	b121      	cbz	r1, 801595e <json_serialize_to_buffer_r+0x5a>
    return sprintf(buf, "%s", string);
 8015954:	4bbb      	ldr	r3, [pc, #748]	; (8015c44 <json_serialize_to_buffer_r+0x340>)
 8015956:	6818      	ldr	r0, [r3, #0]
 8015958:	791b      	ldrb	r3, [r3, #4]
 801595a:	6008      	str	r0, [r1, #0]
 801595c:	710b      	strb	r3, [r1, #4]
            return written_total;
 801595e:	2004      	movs	r0, #4
}
 8015960:	b009      	add	sp, #36	; 0x24
 8015962:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            if (json_value_get_boolean(value)) {
 8015966:	689b      	ldr	r3, [r3, #8]
 8015968:	2b00      	cmp	r3, #0
 801596a:	f000 81a0 	beq.w	8015cae <json_serialize_to_buffer_r+0x3aa>
    if (buf == NULL) {
 801596e:	2900      	cmp	r1, #0
 8015970:	d0f5      	beq.n	801595e <json_serialize_to_buffer_r+0x5a>
    return sprintf(buf, "%s", string);
 8015972:	4bb5      	ldr	r3, [pc, #724]	; (8015c48 <json_serialize_to_buffer_r+0x344>)
 8015974:	6818      	ldr	r0, [r3, #0]
 8015976:	791b      	ldrb	r3, [r3, #4]
 8015978:	6008      	str	r0, [r1, #0]
 801597a:	710b      	strb	r3, [r1, #4]
                APPEND_STRING("true");
 801597c:	e7ef      	b.n	801595e <json_serialize_to_buffer_r+0x5a>
}

JSON_Object * json_value_get_object(const JSON_Value *value) {
    return json_value_get_type(value) == JSONObject ? value->value.object : NULL;
 801597e:	689b      	ldr	r3, [r3, #8]
 8015980:	4618      	mov	r0, r3
    return object ? object->count : 0;
 8015982:	2b00      	cmp	r3, #0
 8015984:	f000 81b8 	beq.w	8015cf8 <json_serialize_to_buffer_r+0x3f4>
 8015988:	68db      	ldr	r3, [r3, #12]
 801598a:	9305      	str	r3, [sp, #20]
    if (buf == NULL) {
 801598c:	2900      	cmp	r1, #0
 801598e:	f000 81a8 	beq.w	8015ce2 <json_serialize_to_buffer_r+0x3de>
    return sprintf(buf, "%s", string);
 8015992:	4aae      	ldr	r2, [pc, #696]	; (8015c4c <json_serialize_to_buffer_r+0x348>)
 8015994:	4689      	mov	r9, r1
 8015996:	8812      	ldrh	r2, [r2, #0]
 8015998:	f829 2b01 	strh.w	r2, [r9], #1
            if (count > 0 && is_pretty) {
 801599c:	2b00      	cmp	r3, #0
 801599e:	f000 81b1 	beq.w	8015d04 <json_serialize_to_buffer_r+0x400>
 80159a2:	2d00      	cmp	r5, #0
 80159a4:	f040 80fc 	bne.w	8015ba0 <json_serialize_to_buffer_r+0x29c>
 80159a8:	68c3      	ldr	r3, [r0, #12]
 80159aa:	f04f 0a01 	mov.w	sl, #1
    if (object == NULL || index >= json_object_get_count(object)) {
 80159ae:	2200      	movs	r2, #0
 80159b0:	464f      	mov	r7, r9
 80159b2:	9203      	str	r2, [sp, #12]
 80159b4:	4683      	mov	fp, r0
 80159b6:	46a1      	mov	r9, r4
 80159b8:	9504      	str	r5, [sp, #16]
 80159ba:	9a03      	ldr	r2, [sp, #12]
 80159bc:	429a      	cmp	r2, r3
 80159be:	d2b6      	bcs.n	801592e <json_serialize_to_buffer_r+0x2a>
    return object->names[index];
 80159c0:	f8db 3004 	ldr.w	r3, [fp, #4]
 80159c4:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
                if (key == NULL) {
 80159c8:	2c00      	cmp	r4, #0
 80159ca:	d0b0      	beq.n	801592e <json_serialize_to_buffer_r+0x2a>
                if (is_pretty) {
 80159cc:	9b04      	ldr	r3, [sp, #16]
 80159ce:	2b00      	cmp	r3, #0
 80159d0:	f000 8123 	beq.w	8015c1a <json_serialize_to_buffer_r+0x316>
    for (i = 0; i < level; i++) {
 80159d4:	f1b9 0f00 	cmp.w	r9, #0
 80159d8:	f2c0 81cc 	blt.w	8015d74 <json_serialize_to_buffer_r+0x470>
 80159dc:	2300      	movs	r3, #0
    int written = -1, written_total = 0;
 80159de:	4619      	mov	r1, r3
    for (i = 0; i < level; i++) {
 80159e0:	463a      	mov	r2, r7
    if (buf == NULL) {
 80159e2:	2a00      	cmp	r2, #0
 80159e4:	f000 80e6 	beq.w	8015bb4 <json_serialize_to_buffer_r+0x2b0>
    return sprintf(buf, "%s", string);
 80159e8:	4899      	ldr	r0, [pc, #612]	; (8015c50 <json_serialize_to_buffer_r+0x34c>)
 80159ea:	4605      	mov	r5, r0
 80159ec:	6800      	ldr	r0, [r0, #0]
 80159ee:	792d      	ldrb	r5, [r5, #4]
 80159f0:	6010      	str	r0, [r2, #0]
 80159f2:	f802 5f04 	strb.w	r5, [r2, #4]!
    for (i = 0; i < level; i++) {
 80159f6:	3301      	adds	r3, #1
 80159f8:	4599      	cmp	r9, r3
        APPEND_STRING("    ");
 80159fa:	f101 0104 	add.w	r1, r1, #4
    for (i = 0; i < level; i++) {
 80159fe:	daf0      	bge.n	80159e2 <json_serialize_to_buffer_r+0xde>
 8015a00:	448a      	add	sl, r1
                    APPEND_INDENT(level+1);
 8015a02:	2f00      	cmp	r7, #0
 8015a04:	f000 815b 	beq.w	8015cbe <json_serialize_to_buffer_r+0x3ba>
 8015a08:	440f      	add	r7, r1
                written = json_serialize_string(key, buf);
 8015a0a:	4639      	mov	r1, r7
 8015a0c:	4620      	mov	r0, r4
 8015a0e:	f7ff fd6b 	bl	80154e8 <json_serialize_string>
                if (written < 0) {
 8015a12:	2800      	cmp	r0, #0
 8015a14:	db8b      	blt.n	801592e <json_serialize_to_buffer_r+0x2a>
    return sprintf(buf, "%s", string);
 8015a16:	4a8f      	ldr	r2, [pc, #572]	; (8015c54 <json_serialize_to_buffer_r+0x350>)
 8015a18:	4b8f      	ldr	r3, [pc, #572]	; (8015c58 <json_serialize_to_buffer_r+0x354>)
 8015a1a:	8812      	ldrh	r2, [r2, #0]
 8015a1c:	523a      	strh	r2, [r7, r0]
                    buf += written;
 8015a1e:	4407      	add	r7, r0
    return sprintf(buf, "%s", string);
 8015a20:	881b      	ldrh	r3, [r3, #0]
 8015a22:	f8a7 3001 	strh.w	r3, [r7, #1]
                written_total += written;
 8015a26:	4482      	add	sl, r0
                APPEND_STRING(":");
 8015a28:	f10a 0a01 	add.w	sl, sl, #1
                    APPEND_STRING(" ");
 8015a2c:	3702      	adds	r7, #2
 8015a2e:	f10a 0301 	add.w	r3, sl, #1
 8015a32:	9306      	str	r3, [sp, #24]
    return json_object_getn_value(object, name, strlen(name));
 8015a34:	4620      	mov	r0, r4
 8015a36:	f7ea fbed 	bl	8000214 <strlen>
    return object ? object->count : 0;
 8015a3a:	f8db 300c 	ldr.w	r3, [fp, #12]
    return json_object_getn_value(object, name, strlen(name));
 8015a3e:	4605      	mov	r5, r0
    for (i = 0; i < json_object_get_count(object); i++) {
 8015a40:	2b00      	cmp	r3, #0
 8015a42:	f000 8177 	beq.w	8015d34 <json_serialize_to_buffer_r+0x430>
 8015a46:	f8db 6004 	ldr.w	r6, [fp, #4]
 8015a4a:	9707      	str	r7, [sp, #28]
 8015a4c:	f04f 0800 	mov.w	r8, #0
 8015a50:	3e04      	subs	r6, #4
 8015a52:	4647      	mov	r7, r8
 8015a54:	469a      	mov	sl, r3
        name_length = strlen(object->names[i]);
 8015a56:	f856 8f04 	ldr.w	r8, [r6, #4]!
 8015a5a:	4640      	mov	r0, r8
 8015a5c:	f7ea fbda 	bl	8000214 <strlen>
 8015a60:	4684      	mov	ip, r0
        if (name_length != name_len) {
 8015a62:	4565      	cmp	r5, ip
        if (strncmp(object->names[i], name, name_len) == 0) {
 8015a64:	4640      	mov	r0, r8
 8015a66:	462a      	mov	r2, r5
 8015a68:	ea4f 0887 	mov.w	r8, r7, lsl #2
 8015a6c:	4621      	mov	r1, r4
    for (i = 0; i < json_object_get_count(object); i++) {
 8015a6e:	f107 0701 	add.w	r7, r7, #1
        if (name_length != name_len) {
 8015a72:	d104      	bne.n	8015a7e <json_serialize_to_buffer_r+0x17a>
        if (strncmp(object->names[i], name, name_len) == 0) {
 8015a74:	f002 fc5a 	bl	801832c <strncmp>
 8015a78:	2800      	cmp	r0, #0
 8015a7a:	f000 8109 	beq.w	8015c90 <json_serialize_to_buffer_r+0x38c>
    for (i = 0; i < json_object_get_count(object); i++) {
 8015a7e:	4557      	cmp	r7, sl
 8015a80:	d1e9      	bne.n	8015a56 <json_serialize_to_buffer_r+0x152>
 8015a82:	9f07      	ldr	r7, [sp, #28]
    return NULL;
 8015a84:	2000      	movs	r0, #0
                written = json_serialize_to_buffer_r(temp_value, buf, level+1, is_pretty, num_buf);
 8015a86:	9b02      	ldr	r3, [sp, #8]
 8015a88:	9300      	str	r3, [sp, #0]
 8015a8a:	f109 0201 	add.w	r2, r9, #1
 8015a8e:	9b04      	ldr	r3, [sp, #16]
 8015a90:	4639      	mov	r1, r7
 8015a92:	f7ff ff37 	bl	8015904 <json_serialize_to_buffer_r>
                if (written < 0) {
 8015a96:	2800      	cmp	r0, #0
 8015a98:	f6ff af49 	blt.w	801592e <json_serialize_to_buffer_r+0x2a>
                if (i < (count - 1)) {
 8015a9c:	9b05      	ldr	r3, [sp, #20]
 8015a9e:	3b01      	subs	r3, #1
                if (buf != NULL) {
 8015aa0:	2f00      	cmp	r7, #0
 8015aa2:	f000 80e8 	beq.w	8015c76 <json_serialize_to_buffer_r+0x372>
                written_total += written;
 8015aa6:	9a06      	ldr	r2, [sp, #24]
 8015aa8:	4402      	add	r2, r0
 8015aaa:	4692      	mov	sl, r2
                if (i < (count - 1)) {
 8015aac:	9a03      	ldr	r2, [sp, #12]
 8015aae:	429a      	cmp	r2, r3
                    buf += written;
 8015ab0:	4407      	add	r7, r0
                if (i < (count - 1)) {
 8015ab2:	d205      	bcs.n	8015ac0 <json_serialize_to_buffer_r+0x1bc>
    return sprintf(buf, "%s", string);
 8015ab4:	4b69      	ldr	r3, [pc, #420]	; (8015c5c <json_serialize_to_buffer_r+0x358>)
 8015ab6:	881b      	ldrh	r3, [r3, #0]
 8015ab8:	f827 3b01 	strh.w	r3, [r7], #1
                    APPEND_STRING(",");
 8015abc:	f10a 0a01 	add.w	sl, sl, #1
                if (is_pretty) {
 8015ac0:	9b04      	ldr	r3, [sp, #16]
 8015ac2:	2b00      	cmp	r3, #0
 8015ac4:	f040 80ea 	bne.w	8015c9c <json_serialize_to_buffer_r+0x398>
            for (i = 0; i < count; i++) {
 8015ac8:	9b03      	ldr	r3, [sp, #12]
 8015aca:	9a05      	ldr	r2, [sp, #20]
 8015acc:	3301      	adds	r3, #1
 8015ace:	4293      	cmp	r3, r2
 8015ad0:	9303      	str	r3, [sp, #12]
 8015ad2:	f000 8151 	beq.w	8015d78 <json_serialize_to_buffer_r+0x474>
 8015ad6:	f8db 300c 	ldr.w	r3, [fp, #12]
 8015ada:	e76e      	b.n	80159ba <json_serialize_to_buffer_r+0xb6>
}

JSON_Array * json_value_get_array(const JSON_Value *value) {
    return json_value_get_type(value) == JSONArray ? value->value.array : NULL;
 8015adc:	f8d3 b008 	ldr.w	fp, [r3, #8]
    return array ? array->count : 0;
 8015ae0:	f1bb 0f00 	cmp.w	fp, #0
 8015ae4:	f000 8117 	beq.w	8015d16 <json_serialize_to_buffer_r+0x412>
 8015ae8:	f8db a008 	ldr.w	sl, [fp, #8]
    if (buf == NULL) {
 8015aec:	2900      	cmp	r1, #0
 8015aee:	f000 80fd 	beq.w	8015cec <json_serialize_to_buffer_r+0x3e8>
    return sprintf(buf, "%s", string);
 8015af2:	4b5b      	ldr	r3, [pc, #364]	; (8015c60 <json_serialize_to_buffer_r+0x35c>)
 8015af4:	460f      	mov	r7, r1
 8015af6:	881b      	ldrh	r3, [r3, #0]
 8015af8:	f827 3b01 	strh.w	r3, [r7], #1
            if (count > 0 && is_pretty) {
 8015afc:	f1ba 0f00 	cmp.w	sl, #0
 8015b00:	f000 810f 	beq.w	8015d22 <json_serialize_to_buffer_r+0x41e>
 8015b04:	2d00      	cmp	r5, #0
 8015b06:	d145      	bne.n	8015b94 <json_serialize_to_buffer_r+0x290>
 8015b08:	2601      	movs	r6, #1
    return sprintf(buf, "%s", string);
 8015b0a:	f8df 9144 	ldr.w	r9, [pc, #324]	; 8015c50 <json_serialize_to_buffer_r+0x34c>
            if (count > 0 && is_pretty) {
 8015b0e:	f04f 0800 	mov.w	r8, #0
 8015b12:	1c62      	adds	r2, r4, #1
                if (is_pretty) {
 8015b14:	2d00      	cmp	r5, #0
 8015b16:	d155      	bne.n	8015bc4 <json_serialize_to_buffer_r+0x2c0>
    if (array == NULL || index >= json_array_get_count(array)) {
 8015b18:	f8db 3008 	ldr.w	r3, [fp, #8]
 8015b1c:	4598      	cmp	r8, r3
 8015b1e:	d26d      	bcs.n	8015bfc <json_serialize_to_buffer_r+0x2f8>
    return array->items[index];
 8015b20:	f8db 3004 	ldr.w	r3, [fp, #4]
 8015b24:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
                written = json_serialize_to_buffer_r(temp_value, buf, level+1, is_pretty, num_buf);
 8015b28:	9b02      	ldr	r3, [sp, #8]
 8015b2a:	9300      	str	r3, [sp, #0]
 8015b2c:	4639      	mov	r1, r7
 8015b2e:	462b      	mov	r3, r5
 8015b30:	9203      	str	r2, [sp, #12]
 8015b32:	f7ff fee7 	bl	8015904 <json_serialize_to_buffer_r>
                if (written < 0) {
 8015b36:	2800      	cmp	r0, #0
 8015b38:	f6ff aef9 	blt.w	801592e <json_serialize_to_buffer_r+0x2a>
                if (buf != NULL) {
 8015b3c:	9a03      	ldr	r2, [sp, #12]
                if (i < (count - 1)) {
 8015b3e:	f10a 33ff 	add.w	r3, sl, #4294967295
                if (buf != NULL) {
 8015b42:	2f00      	cmp	r7, #0
 8015b44:	d062      	beq.n	8015c0c <json_serialize_to_buffer_r+0x308>
                if (i < (count - 1)) {
 8015b46:	4598      	cmp	r8, r3
                    buf += written;
 8015b48:	4407      	add	r7, r0
                written_total += written;
 8015b4a:	4406      	add	r6, r0
                if (i < (count - 1)) {
 8015b4c:	d316      	bcc.n	8015b7c <json_serialize_to_buffer_r+0x278>
                if (is_pretty) {
 8015b4e:	b9e5      	cbnz	r5, 8015b8a <json_serialize_to_buffer_r+0x286>
            for (i = 0; i < count; i++) {
 8015b50:	f108 0801 	add.w	r8, r8, #1
 8015b54:	45d0      	cmp	r8, sl
 8015b56:	d1dd      	bne.n	8015b14 <json_serialize_to_buffer_r+0x210>
            if (count > 0 && is_pretty) {
 8015b58:	2d00      	cmp	r5, #0
 8015b5a:	f040 80ed 	bne.w	8015d38 <json_serialize_to_buffer_r+0x434>
    if (buf == NULL) {
 8015b5e:	b117      	cbz	r7, 8015b66 <json_serialize_to_buffer_r+0x262>
    return sprintf(buf, "%s", string);
 8015b60:	4b40      	ldr	r3, [pc, #256]	; (8015c64 <json_serialize_to_buffer_r+0x360>)
 8015b62:	881b      	ldrh	r3, [r3, #0]
 8015b64:	803b      	strh	r3, [r7, #0]
            APPEND_STRING("]");
 8015b66:	1c70      	adds	r0, r6, #1
            return written_total;
 8015b68:	e6e3      	b.n	8015932 <json_serialize_to_buffer_r+0x2e>
}

const char * json_value_get_string(const JSON_Value *value) {
    return json_value_get_type(value) == JSONString ? value->value.string : NULL;
 8015b6a:	6898      	ldr	r0, [r3, #8]
            if (string == NULL) {
 8015b6c:	2800      	cmp	r0, #0
 8015b6e:	f43f aede 	beq.w	801592e <json_serialize_to_buffer_r+0x2a>
            written = json_serialize_string(string, buf);
 8015b72:	f7ff fcb9 	bl	80154e8 <json_serialize_string>
            if (written < 0) {
 8015b76:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 8015b7a:	e6da      	b.n	8015932 <json_serialize_to_buffer_r+0x2e>
    return sprintf(buf, "%s", string);
 8015b7c:	4b37      	ldr	r3, [pc, #220]	; (8015c5c <json_serialize_to_buffer_r+0x358>)
 8015b7e:	881b      	ldrh	r3, [r3, #0]
 8015b80:	f827 3b01 	strh.w	r3, [r7], #1
                    APPEND_STRING(",");
 8015b84:	3601      	adds	r6, #1
                if (is_pretty) {
 8015b86:	2d00      	cmp	r5, #0
 8015b88:	d0e2      	beq.n	8015b50 <json_serialize_to_buffer_r+0x24c>
    return sprintf(buf, "%s", string);
 8015b8a:	4b37      	ldr	r3, [pc, #220]	; (8015c68 <json_serialize_to_buffer_r+0x364>)
 8015b8c:	881b      	ldrh	r3, [r3, #0]
 8015b8e:	f827 3b01 	strh.w	r3, [r7], #1
                    APPEND_STRING("\n");
 8015b92:	e040      	b.n	8015c16 <json_serialize_to_buffer_r+0x312>
    return sprintf(buf, "%s", string);
 8015b94:	4b34      	ldr	r3, [pc, #208]	; (8015c68 <json_serialize_to_buffer_r+0x364>)
                APPEND_STRING("\n");
 8015b96:	2602      	movs	r6, #2
    return sprintf(buf, "%s", string);
 8015b98:	881b      	ldrh	r3, [r3, #0]
 8015b9a:	803b      	strh	r3, [r7, #0]
                APPEND_STRING("\n");
 8015b9c:	198f      	adds	r7, r1, r6
 8015b9e:	e7b4      	b.n	8015b0a <json_serialize_to_buffer_r+0x206>
    return sprintf(buf, "%s", string);
 8015ba0:	4b31      	ldr	r3, [pc, #196]	; (8015c68 <json_serialize_to_buffer_r+0x364>)
 8015ba2:	881b      	ldrh	r3, [r3, #0]
 8015ba4:	f8a9 3000 	strh.w	r3, [r9]
                APPEND_STRING("\n");
 8015ba8:	68c3      	ldr	r3, [r0, #12]
 8015baa:	f101 0902 	add.w	r9, r1, #2
 8015bae:	f04f 0a02 	mov.w	sl, #2
 8015bb2:	e6fc      	b.n	80159ae <json_serialize_to_buffer_r+0xaa>
    for (i = 0; i < level; i++) {
 8015bb4:	3301      	adds	r3, #1
 8015bb6:	4599      	cmp	r9, r3
        APPEND_STRING("    ");
 8015bb8:	f101 0104 	add.w	r1, r1, #4
    for (i = 0; i < level; i++) {
 8015bbc:	f6bf af1b 	bge.w	80159f6 <json_serialize_to_buffer_r+0xf2>
 8015bc0:	448a      	add	sl, r1
 8015bc2:	e71e      	b.n	8015a02 <json_serialize_to_buffer_r+0xfe>
 8015bc4:	2c00      	cmp	r4, #0
 8015bc6:	f2c0 80b3 	blt.w	8015d30 <json_serialize_to_buffer_r+0x42c>
 8015bca:	2300      	movs	r3, #0
 8015bcc:	469e      	mov	lr, r3
 8015bce:	4639      	mov	r1, r7
    if (buf == NULL) {
 8015bd0:	b1b1      	cbz	r1, 8015c00 <json_serialize_to_buffer_r+0x2fc>
    return sprintf(buf, "%s", string);
 8015bd2:	f8d9 0000 	ldr.w	r0, [r9]
 8015bd6:	f899 c004 	ldrb.w	ip, [r9, #4]
 8015bda:	6008      	str	r0, [r1, #0]
 8015bdc:	f801 cf04 	strb.w	ip, [r1, #4]!
    for (i = 0; i < level; i++) {
 8015be0:	3301      	adds	r3, #1
 8015be2:	429c      	cmp	r4, r3
        APPEND_STRING("    ");
 8015be4:	f10e 0e04 	add.w	lr, lr, #4
    for (i = 0; i < level; i++) {
 8015be8:	daf2      	bge.n	8015bd0 <json_serialize_to_buffer_r+0x2cc>
 8015bea:	4671      	mov	r1, lr
 8015bec:	4476      	add	r6, lr
                    APPEND_INDENT(level+1);
 8015bee:	2f00      	cmp	r7, #0
 8015bf0:	d092      	beq.n	8015b18 <json_serialize_to_buffer_r+0x214>
    if (array == NULL || index >= json_array_get_count(array)) {
 8015bf2:	f8db 3008 	ldr.w	r3, [fp, #8]
 8015bf6:	4598      	cmp	r8, r3
                    APPEND_INDENT(level+1);
 8015bf8:	440f      	add	r7, r1
    if (array == NULL || index >= json_array_get_count(array)) {
 8015bfa:	d391      	bcc.n	8015b20 <json_serialize_to_buffer_r+0x21c>
        return NULL;
 8015bfc:	2000      	movs	r0, #0
 8015bfe:	e793      	b.n	8015b28 <json_serialize_to_buffer_r+0x224>
    for (i = 0; i < level; i++) {
 8015c00:	3301      	adds	r3, #1
 8015c02:	429c      	cmp	r4, r3
        APPEND_STRING("    ");
 8015c04:	f10e 0e04 	add.w	lr, lr, #4
    for (i = 0; i < level; i++) {
 8015c08:	daea      	bge.n	8015be0 <json_serialize_to_buffer_r+0x2dc>
 8015c0a:	e7ee      	b.n	8015bea <json_serialize_to_buffer_r+0x2e6>
                if (i < (count - 1)) {
 8015c0c:	4598      	cmp	r8, r3
                written_total += written;
 8015c0e:	4406      	add	r6, r0
                if (i < (count - 1)) {
 8015c10:	d32c      	bcc.n	8015c6c <json_serialize_to_buffer_r+0x368>
                if (is_pretty) {
 8015c12:	2d00      	cmp	r5, #0
 8015c14:	d09c      	beq.n	8015b50 <json_serialize_to_buffer_r+0x24c>
                    APPEND_STRING("\n");
 8015c16:	3601      	adds	r6, #1
 8015c18:	e79a      	b.n	8015b50 <json_serialize_to_buffer_r+0x24c>
                written = json_serialize_string(key, buf);
 8015c1a:	4639      	mov	r1, r7
 8015c1c:	4620      	mov	r0, r4
 8015c1e:	f7ff fc63 	bl	80154e8 <json_serialize_string>
                if (written < 0) {
 8015c22:	2800      	cmp	r0, #0
 8015c24:	f6ff ae83 	blt.w	801592e <json_serialize_to_buffer_r+0x2a>
                if (buf != NULL) {
 8015c28:	2f00      	cmp	r7, #0
 8015c2a:	d03c      	beq.n	8015ca6 <json_serialize_to_buffer_r+0x3a2>
    return sprintf(buf, "%s", string);
 8015c2c:	4b09      	ldr	r3, [pc, #36]	; (8015c54 <json_serialize_to_buffer_r+0x350>)
                written_total += written;
 8015c2e:	4482      	add	sl, r0
    return sprintf(buf, "%s", string);
 8015c30:	881b      	ldrh	r3, [r3, #0]
 8015c32:	523b      	strh	r3, [r7, r0]
                    buf += written;
 8015c34:	4407      	add	r7, r0
                APPEND_STRING(":");
 8015c36:	f10a 0301 	add.w	r3, sl, #1
 8015c3a:	9306      	str	r3, [sp, #24]
 8015c3c:	3701      	adds	r7, #1
                if (is_pretty) {
 8015c3e:	e6f9      	b.n	8015a34 <json_serialize_to_buffer_r+0x130>
 8015c40:	0801c40c 	.word	0x0801c40c
 8015c44:	0801c414 	.word	0x0801c414
 8015c48:	0801c3fc 	.word	0x0801c3fc
 8015c4c:	0801c3f4 	.word	0x0801c3f4
 8015c50:	0801c3e4 	.word	0x0801c3e4
 8015c54:	0801c41c 	.word	0x0801c41c
 8015c58:	0801c420 	.word	0x0801c420
 8015c5c:	0801c3ec 	.word	0x0801c3ec
 8015c60:	0801c3dc 	.word	0x0801c3dc
 8015c64:	0801c3f0 	.word	0x0801c3f0
 8015c68:	0801c3e0 	.word	0x0801c3e0
                    APPEND_STRING(",");
 8015c6c:	3601      	adds	r6, #1
                if (is_pretty) {
 8015c6e:	2d00      	cmp	r5, #0
 8015c70:	f43f af6e 	beq.w	8015b50 <json_serialize_to_buffer_r+0x24c>
 8015c74:	e7cf      	b.n	8015c16 <json_serialize_to_buffer_r+0x312>
                written_total += written;
 8015c76:	9a06      	ldr	r2, [sp, #24]
 8015c78:	4402      	add	r2, r0
 8015c7a:	4692      	mov	sl, r2
                if (i < (count - 1)) {
 8015c7c:	9a03      	ldr	r2, [sp, #12]
 8015c7e:	429a      	cmp	r2, r3
 8015c80:	d328      	bcc.n	8015cd4 <json_serialize_to_buffer_r+0x3d0>
                if (is_pretty) {
 8015c82:	9b04      	ldr	r3, [sp, #16]
 8015c84:	2b00      	cmp	r3, #0
 8015c86:	f43f af1f 	beq.w	8015ac8 <json_serialize_to_buffer_r+0x1c4>
                    APPEND_STRING("\n");
 8015c8a:	f10a 0a01 	add.w	sl, sl, #1
 8015c8e:	e71b      	b.n	8015ac8 <json_serialize_to_buffer_r+0x1c4>
            return object->values[i];
 8015c90:	f8db 3008 	ldr.w	r3, [fp, #8]
 8015c94:	9f07      	ldr	r7, [sp, #28]
 8015c96:	f853 0008 	ldr.w	r0, [r3, r8]
 8015c9a:	e6f4      	b.n	8015a86 <json_serialize_to_buffer_r+0x182>
    return sprintf(buf, "%s", string);
 8015c9c:	4b4d      	ldr	r3, [pc, #308]	; (8015dd4 <json_serialize_to_buffer_r+0x4d0>)
 8015c9e:	881b      	ldrh	r3, [r3, #0]
 8015ca0:	f827 3b01 	strh.w	r3, [r7], #1
                    APPEND_STRING("\n");
 8015ca4:	e7f1      	b.n	8015c8a <json_serialize_to_buffer_r+0x386>
                written_total += written;
 8015ca6:	4450      	add	r0, sl
                APPEND_STRING(":");
 8015ca8:	1c43      	adds	r3, r0, #1
 8015caa:	9306      	str	r3, [sp, #24]
                if (is_pretty) {
 8015cac:	e6c2      	b.n	8015a34 <json_serialize_to_buffer_r+0x130>
    if (buf == NULL) {
 8015cae:	b121      	cbz	r1, 8015cba <json_serialize_to_buffer_r+0x3b6>
    return sprintf(buf, "%s", string);
 8015cb0:	4b49      	ldr	r3, [pc, #292]	; (8015dd8 <json_serialize_to_buffer_r+0x4d4>)
 8015cb2:	6818      	ldr	r0, [r3, #0]
 8015cb4:	889b      	ldrh	r3, [r3, #4]
 8015cb6:	6008      	str	r0, [r1, #0]
 8015cb8:	808b      	strh	r3, [r1, #4]
                APPEND_STRING("false");
 8015cba:	2005      	movs	r0, #5
 8015cbc:	e639      	b.n	8015932 <json_serialize_to_buffer_r+0x2e>
                written = json_serialize_string(key, buf);
 8015cbe:	4639      	mov	r1, r7
 8015cc0:	4620      	mov	r0, r4
 8015cc2:	f7ff fc11 	bl	80154e8 <json_serialize_string>
                if (written < 0) {
 8015cc6:	2800      	cmp	r0, #0
 8015cc8:	f6ff ae31 	blt.w	801592e <json_serialize_to_buffer_r+0x2a>
                written_total += written;
 8015ccc:	4482      	add	sl, r0
                APPEND_STRING(":");
 8015cce:	f10a 0a01 	add.w	sl, sl, #1
                if (is_pretty) {
 8015cd2:	e6ac      	b.n	8015a2e <json_serialize_to_buffer_r+0x12a>
                if (is_pretty) {
 8015cd4:	9b04      	ldr	r3, [sp, #16]
                    APPEND_STRING(",");
 8015cd6:	f10a 0a01 	add.w	sl, sl, #1
                if (is_pretty) {
 8015cda:	2b00      	cmp	r3, #0
 8015cdc:	f43f aef4 	beq.w	8015ac8 <json_serialize_to_buffer_r+0x1c4>
 8015ce0:	e7d3      	b.n	8015c8a <json_serialize_to_buffer_r+0x386>
            if (count > 0 && is_pretty) {
 8015ce2:	b303      	cbz	r3, 8015d26 <json_serialize_to_buffer_r+0x422>
 8015ce4:	4689      	mov	r9, r1
 8015ce6:	f105 0a01 	add.w	sl, r5, #1
 8015cea:	e660      	b.n	80159ae <json_serialize_to_buffer_r+0xaa>
            if (count > 0 && is_pretty) {
 8015cec:	f1ba 0f00 	cmp.w	sl, #0
 8015cf0:	d01c      	beq.n	8015d2c <json_serialize_to_buffer_r+0x428>
 8015cf2:	460f      	mov	r7, r1
 8015cf4:	1c6e      	adds	r6, r5, #1
 8015cf6:	e708      	b.n	8015b0a <json_serialize_to_buffer_r+0x206>
    if (buf == NULL) {
 8015cf8:	b1a9      	cbz	r1, 8015d26 <json_serialize_to_buffer_r+0x422>
    return sprintf(buf, "%s", string);
 8015cfa:	4b38      	ldr	r3, [pc, #224]	; (8015ddc <json_serialize_to_buffer_r+0x4d8>)
 8015cfc:	4689      	mov	r9, r1
 8015cfe:	881b      	ldrh	r3, [r3, #0]
 8015d00:	f829 3b01 	strh.w	r3, [r9], #1
    int written = -1, written_total = 0;
 8015d04:	f04f 0a01 	mov.w	sl, #1
    return sprintf(buf, "%s", string);
 8015d08:	4b35      	ldr	r3, [pc, #212]	; (8015de0 <json_serialize_to_buffer_r+0x4dc>)
 8015d0a:	881b      	ldrh	r3, [r3, #0]
 8015d0c:	f8a9 3000 	strh.w	r3, [r9]
            APPEND_STRING("}");
 8015d10:	f10a 0001 	add.w	r0, sl, #1
            return written_total;
 8015d14:	e60d      	b.n	8015932 <json_serialize_to_buffer_r+0x2e>
    if (buf == NULL) {
 8015d16:	b149      	cbz	r1, 8015d2c <json_serialize_to_buffer_r+0x428>
    return sprintf(buf, "%s", string);
 8015d18:	4b32      	ldr	r3, [pc, #200]	; (8015de4 <json_serialize_to_buffer_r+0x4e0>)
 8015d1a:	460f      	mov	r7, r1
 8015d1c:	881b      	ldrh	r3, [r3, #0]
 8015d1e:	f827 3b01 	strh.w	r3, [r7], #1
    int written = -1, written_total = 0;
 8015d22:	2601      	movs	r6, #1
 8015d24:	e71c      	b.n	8015b60 <json_serialize_to_buffer_r+0x25c>
            if (count > 0 && is_pretty) {
 8015d26:	f04f 0a01 	mov.w	sl, #1
 8015d2a:	e7f1      	b.n	8015d10 <json_serialize_to_buffer_r+0x40c>
        return (int)strlen(string);
 8015d2c:	2601      	movs	r6, #1
 8015d2e:	e71a      	b.n	8015b66 <json_serialize_to_buffer_r+0x262>
    int written = -1, written_total = 0;
 8015d30:	2100      	movs	r1, #0
 8015d32:	e75c      	b.n	8015bee <json_serialize_to_buffer_r+0x2ea>
    return NULL;
 8015d34:	4618      	mov	r0, r3
 8015d36:	e6a6      	b.n	8015a86 <json_serialize_to_buffer_r+0x182>
    for (i = 0; i < level; i++) {
 8015d38:	2c00      	cmp	r4, #0
 8015d3a:	dd46      	ble.n	8015dca <json_serialize_to_buffer_r+0x4c6>
 8015d3c:	2300      	movs	r3, #0
    return sprintf(buf, "%s", string);
 8015d3e:	f8df c0a8 	ldr.w	ip, [pc, #168]	; 8015de8 <json_serialize_to_buffer_r+0x4e4>
    int written = -1, written_total = 0;
 8015d42:	461d      	mov	r5, r3
    for (i = 0; i < level; i++) {
 8015d44:	463a      	mov	r2, r7
    if (buf == NULL) {
 8015d46:	b17a      	cbz	r2, 8015d68 <json_serialize_to_buffer_r+0x464>
    return sprintf(buf, "%s", string);
 8015d48:	f8dc 0000 	ldr.w	r0, [ip]
 8015d4c:	f89c 1004 	ldrb.w	r1, [ip, #4]
 8015d50:	6010      	str	r0, [r2, #0]
 8015d52:	f802 1f04 	strb.w	r1, [r2, #4]!
    for (i = 0; i < level; i++) {
 8015d56:	3301      	adds	r3, #1
 8015d58:	429c      	cmp	r4, r3
        APPEND_STRING("    ");
 8015d5a:	f105 0504 	add.w	r5, r5, #4
    for (i = 0; i < level; i++) {
 8015d5e:	dcf2      	bgt.n	8015d46 <json_serialize_to_buffer_r+0x442>
                APPEND_INDENT(level);
 8015d60:	b197      	cbz	r7, 8015d88 <json_serialize_to_buffer_r+0x484>
 8015d62:	442f      	add	r7, r5
 8015d64:	442e      	add	r6, r5
    if (buf == NULL) {
 8015d66:	e6fb      	b.n	8015b60 <json_serialize_to_buffer_r+0x25c>
    for (i = 0; i < level; i++) {
 8015d68:	3301      	adds	r3, #1
 8015d6a:	429c      	cmp	r4, r3
        APPEND_STRING("    ");
 8015d6c:	f105 0504 	add.w	r5, r5, #4
    for (i = 0; i < level; i++) {
 8015d70:	dcf1      	bgt.n	8015d56 <json_serialize_to_buffer_r+0x452>
 8015d72:	e7f5      	b.n	8015d60 <json_serialize_to_buffer_r+0x45c>
    int written = -1, written_total = 0;
 8015d74:	2100      	movs	r1, #0
 8015d76:	e644      	b.n	8015a02 <json_serialize_to_buffer_r+0xfe>
            if (count > 0 && is_pretty) {
 8015d78:	9d04      	ldr	r5, [sp, #16]
 8015d7a:	464c      	mov	r4, r9
 8015d7c:	46b9      	mov	r9, r7
 8015d7e:	b92d      	cbnz	r5, 8015d8c <json_serialize_to_buffer_r+0x488>
    if (buf == NULL) {
 8015d80:	f1b9 0f00 	cmp.w	r9, #0
 8015d84:	d1c0      	bne.n	8015d08 <json_serialize_to_buffer_r+0x404>
 8015d86:	e7c3      	b.n	8015d10 <json_serialize_to_buffer_r+0x40c>
                APPEND_INDENT(level);
 8015d88:	442e      	add	r6, r5
    if (buf == NULL) {
 8015d8a:	e6ec      	b.n	8015b66 <json_serialize_to_buffer_r+0x262>
    for (i = 0; i < level; i++) {
 8015d8c:	2c00      	cmp	r4, #0
 8015d8e:	dd1e      	ble.n	8015dce <json_serialize_to_buffer_r+0x4ca>
 8015d90:	2200      	movs	r2, #0
    return sprintf(buf, "%s", string);
 8015d92:	4e15      	ldr	r6, [pc, #84]	; (8015de8 <json_serialize_to_buffer_r+0x4e4>)
    int written = -1, written_total = 0;
 8015d94:	4615      	mov	r5, r2
    for (i = 0; i < level; i++) {
 8015d96:	464b      	mov	r3, r9
    if (buf == NULL) {
 8015d98:	b17b      	cbz	r3, 8015dba <json_serialize_to_buffer_r+0x4b6>
    return sprintf(buf, "%s", string);
 8015d9a:	6830      	ldr	r0, [r6, #0]
 8015d9c:	7931      	ldrb	r1, [r6, #4]
 8015d9e:	6018      	str	r0, [r3, #0]
 8015da0:	f803 1f04 	strb.w	r1, [r3, #4]!
    for (i = 0; i < level; i++) {
 8015da4:	3201      	adds	r2, #1
 8015da6:	4294      	cmp	r4, r2
        APPEND_STRING("    ");
 8015da8:	f105 0504 	add.w	r5, r5, #4
    for (i = 0; i < level; i++) {
 8015dac:	dcf4      	bgt.n	8015d98 <json_serialize_to_buffer_r+0x494>
                APPEND_INDENT(level);
 8015dae:	f1b9 0f00 	cmp.w	r9, #0
 8015db2:	d008      	beq.n	8015dc6 <json_serialize_to_buffer_r+0x4c2>
 8015db4:	44a9      	add	r9, r5
 8015db6:	44aa      	add	sl, r5
    if (buf == NULL) {
 8015db8:	e7a6      	b.n	8015d08 <json_serialize_to_buffer_r+0x404>
    for (i = 0; i < level; i++) {
 8015dba:	3201      	adds	r2, #1
 8015dbc:	4294      	cmp	r4, r2
        APPEND_STRING("    ");
 8015dbe:	f105 0504 	add.w	r5, r5, #4
    for (i = 0; i < level; i++) {
 8015dc2:	dcef      	bgt.n	8015da4 <json_serialize_to_buffer_r+0x4a0>
 8015dc4:	e7f3      	b.n	8015dae <json_serialize_to_buffer_r+0x4aa>
                APPEND_INDENT(level);
 8015dc6:	44aa      	add	sl, r5
    if (buf == NULL) {
 8015dc8:	e7a2      	b.n	8015d10 <json_serialize_to_buffer_r+0x40c>
    int written = -1, written_total = 0;
 8015dca:	2500      	movs	r5, #0
 8015dcc:	e7c8      	b.n	8015d60 <json_serialize_to_buffer_r+0x45c>
 8015dce:	2500      	movs	r5, #0
 8015dd0:	e7ed      	b.n	8015dae <json_serialize_to_buffer_r+0x4aa>
 8015dd2:	bf00      	nop
 8015dd4:	0801c3e0 	.word	0x0801c3e0
 8015dd8:	0801c404 	.word	0x0801c404
 8015ddc:	0801c3f4 	.word	0x0801c3f4
 8015de0:	0801c3f8 	.word	0x0801c3f8
 8015de4:	0801c3dc 	.word	0x0801c3dc
 8015de8:	0801c3e4 	.word	0x0801c3e4

08015dec <json_serialize_to_buffer_r.constprop.0>:
static int json_serialize_to_buffer_r(const JSON_Value *value, char *buf, int level, int is_pretty, char *num_buf)
 8015dec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015df0:	b089      	sub	sp, #36	; 0x24
 8015df2:	9303      	str	r3, [sp, #12]
    return value ? value->type : JSONError;
 8015df4:	b168      	cbz	r0, 8015e12 <json_serialize_to_buffer_r.constprop.0+0x26>
 8015df6:	4615      	mov	r5, r2
 8015df8:	6842      	ldr	r2, [r0, #4]
 8015dfa:	3a01      	subs	r2, #1
 8015dfc:	4603      	mov	r3, r0
 8015dfe:	2a05      	cmp	r2, #5
 8015e00:	d807      	bhi.n	8015e12 <json_serialize_to_buffer_r.constprop.0+0x26>
 8015e02:	e8df f012 	tbh	[pc, r2, lsl #1]
 8015e06:	0018      	.short	0x0018
 8015e08:	000b00e2 	.word	0x000b00e2
 8015e0c:	00cc002e 	.word	0x00cc002e
 8015e10:	0022      	.short	0x0022
 8015e12:	f04f 30ff 	mov.w	r0, #4294967295
}
 8015e16:	b009      	add	sp, #36	; 0x24
 8015e18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            written = sprintf(num_buf, FLOAT_FORMAT, num);
 8015e1c:	9a03      	ldr	r2, [sp, #12]
 8015e1e:	2900      	cmp	r1, #0
 8015e20:	bf18      	it	ne
 8015e22:	460a      	movne	r2, r1
 8015e24:	4610      	mov	r0, r2
 8015e26:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8015e2a:	49bb      	ldr	r1, [pc, #748]	; (8016118 <json_serialize_to_buffer_r.constprop.0+0x32c>)
}
 8015e2c:	b009      	add	sp, #36	; 0x24
 8015e2e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
            written = sprintf(num_buf, FLOAT_FORMAT, num);
 8015e32:	f002 ba0b 	b.w	801824c <siprintf>
    if (buf == NULL) {
 8015e36:	b121      	cbz	r1, 8015e42 <json_serialize_to_buffer_r.constprop.0+0x56>
    return sprintf(buf, "%s", string);
 8015e38:	4bb8      	ldr	r3, [pc, #736]	; (801611c <json_serialize_to_buffer_r.constprop.0+0x330>)
 8015e3a:	6818      	ldr	r0, [r3, #0]
 8015e3c:	791b      	ldrb	r3, [r3, #4]
 8015e3e:	6008      	str	r0, [r1, #0]
 8015e40:	710b      	strb	r3, [r1, #4]
            return written_total;
 8015e42:	2004      	movs	r0, #4
}
 8015e44:	b009      	add	sp, #36	; 0x24
 8015e46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            if (json_value_get_boolean(value)) {
 8015e4a:	689b      	ldr	r3, [r3, #8]
 8015e4c:	2b00      	cmp	r3, #0
 8015e4e:	f000 814f 	beq.w	80160f0 <json_serialize_to_buffer_r.constprop.0+0x304>
    if (buf == NULL) {
 8015e52:	2900      	cmp	r1, #0
 8015e54:	d0f5      	beq.n	8015e42 <json_serialize_to_buffer_r.constprop.0+0x56>
    return sprintf(buf, "%s", string);
 8015e56:	4bb2      	ldr	r3, [pc, #712]	; (8016120 <json_serialize_to_buffer_r.constprop.0+0x334>)
 8015e58:	6818      	ldr	r0, [r3, #0]
 8015e5a:	791b      	ldrb	r3, [r3, #4]
 8015e5c:	6008      	str	r0, [r1, #0]
 8015e5e:	710b      	strb	r3, [r1, #4]
                APPEND_STRING("true");
 8015e60:	e7ef      	b.n	8015e42 <json_serialize_to_buffer_r.constprop.0+0x56>
    return json_value_get_type(value) == JSONObject ? value->value.object : NULL;
 8015e62:	f8d3 9008 	ldr.w	r9, [r3, #8]
    return object ? object->count : 0;
 8015e66:	f1b9 0f00 	cmp.w	r9, #0
 8015e6a:	f000 8171 	beq.w	8016150 <json_serialize_to_buffer_r.constprop.0+0x364>
 8015e6e:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8015e72:	9306      	str	r3, [sp, #24]
    if (buf == NULL) {
 8015e74:	2900      	cmp	r1, #0
 8015e76:	f000 814a 	beq.w	801610e <json_serialize_to_buffer_r.constprop.0+0x322>
    return sprintf(buf, "%s", string);
 8015e7a:	4aaa      	ldr	r2, [pc, #680]	; (8016124 <json_serialize_to_buffer_r.constprop.0+0x338>)
 8015e7c:	460c      	mov	r4, r1
 8015e7e:	8812      	ldrh	r2, [r2, #0]
 8015e80:	f824 2b01 	strh.w	r2, [r4], #1
            if (count > 0 && is_pretty) {
 8015e84:	2b00      	cmp	r3, #0
 8015e86:	f000 8169 	beq.w	801615c <json_serialize_to_buffer_r.constprop.0+0x370>
 8015e8a:	2d00      	cmp	r5, #0
 8015e8c:	f040 8108 	bne.w	80160a0 <json_serialize_to_buffer_r.constprop.0+0x2b4>
 8015e90:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8015e94:	f04f 0b01 	mov.w	fp, #1
 8015e98:	2200      	movs	r2, #0
 8015e9a:	4692      	mov	sl, r2
 8015e9c:	9504      	str	r5, [sp, #16]
    if (object == NULL || index >= json_object_get_count(object)) {
 8015e9e:	4553      	cmp	r3, sl
 8015ea0:	d9b7      	bls.n	8015e12 <json_serialize_to_buffer_r.constprop.0+0x26>
    return object->names[index];
 8015ea2:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8015ea6:	f853 502a 	ldr.w	r5, [r3, sl, lsl #2]
                if (key == NULL) {
 8015eaa:	2d00      	cmp	r5, #0
 8015eac:	d0b1      	beq.n	8015e12 <json_serialize_to_buffer_r.constprop.0+0x26>
                if (is_pretty) {
 8015eae:	9b04      	ldr	r3, [sp, #16]
 8015eb0:	b143      	cbz	r3, 8015ec4 <json_serialize_to_buffer_r.constprop.0+0xd8>
    if (buf == NULL) {
 8015eb2:	b12c      	cbz	r4, 8015ec0 <json_serialize_to_buffer_r.constprop.0+0xd4>
    return sprintf(buf, "%s", string);
 8015eb4:	4b9c      	ldr	r3, [pc, #624]	; (8016128 <json_serialize_to_buffer_r.constprop.0+0x33c>)
 8015eb6:	6818      	ldr	r0, [r3, #0]
 8015eb8:	791b      	ldrb	r3, [r3, #4]
 8015eba:	6020      	str	r0, [r4, #0]
 8015ebc:	f804 3f04 	strb.w	r3, [r4, #4]!
                    APPEND_INDENT(level+1);
 8015ec0:	f10b 0b04 	add.w	fp, fp, #4
                written = json_serialize_string(key, buf);
 8015ec4:	4621      	mov	r1, r4
 8015ec6:	4628      	mov	r0, r5
 8015ec8:	f7ff fb0e 	bl	80154e8 <json_serialize_string>
                if (written < 0) {
 8015ecc:	2800      	cmp	r0, #0
 8015ece:	dba0      	blt.n	8015e12 <json_serialize_to_buffer_r.constprop.0+0x26>
                if (buf != NULL) {
 8015ed0:	2c00      	cmp	r4, #0
 8015ed2:	f000 80ee 	beq.w	80160b2 <json_serialize_to_buffer_r.constprop.0+0x2c6>
    return sprintf(buf, "%s", string);
 8015ed6:	4b95      	ldr	r3, [pc, #596]	; (801612c <json_serialize_to_buffer_r.constprop.0+0x340>)
                written_total += written;
 8015ed8:	4483      	add	fp, r0
    return sprintf(buf, "%s", string);
 8015eda:	881b      	ldrh	r3, [r3, #0]
 8015edc:	5223      	strh	r3, [r4, r0]
                APPEND_STRING(":");
 8015ede:	f10b 0301 	add.w	r3, fp, #1
 8015ee2:	9305      	str	r3, [sp, #20]
                if (is_pretty) {
 8015ee4:	9b04      	ldr	r3, [sp, #16]
                    buf += written;
 8015ee6:	4420      	add	r0, r4
                APPEND_STRING(":");
 8015ee8:	1c44      	adds	r4, r0, #1
                if (is_pretty) {
 8015eea:	b13b      	cbz	r3, 8015efc <json_serialize_to_buffer_r.constprop.0+0x110>
    return sprintf(buf, "%s", string);
 8015eec:	4b90      	ldr	r3, [pc, #576]	; (8016130 <json_serialize_to_buffer_r.constprop.0+0x344>)
 8015eee:	881b      	ldrh	r3, [r3, #0]
 8015ef0:	f8a0 3001 	strh.w	r3, [r0, #1]
                    APPEND_STRING(" ");
 8015ef4:	1c84      	adds	r4, r0, #2
 8015ef6:	9b05      	ldr	r3, [sp, #20]
 8015ef8:	3301      	adds	r3, #1
 8015efa:	9305      	str	r3, [sp, #20]
    return json_object_getn_value(object, name, strlen(name));
 8015efc:	4628      	mov	r0, r5
 8015efe:	f7ea f989 	bl	8000214 <strlen>
    return object ? object->count : 0;
 8015f02:	f8d9 300c 	ldr.w	r3, [r9, #12]
    return json_object_getn_value(object, name, strlen(name));
 8015f06:	4606      	mov	r6, r0
    for (i = 0; i < json_object_get_count(object); i++) {
 8015f08:	2b00      	cmp	r3, #0
 8015f0a:	f000 813c 	beq.w	8016186 <json_serialize_to_buffer_r.constprop.0+0x39a>
 8015f0e:	f8d9 7004 	ldr.w	r7, [r9, #4]
 8015f12:	9407      	str	r4, [sp, #28]
 8015f14:	f04f 0800 	mov.w	r8, #0
 8015f18:	3f04      	subs	r7, #4
 8015f1a:	4644      	mov	r4, r8
 8015f1c:	469b      	mov	fp, r3
        name_length = strlen(object->names[i]);
 8015f1e:	f857 8f04 	ldr.w	r8, [r7, #4]!
 8015f22:	4640      	mov	r0, r8
 8015f24:	f7ea f976 	bl	8000214 <strlen>
 8015f28:	4684      	mov	ip, r0
        if (name_length != name_len) {
 8015f2a:	4566      	cmp	r6, ip
        if (strncmp(object->names[i], name, name_len) == 0) {
 8015f2c:	4640      	mov	r0, r8
 8015f2e:	4632      	mov	r2, r6
 8015f30:	ea4f 0884 	mov.w	r8, r4, lsl #2
 8015f34:	4629      	mov	r1, r5
    for (i = 0; i < json_object_get_count(object); i++) {
 8015f36:	f104 0401 	add.w	r4, r4, #1
        if (name_length != name_len) {
 8015f3a:	d104      	bne.n	8015f46 <json_serialize_to_buffer_r.constprop.0+0x15a>
        if (strncmp(object->names[i], name, name_len) == 0) {
 8015f3c:	f002 f9f6 	bl	801832c <strncmp>
 8015f40:	2800      	cmp	r0, #0
 8015f42:	f000 80ca 	beq.w	80160da <json_serialize_to_buffer_r.constprop.0+0x2ee>
    for (i = 0; i < json_object_get_count(object); i++) {
 8015f46:	455c      	cmp	r4, fp
 8015f48:	d1e9      	bne.n	8015f1e <json_serialize_to_buffer_r.constprop.0+0x132>
 8015f4a:	9c07      	ldr	r4, [sp, #28]
    return NULL;
 8015f4c:	2000      	movs	r0, #0
                written = json_serialize_to_buffer_r(temp_value, buf, level+1, is_pretty, num_buf);
 8015f4e:	9b03      	ldr	r3, [sp, #12]
 8015f50:	9300      	str	r3, [sp, #0]
 8015f52:	2201      	movs	r2, #1
 8015f54:	9b04      	ldr	r3, [sp, #16]
 8015f56:	4621      	mov	r1, r4
 8015f58:	f7ff fcd4 	bl	8015904 <json_serialize_to_buffer_r>
                if (written < 0) {
 8015f5c:	2800      	cmp	r0, #0
 8015f5e:	f6ff af58 	blt.w	8015e12 <json_serialize_to_buffer_r.constprop.0+0x26>
                if (i < (count - 1)) {
 8015f62:	9b06      	ldr	r3, [sp, #24]
 8015f64:	3b01      	subs	r3, #1
                if (buf != NULL) {
 8015f66:	2c00      	cmp	r4, #0
 8015f68:	f000 80ab 	beq.w	80160c2 <json_serialize_to_buffer_r.constprop.0+0x2d6>
                written_total += written;
 8015f6c:	9a05      	ldr	r2, [sp, #20]
                if (i < (count - 1)) {
 8015f6e:	459a      	cmp	sl, r3
                written_total += written;
 8015f70:	4402      	add	r2, r0
                    buf += written;
 8015f72:	4404      	add	r4, r0
                written_total += written;
 8015f74:	4693      	mov	fp, r2
                if (i < (count - 1)) {
 8015f76:	d205      	bcs.n	8015f84 <json_serialize_to_buffer_r.constprop.0+0x198>
    return sprintf(buf, "%s", string);
 8015f78:	4b6e      	ldr	r3, [pc, #440]	; (8016134 <json_serialize_to_buffer_r.constprop.0+0x348>)
 8015f7a:	881b      	ldrh	r3, [r3, #0]
 8015f7c:	f824 3b01 	strh.w	r3, [r4], #1
                    APPEND_STRING(",");
 8015f80:	f102 0b01 	add.w	fp, r2, #1
                if (is_pretty) {
 8015f84:	9b04      	ldr	r3, [sp, #16]
 8015f86:	2b00      	cmp	r3, #0
 8015f88:	f040 80ad 	bne.w	80160e6 <json_serialize_to_buffer_r.constprop.0+0x2fa>
            for (i = 0; i < count; i++) {
 8015f8c:	9b06      	ldr	r3, [sp, #24]
 8015f8e:	f10a 0a01 	add.w	sl, sl, #1
 8015f92:	4553      	cmp	r3, sl
 8015f94:	f240 80f9 	bls.w	801618a <json_serialize_to_buffer_r.constprop.0+0x39e>
 8015f98:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8015f9c:	e77f      	b.n	8015e9e <json_serialize_to_buffer_r.constprop.0+0xb2>
    return json_value_get_type(value) == JSONArray ? value->value.array : NULL;
 8015f9e:	f8d3 8008 	ldr.w	r8, [r3, #8]
    return array ? array->count : 0;
 8015fa2:	f1b8 0f00 	cmp.w	r8, #0
 8015fa6:	f000 80e1 	beq.w	801616c <json_serialize_to_buffer_r.constprop.0+0x380>
 8015faa:	f8d8 7008 	ldr.w	r7, [r8, #8]
    if (buf == NULL) {
 8015fae:	2900      	cmp	r1, #0
 8015fb0:	f000 80ca 	beq.w	8016148 <json_serialize_to_buffer_r.constprop.0+0x35c>
    return sprintf(buf, "%s", string);
 8015fb4:	4b60      	ldr	r3, [pc, #384]	; (8016138 <json_serialize_to_buffer_r.constprop.0+0x34c>)
 8015fb6:	468b      	mov	fp, r1
 8015fb8:	881b      	ldrh	r3, [r3, #0]
 8015fba:	f82b 3b01 	strh.w	r3, [fp], #1
            if (count > 0 && is_pretty) {
 8015fbe:	2f00      	cmp	r7, #0
 8015fc0:	f000 80da 	beq.w	8016178 <json_serialize_to_buffer_r.constprop.0+0x38c>
 8015fc4:	b955      	cbnz	r5, 8015fdc <json_serialize_to_buffer_r.constprop.0+0x1f0>
 8015fc6:	2401      	movs	r4, #1
 8015fc8:	e00f      	b.n	8015fea <json_serialize_to_buffer_r.constprop.0+0x1fe>
    return json_value_get_type(value) == JSONString ? value->value.string : NULL;
 8015fca:	6898      	ldr	r0, [r3, #8]
            if (string == NULL) {
 8015fcc:	2800      	cmp	r0, #0
 8015fce:	f43f af20 	beq.w	8015e12 <json_serialize_to_buffer_r.constprop.0+0x26>
            written = json_serialize_string(string, buf);
 8015fd2:	f7ff fa89 	bl	80154e8 <json_serialize_string>
            if (written < 0) {
 8015fd6:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 8015fda:	e71c      	b.n	8015e16 <json_serialize_to_buffer_r.constprop.0+0x2a>
    return sprintf(buf, "%s", string);
 8015fdc:	4b57      	ldr	r3, [pc, #348]	; (801613c <json_serialize_to_buffer_r.constprop.0+0x350>)
                APPEND_STRING("\n");
 8015fde:	2402      	movs	r4, #2
    return sprintf(buf, "%s", string);
 8015fe0:	881b      	ldrh	r3, [r3, #0]
 8015fe2:	f8ab 3000 	strh.w	r3, [fp]
                APPEND_STRING("\n");
 8015fe6:	eb01 0b04 	add.w	fp, r1, r4
            for (i = 0; i < count; i++) {
 8015fea:	462b      	mov	r3, r5
    return sprintf(buf, "%s", string);
 8015fec:	f8df 9138 	ldr.w	r9, [pc, #312]	; 8016128 <json_serialize_to_buffer_r.constprop.0+0x33c>
 8015ff0:	f8df a140 	ldr.w	sl, [pc, #320]	; 8016134 <json_serialize_to_buffer_r.constprop.0+0x348>
 8015ff4:	465d      	mov	r5, fp
 8015ff6:	2600      	movs	r6, #0
 8015ff8:	469b      	mov	fp, r3
                if (is_pretty) {
 8015ffa:	f1bb 0f00 	cmp.w	fp, #0
 8015ffe:	d133      	bne.n	8016068 <json_serialize_to_buffer_r.constprop.0+0x27c>
    if (array == NULL || index >= json_array_get_count(array)) {
 8016000:	f8d8 2008 	ldr.w	r2, [r8, #8]
 8016004:	42b2      	cmp	r2, r6
 8016006:	d93d      	bls.n	8016084 <json_serialize_to_buffer_r.constprop.0+0x298>
    return array->items[index];
 8016008:	f8d8 2004 	ldr.w	r2, [r8, #4]
 801600c:	f852 0026 	ldr.w	r0, [r2, r6, lsl #2]
                written = json_serialize_to_buffer_r(temp_value, buf, level+1, is_pretty, num_buf);
 8016010:	9b03      	ldr	r3, [sp, #12]
 8016012:	9300      	str	r3, [sp, #0]
 8016014:	2201      	movs	r2, #1
 8016016:	465b      	mov	r3, fp
 8016018:	4629      	mov	r1, r5
 801601a:	f7ff fc73 	bl	8015904 <json_serialize_to_buffer_r>
                if (written < 0) {
 801601e:	2800      	cmp	r0, #0
 8016020:	f6ff aef7 	blt.w	8015e12 <json_serialize_to_buffer_r.constprop.0+0x26>
                if (i < (count - 1)) {
 8016024:	1e7a      	subs	r2, r7, #1
                if (buf != NULL) {
 8016026:	b37d      	cbz	r5, 8016088 <json_serialize_to_buffer_r.constprop.0+0x29c>
                if (i < (count - 1)) {
 8016028:	4296      	cmp	r6, r2
                    buf += written;
 801602a:	4405      	add	r5, r0
                written_total += written;
 801602c:	4404      	add	r4, r0
                if (i < (count - 1)) {
 801602e:	d30d      	bcc.n	801604c <json_serialize_to_buffer_r.constprop.0+0x260>
                if (is_pretty) {
 8016030:	f1bb 0f00 	cmp.w	fp, #0
 8016034:	d112      	bne.n	801605c <json_serialize_to_buffer_r.constprop.0+0x270>
            for (i = 0; i < count; i++) {
 8016036:	3601      	adds	r6, #1
 8016038:	42b7      	cmp	r7, r6
 801603a:	d8de      	bhi.n	8015ffa <json_serialize_to_buffer_r.constprop.0+0x20e>
    if (buf == NULL) {
 801603c:	46ab      	mov	fp, r5
 801603e:	b11d      	cbz	r5, 8016048 <json_serialize_to_buffer_r.constprop.0+0x25c>
    return sprintf(buf, "%s", string);
 8016040:	4b3f      	ldr	r3, [pc, #252]	; (8016140 <json_serialize_to_buffer_r.constprop.0+0x354>)
 8016042:	881b      	ldrh	r3, [r3, #0]
 8016044:	f8ab 3000 	strh.w	r3, [fp]
            APPEND_STRING("]");
 8016048:	1c60      	adds	r0, r4, #1
            return written_total;
 801604a:	e6e4      	b.n	8015e16 <json_serialize_to_buffer_r.constprop.0+0x2a>
    return sprintf(buf, "%s", string);
 801604c:	f8ba 2000 	ldrh.w	r2, [sl]
 8016050:	f825 2b01 	strh.w	r2, [r5], #1
                    APPEND_STRING(",");
 8016054:	3401      	adds	r4, #1
                if (is_pretty) {
 8016056:	f1bb 0f00 	cmp.w	fp, #0
 801605a:	d0ec      	beq.n	8016036 <json_serialize_to_buffer_r.constprop.0+0x24a>
    return sprintf(buf, "%s", string);
 801605c:	4b37      	ldr	r3, [pc, #220]	; (801613c <json_serialize_to_buffer_r.constprop.0+0x350>)
 801605e:	881a      	ldrh	r2, [r3, #0]
 8016060:	f825 2b01 	strh.w	r2, [r5], #1
                    APPEND_STRING("\n");
 8016064:	3401      	adds	r4, #1
 8016066:	e7e6      	b.n	8016036 <json_serialize_to_buffer_r.constprop.0+0x24a>
    if (buf == NULL) {
 8016068:	b135      	cbz	r5, 8016078 <json_serialize_to_buffer_r.constprop.0+0x28c>
    return sprintf(buf, "%s", string);
 801606a:	f8d9 0000 	ldr.w	r0, [r9]
 801606e:	f899 2004 	ldrb.w	r2, [r9, #4]
 8016072:	6028      	str	r0, [r5, #0]
 8016074:	f805 2f04 	strb.w	r2, [r5, #4]!
    if (array == NULL || index >= json_array_get_count(array)) {
 8016078:	f8d8 2008 	ldr.w	r2, [r8, #8]
 801607c:	42b2      	cmp	r2, r6
                    APPEND_INDENT(level+1);
 801607e:	f104 0404 	add.w	r4, r4, #4
    if (array == NULL || index >= json_array_get_count(array)) {
 8016082:	d8c1      	bhi.n	8016008 <json_serialize_to_buffer_r.constprop.0+0x21c>
        return NULL;
 8016084:	2000      	movs	r0, #0
 8016086:	e7c3      	b.n	8016010 <json_serialize_to_buffer_r.constprop.0+0x224>
                if (i < (count - 1)) {
 8016088:	4296      	cmp	r6, r2
                written_total += written;
 801608a:	4404      	add	r4, r0
                if (i < (count - 1)) {
 801608c:	d303      	bcc.n	8016096 <json_serialize_to_buffer_r.constprop.0+0x2aa>
                if (is_pretty) {
 801608e:	f1bb 0f00 	cmp.w	fp, #0
 8016092:	d0d0      	beq.n	8016036 <json_serialize_to_buffer_r.constprop.0+0x24a>
 8016094:	e7e6      	b.n	8016064 <json_serialize_to_buffer_r.constprop.0+0x278>
                    APPEND_STRING(",");
 8016096:	3401      	adds	r4, #1
                if (is_pretty) {
 8016098:	f1bb 0f00 	cmp.w	fp, #0
 801609c:	d0cb      	beq.n	8016036 <json_serialize_to_buffer_r.constprop.0+0x24a>
 801609e:	e7e1      	b.n	8016064 <json_serialize_to_buffer_r.constprop.0+0x278>
    return sprintf(buf, "%s", string);
 80160a0:	4b26      	ldr	r3, [pc, #152]	; (801613c <json_serialize_to_buffer_r.constprop.0+0x350>)
 80160a2:	881b      	ldrh	r3, [r3, #0]
 80160a4:	8023      	strh	r3, [r4, #0]
                APPEND_STRING("\n");
 80160a6:	f8d9 300c 	ldr.w	r3, [r9, #12]
 80160aa:	1c8c      	adds	r4, r1, #2
 80160ac:	f04f 0b02 	mov.w	fp, #2
 80160b0:	e6f2      	b.n	8015e98 <json_serialize_to_buffer_r.constprop.0+0xac>
                written_total += written;
 80160b2:	4458      	add	r0, fp
                APPEND_STRING(":");
 80160b4:	1c43      	adds	r3, r0, #1
 80160b6:	9305      	str	r3, [sp, #20]
                if (is_pretty) {
 80160b8:	9b04      	ldr	r3, [sp, #16]
 80160ba:	2b00      	cmp	r3, #0
 80160bc:	f47f af1b 	bne.w	8015ef6 <json_serialize_to_buffer_r.constprop.0+0x10a>
 80160c0:	e71c      	b.n	8015efc <json_serialize_to_buffer_r.constprop.0+0x110>
                written_total += written;
 80160c2:	9a05      	ldr	r2, [sp, #20]
                if (i < (count - 1)) {
 80160c4:	459a      	cmp	sl, r3
                written_total += written;
 80160c6:	4402      	add	r2, r0
 80160c8:	4693      	mov	fp, r2
                if (i < (count - 1)) {
 80160ca:	d319      	bcc.n	8016100 <json_serialize_to_buffer_r.constprop.0+0x314>
                if (is_pretty) {
 80160cc:	9b04      	ldr	r3, [sp, #16]
 80160ce:	2b00      	cmp	r3, #0
 80160d0:	f43f af5c 	beq.w	8015f8c <json_serialize_to_buffer_r.constprop.0+0x1a0>
                    APPEND_STRING("\n");
 80160d4:	f10b 0b01 	add.w	fp, fp, #1
 80160d8:	e758      	b.n	8015f8c <json_serialize_to_buffer_r.constprop.0+0x1a0>
            return object->values[i];
 80160da:	f8d9 3008 	ldr.w	r3, [r9, #8]
 80160de:	9c07      	ldr	r4, [sp, #28]
 80160e0:	f853 0008 	ldr.w	r0, [r3, r8]
 80160e4:	e733      	b.n	8015f4e <json_serialize_to_buffer_r.constprop.0+0x162>
    return sprintf(buf, "%s", string);
 80160e6:	4b15      	ldr	r3, [pc, #84]	; (801613c <json_serialize_to_buffer_r.constprop.0+0x350>)
 80160e8:	881b      	ldrh	r3, [r3, #0]
 80160ea:	f824 3b01 	strh.w	r3, [r4], #1
                    APPEND_STRING("\n");
 80160ee:	e7f1      	b.n	80160d4 <json_serialize_to_buffer_r.constprop.0+0x2e8>
    if (buf == NULL) {
 80160f0:	b121      	cbz	r1, 80160fc <json_serialize_to_buffer_r.constprop.0+0x310>
    return sprintf(buf, "%s", string);
 80160f2:	4b14      	ldr	r3, [pc, #80]	; (8016144 <json_serialize_to_buffer_r.constprop.0+0x358>)
 80160f4:	6818      	ldr	r0, [r3, #0]
 80160f6:	889b      	ldrh	r3, [r3, #4]
 80160f8:	6008      	str	r0, [r1, #0]
 80160fa:	808b      	strh	r3, [r1, #4]
                APPEND_STRING("false");
 80160fc:	2005      	movs	r0, #5
 80160fe:	e68a      	b.n	8015e16 <json_serialize_to_buffer_r.constprop.0+0x2a>
                if (is_pretty) {
 8016100:	9b04      	ldr	r3, [sp, #16]
                    APPEND_STRING(",");
 8016102:	f10b 0b01 	add.w	fp, fp, #1
                if (is_pretty) {
 8016106:	2b00      	cmp	r3, #0
 8016108:	f43f af40 	beq.w	8015f8c <json_serialize_to_buffer_r.constprop.0+0x1a0>
 801610c:	e7e2      	b.n	80160d4 <json_serialize_to_buffer_r.constprop.0+0x2e8>
            if (count > 0 && is_pretty) {
 801610e:	b3ab      	cbz	r3, 801617c <json_serialize_to_buffer_r.constprop.0+0x390>
 8016110:	460c      	mov	r4, r1
 8016112:	f105 0b01 	add.w	fp, r5, #1
    if (object == NULL || index >= json_object_get_count(object)) {
 8016116:	e6bf      	b.n	8015e98 <json_serialize_to_buffer_r.constprop.0+0xac>
 8016118:	0801c40c 	.word	0x0801c40c
 801611c:	0801c414 	.word	0x0801c414
 8016120:	0801c3fc 	.word	0x0801c3fc
 8016124:	0801c3f4 	.word	0x0801c3f4
 8016128:	0801c3e4 	.word	0x0801c3e4
 801612c:	0801c41c 	.word	0x0801c41c
 8016130:	0801c420 	.word	0x0801c420
 8016134:	0801c3ec 	.word	0x0801c3ec
 8016138:	0801c3dc 	.word	0x0801c3dc
 801613c:	0801c3e0 	.word	0x0801c3e0
 8016140:	0801c3f0 	.word	0x0801c3f0
 8016144:	0801c404 	.word	0x0801c404
            if (count > 0 && is_pretty) {
 8016148:	b1df      	cbz	r7, 8016182 <json_serialize_to_buffer_r.constprop.0+0x396>
 801614a:	468b      	mov	fp, r1
 801614c:	1c6c      	adds	r4, r5, #1
 801614e:	e74c      	b.n	8015fea <json_serialize_to_buffer_r.constprop.0+0x1fe>
    if (buf == NULL) {
 8016150:	b1a1      	cbz	r1, 801617c <json_serialize_to_buffer_r.constprop.0+0x390>
    return sprintf(buf, "%s", string);
 8016152:	4b0f      	ldr	r3, [pc, #60]	; (8016190 <json_serialize_to_buffer_r.constprop.0+0x3a4>)
 8016154:	460c      	mov	r4, r1
 8016156:	881b      	ldrh	r3, [r3, #0]
 8016158:	f824 3b01 	strh.w	r3, [r4], #1
    return NULL;
 801615c:	f04f 0b01 	mov.w	fp, #1
    return sprintf(buf, "%s", string);
 8016160:	4b0c      	ldr	r3, [pc, #48]	; (8016194 <json_serialize_to_buffer_r.constprop.0+0x3a8>)
 8016162:	881b      	ldrh	r3, [r3, #0]
 8016164:	8023      	strh	r3, [r4, #0]
            APPEND_STRING("}");
 8016166:	f10b 0001 	add.w	r0, fp, #1
            return written_total;
 801616a:	e654      	b.n	8015e16 <json_serialize_to_buffer_r.constprop.0+0x2a>
    if (buf == NULL) {
 801616c:	b149      	cbz	r1, 8016182 <json_serialize_to_buffer_r.constprop.0+0x396>
    return sprintf(buf, "%s", string);
 801616e:	4b0a      	ldr	r3, [pc, #40]	; (8016198 <json_serialize_to_buffer_r.constprop.0+0x3ac>)
 8016170:	468b      	mov	fp, r1
 8016172:	881b      	ldrh	r3, [r3, #0]
 8016174:	f82b 3b01 	strh.w	r3, [fp], #1
        return NULL;
 8016178:	2401      	movs	r4, #1
 801617a:	e761      	b.n	8016040 <json_serialize_to_buffer_r.constprop.0+0x254>
            if (count > 0 && is_pretty) {
 801617c:	f04f 0b01 	mov.w	fp, #1
 8016180:	e7f1      	b.n	8016166 <json_serialize_to_buffer_r.constprop.0+0x37a>
        return (int)strlen(string);
 8016182:	2401      	movs	r4, #1
 8016184:	e760      	b.n	8016048 <json_serialize_to_buffer_r.constprop.0+0x25c>
    return NULL;
 8016186:	4618      	mov	r0, r3
 8016188:	e6e1      	b.n	8015f4e <json_serialize_to_buffer_r.constprop.0+0x162>
    if (buf == NULL) {
 801618a:	2c00      	cmp	r4, #0
 801618c:	d1e8      	bne.n	8016160 <json_serialize_to_buffer_r.constprop.0+0x374>
 801618e:	e7ea      	b.n	8016166 <json_serialize_to_buffer_r.constprop.0+0x37a>
 8016190:	0801c3f4 	.word	0x0801c3f4
 8016194:	0801c3f8 	.word	0x0801c3f8
 8016198:	0801c3dc 	.word	0x0801c3dc

0801619c <json_object_get_value>:
JSON_Value * json_object_get_value(const JSON_Object *object, const char *name) {
 801619c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if (object == NULL || name == NULL) {
 80161a0:	4605      	mov	r5, r0
 80161a2:	b310      	cbz	r0, 80161ea <json_object_get_value+0x4e>
 80161a4:	460c      	mov	r4, r1
        return NULL;
 80161a6:	4608      	mov	r0, r1
    if (object == NULL || name == NULL) {
 80161a8:	b301      	cbz	r1, 80161ec <json_object_get_value+0x50>
    return json_object_getn_value(object, name, strlen(name));
 80161aa:	f7ea f833 	bl	8000214 <strlen>
    return object ? object->count : 0;
 80161ae:	f8d5 800c 	ldr.w	r8, [r5, #12]
    return json_object_getn_value(object, name, strlen(name));
 80161b2:	4681      	mov	r9, r0
    for (i = 0; i < json_object_get_count(object); i++) {
 80161b4:	f1b8 0f00 	cmp.w	r8, #0
 80161b8:	d01e      	beq.n	80161f8 <json_object_get_value+0x5c>
 80161ba:	686b      	ldr	r3, [r5, #4]
 80161bc:	2600      	movs	r6, #0
 80161be:	f1a3 0a04 	sub.w	sl, r3, #4
        name_length = strlen(object->names[i]);
 80161c2:	f85a 7f04 	ldr.w	r7, [sl, #4]!
 80161c6:	4638      	mov	r0, r7
 80161c8:	f7ea f824 	bl	8000214 <strlen>
 80161cc:	4603      	mov	r3, r0
        if (name_length != name_len) {
 80161ce:	4599      	cmp	r9, r3
        if (strncmp(object->names[i], name, name_len) == 0) {
 80161d0:	4638      	mov	r0, r7
 80161d2:	464a      	mov	r2, r9
 80161d4:	ea4f 0786 	mov.w	r7, r6, lsl #2
 80161d8:	4621      	mov	r1, r4
    for (i = 0; i < json_object_get_count(object); i++) {
 80161da:	f106 0601 	add.w	r6, r6, #1
        if (name_length != name_len) {
 80161de:	d102      	bne.n	80161e6 <json_object_get_value+0x4a>
        if (strncmp(object->names[i], name, name_len) == 0) {
 80161e0:	f002 f8a4 	bl	801832c <strncmp>
 80161e4:	b120      	cbz	r0, 80161f0 <json_object_get_value+0x54>
    for (i = 0; i < json_object_get_count(object); i++) {
 80161e6:	4546      	cmp	r6, r8
 80161e8:	d1eb      	bne.n	80161c2 <json_object_get_value+0x26>
        return NULL;
 80161ea:	2000      	movs	r0, #0
}
 80161ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            return object->values[i];
 80161f0:	68ab      	ldr	r3, [r5, #8]
 80161f2:	59d8      	ldr	r0, [r3, r7]
}
 80161f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        return NULL;
 80161f8:	4640      	mov	r0, r8
 80161fa:	e7f7      	b.n	80161ec <json_object_get_value+0x50>

080161fc <json_object_dotget_value>:
JSON_Value * json_object_dotget_value(const JSON_Object *object, const char *name) {
 80161fc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016200:	460f      	mov	r7, r1
 8016202:	4604      	mov	r4, r0
    const char *dot_position = strchr(name, '.');
 8016204:	212e      	movs	r1, #46	; 0x2e
 8016206:	4638      	mov	r0, r7
 8016208:	f002 f883 	bl	8018312 <strchr>
    if (!dot_position) {
 801620c:	4605      	mov	r5, r0
 801620e:	b360      	cbz	r0, 801626a <json_object_dotget_value+0x6e>
    return object ? object->count : 0;
 8016210:	b31c      	cbz	r4, 801625a <json_object_dotget_value+0x5e>
 8016212:	f8d4 a00c 	ldr.w	sl, [r4, #12]
    object = json_value_get_object(json_object_getn_value(object, name, dot_position - name));
 8016216:	eba0 0807 	sub.w	r8, r0, r7
    for (i = 0; i < json_object_get_count(object); i++) {
 801621a:	2600      	movs	r6, #0
 801621c:	e000      	b.n	8016220 <json_object_dotget_value+0x24>
 801621e:	3601      	adds	r6, #1
 8016220:	45b2      	cmp	sl, r6
 8016222:	ea4f 0986 	mov.w	r9, r6, lsl #2
 8016226:	d04b      	beq.n	80162c0 <json_object_dotget_value+0xc4>
        name_length = strlen(object->names[i]);
 8016228:	6863      	ldr	r3, [r4, #4]
 801622a:	f853 b026 	ldr.w	fp, [r3, r6, lsl #2]
 801622e:	4658      	mov	r0, fp
 8016230:	f7e9 fff0 	bl	8000214 <strlen>
 8016234:	4603      	mov	r3, r0
        if (name_length != name_len) {
 8016236:	4598      	cmp	r8, r3
        if (strncmp(object->names[i], name, name_len) == 0) {
 8016238:	4642      	mov	r2, r8
 801623a:	4639      	mov	r1, r7
 801623c:	4658      	mov	r0, fp
        if (name_length != name_len) {
 801623e:	d1ee      	bne.n	801621e <json_object_dotget_value+0x22>
        if (strncmp(object->names[i], name, name_len) == 0) {
 8016240:	f002 f874 	bl	801832c <strncmp>
 8016244:	2800      	cmp	r0, #0
 8016246:	d1ea      	bne.n	801621e <json_object_dotget_value+0x22>
            return object->values[i];
 8016248:	68a3      	ldr	r3, [r4, #8]
 801624a:	f853 4009 	ldr.w	r4, [r3, r9]
    return value ? value->type : JSONError;
 801624e:	b124      	cbz	r4, 801625a <json_object_dotget_value+0x5e>
    return json_value_get_type(value) == JSONObject ? value->value.object : NULL;
 8016250:	6863      	ldr	r3, [r4, #4]
 8016252:	2b04      	cmp	r3, #4
 8016254:	bf0c      	ite	eq
 8016256:	68a4      	ldreq	r4, [r4, #8]
 8016258:	4604      	movne	r4, r0
    return json_object_dotget_value(object, dot_position + 1);
 801625a:	1c6f      	adds	r7, r5, #1
    const char *dot_position = strchr(name, '.');
 801625c:	212e      	movs	r1, #46	; 0x2e
 801625e:	4638      	mov	r0, r7
 8016260:	f002 f857 	bl	8018312 <strchr>
    if (!dot_position) {
 8016264:	4605      	mov	r5, r0
 8016266:	2800      	cmp	r0, #0
 8016268:	d1d2      	bne.n	8016210 <json_object_dotget_value+0x14>
    if (object == NULL || name == NULL) {
 801626a:	b304      	cbz	r4, 80162ae <json_object_dotget_value+0xb2>
    return json_object_getn_value(object, name, strlen(name));
 801626c:	4638      	mov	r0, r7
 801626e:	f7e9 ffd1 	bl	8000214 <strlen>
    return object ? object->count : 0;
 8016272:	f8d4 b00c 	ldr.w	fp, [r4, #12]
    return json_object_getn_value(object, name, strlen(name));
 8016276:	4681      	mov	r9, r0
    for (i = 0; i < json_object_get_count(object); i++) {
 8016278:	f1bb 0f00 	cmp.w	fp, #0
 801627c:	d017      	beq.n	80162ae <json_object_dotget_value+0xb2>
 801627e:	6863      	ldr	r3, [r4, #4]
 8016280:	462e      	mov	r6, r5
 8016282:	f1a3 0a04 	sub.w	sl, r3, #4
        name_length = strlen(object->names[i]);
 8016286:	f85a 8f04 	ldr.w	r8, [sl, #4]!
 801628a:	4640      	mov	r0, r8
 801628c:	f7e9 ffc2 	bl	8000214 <strlen>
 8016290:	4603      	mov	r3, r0
        if (name_length != name_len) {
 8016292:	4599      	cmp	r9, r3
        if (strncmp(object->names[i], name, name_len) == 0) {
 8016294:	4640      	mov	r0, r8
 8016296:	464a      	mov	r2, r9
 8016298:	ea4f 0886 	mov.w	r8, r6, lsl #2
 801629c:	4639      	mov	r1, r7
    for (i = 0; i < json_object_get_count(object); i++) {
 801629e:	f106 0601 	add.w	r6, r6, #1
        if (name_length != name_len) {
 80162a2:	d102      	bne.n	80162aa <json_object_dotget_value+0xae>
        if (strncmp(object->names[i], name, name_len) == 0) {
 80162a4:	f002 f842 	bl	801832c <strncmp>
 80162a8:	b120      	cbz	r0, 80162b4 <json_object_dotget_value+0xb8>
    for (i = 0; i < json_object_get_count(object); i++) {
 80162aa:	455e      	cmp	r6, fp
 80162ac:	d1eb      	bne.n	8016286 <json_object_dotget_value+0x8a>
}
 80162ae:	4628      	mov	r0, r5
 80162b0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
            return object->values[i];
 80162b4:	68a3      	ldr	r3, [r4, #8]
 80162b6:	f853 5008 	ldr.w	r5, [r3, r8]
}
 80162ba:	4628      	mov	r0, r5
 80162bc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return json_value_get_type(value) == JSONObject ? value->value.object : NULL;
 80162c0:	2400      	movs	r4, #0
 80162c2:	e7ca      	b.n	801625a <json_object_dotget_value+0x5e>

080162c4 <json_object_dotget_string>:
const char * json_object_dotget_string(const JSON_Object *object, const char *name) {
 80162c4:	b508      	push	{r3, lr}
    return json_value_get_string(json_object_dotget_value(object, name));
 80162c6:	f7ff ff99 	bl	80161fc <json_object_dotget_value>
    return value ? value->type : JSONError;
 80162ca:	b120      	cbz	r0, 80162d6 <json_object_dotget_string+0x12>
    return json_value_get_type(value) == JSONString ? value->value.string : NULL;
 80162cc:	6843      	ldr	r3, [r0, #4]
 80162ce:	2b02      	cmp	r3, #2
 80162d0:	bf0c      	ite	eq
 80162d2:	6880      	ldreq	r0, [r0, #8]
 80162d4:	2000      	movne	r0, #0
}
 80162d6:	bd08      	pop	{r3, pc}

080162d8 <json_object_dotget_number>:
double json_object_dotget_number(const JSON_Object *object, const char *name) {
 80162d8:	b508      	push	{r3, lr}
    return json_value_get_number(json_object_dotget_value(object, name));
 80162da:	f7ff ff8f 	bl	80161fc <json_object_dotget_value>
    return value ? value->type : JSONError;
 80162de:	b110      	cbz	r0, 80162e6 <json_object_dotget_number+0xe>
}

double json_value_get_number(const JSON_Value *value) {
    return json_value_get_type(value) == JSONNumber ? value->value.number : 0;
 80162e0:	6843      	ldr	r3, [r0, #4]
 80162e2:	2b03      	cmp	r3, #3
 80162e4:	d002      	beq.n	80162ec <json_object_dotget_number+0x14>
 80162e6:	ed9f 0b04 	vldr	d0, [pc, #16]	; 80162f8 <json_object_dotget_number+0x20>
}
 80162ea:	bd08      	pop	{r3, pc}
    return json_value_get_type(value) == JSONNumber ? value->value.number : 0;
 80162ec:	ed90 0b02 	vldr	d0, [r0, #8]
}
 80162f0:	bd08      	pop	{r3, pc}
 80162f2:	bf00      	nop
 80162f4:	f3af 8000 	nop.w
	...

08016300 <json_object_dotget_array>:
JSON_Array * json_object_dotget_array(const JSON_Object *object, const char *name) {
 8016300:	b508      	push	{r3, lr}
    return json_value_get_array(json_object_dotget_value(object, name));
 8016302:	f7ff ff7b 	bl	80161fc <json_object_dotget_value>
    return value ? value->type : JSONError;
 8016306:	b120      	cbz	r0, 8016312 <json_object_dotget_array+0x12>
    return json_value_get_type(value) == JSONArray ? value->value.array : NULL;
 8016308:	6843      	ldr	r3, [r0, #4]
 801630a:	2b05      	cmp	r3, #5
 801630c:	bf0c      	ite	eq
 801630e:	6880      	ldreq	r0, [r0, #8]
 8016310:	2000      	movne	r0, #0
}
 8016312:	bd08      	pop	{r3, pc}

08016314 <json_object_dotget_boolean>:
int json_object_dotget_boolean(const JSON_Object *object, const char *name) {
 8016314:	b508      	push	{r3, lr}
    return json_value_get_boolean(json_object_dotget_value(object, name));
 8016316:	f7ff ff71 	bl	80161fc <json_object_dotget_value>
    return value ? value->type : JSONError;
 801631a:	b120      	cbz	r0, 8016326 <json_object_dotget_boolean+0x12>
}

int json_value_get_boolean(const JSON_Value *value) {
    return json_value_get_type(value) == JSONBoolean ? value->value.boolean : -1;
 801631c:	6843      	ldr	r3, [r0, #4]
 801631e:	2b06      	cmp	r3, #6
 8016320:	d101      	bne.n	8016326 <json_object_dotget_boolean+0x12>
 8016322:	6880      	ldr	r0, [r0, #8]
}
 8016324:	bd08      	pop	{r3, pc}
    return json_value_get_type(value) == JSONBoolean ? value->value.boolean : -1;
 8016326:	f04f 30ff 	mov.w	r0, #4294967295
}
 801632a:	bd08      	pop	{r3, pc}

0801632c <json_object_dothas_value>:
int json_object_dothas_value (const JSON_Object *object, const char *name) {
 801632c:	b508      	push	{r3, lr}
    return json_object_dotget_value(object, name) != NULL;
 801632e:	f7ff ff65 	bl	80161fc <json_object_dotget_value>
}
 8016332:	3800      	subs	r0, #0
 8016334:	bf18      	it	ne
 8016336:	2001      	movne	r0, #1
 8016338:	bd08      	pop	{r3, pc}
 801633a:	bf00      	nop

0801633c <json_array_get_object>:
    if (array == NULL || index >= json_array_get_count(array)) {
 801633c:	b160      	cbz	r0, 8016358 <json_array_get_object+0x1c>
 801633e:	6883      	ldr	r3, [r0, #8]
 8016340:	4299      	cmp	r1, r3
 8016342:	d208      	bcs.n	8016356 <json_array_get_object+0x1a>
    return array->items[index];
 8016344:	6843      	ldr	r3, [r0, #4]
 8016346:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
    return value ? value->type : JSONError;
 801634a:	b128      	cbz	r0, 8016358 <json_array_get_object+0x1c>
    return json_value_get_type(value) == JSONObject ? value->value.object : NULL;
 801634c:	6843      	ldr	r3, [r0, #4]
 801634e:	2b04      	cmp	r3, #4
 8016350:	d101      	bne.n	8016356 <json_array_get_object+0x1a>
 8016352:	6880      	ldr	r0, [r0, #8]
 8016354:	4770      	bx	lr
 8016356:	2000      	movs	r0, #0
}
 8016358:	4770      	bx	lr
 801635a:	bf00      	nop

0801635c <json_array_get_count>:
    return array ? array->count : 0;
 801635c:	b100      	cbz	r0, 8016360 <json_array_get_count+0x4>
 801635e:	6880      	ldr	r0, [r0, #8]
}
 8016360:	4770      	bx	lr
 8016362:	bf00      	nop

08016364 <json_value_get_object>:
    return value ? value->type : JSONError;
 8016364:	b128      	cbz	r0, 8016372 <json_value_get_object+0xe>
    return json_value_get_type(value) == JSONObject ? value->value.object : NULL;
 8016366:	6843      	ldr	r3, [r0, #4]
 8016368:	2b04      	cmp	r3, #4
 801636a:	d101      	bne.n	8016370 <json_value_get_object+0xc>
 801636c:	6880      	ldr	r0, [r0, #8]
 801636e:	4770      	bx	lr
 8016370:	2000      	movs	r0, #0
}
 8016372:	4770      	bx	lr

08016374 <json_value_get_array>:
    return value ? value->type : JSONError;
 8016374:	b128      	cbz	r0, 8016382 <json_value_get_array+0xe>
    return json_value_get_type(value) == JSONArray ? value->value.array : NULL;
 8016376:	6843      	ldr	r3, [r0, #4]
 8016378:	2b05      	cmp	r3, #5
 801637a:	d101      	bne.n	8016380 <json_value_get_array+0xc>
 801637c:	6880      	ldr	r0, [r0, #8]
 801637e:	4770      	bx	lr
 8016380:	2000      	movs	r0, #0
}
 8016382:	4770      	bx	lr

08016384 <json_value_free>:

JSON_Value * json_value_get_parent (const JSON_Value *value) {
    return value ? value->parent : NULL;
}

void json_value_free(JSON_Value *value) {
 8016384:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    return value ? value->type : JSONError;
 8016388:	4604      	mov	r4, r0
 801638a:	2800      	cmp	r0, #0
 801638c:	d04e      	beq.n	801642c <json_value_free+0xa8>
 801638e:	6843      	ldr	r3, [r0, #4]
    switch (json_value_get_type(value)) {
 8016390:	2b04      	cmp	r3, #4
 8016392:	d009      	beq.n	80163a8 <json_value_free+0x24>
 8016394:	2b05      	cmp	r3, #5
 8016396:	d030      	beq.n	80163fa <json_value_free+0x76>
 8016398:	2b02      	cmp	r3, #2
 801639a:	4e25      	ldr	r6, [pc, #148]	; (8016430 <json_value_free+0xac>)
 801639c:	d025      	beq.n	80163ea <json_value_free+0x66>
            json_array_free(value->value.array);
            break;
        default:
            break;
    }
    parson_free(value);
 801639e:	6873      	ldr	r3, [r6, #4]
 80163a0:	4620      	mov	r0, r4
}
 80163a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    parson_free(value);
 80163a6:	4718      	bx	r3
            json_object_free(value->value.object);
 80163a8:	6887      	ldr	r7, [r0, #8]
    for (i = 0; i < object->count; i++) {
 80163aa:	4e21      	ldr	r6, [pc, #132]	; (8016430 <json_value_free+0xac>)
 80163ac:	68fb      	ldr	r3, [r7, #12]
 80163ae:	2500      	movs	r5, #0
 80163b0:	b16b      	cbz	r3, 80163ce <json_value_free+0x4a>
        parson_free(object->names[i]);
 80163b2:	687a      	ldr	r2, [r7, #4]
 80163b4:	6873      	ldr	r3, [r6, #4]
 80163b6:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 80163ba:	4798      	blx	r3
        json_value_free(object->values[i]);
 80163bc:	68bb      	ldr	r3, [r7, #8]
 80163be:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80163c2:	f7ff ffdf 	bl	8016384 <json_value_free>
    for (i = 0; i < object->count; i++) {
 80163c6:	68fb      	ldr	r3, [r7, #12]
 80163c8:	3501      	adds	r5, #1
 80163ca:	429d      	cmp	r5, r3
 80163cc:	d3f1      	bcc.n	80163b2 <json_value_free+0x2e>
    parson_free(object->names);
 80163ce:	6873      	ldr	r3, [r6, #4]
 80163d0:	6878      	ldr	r0, [r7, #4]
 80163d2:	4798      	blx	r3
    parson_free(object->values);
 80163d4:	6873      	ldr	r3, [r6, #4]
 80163d6:	68b8      	ldr	r0, [r7, #8]
 80163d8:	4798      	blx	r3
    parson_free(object);
 80163da:	6873      	ldr	r3, [r6, #4]
 80163dc:	4638      	mov	r0, r7
 80163de:	4798      	blx	r3
    parson_free(value);
 80163e0:	6873      	ldr	r3, [r6, #4]
 80163e2:	4620      	mov	r0, r4
}
 80163e4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    parson_free(value);
 80163e8:	4718      	bx	r3
            parson_free(value->value.string);
 80163ea:	6873      	ldr	r3, [r6, #4]
 80163ec:	6880      	ldr	r0, [r0, #8]
 80163ee:	4798      	blx	r3
    parson_free(value);
 80163f0:	6873      	ldr	r3, [r6, #4]
 80163f2:	4620      	mov	r0, r4
}
 80163f4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    parson_free(value);
 80163f8:	4718      	bx	r3
            json_array_free(value->value.array);
 80163fa:	6887      	ldr	r7, [r0, #8]
    for (i = 0; i < array->count; i++) {
 80163fc:	68bb      	ldr	r3, [r7, #8]
 80163fe:	b14b      	cbz	r3, 8016414 <json_value_free+0x90>
 8016400:	2500      	movs	r5, #0
        json_value_free(array->items[i]);
 8016402:	687b      	ldr	r3, [r7, #4]
 8016404:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8016408:	f7ff ffbc 	bl	8016384 <json_value_free>
    for (i = 0; i < array->count; i++) {
 801640c:	68bb      	ldr	r3, [r7, #8]
 801640e:	3501      	adds	r5, #1
 8016410:	429d      	cmp	r5, r3
 8016412:	d3f6      	bcc.n	8016402 <json_value_free+0x7e>
    parson_free(array->items);
 8016414:	4e06      	ldr	r6, [pc, #24]	; (8016430 <json_value_free+0xac>)
 8016416:	6878      	ldr	r0, [r7, #4]
 8016418:	6873      	ldr	r3, [r6, #4]
 801641a:	4798      	blx	r3
    parson_free(array);
 801641c:	6873      	ldr	r3, [r6, #4]
 801641e:	4638      	mov	r0, r7
 8016420:	4798      	blx	r3
    parson_free(value);
 8016422:	6873      	ldr	r3, [r6, #4]
 8016424:	4620      	mov	r0, r4
}
 8016426:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    parson_free(value);
 801642a:	4718      	bx	r3
 801642c:	4e00      	ldr	r6, [pc, #0]	; (8016430 <json_value_free+0xac>)
 801642e:	e7b6      	b.n	801639e <json_value_free+0x1a>
 8016430:	20000364 	.word	0x20000364

08016434 <json_object_remove_internal>:
static JSON_Status json_object_remove_internal(JSON_Object *object, const char *name, int free_value) {
 8016434:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016438:	b083      	sub	sp, #12
 801643a:	9200      	str	r2, [sp, #0]
    if (object == NULL || json_object_get_value(object, name) == NULL) {
 801643c:	b318      	cbz	r0, 8016486 <json_object_remove_internal+0x52>
    if (object == NULL || name == NULL) {
 801643e:	460e      	mov	r6, r1
 8016440:	b309      	cbz	r1, 8016486 <json_object_remove_internal+0x52>
    return json_object_getn_value(object, name, strlen(name));
 8016442:	4681      	mov	r9, r0
 8016444:	4608      	mov	r0, r1
 8016446:	f7e9 fee5 	bl	8000214 <strlen>
    return object ? object->count : 0;
 801644a:	f8d9 700c 	ldr.w	r7, [r9, #12]
    return json_object_getn_value(object, name, strlen(name));
 801644e:	4683      	mov	fp, r0
    for (i = 0; i < json_object_get_count(object); i++) {
 8016450:	b1cf      	cbz	r7, 8016486 <json_object_remove_internal+0x52>
 8016452:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8016456:	f1a3 0804 	sub.w	r8, r3, #4
        name_length = strlen(object->names[i]);
 801645a:	4644      	mov	r4, r8
    for (i = 0; i < json_object_get_count(object); i++) {
 801645c:	2500      	movs	r5, #0
        name_length = strlen(object->names[i]);
 801645e:	f854 af04 	ldr.w	sl, [r4, #4]!
 8016462:	4650      	mov	r0, sl
 8016464:	f7e9 fed6 	bl	8000214 <strlen>
 8016468:	4684      	mov	ip, r0
        if (name_length != name_len) {
 801646a:	45e3      	cmp	fp, ip
        if (strncmp(object->names[i], name, name_len) == 0) {
 801646c:	4650      	mov	r0, sl
 801646e:	465a      	mov	r2, fp
 8016470:	ea4f 0a85 	mov.w	sl, r5, lsl #2
 8016474:	4631      	mov	r1, r6
    for (i = 0; i < json_object_get_count(object); i++) {
 8016476:	f105 0501 	add.w	r5, r5, #1
        if (name_length != name_len) {
 801647a:	d102      	bne.n	8016482 <json_object_remove_internal+0x4e>
        if (strncmp(object->names[i], name, name_len) == 0) {
 801647c:	f001 ff56 	bl	801832c <strncmp>
 8016480:	b138      	cbz	r0, 8016492 <json_object_remove_internal+0x5e>
    for (i = 0; i < json_object_get_count(object); i++) {
 8016482:	42af      	cmp	r7, r5
 8016484:	d1eb      	bne.n	801645e <json_object_remove_internal+0x2a>
        return JSONFailure;
 8016486:	f04f 35ff 	mov.w	r5, #4294967295
}
 801648a:	4628      	mov	r0, r5
 801648c:	b003      	add	sp, #12
 801648e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            return object->values[i];
 8016492:	f8d9 2008 	ldr.w	r2, [r9, #8]
    if (object == NULL || json_object_get_value(object, name) == NULL) {
 8016496:	f852 300a 	ldr.w	r3, [r2, sl]
 801649a:	2b00      	cmp	r3, #0
 801649c:	d0f3      	beq.n	8016486 <json_object_remove_internal+0x52>
    for (i = 0; i < json_object_get_count(object); i++) {
 801649e:	4604      	mov	r4, r0
 80164a0:	e002      	b.n	80164a8 <json_object_remove_internal+0x74>
 80164a2:	3401      	adds	r4, #1
 80164a4:	42a7      	cmp	r7, r4
 80164a6:	d0ee      	beq.n	8016486 <json_object_remove_internal+0x52>
        if (strcmp(object->names[i], name) == 0) {
 80164a8:	f858 bf04 	ldr.w	fp, [r8, #4]!
 80164ac:	4631      	mov	r1, r6
 80164ae:	4658      	mov	r0, fp
 80164b0:	f7e9 fea6 	bl	8000200 <strcmp>
    for (i = 0; i < json_object_get_count(object); i++) {
 80164b4:	00a3      	lsls	r3, r4, #2
        if (strcmp(object->names[i], name) == 0) {
 80164b6:	4605      	mov	r5, r0
 80164b8:	2800      	cmp	r0, #0
 80164ba:	d1f2      	bne.n	80164a2 <json_object_remove_internal+0x6e>
            parson_free(object->names[i]);
 80164bc:	4a11      	ldr	r2, [pc, #68]	; (8016504 <json_object_remove_internal+0xd0>)
 80164be:	9301      	str	r3, [sp, #4]
 80164c0:	6852      	ldr	r2, [r2, #4]
 80164c2:	4658      	mov	r0, fp
 80164c4:	4790      	blx	r2
            if (free_value) {
 80164c6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80164ca:	b99a      	cbnz	r2, 80164f4 <json_object_remove_internal+0xc0>
    last_item_index = json_object_get_count(object) - 1;
 80164cc:	3f01      	subs	r7, #1
            if (i != last_item_index) { /* Replace key value pair with one from the end */
 80164ce:	42a7      	cmp	r7, r4
 80164d0:	d007      	beq.n	80164e2 <json_object_remove_internal+0xae>
                object->values[i] = object->values[last_item_index];
 80164d2:	e9d9 1201 	ldrd	r1, r2, [r9, #4]
                object->names[i] = object->names[last_item_index];
 80164d6:	f851 4027 	ldr.w	r4, [r1, r7, lsl #2]
                object->values[i] = object->values[last_item_index];
 80164da:	f852 0027 	ldr.w	r0, [r2, r7, lsl #2]
                object->names[i] = object->names[last_item_index];
 80164de:	50cc      	str	r4, [r1, r3]
                object->values[i] = object->values[last_item_index];
 80164e0:	50d0      	str	r0, [r2, r3]
            object->count -= 1;
 80164e2:	f8d9 300c 	ldr.w	r3, [r9, #12]
}
 80164e6:	4628      	mov	r0, r5
            object->count -= 1;
 80164e8:	3b01      	subs	r3, #1
 80164ea:	f8c9 300c 	str.w	r3, [r9, #12]
}
 80164ee:	b003      	add	sp, #12
 80164f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                json_value_free(object->values[i]);
 80164f4:	f8d9 2008 	ldr.w	r2, [r9, #8]
 80164f8:	9300      	str	r3, [sp, #0]
 80164fa:	58d0      	ldr	r0, [r2, r3]
 80164fc:	f7ff ff42 	bl	8016384 <json_value_free>
 8016500:	9b00      	ldr	r3, [sp, #0]
 8016502:	e7e3      	b.n	80164cc <json_object_remove_internal+0x98>
 8016504:	20000364 	.word	0x20000364

08016508 <parse_value.part.0>:
static JSON_Value * parse_value(const char **string, size_t nesting) {
 8016508:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    SKIP_WHITESPACES(string);
 801650c:	6806      	ldr	r6, [r0, #0]
 801650e:	4da2      	ldr	r5, [pc, #648]	; (8016798 <parse_value.part.0+0x290>)
 8016510:	7833      	ldrb	r3, [r6, #0]
 8016512:	5cea      	ldrb	r2, [r5, r3]
 8016514:	0712      	lsls	r2, r2, #28
static JSON_Value * parse_value(const char **string, size_t nesting) {
 8016516:	b083      	sub	sp, #12
 8016518:	4604      	mov	r4, r0
 801651a:	460f      	mov	r7, r1
    SKIP_WHITESPACES(string);
 801651c:	d505      	bpl.n	801652a <parse_value.part.0+0x22>
 801651e:	3601      	adds	r6, #1
 8016520:	6026      	str	r6, [r4, #0]
 8016522:	7833      	ldrb	r3, [r6, #0]
 8016524:	5cea      	ldrb	r2, [r5, r3]
 8016526:	0710      	lsls	r0, r2, #28
 8016528:	d4f9      	bmi.n	801651e <parse_value.part.0+0x16>
    switch (**string) {
 801652a:	2b7b      	cmp	r3, #123	; 0x7b
 801652c:	d82d      	bhi.n	801658a <parse_value.part.0+0x82>
 801652e:	2b5a      	cmp	r3, #90	; 0x5a
 8016530:	d930      	bls.n	8016594 <parse_value.part.0+0x8c>
 8016532:	3b5b      	subs	r3, #91	; 0x5b
 8016534:	2b20      	cmp	r3, #32
 8016536:	d828      	bhi.n	801658a <parse_value.part.0+0x82>
 8016538:	e8df f013 	tbh	[pc, r3, lsl #1]
 801653c:	00270136 	.word	0x00270136
 8016540:	00270027 	.word	0x00270027
 8016544:	00270027 	.word	0x00270027
 8016548:	00270027 	.word	0x00270027
 801654c:	00270027 	.word	0x00270027
 8016550:	01a00027 	.word	0x01a00027
 8016554:	00270027 	.word	0x00270027
 8016558:	00270027 	.word	0x00270027
 801655c:	00270027 	.word	0x00270027
 8016560:	01c00027 	.word	0x01c00027
 8016564:	00270027 	.word	0x00270027
 8016568:	00270027 	.word	0x00270027
 801656c:	01a00027 	.word	0x01a00027
 8016570:	00270027 	.word	0x00270027
 8016574:	00270027 	.word	0x00270027
 8016578:	00270027 	.word	0x00270027
 801657c:	00a1      	.short	0x00a1
            json_value_free(new_array_value);
 801657e:	4638      	mov	r0, r7
 8016580:	f7ff ff00 	bl	8016384 <json_value_free>
            json_value_free(output_value);
 8016584:	4630      	mov	r0, r6
 8016586:	f7ff fefd 	bl	8016384 <json_value_free>
            return NULL;
 801658a:	2600      	movs	r6, #0
}
 801658c:	4630      	mov	r0, r6
 801658e:	b003      	add	sp, #12
 8016590:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    switch (**string) {
 8016594:	2b2d      	cmp	r3, #45	; 0x2d
 8016596:	d003      	beq.n	80165a0 <parse_value.part.0+0x98>
 8016598:	d959      	bls.n	801664e <parse_value.part.0+0x146>
 801659a:	3b30      	subs	r3, #48	; 0x30
 801659c:	2b09      	cmp	r3, #9
 801659e:	d8f4      	bhi.n	801658a <parse_value.part.0+0x82>
    errno = 0;
 80165a0:	f000 fe96 	bl	80172d0 <__errno>
 80165a4:	2300      	movs	r3, #0
 80165a6:	6003      	str	r3, [r0, #0]
    number = strtod(*string, &end);
 80165a8:	a901      	add	r1, sp, #4
 80165aa:	6820      	ldr	r0, [r4, #0]
 80165ac:	f002 fd0a 	bl	8018fc4 <strtod>
 80165b0:	ec59 8b10 	vmov	r8, r9, d0
    if (errno || !is_decimal(*string, end - *string)) {
 80165b4:	f000 fe8c 	bl	80172d0 <__errno>
 80165b8:	6803      	ldr	r3, [r0, #0]
 80165ba:	2b00      	cmp	r3, #0
 80165bc:	d1e5      	bne.n	801658a <parse_value.part.0+0x82>
 80165be:	6826      	ldr	r6, [r4, #0]
 80165c0:	f8dd a004 	ldr.w	sl, [sp, #4]
 80165c4:	ebaa 0306 	sub.w	r3, sl, r6
    if (length > 1 && string[0] == '0' && string[1] != '.') {
 80165c8:	2b01      	cmp	r3, #1
 80165ca:	d909      	bls.n	80165e0 <parse_value.part.0+0xd8>
 80165cc:	7832      	ldrb	r2, [r6, #0]
 80165ce:	2a30      	cmp	r2, #48	; 0x30
 80165d0:	f000 81b4 	beq.w	801693c <parse_value.part.0+0x434>
    if (length > 2 && !strncmp(string, "-0", 2) && string[2] != '.') {
 80165d4:	2b02      	cmp	r3, #2
 80165d6:	d003      	beq.n	80165e0 <parse_value.part.0+0xd8>
 80165d8:	7833      	ldrb	r3, [r6, #0]
 80165da:	2b2d      	cmp	r3, #45	; 0x2d
 80165dc:	f000 81a5 	beq.w	801692a <parse_value.part.0+0x422>
        if (strchr("xX", string[length])) {
 80165e0:	4f6e      	ldr	r7, [pc, #440]	; (801679c <parse_value.part.0+0x294>)
 80165e2:	4655      	mov	r5, sl
 80165e4:	e005      	b.n	80165f2 <parse_value.part.0+0xea>
 80165e6:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80165ea:	f001 fe92 	bl	8018312 <strchr>
 80165ee:	2800      	cmp	r0, #0
 80165f0:	d1cb      	bne.n	801658a <parse_value.part.0+0x82>
    while (length--) {
 80165f2:	42ae      	cmp	r6, r5
        if (strchr("xX", string[length])) {
 80165f4:	4638      	mov	r0, r7
    while (length--) {
 80165f6:	d1f6      	bne.n	80165e6 <parse_value.part.0+0xde>
    *string = end;
 80165f8:	f8c4 a000 	str.w	sl, [r4]
    return value;
}

JSON_Value * json_value_init_number(double number) {
    JSON_Value *new_value = NULL;
    if (IS_NUMBER_INVALID(number)) {
 80165fc:	4642      	mov	r2, r8
 80165fe:	464b      	mov	r3, r9
 8016600:	4640      	mov	r0, r8
 8016602:	4649      	mov	r1, r9
 8016604:	f7ea faba 	bl	8000b7c <__aeabi_dcmpun>
 8016608:	2800      	cmp	r0, #0
 801660a:	d1be      	bne.n	801658a <parse_value.part.0+0x82>
 801660c:	f029 4500 	bic.w	r5, r9, #2147483648	; 0x80000000
 8016610:	4b63      	ldr	r3, [pc, #396]	; (80167a0 <parse_value.part.0+0x298>)
 8016612:	4640      	mov	r0, r8
 8016614:	4629      	mov	r1, r5
 8016616:	f04f 32ff 	mov.w	r2, #4294967295
 801661a:	f7ea faaf 	bl	8000b7c <__aeabi_dcmpun>
 801661e:	b940      	cbnz	r0, 8016632 <parse_value.part.0+0x12a>
 8016620:	4b5f      	ldr	r3, [pc, #380]	; (80167a0 <parse_value.part.0+0x298>)
 8016622:	4640      	mov	r0, r8
 8016624:	4629      	mov	r1, r5
 8016626:	f04f 32ff 	mov.w	r2, #4294967295
 801662a:	f7ea fa89 	bl	8000b40 <__aeabi_dcmple>
 801662e:	2800      	cmp	r0, #0
 8016630:	d0ab      	beq.n	801658a <parse_value.part.0+0x82>
        return NULL;
    }
    new_value = (JSON_Value*)parson_malloc(sizeof(JSON_Value));
 8016632:	4b5c      	ldr	r3, [pc, #368]	; (80167a4 <parse_value.part.0+0x29c>)
 8016634:	2010      	movs	r0, #16
 8016636:	681b      	ldr	r3, [r3, #0]
 8016638:	4798      	blx	r3
    if (new_value == NULL) {
 801663a:	4606      	mov	r6, r0
 801663c:	2800      	cmp	r0, #0
 801663e:	d0a5      	beq.n	801658c <parse_value.part.0+0x84>
        return NULL;
    }
    new_value->parent = NULL;
 8016640:	2200      	movs	r2, #0
    new_value->type = JSONNumber;
 8016642:	2303      	movs	r3, #3
    new_value->value.number = number;
 8016644:	e9c0 8902 	strd	r8, r9, [r0, #8]
    new_value->type = JSONNumber;
 8016648:	e9c0 2300 	strd	r2, r3, [r0]
            return parse_number_value(string);
 801664c:	e79e      	b.n	801658c <parse_value.part.0+0x84>
    switch (**string) {
 801664e:	2b22      	cmp	r3, #34	; 0x22
 8016650:	d19b      	bne.n	801658a <parse_value.part.0+0x82>
    char *new_string = get_quoted_string(string);
 8016652:	4620      	mov	r0, r4
 8016654:	f7fe fe38 	bl	80152c8 <get_quoted_string>
    if (new_string == NULL) {
 8016658:	4604      	mov	r4, r0
 801665a:	2800      	cmp	r0, #0
 801665c:	d095      	beq.n	801658a <parse_value.part.0+0x82>
    JSON_Value *new_value = (JSON_Value*)parson_malloc(sizeof(JSON_Value));
 801665e:	4d51      	ldr	r5, [pc, #324]	; (80167a4 <parse_value.part.0+0x29c>)
 8016660:	2010      	movs	r0, #16
 8016662:	682b      	ldr	r3, [r5, #0]
 8016664:	4798      	blx	r3
    if (!new_value) {
 8016666:	4606      	mov	r6, r0
 8016668:	2800      	cmp	r0, #0
 801666a:	f000 8184 	beq.w	8016976 <parse_value.part.0+0x46e>
    new_value->parent = NULL;
 801666e:	2200      	movs	r2, #0
    new_value->type = JSONString;
 8016670:	2302      	movs	r3, #2
 8016672:	e880 001c 	stmia.w	r0, {r2, r3, r4}
}
 8016676:	4630      	mov	r0, r6
 8016678:	b003      	add	sp, #12
 801667a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    JSON_Value *new_value = (JSON_Value*)parson_malloc(sizeof(JSON_Value));
 801667e:	f8df b124 	ldr.w	fp, [pc, #292]	; 80167a4 <parse_value.part.0+0x29c>
 8016682:	2010      	movs	r0, #16
 8016684:	f8db 3000 	ldr.w	r3, [fp]
 8016688:	4798      	blx	r3
    if (!new_value) {
 801668a:	4606      	mov	r6, r0
 801668c:	2800      	cmp	r0, #0
 801668e:	f43f af7c 	beq.w	801658a <parse_value.part.0+0x82>
    new_value->type = JSONObject;
 8016692:	2304      	movs	r3, #4
 8016694:	f04f 0800 	mov.w	r8, #0
 8016698:	e9c0 8300 	strd	r8, r3, [r0]
    JSON_Object *new_obj = (JSON_Object*)parson_malloc(sizeof(JSON_Object));
 801669c:	f8db 3000 	ldr.w	r3, [fp]
 80166a0:	2014      	movs	r0, #20
 80166a2:	4798      	blx	r3
    if (new_obj == NULL) {
 80166a4:	4681      	mov	r9, r0
 80166a6:	2800      	cmp	r0, #0
 80166a8:	f000 815d 	beq.w	8016966 <parse_value.part.0+0x45e>
    new_obj->names = (char**)NULL;
 80166ac:	e9c0 6800 	strd	r6, r8, [r0]
    new_obj->count = 0;
 80166b0:	e9c0 8803 	strd	r8, r8, [r0, #12]
    new_obj->values = (JSON_Value**)NULL;
 80166b4:	f8c0 8008 	str.w	r8, [r0, #8]
    new_value->value.object = json_object_init(new_value);
 80166b8:	60b0      	str	r0, [r6, #8]
    if (**string != '{') {
 80166ba:	6822      	ldr	r2, [r4, #0]
 80166bc:	7813      	ldrb	r3, [r2, #0]
 80166be:	2b7b      	cmp	r3, #123	; 0x7b
 80166c0:	f040 812e 	bne.w	8016920 <parse_value.part.0+0x418>
    SKIP_CHAR(string);
 80166c4:	1c53      	adds	r3, r2, #1
    return json_value_get_type(value) == JSONObject ? value->value.object : NULL;
 80166c6:	6870      	ldr	r0, [r6, #4]
    SKIP_CHAR(string);
 80166c8:	6023      	str	r3, [r4, #0]
    SKIP_WHITESPACES(string);
 80166ca:	7852      	ldrb	r2, [r2, #1]
 80166cc:	5ca9      	ldrb	r1, [r5, r2]
    return json_value_get_type(value) == JSONObject ? value->value.object : NULL;
 80166ce:	2804      	cmp	r0, #4
 80166d0:	bf18      	it	ne
 80166d2:	f04f 0900 	movne.w	r9, #0
    SKIP_WHITESPACES(string);
 80166d6:	0709      	lsls	r1, r1, #28
 80166d8:	d505      	bpl.n	80166e6 <parse_value.part.0+0x1de>
 80166da:	3301      	adds	r3, #1
 80166dc:	6023      	str	r3, [r4, #0]
 80166de:	781a      	ldrb	r2, [r3, #0]
 80166e0:	5ca9      	ldrb	r1, [r5, r2]
 80166e2:	0708      	lsls	r0, r1, #28
 80166e4:	d4f9      	bmi.n	80166da <parse_value.part.0+0x1d2>
    if (**string == '}') { /* empty object */
 80166e6:	2a7d      	cmp	r2, #125	; 0x7d
 80166e8:	f000 8117 	beq.w	801691a <parse_value.part.0+0x412>
            return parse_object_value(string, nesting + 1);
 80166ec:	3701      	adds	r7, #1
    while (**string != '\0') {
 80166ee:	2a00      	cmp	r2, #0
 80166f0:	f43f af48 	beq.w	8016584 <parse_value.part.0+0x7c>
        new_key = get_quoted_string(string);
 80166f4:	4620      	mov	r0, r4
 80166f6:	f7fe fde7 	bl	80152c8 <get_quoted_string>
        if (new_key == NULL) {
 80166fa:	4680      	mov	r8, r0
 80166fc:	2800      	cmp	r0, #0
 80166fe:	f000 810f 	beq.w	8016920 <parse_value.part.0+0x418>
        SKIP_WHITESPACES(string);
 8016702:	6823      	ldr	r3, [r4, #0]
 8016704:	781a      	ldrb	r2, [r3, #0]
 8016706:	5ca9      	ldrb	r1, [r5, r2]
 8016708:	0709      	lsls	r1, r1, #28
 801670a:	d505      	bpl.n	8016718 <parse_value.part.0+0x210>
 801670c:	3301      	adds	r3, #1
 801670e:	6023      	str	r3, [r4, #0]
 8016710:	781a      	ldrb	r2, [r3, #0]
 8016712:	5ca9      	ldrb	r1, [r5, r2]
 8016714:	0708      	lsls	r0, r1, #28
 8016716:	d4f9      	bmi.n	801670c <parse_value.part.0+0x204>
        if (**string != ':') {
 8016718:	2a3a      	cmp	r2, #58	; 0x3a
 801671a:	f040 80e6 	bne.w	80168ea <parse_value.part.0+0x3e2>
        SKIP_CHAR(string);
 801671e:	3301      	adds	r3, #1
 8016720:	6023      	str	r3, [r4, #0]
    if (nesting > MAX_NESTING) {
 8016722:	f640 0301 	movw	r3, #2049	; 0x801
 8016726:	429f      	cmp	r7, r3
 8016728:	f000 80df 	beq.w	80168ea <parse_value.part.0+0x3e2>
 801672c:	4639      	mov	r1, r7
 801672e:	4620      	mov	r0, r4
 8016730:	f7ff feea 	bl	8016508 <parse_value.part.0>
        if (new_value == NULL) {
 8016734:	4682      	mov	sl, r0
 8016736:	2800      	cmp	r0, #0
 8016738:	f000 80d7 	beq.w	80168ea <parse_value.part.0+0x3e2>
    return json_object_addn(object, name, strlen(name), value);
 801673c:	4640      	mov	r0, r8
 801673e:	f7e9 fd69 	bl	8000214 <strlen>
 8016742:	4653      	mov	r3, sl
 8016744:	4602      	mov	r2, r0
 8016746:	4641      	mov	r1, r8
 8016748:	4648      	mov	r0, r9
 801674a:	f7fe fcb5 	bl	80150b8 <json_object_addn>
        if (json_object_add(output_object, new_key, new_value) == JSONFailure) {
 801674e:	3001      	adds	r0, #1
 8016750:	f000 813b 	beq.w	80169ca <parse_value.part.0+0x4c2>
        parson_free(new_key);
 8016754:	f8db 3004 	ldr.w	r3, [fp, #4]
 8016758:	4640      	mov	r0, r8
 801675a:	4798      	blx	r3
        SKIP_WHITESPACES(string);
 801675c:	6823      	ldr	r3, [r4, #0]
 801675e:	781a      	ldrb	r2, [r3, #0]
 8016760:	5ca9      	ldrb	r1, [r5, r2]
 8016762:	0709      	lsls	r1, r1, #28
 8016764:	d505      	bpl.n	8016772 <parse_value.part.0+0x26a>
 8016766:	3301      	adds	r3, #1
 8016768:	6023      	str	r3, [r4, #0]
 801676a:	781a      	ldrb	r2, [r3, #0]
 801676c:	5ca9      	ldrb	r1, [r5, r2]
 801676e:	0708      	lsls	r0, r1, #28
 8016770:	d4f9      	bmi.n	8016766 <parse_value.part.0+0x25e>
        if (**string != ',') {
 8016772:	2a2c      	cmp	r2, #44	; 0x2c
 8016774:	f040 80c2 	bne.w	80168fc <parse_value.part.0+0x3f4>
        SKIP_CHAR(string);
 8016778:	1c5a      	adds	r2, r3, #1
 801677a:	6022      	str	r2, [r4, #0]
        SKIP_WHITESPACES(string);
 801677c:	785b      	ldrb	r3, [r3, #1]
 801677e:	5ce9      	ldrb	r1, [r5, r3]
 8016780:	0709      	lsls	r1, r1, #28
 8016782:	d505      	bpl.n	8016790 <parse_value.part.0+0x288>
 8016784:	3201      	adds	r2, #1
 8016786:	6022      	str	r2, [r4, #0]
 8016788:	7813      	ldrb	r3, [r2, #0]
 801678a:	5ce9      	ldrb	r1, [r5, r3]
 801678c:	0708      	lsls	r0, r1, #28
 801678e:	d4f9      	bmi.n	8016784 <parse_value.part.0+0x27c>
    while (**string != '\0') {
 8016790:	2b00      	cmp	r3, #0
 8016792:	d1af      	bne.n	80166f4 <parse_value.part.0+0x1ec>
 8016794:	e6f6      	b.n	8016584 <parse_value.part.0+0x7c>
 8016796:	bf00      	nop
 8016798:	0801c437 	.word	0x0801c437
 801679c:	0801c424 	.word	0x0801c424
 80167a0:	7fefffff 	.word	0x7fefffff
 80167a4:	20000364 	.word	0x20000364
    JSON_Value *new_value = (JSON_Value*)parson_malloc(sizeof(JSON_Value));
 80167a8:	f8df b250 	ldr.w	fp, [pc, #592]	; 80169fc <parse_value.part.0+0x4f4>
 80167ac:	2010      	movs	r0, #16
 80167ae:	f8db 3000 	ldr.w	r3, [fp]
 80167b2:	4798      	blx	r3
    if (!new_value) {
 80167b4:	4606      	mov	r6, r0
 80167b6:	2800      	cmp	r0, #0
 80167b8:	f43f aee7 	beq.w	801658a <parse_value.part.0+0x82>
    new_value->type = JSONArray;
 80167bc:	2305      	movs	r3, #5
 80167be:	f04f 0800 	mov.w	r8, #0
 80167c2:	e9c0 8300 	strd	r8, r3, [r0]
    JSON_Array *new_array = (JSON_Array*)parson_malloc(sizeof(JSON_Array));
 80167c6:	f8db 3000 	ldr.w	r3, [fp]
 80167ca:	2010      	movs	r0, #16
 80167cc:	4798      	blx	r3
    if (new_array == NULL) {
 80167ce:	4681      	mov	r9, r0
 80167d0:	2800      	cmp	r0, #0
 80167d2:	f000 80c8 	beq.w	8016966 <parse_value.part.0+0x45e>
    new_array->items = (JSON_Value**)NULL;
 80167d6:	e9c0 6800 	strd	r6, r8, [r0]
    new_array->count = 0;
 80167da:	e9c0 8802 	strd	r8, r8, [r0, #8]
    new_value->value.array = json_array_init(new_value);
 80167de:	60b0      	str	r0, [r6, #8]
    if (**string != '[') {
 80167e0:	6822      	ldr	r2, [r4, #0]
 80167e2:	7813      	ldrb	r3, [r2, #0]
 80167e4:	2b5b      	cmp	r3, #91	; 0x5b
 80167e6:	f040 809b 	bne.w	8016920 <parse_value.part.0+0x418>
    SKIP_CHAR(string);
 80167ea:	1c53      	adds	r3, r2, #1
    return json_value_get_type(value) == JSONArray ? value->value.array : NULL;
 80167ec:	6870      	ldr	r0, [r6, #4]
    SKIP_CHAR(string);
 80167ee:	6023      	str	r3, [r4, #0]
    SKIP_WHITESPACES(string);
 80167f0:	7852      	ldrb	r2, [r2, #1]
 80167f2:	5ca9      	ldrb	r1, [r5, r2]
    return json_value_get_type(value) == JSONArray ? value->value.array : NULL;
 80167f4:	2805      	cmp	r0, #5
 80167f6:	bf18      	it	ne
 80167f8:	f04f 0900 	movne.w	r9, #0
    SKIP_WHITESPACES(string);
 80167fc:	0709      	lsls	r1, r1, #28
 80167fe:	d505      	bpl.n	801680c <parse_value.part.0+0x304>
 8016800:	3301      	adds	r3, #1
 8016802:	6023      	str	r3, [r4, #0]
 8016804:	781a      	ldrb	r2, [r3, #0]
 8016806:	5ca9      	ldrb	r1, [r5, r2]
 8016808:	0708      	lsls	r0, r1, #28
 801680a:	d4f9      	bmi.n	8016800 <parse_value.part.0+0x2f8>
    if (**string == ']') { /* empty array */
 801680c:	2a5d      	cmp	r2, #93	; 0x5d
 801680e:	f000 8084 	beq.w	801691a <parse_value.part.0+0x412>
    while (**string != '\0') {
 8016812:	2a00      	cmp	r2, #0
 8016814:	f43f aeb6 	beq.w	8016584 <parse_value.part.0+0x7c>
    if (nesting > MAX_NESTING) {
 8016818:	f5b7 6f00 	cmp.w	r7, #2048	; 0x800
 801681c:	f107 0801 	add.w	r8, r7, #1
 8016820:	f43f aeb0 	beq.w	8016584 <parse_value.part.0+0x7c>
 8016824:	4641      	mov	r1, r8
 8016826:	4620      	mov	r0, r4
 8016828:	f7ff fe6e 	bl	8016508 <parse_value.part.0>
        if (new_array_value == NULL) {
 801682c:	4607      	mov	r7, r0
 801682e:	2800      	cmp	r0, #0
 8016830:	f43f aea8 	beq.w	8016584 <parse_value.part.0+0x7c>
        if (json_array_add(output_array, new_array_value) == JSONFailure) {
 8016834:	4601      	mov	r1, r0
 8016836:	4648      	mov	r0, r9
 8016838:	f7fe fca2 	bl	8015180 <json_array_add>
 801683c:	3001      	adds	r0, #1
 801683e:	f43f ae9e 	beq.w	801657e <parse_value.part.0+0x76>
        SKIP_WHITESPACES(string);
 8016842:	6823      	ldr	r3, [r4, #0]
 8016844:	781a      	ldrb	r2, [r3, #0]
 8016846:	5ca9      	ldrb	r1, [r5, r2]
 8016848:	0709      	lsls	r1, r1, #28
 801684a:	d505      	bpl.n	8016858 <parse_value.part.0+0x350>
 801684c:	3301      	adds	r3, #1
 801684e:	6023      	str	r3, [r4, #0]
 8016850:	781a      	ldrb	r2, [r3, #0]
 8016852:	5ca9      	ldrb	r1, [r5, r2]
 8016854:	070f      	lsls	r7, r1, #28
 8016856:	d4f9      	bmi.n	801684c <parse_value.part.0+0x344>
        if (**string != ',') {
 8016858:	2a2c      	cmp	r2, #44	; 0x2c
 801685a:	f040 8090 	bne.w	801697e <parse_value.part.0+0x476>
        SKIP_CHAR(string);
 801685e:	1c5a      	adds	r2, r3, #1
 8016860:	6022      	str	r2, [r4, #0]
        SKIP_WHITESPACES(string);
 8016862:	785b      	ldrb	r3, [r3, #1]
 8016864:	5ce9      	ldrb	r1, [r5, r3]
 8016866:	0708      	lsls	r0, r1, #28
 8016868:	d505      	bpl.n	8016876 <parse_value.part.0+0x36e>
 801686a:	3201      	adds	r2, #1
 801686c:	6022      	str	r2, [r4, #0]
 801686e:	7813      	ldrb	r3, [r2, #0]
 8016870:	5ce9      	ldrb	r1, [r5, r3]
 8016872:	0709      	lsls	r1, r1, #28
 8016874:	d4f9      	bmi.n	801686a <parse_value.part.0+0x362>
    while (**string != '\0') {
 8016876:	2b00      	cmp	r3, #0
 8016878:	d1d4      	bne.n	8016824 <parse_value.part.0+0x31c>
 801687a:	e683      	b.n	8016584 <parse_value.part.0+0x7c>
    if (strncmp("true", *string, true_token_size) == 0) {
 801687c:	485d      	ldr	r0, [pc, #372]	; (80169f4 <parse_value.part.0+0x4ec>)
 801687e:	2204      	movs	r2, #4
 8016880:	4631      	mov	r1, r6
 8016882:	f001 fd53 	bl	801832c <strncmp>
 8016886:	4605      	mov	r5, r0
 8016888:	2800      	cmp	r0, #0
 801688a:	d05c      	beq.n	8016946 <parse_value.part.0+0x43e>
    } else if (strncmp("false", *string, false_token_size) == 0) {
 801688c:	485a      	ldr	r0, [pc, #360]	; (80169f8 <parse_value.part.0+0x4f0>)
 801688e:	2205      	movs	r2, #5
 8016890:	4631      	mov	r1, r6
 8016892:	f001 fd4b 	bl	801832c <strncmp>
 8016896:	4605      	mov	r5, r0
 8016898:	2800      	cmp	r0, #0
 801689a:	f47f ae76 	bne.w	801658a <parse_value.part.0+0x82>
    return new_value;
}

JSON_Value * json_value_init_boolean(int boolean) {
    JSON_Value *new_value = (JSON_Value*)parson_malloc(sizeof(JSON_Value));
 801689e:	4b57      	ldr	r3, [pc, #348]	; (80169fc <parse_value.part.0+0x4f4>)
        *string += false_token_size;
 80168a0:	3605      	adds	r6, #5
 80168a2:	6026      	str	r6, [r4, #0]
    JSON_Value *new_value = (JSON_Value*)parson_malloc(sizeof(JSON_Value));
 80168a4:	681b      	ldr	r3, [r3, #0]
 80168a6:	2010      	movs	r0, #16
 80168a8:	4798      	blx	r3
    if (!new_value) {
 80168aa:	4606      	mov	r6, r0
 80168ac:	2800      	cmp	r0, #0
 80168ae:	f43f ae6d 	beq.w	801658c <parse_value.part.0+0x84>
        return NULL;
    }
    new_value->parent = NULL;
    new_value->type = JSONBoolean;
 80168b2:	2306      	movs	r3, #6
 80168b4:	e9c0 3501 	strd	r3, r5, [r0, #4]
    new_value->parent = NULL;
 80168b8:	6005      	str	r5, [r0, #0]
    new_value->value.boolean = boolean ? 1 : 0;
    return new_value;
 80168ba:	e667      	b.n	801658c <parse_value.part.0+0x84>
    if (strncmp("null", *string, token_size) == 0) {
 80168bc:	4850      	ldr	r0, [pc, #320]	; (8016a00 <parse_value.part.0+0x4f8>)
 80168be:	2204      	movs	r2, #4
 80168c0:	4631      	mov	r1, r6
 80168c2:	f001 fd33 	bl	801832c <strncmp>
 80168c6:	4605      	mov	r5, r0
 80168c8:	2800      	cmp	r0, #0
 80168ca:	f47f ae5e 	bne.w	801658a <parse_value.part.0+0x82>
}

JSON_Value * json_value_init_null(void) {
    JSON_Value *new_value = (JSON_Value*)parson_malloc(sizeof(JSON_Value));
 80168ce:	4b4b      	ldr	r3, [pc, #300]	; (80169fc <parse_value.part.0+0x4f4>)
        *string += token_size;
 80168d0:	3604      	adds	r6, #4
 80168d2:	6026      	str	r6, [r4, #0]
    JSON_Value *new_value = (JSON_Value*)parson_malloc(sizeof(JSON_Value));
 80168d4:	681b      	ldr	r3, [r3, #0]
 80168d6:	2010      	movs	r0, #16
 80168d8:	4798      	blx	r3
    if (!new_value) {
 80168da:	4606      	mov	r6, r0
 80168dc:	2800      	cmp	r0, #0
 80168de:	f43f ae55 	beq.w	801658c <parse_value.part.0+0x84>
        return NULL;
    }
    new_value->parent = NULL;
    new_value->type = JSONNull;
 80168e2:	2301      	movs	r3, #1
 80168e4:	e9c0 5300 	strd	r5, r3, [r0]
    return new_value;
 80168e8:	e650      	b.n	801658c <parse_value.part.0+0x84>
            parson_free(new_key);
 80168ea:	f8db 3004 	ldr.w	r3, [fp, #4]
 80168ee:	4640      	mov	r0, r8
 80168f0:	4798      	blx	r3
            json_value_free(output_value);
 80168f2:	4630      	mov	r0, r6
 80168f4:	f7ff fd46 	bl	8016384 <json_value_free>
            return NULL;
 80168f8:	2600      	movs	r6, #0
 80168fa:	e647      	b.n	801658c <parse_value.part.0+0x84>
    if (**string != '}' || /* Trim object after parsing is over */
 80168fc:	2a7d      	cmp	r2, #125	; 0x7d
 80168fe:	f47f ae41 	bne.w	8016584 <parse_value.part.0+0x7c>
    return object ? object->count : 0;
 8016902:	f1b9 0f00 	cmp.w	r9, #0
 8016906:	d072      	beq.n	80169ee <parse_value.part.0+0x4e6>
 8016908:	f8d9 100c 	ldr.w	r1, [r9, #12]
        json_object_resize(output_object, json_object_get_count(output_object)) == JSONFailure) {
 801690c:	4648      	mov	r0, r9
 801690e:	f7fe fb8d 	bl	801502c <json_object_resize>
    if (**string != '}' || /* Trim object after parsing is over */
 8016912:	3001      	adds	r0, #1
 8016914:	f43f ae36 	beq.w	8016584 <parse_value.part.0+0x7c>
    SKIP_CHAR(string);
 8016918:	6823      	ldr	r3, [r4, #0]
 801691a:	3301      	adds	r3, #1
 801691c:	6023      	str	r3, [r4, #0]
    return output_value;
 801691e:	e635      	b.n	801658c <parse_value.part.0+0x84>
        json_value_free(output_value);
 8016920:	4630      	mov	r0, r6
 8016922:	f7ff fd2f 	bl	8016384 <json_value_free>
        return NULL;
 8016926:	4646      	mov	r6, r8
 8016928:	e630      	b.n	801658c <parse_value.part.0+0x84>
    if (length > 2 && !strncmp(string, "-0", 2) && string[2] != '.') {
 801692a:	7873      	ldrb	r3, [r6, #1]
 801692c:	2b30      	cmp	r3, #48	; 0x30
 801692e:	f47f ae57 	bne.w	80165e0 <parse_value.part.0+0xd8>
 8016932:	78b3      	ldrb	r3, [r6, #2]
 8016934:	2b2e      	cmp	r3, #46	; 0x2e
 8016936:	f47f ae28 	bne.w	801658a <parse_value.part.0+0x82>
 801693a:	e651      	b.n	80165e0 <parse_value.part.0+0xd8>
    if (length > 1 && string[0] == '0' && string[1] != '.') {
 801693c:	7872      	ldrb	r2, [r6, #1]
 801693e:	2a2e      	cmp	r2, #46	; 0x2e
 8016940:	f47f ae23 	bne.w	801658a <parse_value.part.0+0x82>
 8016944:	e646      	b.n	80165d4 <parse_value.part.0+0xcc>
    JSON_Value *new_value = (JSON_Value*)parson_malloc(sizeof(JSON_Value));
 8016946:	4b2d      	ldr	r3, [pc, #180]	; (80169fc <parse_value.part.0+0x4f4>)
        *string += true_token_size;
 8016948:	3604      	adds	r6, #4
 801694a:	6026      	str	r6, [r4, #0]
    JSON_Value *new_value = (JSON_Value*)parson_malloc(sizeof(JSON_Value));
 801694c:	681b      	ldr	r3, [r3, #0]
 801694e:	2010      	movs	r0, #16
 8016950:	4798      	blx	r3
    if (!new_value) {
 8016952:	4606      	mov	r6, r0
 8016954:	2800      	cmp	r0, #0
 8016956:	f43f ae19 	beq.w	801658c <parse_value.part.0+0x84>
    new_value->type = JSONBoolean;
 801695a:	2206      	movs	r2, #6
    new_value->value.boolean = boolean ? 1 : 0;
 801695c:	2301      	movs	r3, #1
    new_value->type = JSONBoolean;
 801695e:	e9c0 5200 	strd	r5, r2, [r0]
    new_value->value.boolean = boolean ? 1 : 0;
 8016962:	6083      	str	r3, [r0, #8]
    return new_value;
 8016964:	e612      	b.n	801658c <parse_value.part.0+0x84>
    new_value->value.array = json_array_init(new_value);
 8016966:	f8c6 9008 	str.w	r9, [r6, #8]
        parson_free(new_value);
 801696a:	4630      	mov	r0, r6
 801696c:	f8db 3004 	ldr.w	r3, [fp, #4]
 8016970:	4798      	blx	r3
        return NULL;
 8016972:	464e      	mov	r6, r9
 8016974:	e60a      	b.n	801658c <parse_value.part.0+0x84>
        parson_free(new_string);
 8016976:	686b      	ldr	r3, [r5, #4]
 8016978:	4620      	mov	r0, r4
 801697a:	4798      	blx	r3
        return NULL;
 801697c:	e606      	b.n	801658c <parse_value.part.0+0x84>
    if (**string != ']' || /* Trim array after parsing is over */
 801697e:	2a5d      	cmp	r2, #93	; 0x5d
 8016980:	f47f ae00 	bne.w	8016584 <parse_value.part.0+0x7c>
    return array ? array->count : 0;
 8016984:	f1b9 0f00 	cmp.w	r9, #0
 8016988:	f43f adfc 	beq.w	8016584 <parse_value.part.0+0x7c>
 801698c:	f8d9 7008 	ldr.w	r7, [r9, #8]
    if (new_capacity == 0) {
 8016990:	2f00      	cmp	r7, #0
 8016992:	f43f adf7 	beq.w	8016584 <parse_value.part.0+0x7c>
    new_items = (JSON_Value**)parson_malloc(new_capacity * sizeof(JSON_Value*));
 8016996:	f8db 3000 	ldr.w	r3, [fp]
 801699a:	00b8      	lsls	r0, r7, #2
 801699c:	4798      	blx	r3
    if (new_items == NULL) {
 801699e:	4605      	mov	r5, r0
 80169a0:	2800      	cmp	r0, #0
 80169a2:	f43f adef 	beq.w	8016584 <parse_value.part.0+0x7c>
    if (array->items != NULL && array->count > 0) {
 80169a6:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80169aa:	b111      	cbz	r1, 80169b2 <parse_value.part.0+0x4aa>
 80169ac:	f8d9 2008 	ldr.w	r2, [r9, #8]
 80169b0:	b9ba      	cbnz	r2, 80169e2 <parse_value.part.0+0x4da>
    parson_free(array->items);
 80169b2:	f8db 3004 	ldr.w	r3, [fp, #4]
 80169b6:	4608      	mov	r0, r1
 80169b8:	4798      	blx	r3
    SKIP_CHAR(string);
 80169ba:	6823      	ldr	r3, [r4, #0]
    array->items = new_items;
 80169bc:	f8c9 5004 	str.w	r5, [r9, #4]
    SKIP_CHAR(string);
 80169c0:	3301      	adds	r3, #1
    array->capacity = new_capacity;
 80169c2:	f8c9 700c 	str.w	r7, [r9, #12]
    SKIP_CHAR(string);
 80169c6:	6023      	str	r3, [r4, #0]
    return output_value;
 80169c8:	e5e0      	b.n	801658c <parse_value.part.0+0x84>
            parson_free(new_key);
 80169ca:	f8db 3004 	ldr.w	r3, [fp, #4]
 80169ce:	4640      	mov	r0, r8
 80169d0:	4798      	blx	r3
            json_value_free(new_value);
 80169d2:	4650      	mov	r0, sl
 80169d4:	f7ff fcd6 	bl	8016384 <json_value_free>
            json_value_free(output_value);
 80169d8:	4630      	mov	r0, r6
 80169da:	f7ff fcd3 	bl	8016384 <json_value_free>
            return NULL;
 80169de:	2600      	movs	r6, #0
 80169e0:	e5d4      	b.n	801658c <parse_value.part.0+0x84>
        memcpy(new_items, array->items, array->count * sizeof(JSON_Value*));
 80169e2:	0092      	lsls	r2, r2, #2
 80169e4:	f000 fece 	bl	8017784 <memcpy>
 80169e8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80169ec:	e7e1      	b.n	80169b2 <parse_value.part.0+0x4aa>
    return object ? object->count : 0;
 80169ee:	4649      	mov	r1, r9
 80169f0:	e78c      	b.n	801690c <parse_value.part.0+0x404>
 80169f2:	bf00      	nop
 80169f4:	0801c3fc 	.word	0x0801c3fc
 80169f8:	0801c404 	.word	0x0801c404
 80169fc:	20000364 	.word	0x20000364
 8016a00:	0801c414 	.word	0x0801c414

08016a04 <json_parse_string>:
JSON_Value * json_parse_string(const char *string) {
 8016a04:	b500      	push	{lr}
 8016a06:	b083      	sub	sp, #12
 8016a08:	9001      	str	r0, [sp, #4]
    if (string == NULL) {
 8016a0a:	b130      	cbz	r0, 8016a1a <json_parse_string+0x16>
    if (string[0] == '\xEF' && string[1] == '\xBB' && string[2] == '\xBF') {
 8016a0c:	7803      	ldrb	r3, [r0, #0]
 8016a0e:	2bef      	cmp	r3, #239	; 0xef
 8016a10:	d006      	beq.n	8016a20 <json_parse_string+0x1c>
    if (nesting > MAX_NESTING) {
 8016a12:	2100      	movs	r1, #0
 8016a14:	a801      	add	r0, sp, #4
 8016a16:	f7ff fd77 	bl	8016508 <parse_value.part.0>
}
 8016a1a:	b003      	add	sp, #12
 8016a1c:	f85d fb04 	ldr.w	pc, [sp], #4
    if (string[0] == '\xEF' && string[1] == '\xBB' && string[2] == '\xBF') {
 8016a20:	7843      	ldrb	r3, [r0, #1]
 8016a22:	2bbb      	cmp	r3, #187	; 0xbb
 8016a24:	d1f5      	bne.n	8016a12 <json_parse_string+0xe>
 8016a26:	7883      	ldrb	r3, [r0, #2]
 8016a28:	2bbf      	cmp	r3, #191	; 0xbf
        string = string + 3; /* Support for UTF-8 BOM */
 8016a2a:	bf04      	itt	eq
 8016a2c:	3003      	addeq	r0, #3
 8016a2e:	9001      	streq	r0, [sp, #4]
 8016a30:	e7ef      	b.n	8016a12 <json_parse_string+0xe>
 8016a32:	bf00      	nop

08016a34 <json_value_init_object>:
JSON_Value * json_value_init_object(void) {
 8016a34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    JSON_Value *new_value = (JSON_Value*)parson_malloc(sizeof(JSON_Value));
 8016a36:	4f0e      	ldr	r7, [pc, #56]	; (8016a70 <json_value_init_object+0x3c>)
 8016a38:	2010      	movs	r0, #16
 8016a3a:	683b      	ldr	r3, [r7, #0]
 8016a3c:	4798      	blx	r3
    if (!new_value) {
 8016a3e:	4605      	mov	r5, r0
 8016a40:	b170      	cbz	r0, 8016a60 <json_value_init_object+0x2c>
    new_value->type = JSONObject;
 8016a42:	2304      	movs	r3, #4
 8016a44:	2600      	movs	r6, #0
 8016a46:	e9c0 6300 	strd	r6, r3, [r0]
    JSON_Object *new_obj = (JSON_Object*)parson_malloc(sizeof(JSON_Object));
 8016a4a:	683b      	ldr	r3, [r7, #0]
 8016a4c:	2014      	movs	r0, #20
 8016a4e:	4798      	blx	r3
    if (new_obj == NULL) {
 8016a50:	4604      	mov	r4, r0
 8016a52:	b138      	cbz	r0, 8016a64 <json_value_init_object+0x30>
    new_obj->names = (char**)NULL;
 8016a54:	e9c0 5600 	strd	r5, r6, [r0]
    new_obj->count = 0;
 8016a58:	e9c0 6603 	strd	r6, r6, [r0, #12]
    new_obj->values = (JSON_Value**)NULL;
 8016a5c:	6086      	str	r6, [r0, #8]
    new_value->value.object = json_object_init(new_value);
 8016a5e:	60a8      	str	r0, [r5, #8]
}
 8016a60:	4628      	mov	r0, r5
 8016a62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    new_value->value.object = json_object_init(new_value);
 8016a64:	60a8      	str	r0, [r5, #8]
        parson_free(new_value);
 8016a66:	687b      	ldr	r3, [r7, #4]
 8016a68:	4628      	mov	r0, r5
 8016a6a:	4798      	blx	r3
        return NULL;
 8016a6c:	4625      	mov	r5, r4
 8016a6e:	e7f7      	b.n	8016a60 <json_value_init_object+0x2c>
 8016a70:	20000364 	.word	0x20000364

08016a74 <json_value_init_array>:
JSON_Value * json_value_init_array(void) {
 8016a74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    JSON_Value *new_value = (JSON_Value*)parson_malloc(sizeof(JSON_Value));
 8016a76:	4f0e      	ldr	r7, [pc, #56]	; (8016ab0 <json_value_init_array+0x3c>)
 8016a78:	2010      	movs	r0, #16
 8016a7a:	683b      	ldr	r3, [r7, #0]
 8016a7c:	4798      	blx	r3
    if (!new_value) {
 8016a7e:	4604      	mov	r4, r0
 8016a80:	b168      	cbz	r0, 8016a9e <json_value_init_array+0x2a>
    new_value->type = JSONArray;
 8016a82:	2305      	movs	r3, #5
 8016a84:	2600      	movs	r6, #0
 8016a86:	e9c0 6300 	strd	r6, r3, [r0]
    JSON_Array *new_array = (JSON_Array*)parson_malloc(sizeof(JSON_Array));
 8016a8a:	683b      	ldr	r3, [r7, #0]
 8016a8c:	2010      	movs	r0, #16
 8016a8e:	4798      	blx	r3
    if (new_array == NULL) {
 8016a90:	4605      	mov	r5, r0
 8016a92:	b130      	cbz	r0, 8016aa2 <json_value_init_array+0x2e>
    new_array->items = (JSON_Value**)NULL;
 8016a94:	e9c0 4600 	strd	r4, r6, [r0]
    new_array->count = 0;
 8016a98:	e9c0 6602 	strd	r6, r6, [r0, #8]
    new_value->value.array = json_array_init(new_value);
 8016a9c:	60a0      	str	r0, [r4, #8]
}
 8016a9e:	4620      	mov	r0, r4
 8016aa0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    new_value->value.array = json_array_init(new_value);
 8016aa2:	60a0      	str	r0, [r4, #8]
        parson_free(new_value);
 8016aa4:	687b      	ldr	r3, [r7, #4]
 8016aa6:	4620      	mov	r0, r4
 8016aa8:	4798      	blx	r3
        return NULL;
 8016aaa:	462c      	mov	r4, r5
 8016aac:	e7f7      	b.n	8016a9e <json_value_init_array+0x2a>
 8016aae:	bf00      	nop
 8016ab0:	20000364 	.word	0x20000364

08016ab4 <json_value_init_string>:
JSON_Value * json_value_init_string(const char *string) {
 8016ab4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    if (string == NULL) {
 8016ab8:	b310      	cbz	r0, 8016b00 <json_value_init_string+0x4c>
 8016aba:	4605      	mov	r5, r0
    string_len = strlen(string);
 8016abc:	f7e9 fbaa 	bl	8000214 <strlen>
 8016ac0:	4606      	mov	r6, r0
    const char *string_end =  string + string_len;
 8016ac2:	1828      	adds	r0, r5, r0
    while (string < string_end) {
 8016ac4:	4285      	cmp	r5, r0
 8016ac6:	d246      	bcs.n	8016b56 <json_value_init_string+0xa2>
 8016ac8:	462c      	mov	r4, r5
    *len = num_bytes_in_utf8_sequence(string[0]);
 8016aca:	7823      	ldrb	r3, [r4, #0]
    if (c == 0xC0 || c == 0xC1 || c > 0xF4 || IS_CONT(c)) {
 8016acc:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8016ad0:	b2d2      	uxtb	r2, r2
 8016ad2:	2a01      	cmp	r2, #1
 8016ad4:	d914      	bls.n	8016b00 <json_value_init_string+0x4c>
 8016ad6:	2bf4      	cmp	r3, #244	; 0xf4
 8016ad8:	d812      	bhi.n	8016b00 <json_value_init_string+0x4c>
 8016ada:	f003 02c0 	and.w	r2, r3, #192	; 0xc0
 8016ade:	2a80      	cmp	r2, #128	; 0x80
 8016ae0:	d00e      	beq.n	8016b00 <json_value_init_string+0x4c>
    } else if ((c & 0x80) == 0) {    /* 0xxxxxxx */
 8016ae2:	061a      	lsls	r2, r3, #24
 8016ae4:	f140 8083 	bpl.w	8016bee <json_value_init_string+0x13a>
    } else if ((c & 0xE0) == 0xC0) { /* 110xxxxx */
 8016ae8:	f003 02e0 	and.w	r2, r3, #224	; 0xe0
 8016aec:	2ac0      	cmp	r2, #192	; 0xc0
 8016aee:	d06f      	beq.n	8016bd0 <json_value_init_string+0x11c>
    } else if ((c & 0xF0) == 0xE0) { /* 1110xxxx */
 8016af0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8016af4:	2ae0      	cmp	r2, #224	; 0xe0
 8016af6:	d04d      	beq.n	8016b94 <json_value_init_string+0xe0>
    } else if ((c & 0xF8) == 0xF0) { /* 11110xxx */
 8016af8:	f003 02f8 	and.w	r2, r3, #248	; 0xf8
 8016afc:	2af0      	cmp	r2, #240	; 0xf0
 8016afe:	d003      	beq.n	8016b08 <json_value_init_string+0x54>
        return NULL;
 8016b00:	2400      	movs	r4, #0
}
 8016b02:	4620      	mov	r0, r4
 8016b04:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    } else if (*len == 4 && IS_CONT(string[1]) && IS_CONT(string[2]) && IS_CONT(string[3])) {
 8016b08:	7861      	ldrb	r1, [r4, #1]
 8016b0a:	f001 02c0 	and.w	r2, r1, #192	; 0xc0
 8016b0e:	2a80      	cmp	r2, #128	; 0x80
 8016b10:	d1f6      	bne.n	8016b00 <json_value_init_string+0x4c>
 8016b12:	78a2      	ldrb	r2, [r4, #2]
 8016b14:	f002 07c0 	and.w	r7, r2, #192	; 0xc0
 8016b18:	2f80      	cmp	r7, #128	; 0x80
 8016b1a:	d1f1      	bne.n	8016b00 <json_value_init_string+0x4c>
 8016b1c:	78e7      	ldrb	r7, [r4, #3]
 8016b1e:	f007 0cc0 	and.w	ip, r7, #192	; 0xc0
 8016b22:	f1bc 0f80 	cmp.w	ip, #128	; 0x80
 8016b26:	d1eb      	bne.n	8016b00 <json_value_init_string+0x4c>
        cp = string[0] & 0x7;
 8016b28:	f003 0307 	and.w	r3, r3, #7
        cp = (cp << 6) | (string[1] & 0x3F);
 8016b2c:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8016b30:	ea41 1383 	orr.w	r3, r1, r3, lsl #6
        cp = (cp << 6) | (string[2] & 0x3F);
 8016b34:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8016b38:	ea42 1283 	orr.w	r2, r2, r3, lsl #6
        cp = (cp << 6) | (string[3] & 0x3F);
 8016b3c:	f007 073f 	and.w	r7, r7, #63	; 0x3f
 8016b40:	ea47 1282 	orr.w	r2, r7, r2, lsl #6
    if ((cp < 0x80    && *len > 1) ||
 8016b44:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
 8016b48:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 8016b4c:	d2d8      	bcs.n	8016b00 <json_value_init_string+0x4c>
 8016b4e:	2304      	movs	r3, #4
        string += len;
 8016b50:	441c      	add	r4, r3
    while (string < string_end) {
 8016b52:	42a0      	cmp	r0, r4
 8016b54:	d8b9      	bhi.n	8016aca <json_value_init_string+0x16>
    char *output_string = (char*)parson_malloc(n + 1);
 8016b56:	f8df 90ac 	ldr.w	r9, [pc, #172]	; 8016c04 <json_value_init_string+0x150>
 8016b5a:	1c70      	adds	r0, r6, #1
 8016b5c:	f8d9 3000 	ldr.w	r3, [r9]
 8016b60:	4798      	blx	r3
    if (!output_string) {
 8016b62:	4607      	mov	r7, r0
 8016b64:	2800      	cmp	r0, #0
 8016b66:	d0cb      	beq.n	8016b00 <json_value_init_string+0x4c>
    output_string[n] = '\0';
 8016b68:	f04f 0800 	mov.w	r8, #0
    strncpy(output_string, string, n);
 8016b6c:	4629      	mov	r1, r5
 8016b6e:	4632      	mov	r2, r6
    output_string[n] = '\0';
 8016b70:	f807 8006 	strb.w	r8, [r7, r6]
    strncpy(output_string, string, n);
 8016b74:	f001 fbec 	bl	8018350 <strncpy>
    JSON_Value *new_value = (JSON_Value*)parson_malloc(sizeof(JSON_Value));
 8016b78:	f8d9 3000 	ldr.w	r3, [r9]
 8016b7c:	2010      	movs	r0, #16
 8016b7e:	4798      	blx	r3
    if (!new_value) {
 8016b80:	4604      	mov	r4, r0
 8016b82:	b3d0      	cbz	r0, 8016bfa <json_value_init_string+0x146>
    new_value->type = JSONString;
 8016b84:	2302      	movs	r3, #2
 8016b86:	e9c0 3701 	strd	r3, r7, [r0, #4]
    new_value->parent = NULL;
 8016b8a:	f8c0 8000 	str.w	r8, [r0]
}
 8016b8e:	4620      	mov	r0, r4
 8016b90:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    } else if (*len == 3 && IS_CONT(string[1]) && IS_CONT(string[2])) {
 8016b94:	7861      	ldrb	r1, [r4, #1]
 8016b96:	f001 02c0 	and.w	r2, r1, #192	; 0xc0
 8016b9a:	2a80      	cmp	r2, #128	; 0x80
 8016b9c:	d1b0      	bne.n	8016b00 <json_value_init_string+0x4c>
 8016b9e:	78a2      	ldrb	r2, [r4, #2]
 8016ba0:	f002 07c0 	and.w	r7, r2, #192	; 0xc0
 8016ba4:	2f80      	cmp	r7, #128	; 0x80
 8016ba6:	d1ab      	bne.n	8016b00 <json_value_init_string+0x4c>
        cp = ((unsigned char)string[0]) & 0xF;
 8016ba8:	f003 030f 	and.w	r3, r3, #15
        cp = (cp << 6) | (string[1] & 0x3F);
 8016bac:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8016bb0:	ea41 1383 	orr.w	r3, r1, r3, lsl #6
        cp = (cp << 6) | (string[2] & 0x3F);
 8016bb4:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8016bb8:	ea42 1283 	orr.w	r2, r2, r3, lsl #6
    if ((cp < 0x80    && *len > 1) ||
 8016bbc:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8016bc0:	d39e      	bcc.n	8016b00 <json_value_init_string+0x4c>
    if (cp >= 0xD800 && cp <= 0xDFFF) {
 8016bc2:	f5a2 4258 	sub.w	r2, r2, #55296	; 0xd800
 8016bc6:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8016bca:	d399      	bcc.n	8016b00 <json_value_init_string+0x4c>
 8016bcc:	2303      	movs	r3, #3
 8016bce:	e00f      	b.n	8016bf0 <json_value_init_string+0x13c>
    } else if (*len == 2 && IS_CONT(string[1])) {
 8016bd0:	7862      	ldrb	r2, [r4, #1]
 8016bd2:	f002 01c0 	and.w	r1, r2, #192	; 0xc0
 8016bd6:	2980      	cmp	r1, #128	; 0x80
 8016bd8:	d192      	bne.n	8016b00 <json_value_init_string+0x4c>
        cp = string[0] & 0x1F;
 8016bda:	f003 031f 	and.w	r3, r3, #31
        cp = (cp << 6) | (string[1] & 0x3F);
 8016bde:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8016be2:	ea42 1383 	orr.w	r3, r2, r3, lsl #6
    if ((cp < 0x80    && *len > 1) ||
 8016be6:	2b7f      	cmp	r3, #127	; 0x7f
 8016be8:	d98a      	bls.n	8016b00 <json_value_init_string+0x4c>
 8016bea:	2302      	movs	r3, #2
 8016bec:	e000      	b.n	8016bf0 <json_value_init_string+0x13c>
 8016bee:	2301      	movs	r3, #1
        string += len;
 8016bf0:	441c      	add	r4, r3
    while (string < string_end) {
 8016bf2:	42a0      	cmp	r0, r4
 8016bf4:	f63f af69 	bhi.w	8016aca <json_value_init_string+0x16>
 8016bf8:	e7ad      	b.n	8016b56 <json_value_init_string+0xa2>
        parson_free(copy);
 8016bfa:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8016bfe:	4638      	mov	r0, r7
 8016c00:	4798      	blx	r3
 8016c02:	e77e      	b.n	8016b02 <json_value_init_string+0x4e>
 8016c04:	20000364 	.word	0x20000364

08016c08 <json_serialization_size>:
        default:
            return NULL;
    }
}

size_t json_serialization_size(const JSON_Value *value) {
 8016c08:	b500      	push	{lr}
    char num_buf[NUM_BUF_SIZE]; /* recursively allocating buffer on stack is a bad idea, so let's do it only once */
    int res = json_serialize_to_buffer_r(value, NULL, 0, 0, num_buf);
 8016c0a:	2200      	movs	r2, #0
size_t json_serialization_size(const JSON_Value *value) {
 8016c0c:	b091      	sub	sp, #68	; 0x44
    int res = json_serialize_to_buffer_r(value, NULL, 0, 0, num_buf);
 8016c0e:	4611      	mov	r1, r2
 8016c10:	466b      	mov	r3, sp
 8016c12:	f7ff f8eb 	bl	8015dec <json_serialize_to_buffer_r.constprop.0>
    return res < 0 ? 0 : (size_t)(res + 1);
 8016c16:	2800      	cmp	r0, #0
 8016c18:	bfac      	ite	ge
 8016c1a:	3001      	addge	r0, #1
 8016c1c:	2000      	movlt	r0, #0
}
 8016c1e:	b011      	add	sp, #68	; 0x44
 8016c20:	f85d fb04 	ldr.w	pc, [sp], #4

08016c24 <json_serialize_to_string>:
    }
    json_free_serialized_string(serialized_string);
    return return_code;
}

char * json_serialize_to_string(const JSON_Value *value) {
 8016c24:	b5f0      	push	{r4, r5, r6, r7, lr}
    int res = json_serialize_to_buffer_r(value, NULL, 0, 0, num_buf);
 8016c26:	2200      	movs	r2, #0
char * json_serialize_to_string(const JSON_Value *value) {
 8016c28:	b091      	sub	sp, #68	; 0x44
    int res = json_serialize_to_buffer_r(value, NULL, 0, 0, num_buf);
 8016c2a:	466b      	mov	r3, sp
 8016c2c:	4611      	mov	r1, r2
char * json_serialize_to_string(const JSON_Value *value) {
 8016c2e:	4606      	mov	r6, r0
    int res = json_serialize_to_buffer_r(value, NULL, 0, 0, num_buf);
 8016c30:	f7ff f8dc 	bl	8015dec <json_serialize_to_buffer_r.constprop.0>
    return res < 0 ? 0 : (size_t)(res + 1);
 8016c34:	1e03      	subs	r3, r0, #0
 8016c36:	db1f      	blt.n	8016c78 <json_serialize_to_string+0x54>
    size_t buf_size_bytes = json_serialization_size(value);
    char *buf = NULL;
    if (buf_size_bytes == 0) {
        return NULL;
    }
    buf = (char*)parson_malloc(buf_size_bytes);
 8016c38:	4f11      	ldr	r7, [pc, #68]	; (8016c80 <json_serialize_to_string+0x5c>)
    return res < 0 ? 0 : (size_t)(res + 1);
 8016c3a:	1c5c      	adds	r4, r3, #1
    buf = (char*)parson_malloc(buf_size_bytes);
 8016c3c:	4620      	mov	r0, r4
 8016c3e:	683b      	ldr	r3, [r7, #0]
 8016c40:	4798      	blx	r3
    if (buf == NULL) {
 8016c42:	4605      	mov	r5, r0
 8016c44:	b190      	cbz	r0, 8016c6c <json_serialize_to_string+0x48>
    int res = json_serialize_to_buffer_r(value, NULL, 0, 0, num_buf);
 8016c46:	2200      	movs	r2, #0
 8016c48:	466b      	mov	r3, sp
 8016c4a:	4611      	mov	r1, r2
 8016c4c:	4630      	mov	r0, r6
 8016c4e:	f7ff f8cd 	bl	8015dec <json_serialize_to_buffer_r.constprop.0>
    return res < 0 ? 0 : (size_t)(res + 1);
 8016c52:	1e03      	subs	r3, r0, #0
 8016c54:	db0d      	blt.n	8016c72 <json_serialize_to_string+0x4e>
 8016c56:	3301      	adds	r3, #1
    if (needed_size_in_bytes == 0 || buf_size_in_bytes < needed_size_in_bytes) {
 8016c58:	429c      	cmp	r4, r3
 8016c5a:	d30a      	bcc.n	8016c72 <json_serialize_to_string+0x4e>
    written = json_serialize_to_buffer_r(value, buf, 0, 0, NULL);
 8016c5c:	2300      	movs	r3, #0
 8016c5e:	4630      	mov	r0, r6
 8016c60:	461a      	mov	r2, r3
 8016c62:	4629      	mov	r1, r5
 8016c64:	f7ff f8c2 	bl	8015dec <json_serialize_to_buffer_r.constprop.0>
    if (written < 0) {
 8016c68:	2800      	cmp	r0, #0
 8016c6a:	db02      	blt.n	8016c72 <json_serialize_to_string+0x4e>
    if (serialization_result == JSONFailure) {
        json_free_serialized_string(buf);
        return NULL;
    }
    return buf;
}
 8016c6c:	4628      	mov	r0, r5
 8016c6e:	b011      	add	sp, #68	; 0x44
 8016c70:	bdf0      	pop	{r4, r5, r6, r7, pc}
    }
    return buf;
}

void json_free_serialized_string(char *string) {
    parson_free(string);
 8016c72:	687b      	ldr	r3, [r7, #4]
 8016c74:	4628      	mov	r0, r5
 8016c76:	4798      	blx	r3
        return NULL;
 8016c78:	2500      	movs	r5, #0
}
 8016c7a:	4628      	mov	r0, r5
 8016c7c:	b011      	add	sp, #68	; 0x44
 8016c7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016c80:	20000364 	.word	0x20000364

08016c84 <json_serialization_size_pretty>:
size_t json_serialization_size_pretty(const JSON_Value *value) {
 8016c84:	b500      	push	{lr}
 8016c86:	b091      	sub	sp, #68	; 0x44
    int res = json_serialize_to_buffer_r(value, NULL, 0, 1, num_buf);
 8016c88:	466b      	mov	r3, sp
 8016c8a:	2201      	movs	r2, #1
 8016c8c:	2100      	movs	r1, #0
 8016c8e:	f7ff f8ad 	bl	8015dec <json_serialize_to_buffer_r.constprop.0>
    return res < 0 ? 0 : (size_t)(res + 1);
 8016c92:	2800      	cmp	r0, #0
 8016c94:	bfac      	ite	ge
 8016c96:	3001      	addge	r0, #1
 8016c98:	2000      	movlt	r0, #0
}
 8016c9a:	b011      	add	sp, #68	; 0x44
 8016c9c:	f85d fb04 	ldr.w	pc, [sp], #4

08016ca0 <json_serialize_to_string_pretty>:
char * json_serialize_to_string_pretty(const JSON_Value *value) {
 8016ca0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016ca2:	b091      	sub	sp, #68	; 0x44
    int res = json_serialize_to_buffer_r(value, NULL, 0, 1, num_buf);
 8016ca4:	466b      	mov	r3, sp
 8016ca6:	2201      	movs	r2, #1
 8016ca8:	2100      	movs	r1, #0
char * json_serialize_to_string_pretty(const JSON_Value *value) {
 8016caa:	4606      	mov	r6, r0
    int res = json_serialize_to_buffer_r(value, NULL, 0, 1, num_buf);
 8016cac:	f7ff f89e 	bl	8015dec <json_serialize_to_buffer_r.constprop.0>
    return res < 0 ? 0 : (size_t)(res + 1);
 8016cb0:	1e03      	subs	r3, r0, #0
 8016cb2:	db1f      	blt.n	8016cf4 <json_serialize_to_string_pretty+0x54>
    buf = (char*)parson_malloc(buf_size_bytes);
 8016cb4:	4f11      	ldr	r7, [pc, #68]	; (8016cfc <json_serialize_to_string_pretty+0x5c>)
    return res < 0 ? 0 : (size_t)(res + 1);
 8016cb6:	1c5c      	adds	r4, r3, #1
    buf = (char*)parson_malloc(buf_size_bytes);
 8016cb8:	4620      	mov	r0, r4
 8016cba:	683b      	ldr	r3, [r7, #0]
 8016cbc:	4798      	blx	r3
    if (buf == NULL) {
 8016cbe:	4605      	mov	r5, r0
 8016cc0:	b190      	cbz	r0, 8016ce8 <json_serialize_to_string_pretty+0x48>
    int res = json_serialize_to_buffer_r(value, NULL, 0, 1, num_buf);
 8016cc2:	466b      	mov	r3, sp
 8016cc4:	2201      	movs	r2, #1
 8016cc6:	2100      	movs	r1, #0
 8016cc8:	4630      	mov	r0, r6
 8016cca:	f7ff f88f 	bl	8015dec <json_serialize_to_buffer_r.constprop.0>
    return res < 0 ? 0 : (size_t)(res + 1);
 8016cce:	1e03      	subs	r3, r0, #0
 8016cd0:	db0d      	blt.n	8016cee <json_serialize_to_string_pretty+0x4e>
 8016cd2:	3301      	adds	r3, #1
    if (needed_size_in_bytes == 0 || buf_size_in_bytes < needed_size_in_bytes) {
 8016cd4:	429c      	cmp	r4, r3
 8016cd6:	d30a      	bcc.n	8016cee <json_serialize_to_string_pretty+0x4e>
    written = json_serialize_to_buffer_r(value, buf, 0, 1, NULL);
 8016cd8:	4630      	mov	r0, r6
 8016cda:	2300      	movs	r3, #0
 8016cdc:	2201      	movs	r2, #1
 8016cde:	4629      	mov	r1, r5
 8016ce0:	f7ff f884 	bl	8015dec <json_serialize_to_buffer_r.constprop.0>
    if (written < 0) {
 8016ce4:	2800      	cmp	r0, #0
 8016ce6:	db02      	blt.n	8016cee <json_serialize_to_string_pretty+0x4e>
}
 8016ce8:	4628      	mov	r0, r5
 8016cea:	b011      	add	sp, #68	; 0x44
 8016cec:	bdf0      	pop	{r4, r5, r6, r7, pc}
    parson_free(string);
 8016cee:	687b      	ldr	r3, [r7, #4]
 8016cf0:	4628      	mov	r0, r5
 8016cf2:	4798      	blx	r3
        return NULL;
 8016cf4:	2500      	movs	r5, #0
}
 8016cf6:	4628      	mov	r0, r5
 8016cf8:	b011      	add	sp, #68	; 0x44
 8016cfa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016cfc:	20000364 	.word	0x20000364

08016d00 <json_array_append_value>:
    array->count = 0;
    return JSONSuccess;
}

JSON_Status json_array_append_value(JSON_Array *array, JSON_Value *value) {
    if (array == NULL || value == NULL || value->parent != NULL) {
 8016d00:	2800      	cmp	r0, #0
 8016d02:	d034      	beq.n	8016d6e <json_array_append_value+0x6e>
JSON_Status json_array_append_value(JSON_Array *array, JSON_Value *value) {
 8016d04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016d08:	460f      	mov	r7, r1
    if (array == NULL || value == NULL || value->parent != NULL) {
 8016d0a:	b369      	cbz	r1, 8016d68 <json_array_append_value+0x68>
 8016d0c:	680b      	ldr	r3, [r1, #0]
 8016d0e:	bb5b      	cbnz	r3, 8016d68 <json_array_append_value+0x68>
    if (array->count >= array->capacity) {
 8016d10:	e9d0 3602 	ldrd	r3, r6, [r0, #8]
 8016d14:	42b3      	cmp	r3, r6
 8016d16:	4604      	mov	r4, r0
 8016d18:	d209      	bcs.n	8016d2e <json_array_append_value+0x2e>
 8016d1a:	6845      	ldr	r5, [r0, #4]
    value->parent = json_array_get_wrapping_value(array);
 8016d1c:	6822      	ldr	r2, [r4, #0]
 8016d1e:	603a      	str	r2, [r7, #0]
    array->count++;
 8016d20:	1c5a      	adds	r2, r3, #1
    array->items[array->count] = value;
 8016d22:	f845 7023 	str.w	r7, [r5, r3, lsl #2]
    return JSONSuccess;
 8016d26:	2000      	movs	r0, #0
    array->count++;
 8016d28:	60a2      	str	r2, [r4, #8]
        return JSONFailure;
    }
    return json_array_add(array, value);
}
 8016d2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        size_t new_capacity = MAX(array->capacity * 2, STARTING_CAPACITY);
 8016d2e:	0076      	lsls	r6, r6, #1
 8016d30:	2e10      	cmp	r6, #16
    new_items = (JSON_Value**)parson_malloc(new_capacity * sizeof(JSON_Value*));
 8016d32:	f8df 8040 	ldr.w	r8, [pc, #64]	; 8016d74 <json_array_append_value+0x74>
        size_t new_capacity = MAX(array->capacity * 2, STARTING_CAPACITY);
 8016d36:	bf38      	it	cc
 8016d38:	2610      	movcc	r6, #16
    new_items = (JSON_Value**)parson_malloc(new_capacity * sizeof(JSON_Value*));
 8016d3a:	f8d8 3000 	ldr.w	r3, [r8]
 8016d3e:	00b0      	lsls	r0, r6, #2
 8016d40:	4798      	blx	r3
    if (new_items == NULL) {
 8016d42:	4605      	mov	r5, r0
 8016d44:	b180      	cbz	r0, 8016d68 <json_array_append_value+0x68>
    if (array->items != NULL && array->count > 0) {
 8016d46:	6861      	ldr	r1, [r4, #4]
 8016d48:	b109      	cbz	r1, 8016d4e <json_array_append_value+0x4e>
 8016d4a:	68a2      	ldr	r2, [r4, #8]
 8016d4c:	b93a      	cbnz	r2, 8016d5e <json_array_append_value+0x5e>
    parson_free(array->items);
 8016d4e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8016d52:	4608      	mov	r0, r1
 8016d54:	4798      	blx	r3
    array->items = new_items;
 8016d56:	68a3      	ldr	r3, [r4, #8]
 8016d58:	6065      	str	r5, [r4, #4]
    array->capacity = new_capacity;
 8016d5a:	60e6      	str	r6, [r4, #12]
    return JSONSuccess;
 8016d5c:	e7de      	b.n	8016d1c <json_array_append_value+0x1c>
        memcpy(new_items, array->items, array->count * sizeof(JSON_Value*));
 8016d5e:	0092      	lsls	r2, r2, #2
 8016d60:	f000 fd10 	bl	8017784 <memcpy>
 8016d64:	6861      	ldr	r1, [r4, #4]
 8016d66:	e7f2      	b.n	8016d4e <json_array_append_value+0x4e>
        return JSONFailure;
 8016d68:	f04f 30ff 	mov.w	r0, #4294967295
 8016d6c:	e7dd      	b.n	8016d2a <json_array_append_value+0x2a>
 8016d6e:	f04f 30ff 	mov.w	r0, #4294967295
}
 8016d72:	4770      	bx	lr
 8016d74:	20000364 	.word	0x20000364

08016d78 <json_array_append_number>:
        return JSONFailure;
    }
    return JSONSuccess;
}

JSON_Status json_array_append_number(JSON_Array *array, double number) {
 8016d78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016d7c:	ec57 6b10 	vmov	r6, r7, d0
 8016d80:	4604      	mov	r4, r0
    if (IS_NUMBER_INVALID(number)) {
 8016d82:	ee10 2a10 	vmov	r2, s0
 8016d86:	ee10 0a10 	vmov	r0, s0
 8016d8a:	463b      	mov	r3, r7
 8016d8c:	4639      	mov	r1, r7
 8016d8e:	f7e9 fef5 	bl	8000b7c <__aeabi_dcmpun>
 8016d92:	2800      	cmp	r0, #0
 8016d94:	d14d      	bne.n	8016e32 <json_array_append_number+0xba>
 8016d96:	f027 4900 	bic.w	r9, r7, #2147483648	; 0x80000000
 8016d9a:	4b28      	ldr	r3, [pc, #160]	; (8016e3c <json_array_append_number+0xc4>)
 8016d9c:	4630      	mov	r0, r6
 8016d9e:	4649      	mov	r1, r9
 8016da0:	f04f 32ff 	mov.w	r2, #4294967295
 8016da4:	f7e9 feea 	bl	8000b7c <__aeabi_dcmpun>
 8016da8:	b940      	cbnz	r0, 8016dbc <json_array_append_number+0x44>
 8016daa:	4b24      	ldr	r3, [pc, #144]	; (8016e3c <json_array_append_number+0xc4>)
 8016dac:	4630      	mov	r0, r6
 8016dae:	4649      	mov	r1, r9
 8016db0:	f04f 32ff 	mov.w	r2, #4294967295
 8016db4:	f7e9 fec4 	bl	8000b40 <__aeabi_dcmple>
 8016db8:	2800      	cmp	r0, #0
 8016dba:	d03a      	beq.n	8016e32 <json_array_append_number+0xba>
    new_value = (JSON_Value*)parson_malloc(sizeof(JSON_Value));
 8016dbc:	f8df 8080 	ldr.w	r8, [pc, #128]	; 8016e40 <json_array_append_number+0xc8>
 8016dc0:	2010      	movs	r0, #16
 8016dc2:	f8d8 3000 	ldr.w	r3, [r8]
 8016dc6:	4798      	blx	r3
    if (new_value == NULL) {
 8016dc8:	4605      	mov	r5, r0
 8016dca:	2800      	cmp	r0, #0
 8016dcc:	d031      	beq.n	8016e32 <json_array_append_number+0xba>
    new_value->parent = NULL;
 8016dce:	2200      	movs	r2, #0
    new_value->type = JSONNumber;
 8016dd0:	2303      	movs	r3, #3
    new_value->value.number = number;
 8016dd2:	e9c0 6702 	strd	r6, r7, [r0, #8]
    new_value->type = JSONNumber;
 8016dd6:	e9c0 2300 	strd	r2, r3, [r0]
    if (array == NULL || value == NULL || value->parent != NULL) {
 8016dda:	b33c      	cbz	r4, 8016e2c <json_array_append_number+0xb4>
    if (array->count >= array->capacity) {
 8016ddc:	e9d4 3702 	ldrd	r3, r7, [r4, #8]
 8016de0:	42bb      	cmp	r3, r7
 8016de2:	d209      	bcs.n	8016df8 <json_array_append_number+0x80>
 8016de4:	6866      	ldr	r6, [r4, #4]
    value->parent = json_array_get_wrapping_value(array);
 8016de6:	6822      	ldr	r2, [r4, #0]
 8016de8:	602a      	str	r2, [r5, #0]
    array->count++;
 8016dea:	1c5a      	adds	r2, r3, #1
    array->items[array->count] = value;
 8016dec:	f846 5023 	str.w	r5, [r6, r3, lsl #2]
    }
    if (json_array_append_value(array, value) == JSONFailure) {
        json_value_free(value);
        return JSONFailure;
    }
    return JSONSuccess;
 8016df0:	2000      	movs	r0, #0
    array->count++;
 8016df2:	60a2      	str	r2, [r4, #8]
}
 8016df4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        size_t new_capacity = MAX(array->capacity * 2, STARTING_CAPACITY);
 8016df8:	007f      	lsls	r7, r7, #1
 8016dfa:	2f10      	cmp	r7, #16
 8016dfc:	bf38      	it	cc
 8016dfe:	2710      	movcc	r7, #16
    new_items = (JSON_Value**)parson_malloc(new_capacity * sizeof(JSON_Value*));
 8016e00:	f8d8 3000 	ldr.w	r3, [r8]
 8016e04:	00b8      	lsls	r0, r7, #2
 8016e06:	4798      	blx	r3
    if (new_items == NULL) {
 8016e08:	4606      	mov	r6, r0
 8016e0a:	b178      	cbz	r0, 8016e2c <json_array_append_number+0xb4>
    if (array->items != NULL && array->count > 0) {
 8016e0c:	6861      	ldr	r1, [r4, #4]
 8016e0e:	b129      	cbz	r1, 8016e1c <json_array_append_number+0xa4>
 8016e10:	68a2      	ldr	r2, [r4, #8]
 8016e12:	b11a      	cbz	r2, 8016e1c <json_array_append_number+0xa4>
        memcpy(new_items, array->items, array->count * sizeof(JSON_Value*));
 8016e14:	0092      	lsls	r2, r2, #2
 8016e16:	f000 fcb5 	bl	8017784 <memcpy>
 8016e1a:	6861      	ldr	r1, [r4, #4]
    parson_free(array->items);
 8016e1c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8016e20:	4608      	mov	r0, r1
 8016e22:	4798      	blx	r3
    array->items = new_items;
 8016e24:	68a3      	ldr	r3, [r4, #8]
 8016e26:	6066      	str	r6, [r4, #4]
    array->capacity = new_capacity;
 8016e28:	60e7      	str	r7, [r4, #12]
    return JSONSuccess;
 8016e2a:	e7dc      	b.n	8016de6 <json_array_append_number+0x6e>
        json_value_free(value);
 8016e2c:	4628      	mov	r0, r5
 8016e2e:	f7ff faa9 	bl	8016384 <json_value_free>
        return JSONFailure;
 8016e32:	f04f 30ff 	mov.w	r0, #4294967295
}
 8016e36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016e3a:	bf00      	nop
 8016e3c:	7fefffff 	.word	0x7fefffff
 8016e40:	20000364 	.word	0x20000364

08016e44 <json_object_set_value>:
        return JSONFailure;
    }
    return JSONSuccess;
}

JSON_Status json_object_set_value(JSON_Object *object, const char *name, JSON_Value *value) {
 8016e44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016e48:	b083      	sub	sp, #12
 8016e4a:	9201      	str	r2, [sp, #4]
    size_t i = 0;
    JSON_Value *old_value;
    if (object == NULL || name == NULL || value == NULL || value->parent != NULL) {
 8016e4c:	2800      	cmp	r0, #0
 8016e4e:	d05c      	beq.n	8016f0a <json_object_set_value+0xc6>
 8016e50:	460d      	mov	r5, r1
 8016e52:	2900      	cmp	r1, #0
 8016e54:	d059      	beq.n	8016f0a <json_object_set_value+0xc6>
 8016e56:	2a00      	cmp	r2, #0
 8016e58:	d057      	beq.n	8016f0a <json_object_set_value+0xc6>
 8016e5a:	6814      	ldr	r4, [r2, #0]
 8016e5c:	2c00      	cmp	r4, #0
 8016e5e:	d154      	bne.n	8016f0a <json_object_set_value+0xc6>
        return JSONFailure;
    }
    old_value = json_object_get_value(object, name);
 8016e60:	4680      	mov	r8, r0
    return json_object_getn_value(object, name, strlen(name));
 8016e62:	4608      	mov	r0, r1
 8016e64:	f7e9 f9d6 	bl	8000214 <strlen>
    return object ? object->count : 0;
 8016e68:	f8d8 900c 	ldr.w	r9, [r8, #12]
    return json_object_getn_value(object, name, strlen(name));
 8016e6c:	4606      	mov	r6, r0
    for (i = 0; i < json_object_get_count(object); i++) {
 8016e6e:	f1b9 0f00 	cmp.w	r9, #0
 8016e72:	d018      	beq.n	8016ea6 <json_object_set_value+0x62>
 8016e74:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8016e78:	46a2      	mov	sl, r4
 8016e7a:	3f04      	subs	r7, #4
        name_length = strlen(object->names[i]);
 8016e7c:	f857 4f04 	ldr.w	r4, [r7, #4]!
 8016e80:	4620      	mov	r0, r4
 8016e82:	f7e9 f9c7 	bl	8000214 <strlen>
 8016e86:	4684      	mov	ip, r0
        if (name_length != name_len) {
 8016e88:	4566      	cmp	r6, ip
 8016e8a:	ea4f 0b8a 	mov.w	fp, sl, lsl #2
        if (strncmp(object->names[i], name, name_len) == 0) {
 8016e8e:	4632      	mov	r2, r6
 8016e90:	4629      	mov	r1, r5
 8016e92:	4620      	mov	r0, r4
    for (i = 0; i < json_object_get_count(object); i++) {
 8016e94:	f10a 0a01 	add.w	sl, sl, #1
        if (name_length != name_len) {
 8016e98:	d103      	bne.n	8016ea2 <json_object_set_value+0x5e>
        if (strncmp(object->names[i], name, name_len) == 0) {
 8016e9a:	f001 fa47 	bl	801832c <strncmp>
 8016e9e:	4604      	mov	r4, r0
 8016ea0:	b150      	cbz	r0, 8016eb8 <json_object_set_value+0x74>
    for (i = 0; i < json_object_get_count(object); i++) {
 8016ea2:	45ca      	cmp	sl, r9
 8016ea4:	d1ea      	bne.n	8016e7c <json_object_set_value+0x38>
    return json_object_addn(object, name, strlen(name), value);
 8016ea6:	9b01      	ldr	r3, [sp, #4]
 8016ea8:	4632      	mov	r2, r6
 8016eaa:	4629      	mov	r1, r5
 8016eac:	4640      	mov	r0, r8
            }
        }
    }
    /* add new key value pair */
    return json_object_add(object, name, value);
}
 8016eae:	b003      	add	sp, #12
 8016eb0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return json_object_addn(object, name, strlen(name), value);
 8016eb4:	f7fe b900 	b.w	80150b8 <json_object_addn>
            return object->values[i];
 8016eb8:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8016ebc:	f853 000b 	ldr.w	r0, [r3, fp]
    if (old_value != NULL) { /* free and overwrite old value */
 8016ec0:	2800      	cmp	r0, #0
 8016ec2:	d0f0      	beq.n	8016ea6 <json_object_set_value+0x62>
        json_value_free(old_value);
 8016ec4:	f7ff fa5e 	bl	8016384 <json_value_free>
    return object ? object->count : 0;
 8016ec8:	f8d8 600c 	ldr.w	r6, [r8, #12]
        for (i = 0; i < json_object_get_count(object); i++) {
 8016ecc:	b1c6      	cbz	r6, 8016f00 <json_object_set_value+0xbc>
 8016ece:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8016ed2:	3f04      	subs	r7, #4
 8016ed4:	e001      	b.n	8016eda <json_object_set_value+0x96>
 8016ed6:	42b4      	cmp	r4, r6
 8016ed8:	d012      	beq.n	8016f00 <json_object_set_value+0xbc>
            if (strcmp(object->names[i], name) == 0) {
 8016eda:	f857 0f04 	ldr.w	r0, [r7, #4]!
 8016ede:	4629      	mov	r1, r5
 8016ee0:	f7e9 f98e 	bl	8000200 <strcmp>
        for (i = 0; i < json_object_get_count(object); i++) {
 8016ee4:	00a3      	lsls	r3, r4, #2
 8016ee6:	3401      	adds	r4, #1
            if (strcmp(object->names[i], name) == 0) {
 8016ee8:	2800      	cmp	r0, #0
 8016eea:	d1f4      	bne.n	8016ed6 <json_object_set_value+0x92>
                object->values[i] = value;
 8016eec:	f8d8 2008 	ldr.w	r2, [r8, #8]
                value->parent = json_object_get_wrapping_value(object);
 8016ef0:	9c01      	ldr	r4, [sp, #4]
 8016ef2:	f8d8 1000 	ldr.w	r1, [r8]
 8016ef6:	6021      	str	r1, [r4, #0]
                object->values[i] = value;
 8016ef8:	50d4      	str	r4, [r2, r3]
}
 8016efa:	b003      	add	sp, #12
 8016efc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016f00:	4628      	mov	r0, r5
 8016f02:	f7e9 f987 	bl	8000214 <strlen>
 8016f06:	4606      	mov	r6, r0
 8016f08:	e7cd      	b.n	8016ea6 <json_object_set_value+0x62>
        return JSONFailure;
 8016f0a:	f04f 30ff 	mov.w	r0, #4294967295
 8016f0e:	e7f4      	b.n	8016efa <json_object_set_value+0xb6>

08016f10 <json_object_dotset_value>:

JSON_Status json_object_set_null(JSON_Object *object, const char *name) {
    return json_object_set_value(object, name, json_value_init_null());
}

JSON_Status json_object_dotset_value(JSON_Object *object, const char *name, JSON_Value *value) {
 8016f10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016f14:	b083      	sub	sp, #12
 8016f16:	9201      	str	r2, [sp, #4]
    const char *dot_pos = NULL;
    JSON_Value *temp_value = NULL, *new_value = NULL;
    JSON_Object *temp_object = NULL, *new_object = NULL;
    JSON_Status status = JSONFailure;
    size_t name_len = 0;
    if (object == NULL || name == NULL || value == NULL) {
 8016f18:	2800      	cmp	r0, #0
 8016f1a:	f000 809f 	beq.w	801705c <json_object_dotset_value+0x14c>
 8016f1e:	460f      	mov	r7, r1
 8016f20:	2900      	cmp	r1, #0
 8016f22:	f000 809b 	beq.w	801705c <json_object_dotset_value+0x14c>
 8016f26:	4605      	mov	r5, r0
 8016f28:	2a00      	cmp	r2, #0
 8016f2a:	f000 8097 	beq.w	801705c <json_object_dotset_value+0x14c>
        return JSONFailure;
    }
    dot_pos = strchr(name, '.');
 8016f2e:	212e      	movs	r1, #46	; 0x2e
 8016f30:	4638      	mov	r0, r7
 8016f32:	f001 f9ee 	bl	8018312 <strchr>
    if (dot_pos == NULL) {
 8016f36:	4604      	mov	r4, r0
 8016f38:	2800      	cmp	r0, #0
 8016f3a:	f000 8094 	beq.w	8017066 <json_object_dotset_value+0x156>
    return object ? object->count : 0;
 8016f3e:	f8d5 900c 	ldr.w	r9, [r5, #12]
        return json_object_set_value(object, name, value);
    }
    name_len = dot_pos - name;
 8016f42:	eba0 0807 	sub.w	r8, r0, r7
    for (i = 0; i < json_object_get_count(object); i++) {
 8016f46:	f1b9 0f00 	cmp.w	r9, #0
 8016f4a:	d018      	beq.n	8016f7e <json_object_dotset_value+0x6e>
 8016f4c:	686e      	ldr	r6, [r5, #4]
 8016f4e:	f04f 0b00 	mov.w	fp, #0
 8016f52:	3e04      	subs	r6, #4
        name_length = strlen(object->names[i]);
 8016f54:	f856 af04 	ldr.w	sl, [r6, #4]!
 8016f58:	4650      	mov	r0, sl
 8016f5a:	f7e9 f95b 	bl	8000214 <strlen>
 8016f5e:	4684      	mov	ip, r0
        if (name_length != name_len) {
 8016f60:	45e0      	cmp	r8, ip
        if (strncmp(object->names[i], name, name_len) == 0) {
 8016f62:	4650      	mov	r0, sl
 8016f64:	4642      	mov	r2, r8
 8016f66:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8016f6a:	4639      	mov	r1, r7
    for (i = 0; i < json_object_get_count(object); i++) {
 8016f6c:	f10b 0b01 	add.w	fp, fp, #1
        if (name_length != name_len) {
 8016f70:	d103      	bne.n	8016f7a <json_object_dotset_value+0x6a>
        if (strncmp(object->names[i], name, name_len) == 0) {
 8016f72:	f001 f9db 	bl	801832c <strncmp>
 8016f76:	2800      	cmp	r0, #0
 8016f78:	d063      	beq.n	8017042 <json_object_dotset_value+0x132>
    for (i = 0; i < json_object_get_count(object); i++) {
 8016f7a:	45cb      	cmp	fp, r9
 8016f7c:	d1ea      	bne.n	8016f54 <json_object_dotset_value+0x44>
    JSON_Value *new_value = (JSON_Value*)parson_malloc(sizeof(JSON_Value));
 8016f7e:	f8df 9118 	ldr.w	r9, [pc, #280]	; 8017098 <json_object_dotset_value+0x188>
 8016f82:	2010      	movs	r0, #16
 8016f84:	f8d9 3000 	ldr.w	r3, [r9]
 8016f88:	4798      	blx	r3
    if (!new_value) {
 8016f8a:	4606      	mov	r6, r0
 8016f8c:	2800      	cmp	r0, #0
 8016f8e:	d065      	beq.n	801705c <json_object_dotset_value+0x14c>
    new_value->type = JSONObject;
 8016f90:	2200      	movs	r2, #0
 8016f92:	2304      	movs	r3, #4
 8016f94:	e9c0 2300 	strd	r2, r3, [r0]
    JSON_Object *new_obj = (JSON_Object*)parson_malloc(sizeof(JSON_Object));
 8016f98:	f8d9 3000 	ldr.w	r3, [r9]
 8016f9c:	2014      	movs	r0, #20
 8016f9e:	4798      	blx	r3
    if (new_obj == NULL) {
 8016fa0:	2200      	movs	r2, #0
 8016fa2:	4682      	mov	sl, r0
 8016fa4:	2800      	cmp	r0, #0
 8016fa6:	d066      	beq.n	8017076 <json_object_dotset_value+0x166>
    return json_value_get_type(value) == JSONObject ? value->value.object : NULL;
 8016fa8:	6873      	ldr	r3, [r6, #4]
    new_obj->wrapping_value = wrapping_value;
 8016faa:	6006      	str	r6, [r0, #0]
    return json_value_get_type(value) == JSONObject ? value->value.object : NULL;
 8016fac:	2b04      	cmp	r3, #4
 8016fae:	bf18      	it	ne
 8016fb0:	f04f 0a00 	movne.w	sl, #0
    new_value = json_value_init_object();
    if (new_value == NULL) {
        return JSONFailure;
    }
    new_object = json_value_get_object(new_value);
    status = json_object_dotset_value(new_object, dot_pos + 1, value);
 8016fb4:	3401      	adds	r4, #1
    new_obj->values = (JSON_Value**)NULL;
 8016fb6:	e9c0 2201 	strd	r2, r2, [r0, #4]
    new_obj->count = 0;
 8016fba:	e9c0 2203 	strd	r2, r2, [r0, #12]
    status = json_object_dotset_value(new_object, dot_pos + 1, value);
 8016fbe:	4621      	mov	r1, r4
    new_value->value.object = json_object_init(new_value);
 8016fc0:	60b0      	str	r0, [r6, #8]
    status = json_object_dotset_value(new_object, dot_pos + 1, value);
 8016fc2:	9a01      	ldr	r2, [sp, #4]
 8016fc4:	4650      	mov	r0, sl
 8016fc6:	f7ff ffa3 	bl	8016f10 <json_object_dotset_value>
    if (status != JSONSuccess) {
 8016fca:	2800      	cmp	r0, #0
 8016fcc:	d160      	bne.n	8017090 <json_object_dotset_value+0x180>
        json_value_free(new_value);
        return JSONFailure;
    }
    status = json_object_addn(object, name, name_len, new_value);
 8016fce:	4642      	mov	r2, r8
 8016fd0:	4639      	mov	r1, r7
 8016fd2:	4628      	mov	r0, r5
 8016fd4:	4633      	mov	r3, r6
 8016fd6:	f7fe f86f 	bl	80150b8 <json_object_addn>
    if (status != JSONSuccess) {
 8016fda:	2800      	cmp	r0, #0
 8016fdc:	d040      	beq.n	8017060 <json_object_dotset_value+0x150>
    const char *dot_pos = strchr(name, '.');
 8016fde:	212e      	movs	r1, #46	; 0x2e
 8016fe0:	4620      	mov	r0, r4
 8016fe2:	f001 f996 	bl	8018312 <strchr>
    if (dot_pos == NULL) {
 8016fe6:	9001      	str	r0, [sp, #4]
 8016fe8:	2800      	cmp	r0, #0
 8016fea:	d04c      	beq.n	8017086 <json_object_dotset_value+0x176>
    return object ? object->count : 0;
 8016fec:	f1ba 0f00 	cmp.w	sl, #0
 8016ff0:	d04e      	beq.n	8017090 <json_object_dotset_value+0x180>
 8016ff2:	f8da 900c 	ldr.w	r9, [sl, #12]
    temp_value = json_object_getn_value(object, name, dot_pos - name);
 8016ff6:	1b07      	subs	r7, r0, r4
    for (i = 0; i < json_object_get_count(object); i++) {
 8016ff8:	2500      	movs	r5, #0
 8016ffa:	e000      	b.n	8016ffe <json_object_dotset_value+0xee>
 8016ffc:	3501      	adds	r5, #1
 8016ffe:	45a9      	cmp	r9, r5
 8017000:	ea4f 0885 	mov.w	r8, r5, lsl #2
 8017004:	d044      	beq.n	8017090 <json_object_dotset_value+0x180>
        name_length = strlen(object->names[i]);
 8017006:	f8da 3004 	ldr.w	r3, [sl, #4]
 801700a:	f853 b025 	ldr.w	fp, [r3, r5, lsl #2]
 801700e:	4658      	mov	r0, fp
 8017010:	f7e9 f900 	bl	8000214 <strlen>
 8017014:	4684      	mov	ip, r0
        if (name_length != name_len) {
 8017016:	4567      	cmp	r7, ip
        if (strncmp(object->names[i], name, name_len) == 0) {
 8017018:	463a      	mov	r2, r7
 801701a:	4621      	mov	r1, r4
 801701c:	4658      	mov	r0, fp
        if (name_length != name_len) {
 801701e:	d1ed      	bne.n	8016ffc <json_object_dotset_value+0xec>
        if (strncmp(object->names[i], name, name_len) == 0) {
 8017020:	f001 f984 	bl	801832c <strncmp>
 8017024:	2800      	cmp	r0, #0
 8017026:	d1e9      	bne.n	8016ffc <json_object_dotset_value+0xec>
            return object->values[i];
 8017028:	f8da 3008 	ldr.w	r3, [sl, #8]
 801702c:	f853 3008 	ldr.w	r3, [r3, r8]
    return value ? value->type : JSONError;
 8017030:	b373      	cbz	r3, 8017090 <json_object_dotset_value+0x180>
    if (json_value_get_type(temp_value) != JSONObject) {
 8017032:	685a      	ldr	r2, [r3, #4]
 8017034:	2a04      	cmp	r2, #4
 8017036:	d12b      	bne.n	8017090 <json_object_dotset_value+0x180>
    return json_object_dotremove_internal(temp_object, dot_pos + 1, free_value);
 8017038:	9c01      	ldr	r4, [sp, #4]
    return json_value_get_type(value) == JSONObject ? value->value.object : NULL;
 801703a:	f8d3 a008 	ldr.w	sl, [r3, #8]
    return json_object_dotremove_internal(temp_object, dot_pos + 1, free_value);
 801703e:	3401      	adds	r4, #1
 8017040:	e7cd      	b.n	8016fde <json_object_dotset_value+0xce>
            return object->values[i];
 8017042:	68ab      	ldr	r3, [r5, #8]
 8017044:	f853 300a 	ldr.w	r3, [r3, sl]
    if (temp_value) {
 8017048:	2b00      	cmp	r3, #0
 801704a:	d098      	beq.n	8016f7e <json_object_dotset_value+0x6e>
        if (json_value_get_type(temp_value) != JSONObject) {
 801704c:	685a      	ldr	r2, [r3, #4]
 801704e:	2a04      	cmp	r2, #4
 8017050:	d104      	bne.n	801705c <json_object_dotset_value+0x14c>
    return json_value_get_type(value) == JSONObject ? value->value.object : NULL;
 8017052:	689d      	ldr	r5, [r3, #8]
        return json_object_dotset_value(temp_object, dot_pos + 1, value);
 8017054:	1c67      	adds	r7, r4, #1
    if (object == NULL || name == NULL || value == NULL) {
 8017056:	2d00      	cmp	r5, #0
 8017058:	f47f af69 	bne.w	8016f2e <json_object_dotset_value+0x1e>
        json_object_dotremove_internal(new_object, dot_pos + 1, 0);
        json_value_free(new_value);
        return JSONFailure;
 801705c:	f04f 30ff 	mov.w	r0, #4294967295
    }
    return JSONSuccess;
}
 8017060:	b003      	add	sp, #12
 8017062:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return json_object_set_value(object, name, value);
 8017066:	9a01      	ldr	r2, [sp, #4]
 8017068:	4639      	mov	r1, r7
 801706a:	4628      	mov	r0, r5
}
 801706c:	b003      	add	sp, #12
 801706e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        return json_object_set_value(object, name, value);
 8017072:	f7ff bee7 	b.w	8016e44 <json_object_set_value>
    new_value->value.object = json_object_init(new_value);
 8017076:	60b0      	str	r0, [r6, #8]
        parson_free(new_value);
 8017078:	f8d9 3004 	ldr.w	r3, [r9, #4]
 801707c:	4630      	mov	r0, r6
 801707e:	4798      	blx	r3
        return JSONFailure;
 8017080:	f04f 30ff 	mov.w	r0, #4294967295
 8017084:	e7ec      	b.n	8017060 <json_object_dotset_value+0x150>
        return json_object_remove_internal(object, name, free_value);
 8017086:	4602      	mov	r2, r0
 8017088:	4621      	mov	r1, r4
 801708a:	4650      	mov	r0, sl
 801708c:	f7ff f9d2 	bl	8016434 <json_object_remove_internal>
        json_value_free(new_value);
 8017090:	4630      	mov	r0, r6
 8017092:	f7ff f977 	bl	8016384 <json_value_free>
 8017096:	e7e1      	b.n	801705c <json_object_dotset_value+0x14c>
 8017098:	20000364 	.word	0x20000364

0801709c <json_object_dotset_string>:

JSON_Status json_object_dotset_string(JSON_Object *object, const char *name, const char *string) {
 801709c:	b570      	push	{r4, r5, r6, lr}
 801709e:	4604      	mov	r4, r0
    JSON_Value *value = json_value_init_string(string);
 80170a0:	4610      	mov	r0, r2
JSON_Status json_object_dotset_string(JSON_Object *object, const char *name, const char *string) {
 80170a2:	460e      	mov	r6, r1
    JSON_Value *value = json_value_init_string(string);
 80170a4:	f7ff fd06 	bl	8016ab4 <json_value_init_string>
    if (value == NULL) {
 80170a8:	b160      	cbz	r0, 80170c4 <json_object_dotset_string+0x28>
 80170aa:	4605      	mov	r5, r0
        return JSONFailure;
    }
    if (json_object_dotset_value(object, name, value) == JSONFailure) {
 80170ac:	4631      	mov	r1, r6
 80170ae:	4620      	mov	r0, r4
 80170b0:	462a      	mov	r2, r5
 80170b2:	f7ff ff2d 	bl	8016f10 <json_object_dotset_value>
 80170b6:	1c43      	adds	r3, r0, #1
 80170b8:	4604      	mov	r4, r0
        json_value_free(value);
        return JSONFailure;
    }
    return JSONSuccess;
 80170ba:	bf18      	it	ne
 80170bc:	2400      	movne	r4, #0
    if (json_object_dotset_value(object, name, value) == JSONFailure) {
 80170be:	d004      	beq.n	80170ca <json_object_dotset_string+0x2e>
}
 80170c0:	4620      	mov	r0, r4
 80170c2:	bd70      	pop	{r4, r5, r6, pc}
        return JSONFailure;
 80170c4:	f04f 34ff 	mov.w	r4, #4294967295
 80170c8:	e7fa      	b.n	80170c0 <json_object_dotset_string+0x24>
        json_value_free(value);
 80170ca:	4628      	mov	r0, r5
 80170cc:	f7ff f95a 	bl	8016384 <json_value_free>
        return JSONFailure;
 80170d0:	e7f6      	b.n	80170c0 <json_object_dotset_string+0x24>
 80170d2:	bf00      	nop

080170d4 <json_object_dotset_number>:

JSON_Status json_object_dotset_number(JSON_Object *object, const char *name, double number) {
 80170d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80170d8:	ec55 4b10 	vmov	r4, r5, d0
 80170dc:	4680      	mov	r8, r0
 80170de:	4689      	mov	r9, r1
    if (IS_NUMBER_INVALID(number)) {
 80170e0:	ee10 2a10 	vmov	r2, s0
 80170e4:	ee10 0a10 	vmov	r0, s0
 80170e8:	462b      	mov	r3, r5
 80170ea:	4629      	mov	r1, r5
 80170ec:	f7e9 fd46 	bl	8000b7c <__aeabi_dcmpun>
 80170f0:	bb50      	cbnz	r0, 8017148 <json_object_dotset_number+0x74>
 80170f2:	f025 4700 	bic.w	r7, r5, #2147483648	; 0x80000000
 80170f6:	4b19      	ldr	r3, [pc, #100]	; (801715c <json_object_dotset_number+0x88>)
 80170f8:	4620      	mov	r0, r4
 80170fa:	4639      	mov	r1, r7
 80170fc:	f04f 32ff 	mov.w	r2, #4294967295
 8017100:	f7e9 fd3c 	bl	8000b7c <__aeabi_dcmpun>
 8017104:	b938      	cbnz	r0, 8017116 <json_object_dotset_number+0x42>
 8017106:	4b15      	ldr	r3, [pc, #84]	; (801715c <json_object_dotset_number+0x88>)
 8017108:	4620      	mov	r0, r4
 801710a:	4639      	mov	r1, r7
 801710c:	f04f 32ff 	mov.w	r2, #4294967295
 8017110:	f7e9 fd16 	bl	8000b40 <__aeabi_dcmple>
 8017114:	b1c0      	cbz	r0, 8017148 <json_object_dotset_number+0x74>
    new_value = (JSON_Value*)parson_malloc(sizeof(JSON_Value));
 8017116:	4b12      	ldr	r3, [pc, #72]	; (8017160 <json_object_dotset_number+0x8c>)
 8017118:	2010      	movs	r0, #16
 801711a:	681b      	ldr	r3, [r3, #0]
 801711c:	4798      	blx	r3
    if (new_value == NULL) {
 801711e:	4606      	mov	r6, r0
 8017120:	b190      	cbz	r0, 8017148 <json_object_dotset_number+0x74>
    new_value->type = JSONNumber;
 8017122:	2303      	movs	r3, #3
    new_value->parent = NULL;
 8017124:	2700      	movs	r7, #0
    new_value->value.number = number;
 8017126:	e9c0 4502 	strd	r4, r5, [r0, #8]
    JSON_Value *value = json_value_init_number(number);
    if (value == NULL) {
        return JSONFailure;
    }
    if (json_object_dotset_value(object, name, value) == JSONFailure) {
 801712a:	4649      	mov	r1, r9
    new_value->type = JSONNumber;
 801712c:	e9c6 7300 	strd	r7, r3, [r6]
    if (json_object_dotset_value(object, name, value) == JSONFailure) {
 8017130:	4640      	mov	r0, r8
 8017132:	4632      	mov	r2, r6
 8017134:	f7ff feec 	bl	8016f10 <json_object_dotset_value>
 8017138:	1c43      	adds	r3, r0, #1
 801713a:	4604      	mov	r4, r0
        json_value_free(value);
        return JSONFailure;
    }
    return JSONSuccess;
 801713c:	bf18      	it	ne
 801713e:	463c      	movne	r4, r7
    if (json_object_dotset_value(object, name, value) == JSONFailure) {
 8017140:	d007      	beq.n	8017152 <json_object_dotset_number+0x7e>
}
 8017142:	4620      	mov	r0, r4
 8017144:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        return JSONFailure;
 8017148:	f04f 34ff 	mov.w	r4, #4294967295
}
 801714c:	4620      	mov	r0, r4
 801714e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        json_value_free(value);
 8017152:	4630      	mov	r0, r6
 8017154:	f7ff f916 	bl	8016384 <json_value_free>
        return JSONFailure;
 8017158:	e7f3      	b.n	8017142 <json_object_dotset_number+0x6e>
 801715a:	bf00      	nop
 801715c:	7fefffff 	.word	0x7fefffff
 8017160:	20000364 	.word	0x20000364

08017164 <json_object_dotset_boolean>:
    JSON_Value *new_value = (JSON_Value*)parson_malloc(sizeof(JSON_Value));
 8017164:	4b13      	ldr	r3, [pc, #76]	; (80171b4 <json_object_dotset_boolean+0x50>)

JSON_Status json_object_dotset_boolean(JSON_Object *object, const char *name, int boolean) {
 8017166:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    JSON_Value *new_value = (JSON_Value*)parson_malloc(sizeof(JSON_Value));
 801716a:	681b      	ldr	r3, [r3, #0]
JSON_Status json_object_dotset_boolean(JSON_Object *object, const char *name, int boolean) {
 801716c:	4680      	mov	r8, r0
    JSON_Value *new_value = (JSON_Value*)parson_malloc(sizeof(JSON_Value));
 801716e:	2010      	movs	r0, #16
JSON_Status json_object_dotset_boolean(JSON_Object *object, const char *name, int boolean) {
 8017170:	460e      	mov	r6, r1
 8017172:	4615      	mov	r5, r2
    JSON_Value *new_value = (JSON_Value*)parson_malloc(sizeof(JSON_Value));
 8017174:	4798      	blx	r3
    if (!new_value) {
 8017176:	b1a8      	cbz	r0, 80171a4 <json_object_dotset_boolean+0x40>
    new_value->value.boolean = boolean ? 1 : 0;
 8017178:	3d00      	subs	r5, #0
 801717a:	bf18      	it	ne
 801717c:	2501      	movne	r5, #1
 801717e:	4604      	mov	r4, r0
    new_value->type = JSONBoolean;
 8017180:	2306      	movs	r3, #6
    new_value->parent = NULL;
 8017182:	2700      	movs	r7, #0
    new_value->value.boolean = boolean ? 1 : 0;
 8017184:	6085      	str	r5, [r0, #8]
    JSON_Value *value = json_value_init_boolean(boolean);
    if (value == NULL) {
        return JSONFailure;
    }
    if (json_object_dotset_value(object, name, value) == JSONFailure) {
 8017186:	4631      	mov	r1, r6
    new_value->type = JSONBoolean;
 8017188:	e9c4 7300 	strd	r7, r3, [r4]
    if (json_object_dotset_value(object, name, value) == JSONFailure) {
 801718c:	4640      	mov	r0, r8
 801718e:	4622      	mov	r2, r4
 8017190:	f7ff febe 	bl	8016f10 <json_object_dotset_value>
 8017194:	1c43      	adds	r3, r0, #1
 8017196:	4605      	mov	r5, r0
        json_value_free(value);
        return JSONFailure;
    }
    return JSONSuccess;
 8017198:	bf18      	it	ne
 801719a:	463d      	movne	r5, r7
    if (json_object_dotset_value(object, name, value) == JSONFailure) {
 801719c:	d005      	beq.n	80171aa <json_object_dotset_boolean+0x46>
}
 801719e:	4628      	mov	r0, r5
 80171a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return JSONFailure;
 80171a4:	f04f 35ff 	mov.w	r5, #4294967295
 80171a8:	e7f9      	b.n	801719e <json_object_dotset_boolean+0x3a>
        json_value_free(value);
 80171aa:	4620      	mov	r0, r4
 80171ac:	f7ff f8ea 	bl	8016384 <json_value_free>
        return JSONFailure;
 80171b0:	e7f5      	b.n	801719e <json_object_dotset_boolean+0x3a>
 80171b2:	bf00      	nop
 80171b4:	20000364 	.word	0x20000364

080171b8 <json_set_allocation_functions>:
int json_boolean(const JSON_Value *value) {
    return json_value_get_boolean(value);
}

void json_set_allocation_functions(JSON_Malloc_Function malloc_fun, JSON_Free_Function free_fun) {
    parson_malloc = malloc_fun;
 80171b8:	4b01      	ldr	r3, [pc, #4]	; (80171c0 <json_set_allocation_functions+0x8>)
    parson_free = free_fun;
 80171ba:	e9c3 0100 	strd	r0, r1, [r3]
}
 80171be:	4770      	bx	lr
 80171c0:	20000364 	.word	0x20000364

080171c4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80171c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80171fc <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80171c8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80171ca:	e003      	b.n	80171d4 <LoopCopyDataInit>

080171cc <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80171cc:	4b0c      	ldr	r3, [pc, #48]	; (8017200 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80171ce:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80171d0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80171d2:	3104      	adds	r1, #4

080171d4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80171d4:	480b      	ldr	r0, [pc, #44]	; (8017204 <LoopForever+0xa>)
	ldr	r3, =_edata
 80171d6:	4b0c      	ldr	r3, [pc, #48]	; (8017208 <LoopForever+0xe>)
	adds	r2, r0, r1
 80171d8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80171da:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80171dc:	d3f6      	bcc.n	80171cc <CopyDataInit>
	ldr	r2, =_sbss
 80171de:	4a0b      	ldr	r2, [pc, #44]	; (801720c <LoopForever+0x12>)
	b	LoopFillZerobss
 80171e0:	e002      	b.n	80171e8 <LoopFillZerobss>

080171e2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80171e2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80171e4:	f842 3b04 	str.w	r3, [r2], #4

080171e8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80171e8:	4b09      	ldr	r3, [pc, #36]	; (8017210 <LoopForever+0x16>)
	cmp	r2, r3
 80171ea:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80171ec:	d3f9      	bcc.n	80171e2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80171ee:	f7ed fb8d 	bl	800490c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80171f2:	f000 fa2b 	bl	801764c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80171f6:	f7eb fdd1 	bl	8002d9c <main>

080171fa <LoopForever>:

LoopForever:
    b LoopForever
 80171fa:	e7fe      	b.n	80171fa <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80171fc:	200a0000 	.word	0x200a0000
	ldr	r3, =_sidata
 8017200:	0801c8f8 	.word	0x0801c8f8
	ldr	r0, =_sdata
 8017204:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8017208:	20000540 	.word	0x20000540
	ldr	r2, =_sbss
 801720c:	20000540 	.word	0x20000540
	ldr	r3, = _ebss
 8017210:	2001e3fc 	.word	0x2001e3fc

08017214 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8017214:	e7fe      	b.n	8017214 <ADC1_IRQHandler>
	...

08017218 <_sbrk>:
	char *prev_heap_end;
#ifdef FreeRTOS
	char *min_stack_ptr;
#endif

	if (heap_end == 0)
 8017218:	490c      	ldr	r1, [pc, #48]	; (801724c <_sbrk+0x34>)
{
 801721a:	b508      	push	{r3, lr}
	if (heap_end == 0)
 801721c:	680b      	ldr	r3, [r1, #0]
 801721e:	b153      	cbz	r3, 8017236 <_sbrk+0x1e>

	prev_heap_end = heap_end;

#ifdef FreeRTOS
	/* Use the NVIC offset register to locate the main stack pointer. */
	min_stack_ptr = (char*)(*(unsigned int *)*(unsigned int *)0xE000ED08);
 8017220:	4a0b      	ldr	r2, [pc, #44]	; (8017250 <_sbrk+0x38>)
 8017222:	6812      	ldr	r2, [r2, #0]
 8017224:	6812      	ldr	r2, [r2, #0]
	/* Locate the STACK bottom address */
	min_stack_ptr -= MAX_STACK_SIZE;

	if (heap_end + incr > min_stack_ptr)
 8017226:	4418      	add	r0, r3
	min_stack_ptr -= MAX_STACK_SIZE;
 8017228:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
	if (heap_end + incr > min_stack_ptr)
 801722c:	4290      	cmp	r0, r2
 801722e:	d805      	bhi.n	801723c <_sbrk+0x24>
//		abort();
		errno = ENOMEM;
		return (caddr_t) -1;
	}

	heap_end += incr;
 8017230:	6008      	str	r0, [r1, #0]

	return (caddr_t) prev_heap_end;
}
 8017232:	4618      	mov	r0, r3
 8017234:	bd08      	pop	{r3, pc}
		heap_end = &end;
 8017236:	4b07      	ldr	r3, [pc, #28]	; (8017254 <_sbrk+0x3c>)
 8017238:	600b      	str	r3, [r1, #0]
 801723a:	e7f1      	b.n	8017220 <_sbrk+0x8>
		errno = ENOMEM;
 801723c:	f000 f848 	bl	80172d0 <__errno>
 8017240:	230c      	movs	r3, #12
 8017242:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8017244:	f04f 33ff 	mov.w	r3, #4294967295
}
 8017248:	4618      	mov	r0, r3
 801724a:	bd08      	pop	{r3, pc}
 801724c:	200111dc 	.word	0x200111dc
 8017250:	e000ed08 	.word	0xe000ed08
 8017254:	2001e400 	.word	0x2001e400

08017258 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8017258:	2001      	movs	r0, #1
 801725a:	4770      	bx	lr

0801725c <_kill>:

int _kill(int pid, int sig)
{
 801725c:	b508      	push	{r3, lr}
	errno = EINVAL;
 801725e:	f000 f837 	bl	80172d0 <__errno>
 8017262:	2316      	movs	r3, #22
 8017264:	6003      	str	r3, [r0, #0]
	return -1;
}
 8017266:	f04f 30ff 	mov.w	r0, #4294967295
 801726a:	bd08      	pop	{r3, pc}

0801726c <_exit>:

void _exit (int status)
{
 801726c:	b508      	push	{r3, lr}
	errno = EINVAL;
 801726e:	f000 f82f 	bl	80172d0 <__errno>
 8017272:	2316      	movs	r3, #22
 8017274:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}
 8017276:	e7fe      	b.n	8017276 <_exit+0xa>

08017278 <_write>:
}

int _write(int file, char *ptr, int len)
{
 8017278:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

		for (DataIdx = 0; DataIdx < len; DataIdx++)
 801727a:	1e16      	subs	r6, r2, #0
 801727c:	dd07      	ble.n	801728e <_write+0x16>
 801727e:	460c      	mov	r4, r1
 8017280:	198d      	adds	r5, r1, r6
		{
		   __io_putchar( *ptr++ );
 8017282:	f814 0b01 	ldrb.w	r0, [r4], #1
 8017286:	f3af 8000 	nop.w
		for (DataIdx = 0; DataIdx < len; DataIdx++)
 801728a:	42ac      	cmp	r4, r5
 801728c:	d1f9      	bne.n	8017282 <_write+0xa>
		}
	return len;
}
 801728e:	4630      	mov	r0, r6
 8017290:	bd70      	pop	{r4, r5, r6, pc}
 8017292:	bf00      	nop

08017294 <_close>:

int _close(int file)
{
	return -1;
}
 8017294:	f04f 30ff 	mov.w	r0, #4294967295
 8017298:	4770      	bx	lr
 801729a:	bf00      	nop

0801729c <_fstat>:

int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 801729c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80172a0:	604b      	str	r3, [r1, #4]
	return 0;
}
 80172a2:	2000      	movs	r0, #0
 80172a4:	4770      	bx	lr
 80172a6:	bf00      	nop

080172a8 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 80172a8:	2001      	movs	r0, #1
 80172aa:	4770      	bx	lr

080172ac <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 80172ac:	2000      	movs	r0, #0
 80172ae:	4770      	bx	lr

080172b0 <_read>:

int _read(int file, char *ptr, int len)
{
 80172b0:	b510      	push	{r4, lr}
 80172b2:	460c      	mov	r4, r1
	/* scanf calls _read() with len=1024, so eat one character at time */
	*ptr = __io_getchar();
 80172b4:	f3af 8000 	nop.w
 80172b8:	7020      	strb	r0, [r4, #0]
	return 1;
}
 80172ba:	2001      	movs	r0, #1
 80172bc:	bd10      	pop	{r4, pc}
 80172be:	bf00      	nop

080172c0 <calloc>:
 80172c0:	4b02      	ldr	r3, [pc, #8]	; (80172cc <calloc+0xc>)
 80172c2:	460a      	mov	r2, r1
 80172c4:	4601      	mov	r1, r0
 80172c6:	6818      	ldr	r0, [r3, #0]
 80172c8:	f000 ba8c 	b.w	80177e4 <_calloc_r>
 80172cc:	2000036c 	.word	0x2000036c

080172d0 <__errno>:
 80172d0:	4b01      	ldr	r3, [pc, #4]	; (80172d8 <__errno+0x8>)
 80172d2:	6818      	ldr	r0, [r3, #0]
 80172d4:	4770      	bx	lr
 80172d6:	bf00      	nop
 80172d8:	2000036c 	.word	0x2000036c

080172dc <__sflush_r>:
 80172dc:	898a      	ldrh	r2, [r1, #12]
 80172de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80172e2:	4605      	mov	r5, r0
 80172e4:	0710      	lsls	r0, r2, #28
 80172e6:	460c      	mov	r4, r1
 80172e8:	d458      	bmi.n	801739c <__sflush_r+0xc0>
 80172ea:	684b      	ldr	r3, [r1, #4]
 80172ec:	2b00      	cmp	r3, #0
 80172ee:	dc05      	bgt.n	80172fc <__sflush_r+0x20>
 80172f0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80172f2:	2b00      	cmp	r3, #0
 80172f4:	dc02      	bgt.n	80172fc <__sflush_r+0x20>
 80172f6:	2000      	movs	r0, #0
 80172f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80172fc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80172fe:	2e00      	cmp	r6, #0
 8017300:	d0f9      	beq.n	80172f6 <__sflush_r+0x1a>
 8017302:	2300      	movs	r3, #0
 8017304:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8017308:	682f      	ldr	r7, [r5, #0]
 801730a:	602b      	str	r3, [r5, #0]
 801730c:	d032      	beq.n	8017374 <__sflush_r+0x98>
 801730e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8017310:	89a3      	ldrh	r3, [r4, #12]
 8017312:	075a      	lsls	r2, r3, #29
 8017314:	d505      	bpl.n	8017322 <__sflush_r+0x46>
 8017316:	6863      	ldr	r3, [r4, #4]
 8017318:	1ac0      	subs	r0, r0, r3
 801731a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801731c:	b10b      	cbz	r3, 8017322 <__sflush_r+0x46>
 801731e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8017320:	1ac0      	subs	r0, r0, r3
 8017322:	2300      	movs	r3, #0
 8017324:	4602      	mov	r2, r0
 8017326:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8017328:	6a21      	ldr	r1, [r4, #32]
 801732a:	4628      	mov	r0, r5
 801732c:	47b0      	blx	r6
 801732e:	1c43      	adds	r3, r0, #1
 8017330:	89a3      	ldrh	r3, [r4, #12]
 8017332:	d106      	bne.n	8017342 <__sflush_r+0x66>
 8017334:	6829      	ldr	r1, [r5, #0]
 8017336:	291d      	cmp	r1, #29
 8017338:	d82c      	bhi.n	8017394 <__sflush_r+0xb8>
 801733a:	4a2a      	ldr	r2, [pc, #168]	; (80173e4 <__sflush_r+0x108>)
 801733c:	40ca      	lsrs	r2, r1
 801733e:	07d6      	lsls	r6, r2, #31
 8017340:	d528      	bpl.n	8017394 <__sflush_r+0xb8>
 8017342:	2200      	movs	r2, #0
 8017344:	6062      	str	r2, [r4, #4]
 8017346:	04d9      	lsls	r1, r3, #19
 8017348:	6922      	ldr	r2, [r4, #16]
 801734a:	6022      	str	r2, [r4, #0]
 801734c:	d504      	bpl.n	8017358 <__sflush_r+0x7c>
 801734e:	1c42      	adds	r2, r0, #1
 8017350:	d101      	bne.n	8017356 <__sflush_r+0x7a>
 8017352:	682b      	ldr	r3, [r5, #0]
 8017354:	b903      	cbnz	r3, 8017358 <__sflush_r+0x7c>
 8017356:	6560      	str	r0, [r4, #84]	; 0x54
 8017358:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801735a:	602f      	str	r7, [r5, #0]
 801735c:	2900      	cmp	r1, #0
 801735e:	d0ca      	beq.n	80172f6 <__sflush_r+0x1a>
 8017360:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017364:	4299      	cmp	r1, r3
 8017366:	d002      	beq.n	801736e <__sflush_r+0x92>
 8017368:	4628      	mov	r0, r5
 801736a:	f000 fa4b 	bl	8017804 <_free_r>
 801736e:	2000      	movs	r0, #0
 8017370:	6360      	str	r0, [r4, #52]	; 0x34
 8017372:	e7c1      	b.n	80172f8 <__sflush_r+0x1c>
 8017374:	6a21      	ldr	r1, [r4, #32]
 8017376:	2301      	movs	r3, #1
 8017378:	4628      	mov	r0, r5
 801737a:	47b0      	blx	r6
 801737c:	1c41      	adds	r1, r0, #1
 801737e:	d1c7      	bne.n	8017310 <__sflush_r+0x34>
 8017380:	682b      	ldr	r3, [r5, #0]
 8017382:	2b00      	cmp	r3, #0
 8017384:	d0c4      	beq.n	8017310 <__sflush_r+0x34>
 8017386:	2b1d      	cmp	r3, #29
 8017388:	d001      	beq.n	801738e <__sflush_r+0xb2>
 801738a:	2b16      	cmp	r3, #22
 801738c:	d101      	bne.n	8017392 <__sflush_r+0xb6>
 801738e:	602f      	str	r7, [r5, #0]
 8017390:	e7b1      	b.n	80172f6 <__sflush_r+0x1a>
 8017392:	89a3      	ldrh	r3, [r4, #12]
 8017394:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017398:	81a3      	strh	r3, [r4, #12]
 801739a:	e7ad      	b.n	80172f8 <__sflush_r+0x1c>
 801739c:	690f      	ldr	r7, [r1, #16]
 801739e:	2f00      	cmp	r7, #0
 80173a0:	d0a9      	beq.n	80172f6 <__sflush_r+0x1a>
 80173a2:	0793      	lsls	r3, r2, #30
 80173a4:	680e      	ldr	r6, [r1, #0]
 80173a6:	bf08      	it	eq
 80173a8:	694b      	ldreq	r3, [r1, #20]
 80173aa:	600f      	str	r7, [r1, #0]
 80173ac:	bf18      	it	ne
 80173ae:	2300      	movne	r3, #0
 80173b0:	eba6 0807 	sub.w	r8, r6, r7
 80173b4:	608b      	str	r3, [r1, #8]
 80173b6:	f1b8 0f00 	cmp.w	r8, #0
 80173ba:	dd9c      	ble.n	80172f6 <__sflush_r+0x1a>
 80173bc:	6a21      	ldr	r1, [r4, #32]
 80173be:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80173c0:	4643      	mov	r3, r8
 80173c2:	463a      	mov	r2, r7
 80173c4:	4628      	mov	r0, r5
 80173c6:	47b0      	blx	r6
 80173c8:	2800      	cmp	r0, #0
 80173ca:	dc06      	bgt.n	80173da <__sflush_r+0xfe>
 80173cc:	89a3      	ldrh	r3, [r4, #12]
 80173ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80173d2:	81a3      	strh	r3, [r4, #12]
 80173d4:	f04f 30ff 	mov.w	r0, #4294967295
 80173d8:	e78e      	b.n	80172f8 <__sflush_r+0x1c>
 80173da:	4407      	add	r7, r0
 80173dc:	eba8 0800 	sub.w	r8, r8, r0
 80173e0:	e7e9      	b.n	80173b6 <__sflush_r+0xda>
 80173e2:	bf00      	nop
 80173e4:	20400001 	.word	0x20400001

080173e8 <_fflush_r>:
 80173e8:	b538      	push	{r3, r4, r5, lr}
 80173ea:	690b      	ldr	r3, [r1, #16]
 80173ec:	4605      	mov	r5, r0
 80173ee:	460c      	mov	r4, r1
 80173f0:	b913      	cbnz	r3, 80173f8 <_fflush_r+0x10>
 80173f2:	2500      	movs	r5, #0
 80173f4:	4628      	mov	r0, r5
 80173f6:	bd38      	pop	{r3, r4, r5, pc}
 80173f8:	b118      	cbz	r0, 8017402 <_fflush_r+0x1a>
 80173fa:	6983      	ldr	r3, [r0, #24]
 80173fc:	b90b      	cbnz	r3, 8017402 <_fflush_r+0x1a>
 80173fe:	f000 f887 	bl	8017510 <__sinit>
 8017402:	4b14      	ldr	r3, [pc, #80]	; (8017454 <_fflush_r+0x6c>)
 8017404:	429c      	cmp	r4, r3
 8017406:	d11b      	bne.n	8017440 <_fflush_r+0x58>
 8017408:	686c      	ldr	r4, [r5, #4]
 801740a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801740e:	2b00      	cmp	r3, #0
 8017410:	d0ef      	beq.n	80173f2 <_fflush_r+0xa>
 8017412:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8017414:	07d0      	lsls	r0, r2, #31
 8017416:	d404      	bmi.n	8017422 <_fflush_r+0x3a>
 8017418:	0599      	lsls	r1, r3, #22
 801741a:	d402      	bmi.n	8017422 <_fflush_r+0x3a>
 801741c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801741e:	f000 f93a 	bl	8017696 <__retarget_lock_acquire_recursive>
 8017422:	4628      	mov	r0, r5
 8017424:	4621      	mov	r1, r4
 8017426:	f7ff ff59 	bl	80172dc <__sflush_r>
 801742a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801742c:	07da      	lsls	r2, r3, #31
 801742e:	4605      	mov	r5, r0
 8017430:	d4e0      	bmi.n	80173f4 <_fflush_r+0xc>
 8017432:	89a3      	ldrh	r3, [r4, #12]
 8017434:	059b      	lsls	r3, r3, #22
 8017436:	d4dd      	bmi.n	80173f4 <_fflush_r+0xc>
 8017438:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801743a:	f000 f92d 	bl	8017698 <__retarget_lock_release_recursive>
 801743e:	e7d9      	b.n	80173f4 <_fflush_r+0xc>
 8017440:	4b05      	ldr	r3, [pc, #20]	; (8017458 <_fflush_r+0x70>)
 8017442:	429c      	cmp	r4, r3
 8017444:	d101      	bne.n	801744a <_fflush_r+0x62>
 8017446:	68ac      	ldr	r4, [r5, #8]
 8017448:	e7df      	b.n	801740a <_fflush_r+0x22>
 801744a:	4b04      	ldr	r3, [pc, #16]	; (801745c <_fflush_r+0x74>)
 801744c:	429c      	cmp	r4, r3
 801744e:	bf08      	it	eq
 8017450:	68ec      	ldreq	r4, [r5, #12]
 8017452:	e7da      	b.n	801740a <_fflush_r+0x22>
 8017454:	0801c558 	.word	0x0801c558
 8017458:	0801c578 	.word	0x0801c578
 801745c:	0801c538 	.word	0x0801c538

08017460 <std>:
 8017460:	2300      	movs	r3, #0
 8017462:	b510      	push	{r4, lr}
 8017464:	4604      	mov	r4, r0
 8017466:	e9c0 3300 	strd	r3, r3, [r0]
 801746a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801746e:	6083      	str	r3, [r0, #8]
 8017470:	8181      	strh	r1, [r0, #12]
 8017472:	6643      	str	r3, [r0, #100]	; 0x64
 8017474:	81c2      	strh	r2, [r0, #14]
 8017476:	6183      	str	r3, [r0, #24]
 8017478:	4619      	mov	r1, r3
 801747a:	2208      	movs	r2, #8
 801747c:	305c      	adds	r0, #92	; 0x5c
 801747e:	f000 f9a9 	bl	80177d4 <memset>
 8017482:	4b05      	ldr	r3, [pc, #20]	; (8017498 <std+0x38>)
 8017484:	6263      	str	r3, [r4, #36]	; 0x24
 8017486:	4b05      	ldr	r3, [pc, #20]	; (801749c <std+0x3c>)
 8017488:	62a3      	str	r3, [r4, #40]	; 0x28
 801748a:	4b05      	ldr	r3, [pc, #20]	; (80174a0 <std+0x40>)
 801748c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801748e:	4b05      	ldr	r3, [pc, #20]	; (80174a4 <std+0x44>)
 8017490:	6224      	str	r4, [r4, #32]
 8017492:	6323      	str	r3, [r4, #48]	; 0x30
 8017494:	bd10      	pop	{r4, pc}
 8017496:	bf00      	nop
 8017498:	0801828d 	.word	0x0801828d
 801749c:	080182af 	.word	0x080182af
 80174a0:	080182e7 	.word	0x080182e7
 80174a4:	0801830b 	.word	0x0801830b

080174a8 <_cleanup_r>:
 80174a8:	4901      	ldr	r1, [pc, #4]	; (80174b0 <_cleanup_r+0x8>)
 80174aa:	f000 b8af 	b.w	801760c <_fwalk_reent>
 80174ae:	bf00      	nop
 80174b0:	080173e9 	.word	0x080173e9

080174b4 <__sfmoreglue>:
 80174b4:	b570      	push	{r4, r5, r6, lr}
 80174b6:	1e4a      	subs	r2, r1, #1
 80174b8:	2568      	movs	r5, #104	; 0x68
 80174ba:	4355      	muls	r5, r2
 80174bc:	460e      	mov	r6, r1
 80174be:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80174c2:	f000 f9ef 	bl	80178a4 <_malloc_r>
 80174c6:	4604      	mov	r4, r0
 80174c8:	b140      	cbz	r0, 80174dc <__sfmoreglue+0x28>
 80174ca:	2100      	movs	r1, #0
 80174cc:	e9c0 1600 	strd	r1, r6, [r0]
 80174d0:	300c      	adds	r0, #12
 80174d2:	60a0      	str	r0, [r4, #8]
 80174d4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80174d8:	f000 f97c 	bl	80177d4 <memset>
 80174dc:	4620      	mov	r0, r4
 80174de:	bd70      	pop	{r4, r5, r6, pc}

080174e0 <__sfp_lock_acquire>:
 80174e0:	4801      	ldr	r0, [pc, #4]	; (80174e8 <__sfp_lock_acquire+0x8>)
 80174e2:	f000 b8d8 	b.w	8017696 <__retarget_lock_acquire_recursive>
 80174e6:	bf00      	nop
 80174e8:	2001e3f0 	.word	0x2001e3f0

080174ec <__sfp_lock_release>:
 80174ec:	4801      	ldr	r0, [pc, #4]	; (80174f4 <__sfp_lock_release+0x8>)
 80174ee:	f000 b8d3 	b.w	8017698 <__retarget_lock_release_recursive>
 80174f2:	bf00      	nop
 80174f4:	2001e3f0 	.word	0x2001e3f0

080174f8 <__sinit_lock_acquire>:
 80174f8:	4801      	ldr	r0, [pc, #4]	; (8017500 <__sinit_lock_acquire+0x8>)
 80174fa:	f000 b8cc 	b.w	8017696 <__retarget_lock_acquire_recursive>
 80174fe:	bf00      	nop
 8017500:	2001e3ef 	.word	0x2001e3ef

08017504 <__sinit_lock_release>:
 8017504:	4801      	ldr	r0, [pc, #4]	; (801750c <__sinit_lock_release+0x8>)
 8017506:	f000 b8c7 	b.w	8017698 <__retarget_lock_release_recursive>
 801750a:	bf00      	nop
 801750c:	2001e3ef 	.word	0x2001e3ef

08017510 <__sinit>:
 8017510:	b510      	push	{r4, lr}
 8017512:	4604      	mov	r4, r0
 8017514:	f7ff fff0 	bl	80174f8 <__sinit_lock_acquire>
 8017518:	69a3      	ldr	r3, [r4, #24]
 801751a:	b11b      	cbz	r3, 8017524 <__sinit+0x14>
 801751c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017520:	f7ff bff0 	b.w	8017504 <__sinit_lock_release>
 8017524:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8017528:	6523      	str	r3, [r4, #80]	; 0x50
 801752a:	4b13      	ldr	r3, [pc, #76]	; (8017578 <__sinit+0x68>)
 801752c:	4a13      	ldr	r2, [pc, #76]	; (801757c <__sinit+0x6c>)
 801752e:	681b      	ldr	r3, [r3, #0]
 8017530:	62a2      	str	r2, [r4, #40]	; 0x28
 8017532:	42a3      	cmp	r3, r4
 8017534:	bf04      	itt	eq
 8017536:	2301      	moveq	r3, #1
 8017538:	61a3      	streq	r3, [r4, #24]
 801753a:	4620      	mov	r0, r4
 801753c:	f000 f820 	bl	8017580 <__sfp>
 8017540:	6060      	str	r0, [r4, #4]
 8017542:	4620      	mov	r0, r4
 8017544:	f000 f81c 	bl	8017580 <__sfp>
 8017548:	60a0      	str	r0, [r4, #8]
 801754a:	4620      	mov	r0, r4
 801754c:	f000 f818 	bl	8017580 <__sfp>
 8017550:	2200      	movs	r2, #0
 8017552:	60e0      	str	r0, [r4, #12]
 8017554:	2104      	movs	r1, #4
 8017556:	6860      	ldr	r0, [r4, #4]
 8017558:	f7ff ff82 	bl	8017460 <std>
 801755c:	68a0      	ldr	r0, [r4, #8]
 801755e:	2201      	movs	r2, #1
 8017560:	2109      	movs	r1, #9
 8017562:	f7ff ff7d 	bl	8017460 <std>
 8017566:	68e0      	ldr	r0, [r4, #12]
 8017568:	2202      	movs	r2, #2
 801756a:	2112      	movs	r1, #18
 801756c:	f7ff ff78 	bl	8017460 <std>
 8017570:	2301      	movs	r3, #1
 8017572:	61a3      	str	r3, [r4, #24]
 8017574:	e7d2      	b.n	801751c <__sinit+0xc>
 8017576:	bf00      	nop
 8017578:	0801c598 	.word	0x0801c598
 801757c:	080174a9 	.word	0x080174a9

08017580 <__sfp>:
 8017580:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017582:	4607      	mov	r7, r0
 8017584:	f7ff ffac 	bl	80174e0 <__sfp_lock_acquire>
 8017588:	4b1e      	ldr	r3, [pc, #120]	; (8017604 <__sfp+0x84>)
 801758a:	681e      	ldr	r6, [r3, #0]
 801758c:	69b3      	ldr	r3, [r6, #24]
 801758e:	b913      	cbnz	r3, 8017596 <__sfp+0x16>
 8017590:	4630      	mov	r0, r6
 8017592:	f7ff ffbd 	bl	8017510 <__sinit>
 8017596:	3648      	adds	r6, #72	; 0x48
 8017598:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801759c:	3b01      	subs	r3, #1
 801759e:	d503      	bpl.n	80175a8 <__sfp+0x28>
 80175a0:	6833      	ldr	r3, [r6, #0]
 80175a2:	b30b      	cbz	r3, 80175e8 <__sfp+0x68>
 80175a4:	6836      	ldr	r6, [r6, #0]
 80175a6:	e7f7      	b.n	8017598 <__sfp+0x18>
 80175a8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80175ac:	b9d5      	cbnz	r5, 80175e4 <__sfp+0x64>
 80175ae:	4b16      	ldr	r3, [pc, #88]	; (8017608 <__sfp+0x88>)
 80175b0:	60e3      	str	r3, [r4, #12]
 80175b2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80175b6:	6665      	str	r5, [r4, #100]	; 0x64
 80175b8:	f000 f86c 	bl	8017694 <__retarget_lock_init_recursive>
 80175bc:	f7ff ff96 	bl	80174ec <__sfp_lock_release>
 80175c0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80175c4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80175c8:	6025      	str	r5, [r4, #0]
 80175ca:	61a5      	str	r5, [r4, #24]
 80175cc:	2208      	movs	r2, #8
 80175ce:	4629      	mov	r1, r5
 80175d0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80175d4:	f000 f8fe 	bl	80177d4 <memset>
 80175d8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80175dc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80175e0:	4620      	mov	r0, r4
 80175e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80175e4:	3468      	adds	r4, #104	; 0x68
 80175e6:	e7d9      	b.n	801759c <__sfp+0x1c>
 80175e8:	2104      	movs	r1, #4
 80175ea:	4638      	mov	r0, r7
 80175ec:	f7ff ff62 	bl	80174b4 <__sfmoreglue>
 80175f0:	4604      	mov	r4, r0
 80175f2:	6030      	str	r0, [r6, #0]
 80175f4:	2800      	cmp	r0, #0
 80175f6:	d1d5      	bne.n	80175a4 <__sfp+0x24>
 80175f8:	f7ff ff78 	bl	80174ec <__sfp_lock_release>
 80175fc:	230c      	movs	r3, #12
 80175fe:	603b      	str	r3, [r7, #0]
 8017600:	e7ee      	b.n	80175e0 <__sfp+0x60>
 8017602:	bf00      	nop
 8017604:	0801c598 	.word	0x0801c598
 8017608:	ffff0001 	.word	0xffff0001

0801760c <_fwalk_reent>:
 801760c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017610:	4606      	mov	r6, r0
 8017612:	4688      	mov	r8, r1
 8017614:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8017618:	2700      	movs	r7, #0
 801761a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801761e:	f1b9 0901 	subs.w	r9, r9, #1
 8017622:	d505      	bpl.n	8017630 <_fwalk_reent+0x24>
 8017624:	6824      	ldr	r4, [r4, #0]
 8017626:	2c00      	cmp	r4, #0
 8017628:	d1f7      	bne.n	801761a <_fwalk_reent+0xe>
 801762a:	4638      	mov	r0, r7
 801762c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017630:	89ab      	ldrh	r3, [r5, #12]
 8017632:	2b01      	cmp	r3, #1
 8017634:	d907      	bls.n	8017646 <_fwalk_reent+0x3a>
 8017636:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801763a:	3301      	adds	r3, #1
 801763c:	d003      	beq.n	8017646 <_fwalk_reent+0x3a>
 801763e:	4629      	mov	r1, r5
 8017640:	4630      	mov	r0, r6
 8017642:	47c0      	blx	r8
 8017644:	4307      	orrs	r7, r0
 8017646:	3568      	adds	r5, #104	; 0x68
 8017648:	e7e9      	b.n	801761e <_fwalk_reent+0x12>
	...

0801764c <__libc_init_array>:
 801764c:	b570      	push	{r4, r5, r6, lr}
 801764e:	4d0d      	ldr	r5, [pc, #52]	; (8017684 <__libc_init_array+0x38>)
 8017650:	4c0d      	ldr	r4, [pc, #52]	; (8017688 <__libc_init_array+0x3c>)
 8017652:	1b64      	subs	r4, r4, r5
 8017654:	10a4      	asrs	r4, r4, #2
 8017656:	2600      	movs	r6, #0
 8017658:	42a6      	cmp	r6, r4
 801765a:	d109      	bne.n	8017670 <__libc_init_array+0x24>
 801765c:	4d0b      	ldr	r5, [pc, #44]	; (801768c <__libc_init_array+0x40>)
 801765e:	4c0c      	ldr	r4, [pc, #48]	; (8017690 <__libc_init_array+0x44>)
 8017660:	f004 f8b0 	bl	801b7c4 <_init>
 8017664:	1b64      	subs	r4, r4, r5
 8017666:	10a4      	asrs	r4, r4, #2
 8017668:	2600      	movs	r6, #0
 801766a:	42a6      	cmp	r6, r4
 801766c:	d105      	bne.n	801767a <__libc_init_array+0x2e>
 801766e:	bd70      	pop	{r4, r5, r6, pc}
 8017670:	f855 3b04 	ldr.w	r3, [r5], #4
 8017674:	4798      	blx	r3
 8017676:	3601      	adds	r6, #1
 8017678:	e7ee      	b.n	8017658 <__libc_init_array+0xc>
 801767a:	f855 3b04 	ldr.w	r3, [r5], #4
 801767e:	4798      	blx	r3
 8017680:	3601      	adds	r6, #1
 8017682:	e7f2      	b.n	801766a <__libc_init_array+0x1e>
 8017684:	0801c8e8 	.word	0x0801c8e8
 8017688:	0801c8e8 	.word	0x0801c8e8
 801768c:	0801c8e8 	.word	0x0801c8e8
 8017690:	0801c8ec 	.word	0x0801c8ec

08017694 <__retarget_lock_init_recursive>:
 8017694:	4770      	bx	lr

08017696 <__retarget_lock_acquire_recursive>:
 8017696:	4770      	bx	lr

08017698 <__retarget_lock_release_recursive>:
 8017698:	4770      	bx	lr

0801769a <__swhatbuf_r>:
 801769a:	b570      	push	{r4, r5, r6, lr}
 801769c:	460e      	mov	r6, r1
 801769e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80176a2:	2900      	cmp	r1, #0
 80176a4:	b096      	sub	sp, #88	; 0x58
 80176a6:	4614      	mov	r4, r2
 80176a8:	461d      	mov	r5, r3
 80176aa:	da07      	bge.n	80176bc <__swhatbuf_r+0x22>
 80176ac:	2300      	movs	r3, #0
 80176ae:	602b      	str	r3, [r5, #0]
 80176b0:	89b3      	ldrh	r3, [r6, #12]
 80176b2:	061a      	lsls	r2, r3, #24
 80176b4:	d410      	bmi.n	80176d8 <__swhatbuf_r+0x3e>
 80176b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80176ba:	e00e      	b.n	80176da <__swhatbuf_r+0x40>
 80176bc:	466a      	mov	r2, sp
 80176be:	f002 fc77 	bl	8019fb0 <_fstat_r>
 80176c2:	2800      	cmp	r0, #0
 80176c4:	dbf2      	blt.n	80176ac <__swhatbuf_r+0x12>
 80176c6:	9a01      	ldr	r2, [sp, #4]
 80176c8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80176cc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80176d0:	425a      	negs	r2, r3
 80176d2:	415a      	adcs	r2, r3
 80176d4:	602a      	str	r2, [r5, #0]
 80176d6:	e7ee      	b.n	80176b6 <__swhatbuf_r+0x1c>
 80176d8:	2340      	movs	r3, #64	; 0x40
 80176da:	2000      	movs	r0, #0
 80176dc:	6023      	str	r3, [r4, #0]
 80176de:	b016      	add	sp, #88	; 0x58
 80176e0:	bd70      	pop	{r4, r5, r6, pc}
	...

080176e4 <__smakebuf_r>:
 80176e4:	898b      	ldrh	r3, [r1, #12]
 80176e6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80176e8:	079d      	lsls	r5, r3, #30
 80176ea:	4606      	mov	r6, r0
 80176ec:	460c      	mov	r4, r1
 80176ee:	d507      	bpl.n	8017700 <__smakebuf_r+0x1c>
 80176f0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80176f4:	6023      	str	r3, [r4, #0]
 80176f6:	6123      	str	r3, [r4, #16]
 80176f8:	2301      	movs	r3, #1
 80176fa:	6163      	str	r3, [r4, #20]
 80176fc:	b002      	add	sp, #8
 80176fe:	bd70      	pop	{r4, r5, r6, pc}
 8017700:	ab01      	add	r3, sp, #4
 8017702:	466a      	mov	r2, sp
 8017704:	f7ff ffc9 	bl	801769a <__swhatbuf_r>
 8017708:	9900      	ldr	r1, [sp, #0]
 801770a:	4605      	mov	r5, r0
 801770c:	4630      	mov	r0, r6
 801770e:	f000 f8c9 	bl	80178a4 <_malloc_r>
 8017712:	b948      	cbnz	r0, 8017728 <__smakebuf_r+0x44>
 8017714:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017718:	059a      	lsls	r2, r3, #22
 801771a:	d4ef      	bmi.n	80176fc <__smakebuf_r+0x18>
 801771c:	f023 0303 	bic.w	r3, r3, #3
 8017720:	f043 0302 	orr.w	r3, r3, #2
 8017724:	81a3      	strh	r3, [r4, #12]
 8017726:	e7e3      	b.n	80176f0 <__smakebuf_r+0xc>
 8017728:	4b0d      	ldr	r3, [pc, #52]	; (8017760 <__smakebuf_r+0x7c>)
 801772a:	62b3      	str	r3, [r6, #40]	; 0x28
 801772c:	89a3      	ldrh	r3, [r4, #12]
 801772e:	6020      	str	r0, [r4, #0]
 8017730:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017734:	81a3      	strh	r3, [r4, #12]
 8017736:	9b00      	ldr	r3, [sp, #0]
 8017738:	6163      	str	r3, [r4, #20]
 801773a:	9b01      	ldr	r3, [sp, #4]
 801773c:	6120      	str	r0, [r4, #16]
 801773e:	b15b      	cbz	r3, 8017758 <__smakebuf_r+0x74>
 8017740:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017744:	4630      	mov	r0, r6
 8017746:	f002 ffb5 	bl	801a6b4 <_isatty_r>
 801774a:	b128      	cbz	r0, 8017758 <__smakebuf_r+0x74>
 801774c:	89a3      	ldrh	r3, [r4, #12]
 801774e:	f023 0303 	bic.w	r3, r3, #3
 8017752:	f043 0301 	orr.w	r3, r3, #1
 8017756:	81a3      	strh	r3, [r4, #12]
 8017758:	89a0      	ldrh	r0, [r4, #12]
 801775a:	4305      	orrs	r5, r0
 801775c:	81a5      	strh	r5, [r4, #12]
 801775e:	e7cd      	b.n	80176fc <__smakebuf_r+0x18>
 8017760:	080174a9 	.word	0x080174a9

08017764 <malloc>:
 8017764:	4b02      	ldr	r3, [pc, #8]	; (8017770 <malloc+0xc>)
 8017766:	4601      	mov	r1, r0
 8017768:	6818      	ldr	r0, [r3, #0]
 801776a:	f000 b89b 	b.w	80178a4 <_malloc_r>
 801776e:	bf00      	nop
 8017770:	2000036c 	.word	0x2000036c

08017774 <free>:
 8017774:	4b02      	ldr	r3, [pc, #8]	; (8017780 <free+0xc>)
 8017776:	4601      	mov	r1, r0
 8017778:	6818      	ldr	r0, [r3, #0]
 801777a:	f000 b843 	b.w	8017804 <_free_r>
 801777e:	bf00      	nop
 8017780:	2000036c 	.word	0x2000036c

08017784 <memcpy>:
 8017784:	440a      	add	r2, r1
 8017786:	4291      	cmp	r1, r2
 8017788:	f100 33ff 	add.w	r3, r0, #4294967295
 801778c:	d100      	bne.n	8017790 <memcpy+0xc>
 801778e:	4770      	bx	lr
 8017790:	b510      	push	{r4, lr}
 8017792:	f811 4b01 	ldrb.w	r4, [r1], #1
 8017796:	f803 4f01 	strb.w	r4, [r3, #1]!
 801779a:	4291      	cmp	r1, r2
 801779c:	d1f9      	bne.n	8017792 <memcpy+0xe>
 801779e:	bd10      	pop	{r4, pc}

080177a0 <memmove>:
 80177a0:	4288      	cmp	r0, r1
 80177a2:	b510      	push	{r4, lr}
 80177a4:	eb01 0402 	add.w	r4, r1, r2
 80177a8:	d902      	bls.n	80177b0 <memmove+0x10>
 80177aa:	4284      	cmp	r4, r0
 80177ac:	4623      	mov	r3, r4
 80177ae:	d807      	bhi.n	80177c0 <memmove+0x20>
 80177b0:	1e43      	subs	r3, r0, #1
 80177b2:	42a1      	cmp	r1, r4
 80177b4:	d008      	beq.n	80177c8 <memmove+0x28>
 80177b6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80177ba:	f803 2f01 	strb.w	r2, [r3, #1]!
 80177be:	e7f8      	b.n	80177b2 <memmove+0x12>
 80177c0:	4402      	add	r2, r0
 80177c2:	4601      	mov	r1, r0
 80177c4:	428a      	cmp	r2, r1
 80177c6:	d100      	bne.n	80177ca <memmove+0x2a>
 80177c8:	bd10      	pop	{r4, pc}
 80177ca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80177ce:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80177d2:	e7f7      	b.n	80177c4 <memmove+0x24>

080177d4 <memset>:
 80177d4:	4402      	add	r2, r0
 80177d6:	4603      	mov	r3, r0
 80177d8:	4293      	cmp	r3, r2
 80177da:	d100      	bne.n	80177de <memset+0xa>
 80177dc:	4770      	bx	lr
 80177de:	f803 1b01 	strb.w	r1, [r3], #1
 80177e2:	e7f9      	b.n	80177d8 <memset+0x4>

080177e4 <_calloc_r>:
 80177e4:	b513      	push	{r0, r1, r4, lr}
 80177e6:	434a      	muls	r2, r1
 80177e8:	4611      	mov	r1, r2
 80177ea:	9201      	str	r2, [sp, #4]
 80177ec:	f000 f85a 	bl	80178a4 <_malloc_r>
 80177f0:	4604      	mov	r4, r0
 80177f2:	b118      	cbz	r0, 80177fc <_calloc_r+0x18>
 80177f4:	9a01      	ldr	r2, [sp, #4]
 80177f6:	2100      	movs	r1, #0
 80177f8:	f7ff ffec 	bl	80177d4 <memset>
 80177fc:	4620      	mov	r0, r4
 80177fe:	b002      	add	sp, #8
 8017800:	bd10      	pop	{r4, pc}
	...

08017804 <_free_r>:
 8017804:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8017806:	2900      	cmp	r1, #0
 8017808:	d048      	beq.n	801789c <_free_r+0x98>
 801780a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801780e:	9001      	str	r0, [sp, #4]
 8017810:	2b00      	cmp	r3, #0
 8017812:	f1a1 0404 	sub.w	r4, r1, #4
 8017816:	bfb8      	it	lt
 8017818:	18e4      	addlt	r4, r4, r3
 801781a:	f002 ff83 	bl	801a724 <__malloc_lock>
 801781e:	4a20      	ldr	r2, [pc, #128]	; (80178a0 <_free_r+0x9c>)
 8017820:	9801      	ldr	r0, [sp, #4]
 8017822:	6813      	ldr	r3, [r2, #0]
 8017824:	4615      	mov	r5, r2
 8017826:	b933      	cbnz	r3, 8017836 <_free_r+0x32>
 8017828:	6063      	str	r3, [r4, #4]
 801782a:	6014      	str	r4, [r2, #0]
 801782c:	b003      	add	sp, #12
 801782e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8017832:	f002 bf7d 	b.w	801a730 <__malloc_unlock>
 8017836:	42a3      	cmp	r3, r4
 8017838:	d90b      	bls.n	8017852 <_free_r+0x4e>
 801783a:	6821      	ldr	r1, [r4, #0]
 801783c:	1862      	adds	r2, r4, r1
 801783e:	4293      	cmp	r3, r2
 8017840:	bf04      	itt	eq
 8017842:	681a      	ldreq	r2, [r3, #0]
 8017844:	685b      	ldreq	r3, [r3, #4]
 8017846:	6063      	str	r3, [r4, #4]
 8017848:	bf04      	itt	eq
 801784a:	1852      	addeq	r2, r2, r1
 801784c:	6022      	streq	r2, [r4, #0]
 801784e:	602c      	str	r4, [r5, #0]
 8017850:	e7ec      	b.n	801782c <_free_r+0x28>
 8017852:	461a      	mov	r2, r3
 8017854:	685b      	ldr	r3, [r3, #4]
 8017856:	b10b      	cbz	r3, 801785c <_free_r+0x58>
 8017858:	42a3      	cmp	r3, r4
 801785a:	d9fa      	bls.n	8017852 <_free_r+0x4e>
 801785c:	6811      	ldr	r1, [r2, #0]
 801785e:	1855      	adds	r5, r2, r1
 8017860:	42a5      	cmp	r5, r4
 8017862:	d10b      	bne.n	801787c <_free_r+0x78>
 8017864:	6824      	ldr	r4, [r4, #0]
 8017866:	4421      	add	r1, r4
 8017868:	1854      	adds	r4, r2, r1
 801786a:	42a3      	cmp	r3, r4
 801786c:	6011      	str	r1, [r2, #0]
 801786e:	d1dd      	bne.n	801782c <_free_r+0x28>
 8017870:	681c      	ldr	r4, [r3, #0]
 8017872:	685b      	ldr	r3, [r3, #4]
 8017874:	6053      	str	r3, [r2, #4]
 8017876:	4421      	add	r1, r4
 8017878:	6011      	str	r1, [r2, #0]
 801787a:	e7d7      	b.n	801782c <_free_r+0x28>
 801787c:	d902      	bls.n	8017884 <_free_r+0x80>
 801787e:	230c      	movs	r3, #12
 8017880:	6003      	str	r3, [r0, #0]
 8017882:	e7d3      	b.n	801782c <_free_r+0x28>
 8017884:	6825      	ldr	r5, [r4, #0]
 8017886:	1961      	adds	r1, r4, r5
 8017888:	428b      	cmp	r3, r1
 801788a:	bf04      	itt	eq
 801788c:	6819      	ldreq	r1, [r3, #0]
 801788e:	685b      	ldreq	r3, [r3, #4]
 8017890:	6063      	str	r3, [r4, #4]
 8017892:	bf04      	itt	eq
 8017894:	1949      	addeq	r1, r1, r5
 8017896:	6021      	streq	r1, [r4, #0]
 8017898:	6054      	str	r4, [r2, #4]
 801789a:	e7c7      	b.n	801782c <_free_r+0x28>
 801789c:	b003      	add	sp, #12
 801789e:	bd30      	pop	{r4, r5, pc}
 80178a0:	200111e0 	.word	0x200111e0

080178a4 <_malloc_r>:
 80178a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80178a6:	1ccd      	adds	r5, r1, #3
 80178a8:	f025 0503 	bic.w	r5, r5, #3
 80178ac:	3508      	adds	r5, #8
 80178ae:	2d0c      	cmp	r5, #12
 80178b0:	bf38      	it	cc
 80178b2:	250c      	movcc	r5, #12
 80178b4:	2d00      	cmp	r5, #0
 80178b6:	4606      	mov	r6, r0
 80178b8:	db01      	blt.n	80178be <_malloc_r+0x1a>
 80178ba:	42a9      	cmp	r1, r5
 80178bc:	d903      	bls.n	80178c6 <_malloc_r+0x22>
 80178be:	230c      	movs	r3, #12
 80178c0:	6033      	str	r3, [r6, #0]
 80178c2:	2000      	movs	r0, #0
 80178c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80178c6:	f002 ff2d 	bl	801a724 <__malloc_lock>
 80178ca:	4921      	ldr	r1, [pc, #132]	; (8017950 <_malloc_r+0xac>)
 80178cc:	680a      	ldr	r2, [r1, #0]
 80178ce:	4614      	mov	r4, r2
 80178d0:	b99c      	cbnz	r4, 80178fa <_malloc_r+0x56>
 80178d2:	4f20      	ldr	r7, [pc, #128]	; (8017954 <_malloc_r+0xb0>)
 80178d4:	683b      	ldr	r3, [r7, #0]
 80178d6:	b923      	cbnz	r3, 80178e2 <_malloc_r+0x3e>
 80178d8:	4621      	mov	r1, r4
 80178da:	4630      	mov	r0, r6
 80178dc:	f000 fca6 	bl	801822c <_sbrk_r>
 80178e0:	6038      	str	r0, [r7, #0]
 80178e2:	4629      	mov	r1, r5
 80178e4:	4630      	mov	r0, r6
 80178e6:	f000 fca1 	bl	801822c <_sbrk_r>
 80178ea:	1c43      	adds	r3, r0, #1
 80178ec:	d123      	bne.n	8017936 <_malloc_r+0x92>
 80178ee:	230c      	movs	r3, #12
 80178f0:	6033      	str	r3, [r6, #0]
 80178f2:	4630      	mov	r0, r6
 80178f4:	f002 ff1c 	bl	801a730 <__malloc_unlock>
 80178f8:	e7e3      	b.n	80178c2 <_malloc_r+0x1e>
 80178fa:	6823      	ldr	r3, [r4, #0]
 80178fc:	1b5b      	subs	r3, r3, r5
 80178fe:	d417      	bmi.n	8017930 <_malloc_r+0x8c>
 8017900:	2b0b      	cmp	r3, #11
 8017902:	d903      	bls.n	801790c <_malloc_r+0x68>
 8017904:	6023      	str	r3, [r4, #0]
 8017906:	441c      	add	r4, r3
 8017908:	6025      	str	r5, [r4, #0]
 801790a:	e004      	b.n	8017916 <_malloc_r+0x72>
 801790c:	6863      	ldr	r3, [r4, #4]
 801790e:	42a2      	cmp	r2, r4
 8017910:	bf0c      	ite	eq
 8017912:	600b      	streq	r3, [r1, #0]
 8017914:	6053      	strne	r3, [r2, #4]
 8017916:	4630      	mov	r0, r6
 8017918:	f002 ff0a 	bl	801a730 <__malloc_unlock>
 801791c:	f104 000b 	add.w	r0, r4, #11
 8017920:	1d23      	adds	r3, r4, #4
 8017922:	f020 0007 	bic.w	r0, r0, #7
 8017926:	1ac2      	subs	r2, r0, r3
 8017928:	d0cc      	beq.n	80178c4 <_malloc_r+0x20>
 801792a:	1a1b      	subs	r3, r3, r0
 801792c:	50a3      	str	r3, [r4, r2]
 801792e:	e7c9      	b.n	80178c4 <_malloc_r+0x20>
 8017930:	4622      	mov	r2, r4
 8017932:	6864      	ldr	r4, [r4, #4]
 8017934:	e7cc      	b.n	80178d0 <_malloc_r+0x2c>
 8017936:	1cc4      	adds	r4, r0, #3
 8017938:	f024 0403 	bic.w	r4, r4, #3
 801793c:	42a0      	cmp	r0, r4
 801793e:	d0e3      	beq.n	8017908 <_malloc_r+0x64>
 8017940:	1a21      	subs	r1, r4, r0
 8017942:	4630      	mov	r0, r6
 8017944:	f000 fc72 	bl	801822c <_sbrk_r>
 8017948:	3001      	adds	r0, #1
 801794a:	d1dd      	bne.n	8017908 <_malloc_r+0x64>
 801794c:	e7cf      	b.n	80178ee <_malloc_r+0x4a>
 801794e:	bf00      	nop
 8017950:	200111e0 	.word	0x200111e0
 8017954:	200111e4 	.word	0x200111e4

08017958 <__cvt>:
 8017958:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801795c:	ec55 4b10 	vmov	r4, r5, d0
 8017960:	2d00      	cmp	r5, #0
 8017962:	460e      	mov	r6, r1
 8017964:	4619      	mov	r1, r3
 8017966:	462b      	mov	r3, r5
 8017968:	bfbb      	ittet	lt
 801796a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 801796e:	461d      	movlt	r5, r3
 8017970:	2300      	movge	r3, #0
 8017972:	232d      	movlt	r3, #45	; 0x2d
 8017974:	700b      	strb	r3, [r1, #0]
 8017976:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017978:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 801797c:	4691      	mov	r9, r2
 801797e:	f023 0820 	bic.w	r8, r3, #32
 8017982:	bfbc      	itt	lt
 8017984:	4622      	movlt	r2, r4
 8017986:	4614      	movlt	r4, r2
 8017988:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801798c:	d005      	beq.n	801799a <__cvt+0x42>
 801798e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8017992:	d100      	bne.n	8017996 <__cvt+0x3e>
 8017994:	3601      	adds	r6, #1
 8017996:	2102      	movs	r1, #2
 8017998:	e000      	b.n	801799c <__cvt+0x44>
 801799a:	2103      	movs	r1, #3
 801799c:	ab03      	add	r3, sp, #12
 801799e:	9301      	str	r3, [sp, #4]
 80179a0:	ab02      	add	r3, sp, #8
 80179a2:	9300      	str	r3, [sp, #0]
 80179a4:	ec45 4b10 	vmov	d0, r4, r5
 80179a8:	4653      	mov	r3, sl
 80179aa:	4632      	mov	r2, r6
 80179ac:	f001 fd14 	bl	80193d8 <_dtoa_r>
 80179b0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80179b4:	4607      	mov	r7, r0
 80179b6:	d102      	bne.n	80179be <__cvt+0x66>
 80179b8:	f019 0f01 	tst.w	r9, #1
 80179bc:	d022      	beq.n	8017a04 <__cvt+0xac>
 80179be:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80179c2:	eb07 0906 	add.w	r9, r7, r6
 80179c6:	d110      	bne.n	80179ea <__cvt+0x92>
 80179c8:	783b      	ldrb	r3, [r7, #0]
 80179ca:	2b30      	cmp	r3, #48	; 0x30
 80179cc:	d10a      	bne.n	80179e4 <__cvt+0x8c>
 80179ce:	2200      	movs	r2, #0
 80179d0:	2300      	movs	r3, #0
 80179d2:	4620      	mov	r0, r4
 80179d4:	4629      	mov	r1, r5
 80179d6:	f7e9 f89f 	bl	8000b18 <__aeabi_dcmpeq>
 80179da:	b918      	cbnz	r0, 80179e4 <__cvt+0x8c>
 80179dc:	f1c6 0601 	rsb	r6, r6, #1
 80179e0:	f8ca 6000 	str.w	r6, [sl]
 80179e4:	f8da 3000 	ldr.w	r3, [sl]
 80179e8:	4499      	add	r9, r3
 80179ea:	2200      	movs	r2, #0
 80179ec:	2300      	movs	r3, #0
 80179ee:	4620      	mov	r0, r4
 80179f0:	4629      	mov	r1, r5
 80179f2:	f7e9 f891 	bl	8000b18 <__aeabi_dcmpeq>
 80179f6:	b108      	cbz	r0, 80179fc <__cvt+0xa4>
 80179f8:	f8cd 900c 	str.w	r9, [sp, #12]
 80179fc:	2230      	movs	r2, #48	; 0x30
 80179fe:	9b03      	ldr	r3, [sp, #12]
 8017a00:	454b      	cmp	r3, r9
 8017a02:	d307      	bcc.n	8017a14 <__cvt+0xbc>
 8017a04:	9b03      	ldr	r3, [sp, #12]
 8017a06:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8017a08:	1bdb      	subs	r3, r3, r7
 8017a0a:	4638      	mov	r0, r7
 8017a0c:	6013      	str	r3, [r2, #0]
 8017a0e:	b004      	add	sp, #16
 8017a10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017a14:	1c59      	adds	r1, r3, #1
 8017a16:	9103      	str	r1, [sp, #12]
 8017a18:	701a      	strb	r2, [r3, #0]
 8017a1a:	e7f0      	b.n	80179fe <__cvt+0xa6>

08017a1c <__exponent>:
 8017a1c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8017a1e:	4603      	mov	r3, r0
 8017a20:	2900      	cmp	r1, #0
 8017a22:	bfb8      	it	lt
 8017a24:	4249      	neglt	r1, r1
 8017a26:	f803 2b02 	strb.w	r2, [r3], #2
 8017a2a:	bfb4      	ite	lt
 8017a2c:	222d      	movlt	r2, #45	; 0x2d
 8017a2e:	222b      	movge	r2, #43	; 0x2b
 8017a30:	2909      	cmp	r1, #9
 8017a32:	7042      	strb	r2, [r0, #1]
 8017a34:	dd2a      	ble.n	8017a8c <__exponent+0x70>
 8017a36:	f10d 0407 	add.w	r4, sp, #7
 8017a3a:	46a4      	mov	ip, r4
 8017a3c:	270a      	movs	r7, #10
 8017a3e:	46a6      	mov	lr, r4
 8017a40:	460a      	mov	r2, r1
 8017a42:	fb91 f6f7 	sdiv	r6, r1, r7
 8017a46:	fb07 1516 	mls	r5, r7, r6, r1
 8017a4a:	3530      	adds	r5, #48	; 0x30
 8017a4c:	2a63      	cmp	r2, #99	; 0x63
 8017a4e:	f104 34ff 	add.w	r4, r4, #4294967295
 8017a52:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8017a56:	4631      	mov	r1, r6
 8017a58:	dcf1      	bgt.n	8017a3e <__exponent+0x22>
 8017a5a:	3130      	adds	r1, #48	; 0x30
 8017a5c:	f1ae 0502 	sub.w	r5, lr, #2
 8017a60:	f804 1c01 	strb.w	r1, [r4, #-1]
 8017a64:	1c44      	adds	r4, r0, #1
 8017a66:	4629      	mov	r1, r5
 8017a68:	4561      	cmp	r1, ip
 8017a6a:	d30a      	bcc.n	8017a82 <__exponent+0x66>
 8017a6c:	f10d 0209 	add.w	r2, sp, #9
 8017a70:	eba2 020e 	sub.w	r2, r2, lr
 8017a74:	4565      	cmp	r5, ip
 8017a76:	bf88      	it	hi
 8017a78:	2200      	movhi	r2, #0
 8017a7a:	4413      	add	r3, r2
 8017a7c:	1a18      	subs	r0, r3, r0
 8017a7e:	b003      	add	sp, #12
 8017a80:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017a82:	f811 2b01 	ldrb.w	r2, [r1], #1
 8017a86:	f804 2f01 	strb.w	r2, [r4, #1]!
 8017a8a:	e7ed      	b.n	8017a68 <__exponent+0x4c>
 8017a8c:	2330      	movs	r3, #48	; 0x30
 8017a8e:	3130      	adds	r1, #48	; 0x30
 8017a90:	7083      	strb	r3, [r0, #2]
 8017a92:	70c1      	strb	r1, [r0, #3]
 8017a94:	1d03      	adds	r3, r0, #4
 8017a96:	e7f1      	b.n	8017a7c <__exponent+0x60>

08017a98 <_printf_float>:
 8017a98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017a9c:	ed2d 8b02 	vpush	{d8}
 8017aa0:	b08d      	sub	sp, #52	; 0x34
 8017aa2:	460c      	mov	r4, r1
 8017aa4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8017aa8:	4616      	mov	r6, r2
 8017aaa:	461f      	mov	r7, r3
 8017aac:	4605      	mov	r5, r0
 8017aae:	f002 fe11 	bl	801a6d4 <_localeconv_r>
 8017ab2:	f8d0 a000 	ldr.w	sl, [r0]
 8017ab6:	4650      	mov	r0, sl
 8017ab8:	f7e8 fbac 	bl	8000214 <strlen>
 8017abc:	2300      	movs	r3, #0
 8017abe:	930a      	str	r3, [sp, #40]	; 0x28
 8017ac0:	6823      	ldr	r3, [r4, #0]
 8017ac2:	9305      	str	r3, [sp, #20]
 8017ac4:	f8d8 3000 	ldr.w	r3, [r8]
 8017ac8:	f894 b018 	ldrb.w	fp, [r4, #24]
 8017acc:	3307      	adds	r3, #7
 8017ace:	f023 0307 	bic.w	r3, r3, #7
 8017ad2:	f103 0208 	add.w	r2, r3, #8
 8017ad6:	f8c8 2000 	str.w	r2, [r8]
 8017ada:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017ade:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8017ae2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8017ae6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8017aea:	9307      	str	r3, [sp, #28]
 8017aec:	f8cd 8018 	str.w	r8, [sp, #24]
 8017af0:	ee08 0a10 	vmov	s16, r0
 8017af4:	4b9f      	ldr	r3, [pc, #636]	; (8017d74 <_printf_float+0x2dc>)
 8017af6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8017afa:	f04f 32ff 	mov.w	r2, #4294967295
 8017afe:	f7e9 f83d 	bl	8000b7c <__aeabi_dcmpun>
 8017b02:	bb88      	cbnz	r0, 8017b68 <_printf_float+0xd0>
 8017b04:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8017b08:	4b9a      	ldr	r3, [pc, #616]	; (8017d74 <_printf_float+0x2dc>)
 8017b0a:	f04f 32ff 	mov.w	r2, #4294967295
 8017b0e:	f7e9 f817 	bl	8000b40 <__aeabi_dcmple>
 8017b12:	bb48      	cbnz	r0, 8017b68 <_printf_float+0xd0>
 8017b14:	2200      	movs	r2, #0
 8017b16:	2300      	movs	r3, #0
 8017b18:	4640      	mov	r0, r8
 8017b1a:	4649      	mov	r1, r9
 8017b1c:	f7e9 f806 	bl	8000b2c <__aeabi_dcmplt>
 8017b20:	b110      	cbz	r0, 8017b28 <_printf_float+0x90>
 8017b22:	232d      	movs	r3, #45	; 0x2d
 8017b24:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8017b28:	4b93      	ldr	r3, [pc, #588]	; (8017d78 <_printf_float+0x2e0>)
 8017b2a:	4894      	ldr	r0, [pc, #592]	; (8017d7c <_printf_float+0x2e4>)
 8017b2c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8017b30:	bf94      	ite	ls
 8017b32:	4698      	movls	r8, r3
 8017b34:	4680      	movhi	r8, r0
 8017b36:	2303      	movs	r3, #3
 8017b38:	6123      	str	r3, [r4, #16]
 8017b3a:	9b05      	ldr	r3, [sp, #20]
 8017b3c:	f023 0204 	bic.w	r2, r3, #4
 8017b40:	6022      	str	r2, [r4, #0]
 8017b42:	f04f 0900 	mov.w	r9, #0
 8017b46:	9700      	str	r7, [sp, #0]
 8017b48:	4633      	mov	r3, r6
 8017b4a:	aa0b      	add	r2, sp, #44	; 0x2c
 8017b4c:	4621      	mov	r1, r4
 8017b4e:	4628      	mov	r0, r5
 8017b50:	f000 f9d8 	bl	8017f04 <_printf_common>
 8017b54:	3001      	adds	r0, #1
 8017b56:	f040 8090 	bne.w	8017c7a <_printf_float+0x1e2>
 8017b5a:	f04f 30ff 	mov.w	r0, #4294967295
 8017b5e:	b00d      	add	sp, #52	; 0x34
 8017b60:	ecbd 8b02 	vpop	{d8}
 8017b64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017b68:	4642      	mov	r2, r8
 8017b6a:	464b      	mov	r3, r9
 8017b6c:	4640      	mov	r0, r8
 8017b6e:	4649      	mov	r1, r9
 8017b70:	f7e9 f804 	bl	8000b7c <__aeabi_dcmpun>
 8017b74:	b140      	cbz	r0, 8017b88 <_printf_float+0xf0>
 8017b76:	464b      	mov	r3, r9
 8017b78:	2b00      	cmp	r3, #0
 8017b7a:	bfbc      	itt	lt
 8017b7c:	232d      	movlt	r3, #45	; 0x2d
 8017b7e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8017b82:	487f      	ldr	r0, [pc, #508]	; (8017d80 <_printf_float+0x2e8>)
 8017b84:	4b7f      	ldr	r3, [pc, #508]	; (8017d84 <_printf_float+0x2ec>)
 8017b86:	e7d1      	b.n	8017b2c <_printf_float+0x94>
 8017b88:	6863      	ldr	r3, [r4, #4]
 8017b8a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8017b8e:	9206      	str	r2, [sp, #24]
 8017b90:	1c5a      	adds	r2, r3, #1
 8017b92:	d13f      	bne.n	8017c14 <_printf_float+0x17c>
 8017b94:	2306      	movs	r3, #6
 8017b96:	6063      	str	r3, [r4, #4]
 8017b98:	9b05      	ldr	r3, [sp, #20]
 8017b9a:	6861      	ldr	r1, [r4, #4]
 8017b9c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8017ba0:	2300      	movs	r3, #0
 8017ba2:	9303      	str	r3, [sp, #12]
 8017ba4:	ab0a      	add	r3, sp, #40	; 0x28
 8017ba6:	e9cd b301 	strd	fp, r3, [sp, #4]
 8017baa:	ab09      	add	r3, sp, #36	; 0x24
 8017bac:	ec49 8b10 	vmov	d0, r8, r9
 8017bb0:	9300      	str	r3, [sp, #0]
 8017bb2:	6022      	str	r2, [r4, #0]
 8017bb4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8017bb8:	4628      	mov	r0, r5
 8017bba:	f7ff fecd 	bl	8017958 <__cvt>
 8017bbe:	9b06      	ldr	r3, [sp, #24]
 8017bc0:	9909      	ldr	r1, [sp, #36]	; 0x24
 8017bc2:	2b47      	cmp	r3, #71	; 0x47
 8017bc4:	4680      	mov	r8, r0
 8017bc6:	d108      	bne.n	8017bda <_printf_float+0x142>
 8017bc8:	1cc8      	adds	r0, r1, #3
 8017bca:	db02      	blt.n	8017bd2 <_printf_float+0x13a>
 8017bcc:	6863      	ldr	r3, [r4, #4]
 8017bce:	4299      	cmp	r1, r3
 8017bd0:	dd41      	ble.n	8017c56 <_printf_float+0x1be>
 8017bd2:	f1ab 0b02 	sub.w	fp, fp, #2
 8017bd6:	fa5f fb8b 	uxtb.w	fp, fp
 8017bda:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8017bde:	d820      	bhi.n	8017c22 <_printf_float+0x18a>
 8017be0:	3901      	subs	r1, #1
 8017be2:	465a      	mov	r2, fp
 8017be4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8017be8:	9109      	str	r1, [sp, #36]	; 0x24
 8017bea:	f7ff ff17 	bl	8017a1c <__exponent>
 8017bee:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8017bf0:	1813      	adds	r3, r2, r0
 8017bf2:	2a01      	cmp	r2, #1
 8017bf4:	4681      	mov	r9, r0
 8017bf6:	6123      	str	r3, [r4, #16]
 8017bf8:	dc02      	bgt.n	8017c00 <_printf_float+0x168>
 8017bfa:	6822      	ldr	r2, [r4, #0]
 8017bfc:	07d2      	lsls	r2, r2, #31
 8017bfe:	d501      	bpl.n	8017c04 <_printf_float+0x16c>
 8017c00:	3301      	adds	r3, #1
 8017c02:	6123      	str	r3, [r4, #16]
 8017c04:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8017c08:	2b00      	cmp	r3, #0
 8017c0a:	d09c      	beq.n	8017b46 <_printf_float+0xae>
 8017c0c:	232d      	movs	r3, #45	; 0x2d
 8017c0e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8017c12:	e798      	b.n	8017b46 <_printf_float+0xae>
 8017c14:	9a06      	ldr	r2, [sp, #24]
 8017c16:	2a47      	cmp	r2, #71	; 0x47
 8017c18:	d1be      	bne.n	8017b98 <_printf_float+0x100>
 8017c1a:	2b00      	cmp	r3, #0
 8017c1c:	d1bc      	bne.n	8017b98 <_printf_float+0x100>
 8017c1e:	2301      	movs	r3, #1
 8017c20:	e7b9      	b.n	8017b96 <_printf_float+0xfe>
 8017c22:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8017c26:	d118      	bne.n	8017c5a <_printf_float+0x1c2>
 8017c28:	2900      	cmp	r1, #0
 8017c2a:	6863      	ldr	r3, [r4, #4]
 8017c2c:	dd0b      	ble.n	8017c46 <_printf_float+0x1ae>
 8017c2e:	6121      	str	r1, [r4, #16]
 8017c30:	b913      	cbnz	r3, 8017c38 <_printf_float+0x1a0>
 8017c32:	6822      	ldr	r2, [r4, #0]
 8017c34:	07d0      	lsls	r0, r2, #31
 8017c36:	d502      	bpl.n	8017c3e <_printf_float+0x1a6>
 8017c38:	3301      	adds	r3, #1
 8017c3a:	440b      	add	r3, r1
 8017c3c:	6123      	str	r3, [r4, #16]
 8017c3e:	65a1      	str	r1, [r4, #88]	; 0x58
 8017c40:	f04f 0900 	mov.w	r9, #0
 8017c44:	e7de      	b.n	8017c04 <_printf_float+0x16c>
 8017c46:	b913      	cbnz	r3, 8017c4e <_printf_float+0x1b6>
 8017c48:	6822      	ldr	r2, [r4, #0]
 8017c4a:	07d2      	lsls	r2, r2, #31
 8017c4c:	d501      	bpl.n	8017c52 <_printf_float+0x1ba>
 8017c4e:	3302      	adds	r3, #2
 8017c50:	e7f4      	b.n	8017c3c <_printf_float+0x1a4>
 8017c52:	2301      	movs	r3, #1
 8017c54:	e7f2      	b.n	8017c3c <_printf_float+0x1a4>
 8017c56:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8017c5a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017c5c:	4299      	cmp	r1, r3
 8017c5e:	db05      	blt.n	8017c6c <_printf_float+0x1d4>
 8017c60:	6823      	ldr	r3, [r4, #0]
 8017c62:	6121      	str	r1, [r4, #16]
 8017c64:	07d8      	lsls	r0, r3, #31
 8017c66:	d5ea      	bpl.n	8017c3e <_printf_float+0x1a6>
 8017c68:	1c4b      	adds	r3, r1, #1
 8017c6a:	e7e7      	b.n	8017c3c <_printf_float+0x1a4>
 8017c6c:	2900      	cmp	r1, #0
 8017c6e:	bfd4      	ite	le
 8017c70:	f1c1 0202 	rsble	r2, r1, #2
 8017c74:	2201      	movgt	r2, #1
 8017c76:	4413      	add	r3, r2
 8017c78:	e7e0      	b.n	8017c3c <_printf_float+0x1a4>
 8017c7a:	6823      	ldr	r3, [r4, #0]
 8017c7c:	055a      	lsls	r2, r3, #21
 8017c7e:	d407      	bmi.n	8017c90 <_printf_float+0x1f8>
 8017c80:	6923      	ldr	r3, [r4, #16]
 8017c82:	4642      	mov	r2, r8
 8017c84:	4631      	mov	r1, r6
 8017c86:	4628      	mov	r0, r5
 8017c88:	47b8      	blx	r7
 8017c8a:	3001      	adds	r0, #1
 8017c8c:	d12c      	bne.n	8017ce8 <_printf_float+0x250>
 8017c8e:	e764      	b.n	8017b5a <_printf_float+0xc2>
 8017c90:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8017c94:	f240 80e0 	bls.w	8017e58 <_printf_float+0x3c0>
 8017c98:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8017c9c:	2200      	movs	r2, #0
 8017c9e:	2300      	movs	r3, #0
 8017ca0:	f7e8 ff3a 	bl	8000b18 <__aeabi_dcmpeq>
 8017ca4:	2800      	cmp	r0, #0
 8017ca6:	d034      	beq.n	8017d12 <_printf_float+0x27a>
 8017ca8:	4a37      	ldr	r2, [pc, #220]	; (8017d88 <_printf_float+0x2f0>)
 8017caa:	2301      	movs	r3, #1
 8017cac:	4631      	mov	r1, r6
 8017cae:	4628      	mov	r0, r5
 8017cb0:	47b8      	blx	r7
 8017cb2:	3001      	adds	r0, #1
 8017cb4:	f43f af51 	beq.w	8017b5a <_printf_float+0xc2>
 8017cb8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8017cbc:	429a      	cmp	r2, r3
 8017cbe:	db02      	blt.n	8017cc6 <_printf_float+0x22e>
 8017cc0:	6823      	ldr	r3, [r4, #0]
 8017cc2:	07d8      	lsls	r0, r3, #31
 8017cc4:	d510      	bpl.n	8017ce8 <_printf_float+0x250>
 8017cc6:	ee18 3a10 	vmov	r3, s16
 8017cca:	4652      	mov	r2, sl
 8017ccc:	4631      	mov	r1, r6
 8017cce:	4628      	mov	r0, r5
 8017cd0:	47b8      	blx	r7
 8017cd2:	3001      	adds	r0, #1
 8017cd4:	f43f af41 	beq.w	8017b5a <_printf_float+0xc2>
 8017cd8:	f04f 0800 	mov.w	r8, #0
 8017cdc:	f104 091a 	add.w	r9, r4, #26
 8017ce0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017ce2:	3b01      	subs	r3, #1
 8017ce4:	4543      	cmp	r3, r8
 8017ce6:	dc09      	bgt.n	8017cfc <_printf_float+0x264>
 8017ce8:	6823      	ldr	r3, [r4, #0]
 8017cea:	079b      	lsls	r3, r3, #30
 8017cec:	f100 8105 	bmi.w	8017efa <_printf_float+0x462>
 8017cf0:	68e0      	ldr	r0, [r4, #12]
 8017cf2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017cf4:	4298      	cmp	r0, r3
 8017cf6:	bfb8      	it	lt
 8017cf8:	4618      	movlt	r0, r3
 8017cfa:	e730      	b.n	8017b5e <_printf_float+0xc6>
 8017cfc:	2301      	movs	r3, #1
 8017cfe:	464a      	mov	r2, r9
 8017d00:	4631      	mov	r1, r6
 8017d02:	4628      	mov	r0, r5
 8017d04:	47b8      	blx	r7
 8017d06:	3001      	adds	r0, #1
 8017d08:	f43f af27 	beq.w	8017b5a <_printf_float+0xc2>
 8017d0c:	f108 0801 	add.w	r8, r8, #1
 8017d10:	e7e6      	b.n	8017ce0 <_printf_float+0x248>
 8017d12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017d14:	2b00      	cmp	r3, #0
 8017d16:	dc39      	bgt.n	8017d8c <_printf_float+0x2f4>
 8017d18:	4a1b      	ldr	r2, [pc, #108]	; (8017d88 <_printf_float+0x2f0>)
 8017d1a:	2301      	movs	r3, #1
 8017d1c:	4631      	mov	r1, r6
 8017d1e:	4628      	mov	r0, r5
 8017d20:	47b8      	blx	r7
 8017d22:	3001      	adds	r0, #1
 8017d24:	f43f af19 	beq.w	8017b5a <_printf_float+0xc2>
 8017d28:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8017d2c:	4313      	orrs	r3, r2
 8017d2e:	d102      	bne.n	8017d36 <_printf_float+0x29e>
 8017d30:	6823      	ldr	r3, [r4, #0]
 8017d32:	07d9      	lsls	r1, r3, #31
 8017d34:	d5d8      	bpl.n	8017ce8 <_printf_float+0x250>
 8017d36:	ee18 3a10 	vmov	r3, s16
 8017d3a:	4652      	mov	r2, sl
 8017d3c:	4631      	mov	r1, r6
 8017d3e:	4628      	mov	r0, r5
 8017d40:	47b8      	blx	r7
 8017d42:	3001      	adds	r0, #1
 8017d44:	f43f af09 	beq.w	8017b5a <_printf_float+0xc2>
 8017d48:	f04f 0900 	mov.w	r9, #0
 8017d4c:	f104 0a1a 	add.w	sl, r4, #26
 8017d50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017d52:	425b      	negs	r3, r3
 8017d54:	454b      	cmp	r3, r9
 8017d56:	dc01      	bgt.n	8017d5c <_printf_float+0x2c4>
 8017d58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017d5a:	e792      	b.n	8017c82 <_printf_float+0x1ea>
 8017d5c:	2301      	movs	r3, #1
 8017d5e:	4652      	mov	r2, sl
 8017d60:	4631      	mov	r1, r6
 8017d62:	4628      	mov	r0, r5
 8017d64:	47b8      	blx	r7
 8017d66:	3001      	adds	r0, #1
 8017d68:	f43f aef7 	beq.w	8017b5a <_printf_float+0xc2>
 8017d6c:	f109 0901 	add.w	r9, r9, #1
 8017d70:	e7ee      	b.n	8017d50 <_printf_float+0x2b8>
 8017d72:	bf00      	nop
 8017d74:	7fefffff 	.word	0x7fefffff
 8017d78:	0801c59c 	.word	0x0801c59c
 8017d7c:	0801c5a0 	.word	0x0801c5a0
 8017d80:	0801c5a8 	.word	0x0801c5a8
 8017d84:	0801c5a4 	.word	0x0801c5a4
 8017d88:	0801c5ac 	.word	0x0801c5ac
 8017d8c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8017d8e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8017d90:	429a      	cmp	r2, r3
 8017d92:	bfa8      	it	ge
 8017d94:	461a      	movge	r2, r3
 8017d96:	2a00      	cmp	r2, #0
 8017d98:	4691      	mov	r9, r2
 8017d9a:	dc37      	bgt.n	8017e0c <_printf_float+0x374>
 8017d9c:	f04f 0b00 	mov.w	fp, #0
 8017da0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8017da4:	f104 021a 	add.w	r2, r4, #26
 8017da8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8017daa:	9305      	str	r3, [sp, #20]
 8017dac:	eba3 0309 	sub.w	r3, r3, r9
 8017db0:	455b      	cmp	r3, fp
 8017db2:	dc33      	bgt.n	8017e1c <_printf_float+0x384>
 8017db4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8017db8:	429a      	cmp	r2, r3
 8017dba:	db3b      	blt.n	8017e34 <_printf_float+0x39c>
 8017dbc:	6823      	ldr	r3, [r4, #0]
 8017dbe:	07da      	lsls	r2, r3, #31
 8017dc0:	d438      	bmi.n	8017e34 <_printf_float+0x39c>
 8017dc2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8017dc4:	9b05      	ldr	r3, [sp, #20]
 8017dc6:	9909      	ldr	r1, [sp, #36]	; 0x24
 8017dc8:	1ad3      	subs	r3, r2, r3
 8017dca:	eba2 0901 	sub.w	r9, r2, r1
 8017dce:	4599      	cmp	r9, r3
 8017dd0:	bfa8      	it	ge
 8017dd2:	4699      	movge	r9, r3
 8017dd4:	f1b9 0f00 	cmp.w	r9, #0
 8017dd8:	dc35      	bgt.n	8017e46 <_printf_float+0x3ae>
 8017dda:	f04f 0800 	mov.w	r8, #0
 8017dde:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8017de2:	f104 0a1a 	add.w	sl, r4, #26
 8017de6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8017dea:	1a9b      	subs	r3, r3, r2
 8017dec:	eba3 0309 	sub.w	r3, r3, r9
 8017df0:	4543      	cmp	r3, r8
 8017df2:	f77f af79 	ble.w	8017ce8 <_printf_float+0x250>
 8017df6:	2301      	movs	r3, #1
 8017df8:	4652      	mov	r2, sl
 8017dfa:	4631      	mov	r1, r6
 8017dfc:	4628      	mov	r0, r5
 8017dfe:	47b8      	blx	r7
 8017e00:	3001      	adds	r0, #1
 8017e02:	f43f aeaa 	beq.w	8017b5a <_printf_float+0xc2>
 8017e06:	f108 0801 	add.w	r8, r8, #1
 8017e0a:	e7ec      	b.n	8017de6 <_printf_float+0x34e>
 8017e0c:	4613      	mov	r3, r2
 8017e0e:	4631      	mov	r1, r6
 8017e10:	4642      	mov	r2, r8
 8017e12:	4628      	mov	r0, r5
 8017e14:	47b8      	blx	r7
 8017e16:	3001      	adds	r0, #1
 8017e18:	d1c0      	bne.n	8017d9c <_printf_float+0x304>
 8017e1a:	e69e      	b.n	8017b5a <_printf_float+0xc2>
 8017e1c:	2301      	movs	r3, #1
 8017e1e:	4631      	mov	r1, r6
 8017e20:	4628      	mov	r0, r5
 8017e22:	9205      	str	r2, [sp, #20]
 8017e24:	47b8      	blx	r7
 8017e26:	3001      	adds	r0, #1
 8017e28:	f43f ae97 	beq.w	8017b5a <_printf_float+0xc2>
 8017e2c:	9a05      	ldr	r2, [sp, #20]
 8017e2e:	f10b 0b01 	add.w	fp, fp, #1
 8017e32:	e7b9      	b.n	8017da8 <_printf_float+0x310>
 8017e34:	ee18 3a10 	vmov	r3, s16
 8017e38:	4652      	mov	r2, sl
 8017e3a:	4631      	mov	r1, r6
 8017e3c:	4628      	mov	r0, r5
 8017e3e:	47b8      	blx	r7
 8017e40:	3001      	adds	r0, #1
 8017e42:	d1be      	bne.n	8017dc2 <_printf_float+0x32a>
 8017e44:	e689      	b.n	8017b5a <_printf_float+0xc2>
 8017e46:	9a05      	ldr	r2, [sp, #20]
 8017e48:	464b      	mov	r3, r9
 8017e4a:	4442      	add	r2, r8
 8017e4c:	4631      	mov	r1, r6
 8017e4e:	4628      	mov	r0, r5
 8017e50:	47b8      	blx	r7
 8017e52:	3001      	adds	r0, #1
 8017e54:	d1c1      	bne.n	8017dda <_printf_float+0x342>
 8017e56:	e680      	b.n	8017b5a <_printf_float+0xc2>
 8017e58:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8017e5a:	2a01      	cmp	r2, #1
 8017e5c:	dc01      	bgt.n	8017e62 <_printf_float+0x3ca>
 8017e5e:	07db      	lsls	r3, r3, #31
 8017e60:	d538      	bpl.n	8017ed4 <_printf_float+0x43c>
 8017e62:	2301      	movs	r3, #1
 8017e64:	4642      	mov	r2, r8
 8017e66:	4631      	mov	r1, r6
 8017e68:	4628      	mov	r0, r5
 8017e6a:	47b8      	blx	r7
 8017e6c:	3001      	adds	r0, #1
 8017e6e:	f43f ae74 	beq.w	8017b5a <_printf_float+0xc2>
 8017e72:	ee18 3a10 	vmov	r3, s16
 8017e76:	4652      	mov	r2, sl
 8017e78:	4631      	mov	r1, r6
 8017e7a:	4628      	mov	r0, r5
 8017e7c:	47b8      	blx	r7
 8017e7e:	3001      	adds	r0, #1
 8017e80:	f43f ae6b 	beq.w	8017b5a <_printf_float+0xc2>
 8017e84:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8017e88:	2200      	movs	r2, #0
 8017e8a:	2300      	movs	r3, #0
 8017e8c:	f7e8 fe44 	bl	8000b18 <__aeabi_dcmpeq>
 8017e90:	b9d8      	cbnz	r0, 8017eca <_printf_float+0x432>
 8017e92:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017e94:	f108 0201 	add.w	r2, r8, #1
 8017e98:	3b01      	subs	r3, #1
 8017e9a:	4631      	mov	r1, r6
 8017e9c:	4628      	mov	r0, r5
 8017e9e:	47b8      	blx	r7
 8017ea0:	3001      	adds	r0, #1
 8017ea2:	d10e      	bne.n	8017ec2 <_printf_float+0x42a>
 8017ea4:	e659      	b.n	8017b5a <_printf_float+0xc2>
 8017ea6:	2301      	movs	r3, #1
 8017ea8:	4652      	mov	r2, sl
 8017eaa:	4631      	mov	r1, r6
 8017eac:	4628      	mov	r0, r5
 8017eae:	47b8      	blx	r7
 8017eb0:	3001      	adds	r0, #1
 8017eb2:	f43f ae52 	beq.w	8017b5a <_printf_float+0xc2>
 8017eb6:	f108 0801 	add.w	r8, r8, #1
 8017eba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017ebc:	3b01      	subs	r3, #1
 8017ebe:	4543      	cmp	r3, r8
 8017ec0:	dcf1      	bgt.n	8017ea6 <_printf_float+0x40e>
 8017ec2:	464b      	mov	r3, r9
 8017ec4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8017ec8:	e6dc      	b.n	8017c84 <_printf_float+0x1ec>
 8017eca:	f04f 0800 	mov.w	r8, #0
 8017ece:	f104 0a1a 	add.w	sl, r4, #26
 8017ed2:	e7f2      	b.n	8017eba <_printf_float+0x422>
 8017ed4:	2301      	movs	r3, #1
 8017ed6:	4642      	mov	r2, r8
 8017ed8:	e7df      	b.n	8017e9a <_printf_float+0x402>
 8017eda:	2301      	movs	r3, #1
 8017edc:	464a      	mov	r2, r9
 8017ede:	4631      	mov	r1, r6
 8017ee0:	4628      	mov	r0, r5
 8017ee2:	47b8      	blx	r7
 8017ee4:	3001      	adds	r0, #1
 8017ee6:	f43f ae38 	beq.w	8017b5a <_printf_float+0xc2>
 8017eea:	f108 0801 	add.w	r8, r8, #1
 8017eee:	68e3      	ldr	r3, [r4, #12]
 8017ef0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8017ef2:	1a5b      	subs	r3, r3, r1
 8017ef4:	4543      	cmp	r3, r8
 8017ef6:	dcf0      	bgt.n	8017eda <_printf_float+0x442>
 8017ef8:	e6fa      	b.n	8017cf0 <_printf_float+0x258>
 8017efa:	f04f 0800 	mov.w	r8, #0
 8017efe:	f104 0919 	add.w	r9, r4, #25
 8017f02:	e7f4      	b.n	8017eee <_printf_float+0x456>

08017f04 <_printf_common>:
 8017f04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017f08:	4616      	mov	r6, r2
 8017f0a:	4699      	mov	r9, r3
 8017f0c:	688a      	ldr	r2, [r1, #8]
 8017f0e:	690b      	ldr	r3, [r1, #16]
 8017f10:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8017f14:	4293      	cmp	r3, r2
 8017f16:	bfb8      	it	lt
 8017f18:	4613      	movlt	r3, r2
 8017f1a:	6033      	str	r3, [r6, #0]
 8017f1c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8017f20:	4607      	mov	r7, r0
 8017f22:	460c      	mov	r4, r1
 8017f24:	b10a      	cbz	r2, 8017f2a <_printf_common+0x26>
 8017f26:	3301      	adds	r3, #1
 8017f28:	6033      	str	r3, [r6, #0]
 8017f2a:	6823      	ldr	r3, [r4, #0]
 8017f2c:	0699      	lsls	r1, r3, #26
 8017f2e:	bf42      	ittt	mi
 8017f30:	6833      	ldrmi	r3, [r6, #0]
 8017f32:	3302      	addmi	r3, #2
 8017f34:	6033      	strmi	r3, [r6, #0]
 8017f36:	6825      	ldr	r5, [r4, #0]
 8017f38:	f015 0506 	ands.w	r5, r5, #6
 8017f3c:	d106      	bne.n	8017f4c <_printf_common+0x48>
 8017f3e:	f104 0a19 	add.w	sl, r4, #25
 8017f42:	68e3      	ldr	r3, [r4, #12]
 8017f44:	6832      	ldr	r2, [r6, #0]
 8017f46:	1a9b      	subs	r3, r3, r2
 8017f48:	42ab      	cmp	r3, r5
 8017f4a:	dc26      	bgt.n	8017f9a <_printf_common+0x96>
 8017f4c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8017f50:	1e13      	subs	r3, r2, #0
 8017f52:	6822      	ldr	r2, [r4, #0]
 8017f54:	bf18      	it	ne
 8017f56:	2301      	movne	r3, #1
 8017f58:	0692      	lsls	r2, r2, #26
 8017f5a:	d42b      	bmi.n	8017fb4 <_printf_common+0xb0>
 8017f5c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8017f60:	4649      	mov	r1, r9
 8017f62:	4638      	mov	r0, r7
 8017f64:	47c0      	blx	r8
 8017f66:	3001      	adds	r0, #1
 8017f68:	d01e      	beq.n	8017fa8 <_printf_common+0xa4>
 8017f6a:	6823      	ldr	r3, [r4, #0]
 8017f6c:	68e5      	ldr	r5, [r4, #12]
 8017f6e:	6832      	ldr	r2, [r6, #0]
 8017f70:	f003 0306 	and.w	r3, r3, #6
 8017f74:	2b04      	cmp	r3, #4
 8017f76:	bf08      	it	eq
 8017f78:	1aad      	subeq	r5, r5, r2
 8017f7a:	68a3      	ldr	r3, [r4, #8]
 8017f7c:	6922      	ldr	r2, [r4, #16]
 8017f7e:	bf0c      	ite	eq
 8017f80:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8017f84:	2500      	movne	r5, #0
 8017f86:	4293      	cmp	r3, r2
 8017f88:	bfc4      	itt	gt
 8017f8a:	1a9b      	subgt	r3, r3, r2
 8017f8c:	18ed      	addgt	r5, r5, r3
 8017f8e:	2600      	movs	r6, #0
 8017f90:	341a      	adds	r4, #26
 8017f92:	42b5      	cmp	r5, r6
 8017f94:	d11a      	bne.n	8017fcc <_printf_common+0xc8>
 8017f96:	2000      	movs	r0, #0
 8017f98:	e008      	b.n	8017fac <_printf_common+0xa8>
 8017f9a:	2301      	movs	r3, #1
 8017f9c:	4652      	mov	r2, sl
 8017f9e:	4649      	mov	r1, r9
 8017fa0:	4638      	mov	r0, r7
 8017fa2:	47c0      	blx	r8
 8017fa4:	3001      	adds	r0, #1
 8017fa6:	d103      	bne.n	8017fb0 <_printf_common+0xac>
 8017fa8:	f04f 30ff 	mov.w	r0, #4294967295
 8017fac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017fb0:	3501      	adds	r5, #1
 8017fb2:	e7c6      	b.n	8017f42 <_printf_common+0x3e>
 8017fb4:	18e1      	adds	r1, r4, r3
 8017fb6:	1c5a      	adds	r2, r3, #1
 8017fb8:	2030      	movs	r0, #48	; 0x30
 8017fba:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8017fbe:	4422      	add	r2, r4
 8017fc0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8017fc4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8017fc8:	3302      	adds	r3, #2
 8017fca:	e7c7      	b.n	8017f5c <_printf_common+0x58>
 8017fcc:	2301      	movs	r3, #1
 8017fce:	4622      	mov	r2, r4
 8017fd0:	4649      	mov	r1, r9
 8017fd2:	4638      	mov	r0, r7
 8017fd4:	47c0      	blx	r8
 8017fd6:	3001      	adds	r0, #1
 8017fd8:	d0e6      	beq.n	8017fa8 <_printf_common+0xa4>
 8017fda:	3601      	adds	r6, #1
 8017fdc:	e7d9      	b.n	8017f92 <_printf_common+0x8e>
	...

08017fe0 <_printf_i>:
 8017fe0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8017fe4:	460c      	mov	r4, r1
 8017fe6:	4691      	mov	r9, r2
 8017fe8:	7e27      	ldrb	r7, [r4, #24]
 8017fea:	990c      	ldr	r1, [sp, #48]	; 0x30
 8017fec:	2f78      	cmp	r7, #120	; 0x78
 8017fee:	4680      	mov	r8, r0
 8017ff0:	469a      	mov	sl, r3
 8017ff2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8017ff6:	d807      	bhi.n	8018008 <_printf_i+0x28>
 8017ff8:	2f62      	cmp	r7, #98	; 0x62
 8017ffa:	d80a      	bhi.n	8018012 <_printf_i+0x32>
 8017ffc:	2f00      	cmp	r7, #0
 8017ffe:	f000 80d8 	beq.w	80181b2 <_printf_i+0x1d2>
 8018002:	2f58      	cmp	r7, #88	; 0x58
 8018004:	f000 80a3 	beq.w	801814e <_printf_i+0x16e>
 8018008:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801800c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8018010:	e03a      	b.n	8018088 <_printf_i+0xa8>
 8018012:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8018016:	2b15      	cmp	r3, #21
 8018018:	d8f6      	bhi.n	8018008 <_printf_i+0x28>
 801801a:	a001      	add	r0, pc, #4	; (adr r0, 8018020 <_printf_i+0x40>)
 801801c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8018020:	08018079 	.word	0x08018079
 8018024:	0801808d 	.word	0x0801808d
 8018028:	08018009 	.word	0x08018009
 801802c:	08018009 	.word	0x08018009
 8018030:	08018009 	.word	0x08018009
 8018034:	08018009 	.word	0x08018009
 8018038:	0801808d 	.word	0x0801808d
 801803c:	08018009 	.word	0x08018009
 8018040:	08018009 	.word	0x08018009
 8018044:	08018009 	.word	0x08018009
 8018048:	08018009 	.word	0x08018009
 801804c:	08018199 	.word	0x08018199
 8018050:	080180bd 	.word	0x080180bd
 8018054:	0801817b 	.word	0x0801817b
 8018058:	08018009 	.word	0x08018009
 801805c:	08018009 	.word	0x08018009
 8018060:	080181bb 	.word	0x080181bb
 8018064:	08018009 	.word	0x08018009
 8018068:	080180bd 	.word	0x080180bd
 801806c:	08018009 	.word	0x08018009
 8018070:	08018009 	.word	0x08018009
 8018074:	08018183 	.word	0x08018183
 8018078:	680b      	ldr	r3, [r1, #0]
 801807a:	1d1a      	adds	r2, r3, #4
 801807c:	681b      	ldr	r3, [r3, #0]
 801807e:	600a      	str	r2, [r1, #0]
 8018080:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8018084:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8018088:	2301      	movs	r3, #1
 801808a:	e0a3      	b.n	80181d4 <_printf_i+0x1f4>
 801808c:	6825      	ldr	r5, [r4, #0]
 801808e:	6808      	ldr	r0, [r1, #0]
 8018090:	062e      	lsls	r6, r5, #24
 8018092:	f100 0304 	add.w	r3, r0, #4
 8018096:	d50a      	bpl.n	80180ae <_printf_i+0xce>
 8018098:	6805      	ldr	r5, [r0, #0]
 801809a:	600b      	str	r3, [r1, #0]
 801809c:	2d00      	cmp	r5, #0
 801809e:	da03      	bge.n	80180a8 <_printf_i+0xc8>
 80180a0:	232d      	movs	r3, #45	; 0x2d
 80180a2:	426d      	negs	r5, r5
 80180a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80180a8:	485e      	ldr	r0, [pc, #376]	; (8018224 <_printf_i+0x244>)
 80180aa:	230a      	movs	r3, #10
 80180ac:	e019      	b.n	80180e2 <_printf_i+0x102>
 80180ae:	f015 0f40 	tst.w	r5, #64	; 0x40
 80180b2:	6805      	ldr	r5, [r0, #0]
 80180b4:	600b      	str	r3, [r1, #0]
 80180b6:	bf18      	it	ne
 80180b8:	b22d      	sxthne	r5, r5
 80180ba:	e7ef      	b.n	801809c <_printf_i+0xbc>
 80180bc:	680b      	ldr	r3, [r1, #0]
 80180be:	6825      	ldr	r5, [r4, #0]
 80180c0:	1d18      	adds	r0, r3, #4
 80180c2:	6008      	str	r0, [r1, #0]
 80180c4:	0628      	lsls	r0, r5, #24
 80180c6:	d501      	bpl.n	80180cc <_printf_i+0xec>
 80180c8:	681d      	ldr	r5, [r3, #0]
 80180ca:	e002      	b.n	80180d2 <_printf_i+0xf2>
 80180cc:	0669      	lsls	r1, r5, #25
 80180ce:	d5fb      	bpl.n	80180c8 <_printf_i+0xe8>
 80180d0:	881d      	ldrh	r5, [r3, #0]
 80180d2:	4854      	ldr	r0, [pc, #336]	; (8018224 <_printf_i+0x244>)
 80180d4:	2f6f      	cmp	r7, #111	; 0x6f
 80180d6:	bf0c      	ite	eq
 80180d8:	2308      	moveq	r3, #8
 80180da:	230a      	movne	r3, #10
 80180dc:	2100      	movs	r1, #0
 80180de:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80180e2:	6866      	ldr	r6, [r4, #4]
 80180e4:	60a6      	str	r6, [r4, #8]
 80180e6:	2e00      	cmp	r6, #0
 80180e8:	bfa2      	ittt	ge
 80180ea:	6821      	ldrge	r1, [r4, #0]
 80180ec:	f021 0104 	bicge.w	r1, r1, #4
 80180f0:	6021      	strge	r1, [r4, #0]
 80180f2:	b90d      	cbnz	r5, 80180f8 <_printf_i+0x118>
 80180f4:	2e00      	cmp	r6, #0
 80180f6:	d04d      	beq.n	8018194 <_printf_i+0x1b4>
 80180f8:	4616      	mov	r6, r2
 80180fa:	fbb5 f1f3 	udiv	r1, r5, r3
 80180fe:	fb03 5711 	mls	r7, r3, r1, r5
 8018102:	5dc7      	ldrb	r7, [r0, r7]
 8018104:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8018108:	462f      	mov	r7, r5
 801810a:	42bb      	cmp	r3, r7
 801810c:	460d      	mov	r5, r1
 801810e:	d9f4      	bls.n	80180fa <_printf_i+0x11a>
 8018110:	2b08      	cmp	r3, #8
 8018112:	d10b      	bne.n	801812c <_printf_i+0x14c>
 8018114:	6823      	ldr	r3, [r4, #0]
 8018116:	07df      	lsls	r7, r3, #31
 8018118:	d508      	bpl.n	801812c <_printf_i+0x14c>
 801811a:	6923      	ldr	r3, [r4, #16]
 801811c:	6861      	ldr	r1, [r4, #4]
 801811e:	4299      	cmp	r1, r3
 8018120:	bfde      	ittt	le
 8018122:	2330      	movle	r3, #48	; 0x30
 8018124:	f806 3c01 	strble.w	r3, [r6, #-1]
 8018128:	f106 36ff 	addle.w	r6, r6, #4294967295
 801812c:	1b92      	subs	r2, r2, r6
 801812e:	6122      	str	r2, [r4, #16]
 8018130:	f8cd a000 	str.w	sl, [sp]
 8018134:	464b      	mov	r3, r9
 8018136:	aa03      	add	r2, sp, #12
 8018138:	4621      	mov	r1, r4
 801813a:	4640      	mov	r0, r8
 801813c:	f7ff fee2 	bl	8017f04 <_printf_common>
 8018140:	3001      	adds	r0, #1
 8018142:	d14c      	bne.n	80181de <_printf_i+0x1fe>
 8018144:	f04f 30ff 	mov.w	r0, #4294967295
 8018148:	b004      	add	sp, #16
 801814a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801814e:	4835      	ldr	r0, [pc, #212]	; (8018224 <_printf_i+0x244>)
 8018150:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8018154:	6823      	ldr	r3, [r4, #0]
 8018156:	680e      	ldr	r6, [r1, #0]
 8018158:	061f      	lsls	r7, r3, #24
 801815a:	f856 5b04 	ldr.w	r5, [r6], #4
 801815e:	600e      	str	r6, [r1, #0]
 8018160:	d514      	bpl.n	801818c <_printf_i+0x1ac>
 8018162:	07d9      	lsls	r1, r3, #31
 8018164:	bf44      	itt	mi
 8018166:	f043 0320 	orrmi.w	r3, r3, #32
 801816a:	6023      	strmi	r3, [r4, #0]
 801816c:	b91d      	cbnz	r5, 8018176 <_printf_i+0x196>
 801816e:	6823      	ldr	r3, [r4, #0]
 8018170:	f023 0320 	bic.w	r3, r3, #32
 8018174:	6023      	str	r3, [r4, #0]
 8018176:	2310      	movs	r3, #16
 8018178:	e7b0      	b.n	80180dc <_printf_i+0xfc>
 801817a:	6823      	ldr	r3, [r4, #0]
 801817c:	f043 0320 	orr.w	r3, r3, #32
 8018180:	6023      	str	r3, [r4, #0]
 8018182:	2378      	movs	r3, #120	; 0x78
 8018184:	4828      	ldr	r0, [pc, #160]	; (8018228 <_printf_i+0x248>)
 8018186:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801818a:	e7e3      	b.n	8018154 <_printf_i+0x174>
 801818c:	065e      	lsls	r6, r3, #25
 801818e:	bf48      	it	mi
 8018190:	b2ad      	uxthmi	r5, r5
 8018192:	e7e6      	b.n	8018162 <_printf_i+0x182>
 8018194:	4616      	mov	r6, r2
 8018196:	e7bb      	b.n	8018110 <_printf_i+0x130>
 8018198:	680b      	ldr	r3, [r1, #0]
 801819a:	6826      	ldr	r6, [r4, #0]
 801819c:	6960      	ldr	r0, [r4, #20]
 801819e:	1d1d      	adds	r5, r3, #4
 80181a0:	600d      	str	r5, [r1, #0]
 80181a2:	0635      	lsls	r5, r6, #24
 80181a4:	681b      	ldr	r3, [r3, #0]
 80181a6:	d501      	bpl.n	80181ac <_printf_i+0x1cc>
 80181a8:	6018      	str	r0, [r3, #0]
 80181aa:	e002      	b.n	80181b2 <_printf_i+0x1d2>
 80181ac:	0671      	lsls	r1, r6, #25
 80181ae:	d5fb      	bpl.n	80181a8 <_printf_i+0x1c8>
 80181b0:	8018      	strh	r0, [r3, #0]
 80181b2:	2300      	movs	r3, #0
 80181b4:	6123      	str	r3, [r4, #16]
 80181b6:	4616      	mov	r6, r2
 80181b8:	e7ba      	b.n	8018130 <_printf_i+0x150>
 80181ba:	680b      	ldr	r3, [r1, #0]
 80181bc:	1d1a      	adds	r2, r3, #4
 80181be:	600a      	str	r2, [r1, #0]
 80181c0:	681e      	ldr	r6, [r3, #0]
 80181c2:	6862      	ldr	r2, [r4, #4]
 80181c4:	2100      	movs	r1, #0
 80181c6:	4630      	mov	r0, r6
 80181c8:	f7e8 f832 	bl	8000230 <memchr>
 80181cc:	b108      	cbz	r0, 80181d2 <_printf_i+0x1f2>
 80181ce:	1b80      	subs	r0, r0, r6
 80181d0:	6060      	str	r0, [r4, #4]
 80181d2:	6863      	ldr	r3, [r4, #4]
 80181d4:	6123      	str	r3, [r4, #16]
 80181d6:	2300      	movs	r3, #0
 80181d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80181dc:	e7a8      	b.n	8018130 <_printf_i+0x150>
 80181de:	6923      	ldr	r3, [r4, #16]
 80181e0:	4632      	mov	r2, r6
 80181e2:	4649      	mov	r1, r9
 80181e4:	4640      	mov	r0, r8
 80181e6:	47d0      	blx	sl
 80181e8:	3001      	adds	r0, #1
 80181ea:	d0ab      	beq.n	8018144 <_printf_i+0x164>
 80181ec:	6823      	ldr	r3, [r4, #0]
 80181ee:	079b      	lsls	r3, r3, #30
 80181f0:	d413      	bmi.n	801821a <_printf_i+0x23a>
 80181f2:	68e0      	ldr	r0, [r4, #12]
 80181f4:	9b03      	ldr	r3, [sp, #12]
 80181f6:	4298      	cmp	r0, r3
 80181f8:	bfb8      	it	lt
 80181fa:	4618      	movlt	r0, r3
 80181fc:	e7a4      	b.n	8018148 <_printf_i+0x168>
 80181fe:	2301      	movs	r3, #1
 8018200:	4632      	mov	r2, r6
 8018202:	4649      	mov	r1, r9
 8018204:	4640      	mov	r0, r8
 8018206:	47d0      	blx	sl
 8018208:	3001      	adds	r0, #1
 801820a:	d09b      	beq.n	8018144 <_printf_i+0x164>
 801820c:	3501      	adds	r5, #1
 801820e:	68e3      	ldr	r3, [r4, #12]
 8018210:	9903      	ldr	r1, [sp, #12]
 8018212:	1a5b      	subs	r3, r3, r1
 8018214:	42ab      	cmp	r3, r5
 8018216:	dcf2      	bgt.n	80181fe <_printf_i+0x21e>
 8018218:	e7eb      	b.n	80181f2 <_printf_i+0x212>
 801821a:	2500      	movs	r5, #0
 801821c:	f104 0619 	add.w	r6, r4, #25
 8018220:	e7f5      	b.n	801820e <_printf_i+0x22e>
 8018222:	bf00      	nop
 8018224:	0801c5ae 	.word	0x0801c5ae
 8018228:	0801c5bf 	.word	0x0801c5bf

0801822c <_sbrk_r>:
 801822c:	b538      	push	{r3, r4, r5, lr}
 801822e:	4d06      	ldr	r5, [pc, #24]	; (8018248 <_sbrk_r+0x1c>)
 8018230:	2300      	movs	r3, #0
 8018232:	4604      	mov	r4, r0
 8018234:	4608      	mov	r0, r1
 8018236:	602b      	str	r3, [r5, #0]
 8018238:	f7fe ffee 	bl	8017218 <_sbrk>
 801823c:	1c43      	adds	r3, r0, #1
 801823e:	d102      	bne.n	8018246 <_sbrk_r+0x1a>
 8018240:	682b      	ldr	r3, [r5, #0]
 8018242:	b103      	cbz	r3, 8018246 <_sbrk_r+0x1a>
 8018244:	6023      	str	r3, [r4, #0]
 8018246:	bd38      	pop	{r3, r4, r5, pc}
 8018248:	2001e3f8 	.word	0x2001e3f8

0801824c <siprintf>:
 801824c:	b40e      	push	{r1, r2, r3}
 801824e:	b500      	push	{lr}
 8018250:	b09c      	sub	sp, #112	; 0x70
 8018252:	ab1d      	add	r3, sp, #116	; 0x74
 8018254:	9002      	str	r0, [sp, #8]
 8018256:	9006      	str	r0, [sp, #24]
 8018258:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801825c:	4809      	ldr	r0, [pc, #36]	; (8018284 <siprintf+0x38>)
 801825e:	9107      	str	r1, [sp, #28]
 8018260:	9104      	str	r1, [sp, #16]
 8018262:	4909      	ldr	r1, [pc, #36]	; (8018288 <siprintf+0x3c>)
 8018264:	f853 2b04 	ldr.w	r2, [r3], #4
 8018268:	9105      	str	r1, [sp, #20]
 801826a:	6800      	ldr	r0, [r0, #0]
 801826c:	9301      	str	r3, [sp, #4]
 801826e:	a902      	add	r1, sp, #8
 8018270:	f002 ff7a 	bl	801b168 <_svfiprintf_r>
 8018274:	9b02      	ldr	r3, [sp, #8]
 8018276:	2200      	movs	r2, #0
 8018278:	701a      	strb	r2, [r3, #0]
 801827a:	b01c      	add	sp, #112	; 0x70
 801827c:	f85d eb04 	ldr.w	lr, [sp], #4
 8018280:	b003      	add	sp, #12
 8018282:	4770      	bx	lr
 8018284:	2000036c 	.word	0x2000036c
 8018288:	ffff0208 	.word	0xffff0208

0801828c <__sread>:
 801828c:	b510      	push	{r4, lr}
 801828e:	460c      	mov	r4, r1
 8018290:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018294:	f003 f868 	bl	801b368 <_read_r>
 8018298:	2800      	cmp	r0, #0
 801829a:	bfab      	itete	ge
 801829c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801829e:	89a3      	ldrhlt	r3, [r4, #12]
 80182a0:	181b      	addge	r3, r3, r0
 80182a2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80182a6:	bfac      	ite	ge
 80182a8:	6563      	strge	r3, [r4, #84]	; 0x54
 80182aa:	81a3      	strhlt	r3, [r4, #12]
 80182ac:	bd10      	pop	{r4, pc}

080182ae <__swrite>:
 80182ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80182b2:	461f      	mov	r7, r3
 80182b4:	898b      	ldrh	r3, [r1, #12]
 80182b6:	05db      	lsls	r3, r3, #23
 80182b8:	4605      	mov	r5, r0
 80182ba:	460c      	mov	r4, r1
 80182bc:	4616      	mov	r6, r2
 80182be:	d505      	bpl.n	80182cc <__swrite+0x1e>
 80182c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80182c4:	2302      	movs	r3, #2
 80182c6:	2200      	movs	r2, #0
 80182c8:	f002 fa08 	bl	801a6dc <_lseek_r>
 80182cc:	89a3      	ldrh	r3, [r4, #12]
 80182ce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80182d2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80182d6:	81a3      	strh	r3, [r4, #12]
 80182d8:	4632      	mov	r2, r6
 80182da:	463b      	mov	r3, r7
 80182dc:	4628      	mov	r0, r5
 80182de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80182e2:	f000 bf5b 	b.w	801919c <_write_r>

080182e6 <__sseek>:
 80182e6:	b510      	push	{r4, lr}
 80182e8:	460c      	mov	r4, r1
 80182ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80182ee:	f002 f9f5 	bl	801a6dc <_lseek_r>
 80182f2:	1c43      	adds	r3, r0, #1
 80182f4:	89a3      	ldrh	r3, [r4, #12]
 80182f6:	bf15      	itete	ne
 80182f8:	6560      	strne	r0, [r4, #84]	; 0x54
 80182fa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80182fe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8018302:	81a3      	strheq	r3, [r4, #12]
 8018304:	bf18      	it	ne
 8018306:	81a3      	strhne	r3, [r4, #12]
 8018308:	bd10      	pop	{r4, pc}

0801830a <__sclose>:
 801830a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801830e:	f000 bfc5 	b.w	801929c <_close_r>

08018312 <strchr>:
 8018312:	b2c9      	uxtb	r1, r1
 8018314:	4603      	mov	r3, r0
 8018316:	f810 2b01 	ldrb.w	r2, [r0], #1
 801831a:	b11a      	cbz	r2, 8018324 <strchr+0x12>
 801831c:	428a      	cmp	r2, r1
 801831e:	d1f9      	bne.n	8018314 <strchr+0x2>
 8018320:	4618      	mov	r0, r3
 8018322:	4770      	bx	lr
 8018324:	2900      	cmp	r1, #0
 8018326:	bf18      	it	ne
 8018328:	2300      	movne	r3, #0
 801832a:	e7f9      	b.n	8018320 <strchr+0xe>

0801832c <strncmp>:
 801832c:	b510      	push	{r4, lr}
 801832e:	b16a      	cbz	r2, 801834c <strncmp+0x20>
 8018330:	3901      	subs	r1, #1
 8018332:	1884      	adds	r4, r0, r2
 8018334:	f810 3b01 	ldrb.w	r3, [r0], #1
 8018338:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801833c:	4293      	cmp	r3, r2
 801833e:	d103      	bne.n	8018348 <strncmp+0x1c>
 8018340:	42a0      	cmp	r0, r4
 8018342:	d001      	beq.n	8018348 <strncmp+0x1c>
 8018344:	2b00      	cmp	r3, #0
 8018346:	d1f5      	bne.n	8018334 <strncmp+0x8>
 8018348:	1a98      	subs	r0, r3, r2
 801834a:	bd10      	pop	{r4, pc}
 801834c:	4610      	mov	r0, r2
 801834e:	e7fc      	b.n	801834a <strncmp+0x1e>

08018350 <strncpy>:
 8018350:	b510      	push	{r4, lr}
 8018352:	3901      	subs	r1, #1
 8018354:	4603      	mov	r3, r0
 8018356:	b132      	cbz	r2, 8018366 <strncpy+0x16>
 8018358:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801835c:	f803 4b01 	strb.w	r4, [r3], #1
 8018360:	3a01      	subs	r2, #1
 8018362:	2c00      	cmp	r4, #0
 8018364:	d1f7      	bne.n	8018356 <strncpy+0x6>
 8018366:	441a      	add	r2, r3
 8018368:	2100      	movs	r1, #0
 801836a:	4293      	cmp	r3, r2
 801836c:	d100      	bne.n	8018370 <strncpy+0x20>
 801836e:	bd10      	pop	{r4, pc}
 8018370:	f803 1b01 	strb.w	r1, [r3], #1
 8018374:	e7f9      	b.n	801836a <strncpy+0x1a>

08018376 <sulp>:
 8018376:	b570      	push	{r4, r5, r6, lr}
 8018378:	4604      	mov	r4, r0
 801837a:	460d      	mov	r5, r1
 801837c:	ec45 4b10 	vmov	d0, r4, r5
 8018380:	4616      	mov	r6, r2
 8018382:	f002 fd47 	bl	801ae14 <__ulp>
 8018386:	ec51 0b10 	vmov	r0, r1, d0
 801838a:	b17e      	cbz	r6, 80183ac <sulp+0x36>
 801838c:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8018390:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8018394:	2b00      	cmp	r3, #0
 8018396:	dd09      	ble.n	80183ac <sulp+0x36>
 8018398:	051b      	lsls	r3, r3, #20
 801839a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 801839e:	2400      	movs	r4, #0
 80183a0:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80183a4:	4622      	mov	r2, r4
 80183a6:	462b      	mov	r3, r5
 80183a8:	f7e8 f94e 	bl	8000648 <__aeabi_dmul>
 80183ac:	bd70      	pop	{r4, r5, r6, pc}
	...

080183b0 <_strtod_l>:
 80183b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80183b4:	b0a3      	sub	sp, #140	; 0x8c
 80183b6:	461f      	mov	r7, r3
 80183b8:	2300      	movs	r3, #0
 80183ba:	931e      	str	r3, [sp, #120]	; 0x78
 80183bc:	4ba4      	ldr	r3, [pc, #656]	; (8018650 <_strtod_l+0x2a0>)
 80183be:	9219      	str	r2, [sp, #100]	; 0x64
 80183c0:	681b      	ldr	r3, [r3, #0]
 80183c2:	9307      	str	r3, [sp, #28]
 80183c4:	4604      	mov	r4, r0
 80183c6:	4618      	mov	r0, r3
 80183c8:	4688      	mov	r8, r1
 80183ca:	f7e7 ff23 	bl	8000214 <strlen>
 80183ce:	f04f 0a00 	mov.w	sl, #0
 80183d2:	4605      	mov	r5, r0
 80183d4:	f04f 0b00 	mov.w	fp, #0
 80183d8:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 80183dc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80183de:	781a      	ldrb	r2, [r3, #0]
 80183e0:	2a2b      	cmp	r2, #43	; 0x2b
 80183e2:	d04c      	beq.n	801847e <_strtod_l+0xce>
 80183e4:	d839      	bhi.n	801845a <_strtod_l+0xaa>
 80183e6:	2a0d      	cmp	r2, #13
 80183e8:	d832      	bhi.n	8018450 <_strtod_l+0xa0>
 80183ea:	2a08      	cmp	r2, #8
 80183ec:	d832      	bhi.n	8018454 <_strtod_l+0xa4>
 80183ee:	2a00      	cmp	r2, #0
 80183f0:	d03c      	beq.n	801846c <_strtod_l+0xbc>
 80183f2:	2300      	movs	r3, #0
 80183f4:	930e      	str	r3, [sp, #56]	; 0x38
 80183f6:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 80183f8:	7833      	ldrb	r3, [r6, #0]
 80183fa:	2b30      	cmp	r3, #48	; 0x30
 80183fc:	f040 80b4 	bne.w	8018568 <_strtod_l+0x1b8>
 8018400:	7873      	ldrb	r3, [r6, #1]
 8018402:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8018406:	2b58      	cmp	r3, #88	; 0x58
 8018408:	d16c      	bne.n	80184e4 <_strtod_l+0x134>
 801840a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801840c:	9301      	str	r3, [sp, #4]
 801840e:	ab1e      	add	r3, sp, #120	; 0x78
 8018410:	9702      	str	r7, [sp, #8]
 8018412:	9300      	str	r3, [sp, #0]
 8018414:	4a8f      	ldr	r2, [pc, #572]	; (8018654 <_strtod_l+0x2a4>)
 8018416:	ab1f      	add	r3, sp, #124	; 0x7c
 8018418:	a91d      	add	r1, sp, #116	; 0x74
 801841a:	4620      	mov	r0, r4
 801841c:	f001 fe42 	bl	801a0a4 <__gethex>
 8018420:	f010 0707 	ands.w	r7, r0, #7
 8018424:	4605      	mov	r5, r0
 8018426:	d005      	beq.n	8018434 <_strtod_l+0x84>
 8018428:	2f06      	cmp	r7, #6
 801842a:	d12a      	bne.n	8018482 <_strtod_l+0xd2>
 801842c:	3601      	adds	r6, #1
 801842e:	2300      	movs	r3, #0
 8018430:	961d      	str	r6, [sp, #116]	; 0x74
 8018432:	930e      	str	r3, [sp, #56]	; 0x38
 8018434:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8018436:	2b00      	cmp	r3, #0
 8018438:	f040 8596 	bne.w	8018f68 <_strtod_l+0xbb8>
 801843c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801843e:	b1db      	cbz	r3, 8018478 <_strtod_l+0xc8>
 8018440:	4652      	mov	r2, sl
 8018442:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8018446:	ec43 2b10 	vmov	d0, r2, r3
 801844a:	b023      	add	sp, #140	; 0x8c
 801844c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018450:	2a20      	cmp	r2, #32
 8018452:	d1ce      	bne.n	80183f2 <_strtod_l+0x42>
 8018454:	3301      	adds	r3, #1
 8018456:	931d      	str	r3, [sp, #116]	; 0x74
 8018458:	e7c0      	b.n	80183dc <_strtod_l+0x2c>
 801845a:	2a2d      	cmp	r2, #45	; 0x2d
 801845c:	d1c9      	bne.n	80183f2 <_strtod_l+0x42>
 801845e:	2201      	movs	r2, #1
 8018460:	920e      	str	r2, [sp, #56]	; 0x38
 8018462:	1c5a      	adds	r2, r3, #1
 8018464:	921d      	str	r2, [sp, #116]	; 0x74
 8018466:	785b      	ldrb	r3, [r3, #1]
 8018468:	2b00      	cmp	r3, #0
 801846a:	d1c4      	bne.n	80183f6 <_strtod_l+0x46>
 801846c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801846e:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8018472:	2b00      	cmp	r3, #0
 8018474:	f040 8576 	bne.w	8018f64 <_strtod_l+0xbb4>
 8018478:	4652      	mov	r2, sl
 801847a:	465b      	mov	r3, fp
 801847c:	e7e3      	b.n	8018446 <_strtod_l+0x96>
 801847e:	2200      	movs	r2, #0
 8018480:	e7ee      	b.n	8018460 <_strtod_l+0xb0>
 8018482:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8018484:	b13a      	cbz	r2, 8018496 <_strtod_l+0xe6>
 8018486:	2135      	movs	r1, #53	; 0x35
 8018488:	a820      	add	r0, sp, #128	; 0x80
 801848a:	f002 fdce 	bl	801b02a <__copybits>
 801848e:	991e      	ldr	r1, [sp, #120]	; 0x78
 8018490:	4620      	mov	r0, r4
 8018492:	f002 f993 	bl	801a7bc <_Bfree>
 8018496:	3f01      	subs	r7, #1
 8018498:	2f05      	cmp	r7, #5
 801849a:	d807      	bhi.n	80184ac <_strtod_l+0xfc>
 801849c:	e8df f007 	tbb	[pc, r7]
 80184a0:	1d180b0e 	.word	0x1d180b0e
 80184a4:	030e      	.short	0x030e
 80184a6:	f04f 0b00 	mov.w	fp, #0
 80184aa:	46da      	mov	sl, fp
 80184ac:	0728      	lsls	r0, r5, #28
 80184ae:	d5c1      	bpl.n	8018434 <_strtod_l+0x84>
 80184b0:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 80184b4:	e7be      	b.n	8018434 <_strtod_l+0x84>
 80184b6:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 80184ba:	e7f7      	b.n	80184ac <_strtod_l+0xfc>
 80184bc:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 80184c0:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80184c2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80184c6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80184ca:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80184ce:	e7ed      	b.n	80184ac <_strtod_l+0xfc>
 80184d0:	f8df b184 	ldr.w	fp, [pc, #388]	; 8018658 <_strtod_l+0x2a8>
 80184d4:	f04f 0a00 	mov.w	sl, #0
 80184d8:	e7e8      	b.n	80184ac <_strtod_l+0xfc>
 80184da:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 80184de:	f04f 3aff 	mov.w	sl, #4294967295
 80184e2:	e7e3      	b.n	80184ac <_strtod_l+0xfc>
 80184e4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80184e6:	1c5a      	adds	r2, r3, #1
 80184e8:	921d      	str	r2, [sp, #116]	; 0x74
 80184ea:	785b      	ldrb	r3, [r3, #1]
 80184ec:	2b30      	cmp	r3, #48	; 0x30
 80184ee:	d0f9      	beq.n	80184e4 <_strtod_l+0x134>
 80184f0:	2b00      	cmp	r3, #0
 80184f2:	d09f      	beq.n	8018434 <_strtod_l+0x84>
 80184f4:	2301      	movs	r3, #1
 80184f6:	f04f 0900 	mov.w	r9, #0
 80184fa:	9304      	str	r3, [sp, #16]
 80184fc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80184fe:	930a      	str	r3, [sp, #40]	; 0x28
 8018500:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8018504:	464f      	mov	r7, r9
 8018506:	220a      	movs	r2, #10
 8018508:	981d      	ldr	r0, [sp, #116]	; 0x74
 801850a:	7806      	ldrb	r6, [r0, #0]
 801850c:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8018510:	b2d9      	uxtb	r1, r3
 8018512:	2909      	cmp	r1, #9
 8018514:	d92a      	bls.n	801856c <_strtod_l+0x1bc>
 8018516:	9907      	ldr	r1, [sp, #28]
 8018518:	462a      	mov	r2, r5
 801851a:	f7ff ff07 	bl	801832c <strncmp>
 801851e:	b398      	cbz	r0, 8018588 <_strtod_l+0x1d8>
 8018520:	2000      	movs	r0, #0
 8018522:	4633      	mov	r3, r6
 8018524:	463d      	mov	r5, r7
 8018526:	9007      	str	r0, [sp, #28]
 8018528:	4602      	mov	r2, r0
 801852a:	2b65      	cmp	r3, #101	; 0x65
 801852c:	d001      	beq.n	8018532 <_strtod_l+0x182>
 801852e:	2b45      	cmp	r3, #69	; 0x45
 8018530:	d118      	bne.n	8018564 <_strtod_l+0x1b4>
 8018532:	b91d      	cbnz	r5, 801853c <_strtod_l+0x18c>
 8018534:	9b04      	ldr	r3, [sp, #16]
 8018536:	4303      	orrs	r3, r0
 8018538:	d098      	beq.n	801846c <_strtod_l+0xbc>
 801853a:	2500      	movs	r5, #0
 801853c:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 8018540:	f108 0301 	add.w	r3, r8, #1
 8018544:	931d      	str	r3, [sp, #116]	; 0x74
 8018546:	f898 3001 	ldrb.w	r3, [r8, #1]
 801854a:	2b2b      	cmp	r3, #43	; 0x2b
 801854c:	d075      	beq.n	801863a <_strtod_l+0x28a>
 801854e:	2b2d      	cmp	r3, #45	; 0x2d
 8018550:	d07b      	beq.n	801864a <_strtod_l+0x29a>
 8018552:	f04f 0c00 	mov.w	ip, #0
 8018556:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 801855a:	2909      	cmp	r1, #9
 801855c:	f240 8082 	bls.w	8018664 <_strtod_l+0x2b4>
 8018560:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8018564:	2600      	movs	r6, #0
 8018566:	e09d      	b.n	80186a4 <_strtod_l+0x2f4>
 8018568:	2300      	movs	r3, #0
 801856a:	e7c4      	b.n	80184f6 <_strtod_l+0x146>
 801856c:	2f08      	cmp	r7, #8
 801856e:	bfd8      	it	le
 8018570:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8018572:	f100 0001 	add.w	r0, r0, #1
 8018576:	bfda      	itte	le
 8018578:	fb02 3301 	mlale	r3, r2, r1, r3
 801857c:	9309      	strle	r3, [sp, #36]	; 0x24
 801857e:	fb02 3909 	mlagt	r9, r2, r9, r3
 8018582:	3701      	adds	r7, #1
 8018584:	901d      	str	r0, [sp, #116]	; 0x74
 8018586:	e7bf      	b.n	8018508 <_strtod_l+0x158>
 8018588:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801858a:	195a      	adds	r2, r3, r5
 801858c:	921d      	str	r2, [sp, #116]	; 0x74
 801858e:	5d5b      	ldrb	r3, [r3, r5]
 8018590:	2f00      	cmp	r7, #0
 8018592:	d037      	beq.n	8018604 <_strtod_l+0x254>
 8018594:	9007      	str	r0, [sp, #28]
 8018596:	463d      	mov	r5, r7
 8018598:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 801859c:	2a09      	cmp	r2, #9
 801859e:	d912      	bls.n	80185c6 <_strtod_l+0x216>
 80185a0:	2201      	movs	r2, #1
 80185a2:	e7c2      	b.n	801852a <_strtod_l+0x17a>
 80185a4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80185a6:	1c5a      	adds	r2, r3, #1
 80185a8:	921d      	str	r2, [sp, #116]	; 0x74
 80185aa:	785b      	ldrb	r3, [r3, #1]
 80185ac:	3001      	adds	r0, #1
 80185ae:	2b30      	cmp	r3, #48	; 0x30
 80185b0:	d0f8      	beq.n	80185a4 <_strtod_l+0x1f4>
 80185b2:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 80185b6:	2a08      	cmp	r2, #8
 80185b8:	f200 84db 	bhi.w	8018f72 <_strtod_l+0xbc2>
 80185bc:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80185be:	9007      	str	r0, [sp, #28]
 80185c0:	2000      	movs	r0, #0
 80185c2:	920a      	str	r2, [sp, #40]	; 0x28
 80185c4:	4605      	mov	r5, r0
 80185c6:	3b30      	subs	r3, #48	; 0x30
 80185c8:	f100 0201 	add.w	r2, r0, #1
 80185cc:	d014      	beq.n	80185f8 <_strtod_l+0x248>
 80185ce:	9907      	ldr	r1, [sp, #28]
 80185d0:	4411      	add	r1, r2
 80185d2:	9107      	str	r1, [sp, #28]
 80185d4:	462a      	mov	r2, r5
 80185d6:	eb00 0e05 	add.w	lr, r0, r5
 80185da:	210a      	movs	r1, #10
 80185dc:	4572      	cmp	r2, lr
 80185de:	d113      	bne.n	8018608 <_strtod_l+0x258>
 80185e0:	182a      	adds	r2, r5, r0
 80185e2:	2a08      	cmp	r2, #8
 80185e4:	f105 0501 	add.w	r5, r5, #1
 80185e8:	4405      	add	r5, r0
 80185ea:	dc1c      	bgt.n	8018626 <_strtod_l+0x276>
 80185ec:	9909      	ldr	r1, [sp, #36]	; 0x24
 80185ee:	220a      	movs	r2, #10
 80185f0:	fb02 3301 	mla	r3, r2, r1, r3
 80185f4:	9309      	str	r3, [sp, #36]	; 0x24
 80185f6:	2200      	movs	r2, #0
 80185f8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80185fa:	1c59      	adds	r1, r3, #1
 80185fc:	911d      	str	r1, [sp, #116]	; 0x74
 80185fe:	785b      	ldrb	r3, [r3, #1]
 8018600:	4610      	mov	r0, r2
 8018602:	e7c9      	b.n	8018598 <_strtod_l+0x1e8>
 8018604:	4638      	mov	r0, r7
 8018606:	e7d2      	b.n	80185ae <_strtod_l+0x1fe>
 8018608:	2a08      	cmp	r2, #8
 801860a:	dc04      	bgt.n	8018616 <_strtod_l+0x266>
 801860c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 801860e:	434e      	muls	r6, r1
 8018610:	9609      	str	r6, [sp, #36]	; 0x24
 8018612:	3201      	adds	r2, #1
 8018614:	e7e2      	b.n	80185dc <_strtod_l+0x22c>
 8018616:	f102 0c01 	add.w	ip, r2, #1
 801861a:	f1bc 0f10 	cmp.w	ip, #16
 801861e:	bfd8      	it	le
 8018620:	fb01 f909 	mulle.w	r9, r1, r9
 8018624:	e7f5      	b.n	8018612 <_strtod_l+0x262>
 8018626:	2d10      	cmp	r5, #16
 8018628:	bfdc      	itt	le
 801862a:	220a      	movle	r2, #10
 801862c:	fb02 3909 	mlale	r9, r2, r9, r3
 8018630:	e7e1      	b.n	80185f6 <_strtod_l+0x246>
 8018632:	2300      	movs	r3, #0
 8018634:	9307      	str	r3, [sp, #28]
 8018636:	2201      	movs	r2, #1
 8018638:	e77c      	b.n	8018534 <_strtod_l+0x184>
 801863a:	f04f 0c00 	mov.w	ip, #0
 801863e:	f108 0302 	add.w	r3, r8, #2
 8018642:	931d      	str	r3, [sp, #116]	; 0x74
 8018644:	f898 3002 	ldrb.w	r3, [r8, #2]
 8018648:	e785      	b.n	8018556 <_strtod_l+0x1a6>
 801864a:	f04f 0c01 	mov.w	ip, #1
 801864e:	e7f6      	b.n	801863e <_strtod_l+0x28e>
 8018650:	0801c720 	.word	0x0801c720
 8018654:	0801c5d0 	.word	0x0801c5d0
 8018658:	7ff00000 	.word	0x7ff00000
 801865c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801865e:	1c59      	adds	r1, r3, #1
 8018660:	911d      	str	r1, [sp, #116]	; 0x74
 8018662:	785b      	ldrb	r3, [r3, #1]
 8018664:	2b30      	cmp	r3, #48	; 0x30
 8018666:	d0f9      	beq.n	801865c <_strtod_l+0x2ac>
 8018668:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 801866c:	2908      	cmp	r1, #8
 801866e:	f63f af79 	bhi.w	8018564 <_strtod_l+0x1b4>
 8018672:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8018676:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8018678:	9308      	str	r3, [sp, #32]
 801867a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801867c:	1c59      	adds	r1, r3, #1
 801867e:	911d      	str	r1, [sp, #116]	; 0x74
 8018680:	785b      	ldrb	r3, [r3, #1]
 8018682:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 8018686:	2e09      	cmp	r6, #9
 8018688:	d937      	bls.n	80186fa <_strtod_l+0x34a>
 801868a:	9e08      	ldr	r6, [sp, #32]
 801868c:	1b89      	subs	r1, r1, r6
 801868e:	2908      	cmp	r1, #8
 8018690:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8018694:	dc02      	bgt.n	801869c <_strtod_l+0x2ec>
 8018696:	4576      	cmp	r6, lr
 8018698:	bfa8      	it	ge
 801869a:	4676      	movge	r6, lr
 801869c:	f1bc 0f00 	cmp.w	ip, #0
 80186a0:	d000      	beq.n	80186a4 <_strtod_l+0x2f4>
 80186a2:	4276      	negs	r6, r6
 80186a4:	2d00      	cmp	r5, #0
 80186a6:	d14f      	bne.n	8018748 <_strtod_l+0x398>
 80186a8:	9904      	ldr	r1, [sp, #16]
 80186aa:	4301      	orrs	r1, r0
 80186ac:	f47f aec2 	bne.w	8018434 <_strtod_l+0x84>
 80186b0:	2a00      	cmp	r2, #0
 80186b2:	f47f aedb 	bne.w	801846c <_strtod_l+0xbc>
 80186b6:	2b69      	cmp	r3, #105	; 0x69
 80186b8:	d027      	beq.n	801870a <_strtod_l+0x35a>
 80186ba:	dc24      	bgt.n	8018706 <_strtod_l+0x356>
 80186bc:	2b49      	cmp	r3, #73	; 0x49
 80186be:	d024      	beq.n	801870a <_strtod_l+0x35a>
 80186c0:	2b4e      	cmp	r3, #78	; 0x4e
 80186c2:	f47f aed3 	bne.w	801846c <_strtod_l+0xbc>
 80186c6:	499e      	ldr	r1, [pc, #632]	; (8018940 <_strtod_l+0x590>)
 80186c8:	a81d      	add	r0, sp, #116	; 0x74
 80186ca:	f001 ff43 	bl	801a554 <__match>
 80186ce:	2800      	cmp	r0, #0
 80186d0:	f43f aecc 	beq.w	801846c <_strtod_l+0xbc>
 80186d4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80186d6:	781b      	ldrb	r3, [r3, #0]
 80186d8:	2b28      	cmp	r3, #40	; 0x28
 80186da:	d12d      	bne.n	8018738 <_strtod_l+0x388>
 80186dc:	4999      	ldr	r1, [pc, #612]	; (8018944 <_strtod_l+0x594>)
 80186de:	aa20      	add	r2, sp, #128	; 0x80
 80186e0:	a81d      	add	r0, sp, #116	; 0x74
 80186e2:	f001 ff4b 	bl	801a57c <__hexnan>
 80186e6:	2805      	cmp	r0, #5
 80186e8:	d126      	bne.n	8018738 <_strtod_l+0x388>
 80186ea:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80186ec:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 80186f0:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 80186f4:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 80186f8:	e69c      	b.n	8018434 <_strtod_l+0x84>
 80186fa:	210a      	movs	r1, #10
 80186fc:	fb01 3e0e 	mla	lr, r1, lr, r3
 8018700:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8018704:	e7b9      	b.n	801867a <_strtod_l+0x2ca>
 8018706:	2b6e      	cmp	r3, #110	; 0x6e
 8018708:	e7db      	b.n	80186c2 <_strtod_l+0x312>
 801870a:	498f      	ldr	r1, [pc, #572]	; (8018948 <_strtod_l+0x598>)
 801870c:	a81d      	add	r0, sp, #116	; 0x74
 801870e:	f001 ff21 	bl	801a554 <__match>
 8018712:	2800      	cmp	r0, #0
 8018714:	f43f aeaa 	beq.w	801846c <_strtod_l+0xbc>
 8018718:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801871a:	498c      	ldr	r1, [pc, #560]	; (801894c <_strtod_l+0x59c>)
 801871c:	3b01      	subs	r3, #1
 801871e:	a81d      	add	r0, sp, #116	; 0x74
 8018720:	931d      	str	r3, [sp, #116]	; 0x74
 8018722:	f001 ff17 	bl	801a554 <__match>
 8018726:	b910      	cbnz	r0, 801872e <_strtod_l+0x37e>
 8018728:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801872a:	3301      	adds	r3, #1
 801872c:	931d      	str	r3, [sp, #116]	; 0x74
 801872e:	f8df b22c 	ldr.w	fp, [pc, #556]	; 801895c <_strtod_l+0x5ac>
 8018732:	f04f 0a00 	mov.w	sl, #0
 8018736:	e67d      	b.n	8018434 <_strtod_l+0x84>
 8018738:	4885      	ldr	r0, [pc, #532]	; (8018950 <_strtod_l+0x5a0>)
 801873a:	f002 fe29 	bl	801b390 <nan>
 801873e:	ed8d 0b04 	vstr	d0, [sp, #16]
 8018742:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8018746:	e675      	b.n	8018434 <_strtod_l+0x84>
 8018748:	9b07      	ldr	r3, [sp, #28]
 801874a:	9809      	ldr	r0, [sp, #36]	; 0x24
 801874c:	1af3      	subs	r3, r6, r3
 801874e:	2f00      	cmp	r7, #0
 8018750:	bf08      	it	eq
 8018752:	462f      	moveq	r7, r5
 8018754:	2d10      	cmp	r5, #16
 8018756:	9308      	str	r3, [sp, #32]
 8018758:	46a8      	mov	r8, r5
 801875a:	bfa8      	it	ge
 801875c:	f04f 0810 	movge.w	r8, #16
 8018760:	f7e7 fef8 	bl	8000554 <__aeabi_ui2d>
 8018764:	2d09      	cmp	r5, #9
 8018766:	4682      	mov	sl, r0
 8018768:	468b      	mov	fp, r1
 801876a:	dd13      	ble.n	8018794 <_strtod_l+0x3e4>
 801876c:	4b79      	ldr	r3, [pc, #484]	; (8018954 <_strtod_l+0x5a4>)
 801876e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8018772:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8018776:	f7e7 ff67 	bl	8000648 <__aeabi_dmul>
 801877a:	4682      	mov	sl, r0
 801877c:	4648      	mov	r0, r9
 801877e:	468b      	mov	fp, r1
 8018780:	f7e7 fee8 	bl	8000554 <__aeabi_ui2d>
 8018784:	4602      	mov	r2, r0
 8018786:	460b      	mov	r3, r1
 8018788:	4650      	mov	r0, sl
 801878a:	4659      	mov	r1, fp
 801878c:	f7e7 fda6 	bl	80002dc <__adddf3>
 8018790:	4682      	mov	sl, r0
 8018792:	468b      	mov	fp, r1
 8018794:	2d0f      	cmp	r5, #15
 8018796:	dc38      	bgt.n	801880a <_strtod_l+0x45a>
 8018798:	9b08      	ldr	r3, [sp, #32]
 801879a:	2b00      	cmp	r3, #0
 801879c:	f43f ae4a 	beq.w	8018434 <_strtod_l+0x84>
 80187a0:	dd24      	ble.n	80187ec <_strtod_l+0x43c>
 80187a2:	2b16      	cmp	r3, #22
 80187a4:	dc0b      	bgt.n	80187be <_strtod_l+0x40e>
 80187a6:	4d6b      	ldr	r5, [pc, #428]	; (8018954 <_strtod_l+0x5a4>)
 80187a8:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 80187ac:	e9d5 0100 	ldrd	r0, r1, [r5]
 80187b0:	4652      	mov	r2, sl
 80187b2:	465b      	mov	r3, fp
 80187b4:	f7e7 ff48 	bl	8000648 <__aeabi_dmul>
 80187b8:	4682      	mov	sl, r0
 80187ba:	468b      	mov	fp, r1
 80187bc:	e63a      	b.n	8018434 <_strtod_l+0x84>
 80187be:	9a08      	ldr	r2, [sp, #32]
 80187c0:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 80187c4:	4293      	cmp	r3, r2
 80187c6:	db20      	blt.n	801880a <_strtod_l+0x45a>
 80187c8:	4c62      	ldr	r4, [pc, #392]	; (8018954 <_strtod_l+0x5a4>)
 80187ca:	f1c5 050f 	rsb	r5, r5, #15
 80187ce:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80187d2:	4652      	mov	r2, sl
 80187d4:	465b      	mov	r3, fp
 80187d6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80187da:	f7e7 ff35 	bl	8000648 <__aeabi_dmul>
 80187de:	9b08      	ldr	r3, [sp, #32]
 80187e0:	1b5d      	subs	r5, r3, r5
 80187e2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80187e6:	e9d4 2300 	ldrd	r2, r3, [r4]
 80187ea:	e7e3      	b.n	80187b4 <_strtod_l+0x404>
 80187ec:	9b08      	ldr	r3, [sp, #32]
 80187ee:	3316      	adds	r3, #22
 80187f0:	db0b      	blt.n	801880a <_strtod_l+0x45a>
 80187f2:	9b07      	ldr	r3, [sp, #28]
 80187f4:	4a57      	ldr	r2, [pc, #348]	; (8018954 <_strtod_l+0x5a4>)
 80187f6:	1b9e      	subs	r6, r3, r6
 80187f8:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 80187fc:	e9d6 2300 	ldrd	r2, r3, [r6]
 8018800:	4650      	mov	r0, sl
 8018802:	4659      	mov	r1, fp
 8018804:	f7e8 f84a 	bl	800089c <__aeabi_ddiv>
 8018808:	e7d6      	b.n	80187b8 <_strtod_l+0x408>
 801880a:	9b08      	ldr	r3, [sp, #32]
 801880c:	eba5 0808 	sub.w	r8, r5, r8
 8018810:	4498      	add	r8, r3
 8018812:	f1b8 0f00 	cmp.w	r8, #0
 8018816:	dd71      	ble.n	80188fc <_strtod_l+0x54c>
 8018818:	f018 030f 	ands.w	r3, r8, #15
 801881c:	d00a      	beq.n	8018834 <_strtod_l+0x484>
 801881e:	494d      	ldr	r1, [pc, #308]	; (8018954 <_strtod_l+0x5a4>)
 8018820:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8018824:	4652      	mov	r2, sl
 8018826:	465b      	mov	r3, fp
 8018828:	e9d1 0100 	ldrd	r0, r1, [r1]
 801882c:	f7e7 ff0c 	bl	8000648 <__aeabi_dmul>
 8018830:	4682      	mov	sl, r0
 8018832:	468b      	mov	fp, r1
 8018834:	f038 080f 	bics.w	r8, r8, #15
 8018838:	d04d      	beq.n	80188d6 <_strtod_l+0x526>
 801883a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 801883e:	dd22      	ble.n	8018886 <_strtod_l+0x4d6>
 8018840:	2500      	movs	r5, #0
 8018842:	462e      	mov	r6, r5
 8018844:	9509      	str	r5, [sp, #36]	; 0x24
 8018846:	9507      	str	r5, [sp, #28]
 8018848:	2322      	movs	r3, #34	; 0x22
 801884a:	f8df b110 	ldr.w	fp, [pc, #272]	; 801895c <_strtod_l+0x5ac>
 801884e:	6023      	str	r3, [r4, #0]
 8018850:	f04f 0a00 	mov.w	sl, #0
 8018854:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018856:	2b00      	cmp	r3, #0
 8018858:	f43f adec 	beq.w	8018434 <_strtod_l+0x84>
 801885c:	991e      	ldr	r1, [sp, #120]	; 0x78
 801885e:	4620      	mov	r0, r4
 8018860:	f001 ffac 	bl	801a7bc <_Bfree>
 8018864:	9907      	ldr	r1, [sp, #28]
 8018866:	4620      	mov	r0, r4
 8018868:	f001 ffa8 	bl	801a7bc <_Bfree>
 801886c:	4631      	mov	r1, r6
 801886e:	4620      	mov	r0, r4
 8018870:	f001 ffa4 	bl	801a7bc <_Bfree>
 8018874:	9909      	ldr	r1, [sp, #36]	; 0x24
 8018876:	4620      	mov	r0, r4
 8018878:	f001 ffa0 	bl	801a7bc <_Bfree>
 801887c:	4629      	mov	r1, r5
 801887e:	4620      	mov	r0, r4
 8018880:	f001 ff9c 	bl	801a7bc <_Bfree>
 8018884:	e5d6      	b.n	8018434 <_strtod_l+0x84>
 8018886:	2300      	movs	r3, #0
 8018888:	ea4f 1828 	mov.w	r8, r8, asr #4
 801888c:	4650      	mov	r0, sl
 801888e:	4659      	mov	r1, fp
 8018890:	4699      	mov	r9, r3
 8018892:	f1b8 0f01 	cmp.w	r8, #1
 8018896:	dc21      	bgt.n	80188dc <_strtod_l+0x52c>
 8018898:	b10b      	cbz	r3, 801889e <_strtod_l+0x4ee>
 801889a:	4682      	mov	sl, r0
 801889c:	468b      	mov	fp, r1
 801889e:	4b2e      	ldr	r3, [pc, #184]	; (8018958 <_strtod_l+0x5a8>)
 80188a0:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 80188a4:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 80188a8:	4652      	mov	r2, sl
 80188aa:	465b      	mov	r3, fp
 80188ac:	e9d9 0100 	ldrd	r0, r1, [r9]
 80188b0:	f7e7 feca 	bl	8000648 <__aeabi_dmul>
 80188b4:	4b29      	ldr	r3, [pc, #164]	; (801895c <_strtod_l+0x5ac>)
 80188b6:	460a      	mov	r2, r1
 80188b8:	400b      	ands	r3, r1
 80188ba:	4929      	ldr	r1, [pc, #164]	; (8018960 <_strtod_l+0x5b0>)
 80188bc:	428b      	cmp	r3, r1
 80188be:	4682      	mov	sl, r0
 80188c0:	d8be      	bhi.n	8018840 <_strtod_l+0x490>
 80188c2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80188c6:	428b      	cmp	r3, r1
 80188c8:	bf86      	itte	hi
 80188ca:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8018964 <_strtod_l+0x5b4>
 80188ce:	f04f 3aff 	movhi.w	sl, #4294967295
 80188d2:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 80188d6:	2300      	movs	r3, #0
 80188d8:	9304      	str	r3, [sp, #16]
 80188da:	e081      	b.n	80189e0 <_strtod_l+0x630>
 80188dc:	f018 0f01 	tst.w	r8, #1
 80188e0:	d007      	beq.n	80188f2 <_strtod_l+0x542>
 80188e2:	4b1d      	ldr	r3, [pc, #116]	; (8018958 <_strtod_l+0x5a8>)
 80188e4:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 80188e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80188ec:	f7e7 feac 	bl	8000648 <__aeabi_dmul>
 80188f0:	2301      	movs	r3, #1
 80188f2:	f109 0901 	add.w	r9, r9, #1
 80188f6:	ea4f 0868 	mov.w	r8, r8, asr #1
 80188fa:	e7ca      	b.n	8018892 <_strtod_l+0x4e2>
 80188fc:	d0eb      	beq.n	80188d6 <_strtod_l+0x526>
 80188fe:	f1c8 0800 	rsb	r8, r8, #0
 8018902:	f018 020f 	ands.w	r2, r8, #15
 8018906:	d00a      	beq.n	801891e <_strtod_l+0x56e>
 8018908:	4b12      	ldr	r3, [pc, #72]	; (8018954 <_strtod_l+0x5a4>)
 801890a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801890e:	4650      	mov	r0, sl
 8018910:	4659      	mov	r1, fp
 8018912:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018916:	f7e7 ffc1 	bl	800089c <__aeabi_ddiv>
 801891a:	4682      	mov	sl, r0
 801891c:	468b      	mov	fp, r1
 801891e:	ea5f 1828 	movs.w	r8, r8, asr #4
 8018922:	d0d8      	beq.n	80188d6 <_strtod_l+0x526>
 8018924:	f1b8 0f1f 	cmp.w	r8, #31
 8018928:	dd1e      	ble.n	8018968 <_strtod_l+0x5b8>
 801892a:	2500      	movs	r5, #0
 801892c:	462e      	mov	r6, r5
 801892e:	9509      	str	r5, [sp, #36]	; 0x24
 8018930:	9507      	str	r5, [sp, #28]
 8018932:	2322      	movs	r3, #34	; 0x22
 8018934:	f04f 0a00 	mov.w	sl, #0
 8018938:	f04f 0b00 	mov.w	fp, #0
 801893c:	6023      	str	r3, [r4, #0]
 801893e:	e789      	b.n	8018854 <_strtod_l+0x4a4>
 8018940:	0801c5a9 	.word	0x0801c5a9
 8018944:	0801c5e4 	.word	0x0801c5e4
 8018948:	0801c5a1 	.word	0x0801c5a1
 801894c:	0801c623 	.word	0x0801c623
 8018950:	0801c8e0 	.word	0x0801c8e0
 8018954:	0801c7c0 	.word	0x0801c7c0
 8018958:	0801c798 	.word	0x0801c798
 801895c:	7ff00000 	.word	0x7ff00000
 8018960:	7ca00000 	.word	0x7ca00000
 8018964:	7fefffff 	.word	0x7fefffff
 8018968:	f018 0310 	ands.w	r3, r8, #16
 801896c:	bf18      	it	ne
 801896e:	236a      	movne	r3, #106	; 0x6a
 8018970:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 8018d28 <_strtod_l+0x978>
 8018974:	9304      	str	r3, [sp, #16]
 8018976:	4650      	mov	r0, sl
 8018978:	4659      	mov	r1, fp
 801897a:	2300      	movs	r3, #0
 801897c:	f018 0f01 	tst.w	r8, #1
 8018980:	d004      	beq.n	801898c <_strtod_l+0x5dc>
 8018982:	e9d9 2300 	ldrd	r2, r3, [r9]
 8018986:	f7e7 fe5f 	bl	8000648 <__aeabi_dmul>
 801898a:	2301      	movs	r3, #1
 801898c:	ea5f 0868 	movs.w	r8, r8, asr #1
 8018990:	f109 0908 	add.w	r9, r9, #8
 8018994:	d1f2      	bne.n	801897c <_strtod_l+0x5cc>
 8018996:	b10b      	cbz	r3, 801899c <_strtod_l+0x5ec>
 8018998:	4682      	mov	sl, r0
 801899a:	468b      	mov	fp, r1
 801899c:	9b04      	ldr	r3, [sp, #16]
 801899e:	b1bb      	cbz	r3, 80189d0 <_strtod_l+0x620>
 80189a0:	f3cb 530a 	ubfx	r3, fp, #20, #11
 80189a4:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80189a8:	2b00      	cmp	r3, #0
 80189aa:	4659      	mov	r1, fp
 80189ac:	dd10      	ble.n	80189d0 <_strtod_l+0x620>
 80189ae:	2b1f      	cmp	r3, #31
 80189b0:	f340 8128 	ble.w	8018c04 <_strtod_l+0x854>
 80189b4:	2b34      	cmp	r3, #52	; 0x34
 80189b6:	bfde      	ittt	le
 80189b8:	3b20      	suble	r3, #32
 80189ba:	f04f 32ff 	movle.w	r2, #4294967295
 80189be:	fa02 f303 	lslle.w	r3, r2, r3
 80189c2:	f04f 0a00 	mov.w	sl, #0
 80189c6:	bfcc      	ite	gt
 80189c8:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 80189cc:	ea03 0b01 	andle.w	fp, r3, r1
 80189d0:	2200      	movs	r2, #0
 80189d2:	2300      	movs	r3, #0
 80189d4:	4650      	mov	r0, sl
 80189d6:	4659      	mov	r1, fp
 80189d8:	f7e8 f89e 	bl	8000b18 <__aeabi_dcmpeq>
 80189dc:	2800      	cmp	r0, #0
 80189de:	d1a4      	bne.n	801892a <_strtod_l+0x57a>
 80189e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80189e2:	9300      	str	r3, [sp, #0]
 80189e4:	990a      	ldr	r1, [sp, #40]	; 0x28
 80189e6:	462b      	mov	r3, r5
 80189e8:	463a      	mov	r2, r7
 80189ea:	4620      	mov	r0, r4
 80189ec:	f001 ff52 	bl	801a894 <__s2b>
 80189f0:	9009      	str	r0, [sp, #36]	; 0x24
 80189f2:	2800      	cmp	r0, #0
 80189f4:	f43f af24 	beq.w	8018840 <_strtod_l+0x490>
 80189f8:	9b07      	ldr	r3, [sp, #28]
 80189fa:	1b9e      	subs	r6, r3, r6
 80189fc:	9b08      	ldr	r3, [sp, #32]
 80189fe:	2b00      	cmp	r3, #0
 8018a00:	bfb4      	ite	lt
 8018a02:	4633      	movlt	r3, r6
 8018a04:	2300      	movge	r3, #0
 8018a06:	9310      	str	r3, [sp, #64]	; 0x40
 8018a08:	9b08      	ldr	r3, [sp, #32]
 8018a0a:	2500      	movs	r5, #0
 8018a0c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8018a10:	9318      	str	r3, [sp, #96]	; 0x60
 8018a12:	462e      	mov	r6, r5
 8018a14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018a16:	4620      	mov	r0, r4
 8018a18:	6859      	ldr	r1, [r3, #4]
 8018a1a:	f001 fe8f 	bl	801a73c <_Balloc>
 8018a1e:	9007      	str	r0, [sp, #28]
 8018a20:	2800      	cmp	r0, #0
 8018a22:	f43f af11 	beq.w	8018848 <_strtod_l+0x498>
 8018a26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018a28:	691a      	ldr	r2, [r3, #16]
 8018a2a:	3202      	adds	r2, #2
 8018a2c:	f103 010c 	add.w	r1, r3, #12
 8018a30:	0092      	lsls	r2, r2, #2
 8018a32:	300c      	adds	r0, #12
 8018a34:	f7fe fea6 	bl	8017784 <memcpy>
 8018a38:	ec4b ab10 	vmov	d0, sl, fp
 8018a3c:	aa20      	add	r2, sp, #128	; 0x80
 8018a3e:	a91f      	add	r1, sp, #124	; 0x7c
 8018a40:	4620      	mov	r0, r4
 8018a42:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8018a46:	f002 fa61 	bl	801af0c <__d2b>
 8018a4a:	901e      	str	r0, [sp, #120]	; 0x78
 8018a4c:	2800      	cmp	r0, #0
 8018a4e:	f43f aefb 	beq.w	8018848 <_strtod_l+0x498>
 8018a52:	2101      	movs	r1, #1
 8018a54:	4620      	mov	r0, r4
 8018a56:	f001 ffb7 	bl	801a9c8 <__i2b>
 8018a5a:	4606      	mov	r6, r0
 8018a5c:	2800      	cmp	r0, #0
 8018a5e:	f43f aef3 	beq.w	8018848 <_strtod_l+0x498>
 8018a62:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8018a64:	9904      	ldr	r1, [sp, #16]
 8018a66:	2b00      	cmp	r3, #0
 8018a68:	bfab      	itete	ge
 8018a6a:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 8018a6c:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 8018a6e:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 8018a70:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 8018a74:	bfac      	ite	ge
 8018a76:	eb03 0902 	addge.w	r9, r3, r2
 8018a7a:	1ad7      	sublt	r7, r2, r3
 8018a7c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8018a7e:	eba3 0801 	sub.w	r8, r3, r1
 8018a82:	4490      	add	r8, r2
 8018a84:	4ba3      	ldr	r3, [pc, #652]	; (8018d14 <_strtod_l+0x964>)
 8018a86:	f108 38ff 	add.w	r8, r8, #4294967295
 8018a8a:	4598      	cmp	r8, r3
 8018a8c:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8018a90:	f280 80cc 	bge.w	8018c2c <_strtod_l+0x87c>
 8018a94:	eba3 0308 	sub.w	r3, r3, r8
 8018a98:	2b1f      	cmp	r3, #31
 8018a9a:	eba2 0203 	sub.w	r2, r2, r3
 8018a9e:	f04f 0101 	mov.w	r1, #1
 8018aa2:	f300 80b6 	bgt.w	8018c12 <_strtod_l+0x862>
 8018aa6:	fa01 f303 	lsl.w	r3, r1, r3
 8018aaa:	9311      	str	r3, [sp, #68]	; 0x44
 8018aac:	2300      	movs	r3, #0
 8018aae:	930c      	str	r3, [sp, #48]	; 0x30
 8018ab0:	eb09 0802 	add.w	r8, r9, r2
 8018ab4:	9b04      	ldr	r3, [sp, #16]
 8018ab6:	45c1      	cmp	r9, r8
 8018ab8:	4417      	add	r7, r2
 8018aba:	441f      	add	r7, r3
 8018abc:	464b      	mov	r3, r9
 8018abe:	bfa8      	it	ge
 8018ac0:	4643      	movge	r3, r8
 8018ac2:	42bb      	cmp	r3, r7
 8018ac4:	bfa8      	it	ge
 8018ac6:	463b      	movge	r3, r7
 8018ac8:	2b00      	cmp	r3, #0
 8018aca:	bfc2      	ittt	gt
 8018acc:	eba8 0803 	subgt.w	r8, r8, r3
 8018ad0:	1aff      	subgt	r7, r7, r3
 8018ad2:	eba9 0903 	subgt.w	r9, r9, r3
 8018ad6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8018ad8:	2b00      	cmp	r3, #0
 8018ada:	dd17      	ble.n	8018b0c <_strtod_l+0x75c>
 8018adc:	4631      	mov	r1, r6
 8018ade:	461a      	mov	r2, r3
 8018ae0:	4620      	mov	r0, r4
 8018ae2:	f002 f82d 	bl	801ab40 <__pow5mult>
 8018ae6:	4606      	mov	r6, r0
 8018ae8:	2800      	cmp	r0, #0
 8018aea:	f43f aead 	beq.w	8018848 <_strtod_l+0x498>
 8018aee:	4601      	mov	r1, r0
 8018af0:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8018af2:	4620      	mov	r0, r4
 8018af4:	f001 ff7e 	bl	801a9f4 <__multiply>
 8018af8:	900f      	str	r0, [sp, #60]	; 0x3c
 8018afa:	2800      	cmp	r0, #0
 8018afc:	f43f aea4 	beq.w	8018848 <_strtod_l+0x498>
 8018b00:	991e      	ldr	r1, [sp, #120]	; 0x78
 8018b02:	4620      	mov	r0, r4
 8018b04:	f001 fe5a 	bl	801a7bc <_Bfree>
 8018b08:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8018b0a:	931e      	str	r3, [sp, #120]	; 0x78
 8018b0c:	f1b8 0f00 	cmp.w	r8, #0
 8018b10:	f300 8091 	bgt.w	8018c36 <_strtod_l+0x886>
 8018b14:	9b08      	ldr	r3, [sp, #32]
 8018b16:	2b00      	cmp	r3, #0
 8018b18:	dd08      	ble.n	8018b2c <_strtod_l+0x77c>
 8018b1a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8018b1c:	9907      	ldr	r1, [sp, #28]
 8018b1e:	4620      	mov	r0, r4
 8018b20:	f002 f80e 	bl	801ab40 <__pow5mult>
 8018b24:	9007      	str	r0, [sp, #28]
 8018b26:	2800      	cmp	r0, #0
 8018b28:	f43f ae8e 	beq.w	8018848 <_strtod_l+0x498>
 8018b2c:	2f00      	cmp	r7, #0
 8018b2e:	dd08      	ble.n	8018b42 <_strtod_l+0x792>
 8018b30:	9907      	ldr	r1, [sp, #28]
 8018b32:	463a      	mov	r2, r7
 8018b34:	4620      	mov	r0, r4
 8018b36:	f002 f85d 	bl	801abf4 <__lshift>
 8018b3a:	9007      	str	r0, [sp, #28]
 8018b3c:	2800      	cmp	r0, #0
 8018b3e:	f43f ae83 	beq.w	8018848 <_strtod_l+0x498>
 8018b42:	f1b9 0f00 	cmp.w	r9, #0
 8018b46:	dd08      	ble.n	8018b5a <_strtod_l+0x7aa>
 8018b48:	4631      	mov	r1, r6
 8018b4a:	464a      	mov	r2, r9
 8018b4c:	4620      	mov	r0, r4
 8018b4e:	f002 f851 	bl	801abf4 <__lshift>
 8018b52:	4606      	mov	r6, r0
 8018b54:	2800      	cmp	r0, #0
 8018b56:	f43f ae77 	beq.w	8018848 <_strtod_l+0x498>
 8018b5a:	9a07      	ldr	r2, [sp, #28]
 8018b5c:	991e      	ldr	r1, [sp, #120]	; 0x78
 8018b5e:	4620      	mov	r0, r4
 8018b60:	f002 f8d0 	bl	801ad04 <__mdiff>
 8018b64:	4605      	mov	r5, r0
 8018b66:	2800      	cmp	r0, #0
 8018b68:	f43f ae6e 	beq.w	8018848 <_strtod_l+0x498>
 8018b6c:	68c3      	ldr	r3, [r0, #12]
 8018b6e:	930f      	str	r3, [sp, #60]	; 0x3c
 8018b70:	2300      	movs	r3, #0
 8018b72:	60c3      	str	r3, [r0, #12]
 8018b74:	4631      	mov	r1, r6
 8018b76:	f002 f8a9 	bl	801accc <__mcmp>
 8018b7a:	2800      	cmp	r0, #0
 8018b7c:	da65      	bge.n	8018c4a <_strtod_l+0x89a>
 8018b7e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8018b80:	ea53 030a 	orrs.w	r3, r3, sl
 8018b84:	f040 8087 	bne.w	8018c96 <_strtod_l+0x8e6>
 8018b88:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8018b8c:	2b00      	cmp	r3, #0
 8018b8e:	f040 8082 	bne.w	8018c96 <_strtod_l+0x8e6>
 8018b92:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8018b96:	0d1b      	lsrs	r3, r3, #20
 8018b98:	051b      	lsls	r3, r3, #20
 8018b9a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8018b9e:	d97a      	bls.n	8018c96 <_strtod_l+0x8e6>
 8018ba0:	696b      	ldr	r3, [r5, #20]
 8018ba2:	b913      	cbnz	r3, 8018baa <_strtod_l+0x7fa>
 8018ba4:	692b      	ldr	r3, [r5, #16]
 8018ba6:	2b01      	cmp	r3, #1
 8018ba8:	dd75      	ble.n	8018c96 <_strtod_l+0x8e6>
 8018baa:	4629      	mov	r1, r5
 8018bac:	2201      	movs	r2, #1
 8018bae:	4620      	mov	r0, r4
 8018bb0:	f002 f820 	bl	801abf4 <__lshift>
 8018bb4:	4631      	mov	r1, r6
 8018bb6:	4605      	mov	r5, r0
 8018bb8:	f002 f888 	bl	801accc <__mcmp>
 8018bbc:	2800      	cmp	r0, #0
 8018bbe:	dd6a      	ble.n	8018c96 <_strtod_l+0x8e6>
 8018bc0:	9904      	ldr	r1, [sp, #16]
 8018bc2:	4a55      	ldr	r2, [pc, #340]	; (8018d18 <_strtod_l+0x968>)
 8018bc4:	465b      	mov	r3, fp
 8018bc6:	2900      	cmp	r1, #0
 8018bc8:	f000 8085 	beq.w	8018cd6 <_strtod_l+0x926>
 8018bcc:	ea02 010b 	and.w	r1, r2, fp
 8018bd0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8018bd4:	dc7f      	bgt.n	8018cd6 <_strtod_l+0x926>
 8018bd6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8018bda:	f77f aeaa 	ble.w	8018932 <_strtod_l+0x582>
 8018bde:	4a4f      	ldr	r2, [pc, #316]	; (8018d1c <_strtod_l+0x96c>)
 8018be0:	2300      	movs	r3, #0
 8018be2:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 8018be6:	4650      	mov	r0, sl
 8018be8:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 8018bec:	4659      	mov	r1, fp
 8018bee:	f7e7 fd2b 	bl	8000648 <__aeabi_dmul>
 8018bf2:	460b      	mov	r3, r1
 8018bf4:	4303      	orrs	r3, r0
 8018bf6:	bf08      	it	eq
 8018bf8:	2322      	moveq	r3, #34	; 0x22
 8018bfa:	4682      	mov	sl, r0
 8018bfc:	468b      	mov	fp, r1
 8018bfe:	bf08      	it	eq
 8018c00:	6023      	streq	r3, [r4, #0]
 8018c02:	e62b      	b.n	801885c <_strtod_l+0x4ac>
 8018c04:	f04f 32ff 	mov.w	r2, #4294967295
 8018c08:	fa02 f303 	lsl.w	r3, r2, r3
 8018c0c:	ea03 0a0a 	and.w	sl, r3, sl
 8018c10:	e6de      	b.n	80189d0 <_strtod_l+0x620>
 8018c12:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8018c16:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8018c1a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8018c1e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8018c22:	fa01 f308 	lsl.w	r3, r1, r8
 8018c26:	930c      	str	r3, [sp, #48]	; 0x30
 8018c28:	9111      	str	r1, [sp, #68]	; 0x44
 8018c2a:	e741      	b.n	8018ab0 <_strtod_l+0x700>
 8018c2c:	2300      	movs	r3, #0
 8018c2e:	930c      	str	r3, [sp, #48]	; 0x30
 8018c30:	2301      	movs	r3, #1
 8018c32:	9311      	str	r3, [sp, #68]	; 0x44
 8018c34:	e73c      	b.n	8018ab0 <_strtod_l+0x700>
 8018c36:	991e      	ldr	r1, [sp, #120]	; 0x78
 8018c38:	4642      	mov	r2, r8
 8018c3a:	4620      	mov	r0, r4
 8018c3c:	f001 ffda 	bl	801abf4 <__lshift>
 8018c40:	901e      	str	r0, [sp, #120]	; 0x78
 8018c42:	2800      	cmp	r0, #0
 8018c44:	f47f af66 	bne.w	8018b14 <_strtod_l+0x764>
 8018c48:	e5fe      	b.n	8018848 <_strtod_l+0x498>
 8018c4a:	465f      	mov	r7, fp
 8018c4c:	d16e      	bne.n	8018d2c <_strtod_l+0x97c>
 8018c4e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8018c50:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8018c54:	b342      	cbz	r2, 8018ca8 <_strtod_l+0x8f8>
 8018c56:	4a32      	ldr	r2, [pc, #200]	; (8018d20 <_strtod_l+0x970>)
 8018c58:	4293      	cmp	r3, r2
 8018c5a:	d128      	bne.n	8018cae <_strtod_l+0x8fe>
 8018c5c:	9b04      	ldr	r3, [sp, #16]
 8018c5e:	4650      	mov	r0, sl
 8018c60:	b1eb      	cbz	r3, 8018c9e <_strtod_l+0x8ee>
 8018c62:	4a2d      	ldr	r2, [pc, #180]	; (8018d18 <_strtod_l+0x968>)
 8018c64:	403a      	ands	r2, r7
 8018c66:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8018c6a:	f04f 31ff 	mov.w	r1, #4294967295
 8018c6e:	d819      	bhi.n	8018ca4 <_strtod_l+0x8f4>
 8018c70:	0d12      	lsrs	r2, r2, #20
 8018c72:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8018c76:	fa01 f303 	lsl.w	r3, r1, r3
 8018c7a:	4298      	cmp	r0, r3
 8018c7c:	d117      	bne.n	8018cae <_strtod_l+0x8fe>
 8018c7e:	4b29      	ldr	r3, [pc, #164]	; (8018d24 <_strtod_l+0x974>)
 8018c80:	429f      	cmp	r7, r3
 8018c82:	d102      	bne.n	8018c8a <_strtod_l+0x8da>
 8018c84:	3001      	adds	r0, #1
 8018c86:	f43f addf 	beq.w	8018848 <_strtod_l+0x498>
 8018c8a:	4b23      	ldr	r3, [pc, #140]	; (8018d18 <_strtod_l+0x968>)
 8018c8c:	403b      	ands	r3, r7
 8018c8e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8018c92:	f04f 0a00 	mov.w	sl, #0
 8018c96:	9b04      	ldr	r3, [sp, #16]
 8018c98:	2b00      	cmp	r3, #0
 8018c9a:	d1a0      	bne.n	8018bde <_strtod_l+0x82e>
 8018c9c:	e5de      	b.n	801885c <_strtod_l+0x4ac>
 8018c9e:	f04f 33ff 	mov.w	r3, #4294967295
 8018ca2:	e7ea      	b.n	8018c7a <_strtod_l+0x8ca>
 8018ca4:	460b      	mov	r3, r1
 8018ca6:	e7e8      	b.n	8018c7a <_strtod_l+0x8ca>
 8018ca8:	ea53 030a 	orrs.w	r3, r3, sl
 8018cac:	d088      	beq.n	8018bc0 <_strtod_l+0x810>
 8018cae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8018cb0:	b1db      	cbz	r3, 8018cea <_strtod_l+0x93a>
 8018cb2:	423b      	tst	r3, r7
 8018cb4:	d0ef      	beq.n	8018c96 <_strtod_l+0x8e6>
 8018cb6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8018cb8:	9a04      	ldr	r2, [sp, #16]
 8018cba:	4650      	mov	r0, sl
 8018cbc:	4659      	mov	r1, fp
 8018cbe:	b1c3      	cbz	r3, 8018cf2 <_strtod_l+0x942>
 8018cc0:	f7ff fb59 	bl	8018376 <sulp>
 8018cc4:	4602      	mov	r2, r0
 8018cc6:	460b      	mov	r3, r1
 8018cc8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8018ccc:	f7e7 fb06 	bl	80002dc <__adddf3>
 8018cd0:	4682      	mov	sl, r0
 8018cd2:	468b      	mov	fp, r1
 8018cd4:	e7df      	b.n	8018c96 <_strtod_l+0x8e6>
 8018cd6:	4013      	ands	r3, r2
 8018cd8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8018cdc:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8018ce0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8018ce4:	f04f 3aff 	mov.w	sl, #4294967295
 8018ce8:	e7d5      	b.n	8018c96 <_strtod_l+0x8e6>
 8018cea:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8018cec:	ea13 0f0a 	tst.w	r3, sl
 8018cf0:	e7e0      	b.n	8018cb4 <_strtod_l+0x904>
 8018cf2:	f7ff fb40 	bl	8018376 <sulp>
 8018cf6:	4602      	mov	r2, r0
 8018cf8:	460b      	mov	r3, r1
 8018cfa:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8018cfe:	f7e7 faeb 	bl	80002d8 <__aeabi_dsub>
 8018d02:	2200      	movs	r2, #0
 8018d04:	2300      	movs	r3, #0
 8018d06:	4682      	mov	sl, r0
 8018d08:	468b      	mov	fp, r1
 8018d0a:	f7e7 ff05 	bl	8000b18 <__aeabi_dcmpeq>
 8018d0e:	2800      	cmp	r0, #0
 8018d10:	d0c1      	beq.n	8018c96 <_strtod_l+0x8e6>
 8018d12:	e60e      	b.n	8018932 <_strtod_l+0x582>
 8018d14:	fffffc02 	.word	0xfffffc02
 8018d18:	7ff00000 	.word	0x7ff00000
 8018d1c:	39500000 	.word	0x39500000
 8018d20:	000fffff 	.word	0x000fffff
 8018d24:	7fefffff 	.word	0x7fefffff
 8018d28:	0801c5f8 	.word	0x0801c5f8
 8018d2c:	4631      	mov	r1, r6
 8018d2e:	4628      	mov	r0, r5
 8018d30:	f002 f948 	bl	801afc4 <__ratio>
 8018d34:	ec59 8b10 	vmov	r8, r9, d0
 8018d38:	ee10 0a10 	vmov	r0, s0
 8018d3c:	2200      	movs	r2, #0
 8018d3e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8018d42:	4649      	mov	r1, r9
 8018d44:	f7e7 fefc 	bl	8000b40 <__aeabi_dcmple>
 8018d48:	2800      	cmp	r0, #0
 8018d4a:	d07c      	beq.n	8018e46 <_strtod_l+0xa96>
 8018d4c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8018d4e:	2b00      	cmp	r3, #0
 8018d50:	d04c      	beq.n	8018dec <_strtod_l+0xa3c>
 8018d52:	4b95      	ldr	r3, [pc, #596]	; (8018fa8 <_strtod_l+0xbf8>)
 8018d54:	2200      	movs	r2, #0
 8018d56:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8018d5a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8018fa8 <_strtod_l+0xbf8>
 8018d5e:	f04f 0800 	mov.w	r8, #0
 8018d62:	4b92      	ldr	r3, [pc, #584]	; (8018fac <_strtod_l+0xbfc>)
 8018d64:	403b      	ands	r3, r7
 8018d66:	9311      	str	r3, [sp, #68]	; 0x44
 8018d68:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8018d6a:	4b91      	ldr	r3, [pc, #580]	; (8018fb0 <_strtod_l+0xc00>)
 8018d6c:	429a      	cmp	r2, r3
 8018d6e:	f040 80b2 	bne.w	8018ed6 <_strtod_l+0xb26>
 8018d72:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8018d76:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8018d7a:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8018d7e:	ec4b ab10 	vmov	d0, sl, fp
 8018d82:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 8018d86:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8018d8a:	f002 f843 	bl	801ae14 <__ulp>
 8018d8e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8018d92:	ec53 2b10 	vmov	r2, r3, d0
 8018d96:	f7e7 fc57 	bl	8000648 <__aeabi_dmul>
 8018d9a:	4652      	mov	r2, sl
 8018d9c:	465b      	mov	r3, fp
 8018d9e:	f7e7 fa9d 	bl	80002dc <__adddf3>
 8018da2:	460b      	mov	r3, r1
 8018da4:	4981      	ldr	r1, [pc, #516]	; (8018fac <_strtod_l+0xbfc>)
 8018da6:	4a83      	ldr	r2, [pc, #524]	; (8018fb4 <_strtod_l+0xc04>)
 8018da8:	4019      	ands	r1, r3
 8018daa:	4291      	cmp	r1, r2
 8018dac:	4682      	mov	sl, r0
 8018dae:	d95e      	bls.n	8018e6e <_strtod_l+0xabe>
 8018db0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8018db2:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8018db6:	4293      	cmp	r3, r2
 8018db8:	d103      	bne.n	8018dc2 <_strtod_l+0xa12>
 8018dba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018dbc:	3301      	adds	r3, #1
 8018dbe:	f43f ad43 	beq.w	8018848 <_strtod_l+0x498>
 8018dc2:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 8018fc0 <_strtod_l+0xc10>
 8018dc6:	f04f 3aff 	mov.w	sl, #4294967295
 8018dca:	991e      	ldr	r1, [sp, #120]	; 0x78
 8018dcc:	4620      	mov	r0, r4
 8018dce:	f001 fcf5 	bl	801a7bc <_Bfree>
 8018dd2:	9907      	ldr	r1, [sp, #28]
 8018dd4:	4620      	mov	r0, r4
 8018dd6:	f001 fcf1 	bl	801a7bc <_Bfree>
 8018dda:	4631      	mov	r1, r6
 8018ddc:	4620      	mov	r0, r4
 8018dde:	f001 fced 	bl	801a7bc <_Bfree>
 8018de2:	4629      	mov	r1, r5
 8018de4:	4620      	mov	r0, r4
 8018de6:	f001 fce9 	bl	801a7bc <_Bfree>
 8018dea:	e613      	b.n	8018a14 <_strtod_l+0x664>
 8018dec:	f1ba 0f00 	cmp.w	sl, #0
 8018df0:	d11b      	bne.n	8018e2a <_strtod_l+0xa7a>
 8018df2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8018df6:	b9f3      	cbnz	r3, 8018e36 <_strtod_l+0xa86>
 8018df8:	4b6b      	ldr	r3, [pc, #428]	; (8018fa8 <_strtod_l+0xbf8>)
 8018dfa:	2200      	movs	r2, #0
 8018dfc:	4640      	mov	r0, r8
 8018dfe:	4649      	mov	r1, r9
 8018e00:	f7e7 fe94 	bl	8000b2c <__aeabi_dcmplt>
 8018e04:	b9d0      	cbnz	r0, 8018e3c <_strtod_l+0xa8c>
 8018e06:	4640      	mov	r0, r8
 8018e08:	4649      	mov	r1, r9
 8018e0a:	4b6b      	ldr	r3, [pc, #428]	; (8018fb8 <_strtod_l+0xc08>)
 8018e0c:	2200      	movs	r2, #0
 8018e0e:	f7e7 fc1b 	bl	8000648 <__aeabi_dmul>
 8018e12:	4680      	mov	r8, r0
 8018e14:	4689      	mov	r9, r1
 8018e16:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8018e1a:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 8018e1e:	931b      	str	r3, [sp, #108]	; 0x6c
 8018e20:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 8018e24:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8018e28:	e79b      	b.n	8018d62 <_strtod_l+0x9b2>
 8018e2a:	f1ba 0f01 	cmp.w	sl, #1
 8018e2e:	d102      	bne.n	8018e36 <_strtod_l+0xa86>
 8018e30:	2f00      	cmp	r7, #0
 8018e32:	f43f ad7e 	beq.w	8018932 <_strtod_l+0x582>
 8018e36:	4b61      	ldr	r3, [pc, #388]	; (8018fbc <_strtod_l+0xc0c>)
 8018e38:	2200      	movs	r2, #0
 8018e3a:	e78c      	b.n	8018d56 <_strtod_l+0x9a6>
 8018e3c:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8018fb8 <_strtod_l+0xc08>
 8018e40:	f04f 0800 	mov.w	r8, #0
 8018e44:	e7e7      	b.n	8018e16 <_strtod_l+0xa66>
 8018e46:	4b5c      	ldr	r3, [pc, #368]	; (8018fb8 <_strtod_l+0xc08>)
 8018e48:	4640      	mov	r0, r8
 8018e4a:	4649      	mov	r1, r9
 8018e4c:	2200      	movs	r2, #0
 8018e4e:	f7e7 fbfb 	bl	8000648 <__aeabi_dmul>
 8018e52:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8018e54:	4680      	mov	r8, r0
 8018e56:	4689      	mov	r9, r1
 8018e58:	b933      	cbnz	r3, 8018e68 <_strtod_l+0xab8>
 8018e5a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8018e5e:	9012      	str	r0, [sp, #72]	; 0x48
 8018e60:	9313      	str	r3, [sp, #76]	; 0x4c
 8018e62:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8018e66:	e7dd      	b.n	8018e24 <_strtod_l+0xa74>
 8018e68:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 8018e6c:	e7f9      	b.n	8018e62 <_strtod_l+0xab2>
 8018e6e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8018e72:	9b04      	ldr	r3, [sp, #16]
 8018e74:	2b00      	cmp	r3, #0
 8018e76:	d1a8      	bne.n	8018dca <_strtod_l+0xa1a>
 8018e78:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8018e7c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8018e7e:	0d1b      	lsrs	r3, r3, #20
 8018e80:	051b      	lsls	r3, r3, #20
 8018e82:	429a      	cmp	r2, r3
 8018e84:	d1a1      	bne.n	8018dca <_strtod_l+0xa1a>
 8018e86:	4640      	mov	r0, r8
 8018e88:	4649      	mov	r1, r9
 8018e8a:	f7e7 ff25 	bl	8000cd8 <__aeabi_d2lz>
 8018e8e:	f7e7 fbad 	bl	80005ec <__aeabi_l2d>
 8018e92:	4602      	mov	r2, r0
 8018e94:	460b      	mov	r3, r1
 8018e96:	4640      	mov	r0, r8
 8018e98:	4649      	mov	r1, r9
 8018e9a:	f7e7 fa1d 	bl	80002d8 <__aeabi_dsub>
 8018e9e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8018ea0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8018ea4:	ea43 030a 	orr.w	r3, r3, sl
 8018ea8:	4313      	orrs	r3, r2
 8018eaa:	4680      	mov	r8, r0
 8018eac:	4689      	mov	r9, r1
 8018eae:	d053      	beq.n	8018f58 <_strtod_l+0xba8>
 8018eb0:	a335      	add	r3, pc, #212	; (adr r3, 8018f88 <_strtod_l+0xbd8>)
 8018eb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018eb6:	f7e7 fe39 	bl	8000b2c <__aeabi_dcmplt>
 8018eba:	2800      	cmp	r0, #0
 8018ebc:	f47f acce 	bne.w	801885c <_strtod_l+0x4ac>
 8018ec0:	a333      	add	r3, pc, #204	; (adr r3, 8018f90 <_strtod_l+0xbe0>)
 8018ec2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018ec6:	4640      	mov	r0, r8
 8018ec8:	4649      	mov	r1, r9
 8018eca:	f7e7 fe4d 	bl	8000b68 <__aeabi_dcmpgt>
 8018ece:	2800      	cmp	r0, #0
 8018ed0:	f43f af7b 	beq.w	8018dca <_strtod_l+0xa1a>
 8018ed4:	e4c2      	b.n	801885c <_strtod_l+0x4ac>
 8018ed6:	9b04      	ldr	r3, [sp, #16]
 8018ed8:	b333      	cbz	r3, 8018f28 <_strtod_l+0xb78>
 8018eda:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8018edc:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8018ee0:	d822      	bhi.n	8018f28 <_strtod_l+0xb78>
 8018ee2:	a32d      	add	r3, pc, #180	; (adr r3, 8018f98 <_strtod_l+0xbe8>)
 8018ee4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018ee8:	4640      	mov	r0, r8
 8018eea:	4649      	mov	r1, r9
 8018eec:	f7e7 fe28 	bl	8000b40 <__aeabi_dcmple>
 8018ef0:	b1a0      	cbz	r0, 8018f1c <_strtod_l+0xb6c>
 8018ef2:	4649      	mov	r1, r9
 8018ef4:	4640      	mov	r0, r8
 8018ef6:	f7e7 fe7f 	bl	8000bf8 <__aeabi_d2uiz>
 8018efa:	2801      	cmp	r0, #1
 8018efc:	bf38      	it	cc
 8018efe:	2001      	movcc	r0, #1
 8018f00:	f7e7 fb28 	bl	8000554 <__aeabi_ui2d>
 8018f04:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8018f06:	4680      	mov	r8, r0
 8018f08:	4689      	mov	r9, r1
 8018f0a:	bb13      	cbnz	r3, 8018f52 <_strtod_l+0xba2>
 8018f0c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8018f10:	9014      	str	r0, [sp, #80]	; 0x50
 8018f12:	9315      	str	r3, [sp, #84]	; 0x54
 8018f14:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8018f18:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8018f1c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8018f1e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8018f20:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8018f24:	1a9b      	subs	r3, r3, r2
 8018f26:	930d      	str	r3, [sp, #52]	; 0x34
 8018f28:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8018f2c:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8018f30:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8018f34:	f001 ff6e 	bl	801ae14 <__ulp>
 8018f38:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8018f3c:	ec53 2b10 	vmov	r2, r3, d0
 8018f40:	f7e7 fb82 	bl	8000648 <__aeabi_dmul>
 8018f44:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8018f48:	f7e7 f9c8 	bl	80002dc <__adddf3>
 8018f4c:	4682      	mov	sl, r0
 8018f4e:	468b      	mov	fp, r1
 8018f50:	e78f      	b.n	8018e72 <_strtod_l+0xac2>
 8018f52:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 8018f56:	e7dd      	b.n	8018f14 <_strtod_l+0xb64>
 8018f58:	a311      	add	r3, pc, #68	; (adr r3, 8018fa0 <_strtod_l+0xbf0>)
 8018f5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018f5e:	f7e7 fde5 	bl	8000b2c <__aeabi_dcmplt>
 8018f62:	e7b4      	b.n	8018ece <_strtod_l+0xb1e>
 8018f64:	2300      	movs	r3, #0
 8018f66:	930e      	str	r3, [sp, #56]	; 0x38
 8018f68:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8018f6a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8018f6c:	6013      	str	r3, [r2, #0]
 8018f6e:	f7ff ba65 	b.w	801843c <_strtod_l+0x8c>
 8018f72:	2b65      	cmp	r3, #101	; 0x65
 8018f74:	f43f ab5d 	beq.w	8018632 <_strtod_l+0x282>
 8018f78:	2b45      	cmp	r3, #69	; 0x45
 8018f7a:	f43f ab5a 	beq.w	8018632 <_strtod_l+0x282>
 8018f7e:	2201      	movs	r2, #1
 8018f80:	f7ff bb92 	b.w	80186a8 <_strtod_l+0x2f8>
 8018f84:	f3af 8000 	nop.w
 8018f88:	94a03595 	.word	0x94a03595
 8018f8c:	3fdfffff 	.word	0x3fdfffff
 8018f90:	35afe535 	.word	0x35afe535
 8018f94:	3fe00000 	.word	0x3fe00000
 8018f98:	ffc00000 	.word	0xffc00000
 8018f9c:	41dfffff 	.word	0x41dfffff
 8018fa0:	94a03595 	.word	0x94a03595
 8018fa4:	3fcfffff 	.word	0x3fcfffff
 8018fa8:	3ff00000 	.word	0x3ff00000
 8018fac:	7ff00000 	.word	0x7ff00000
 8018fb0:	7fe00000 	.word	0x7fe00000
 8018fb4:	7c9fffff 	.word	0x7c9fffff
 8018fb8:	3fe00000 	.word	0x3fe00000
 8018fbc:	bff00000 	.word	0xbff00000
 8018fc0:	7fefffff 	.word	0x7fefffff

08018fc4 <strtod>:
 8018fc4:	460a      	mov	r2, r1
 8018fc6:	4601      	mov	r1, r0
 8018fc8:	4802      	ldr	r0, [pc, #8]	; (8018fd4 <strtod+0x10>)
 8018fca:	4b03      	ldr	r3, [pc, #12]	; (8018fd8 <strtod+0x14>)
 8018fcc:	6800      	ldr	r0, [r0, #0]
 8018fce:	f7ff b9ef 	b.w	80183b0 <_strtod_l>
 8018fd2:	bf00      	nop
 8018fd4:	2000036c 	.word	0x2000036c
 8018fd8:	200003d4 	.word	0x200003d4

08018fdc <_strtol_l.isra.0>:
 8018fdc:	2b01      	cmp	r3, #1
 8018fde:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018fe2:	d001      	beq.n	8018fe8 <_strtol_l.isra.0+0xc>
 8018fe4:	2b24      	cmp	r3, #36	; 0x24
 8018fe6:	d906      	bls.n	8018ff6 <_strtol_l.isra.0+0x1a>
 8018fe8:	f7fe f972 	bl	80172d0 <__errno>
 8018fec:	2316      	movs	r3, #22
 8018fee:	6003      	str	r3, [r0, #0]
 8018ff0:	2000      	movs	r0, #0
 8018ff2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018ff6:	4f3a      	ldr	r7, [pc, #232]	; (80190e0 <_strtol_l.isra.0+0x104>)
 8018ff8:	468e      	mov	lr, r1
 8018ffa:	4676      	mov	r6, lr
 8018ffc:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8019000:	5de5      	ldrb	r5, [r4, r7]
 8019002:	f015 0508 	ands.w	r5, r5, #8
 8019006:	d1f8      	bne.n	8018ffa <_strtol_l.isra.0+0x1e>
 8019008:	2c2d      	cmp	r4, #45	; 0x2d
 801900a:	d134      	bne.n	8019076 <_strtol_l.isra.0+0x9a>
 801900c:	f89e 4000 	ldrb.w	r4, [lr]
 8019010:	f04f 0801 	mov.w	r8, #1
 8019014:	f106 0e02 	add.w	lr, r6, #2
 8019018:	2b00      	cmp	r3, #0
 801901a:	d05c      	beq.n	80190d6 <_strtol_l.isra.0+0xfa>
 801901c:	2b10      	cmp	r3, #16
 801901e:	d10c      	bne.n	801903a <_strtol_l.isra.0+0x5e>
 8019020:	2c30      	cmp	r4, #48	; 0x30
 8019022:	d10a      	bne.n	801903a <_strtol_l.isra.0+0x5e>
 8019024:	f89e 4000 	ldrb.w	r4, [lr]
 8019028:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 801902c:	2c58      	cmp	r4, #88	; 0x58
 801902e:	d14d      	bne.n	80190cc <_strtol_l.isra.0+0xf0>
 8019030:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8019034:	2310      	movs	r3, #16
 8019036:	f10e 0e02 	add.w	lr, lr, #2
 801903a:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 801903e:	f10c 3cff 	add.w	ip, ip, #4294967295
 8019042:	2600      	movs	r6, #0
 8019044:	fbbc f9f3 	udiv	r9, ip, r3
 8019048:	4635      	mov	r5, r6
 801904a:	fb03 ca19 	mls	sl, r3, r9, ip
 801904e:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8019052:	2f09      	cmp	r7, #9
 8019054:	d818      	bhi.n	8019088 <_strtol_l.isra.0+0xac>
 8019056:	463c      	mov	r4, r7
 8019058:	42a3      	cmp	r3, r4
 801905a:	dd24      	ble.n	80190a6 <_strtol_l.isra.0+0xca>
 801905c:	2e00      	cmp	r6, #0
 801905e:	db1f      	blt.n	80190a0 <_strtol_l.isra.0+0xc4>
 8019060:	45a9      	cmp	r9, r5
 8019062:	d31d      	bcc.n	80190a0 <_strtol_l.isra.0+0xc4>
 8019064:	d101      	bne.n	801906a <_strtol_l.isra.0+0x8e>
 8019066:	45a2      	cmp	sl, r4
 8019068:	db1a      	blt.n	80190a0 <_strtol_l.isra.0+0xc4>
 801906a:	fb05 4503 	mla	r5, r5, r3, r4
 801906e:	2601      	movs	r6, #1
 8019070:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8019074:	e7eb      	b.n	801904e <_strtol_l.isra.0+0x72>
 8019076:	2c2b      	cmp	r4, #43	; 0x2b
 8019078:	bf08      	it	eq
 801907a:	f89e 4000 	ldrbeq.w	r4, [lr]
 801907e:	46a8      	mov	r8, r5
 8019080:	bf08      	it	eq
 8019082:	f106 0e02 	addeq.w	lr, r6, #2
 8019086:	e7c7      	b.n	8019018 <_strtol_l.isra.0+0x3c>
 8019088:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 801908c:	2f19      	cmp	r7, #25
 801908e:	d801      	bhi.n	8019094 <_strtol_l.isra.0+0xb8>
 8019090:	3c37      	subs	r4, #55	; 0x37
 8019092:	e7e1      	b.n	8019058 <_strtol_l.isra.0+0x7c>
 8019094:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8019098:	2f19      	cmp	r7, #25
 801909a:	d804      	bhi.n	80190a6 <_strtol_l.isra.0+0xca>
 801909c:	3c57      	subs	r4, #87	; 0x57
 801909e:	e7db      	b.n	8019058 <_strtol_l.isra.0+0x7c>
 80190a0:	f04f 36ff 	mov.w	r6, #4294967295
 80190a4:	e7e4      	b.n	8019070 <_strtol_l.isra.0+0x94>
 80190a6:	2e00      	cmp	r6, #0
 80190a8:	da05      	bge.n	80190b6 <_strtol_l.isra.0+0xda>
 80190aa:	2322      	movs	r3, #34	; 0x22
 80190ac:	6003      	str	r3, [r0, #0]
 80190ae:	4665      	mov	r5, ip
 80190b0:	b942      	cbnz	r2, 80190c4 <_strtol_l.isra.0+0xe8>
 80190b2:	4628      	mov	r0, r5
 80190b4:	e79d      	b.n	8018ff2 <_strtol_l.isra.0+0x16>
 80190b6:	f1b8 0f00 	cmp.w	r8, #0
 80190ba:	d000      	beq.n	80190be <_strtol_l.isra.0+0xe2>
 80190bc:	426d      	negs	r5, r5
 80190be:	2a00      	cmp	r2, #0
 80190c0:	d0f7      	beq.n	80190b2 <_strtol_l.isra.0+0xd6>
 80190c2:	b10e      	cbz	r6, 80190c8 <_strtol_l.isra.0+0xec>
 80190c4:	f10e 31ff 	add.w	r1, lr, #4294967295
 80190c8:	6011      	str	r1, [r2, #0]
 80190ca:	e7f2      	b.n	80190b2 <_strtol_l.isra.0+0xd6>
 80190cc:	2430      	movs	r4, #48	; 0x30
 80190ce:	2b00      	cmp	r3, #0
 80190d0:	d1b3      	bne.n	801903a <_strtol_l.isra.0+0x5e>
 80190d2:	2308      	movs	r3, #8
 80190d4:	e7b1      	b.n	801903a <_strtol_l.isra.0+0x5e>
 80190d6:	2c30      	cmp	r4, #48	; 0x30
 80190d8:	d0a4      	beq.n	8019024 <_strtol_l.isra.0+0x48>
 80190da:	230a      	movs	r3, #10
 80190dc:	e7ad      	b.n	801903a <_strtol_l.isra.0+0x5e>
 80190de:	bf00      	nop
 80190e0:	0801c437 	.word	0x0801c437

080190e4 <strtol>:
 80190e4:	4613      	mov	r3, r2
 80190e6:	460a      	mov	r2, r1
 80190e8:	4601      	mov	r1, r0
 80190ea:	4802      	ldr	r0, [pc, #8]	; (80190f4 <strtol+0x10>)
 80190ec:	6800      	ldr	r0, [r0, #0]
 80190ee:	f7ff bf75 	b.w	8018fdc <_strtol_l.isra.0>
 80190f2:	bf00      	nop
 80190f4:	2000036c 	.word	0x2000036c

080190f8 <__swbuf_r>:
 80190f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80190fa:	460e      	mov	r6, r1
 80190fc:	4614      	mov	r4, r2
 80190fe:	4605      	mov	r5, r0
 8019100:	b118      	cbz	r0, 801910a <__swbuf_r+0x12>
 8019102:	6983      	ldr	r3, [r0, #24]
 8019104:	b90b      	cbnz	r3, 801910a <__swbuf_r+0x12>
 8019106:	f7fe fa03 	bl	8017510 <__sinit>
 801910a:	4b21      	ldr	r3, [pc, #132]	; (8019190 <__swbuf_r+0x98>)
 801910c:	429c      	cmp	r4, r3
 801910e:	d12b      	bne.n	8019168 <__swbuf_r+0x70>
 8019110:	686c      	ldr	r4, [r5, #4]
 8019112:	69a3      	ldr	r3, [r4, #24]
 8019114:	60a3      	str	r3, [r4, #8]
 8019116:	89a3      	ldrh	r3, [r4, #12]
 8019118:	071a      	lsls	r2, r3, #28
 801911a:	d52f      	bpl.n	801917c <__swbuf_r+0x84>
 801911c:	6923      	ldr	r3, [r4, #16]
 801911e:	b36b      	cbz	r3, 801917c <__swbuf_r+0x84>
 8019120:	6923      	ldr	r3, [r4, #16]
 8019122:	6820      	ldr	r0, [r4, #0]
 8019124:	1ac0      	subs	r0, r0, r3
 8019126:	6963      	ldr	r3, [r4, #20]
 8019128:	b2f6      	uxtb	r6, r6
 801912a:	4283      	cmp	r3, r0
 801912c:	4637      	mov	r7, r6
 801912e:	dc04      	bgt.n	801913a <__swbuf_r+0x42>
 8019130:	4621      	mov	r1, r4
 8019132:	4628      	mov	r0, r5
 8019134:	f7fe f958 	bl	80173e8 <_fflush_r>
 8019138:	bb30      	cbnz	r0, 8019188 <__swbuf_r+0x90>
 801913a:	68a3      	ldr	r3, [r4, #8]
 801913c:	3b01      	subs	r3, #1
 801913e:	60a3      	str	r3, [r4, #8]
 8019140:	6823      	ldr	r3, [r4, #0]
 8019142:	1c5a      	adds	r2, r3, #1
 8019144:	6022      	str	r2, [r4, #0]
 8019146:	701e      	strb	r6, [r3, #0]
 8019148:	6963      	ldr	r3, [r4, #20]
 801914a:	3001      	adds	r0, #1
 801914c:	4283      	cmp	r3, r0
 801914e:	d004      	beq.n	801915a <__swbuf_r+0x62>
 8019150:	89a3      	ldrh	r3, [r4, #12]
 8019152:	07db      	lsls	r3, r3, #31
 8019154:	d506      	bpl.n	8019164 <__swbuf_r+0x6c>
 8019156:	2e0a      	cmp	r6, #10
 8019158:	d104      	bne.n	8019164 <__swbuf_r+0x6c>
 801915a:	4621      	mov	r1, r4
 801915c:	4628      	mov	r0, r5
 801915e:	f7fe f943 	bl	80173e8 <_fflush_r>
 8019162:	b988      	cbnz	r0, 8019188 <__swbuf_r+0x90>
 8019164:	4638      	mov	r0, r7
 8019166:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019168:	4b0a      	ldr	r3, [pc, #40]	; (8019194 <__swbuf_r+0x9c>)
 801916a:	429c      	cmp	r4, r3
 801916c:	d101      	bne.n	8019172 <__swbuf_r+0x7a>
 801916e:	68ac      	ldr	r4, [r5, #8]
 8019170:	e7cf      	b.n	8019112 <__swbuf_r+0x1a>
 8019172:	4b09      	ldr	r3, [pc, #36]	; (8019198 <__swbuf_r+0xa0>)
 8019174:	429c      	cmp	r4, r3
 8019176:	bf08      	it	eq
 8019178:	68ec      	ldreq	r4, [r5, #12]
 801917a:	e7ca      	b.n	8019112 <__swbuf_r+0x1a>
 801917c:	4621      	mov	r1, r4
 801917e:	4628      	mov	r0, r5
 8019180:	f000 f81e 	bl	80191c0 <__swsetup_r>
 8019184:	2800      	cmp	r0, #0
 8019186:	d0cb      	beq.n	8019120 <__swbuf_r+0x28>
 8019188:	f04f 37ff 	mov.w	r7, #4294967295
 801918c:	e7ea      	b.n	8019164 <__swbuf_r+0x6c>
 801918e:	bf00      	nop
 8019190:	0801c558 	.word	0x0801c558
 8019194:	0801c578 	.word	0x0801c578
 8019198:	0801c538 	.word	0x0801c538

0801919c <_write_r>:
 801919c:	b538      	push	{r3, r4, r5, lr}
 801919e:	4d07      	ldr	r5, [pc, #28]	; (80191bc <_write_r+0x20>)
 80191a0:	4604      	mov	r4, r0
 80191a2:	4608      	mov	r0, r1
 80191a4:	4611      	mov	r1, r2
 80191a6:	2200      	movs	r2, #0
 80191a8:	602a      	str	r2, [r5, #0]
 80191aa:	461a      	mov	r2, r3
 80191ac:	f7fe f864 	bl	8017278 <_write>
 80191b0:	1c43      	adds	r3, r0, #1
 80191b2:	d102      	bne.n	80191ba <_write_r+0x1e>
 80191b4:	682b      	ldr	r3, [r5, #0]
 80191b6:	b103      	cbz	r3, 80191ba <_write_r+0x1e>
 80191b8:	6023      	str	r3, [r4, #0]
 80191ba:	bd38      	pop	{r3, r4, r5, pc}
 80191bc:	2001e3f8 	.word	0x2001e3f8

080191c0 <__swsetup_r>:
 80191c0:	4b32      	ldr	r3, [pc, #200]	; (801928c <__swsetup_r+0xcc>)
 80191c2:	b570      	push	{r4, r5, r6, lr}
 80191c4:	681d      	ldr	r5, [r3, #0]
 80191c6:	4606      	mov	r6, r0
 80191c8:	460c      	mov	r4, r1
 80191ca:	b125      	cbz	r5, 80191d6 <__swsetup_r+0x16>
 80191cc:	69ab      	ldr	r3, [r5, #24]
 80191ce:	b913      	cbnz	r3, 80191d6 <__swsetup_r+0x16>
 80191d0:	4628      	mov	r0, r5
 80191d2:	f7fe f99d 	bl	8017510 <__sinit>
 80191d6:	4b2e      	ldr	r3, [pc, #184]	; (8019290 <__swsetup_r+0xd0>)
 80191d8:	429c      	cmp	r4, r3
 80191da:	d10f      	bne.n	80191fc <__swsetup_r+0x3c>
 80191dc:	686c      	ldr	r4, [r5, #4]
 80191de:	89a3      	ldrh	r3, [r4, #12]
 80191e0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80191e4:	0719      	lsls	r1, r3, #28
 80191e6:	d42c      	bmi.n	8019242 <__swsetup_r+0x82>
 80191e8:	06dd      	lsls	r5, r3, #27
 80191ea:	d411      	bmi.n	8019210 <__swsetup_r+0x50>
 80191ec:	2309      	movs	r3, #9
 80191ee:	6033      	str	r3, [r6, #0]
 80191f0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80191f4:	81a3      	strh	r3, [r4, #12]
 80191f6:	f04f 30ff 	mov.w	r0, #4294967295
 80191fa:	e03e      	b.n	801927a <__swsetup_r+0xba>
 80191fc:	4b25      	ldr	r3, [pc, #148]	; (8019294 <__swsetup_r+0xd4>)
 80191fe:	429c      	cmp	r4, r3
 8019200:	d101      	bne.n	8019206 <__swsetup_r+0x46>
 8019202:	68ac      	ldr	r4, [r5, #8]
 8019204:	e7eb      	b.n	80191de <__swsetup_r+0x1e>
 8019206:	4b24      	ldr	r3, [pc, #144]	; (8019298 <__swsetup_r+0xd8>)
 8019208:	429c      	cmp	r4, r3
 801920a:	bf08      	it	eq
 801920c:	68ec      	ldreq	r4, [r5, #12]
 801920e:	e7e6      	b.n	80191de <__swsetup_r+0x1e>
 8019210:	0758      	lsls	r0, r3, #29
 8019212:	d512      	bpl.n	801923a <__swsetup_r+0x7a>
 8019214:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8019216:	b141      	cbz	r1, 801922a <__swsetup_r+0x6a>
 8019218:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801921c:	4299      	cmp	r1, r3
 801921e:	d002      	beq.n	8019226 <__swsetup_r+0x66>
 8019220:	4630      	mov	r0, r6
 8019222:	f7fe faef 	bl	8017804 <_free_r>
 8019226:	2300      	movs	r3, #0
 8019228:	6363      	str	r3, [r4, #52]	; 0x34
 801922a:	89a3      	ldrh	r3, [r4, #12]
 801922c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8019230:	81a3      	strh	r3, [r4, #12]
 8019232:	2300      	movs	r3, #0
 8019234:	6063      	str	r3, [r4, #4]
 8019236:	6923      	ldr	r3, [r4, #16]
 8019238:	6023      	str	r3, [r4, #0]
 801923a:	89a3      	ldrh	r3, [r4, #12]
 801923c:	f043 0308 	orr.w	r3, r3, #8
 8019240:	81a3      	strh	r3, [r4, #12]
 8019242:	6923      	ldr	r3, [r4, #16]
 8019244:	b94b      	cbnz	r3, 801925a <__swsetup_r+0x9a>
 8019246:	89a3      	ldrh	r3, [r4, #12]
 8019248:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801924c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8019250:	d003      	beq.n	801925a <__swsetup_r+0x9a>
 8019252:	4621      	mov	r1, r4
 8019254:	4630      	mov	r0, r6
 8019256:	f7fe fa45 	bl	80176e4 <__smakebuf_r>
 801925a:	89a0      	ldrh	r0, [r4, #12]
 801925c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8019260:	f010 0301 	ands.w	r3, r0, #1
 8019264:	d00a      	beq.n	801927c <__swsetup_r+0xbc>
 8019266:	2300      	movs	r3, #0
 8019268:	60a3      	str	r3, [r4, #8]
 801926a:	6963      	ldr	r3, [r4, #20]
 801926c:	425b      	negs	r3, r3
 801926e:	61a3      	str	r3, [r4, #24]
 8019270:	6923      	ldr	r3, [r4, #16]
 8019272:	b943      	cbnz	r3, 8019286 <__swsetup_r+0xc6>
 8019274:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8019278:	d1ba      	bne.n	80191f0 <__swsetup_r+0x30>
 801927a:	bd70      	pop	{r4, r5, r6, pc}
 801927c:	0781      	lsls	r1, r0, #30
 801927e:	bf58      	it	pl
 8019280:	6963      	ldrpl	r3, [r4, #20]
 8019282:	60a3      	str	r3, [r4, #8]
 8019284:	e7f4      	b.n	8019270 <__swsetup_r+0xb0>
 8019286:	2000      	movs	r0, #0
 8019288:	e7f7      	b.n	801927a <__swsetup_r+0xba>
 801928a:	bf00      	nop
 801928c:	2000036c 	.word	0x2000036c
 8019290:	0801c558 	.word	0x0801c558
 8019294:	0801c578 	.word	0x0801c578
 8019298:	0801c538 	.word	0x0801c538

0801929c <_close_r>:
 801929c:	b538      	push	{r3, r4, r5, lr}
 801929e:	4d06      	ldr	r5, [pc, #24]	; (80192b8 <_close_r+0x1c>)
 80192a0:	2300      	movs	r3, #0
 80192a2:	4604      	mov	r4, r0
 80192a4:	4608      	mov	r0, r1
 80192a6:	602b      	str	r3, [r5, #0]
 80192a8:	f7fd fff4 	bl	8017294 <_close>
 80192ac:	1c43      	adds	r3, r0, #1
 80192ae:	d102      	bne.n	80192b6 <_close_r+0x1a>
 80192b0:	682b      	ldr	r3, [r5, #0]
 80192b2:	b103      	cbz	r3, 80192b6 <_close_r+0x1a>
 80192b4:	6023      	str	r3, [r4, #0]
 80192b6:	bd38      	pop	{r3, r4, r5, pc}
 80192b8:	2001e3f8 	.word	0x2001e3f8

080192bc <quorem>:
 80192bc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80192c0:	6903      	ldr	r3, [r0, #16]
 80192c2:	690c      	ldr	r4, [r1, #16]
 80192c4:	42a3      	cmp	r3, r4
 80192c6:	4607      	mov	r7, r0
 80192c8:	f2c0 8081 	blt.w	80193ce <quorem+0x112>
 80192cc:	3c01      	subs	r4, #1
 80192ce:	f101 0814 	add.w	r8, r1, #20
 80192d2:	f100 0514 	add.w	r5, r0, #20
 80192d6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80192da:	9301      	str	r3, [sp, #4]
 80192dc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80192e0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80192e4:	3301      	adds	r3, #1
 80192e6:	429a      	cmp	r2, r3
 80192e8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80192ec:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80192f0:	fbb2 f6f3 	udiv	r6, r2, r3
 80192f4:	d331      	bcc.n	801935a <quorem+0x9e>
 80192f6:	f04f 0e00 	mov.w	lr, #0
 80192fa:	4640      	mov	r0, r8
 80192fc:	46ac      	mov	ip, r5
 80192fe:	46f2      	mov	sl, lr
 8019300:	f850 2b04 	ldr.w	r2, [r0], #4
 8019304:	b293      	uxth	r3, r2
 8019306:	fb06 e303 	mla	r3, r6, r3, lr
 801930a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 801930e:	b29b      	uxth	r3, r3
 8019310:	ebaa 0303 	sub.w	r3, sl, r3
 8019314:	0c12      	lsrs	r2, r2, #16
 8019316:	f8dc a000 	ldr.w	sl, [ip]
 801931a:	fb06 e202 	mla	r2, r6, r2, lr
 801931e:	fa13 f38a 	uxtah	r3, r3, sl
 8019322:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8019326:	fa1f fa82 	uxth.w	sl, r2
 801932a:	f8dc 2000 	ldr.w	r2, [ip]
 801932e:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8019332:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8019336:	b29b      	uxth	r3, r3
 8019338:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801933c:	4581      	cmp	r9, r0
 801933e:	f84c 3b04 	str.w	r3, [ip], #4
 8019342:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8019346:	d2db      	bcs.n	8019300 <quorem+0x44>
 8019348:	f855 300b 	ldr.w	r3, [r5, fp]
 801934c:	b92b      	cbnz	r3, 801935a <quorem+0x9e>
 801934e:	9b01      	ldr	r3, [sp, #4]
 8019350:	3b04      	subs	r3, #4
 8019352:	429d      	cmp	r5, r3
 8019354:	461a      	mov	r2, r3
 8019356:	d32e      	bcc.n	80193b6 <quorem+0xfa>
 8019358:	613c      	str	r4, [r7, #16]
 801935a:	4638      	mov	r0, r7
 801935c:	f001 fcb6 	bl	801accc <__mcmp>
 8019360:	2800      	cmp	r0, #0
 8019362:	db24      	blt.n	80193ae <quorem+0xf2>
 8019364:	3601      	adds	r6, #1
 8019366:	4628      	mov	r0, r5
 8019368:	f04f 0c00 	mov.w	ip, #0
 801936c:	f858 2b04 	ldr.w	r2, [r8], #4
 8019370:	f8d0 e000 	ldr.w	lr, [r0]
 8019374:	b293      	uxth	r3, r2
 8019376:	ebac 0303 	sub.w	r3, ip, r3
 801937a:	0c12      	lsrs	r2, r2, #16
 801937c:	fa13 f38e 	uxtah	r3, r3, lr
 8019380:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8019384:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8019388:	b29b      	uxth	r3, r3
 801938a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801938e:	45c1      	cmp	r9, r8
 8019390:	f840 3b04 	str.w	r3, [r0], #4
 8019394:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8019398:	d2e8      	bcs.n	801936c <quorem+0xb0>
 801939a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801939e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80193a2:	b922      	cbnz	r2, 80193ae <quorem+0xf2>
 80193a4:	3b04      	subs	r3, #4
 80193a6:	429d      	cmp	r5, r3
 80193a8:	461a      	mov	r2, r3
 80193aa:	d30a      	bcc.n	80193c2 <quorem+0x106>
 80193ac:	613c      	str	r4, [r7, #16]
 80193ae:	4630      	mov	r0, r6
 80193b0:	b003      	add	sp, #12
 80193b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80193b6:	6812      	ldr	r2, [r2, #0]
 80193b8:	3b04      	subs	r3, #4
 80193ba:	2a00      	cmp	r2, #0
 80193bc:	d1cc      	bne.n	8019358 <quorem+0x9c>
 80193be:	3c01      	subs	r4, #1
 80193c0:	e7c7      	b.n	8019352 <quorem+0x96>
 80193c2:	6812      	ldr	r2, [r2, #0]
 80193c4:	3b04      	subs	r3, #4
 80193c6:	2a00      	cmp	r2, #0
 80193c8:	d1f0      	bne.n	80193ac <quorem+0xf0>
 80193ca:	3c01      	subs	r4, #1
 80193cc:	e7eb      	b.n	80193a6 <quorem+0xea>
 80193ce:	2000      	movs	r0, #0
 80193d0:	e7ee      	b.n	80193b0 <quorem+0xf4>
 80193d2:	0000      	movs	r0, r0
 80193d4:	0000      	movs	r0, r0
	...

080193d8 <_dtoa_r>:
 80193d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80193dc:	ed2d 8b02 	vpush	{d8}
 80193e0:	ec57 6b10 	vmov	r6, r7, d0
 80193e4:	b095      	sub	sp, #84	; 0x54
 80193e6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80193e8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80193ec:	9105      	str	r1, [sp, #20]
 80193ee:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80193f2:	4604      	mov	r4, r0
 80193f4:	9209      	str	r2, [sp, #36]	; 0x24
 80193f6:	930f      	str	r3, [sp, #60]	; 0x3c
 80193f8:	b975      	cbnz	r5, 8019418 <_dtoa_r+0x40>
 80193fa:	2010      	movs	r0, #16
 80193fc:	f7fe f9b2 	bl	8017764 <malloc>
 8019400:	4602      	mov	r2, r0
 8019402:	6260      	str	r0, [r4, #36]	; 0x24
 8019404:	b920      	cbnz	r0, 8019410 <_dtoa_r+0x38>
 8019406:	4bb2      	ldr	r3, [pc, #712]	; (80196d0 <_dtoa_r+0x2f8>)
 8019408:	21ea      	movs	r1, #234	; 0xea
 801940a:	48b2      	ldr	r0, [pc, #712]	; (80196d4 <_dtoa_r+0x2fc>)
 801940c:	f001 ffd6 	bl	801b3bc <__assert_func>
 8019410:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8019414:	6005      	str	r5, [r0, #0]
 8019416:	60c5      	str	r5, [r0, #12]
 8019418:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801941a:	6819      	ldr	r1, [r3, #0]
 801941c:	b151      	cbz	r1, 8019434 <_dtoa_r+0x5c>
 801941e:	685a      	ldr	r2, [r3, #4]
 8019420:	604a      	str	r2, [r1, #4]
 8019422:	2301      	movs	r3, #1
 8019424:	4093      	lsls	r3, r2
 8019426:	608b      	str	r3, [r1, #8]
 8019428:	4620      	mov	r0, r4
 801942a:	f001 f9c7 	bl	801a7bc <_Bfree>
 801942e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8019430:	2200      	movs	r2, #0
 8019432:	601a      	str	r2, [r3, #0]
 8019434:	1e3b      	subs	r3, r7, #0
 8019436:	bfb9      	ittee	lt
 8019438:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801943c:	9303      	strlt	r3, [sp, #12]
 801943e:	2300      	movge	r3, #0
 8019440:	f8c8 3000 	strge.w	r3, [r8]
 8019444:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8019448:	4ba3      	ldr	r3, [pc, #652]	; (80196d8 <_dtoa_r+0x300>)
 801944a:	bfbc      	itt	lt
 801944c:	2201      	movlt	r2, #1
 801944e:	f8c8 2000 	strlt.w	r2, [r8]
 8019452:	ea33 0309 	bics.w	r3, r3, r9
 8019456:	d11b      	bne.n	8019490 <_dtoa_r+0xb8>
 8019458:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801945a:	f242 730f 	movw	r3, #9999	; 0x270f
 801945e:	6013      	str	r3, [r2, #0]
 8019460:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8019464:	4333      	orrs	r3, r6
 8019466:	f000 857a 	beq.w	8019f5e <_dtoa_r+0xb86>
 801946a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801946c:	b963      	cbnz	r3, 8019488 <_dtoa_r+0xb0>
 801946e:	4b9b      	ldr	r3, [pc, #620]	; (80196dc <_dtoa_r+0x304>)
 8019470:	e024      	b.n	80194bc <_dtoa_r+0xe4>
 8019472:	4b9b      	ldr	r3, [pc, #620]	; (80196e0 <_dtoa_r+0x308>)
 8019474:	9300      	str	r3, [sp, #0]
 8019476:	3308      	adds	r3, #8
 8019478:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801947a:	6013      	str	r3, [r2, #0]
 801947c:	9800      	ldr	r0, [sp, #0]
 801947e:	b015      	add	sp, #84	; 0x54
 8019480:	ecbd 8b02 	vpop	{d8}
 8019484:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019488:	4b94      	ldr	r3, [pc, #592]	; (80196dc <_dtoa_r+0x304>)
 801948a:	9300      	str	r3, [sp, #0]
 801948c:	3303      	adds	r3, #3
 801948e:	e7f3      	b.n	8019478 <_dtoa_r+0xa0>
 8019490:	ed9d 7b02 	vldr	d7, [sp, #8]
 8019494:	2200      	movs	r2, #0
 8019496:	ec51 0b17 	vmov	r0, r1, d7
 801949a:	2300      	movs	r3, #0
 801949c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80194a0:	f7e7 fb3a 	bl	8000b18 <__aeabi_dcmpeq>
 80194a4:	4680      	mov	r8, r0
 80194a6:	b158      	cbz	r0, 80194c0 <_dtoa_r+0xe8>
 80194a8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80194aa:	2301      	movs	r3, #1
 80194ac:	6013      	str	r3, [r2, #0]
 80194ae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80194b0:	2b00      	cmp	r3, #0
 80194b2:	f000 8551 	beq.w	8019f58 <_dtoa_r+0xb80>
 80194b6:	488b      	ldr	r0, [pc, #556]	; (80196e4 <_dtoa_r+0x30c>)
 80194b8:	6018      	str	r0, [r3, #0]
 80194ba:	1e43      	subs	r3, r0, #1
 80194bc:	9300      	str	r3, [sp, #0]
 80194be:	e7dd      	b.n	801947c <_dtoa_r+0xa4>
 80194c0:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80194c4:	aa12      	add	r2, sp, #72	; 0x48
 80194c6:	a913      	add	r1, sp, #76	; 0x4c
 80194c8:	4620      	mov	r0, r4
 80194ca:	f001 fd1f 	bl	801af0c <__d2b>
 80194ce:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80194d2:	4683      	mov	fp, r0
 80194d4:	2d00      	cmp	r5, #0
 80194d6:	d07c      	beq.n	80195d2 <_dtoa_r+0x1fa>
 80194d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80194da:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 80194de:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80194e2:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 80194e6:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80194ea:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80194ee:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80194f2:	4b7d      	ldr	r3, [pc, #500]	; (80196e8 <_dtoa_r+0x310>)
 80194f4:	2200      	movs	r2, #0
 80194f6:	4630      	mov	r0, r6
 80194f8:	4639      	mov	r1, r7
 80194fa:	f7e6 feed 	bl	80002d8 <__aeabi_dsub>
 80194fe:	a36e      	add	r3, pc, #440	; (adr r3, 80196b8 <_dtoa_r+0x2e0>)
 8019500:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019504:	f7e7 f8a0 	bl	8000648 <__aeabi_dmul>
 8019508:	a36d      	add	r3, pc, #436	; (adr r3, 80196c0 <_dtoa_r+0x2e8>)
 801950a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801950e:	f7e6 fee5 	bl	80002dc <__adddf3>
 8019512:	4606      	mov	r6, r0
 8019514:	4628      	mov	r0, r5
 8019516:	460f      	mov	r7, r1
 8019518:	f7e7 f82c 	bl	8000574 <__aeabi_i2d>
 801951c:	a36a      	add	r3, pc, #424	; (adr r3, 80196c8 <_dtoa_r+0x2f0>)
 801951e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019522:	f7e7 f891 	bl	8000648 <__aeabi_dmul>
 8019526:	4602      	mov	r2, r0
 8019528:	460b      	mov	r3, r1
 801952a:	4630      	mov	r0, r6
 801952c:	4639      	mov	r1, r7
 801952e:	f7e6 fed5 	bl	80002dc <__adddf3>
 8019532:	4606      	mov	r6, r0
 8019534:	460f      	mov	r7, r1
 8019536:	f7e7 fb37 	bl	8000ba8 <__aeabi_d2iz>
 801953a:	2200      	movs	r2, #0
 801953c:	4682      	mov	sl, r0
 801953e:	2300      	movs	r3, #0
 8019540:	4630      	mov	r0, r6
 8019542:	4639      	mov	r1, r7
 8019544:	f7e7 faf2 	bl	8000b2c <__aeabi_dcmplt>
 8019548:	b148      	cbz	r0, 801955e <_dtoa_r+0x186>
 801954a:	4650      	mov	r0, sl
 801954c:	f7e7 f812 	bl	8000574 <__aeabi_i2d>
 8019550:	4632      	mov	r2, r6
 8019552:	463b      	mov	r3, r7
 8019554:	f7e7 fae0 	bl	8000b18 <__aeabi_dcmpeq>
 8019558:	b908      	cbnz	r0, 801955e <_dtoa_r+0x186>
 801955a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801955e:	f1ba 0f16 	cmp.w	sl, #22
 8019562:	d854      	bhi.n	801960e <_dtoa_r+0x236>
 8019564:	4b61      	ldr	r3, [pc, #388]	; (80196ec <_dtoa_r+0x314>)
 8019566:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801956a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801956e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8019572:	f7e7 fadb 	bl	8000b2c <__aeabi_dcmplt>
 8019576:	2800      	cmp	r0, #0
 8019578:	d04b      	beq.n	8019612 <_dtoa_r+0x23a>
 801957a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801957e:	2300      	movs	r3, #0
 8019580:	930e      	str	r3, [sp, #56]	; 0x38
 8019582:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8019584:	1b5d      	subs	r5, r3, r5
 8019586:	1e6b      	subs	r3, r5, #1
 8019588:	9304      	str	r3, [sp, #16]
 801958a:	bf43      	ittte	mi
 801958c:	2300      	movmi	r3, #0
 801958e:	f1c5 0801 	rsbmi	r8, r5, #1
 8019592:	9304      	strmi	r3, [sp, #16]
 8019594:	f04f 0800 	movpl.w	r8, #0
 8019598:	f1ba 0f00 	cmp.w	sl, #0
 801959c:	db3b      	blt.n	8019616 <_dtoa_r+0x23e>
 801959e:	9b04      	ldr	r3, [sp, #16]
 80195a0:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 80195a4:	4453      	add	r3, sl
 80195a6:	9304      	str	r3, [sp, #16]
 80195a8:	2300      	movs	r3, #0
 80195aa:	9306      	str	r3, [sp, #24]
 80195ac:	9b05      	ldr	r3, [sp, #20]
 80195ae:	2b09      	cmp	r3, #9
 80195b0:	d869      	bhi.n	8019686 <_dtoa_r+0x2ae>
 80195b2:	2b05      	cmp	r3, #5
 80195b4:	bfc4      	itt	gt
 80195b6:	3b04      	subgt	r3, #4
 80195b8:	9305      	strgt	r3, [sp, #20]
 80195ba:	9b05      	ldr	r3, [sp, #20]
 80195bc:	f1a3 0302 	sub.w	r3, r3, #2
 80195c0:	bfcc      	ite	gt
 80195c2:	2500      	movgt	r5, #0
 80195c4:	2501      	movle	r5, #1
 80195c6:	2b03      	cmp	r3, #3
 80195c8:	d869      	bhi.n	801969e <_dtoa_r+0x2c6>
 80195ca:	e8df f003 	tbb	[pc, r3]
 80195ce:	4e2c      	.short	0x4e2c
 80195d0:	5a4c      	.short	0x5a4c
 80195d2:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 80195d6:	441d      	add	r5, r3
 80195d8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80195dc:	2b20      	cmp	r3, #32
 80195de:	bfc1      	itttt	gt
 80195e0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80195e4:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80195e8:	fa09 f303 	lslgt.w	r3, r9, r3
 80195ec:	fa26 f000 	lsrgt.w	r0, r6, r0
 80195f0:	bfda      	itte	le
 80195f2:	f1c3 0320 	rsble	r3, r3, #32
 80195f6:	fa06 f003 	lslle.w	r0, r6, r3
 80195fa:	4318      	orrgt	r0, r3
 80195fc:	f7e6 ffaa 	bl	8000554 <__aeabi_ui2d>
 8019600:	2301      	movs	r3, #1
 8019602:	4606      	mov	r6, r0
 8019604:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8019608:	3d01      	subs	r5, #1
 801960a:	9310      	str	r3, [sp, #64]	; 0x40
 801960c:	e771      	b.n	80194f2 <_dtoa_r+0x11a>
 801960e:	2301      	movs	r3, #1
 8019610:	e7b6      	b.n	8019580 <_dtoa_r+0x1a8>
 8019612:	900e      	str	r0, [sp, #56]	; 0x38
 8019614:	e7b5      	b.n	8019582 <_dtoa_r+0x1aa>
 8019616:	f1ca 0300 	rsb	r3, sl, #0
 801961a:	9306      	str	r3, [sp, #24]
 801961c:	2300      	movs	r3, #0
 801961e:	eba8 080a 	sub.w	r8, r8, sl
 8019622:	930d      	str	r3, [sp, #52]	; 0x34
 8019624:	e7c2      	b.n	80195ac <_dtoa_r+0x1d4>
 8019626:	2300      	movs	r3, #0
 8019628:	9308      	str	r3, [sp, #32]
 801962a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801962c:	2b00      	cmp	r3, #0
 801962e:	dc39      	bgt.n	80196a4 <_dtoa_r+0x2cc>
 8019630:	f04f 0901 	mov.w	r9, #1
 8019634:	f8cd 9004 	str.w	r9, [sp, #4]
 8019638:	464b      	mov	r3, r9
 801963a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 801963e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8019640:	2200      	movs	r2, #0
 8019642:	6042      	str	r2, [r0, #4]
 8019644:	2204      	movs	r2, #4
 8019646:	f102 0614 	add.w	r6, r2, #20
 801964a:	429e      	cmp	r6, r3
 801964c:	6841      	ldr	r1, [r0, #4]
 801964e:	d92f      	bls.n	80196b0 <_dtoa_r+0x2d8>
 8019650:	4620      	mov	r0, r4
 8019652:	f001 f873 	bl	801a73c <_Balloc>
 8019656:	9000      	str	r0, [sp, #0]
 8019658:	2800      	cmp	r0, #0
 801965a:	d14b      	bne.n	80196f4 <_dtoa_r+0x31c>
 801965c:	4b24      	ldr	r3, [pc, #144]	; (80196f0 <_dtoa_r+0x318>)
 801965e:	4602      	mov	r2, r0
 8019660:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8019664:	e6d1      	b.n	801940a <_dtoa_r+0x32>
 8019666:	2301      	movs	r3, #1
 8019668:	e7de      	b.n	8019628 <_dtoa_r+0x250>
 801966a:	2300      	movs	r3, #0
 801966c:	9308      	str	r3, [sp, #32]
 801966e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019670:	eb0a 0903 	add.w	r9, sl, r3
 8019674:	f109 0301 	add.w	r3, r9, #1
 8019678:	2b01      	cmp	r3, #1
 801967a:	9301      	str	r3, [sp, #4]
 801967c:	bfb8      	it	lt
 801967e:	2301      	movlt	r3, #1
 8019680:	e7dd      	b.n	801963e <_dtoa_r+0x266>
 8019682:	2301      	movs	r3, #1
 8019684:	e7f2      	b.n	801966c <_dtoa_r+0x294>
 8019686:	2501      	movs	r5, #1
 8019688:	2300      	movs	r3, #0
 801968a:	9305      	str	r3, [sp, #20]
 801968c:	9508      	str	r5, [sp, #32]
 801968e:	f04f 39ff 	mov.w	r9, #4294967295
 8019692:	2200      	movs	r2, #0
 8019694:	f8cd 9004 	str.w	r9, [sp, #4]
 8019698:	2312      	movs	r3, #18
 801969a:	9209      	str	r2, [sp, #36]	; 0x24
 801969c:	e7cf      	b.n	801963e <_dtoa_r+0x266>
 801969e:	2301      	movs	r3, #1
 80196a0:	9308      	str	r3, [sp, #32]
 80196a2:	e7f4      	b.n	801968e <_dtoa_r+0x2b6>
 80196a4:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80196a8:	f8cd 9004 	str.w	r9, [sp, #4]
 80196ac:	464b      	mov	r3, r9
 80196ae:	e7c6      	b.n	801963e <_dtoa_r+0x266>
 80196b0:	3101      	adds	r1, #1
 80196b2:	6041      	str	r1, [r0, #4]
 80196b4:	0052      	lsls	r2, r2, #1
 80196b6:	e7c6      	b.n	8019646 <_dtoa_r+0x26e>
 80196b8:	636f4361 	.word	0x636f4361
 80196bc:	3fd287a7 	.word	0x3fd287a7
 80196c0:	8b60c8b3 	.word	0x8b60c8b3
 80196c4:	3fc68a28 	.word	0x3fc68a28
 80196c8:	509f79fb 	.word	0x509f79fb
 80196cc:	3fd34413 	.word	0x3fd34413
 80196d0:	0801c62d 	.word	0x0801c62d
 80196d4:	0801c644 	.word	0x0801c644
 80196d8:	7ff00000 	.word	0x7ff00000
 80196dc:	0801c629 	.word	0x0801c629
 80196e0:	0801c620 	.word	0x0801c620
 80196e4:	0801c5ad 	.word	0x0801c5ad
 80196e8:	3ff80000 	.word	0x3ff80000
 80196ec:	0801c7c0 	.word	0x0801c7c0
 80196f0:	0801c6a3 	.word	0x0801c6a3
 80196f4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80196f6:	9a00      	ldr	r2, [sp, #0]
 80196f8:	601a      	str	r2, [r3, #0]
 80196fa:	9b01      	ldr	r3, [sp, #4]
 80196fc:	2b0e      	cmp	r3, #14
 80196fe:	f200 80ad 	bhi.w	801985c <_dtoa_r+0x484>
 8019702:	2d00      	cmp	r5, #0
 8019704:	f000 80aa 	beq.w	801985c <_dtoa_r+0x484>
 8019708:	f1ba 0f00 	cmp.w	sl, #0
 801970c:	dd36      	ble.n	801977c <_dtoa_r+0x3a4>
 801970e:	4ac3      	ldr	r2, [pc, #780]	; (8019a1c <_dtoa_r+0x644>)
 8019710:	f00a 030f 	and.w	r3, sl, #15
 8019714:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8019718:	ed93 7b00 	vldr	d7, [r3]
 801971c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8019720:	ea4f 172a 	mov.w	r7, sl, asr #4
 8019724:	eeb0 8a47 	vmov.f32	s16, s14
 8019728:	eef0 8a67 	vmov.f32	s17, s15
 801972c:	d016      	beq.n	801975c <_dtoa_r+0x384>
 801972e:	4bbc      	ldr	r3, [pc, #752]	; (8019a20 <_dtoa_r+0x648>)
 8019730:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8019734:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8019738:	f7e7 f8b0 	bl	800089c <__aeabi_ddiv>
 801973c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8019740:	f007 070f 	and.w	r7, r7, #15
 8019744:	2503      	movs	r5, #3
 8019746:	4eb6      	ldr	r6, [pc, #728]	; (8019a20 <_dtoa_r+0x648>)
 8019748:	b957      	cbnz	r7, 8019760 <_dtoa_r+0x388>
 801974a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801974e:	ec53 2b18 	vmov	r2, r3, d8
 8019752:	f7e7 f8a3 	bl	800089c <__aeabi_ddiv>
 8019756:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801975a:	e029      	b.n	80197b0 <_dtoa_r+0x3d8>
 801975c:	2502      	movs	r5, #2
 801975e:	e7f2      	b.n	8019746 <_dtoa_r+0x36e>
 8019760:	07f9      	lsls	r1, r7, #31
 8019762:	d508      	bpl.n	8019776 <_dtoa_r+0x39e>
 8019764:	ec51 0b18 	vmov	r0, r1, d8
 8019768:	e9d6 2300 	ldrd	r2, r3, [r6]
 801976c:	f7e6 ff6c 	bl	8000648 <__aeabi_dmul>
 8019770:	ec41 0b18 	vmov	d8, r0, r1
 8019774:	3501      	adds	r5, #1
 8019776:	107f      	asrs	r7, r7, #1
 8019778:	3608      	adds	r6, #8
 801977a:	e7e5      	b.n	8019748 <_dtoa_r+0x370>
 801977c:	f000 80a6 	beq.w	80198cc <_dtoa_r+0x4f4>
 8019780:	f1ca 0600 	rsb	r6, sl, #0
 8019784:	4ba5      	ldr	r3, [pc, #660]	; (8019a1c <_dtoa_r+0x644>)
 8019786:	4fa6      	ldr	r7, [pc, #664]	; (8019a20 <_dtoa_r+0x648>)
 8019788:	f006 020f 	and.w	r2, r6, #15
 801978c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8019790:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019794:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8019798:	f7e6 ff56 	bl	8000648 <__aeabi_dmul>
 801979c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80197a0:	1136      	asrs	r6, r6, #4
 80197a2:	2300      	movs	r3, #0
 80197a4:	2502      	movs	r5, #2
 80197a6:	2e00      	cmp	r6, #0
 80197a8:	f040 8085 	bne.w	80198b6 <_dtoa_r+0x4de>
 80197ac:	2b00      	cmp	r3, #0
 80197ae:	d1d2      	bne.n	8019756 <_dtoa_r+0x37e>
 80197b0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80197b2:	2b00      	cmp	r3, #0
 80197b4:	f000 808c 	beq.w	80198d0 <_dtoa_r+0x4f8>
 80197b8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80197bc:	4b99      	ldr	r3, [pc, #612]	; (8019a24 <_dtoa_r+0x64c>)
 80197be:	2200      	movs	r2, #0
 80197c0:	4630      	mov	r0, r6
 80197c2:	4639      	mov	r1, r7
 80197c4:	f7e7 f9b2 	bl	8000b2c <__aeabi_dcmplt>
 80197c8:	2800      	cmp	r0, #0
 80197ca:	f000 8081 	beq.w	80198d0 <_dtoa_r+0x4f8>
 80197ce:	9b01      	ldr	r3, [sp, #4]
 80197d0:	2b00      	cmp	r3, #0
 80197d2:	d07d      	beq.n	80198d0 <_dtoa_r+0x4f8>
 80197d4:	f1b9 0f00 	cmp.w	r9, #0
 80197d8:	dd3c      	ble.n	8019854 <_dtoa_r+0x47c>
 80197da:	f10a 33ff 	add.w	r3, sl, #4294967295
 80197de:	9307      	str	r3, [sp, #28]
 80197e0:	2200      	movs	r2, #0
 80197e2:	4b91      	ldr	r3, [pc, #580]	; (8019a28 <_dtoa_r+0x650>)
 80197e4:	4630      	mov	r0, r6
 80197e6:	4639      	mov	r1, r7
 80197e8:	f7e6 ff2e 	bl	8000648 <__aeabi_dmul>
 80197ec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80197f0:	3501      	adds	r5, #1
 80197f2:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 80197f6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80197fa:	4628      	mov	r0, r5
 80197fc:	f7e6 feba 	bl	8000574 <__aeabi_i2d>
 8019800:	4632      	mov	r2, r6
 8019802:	463b      	mov	r3, r7
 8019804:	f7e6 ff20 	bl	8000648 <__aeabi_dmul>
 8019808:	4b88      	ldr	r3, [pc, #544]	; (8019a2c <_dtoa_r+0x654>)
 801980a:	2200      	movs	r2, #0
 801980c:	f7e6 fd66 	bl	80002dc <__adddf3>
 8019810:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8019814:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8019818:	9303      	str	r3, [sp, #12]
 801981a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801981c:	2b00      	cmp	r3, #0
 801981e:	d15c      	bne.n	80198da <_dtoa_r+0x502>
 8019820:	4b83      	ldr	r3, [pc, #524]	; (8019a30 <_dtoa_r+0x658>)
 8019822:	2200      	movs	r2, #0
 8019824:	4630      	mov	r0, r6
 8019826:	4639      	mov	r1, r7
 8019828:	f7e6 fd56 	bl	80002d8 <__aeabi_dsub>
 801982c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8019830:	4606      	mov	r6, r0
 8019832:	460f      	mov	r7, r1
 8019834:	f7e7 f998 	bl	8000b68 <__aeabi_dcmpgt>
 8019838:	2800      	cmp	r0, #0
 801983a:	f040 8296 	bne.w	8019d6a <_dtoa_r+0x992>
 801983e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8019842:	4630      	mov	r0, r6
 8019844:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8019848:	4639      	mov	r1, r7
 801984a:	f7e7 f96f 	bl	8000b2c <__aeabi_dcmplt>
 801984e:	2800      	cmp	r0, #0
 8019850:	f040 8288 	bne.w	8019d64 <_dtoa_r+0x98c>
 8019854:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8019858:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801985c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801985e:	2b00      	cmp	r3, #0
 8019860:	f2c0 8158 	blt.w	8019b14 <_dtoa_r+0x73c>
 8019864:	f1ba 0f0e 	cmp.w	sl, #14
 8019868:	f300 8154 	bgt.w	8019b14 <_dtoa_r+0x73c>
 801986c:	4b6b      	ldr	r3, [pc, #428]	; (8019a1c <_dtoa_r+0x644>)
 801986e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8019872:	e9d3 8900 	ldrd	r8, r9, [r3]
 8019876:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019878:	2b00      	cmp	r3, #0
 801987a:	f280 80e3 	bge.w	8019a44 <_dtoa_r+0x66c>
 801987e:	9b01      	ldr	r3, [sp, #4]
 8019880:	2b00      	cmp	r3, #0
 8019882:	f300 80df 	bgt.w	8019a44 <_dtoa_r+0x66c>
 8019886:	f040 826d 	bne.w	8019d64 <_dtoa_r+0x98c>
 801988a:	4b69      	ldr	r3, [pc, #420]	; (8019a30 <_dtoa_r+0x658>)
 801988c:	2200      	movs	r2, #0
 801988e:	4640      	mov	r0, r8
 8019890:	4649      	mov	r1, r9
 8019892:	f7e6 fed9 	bl	8000648 <__aeabi_dmul>
 8019896:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801989a:	f7e7 f95b 	bl	8000b54 <__aeabi_dcmpge>
 801989e:	9e01      	ldr	r6, [sp, #4]
 80198a0:	4637      	mov	r7, r6
 80198a2:	2800      	cmp	r0, #0
 80198a4:	f040 8243 	bne.w	8019d2e <_dtoa_r+0x956>
 80198a8:	9d00      	ldr	r5, [sp, #0]
 80198aa:	2331      	movs	r3, #49	; 0x31
 80198ac:	f805 3b01 	strb.w	r3, [r5], #1
 80198b0:	f10a 0a01 	add.w	sl, sl, #1
 80198b4:	e23f      	b.n	8019d36 <_dtoa_r+0x95e>
 80198b6:	07f2      	lsls	r2, r6, #31
 80198b8:	d505      	bpl.n	80198c6 <_dtoa_r+0x4ee>
 80198ba:	e9d7 2300 	ldrd	r2, r3, [r7]
 80198be:	f7e6 fec3 	bl	8000648 <__aeabi_dmul>
 80198c2:	3501      	adds	r5, #1
 80198c4:	2301      	movs	r3, #1
 80198c6:	1076      	asrs	r6, r6, #1
 80198c8:	3708      	adds	r7, #8
 80198ca:	e76c      	b.n	80197a6 <_dtoa_r+0x3ce>
 80198cc:	2502      	movs	r5, #2
 80198ce:	e76f      	b.n	80197b0 <_dtoa_r+0x3d8>
 80198d0:	9b01      	ldr	r3, [sp, #4]
 80198d2:	f8cd a01c 	str.w	sl, [sp, #28]
 80198d6:	930c      	str	r3, [sp, #48]	; 0x30
 80198d8:	e78d      	b.n	80197f6 <_dtoa_r+0x41e>
 80198da:	9900      	ldr	r1, [sp, #0]
 80198dc:	980c      	ldr	r0, [sp, #48]	; 0x30
 80198de:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80198e0:	4b4e      	ldr	r3, [pc, #312]	; (8019a1c <_dtoa_r+0x644>)
 80198e2:	ed9d 7b02 	vldr	d7, [sp, #8]
 80198e6:	4401      	add	r1, r0
 80198e8:	9102      	str	r1, [sp, #8]
 80198ea:	9908      	ldr	r1, [sp, #32]
 80198ec:	eeb0 8a47 	vmov.f32	s16, s14
 80198f0:	eef0 8a67 	vmov.f32	s17, s15
 80198f4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80198f8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80198fc:	2900      	cmp	r1, #0
 80198fe:	d045      	beq.n	801998c <_dtoa_r+0x5b4>
 8019900:	494c      	ldr	r1, [pc, #304]	; (8019a34 <_dtoa_r+0x65c>)
 8019902:	2000      	movs	r0, #0
 8019904:	f7e6 ffca 	bl	800089c <__aeabi_ddiv>
 8019908:	ec53 2b18 	vmov	r2, r3, d8
 801990c:	f7e6 fce4 	bl	80002d8 <__aeabi_dsub>
 8019910:	9d00      	ldr	r5, [sp, #0]
 8019912:	ec41 0b18 	vmov	d8, r0, r1
 8019916:	4639      	mov	r1, r7
 8019918:	4630      	mov	r0, r6
 801991a:	f7e7 f945 	bl	8000ba8 <__aeabi_d2iz>
 801991e:	900c      	str	r0, [sp, #48]	; 0x30
 8019920:	f7e6 fe28 	bl	8000574 <__aeabi_i2d>
 8019924:	4602      	mov	r2, r0
 8019926:	460b      	mov	r3, r1
 8019928:	4630      	mov	r0, r6
 801992a:	4639      	mov	r1, r7
 801992c:	f7e6 fcd4 	bl	80002d8 <__aeabi_dsub>
 8019930:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8019932:	3330      	adds	r3, #48	; 0x30
 8019934:	f805 3b01 	strb.w	r3, [r5], #1
 8019938:	ec53 2b18 	vmov	r2, r3, d8
 801993c:	4606      	mov	r6, r0
 801993e:	460f      	mov	r7, r1
 8019940:	f7e7 f8f4 	bl	8000b2c <__aeabi_dcmplt>
 8019944:	2800      	cmp	r0, #0
 8019946:	d165      	bne.n	8019a14 <_dtoa_r+0x63c>
 8019948:	4632      	mov	r2, r6
 801994a:	463b      	mov	r3, r7
 801994c:	4935      	ldr	r1, [pc, #212]	; (8019a24 <_dtoa_r+0x64c>)
 801994e:	2000      	movs	r0, #0
 8019950:	f7e6 fcc2 	bl	80002d8 <__aeabi_dsub>
 8019954:	ec53 2b18 	vmov	r2, r3, d8
 8019958:	f7e7 f8e8 	bl	8000b2c <__aeabi_dcmplt>
 801995c:	2800      	cmp	r0, #0
 801995e:	f040 80b9 	bne.w	8019ad4 <_dtoa_r+0x6fc>
 8019962:	9b02      	ldr	r3, [sp, #8]
 8019964:	429d      	cmp	r5, r3
 8019966:	f43f af75 	beq.w	8019854 <_dtoa_r+0x47c>
 801996a:	4b2f      	ldr	r3, [pc, #188]	; (8019a28 <_dtoa_r+0x650>)
 801996c:	ec51 0b18 	vmov	r0, r1, d8
 8019970:	2200      	movs	r2, #0
 8019972:	f7e6 fe69 	bl	8000648 <__aeabi_dmul>
 8019976:	4b2c      	ldr	r3, [pc, #176]	; (8019a28 <_dtoa_r+0x650>)
 8019978:	ec41 0b18 	vmov	d8, r0, r1
 801997c:	2200      	movs	r2, #0
 801997e:	4630      	mov	r0, r6
 8019980:	4639      	mov	r1, r7
 8019982:	f7e6 fe61 	bl	8000648 <__aeabi_dmul>
 8019986:	4606      	mov	r6, r0
 8019988:	460f      	mov	r7, r1
 801998a:	e7c4      	b.n	8019916 <_dtoa_r+0x53e>
 801998c:	ec51 0b17 	vmov	r0, r1, d7
 8019990:	f7e6 fe5a 	bl	8000648 <__aeabi_dmul>
 8019994:	9b02      	ldr	r3, [sp, #8]
 8019996:	9d00      	ldr	r5, [sp, #0]
 8019998:	930c      	str	r3, [sp, #48]	; 0x30
 801999a:	ec41 0b18 	vmov	d8, r0, r1
 801999e:	4639      	mov	r1, r7
 80199a0:	4630      	mov	r0, r6
 80199a2:	f7e7 f901 	bl	8000ba8 <__aeabi_d2iz>
 80199a6:	9011      	str	r0, [sp, #68]	; 0x44
 80199a8:	f7e6 fde4 	bl	8000574 <__aeabi_i2d>
 80199ac:	4602      	mov	r2, r0
 80199ae:	460b      	mov	r3, r1
 80199b0:	4630      	mov	r0, r6
 80199b2:	4639      	mov	r1, r7
 80199b4:	f7e6 fc90 	bl	80002d8 <__aeabi_dsub>
 80199b8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80199ba:	3330      	adds	r3, #48	; 0x30
 80199bc:	f805 3b01 	strb.w	r3, [r5], #1
 80199c0:	9b02      	ldr	r3, [sp, #8]
 80199c2:	429d      	cmp	r5, r3
 80199c4:	4606      	mov	r6, r0
 80199c6:	460f      	mov	r7, r1
 80199c8:	f04f 0200 	mov.w	r2, #0
 80199cc:	d134      	bne.n	8019a38 <_dtoa_r+0x660>
 80199ce:	4b19      	ldr	r3, [pc, #100]	; (8019a34 <_dtoa_r+0x65c>)
 80199d0:	ec51 0b18 	vmov	r0, r1, d8
 80199d4:	f7e6 fc82 	bl	80002dc <__adddf3>
 80199d8:	4602      	mov	r2, r0
 80199da:	460b      	mov	r3, r1
 80199dc:	4630      	mov	r0, r6
 80199de:	4639      	mov	r1, r7
 80199e0:	f7e7 f8c2 	bl	8000b68 <__aeabi_dcmpgt>
 80199e4:	2800      	cmp	r0, #0
 80199e6:	d175      	bne.n	8019ad4 <_dtoa_r+0x6fc>
 80199e8:	ec53 2b18 	vmov	r2, r3, d8
 80199ec:	4911      	ldr	r1, [pc, #68]	; (8019a34 <_dtoa_r+0x65c>)
 80199ee:	2000      	movs	r0, #0
 80199f0:	f7e6 fc72 	bl	80002d8 <__aeabi_dsub>
 80199f4:	4602      	mov	r2, r0
 80199f6:	460b      	mov	r3, r1
 80199f8:	4630      	mov	r0, r6
 80199fa:	4639      	mov	r1, r7
 80199fc:	f7e7 f896 	bl	8000b2c <__aeabi_dcmplt>
 8019a00:	2800      	cmp	r0, #0
 8019a02:	f43f af27 	beq.w	8019854 <_dtoa_r+0x47c>
 8019a06:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8019a08:	1e6b      	subs	r3, r5, #1
 8019a0a:	930c      	str	r3, [sp, #48]	; 0x30
 8019a0c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8019a10:	2b30      	cmp	r3, #48	; 0x30
 8019a12:	d0f8      	beq.n	8019a06 <_dtoa_r+0x62e>
 8019a14:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8019a18:	e04a      	b.n	8019ab0 <_dtoa_r+0x6d8>
 8019a1a:	bf00      	nop
 8019a1c:	0801c7c0 	.word	0x0801c7c0
 8019a20:	0801c798 	.word	0x0801c798
 8019a24:	3ff00000 	.word	0x3ff00000
 8019a28:	40240000 	.word	0x40240000
 8019a2c:	401c0000 	.word	0x401c0000
 8019a30:	40140000 	.word	0x40140000
 8019a34:	3fe00000 	.word	0x3fe00000
 8019a38:	4baf      	ldr	r3, [pc, #700]	; (8019cf8 <_dtoa_r+0x920>)
 8019a3a:	f7e6 fe05 	bl	8000648 <__aeabi_dmul>
 8019a3e:	4606      	mov	r6, r0
 8019a40:	460f      	mov	r7, r1
 8019a42:	e7ac      	b.n	801999e <_dtoa_r+0x5c6>
 8019a44:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8019a48:	9d00      	ldr	r5, [sp, #0]
 8019a4a:	4642      	mov	r2, r8
 8019a4c:	464b      	mov	r3, r9
 8019a4e:	4630      	mov	r0, r6
 8019a50:	4639      	mov	r1, r7
 8019a52:	f7e6 ff23 	bl	800089c <__aeabi_ddiv>
 8019a56:	f7e7 f8a7 	bl	8000ba8 <__aeabi_d2iz>
 8019a5a:	9002      	str	r0, [sp, #8]
 8019a5c:	f7e6 fd8a 	bl	8000574 <__aeabi_i2d>
 8019a60:	4642      	mov	r2, r8
 8019a62:	464b      	mov	r3, r9
 8019a64:	f7e6 fdf0 	bl	8000648 <__aeabi_dmul>
 8019a68:	4602      	mov	r2, r0
 8019a6a:	460b      	mov	r3, r1
 8019a6c:	4630      	mov	r0, r6
 8019a6e:	4639      	mov	r1, r7
 8019a70:	f7e6 fc32 	bl	80002d8 <__aeabi_dsub>
 8019a74:	9e02      	ldr	r6, [sp, #8]
 8019a76:	9f01      	ldr	r7, [sp, #4]
 8019a78:	3630      	adds	r6, #48	; 0x30
 8019a7a:	f805 6b01 	strb.w	r6, [r5], #1
 8019a7e:	9e00      	ldr	r6, [sp, #0]
 8019a80:	1bae      	subs	r6, r5, r6
 8019a82:	42b7      	cmp	r7, r6
 8019a84:	4602      	mov	r2, r0
 8019a86:	460b      	mov	r3, r1
 8019a88:	d137      	bne.n	8019afa <_dtoa_r+0x722>
 8019a8a:	f7e6 fc27 	bl	80002dc <__adddf3>
 8019a8e:	4642      	mov	r2, r8
 8019a90:	464b      	mov	r3, r9
 8019a92:	4606      	mov	r6, r0
 8019a94:	460f      	mov	r7, r1
 8019a96:	f7e7 f867 	bl	8000b68 <__aeabi_dcmpgt>
 8019a9a:	b9c8      	cbnz	r0, 8019ad0 <_dtoa_r+0x6f8>
 8019a9c:	4642      	mov	r2, r8
 8019a9e:	464b      	mov	r3, r9
 8019aa0:	4630      	mov	r0, r6
 8019aa2:	4639      	mov	r1, r7
 8019aa4:	f7e7 f838 	bl	8000b18 <__aeabi_dcmpeq>
 8019aa8:	b110      	cbz	r0, 8019ab0 <_dtoa_r+0x6d8>
 8019aaa:	9b02      	ldr	r3, [sp, #8]
 8019aac:	07d9      	lsls	r1, r3, #31
 8019aae:	d40f      	bmi.n	8019ad0 <_dtoa_r+0x6f8>
 8019ab0:	4620      	mov	r0, r4
 8019ab2:	4659      	mov	r1, fp
 8019ab4:	f000 fe82 	bl	801a7bc <_Bfree>
 8019ab8:	2300      	movs	r3, #0
 8019aba:	702b      	strb	r3, [r5, #0]
 8019abc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8019abe:	f10a 0001 	add.w	r0, sl, #1
 8019ac2:	6018      	str	r0, [r3, #0]
 8019ac4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8019ac6:	2b00      	cmp	r3, #0
 8019ac8:	f43f acd8 	beq.w	801947c <_dtoa_r+0xa4>
 8019acc:	601d      	str	r5, [r3, #0]
 8019ace:	e4d5      	b.n	801947c <_dtoa_r+0xa4>
 8019ad0:	f8cd a01c 	str.w	sl, [sp, #28]
 8019ad4:	462b      	mov	r3, r5
 8019ad6:	461d      	mov	r5, r3
 8019ad8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8019adc:	2a39      	cmp	r2, #57	; 0x39
 8019ade:	d108      	bne.n	8019af2 <_dtoa_r+0x71a>
 8019ae0:	9a00      	ldr	r2, [sp, #0]
 8019ae2:	429a      	cmp	r2, r3
 8019ae4:	d1f7      	bne.n	8019ad6 <_dtoa_r+0x6fe>
 8019ae6:	9a07      	ldr	r2, [sp, #28]
 8019ae8:	9900      	ldr	r1, [sp, #0]
 8019aea:	3201      	adds	r2, #1
 8019aec:	9207      	str	r2, [sp, #28]
 8019aee:	2230      	movs	r2, #48	; 0x30
 8019af0:	700a      	strb	r2, [r1, #0]
 8019af2:	781a      	ldrb	r2, [r3, #0]
 8019af4:	3201      	adds	r2, #1
 8019af6:	701a      	strb	r2, [r3, #0]
 8019af8:	e78c      	b.n	8019a14 <_dtoa_r+0x63c>
 8019afa:	4b7f      	ldr	r3, [pc, #508]	; (8019cf8 <_dtoa_r+0x920>)
 8019afc:	2200      	movs	r2, #0
 8019afe:	f7e6 fda3 	bl	8000648 <__aeabi_dmul>
 8019b02:	2200      	movs	r2, #0
 8019b04:	2300      	movs	r3, #0
 8019b06:	4606      	mov	r6, r0
 8019b08:	460f      	mov	r7, r1
 8019b0a:	f7e7 f805 	bl	8000b18 <__aeabi_dcmpeq>
 8019b0e:	2800      	cmp	r0, #0
 8019b10:	d09b      	beq.n	8019a4a <_dtoa_r+0x672>
 8019b12:	e7cd      	b.n	8019ab0 <_dtoa_r+0x6d8>
 8019b14:	9a08      	ldr	r2, [sp, #32]
 8019b16:	2a00      	cmp	r2, #0
 8019b18:	f000 80c4 	beq.w	8019ca4 <_dtoa_r+0x8cc>
 8019b1c:	9a05      	ldr	r2, [sp, #20]
 8019b1e:	2a01      	cmp	r2, #1
 8019b20:	f300 80a8 	bgt.w	8019c74 <_dtoa_r+0x89c>
 8019b24:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8019b26:	2a00      	cmp	r2, #0
 8019b28:	f000 80a0 	beq.w	8019c6c <_dtoa_r+0x894>
 8019b2c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8019b30:	9e06      	ldr	r6, [sp, #24]
 8019b32:	4645      	mov	r5, r8
 8019b34:	9a04      	ldr	r2, [sp, #16]
 8019b36:	2101      	movs	r1, #1
 8019b38:	441a      	add	r2, r3
 8019b3a:	4620      	mov	r0, r4
 8019b3c:	4498      	add	r8, r3
 8019b3e:	9204      	str	r2, [sp, #16]
 8019b40:	f000 ff42 	bl	801a9c8 <__i2b>
 8019b44:	4607      	mov	r7, r0
 8019b46:	2d00      	cmp	r5, #0
 8019b48:	dd0b      	ble.n	8019b62 <_dtoa_r+0x78a>
 8019b4a:	9b04      	ldr	r3, [sp, #16]
 8019b4c:	2b00      	cmp	r3, #0
 8019b4e:	dd08      	ble.n	8019b62 <_dtoa_r+0x78a>
 8019b50:	42ab      	cmp	r3, r5
 8019b52:	9a04      	ldr	r2, [sp, #16]
 8019b54:	bfa8      	it	ge
 8019b56:	462b      	movge	r3, r5
 8019b58:	eba8 0803 	sub.w	r8, r8, r3
 8019b5c:	1aed      	subs	r5, r5, r3
 8019b5e:	1ad3      	subs	r3, r2, r3
 8019b60:	9304      	str	r3, [sp, #16]
 8019b62:	9b06      	ldr	r3, [sp, #24]
 8019b64:	b1fb      	cbz	r3, 8019ba6 <_dtoa_r+0x7ce>
 8019b66:	9b08      	ldr	r3, [sp, #32]
 8019b68:	2b00      	cmp	r3, #0
 8019b6a:	f000 809f 	beq.w	8019cac <_dtoa_r+0x8d4>
 8019b6e:	2e00      	cmp	r6, #0
 8019b70:	dd11      	ble.n	8019b96 <_dtoa_r+0x7be>
 8019b72:	4639      	mov	r1, r7
 8019b74:	4632      	mov	r2, r6
 8019b76:	4620      	mov	r0, r4
 8019b78:	f000 ffe2 	bl	801ab40 <__pow5mult>
 8019b7c:	465a      	mov	r2, fp
 8019b7e:	4601      	mov	r1, r0
 8019b80:	4607      	mov	r7, r0
 8019b82:	4620      	mov	r0, r4
 8019b84:	f000 ff36 	bl	801a9f4 <__multiply>
 8019b88:	4659      	mov	r1, fp
 8019b8a:	9007      	str	r0, [sp, #28]
 8019b8c:	4620      	mov	r0, r4
 8019b8e:	f000 fe15 	bl	801a7bc <_Bfree>
 8019b92:	9b07      	ldr	r3, [sp, #28]
 8019b94:	469b      	mov	fp, r3
 8019b96:	9b06      	ldr	r3, [sp, #24]
 8019b98:	1b9a      	subs	r2, r3, r6
 8019b9a:	d004      	beq.n	8019ba6 <_dtoa_r+0x7ce>
 8019b9c:	4659      	mov	r1, fp
 8019b9e:	4620      	mov	r0, r4
 8019ba0:	f000 ffce 	bl	801ab40 <__pow5mult>
 8019ba4:	4683      	mov	fp, r0
 8019ba6:	2101      	movs	r1, #1
 8019ba8:	4620      	mov	r0, r4
 8019baa:	f000 ff0d 	bl	801a9c8 <__i2b>
 8019bae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8019bb0:	2b00      	cmp	r3, #0
 8019bb2:	4606      	mov	r6, r0
 8019bb4:	dd7c      	ble.n	8019cb0 <_dtoa_r+0x8d8>
 8019bb6:	461a      	mov	r2, r3
 8019bb8:	4601      	mov	r1, r0
 8019bba:	4620      	mov	r0, r4
 8019bbc:	f000 ffc0 	bl	801ab40 <__pow5mult>
 8019bc0:	9b05      	ldr	r3, [sp, #20]
 8019bc2:	2b01      	cmp	r3, #1
 8019bc4:	4606      	mov	r6, r0
 8019bc6:	dd76      	ble.n	8019cb6 <_dtoa_r+0x8de>
 8019bc8:	2300      	movs	r3, #0
 8019bca:	9306      	str	r3, [sp, #24]
 8019bcc:	6933      	ldr	r3, [r6, #16]
 8019bce:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8019bd2:	6918      	ldr	r0, [r3, #16]
 8019bd4:	f000 fea8 	bl	801a928 <__hi0bits>
 8019bd8:	f1c0 0020 	rsb	r0, r0, #32
 8019bdc:	9b04      	ldr	r3, [sp, #16]
 8019bde:	4418      	add	r0, r3
 8019be0:	f010 001f 	ands.w	r0, r0, #31
 8019be4:	f000 8086 	beq.w	8019cf4 <_dtoa_r+0x91c>
 8019be8:	f1c0 0320 	rsb	r3, r0, #32
 8019bec:	2b04      	cmp	r3, #4
 8019bee:	dd7f      	ble.n	8019cf0 <_dtoa_r+0x918>
 8019bf0:	f1c0 001c 	rsb	r0, r0, #28
 8019bf4:	9b04      	ldr	r3, [sp, #16]
 8019bf6:	4403      	add	r3, r0
 8019bf8:	4480      	add	r8, r0
 8019bfa:	4405      	add	r5, r0
 8019bfc:	9304      	str	r3, [sp, #16]
 8019bfe:	f1b8 0f00 	cmp.w	r8, #0
 8019c02:	dd05      	ble.n	8019c10 <_dtoa_r+0x838>
 8019c04:	4659      	mov	r1, fp
 8019c06:	4642      	mov	r2, r8
 8019c08:	4620      	mov	r0, r4
 8019c0a:	f000 fff3 	bl	801abf4 <__lshift>
 8019c0e:	4683      	mov	fp, r0
 8019c10:	9b04      	ldr	r3, [sp, #16]
 8019c12:	2b00      	cmp	r3, #0
 8019c14:	dd05      	ble.n	8019c22 <_dtoa_r+0x84a>
 8019c16:	4631      	mov	r1, r6
 8019c18:	461a      	mov	r2, r3
 8019c1a:	4620      	mov	r0, r4
 8019c1c:	f000 ffea 	bl	801abf4 <__lshift>
 8019c20:	4606      	mov	r6, r0
 8019c22:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019c24:	2b00      	cmp	r3, #0
 8019c26:	d069      	beq.n	8019cfc <_dtoa_r+0x924>
 8019c28:	4631      	mov	r1, r6
 8019c2a:	4658      	mov	r0, fp
 8019c2c:	f001 f84e 	bl	801accc <__mcmp>
 8019c30:	2800      	cmp	r0, #0
 8019c32:	da63      	bge.n	8019cfc <_dtoa_r+0x924>
 8019c34:	2300      	movs	r3, #0
 8019c36:	4659      	mov	r1, fp
 8019c38:	220a      	movs	r2, #10
 8019c3a:	4620      	mov	r0, r4
 8019c3c:	f000 fde0 	bl	801a800 <__multadd>
 8019c40:	9b08      	ldr	r3, [sp, #32]
 8019c42:	f10a 3aff 	add.w	sl, sl, #4294967295
 8019c46:	4683      	mov	fp, r0
 8019c48:	2b00      	cmp	r3, #0
 8019c4a:	f000 818f 	beq.w	8019f6c <_dtoa_r+0xb94>
 8019c4e:	4639      	mov	r1, r7
 8019c50:	2300      	movs	r3, #0
 8019c52:	220a      	movs	r2, #10
 8019c54:	4620      	mov	r0, r4
 8019c56:	f000 fdd3 	bl	801a800 <__multadd>
 8019c5a:	f1b9 0f00 	cmp.w	r9, #0
 8019c5e:	4607      	mov	r7, r0
 8019c60:	f300 808e 	bgt.w	8019d80 <_dtoa_r+0x9a8>
 8019c64:	9b05      	ldr	r3, [sp, #20]
 8019c66:	2b02      	cmp	r3, #2
 8019c68:	dc50      	bgt.n	8019d0c <_dtoa_r+0x934>
 8019c6a:	e089      	b.n	8019d80 <_dtoa_r+0x9a8>
 8019c6c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8019c6e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8019c72:	e75d      	b.n	8019b30 <_dtoa_r+0x758>
 8019c74:	9b01      	ldr	r3, [sp, #4]
 8019c76:	1e5e      	subs	r6, r3, #1
 8019c78:	9b06      	ldr	r3, [sp, #24]
 8019c7a:	42b3      	cmp	r3, r6
 8019c7c:	bfbf      	itttt	lt
 8019c7e:	9b06      	ldrlt	r3, [sp, #24]
 8019c80:	9606      	strlt	r6, [sp, #24]
 8019c82:	1af2      	sublt	r2, r6, r3
 8019c84:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8019c86:	bfb6      	itet	lt
 8019c88:	189b      	addlt	r3, r3, r2
 8019c8a:	1b9e      	subge	r6, r3, r6
 8019c8c:	930d      	strlt	r3, [sp, #52]	; 0x34
 8019c8e:	9b01      	ldr	r3, [sp, #4]
 8019c90:	bfb8      	it	lt
 8019c92:	2600      	movlt	r6, #0
 8019c94:	2b00      	cmp	r3, #0
 8019c96:	bfb5      	itete	lt
 8019c98:	eba8 0503 	sublt.w	r5, r8, r3
 8019c9c:	9b01      	ldrge	r3, [sp, #4]
 8019c9e:	2300      	movlt	r3, #0
 8019ca0:	4645      	movge	r5, r8
 8019ca2:	e747      	b.n	8019b34 <_dtoa_r+0x75c>
 8019ca4:	9e06      	ldr	r6, [sp, #24]
 8019ca6:	9f08      	ldr	r7, [sp, #32]
 8019ca8:	4645      	mov	r5, r8
 8019caa:	e74c      	b.n	8019b46 <_dtoa_r+0x76e>
 8019cac:	9a06      	ldr	r2, [sp, #24]
 8019cae:	e775      	b.n	8019b9c <_dtoa_r+0x7c4>
 8019cb0:	9b05      	ldr	r3, [sp, #20]
 8019cb2:	2b01      	cmp	r3, #1
 8019cb4:	dc18      	bgt.n	8019ce8 <_dtoa_r+0x910>
 8019cb6:	9b02      	ldr	r3, [sp, #8]
 8019cb8:	b9b3      	cbnz	r3, 8019ce8 <_dtoa_r+0x910>
 8019cba:	9b03      	ldr	r3, [sp, #12]
 8019cbc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8019cc0:	b9a3      	cbnz	r3, 8019cec <_dtoa_r+0x914>
 8019cc2:	9b03      	ldr	r3, [sp, #12]
 8019cc4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8019cc8:	0d1b      	lsrs	r3, r3, #20
 8019cca:	051b      	lsls	r3, r3, #20
 8019ccc:	b12b      	cbz	r3, 8019cda <_dtoa_r+0x902>
 8019cce:	9b04      	ldr	r3, [sp, #16]
 8019cd0:	3301      	adds	r3, #1
 8019cd2:	9304      	str	r3, [sp, #16]
 8019cd4:	f108 0801 	add.w	r8, r8, #1
 8019cd8:	2301      	movs	r3, #1
 8019cda:	9306      	str	r3, [sp, #24]
 8019cdc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8019cde:	2b00      	cmp	r3, #0
 8019ce0:	f47f af74 	bne.w	8019bcc <_dtoa_r+0x7f4>
 8019ce4:	2001      	movs	r0, #1
 8019ce6:	e779      	b.n	8019bdc <_dtoa_r+0x804>
 8019ce8:	2300      	movs	r3, #0
 8019cea:	e7f6      	b.n	8019cda <_dtoa_r+0x902>
 8019cec:	9b02      	ldr	r3, [sp, #8]
 8019cee:	e7f4      	b.n	8019cda <_dtoa_r+0x902>
 8019cf0:	d085      	beq.n	8019bfe <_dtoa_r+0x826>
 8019cf2:	4618      	mov	r0, r3
 8019cf4:	301c      	adds	r0, #28
 8019cf6:	e77d      	b.n	8019bf4 <_dtoa_r+0x81c>
 8019cf8:	40240000 	.word	0x40240000
 8019cfc:	9b01      	ldr	r3, [sp, #4]
 8019cfe:	2b00      	cmp	r3, #0
 8019d00:	dc38      	bgt.n	8019d74 <_dtoa_r+0x99c>
 8019d02:	9b05      	ldr	r3, [sp, #20]
 8019d04:	2b02      	cmp	r3, #2
 8019d06:	dd35      	ble.n	8019d74 <_dtoa_r+0x99c>
 8019d08:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8019d0c:	f1b9 0f00 	cmp.w	r9, #0
 8019d10:	d10d      	bne.n	8019d2e <_dtoa_r+0x956>
 8019d12:	4631      	mov	r1, r6
 8019d14:	464b      	mov	r3, r9
 8019d16:	2205      	movs	r2, #5
 8019d18:	4620      	mov	r0, r4
 8019d1a:	f000 fd71 	bl	801a800 <__multadd>
 8019d1e:	4601      	mov	r1, r0
 8019d20:	4606      	mov	r6, r0
 8019d22:	4658      	mov	r0, fp
 8019d24:	f000 ffd2 	bl	801accc <__mcmp>
 8019d28:	2800      	cmp	r0, #0
 8019d2a:	f73f adbd 	bgt.w	80198a8 <_dtoa_r+0x4d0>
 8019d2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019d30:	9d00      	ldr	r5, [sp, #0]
 8019d32:	ea6f 0a03 	mvn.w	sl, r3
 8019d36:	f04f 0800 	mov.w	r8, #0
 8019d3a:	4631      	mov	r1, r6
 8019d3c:	4620      	mov	r0, r4
 8019d3e:	f000 fd3d 	bl	801a7bc <_Bfree>
 8019d42:	2f00      	cmp	r7, #0
 8019d44:	f43f aeb4 	beq.w	8019ab0 <_dtoa_r+0x6d8>
 8019d48:	f1b8 0f00 	cmp.w	r8, #0
 8019d4c:	d005      	beq.n	8019d5a <_dtoa_r+0x982>
 8019d4e:	45b8      	cmp	r8, r7
 8019d50:	d003      	beq.n	8019d5a <_dtoa_r+0x982>
 8019d52:	4641      	mov	r1, r8
 8019d54:	4620      	mov	r0, r4
 8019d56:	f000 fd31 	bl	801a7bc <_Bfree>
 8019d5a:	4639      	mov	r1, r7
 8019d5c:	4620      	mov	r0, r4
 8019d5e:	f000 fd2d 	bl	801a7bc <_Bfree>
 8019d62:	e6a5      	b.n	8019ab0 <_dtoa_r+0x6d8>
 8019d64:	2600      	movs	r6, #0
 8019d66:	4637      	mov	r7, r6
 8019d68:	e7e1      	b.n	8019d2e <_dtoa_r+0x956>
 8019d6a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8019d6c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8019d70:	4637      	mov	r7, r6
 8019d72:	e599      	b.n	80198a8 <_dtoa_r+0x4d0>
 8019d74:	9b08      	ldr	r3, [sp, #32]
 8019d76:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8019d7a:	2b00      	cmp	r3, #0
 8019d7c:	f000 80fd 	beq.w	8019f7a <_dtoa_r+0xba2>
 8019d80:	2d00      	cmp	r5, #0
 8019d82:	dd05      	ble.n	8019d90 <_dtoa_r+0x9b8>
 8019d84:	4639      	mov	r1, r7
 8019d86:	462a      	mov	r2, r5
 8019d88:	4620      	mov	r0, r4
 8019d8a:	f000 ff33 	bl	801abf4 <__lshift>
 8019d8e:	4607      	mov	r7, r0
 8019d90:	9b06      	ldr	r3, [sp, #24]
 8019d92:	2b00      	cmp	r3, #0
 8019d94:	d05c      	beq.n	8019e50 <_dtoa_r+0xa78>
 8019d96:	6879      	ldr	r1, [r7, #4]
 8019d98:	4620      	mov	r0, r4
 8019d9a:	f000 fccf 	bl	801a73c <_Balloc>
 8019d9e:	4605      	mov	r5, r0
 8019da0:	b928      	cbnz	r0, 8019dae <_dtoa_r+0x9d6>
 8019da2:	4b80      	ldr	r3, [pc, #512]	; (8019fa4 <_dtoa_r+0xbcc>)
 8019da4:	4602      	mov	r2, r0
 8019da6:	f240 21ea 	movw	r1, #746	; 0x2ea
 8019daa:	f7ff bb2e 	b.w	801940a <_dtoa_r+0x32>
 8019dae:	693a      	ldr	r2, [r7, #16]
 8019db0:	3202      	adds	r2, #2
 8019db2:	0092      	lsls	r2, r2, #2
 8019db4:	f107 010c 	add.w	r1, r7, #12
 8019db8:	300c      	adds	r0, #12
 8019dba:	f7fd fce3 	bl	8017784 <memcpy>
 8019dbe:	2201      	movs	r2, #1
 8019dc0:	4629      	mov	r1, r5
 8019dc2:	4620      	mov	r0, r4
 8019dc4:	f000 ff16 	bl	801abf4 <__lshift>
 8019dc8:	9b00      	ldr	r3, [sp, #0]
 8019dca:	3301      	adds	r3, #1
 8019dcc:	9301      	str	r3, [sp, #4]
 8019dce:	9b00      	ldr	r3, [sp, #0]
 8019dd0:	444b      	add	r3, r9
 8019dd2:	9307      	str	r3, [sp, #28]
 8019dd4:	9b02      	ldr	r3, [sp, #8]
 8019dd6:	f003 0301 	and.w	r3, r3, #1
 8019dda:	46b8      	mov	r8, r7
 8019ddc:	9306      	str	r3, [sp, #24]
 8019dde:	4607      	mov	r7, r0
 8019de0:	9b01      	ldr	r3, [sp, #4]
 8019de2:	4631      	mov	r1, r6
 8019de4:	3b01      	subs	r3, #1
 8019de6:	4658      	mov	r0, fp
 8019de8:	9302      	str	r3, [sp, #8]
 8019dea:	f7ff fa67 	bl	80192bc <quorem>
 8019dee:	4603      	mov	r3, r0
 8019df0:	3330      	adds	r3, #48	; 0x30
 8019df2:	9004      	str	r0, [sp, #16]
 8019df4:	4641      	mov	r1, r8
 8019df6:	4658      	mov	r0, fp
 8019df8:	9308      	str	r3, [sp, #32]
 8019dfa:	f000 ff67 	bl	801accc <__mcmp>
 8019dfe:	463a      	mov	r2, r7
 8019e00:	4681      	mov	r9, r0
 8019e02:	4631      	mov	r1, r6
 8019e04:	4620      	mov	r0, r4
 8019e06:	f000 ff7d 	bl	801ad04 <__mdiff>
 8019e0a:	68c2      	ldr	r2, [r0, #12]
 8019e0c:	9b08      	ldr	r3, [sp, #32]
 8019e0e:	4605      	mov	r5, r0
 8019e10:	bb02      	cbnz	r2, 8019e54 <_dtoa_r+0xa7c>
 8019e12:	4601      	mov	r1, r0
 8019e14:	4658      	mov	r0, fp
 8019e16:	f000 ff59 	bl	801accc <__mcmp>
 8019e1a:	9b08      	ldr	r3, [sp, #32]
 8019e1c:	4602      	mov	r2, r0
 8019e1e:	4629      	mov	r1, r5
 8019e20:	4620      	mov	r0, r4
 8019e22:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8019e26:	f000 fcc9 	bl	801a7bc <_Bfree>
 8019e2a:	9b05      	ldr	r3, [sp, #20]
 8019e2c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8019e2e:	9d01      	ldr	r5, [sp, #4]
 8019e30:	ea43 0102 	orr.w	r1, r3, r2
 8019e34:	9b06      	ldr	r3, [sp, #24]
 8019e36:	430b      	orrs	r3, r1
 8019e38:	9b08      	ldr	r3, [sp, #32]
 8019e3a:	d10d      	bne.n	8019e58 <_dtoa_r+0xa80>
 8019e3c:	2b39      	cmp	r3, #57	; 0x39
 8019e3e:	d029      	beq.n	8019e94 <_dtoa_r+0xabc>
 8019e40:	f1b9 0f00 	cmp.w	r9, #0
 8019e44:	dd01      	ble.n	8019e4a <_dtoa_r+0xa72>
 8019e46:	9b04      	ldr	r3, [sp, #16]
 8019e48:	3331      	adds	r3, #49	; 0x31
 8019e4a:	9a02      	ldr	r2, [sp, #8]
 8019e4c:	7013      	strb	r3, [r2, #0]
 8019e4e:	e774      	b.n	8019d3a <_dtoa_r+0x962>
 8019e50:	4638      	mov	r0, r7
 8019e52:	e7b9      	b.n	8019dc8 <_dtoa_r+0x9f0>
 8019e54:	2201      	movs	r2, #1
 8019e56:	e7e2      	b.n	8019e1e <_dtoa_r+0xa46>
 8019e58:	f1b9 0f00 	cmp.w	r9, #0
 8019e5c:	db06      	blt.n	8019e6c <_dtoa_r+0xa94>
 8019e5e:	9905      	ldr	r1, [sp, #20]
 8019e60:	ea41 0909 	orr.w	r9, r1, r9
 8019e64:	9906      	ldr	r1, [sp, #24]
 8019e66:	ea59 0101 	orrs.w	r1, r9, r1
 8019e6a:	d120      	bne.n	8019eae <_dtoa_r+0xad6>
 8019e6c:	2a00      	cmp	r2, #0
 8019e6e:	ddec      	ble.n	8019e4a <_dtoa_r+0xa72>
 8019e70:	4659      	mov	r1, fp
 8019e72:	2201      	movs	r2, #1
 8019e74:	4620      	mov	r0, r4
 8019e76:	9301      	str	r3, [sp, #4]
 8019e78:	f000 febc 	bl	801abf4 <__lshift>
 8019e7c:	4631      	mov	r1, r6
 8019e7e:	4683      	mov	fp, r0
 8019e80:	f000 ff24 	bl	801accc <__mcmp>
 8019e84:	2800      	cmp	r0, #0
 8019e86:	9b01      	ldr	r3, [sp, #4]
 8019e88:	dc02      	bgt.n	8019e90 <_dtoa_r+0xab8>
 8019e8a:	d1de      	bne.n	8019e4a <_dtoa_r+0xa72>
 8019e8c:	07da      	lsls	r2, r3, #31
 8019e8e:	d5dc      	bpl.n	8019e4a <_dtoa_r+0xa72>
 8019e90:	2b39      	cmp	r3, #57	; 0x39
 8019e92:	d1d8      	bne.n	8019e46 <_dtoa_r+0xa6e>
 8019e94:	9a02      	ldr	r2, [sp, #8]
 8019e96:	2339      	movs	r3, #57	; 0x39
 8019e98:	7013      	strb	r3, [r2, #0]
 8019e9a:	462b      	mov	r3, r5
 8019e9c:	461d      	mov	r5, r3
 8019e9e:	3b01      	subs	r3, #1
 8019ea0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8019ea4:	2a39      	cmp	r2, #57	; 0x39
 8019ea6:	d050      	beq.n	8019f4a <_dtoa_r+0xb72>
 8019ea8:	3201      	adds	r2, #1
 8019eaa:	701a      	strb	r2, [r3, #0]
 8019eac:	e745      	b.n	8019d3a <_dtoa_r+0x962>
 8019eae:	2a00      	cmp	r2, #0
 8019eb0:	dd03      	ble.n	8019eba <_dtoa_r+0xae2>
 8019eb2:	2b39      	cmp	r3, #57	; 0x39
 8019eb4:	d0ee      	beq.n	8019e94 <_dtoa_r+0xabc>
 8019eb6:	3301      	adds	r3, #1
 8019eb8:	e7c7      	b.n	8019e4a <_dtoa_r+0xa72>
 8019eba:	9a01      	ldr	r2, [sp, #4]
 8019ebc:	9907      	ldr	r1, [sp, #28]
 8019ebe:	f802 3c01 	strb.w	r3, [r2, #-1]
 8019ec2:	428a      	cmp	r2, r1
 8019ec4:	d02a      	beq.n	8019f1c <_dtoa_r+0xb44>
 8019ec6:	4659      	mov	r1, fp
 8019ec8:	2300      	movs	r3, #0
 8019eca:	220a      	movs	r2, #10
 8019ecc:	4620      	mov	r0, r4
 8019ece:	f000 fc97 	bl	801a800 <__multadd>
 8019ed2:	45b8      	cmp	r8, r7
 8019ed4:	4683      	mov	fp, r0
 8019ed6:	f04f 0300 	mov.w	r3, #0
 8019eda:	f04f 020a 	mov.w	r2, #10
 8019ede:	4641      	mov	r1, r8
 8019ee0:	4620      	mov	r0, r4
 8019ee2:	d107      	bne.n	8019ef4 <_dtoa_r+0xb1c>
 8019ee4:	f000 fc8c 	bl	801a800 <__multadd>
 8019ee8:	4680      	mov	r8, r0
 8019eea:	4607      	mov	r7, r0
 8019eec:	9b01      	ldr	r3, [sp, #4]
 8019eee:	3301      	adds	r3, #1
 8019ef0:	9301      	str	r3, [sp, #4]
 8019ef2:	e775      	b.n	8019de0 <_dtoa_r+0xa08>
 8019ef4:	f000 fc84 	bl	801a800 <__multadd>
 8019ef8:	4639      	mov	r1, r7
 8019efa:	4680      	mov	r8, r0
 8019efc:	2300      	movs	r3, #0
 8019efe:	220a      	movs	r2, #10
 8019f00:	4620      	mov	r0, r4
 8019f02:	f000 fc7d 	bl	801a800 <__multadd>
 8019f06:	4607      	mov	r7, r0
 8019f08:	e7f0      	b.n	8019eec <_dtoa_r+0xb14>
 8019f0a:	f1b9 0f00 	cmp.w	r9, #0
 8019f0e:	9a00      	ldr	r2, [sp, #0]
 8019f10:	bfcc      	ite	gt
 8019f12:	464d      	movgt	r5, r9
 8019f14:	2501      	movle	r5, #1
 8019f16:	4415      	add	r5, r2
 8019f18:	f04f 0800 	mov.w	r8, #0
 8019f1c:	4659      	mov	r1, fp
 8019f1e:	2201      	movs	r2, #1
 8019f20:	4620      	mov	r0, r4
 8019f22:	9301      	str	r3, [sp, #4]
 8019f24:	f000 fe66 	bl	801abf4 <__lshift>
 8019f28:	4631      	mov	r1, r6
 8019f2a:	4683      	mov	fp, r0
 8019f2c:	f000 fece 	bl	801accc <__mcmp>
 8019f30:	2800      	cmp	r0, #0
 8019f32:	dcb2      	bgt.n	8019e9a <_dtoa_r+0xac2>
 8019f34:	d102      	bne.n	8019f3c <_dtoa_r+0xb64>
 8019f36:	9b01      	ldr	r3, [sp, #4]
 8019f38:	07db      	lsls	r3, r3, #31
 8019f3a:	d4ae      	bmi.n	8019e9a <_dtoa_r+0xac2>
 8019f3c:	462b      	mov	r3, r5
 8019f3e:	461d      	mov	r5, r3
 8019f40:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8019f44:	2a30      	cmp	r2, #48	; 0x30
 8019f46:	d0fa      	beq.n	8019f3e <_dtoa_r+0xb66>
 8019f48:	e6f7      	b.n	8019d3a <_dtoa_r+0x962>
 8019f4a:	9a00      	ldr	r2, [sp, #0]
 8019f4c:	429a      	cmp	r2, r3
 8019f4e:	d1a5      	bne.n	8019e9c <_dtoa_r+0xac4>
 8019f50:	f10a 0a01 	add.w	sl, sl, #1
 8019f54:	2331      	movs	r3, #49	; 0x31
 8019f56:	e779      	b.n	8019e4c <_dtoa_r+0xa74>
 8019f58:	4b13      	ldr	r3, [pc, #76]	; (8019fa8 <_dtoa_r+0xbd0>)
 8019f5a:	f7ff baaf 	b.w	80194bc <_dtoa_r+0xe4>
 8019f5e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8019f60:	2b00      	cmp	r3, #0
 8019f62:	f47f aa86 	bne.w	8019472 <_dtoa_r+0x9a>
 8019f66:	4b11      	ldr	r3, [pc, #68]	; (8019fac <_dtoa_r+0xbd4>)
 8019f68:	f7ff baa8 	b.w	80194bc <_dtoa_r+0xe4>
 8019f6c:	f1b9 0f00 	cmp.w	r9, #0
 8019f70:	dc03      	bgt.n	8019f7a <_dtoa_r+0xba2>
 8019f72:	9b05      	ldr	r3, [sp, #20]
 8019f74:	2b02      	cmp	r3, #2
 8019f76:	f73f aec9 	bgt.w	8019d0c <_dtoa_r+0x934>
 8019f7a:	9d00      	ldr	r5, [sp, #0]
 8019f7c:	4631      	mov	r1, r6
 8019f7e:	4658      	mov	r0, fp
 8019f80:	f7ff f99c 	bl	80192bc <quorem>
 8019f84:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8019f88:	f805 3b01 	strb.w	r3, [r5], #1
 8019f8c:	9a00      	ldr	r2, [sp, #0]
 8019f8e:	1aaa      	subs	r2, r5, r2
 8019f90:	4591      	cmp	r9, r2
 8019f92:	ddba      	ble.n	8019f0a <_dtoa_r+0xb32>
 8019f94:	4659      	mov	r1, fp
 8019f96:	2300      	movs	r3, #0
 8019f98:	220a      	movs	r2, #10
 8019f9a:	4620      	mov	r0, r4
 8019f9c:	f000 fc30 	bl	801a800 <__multadd>
 8019fa0:	4683      	mov	fp, r0
 8019fa2:	e7eb      	b.n	8019f7c <_dtoa_r+0xba4>
 8019fa4:	0801c6a3 	.word	0x0801c6a3
 8019fa8:	0801c5ac 	.word	0x0801c5ac
 8019fac:	0801c620 	.word	0x0801c620

08019fb0 <_fstat_r>:
 8019fb0:	b538      	push	{r3, r4, r5, lr}
 8019fb2:	4d07      	ldr	r5, [pc, #28]	; (8019fd0 <_fstat_r+0x20>)
 8019fb4:	2300      	movs	r3, #0
 8019fb6:	4604      	mov	r4, r0
 8019fb8:	4608      	mov	r0, r1
 8019fba:	4611      	mov	r1, r2
 8019fbc:	602b      	str	r3, [r5, #0]
 8019fbe:	f7fd f96d 	bl	801729c <_fstat>
 8019fc2:	1c43      	adds	r3, r0, #1
 8019fc4:	d102      	bne.n	8019fcc <_fstat_r+0x1c>
 8019fc6:	682b      	ldr	r3, [r5, #0]
 8019fc8:	b103      	cbz	r3, 8019fcc <_fstat_r+0x1c>
 8019fca:	6023      	str	r3, [r4, #0]
 8019fcc:	bd38      	pop	{r3, r4, r5, pc}
 8019fce:	bf00      	nop
 8019fd0:	2001e3f8 	.word	0x2001e3f8

08019fd4 <rshift>:
 8019fd4:	6903      	ldr	r3, [r0, #16]
 8019fd6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8019fda:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019fde:	ea4f 1261 	mov.w	r2, r1, asr #5
 8019fe2:	f100 0414 	add.w	r4, r0, #20
 8019fe6:	dd45      	ble.n	801a074 <rshift+0xa0>
 8019fe8:	f011 011f 	ands.w	r1, r1, #31
 8019fec:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8019ff0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8019ff4:	d10c      	bne.n	801a010 <rshift+0x3c>
 8019ff6:	f100 0710 	add.w	r7, r0, #16
 8019ffa:	4629      	mov	r1, r5
 8019ffc:	42b1      	cmp	r1, r6
 8019ffe:	d334      	bcc.n	801a06a <rshift+0x96>
 801a000:	1a9b      	subs	r3, r3, r2
 801a002:	009b      	lsls	r3, r3, #2
 801a004:	1eea      	subs	r2, r5, #3
 801a006:	4296      	cmp	r6, r2
 801a008:	bf38      	it	cc
 801a00a:	2300      	movcc	r3, #0
 801a00c:	4423      	add	r3, r4
 801a00e:	e015      	b.n	801a03c <rshift+0x68>
 801a010:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801a014:	f1c1 0820 	rsb	r8, r1, #32
 801a018:	40cf      	lsrs	r7, r1
 801a01a:	f105 0e04 	add.w	lr, r5, #4
 801a01e:	46a1      	mov	r9, r4
 801a020:	4576      	cmp	r6, lr
 801a022:	46f4      	mov	ip, lr
 801a024:	d815      	bhi.n	801a052 <rshift+0x7e>
 801a026:	1a9b      	subs	r3, r3, r2
 801a028:	009a      	lsls	r2, r3, #2
 801a02a:	3a04      	subs	r2, #4
 801a02c:	3501      	adds	r5, #1
 801a02e:	42ae      	cmp	r6, r5
 801a030:	bf38      	it	cc
 801a032:	2200      	movcc	r2, #0
 801a034:	18a3      	adds	r3, r4, r2
 801a036:	50a7      	str	r7, [r4, r2]
 801a038:	b107      	cbz	r7, 801a03c <rshift+0x68>
 801a03a:	3304      	adds	r3, #4
 801a03c:	1b1a      	subs	r2, r3, r4
 801a03e:	42a3      	cmp	r3, r4
 801a040:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801a044:	bf08      	it	eq
 801a046:	2300      	moveq	r3, #0
 801a048:	6102      	str	r2, [r0, #16]
 801a04a:	bf08      	it	eq
 801a04c:	6143      	streq	r3, [r0, #20]
 801a04e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a052:	f8dc c000 	ldr.w	ip, [ip]
 801a056:	fa0c fc08 	lsl.w	ip, ip, r8
 801a05a:	ea4c 0707 	orr.w	r7, ip, r7
 801a05e:	f849 7b04 	str.w	r7, [r9], #4
 801a062:	f85e 7b04 	ldr.w	r7, [lr], #4
 801a066:	40cf      	lsrs	r7, r1
 801a068:	e7da      	b.n	801a020 <rshift+0x4c>
 801a06a:	f851 cb04 	ldr.w	ip, [r1], #4
 801a06e:	f847 cf04 	str.w	ip, [r7, #4]!
 801a072:	e7c3      	b.n	8019ffc <rshift+0x28>
 801a074:	4623      	mov	r3, r4
 801a076:	e7e1      	b.n	801a03c <rshift+0x68>

0801a078 <__hexdig_fun>:
 801a078:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 801a07c:	2b09      	cmp	r3, #9
 801a07e:	d802      	bhi.n	801a086 <__hexdig_fun+0xe>
 801a080:	3820      	subs	r0, #32
 801a082:	b2c0      	uxtb	r0, r0
 801a084:	4770      	bx	lr
 801a086:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801a08a:	2b05      	cmp	r3, #5
 801a08c:	d801      	bhi.n	801a092 <__hexdig_fun+0x1a>
 801a08e:	3847      	subs	r0, #71	; 0x47
 801a090:	e7f7      	b.n	801a082 <__hexdig_fun+0xa>
 801a092:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801a096:	2b05      	cmp	r3, #5
 801a098:	d801      	bhi.n	801a09e <__hexdig_fun+0x26>
 801a09a:	3827      	subs	r0, #39	; 0x27
 801a09c:	e7f1      	b.n	801a082 <__hexdig_fun+0xa>
 801a09e:	2000      	movs	r0, #0
 801a0a0:	4770      	bx	lr
	...

0801a0a4 <__gethex>:
 801a0a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a0a8:	ed2d 8b02 	vpush	{d8}
 801a0ac:	b089      	sub	sp, #36	; 0x24
 801a0ae:	ee08 0a10 	vmov	s16, r0
 801a0b2:	9304      	str	r3, [sp, #16]
 801a0b4:	4bbc      	ldr	r3, [pc, #752]	; (801a3a8 <__gethex+0x304>)
 801a0b6:	681b      	ldr	r3, [r3, #0]
 801a0b8:	9301      	str	r3, [sp, #4]
 801a0ba:	4618      	mov	r0, r3
 801a0bc:	468b      	mov	fp, r1
 801a0be:	4690      	mov	r8, r2
 801a0c0:	f7e6 f8a8 	bl	8000214 <strlen>
 801a0c4:	9b01      	ldr	r3, [sp, #4]
 801a0c6:	f8db 2000 	ldr.w	r2, [fp]
 801a0ca:	4403      	add	r3, r0
 801a0cc:	4682      	mov	sl, r0
 801a0ce:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 801a0d2:	9305      	str	r3, [sp, #20]
 801a0d4:	1c93      	adds	r3, r2, #2
 801a0d6:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 801a0da:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 801a0de:	32fe      	adds	r2, #254	; 0xfe
 801a0e0:	18d1      	adds	r1, r2, r3
 801a0e2:	461f      	mov	r7, r3
 801a0e4:	f813 0b01 	ldrb.w	r0, [r3], #1
 801a0e8:	9100      	str	r1, [sp, #0]
 801a0ea:	2830      	cmp	r0, #48	; 0x30
 801a0ec:	d0f8      	beq.n	801a0e0 <__gethex+0x3c>
 801a0ee:	f7ff ffc3 	bl	801a078 <__hexdig_fun>
 801a0f2:	4604      	mov	r4, r0
 801a0f4:	2800      	cmp	r0, #0
 801a0f6:	d13a      	bne.n	801a16e <__gethex+0xca>
 801a0f8:	9901      	ldr	r1, [sp, #4]
 801a0fa:	4652      	mov	r2, sl
 801a0fc:	4638      	mov	r0, r7
 801a0fe:	f7fe f915 	bl	801832c <strncmp>
 801a102:	4605      	mov	r5, r0
 801a104:	2800      	cmp	r0, #0
 801a106:	d168      	bne.n	801a1da <__gethex+0x136>
 801a108:	f817 000a 	ldrb.w	r0, [r7, sl]
 801a10c:	eb07 060a 	add.w	r6, r7, sl
 801a110:	f7ff ffb2 	bl	801a078 <__hexdig_fun>
 801a114:	2800      	cmp	r0, #0
 801a116:	d062      	beq.n	801a1de <__gethex+0x13a>
 801a118:	4633      	mov	r3, r6
 801a11a:	7818      	ldrb	r0, [r3, #0]
 801a11c:	2830      	cmp	r0, #48	; 0x30
 801a11e:	461f      	mov	r7, r3
 801a120:	f103 0301 	add.w	r3, r3, #1
 801a124:	d0f9      	beq.n	801a11a <__gethex+0x76>
 801a126:	f7ff ffa7 	bl	801a078 <__hexdig_fun>
 801a12a:	2301      	movs	r3, #1
 801a12c:	fab0 f480 	clz	r4, r0
 801a130:	0964      	lsrs	r4, r4, #5
 801a132:	4635      	mov	r5, r6
 801a134:	9300      	str	r3, [sp, #0]
 801a136:	463a      	mov	r2, r7
 801a138:	4616      	mov	r6, r2
 801a13a:	3201      	adds	r2, #1
 801a13c:	7830      	ldrb	r0, [r6, #0]
 801a13e:	f7ff ff9b 	bl	801a078 <__hexdig_fun>
 801a142:	2800      	cmp	r0, #0
 801a144:	d1f8      	bne.n	801a138 <__gethex+0x94>
 801a146:	9901      	ldr	r1, [sp, #4]
 801a148:	4652      	mov	r2, sl
 801a14a:	4630      	mov	r0, r6
 801a14c:	f7fe f8ee 	bl	801832c <strncmp>
 801a150:	b980      	cbnz	r0, 801a174 <__gethex+0xd0>
 801a152:	b94d      	cbnz	r5, 801a168 <__gethex+0xc4>
 801a154:	eb06 050a 	add.w	r5, r6, sl
 801a158:	462a      	mov	r2, r5
 801a15a:	4616      	mov	r6, r2
 801a15c:	3201      	adds	r2, #1
 801a15e:	7830      	ldrb	r0, [r6, #0]
 801a160:	f7ff ff8a 	bl	801a078 <__hexdig_fun>
 801a164:	2800      	cmp	r0, #0
 801a166:	d1f8      	bne.n	801a15a <__gethex+0xb6>
 801a168:	1bad      	subs	r5, r5, r6
 801a16a:	00ad      	lsls	r5, r5, #2
 801a16c:	e004      	b.n	801a178 <__gethex+0xd4>
 801a16e:	2400      	movs	r4, #0
 801a170:	4625      	mov	r5, r4
 801a172:	e7e0      	b.n	801a136 <__gethex+0x92>
 801a174:	2d00      	cmp	r5, #0
 801a176:	d1f7      	bne.n	801a168 <__gethex+0xc4>
 801a178:	7833      	ldrb	r3, [r6, #0]
 801a17a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801a17e:	2b50      	cmp	r3, #80	; 0x50
 801a180:	d13b      	bne.n	801a1fa <__gethex+0x156>
 801a182:	7873      	ldrb	r3, [r6, #1]
 801a184:	2b2b      	cmp	r3, #43	; 0x2b
 801a186:	d02c      	beq.n	801a1e2 <__gethex+0x13e>
 801a188:	2b2d      	cmp	r3, #45	; 0x2d
 801a18a:	d02e      	beq.n	801a1ea <__gethex+0x146>
 801a18c:	1c71      	adds	r1, r6, #1
 801a18e:	f04f 0900 	mov.w	r9, #0
 801a192:	7808      	ldrb	r0, [r1, #0]
 801a194:	f7ff ff70 	bl	801a078 <__hexdig_fun>
 801a198:	1e43      	subs	r3, r0, #1
 801a19a:	b2db      	uxtb	r3, r3
 801a19c:	2b18      	cmp	r3, #24
 801a19e:	d82c      	bhi.n	801a1fa <__gethex+0x156>
 801a1a0:	f1a0 0210 	sub.w	r2, r0, #16
 801a1a4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801a1a8:	f7ff ff66 	bl	801a078 <__hexdig_fun>
 801a1ac:	1e43      	subs	r3, r0, #1
 801a1ae:	b2db      	uxtb	r3, r3
 801a1b0:	2b18      	cmp	r3, #24
 801a1b2:	d91d      	bls.n	801a1f0 <__gethex+0x14c>
 801a1b4:	f1b9 0f00 	cmp.w	r9, #0
 801a1b8:	d000      	beq.n	801a1bc <__gethex+0x118>
 801a1ba:	4252      	negs	r2, r2
 801a1bc:	4415      	add	r5, r2
 801a1be:	f8cb 1000 	str.w	r1, [fp]
 801a1c2:	b1e4      	cbz	r4, 801a1fe <__gethex+0x15a>
 801a1c4:	9b00      	ldr	r3, [sp, #0]
 801a1c6:	2b00      	cmp	r3, #0
 801a1c8:	bf14      	ite	ne
 801a1ca:	2700      	movne	r7, #0
 801a1cc:	2706      	moveq	r7, #6
 801a1ce:	4638      	mov	r0, r7
 801a1d0:	b009      	add	sp, #36	; 0x24
 801a1d2:	ecbd 8b02 	vpop	{d8}
 801a1d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a1da:	463e      	mov	r6, r7
 801a1dc:	4625      	mov	r5, r4
 801a1de:	2401      	movs	r4, #1
 801a1e0:	e7ca      	b.n	801a178 <__gethex+0xd4>
 801a1e2:	f04f 0900 	mov.w	r9, #0
 801a1e6:	1cb1      	adds	r1, r6, #2
 801a1e8:	e7d3      	b.n	801a192 <__gethex+0xee>
 801a1ea:	f04f 0901 	mov.w	r9, #1
 801a1ee:	e7fa      	b.n	801a1e6 <__gethex+0x142>
 801a1f0:	230a      	movs	r3, #10
 801a1f2:	fb03 0202 	mla	r2, r3, r2, r0
 801a1f6:	3a10      	subs	r2, #16
 801a1f8:	e7d4      	b.n	801a1a4 <__gethex+0x100>
 801a1fa:	4631      	mov	r1, r6
 801a1fc:	e7df      	b.n	801a1be <__gethex+0x11a>
 801a1fe:	1bf3      	subs	r3, r6, r7
 801a200:	3b01      	subs	r3, #1
 801a202:	4621      	mov	r1, r4
 801a204:	2b07      	cmp	r3, #7
 801a206:	dc0b      	bgt.n	801a220 <__gethex+0x17c>
 801a208:	ee18 0a10 	vmov	r0, s16
 801a20c:	f000 fa96 	bl	801a73c <_Balloc>
 801a210:	4604      	mov	r4, r0
 801a212:	b940      	cbnz	r0, 801a226 <__gethex+0x182>
 801a214:	4b65      	ldr	r3, [pc, #404]	; (801a3ac <__gethex+0x308>)
 801a216:	4602      	mov	r2, r0
 801a218:	21de      	movs	r1, #222	; 0xde
 801a21a:	4865      	ldr	r0, [pc, #404]	; (801a3b0 <__gethex+0x30c>)
 801a21c:	f001 f8ce 	bl	801b3bc <__assert_func>
 801a220:	3101      	adds	r1, #1
 801a222:	105b      	asrs	r3, r3, #1
 801a224:	e7ee      	b.n	801a204 <__gethex+0x160>
 801a226:	f100 0914 	add.w	r9, r0, #20
 801a22a:	f04f 0b00 	mov.w	fp, #0
 801a22e:	f1ca 0301 	rsb	r3, sl, #1
 801a232:	f8cd 9008 	str.w	r9, [sp, #8]
 801a236:	f8cd b000 	str.w	fp, [sp]
 801a23a:	9306      	str	r3, [sp, #24]
 801a23c:	42b7      	cmp	r7, r6
 801a23e:	d340      	bcc.n	801a2c2 <__gethex+0x21e>
 801a240:	9802      	ldr	r0, [sp, #8]
 801a242:	9b00      	ldr	r3, [sp, #0]
 801a244:	f840 3b04 	str.w	r3, [r0], #4
 801a248:	eba0 0009 	sub.w	r0, r0, r9
 801a24c:	1080      	asrs	r0, r0, #2
 801a24e:	0146      	lsls	r6, r0, #5
 801a250:	6120      	str	r0, [r4, #16]
 801a252:	4618      	mov	r0, r3
 801a254:	f000 fb68 	bl	801a928 <__hi0bits>
 801a258:	1a30      	subs	r0, r6, r0
 801a25a:	f8d8 6000 	ldr.w	r6, [r8]
 801a25e:	42b0      	cmp	r0, r6
 801a260:	dd63      	ble.n	801a32a <__gethex+0x286>
 801a262:	1b87      	subs	r7, r0, r6
 801a264:	4639      	mov	r1, r7
 801a266:	4620      	mov	r0, r4
 801a268:	f000 ff02 	bl	801b070 <__any_on>
 801a26c:	4682      	mov	sl, r0
 801a26e:	b1a8      	cbz	r0, 801a29c <__gethex+0x1f8>
 801a270:	1e7b      	subs	r3, r7, #1
 801a272:	1159      	asrs	r1, r3, #5
 801a274:	f003 021f 	and.w	r2, r3, #31
 801a278:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 801a27c:	f04f 0a01 	mov.w	sl, #1
 801a280:	fa0a f202 	lsl.w	r2, sl, r2
 801a284:	420a      	tst	r2, r1
 801a286:	d009      	beq.n	801a29c <__gethex+0x1f8>
 801a288:	4553      	cmp	r3, sl
 801a28a:	dd05      	ble.n	801a298 <__gethex+0x1f4>
 801a28c:	1eb9      	subs	r1, r7, #2
 801a28e:	4620      	mov	r0, r4
 801a290:	f000 feee 	bl	801b070 <__any_on>
 801a294:	2800      	cmp	r0, #0
 801a296:	d145      	bne.n	801a324 <__gethex+0x280>
 801a298:	f04f 0a02 	mov.w	sl, #2
 801a29c:	4639      	mov	r1, r7
 801a29e:	4620      	mov	r0, r4
 801a2a0:	f7ff fe98 	bl	8019fd4 <rshift>
 801a2a4:	443d      	add	r5, r7
 801a2a6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801a2aa:	42ab      	cmp	r3, r5
 801a2ac:	da4c      	bge.n	801a348 <__gethex+0x2a4>
 801a2ae:	ee18 0a10 	vmov	r0, s16
 801a2b2:	4621      	mov	r1, r4
 801a2b4:	f000 fa82 	bl	801a7bc <_Bfree>
 801a2b8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801a2ba:	2300      	movs	r3, #0
 801a2bc:	6013      	str	r3, [r2, #0]
 801a2be:	27a3      	movs	r7, #163	; 0xa3
 801a2c0:	e785      	b.n	801a1ce <__gethex+0x12a>
 801a2c2:	1e73      	subs	r3, r6, #1
 801a2c4:	9a05      	ldr	r2, [sp, #20]
 801a2c6:	9303      	str	r3, [sp, #12]
 801a2c8:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801a2cc:	4293      	cmp	r3, r2
 801a2ce:	d019      	beq.n	801a304 <__gethex+0x260>
 801a2d0:	f1bb 0f20 	cmp.w	fp, #32
 801a2d4:	d107      	bne.n	801a2e6 <__gethex+0x242>
 801a2d6:	9b02      	ldr	r3, [sp, #8]
 801a2d8:	9a00      	ldr	r2, [sp, #0]
 801a2da:	f843 2b04 	str.w	r2, [r3], #4
 801a2de:	9302      	str	r3, [sp, #8]
 801a2e0:	2300      	movs	r3, #0
 801a2e2:	9300      	str	r3, [sp, #0]
 801a2e4:	469b      	mov	fp, r3
 801a2e6:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 801a2ea:	f7ff fec5 	bl	801a078 <__hexdig_fun>
 801a2ee:	9b00      	ldr	r3, [sp, #0]
 801a2f0:	f000 000f 	and.w	r0, r0, #15
 801a2f4:	fa00 f00b 	lsl.w	r0, r0, fp
 801a2f8:	4303      	orrs	r3, r0
 801a2fa:	9300      	str	r3, [sp, #0]
 801a2fc:	f10b 0b04 	add.w	fp, fp, #4
 801a300:	9b03      	ldr	r3, [sp, #12]
 801a302:	e00d      	b.n	801a320 <__gethex+0x27c>
 801a304:	9b03      	ldr	r3, [sp, #12]
 801a306:	9a06      	ldr	r2, [sp, #24]
 801a308:	4413      	add	r3, r2
 801a30a:	42bb      	cmp	r3, r7
 801a30c:	d3e0      	bcc.n	801a2d0 <__gethex+0x22c>
 801a30e:	4618      	mov	r0, r3
 801a310:	9901      	ldr	r1, [sp, #4]
 801a312:	9307      	str	r3, [sp, #28]
 801a314:	4652      	mov	r2, sl
 801a316:	f7fe f809 	bl	801832c <strncmp>
 801a31a:	9b07      	ldr	r3, [sp, #28]
 801a31c:	2800      	cmp	r0, #0
 801a31e:	d1d7      	bne.n	801a2d0 <__gethex+0x22c>
 801a320:	461e      	mov	r6, r3
 801a322:	e78b      	b.n	801a23c <__gethex+0x198>
 801a324:	f04f 0a03 	mov.w	sl, #3
 801a328:	e7b8      	b.n	801a29c <__gethex+0x1f8>
 801a32a:	da0a      	bge.n	801a342 <__gethex+0x29e>
 801a32c:	1a37      	subs	r7, r6, r0
 801a32e:	4621      	mov	r1, r4
 801a330:	ee18 0a10 	vmov	r0, s16
 801a334:	463a      	mov	r2, r7
 801a336:	f000 fc5d 	bl	801abf4 <__lshift>
 801a33a:	1bed      	subs	r5, r5, r7
 801a33c:	4604      	mov	r4, r0
 801a33e:	f100 0914 	add.w	r9, r0, #20
 801a342:	f04f 0a00 	mov.w	sl, #0
 801a346:	e7ae      	b.n	801a2a6 <__gethex+0x202>
 801a348:	f8d8 0004 	ldr.w	r0, [r8, #4]
 801a34c:	42a8      	cmp	r0, r5
 801a34e:	dd72      	ble.n	801a436 <__gethex+0x392>
 801a350:	1b45      	subs	r5, r0, r5
 801a352:	42ae      	cmp	r6, r5
 801a354:	dc36      	bgt.n	801a3c4 <__gethex+0x320>
 801a356:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801a35a:	2b02      	cmp	r3, #2
 801a35c:	d02a      	beq.n	801a3b4 <__gethex+0x310>
 801a35e:	2b03      	cmp	r3, #3
 801a360:	d02c      	beq.n	801a3bc <__gethex+0x318>
 801a362:	2b01      	cmp	r3, #1
 801a364:	d115      	bne.n	801a392 <__gethex+0x2ee>
 801a366:	42ae      	cmp	r6, r5
 801a368:	d113      	bne.n	801a392 <__gethex+0x2ee>
 801a36a:	2e01      	cmp	r6, #1
 801a36c:	d10b      	bne.n	801a386 <__gethex+0x2e2>
 801a36e:	9a04      	ldr	r2, [sp, #16]
 801a370:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801a374:	6013      	str	r3, [r2, #0]
 801a376:	2301      	movs	r3, #1
 801a378:	6123      	str	r3, [r4, #16]
 801a37a:	f8c9 3000 	str.w	r3, [r9]
 801a37e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801a380:	2762      	movs	r7, #98	; 0x62
 801a382:	601c      	str	r4, [r3, #0]
 801a384:	e723      	b.n	801a1ce <__gethex+0x12a>
 801a386:	1e71      	subs	r1, r6, #1
 801a388:	4620      	mov	r0, r4
 801a38a:	f000 fe71 	bl	801b070 <__any_on>
 801a38e:	2800      	cmp	r0, #0
 801a390:	d1ed      	bne.n	801a36e <__gethex+0x2ca>
 801a392:	ee18 0a10 	vmov	r0, s16
 801a396:	4621      	mov	r1, r4
 801a398:	f000 fa10 	bl	801a7bc <_Bfree>
 801a39c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801a39e:	2300      	movs	r3, #0
 801a3a0:	6013      	str	r3, [r2, #0]
 801a3a2:	2750      	movs	r7, #80	; 0x50
 801a3a4:	e713      	b.n	801a1ce <__gethex+0x12a>
 801a3a6:	bf00      	nop
 801a3a8:	0801c720 	.word	0x0801c720
 801a3ac:	0801c6a3 	.word	0x0801c6a3
 801a3b0:	0801c6b4 	.word	0x0801c6b4
 801a3b4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801a3b6:	2b00      	cmp	r3, #0
 801a3b8:	d1eb      	bne.n	801a392 <__gethex+0x2ee>
 801a3ba:	e7d8      	b.n	801a36e <__gethex+0x2ca>
 801a3bc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801a3be:	2b00      	cmp	r3, #0
 801a3c0:	d1d5      	bne.n	801a36e <__gethex+0x2ca>
 801a3c2:	e7e6      	b.n	801a392 <__gethex+0x2ee>
 801a3c4:	1e6f      	subs	r7, r5, #1
 801a3c6:	f1ba 0f00 	cmp.w	sl, #0
 801a3ca:	d131      	bne.n	801a430 <__gethex+0x38c>
 801a3cc:	b127      	cbz	r7, 801a3d8 <__gethex+0x334>
 801a3ce:	4639      	mov	r1, r7
 801a3d0:	4620      	mov	r0, r4
 801a3d2:	f000 fe4d 	bl	801b070 <__any_on>
 801a3d6:	4682      	mov	sl, r0
 801a3d8:	117b      	asrs	r3, r7, #5
 801a3da:	2101      	movs	r1, #1
 801a3dc:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 801a3e0:	f007 071f 	and.w	r7, r7, #31
 801a3e4:	fa01 f707 	lsl.w	r7, r1, r7
 801a3e8:	421f      	tst	r7, r3
 801a3ea:	4629      	mov	r1, r5
 801a3ec:	4620      	mov	r0, r4
 801a3ee:	bf18      	it	ne
 801a3f0:	f04a 0a02 	orrne.w	sl, sl, #2
 801a3f4:	1b76      	subs	r6, r6, r5
 801a3f6:	f7ff fded 	bl	8019fd4 <rshift>
 801a3fa:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801a3fe:	2702      	movs	r7, #2
 801a400:	f1ba 0f00 	cmp.w	sl, #0
 801a404:	d048      	beq.n	801a498 <__gethex+0x3f4>
 801a406:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801a40a:	2b02      	cmp	r3, #2
 801a40c:	d015      	beq.n	801a43a <__gethex+0x396>
 801a40e:	2b03      	cmp	r3, #3
 801a410:	d017      	beq.n	801a442 <__gethex+0x39e>
 801a412:	2b01      	cmp	r3, #1
 801a414:	d109      	bne.n	801a42a <__gethex+0x386>
 801a416:	f01a 0f02 	tst.w	sl, #2
 801a41a:	d006      	beq.n	801a42a <__gethex+0x386>
 801a41c:	f8d9 0000 	ldr.w	r0, [r9]
 801a420:	ea4a 0a00 	orr.w	sl, sl, r0
 801a424:	f01a 0f01 	tst.w	sl, #1
 801a428:	d10e      	bne.n	801a448 <__gethex+0x3a4>
 801a42a:	f047 0710 	orr.w	r7, r7, #16
 801a42e:	e033      	b.n	801a498 <__gethex+0x3f4>
 801a430:	f04f 0a01 	mov.w	sl, #1
 801a434:	e7d0      	b.n	801a3d8 <__gethex+0x334>
 801a436:	2701      	movs	r7, #1
 801a438:	e7e2      	b.n	801a400 <__gethex+0x35c>
 801a43a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801a43c:	f1c3 0301 	rsb	r3, r3, #1
 801a440:	9315      	str	r3, [sp, #84]	; 0x54
 801a442:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801a444:	2b00      	cmp	r3, #0
 801a446:	d0f0      	beq.n	801a42a <__gethex+0x386>
 801a448:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801a44c:	f104 0314 	add.w	r3, r4, #20
 801a450:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 801a454:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 801a458:	f04f 0c00 	mov.w	ip, #0
 801a45c:	4618      	mov	r0, r3
 801a45e:	f853 2b04 	ldr.w	r2, [r3], #4
 801a462:	f1b2 3fff 	cmp.w	r2, #4294967295
 801a466:	d01c      	beq.n	801a4a2 <__gethex+0x3fe>
 801a468:	3201      	adds	r2, #1
 801a46a:	6002      	str	r2, [r0, #0]
 801a46c:	2f02      	cmp	r7, #2
 801a46e:	f104 0314 	add.w	r3, r4, #20
 801a472:	d13f      	bne.n	801a4f4 <__gethex+0x450>
 801a474:	f8d8 2000 	ldr.w	r2, [r8]
 801a478:	3a01      	subs	r2, #1
 801a47a:	42b2      	cmp	r2, r6
 801a47c:	d10a      	bne.n	801a494 <__gethex+0x3f0>
 801a47e:	1171      	asrs	r1, r6, #5
 801a480:	2201      	movs	r2, #1
 801a482:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801a486:	f006 061f 	and.w	r6, r6, #31
 801a48a:	fa02 f606 	lsl.w	r6, r2, r6
 801a48e:	421e      	tst	r6, r3
 801a490:	bf18      	it	ne
 801a492:	4617      	movne	r7, r2
 801a494:	f047 0720 	orr.w	r7, r7, #32
 801a498:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801a49a:	601c      	str	r4, [r3, #0]
 801a49c:	9b04      	ldr	r3, [sp, #16]
 801a49e:	601d      	str	r5, [r3, #0]
 801a4a0:	e695      	b.n	801a1ce <__gethex+0x12a>
 801a4a2:	4299      	cmp	r1, r3
 801a4a4:	f843 cc04 	str.w	ip, [r3, #-4]
 801a4a8:	d8d8      	bhi.n	801a45c <__gethex+0x3b8>
 801a4aa:	68a3      	ldr	r3, [r4, #8]
 801a4ac:	459b      	cmp	fp, r3
 801a4ae:	db19      	blt.n	801a4e4 <__gethex+0x440>
 801a4b0:	6861      	ldr	r1, [r4, #4]
 801a4b2:	ee18 0a10 	vmov	r0, s16
 801a4b6:	3101      	adds	r1, #1
 801a4b8:	f000 f940 	bl	801a73c <_Balloc>
 801a4bc:	4681      	mov	r9, r0
 801a4be:	b918      	cbnz	r0, 801a4c8 <__gethex+0x424>
 801a4c0:	4b1a      	ldr	r3, [pc, #104]	; (801a52c <__gethex+0x488>)
 801a4c2:	4602      	mov	r2, r0
 801a4c4:	2184      	movs	r1, #132	; 0x84
 801a4c6:	e6a8      	b.n	801a21a <__gethex+0x176>
 801a4c8:	6922      	ldr	r2, [r4, #16]
 801a4ca:	3202      	adds	r2, #2
 801a4cc:	f104 010c 	add.w	r1, r4, #12
 801a4d0:	0092      	lsls	r2, r2, #2
 801a4d2:	300c      	adds	r0, #12
 801a4d4:	f7fd f956 	bl	8017784 <memcpy>
 801a4d8:	4621      	mov	r1, r4
 801a4da:	ee18 0a10 	vmov	r0, s16
 801a4de:	f000 f96d 	bl	801a7bc <_Bfree>
 801a4e2:	464c      	mov	r4, r9
 801a4e4:	6923      	ldr	r3, [r4, #16]
 801a4e6:	1c5a      	adds	r2, r3, #1
 801a4e8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801a4ec:	6122      	str	r2, [r4, #16]
 801a4ee:	2201      	movs	r2, #1
 801a4f0:	615a      	str	r2, [r3, #20]
 801a4f2:	e7bb      	b.n	801a46c <__gethex+0x3c8>
 801a4f4:	6922      	ldr	r2, [r4, #16]
 801a4f6:	455a      	cmp	r2, fp
 801a4f8:	dd0b      	ble.n	801a512 <__gethex+0x46e>
 801a4fa:	2101      	movs	r1, #1
 801a4fc:	4620      	mov	r0, r4
 801a4fe:	f7ff fd69 	bl	8019fd4 <rshift>
 801a502:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801a506:	3501      	adds	r5, #1
 801a508:	42ab      	cmp	r3, r5
 801a50a:	f6ff aed0 	blt.w	801a2ae <__gethex+0x20a>
 801a50e:	2701      	movs	r7, #1
 801a510:	e7c0      	b.n	801a494 <__gethex+0x3f0>
 801a512:	f016 061f 	ands.w	r6, r6, #31
 801a516:	d0fa      	beq.n	801a50e <__gethex+0x46a>
 801a518:	449a      	add	sl, r3
 801a51a:	f1c6 0620 	rsb	r6, r6, #32
 801a51e:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 801a522:	f000 fa01 	bl	801a928 <__hi0bits>
 801a526:	42b0      	cmp	r0, r6
 801a528:	dbe7      	blt.n	801a4fa <__gethex+0x456>
 801a52a:	e7f0      	b.n	801a50e <__gethex+0x46a>
 801a52c:	0801c6a3 	.word	0x0801c6a3

0801a530 <L_shift>:
 801a530:	f1c2 0208 	rsb	r2, r2, #8
 801a534:	0092      	lsls	r2, r2, #2
 801a536:	b570      	push	{r4, r5, r6, lr}
 801a538:	f1c2 0620 	rsb	r6, r2, #32
 801a53c:	6843      	ldr	r3, [r0, #4]
 801a53e:	6804      	ldr	r4, [r0, #0]
 801a540:	fa03 f506 	lsl.w	r5, r3, r6
 801a544:	432c      	orrs	r4, r5
 801a546:	40d3      	lsrs	r3, r2
 801a548:	6004      	str	r4, [r0, #0]
 801a54a:	f840 3f04 	str.w	r3, [r0, #4]!
 801a54e:	4288      	cmp	r0, r1
 801a550:	d3f4      	bcc.n	801a53c <L_shift+0xc>
 801a552:	bd70      	pop	{r4, r5, r6, pc}

0801a554 <__match>:
 801a554:	b530      	push	{r4, r5, lr}
 801a556:	6803      	ldr	r3, [r0, #0]
 801a558:	3301      	adds	r3, #1
 801a55a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801a55e:	b914      	cbnz	r4, 801a566 <__match+0x12>
 801a560:	6003      	str	r3, [r0, #0]
 801a562:	2001      	movs	r0, #1
 801a564:	bd30      	pop	{r4, r5, pc}
 801a566:	f813 2b01 	ldrb.w	r2, [r3], #1
 801a56a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 801a56e:	2d19      	cmp	r5, #25
 801a570:	bf98      	it	ls
 801a572:	3220      	addls	r2, #32
 801a574:	42a2      	cmp	r2, r4
 801a576:	d0f0      	beq.n	801a55a <__match+0x6>
 801a578:	2000      	movs	r0, #0
 801a57a:	e7f3      	b.n	801a564 <__match+0x10>

0801a57c <__hexnan>:
 801a57c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a580:	680b      	ldr	r3, [r1, #0]
 801a582:	6801      	ldr	r1, [r0, #0]
 801a584:	115e      	asrs	r6, r3, #5
 801a586:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801a58a:	f013 031f 	ands.w	r3, r3, #31
 801a58e:	b087      	sub	sp, #28
 801a590:	bf18      	it	ne
 801a592:	3604      	addne	r6, #4
 801a594:	2500      	movs	r5, #0
 801a596:	1f37      	subs	r7, r6, #4
 801a598:	4682      	mov	sl, r0
 801a59a:	4690      	mov	r8, r2
 801a59c:	9301      	str	r3, [sp, #4]
 801a59e:	f846 5c04 	str.w	r5, [r6, #-4]
 801a5a2:	46b9      	mov	r9, r7
 801a5a4:	463c      	mov	r4, r7
 801a5a6:	9502      	str	r5, [sp, #8]
 801a5a8:	46ab      	mov	fp, r5
 801a5aa:	784a      	ldrb	r2, [r1, #1]
 801a5ac:	1c4b      	adds	r3, r1, #1
 801a5ae:	9303      	str	r3, [sp, #12]
 801a5b0:	b342      	cbz	r2, 801a604 <__hexnan+0x88>
 801a5b2:	4610      	mov	r0, r2
 801a5b4:	9105      	str	r1, [sp, #20]
 801a5b6:	9204      	str	r2, [sp, #16]
 801a5b8:	f7ff fd5e 	bl	801a078 <__hexdig_fun>
 801a5bc:	2800      	cmp	r0, #0
 801a5be:	d14f      	bne.n	801a660 <__hexnan+0xe4>
 801a5c0:	9a04      	ldr	r2, [sp, #16]
 801a5c2:	9905      	ldr	r1, [sp, #20]
 801a5c4:	2a20      	cmp	r2, #32
 801a5c6:	d818      	bhi.n	801a5fa <__hexnan+0x7e>
 801a5c8:	9b02      	ldr	r3, [sp, #8]
 801a5ca:	459b      	cmp	fp, r3
 801a5cc:	dd13      	ble.n	801a5f6 <__hexnan+0x7a>
 801a5ce:	454c      	cmp	r4, r9
 801a5d0:	d206      	bcs.n	801a5e0 <__hexnan+0x64>
 801a5d2:	2d07      	cmp	r5, #7
 801a5d4:	dc04      	bgt.n	801a5e0 <__hexnan+0x64>
 801a5d6:	462a      	mov	r2, r5
 801a5d8:	4649      	mov	r1, r9
 801a5da:	4620      	mov	r0, r4
 801a5dc:	f7ff ffa8 	bl	801a530 <L_shift>
 801a5e0:	4544      	cmp	r4, r8
 801a5e2:	d950      	bls.n	801a686 <__hexnan+0x10a>
 801a5e4:	2300      	movs	r3, #0
 801a5e6:	f1a4 0904 	sub.w	r9, r4, #4
 801a5ea:	f844 3c04 	str.w	r3, [r4, #-4]
 801a5ee:	f8cd b008 	str.w	fp, [sp, #8]
 801a5f2:	464c      	mov	r4, r9
 801a5f4:	461d      	mov	r5, r3
 801a5f6:	9903      	ldr	r1, [sp, #12]
 801a5f8:	e7d7      	b.n	801a5aa <__hexnan+0x2e>
 801a5fa:	2a29      	cmp	r2, #41	; 0x29
 801a5fc:	d156      	bne.n	801a6ac <__hexnan+0x130>
 801a5fe:	3102      	adds	r1, #2
 801a600:	f8ca 1000 	str.w	r1, [sl]
 801a604:	f1bb 0f00 	cmp.w	fp, #0
 801a608:	d050      	beq.n	801a6ac <__hexnan+0x130>
 801a60a:	454c      	cmp	r4, r9
 801a60c:	d206      	bcs.n	801a61c <__hexnan+0xa0>
 801a60e:	2d07      	cmp	r5, #7
 801a610:	dc04      	bgt.n	801a61c <__hexnan+0xa0>
 801a612:	462a      	mov	r2, r5
 801a614:	4649      	mov	r1, r9
 801a616:	4620      	mov	r0, r4
 801a618:	f7ff ff8a 	bl	801a530 <L_shift>
 801a61c:	4544      	cmp	r4, r8
 801a61e:	d934      	bls.n	801a68a <__hexnan+0x10e>
 801a620:	f1a8 0204 	sub.w	r2, r8, #4
 801a624:	4623      	mov	r3, r4
 801a626:	f853 1b04 	ldr.w	r1, [r3], #4
 801a62a:	f842 1f04 	str.w	r1, [r2, #4]!
 801a62e:	429f      	cmp	r7, r3
 801a630:	d2f9      	bcs.n	801a626 <__hexnan+0xaa>
 801a632:	1b3b      	subs	r3, r7, r4
 801a634:	f023 0303 	bic.w	r3, r3, #3
 801a638:	3304      	adds	r3, #4
 801a63a:	3401      	adds	r4, #1
 801a63c:	3e03      	subs	r6, #3
 801a63e:	42b4      	cmp	r4, r6
 801a640:	bf88      	it	hi
 801a642:	2304      	movhi	r3, #4
 801a644:	4443      	add	r3, r8
 801a646:	2200      	movs	r2, #0
 801a648:	f843 2b04 	str.w	r2, [r3], #4
 801a64c:	429f      	cmp	r7, r3
 801a64e:	d2fb      	bcs.n	801a648 <__hexnan+0xcc>
 801a650:	683b      	ldr	r3, [r7, #0]
 801a652:	b91b      	cbnz	r3, 801a65c <__hexnan+0xe0>
 801a654:	4547      	cmp	r7, r8
 801a656:	d127      	bne.n	801a6a8 <__hexnan+0x12c>
 801a658:	2301      	movs	r3, #1
 801a65a:	603b      	str	r3, [r7, #0]
 801a65c:	2005      	movs	r0, #5
 801a65e:	e026      	b.n	801a6ae <__hexnan+0x132>
 801a660:	3501      	adds	r5, #1
 801a662:	2d08      	cmp	r5, #8
 801a664:	f10b 0b01 	add.w	fp, fp, #1
 801a668:	dd06      	ble.n	801a678 <__hexnan+0xfc>
 801a66a:	4544      	cmp	r4, r8
 801a66c:	d9c3      	bls.n	801a5f6 <__hexnan+0x7a>
 801a66e:	2300      	movs	r3, #0
 801a670:	f844 3c04 	str.w	r3, [r4, #-4]
 801a674:	2501      	movs	r5, #1
 801a676:	3c04      	subs	r4, #4
 801a678:	6822      	ldr	r2, [r4, #0]
 801a67a:	f000 000f 	and.w	r0, r0, #15
 801a67e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 801a682:	6022      	str	r2, [r4, #0]
 801a684:	e7b7      	b.n	801a5f6 <__hexnan+0x7a>
 801a686:	2508      	movs	r5, #8
 801a688:	e7b5      	b.n	801a5f6 <__hexnan+0x7a>
 801a68a:	9b01      	ldr	r3, [sp, #4]
 801a68c:	2b00      	cmp	r3, #0
 801a68e:	d0df      	beq.n	801a650 <__hexnan+0xd4>
 801a690:	f04f 32ff 	mov.w	r2, #4294967295
 801a694:	f1c3 0320 	rsb	r3, r3, #32
 801a698:	fa22 f303 	lsr.w	r3, r2, r3
 801a69c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 801a6a0:	401a      	ands	r2, r3
 801a6a2:	f846 2c04 	str.w	r2, [r6, #-4]
 801a6a6:	e7d3      	b.n	801a650 <__hexnan+0xd4>
 801a6a8:	3f04      	subs	r7, #4
 801a6aa:	e7d1      	b.n	801a650 <__hexnan+0xd4>
 801a6ac:	2004      	movs	r0, #4
 801a6ae:	b007      	add	sp, #28
 801a6b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801a6b4 <_isatty_r>:
 801a6b4:	b538      	push	{r3, r4, r5, lr}
 801a6b6:	4d06      	ldr	r5, [pc, #24]	; (801a6d0 <_isatty_r+0x1c>)
 801a6b8:	2300      	movs	r3, #0
 801a6ba:	4604      	mov	r4, r0
 801a6bc:	4608      	mov	r0, r1
 801a6be:	602b      	str	r3, [r5, #0]
 801a6c0:	f7fc fdf2 	bl	80172a8 <_isatty>
 801a6c4:	1c43      	adds	r3, r0, #1
 801a6c6:	d102      	bne.n	801a6ce <_isatty_r+0x1a>
 801a6c8:	682b      	ldr	r3, [r5, #0]
 801a6ca:	b103      	cbz	r3, 801a6ce <_isatty_r+0x1a>
 801a6cc:	6023      	str	r3, [r4, #0]
 801a6ce:	bd38      	pop	{r3, r4, r5, pc}
 801a6d0:	2001e3f8 	.word	0x2001e3f8

0801a6d4 <_localeconv_r>:
 801a6d4:	4800      	ldr	r0, [pc, #0]	; (801a6d8 <_localeconv_r+0x4>)
 801a6d6:	4770      	bx	lr
 801a6d8:	200004c4 	.word	0x200004c4

0801a6dc <_lseek_r>:
 801a6dc:	b538      	push	{r3, r4, r5, lr}
 801a6de:	4d07      	ldr	r5, [pc, #28]	; (801a6fc <_lseek_r+0x20>)
 801a6e0:	4604      	mov	r4, r0
 801a6e2:	4608      	mov	r0, r1
 801a6e4:	4611      	mov	r1, r2
 801a6e6:	2200      	movs	r2, #0
 801a6e8:	602a      	str	r2, [r5, #0]
 801a6ea:	461a      	mov	r2, r3
 801a6ec:	f7fc fdde 	bl	80172ac <_lseek>
 801a6f0:	1c43      	adds	r3, r0, #1
 801a6f2:	d102      	bne.n	801a6fa <_lseek_r+0x1e>
 801a6f4:	682b      	ldr	r3, [r5, #0]
 801a6f6:	b103      	cbz	r3, 801a6fa <_lseek_r+0x1e>
 801a6f8:	6023      	str	r3, [r4, #0]
 801a6fa:	bd38      	pop	{r3, r4, r5, pc}
 801a6fc:	2001e3f8 	.word	0x2001e3f8

0801a700 <__ascii_mbtowc>:
 801a700:	b082      	sub	sp, #8
 801a702:	b901      	cbnz	r1, 801a706 <__ascii_mbtowc+0x6>
 801a704:	a901      	add	r1, sp, #4
 801a706:	b142      	cbz	r2, 801a71a <__ascii_mbtowc+0x1a>
 801a708:	b14b      	cbz	r3, 801a71e <__ascii_mbtowc+0x1e>
 801a70a:	7813      	ldrb	r3, [r2, #0]
 801a70c:	600b      	str	r3, [r1, #0]
 801a70e:	7812      	ldrb	r2, [r2, #0]
 801a710:	1e10      	subs	r0, r2, #0
 801a712:	bf18      	it	ne
 801a714:	2001      	movne	r0, #1
 801a716:	b002      	add	sp, #8
 801a718:	4770      	bx	lr
 801a71a:	4610      	mov	r0, r2
 801a71c:	e7fb      	b.n	801a716 <__ascii_mbtowc+0x16>
 801a71e:	f06f 0001 	mvn.w	r0, #1
 801a722:	e7f8      	b.n	801a716 <__ascii_mbtowc+0x16>

0801a724 <__malloc_lock>:
 801a724:	4801      	ldr	r0, [pc, #4]	; (801a72c <__malloc_lock+0x8>)
 801a726:	f7fc bfb6 	b.w	8017696 <__retarget_lock_acquire_recursive>
 801a72a:	bf00      	nop
 801a72c:	2001e3ec 	.word	0x2001e3ec

0801a730 <__malloc_unlock>:
 801a730:	4801      	ldr	r0, [pc, #4]	; (801a738 <__malloc_unlock+0x8>)
 801a732:	f7fc bfb1 	b.w	8017698 <__retarget_lock_release_recursive>
 801a736:	bf00      	nop
 801a738:	2001e3ec 	.word	0x2001e3ec

0801a73c <_Balloc>:
 801a73c:	b570      	push	{r4, r5, r6, lr}
 801a73e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801a740:	4604      	mov	r4, r0
 801a742:	460d      	mov	r5, r1
 801a744:	b976      	cbnz	r6, 801a764 <_Balloc+0x28>
 801a746:	2010      	movs	r0, #16
 801a748:	f7fd f80c 	bl	8017764 <malloc>
 801a74c:	4602      	mov	r2, r0
 801a74e:	6260      	str	r0, [r4, #36]	; 0x24
 801a750:	b920      	cbnz	r0, 801a75c <_Balloc+0x20>
 801a752:	4b18      	ldr	r3, [pc, #96]	; (801a7b4 <_Balloc+0x78>)
 801a754:	4818      	ldr	r0, [pc, #96]	; (801a7b8 <_Balloc+0x7c>)
 801a756:	2166      	movs	r1, #102	; 0x66
 801a758:	f000 fe30 	bl	801b3bc <__assert_func>
 801a75c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801a760:	6006      	str	r6, [r0, #0]
 801a762:	60c6      	str	r6, [r0, #12]
 801a764:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801a766:	68f3      	ldr	r3, [r6, #12]
 801a768:	b183      	cbz	r3, 801a78c <_Balloc+0x50>
 801a76a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801a76c:	68db      	ldr	r3, [r3, #12]
 801a76e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801a772:	b9b8      	cbnz	r0, 801a7a4 <_Balloc+0x68>
 801a774:	2101      	movs	r1, #1
 801a776:	fa01 f605 	lsl.w	r6, r1, r5
 801a77a:	1d72      	adds	r2, r6, #5
 801a77c:	0092      	lsls	r2, r2, #2
 801a77e:	4620      	mov	r0, r4
 801a780:	f7fd f830 	bl	80177e4 <_calloc_r>
 801a784:	b160      	cbz	r0, 801a7a0 <_Balloc+0x64>
 801a786:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801a78a:	e00e      	b.n	801a7aa <_Balloc+0x6e>
 801a78c:	2221      	movs	r2, #33	; 0x21
 801a78e:	2104      	movs	r1, #4
 801a790:	4620      	mov	r0, r4
 801a792:	f7fd f827 	bl	80177e4 <_calloc_r>
 801a796:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801a798:	60f0      	str	r0, [r6, #12]
 801a79a:	68db      	ldr	r3, [r3, #12]
 801a79c:	2b00      	cmp	r3, #0
 801a79e:	d1e4      	bne.n	801a76a <_Balloc+0x2e>
 801a7a0:	2000      	movs	r0, #0
 801a7a2:	bd70      	pop	{r4, r5, r6, pc}
 801a7a4:	6802      	ldr	r2, [r0, #0]
 801a7a6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801a7aa:	2300      	movs	r3, #0
 801a7ac:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801a7b0:	e7f7      	b.n	801a7a2 <_Balloc+0x66>
 801a7b2:	bf00      	nop
 801a7b4:	0801c62d 	.word	0x0801c62d
 801a7b8:	0801c734 	.word	0x0801c734

0801a7bc <_Bfree>:
 801a7bc:	b570      	push	{r4, r5, r6, lr}
 801a7be:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801a7c0:	4605      	mov	r5, r0
 801a7c2:	460c      	mov	r4, r1
 801a7c4:	b976      	cbnz	r6, 801a7e4 <_Bfree+0x28>
 801a7c6:	2010      	movs	r0, #16
 801a7c8:	f7fc ffcc 	bl	8017764 <malloc>
 801a7cc:	4602      	mov	r2, r0
 801a7ce:	6268      	str	r0, [r5, #36]	; 0x24
 801a7d0:	b920      	cbnz	r0, 801a7dc <_Bfree+0x20>
 801a7d2:	4b09      	ldr	r3, [pc, #36]	; (801a7f8 <_Bfree+0x3c>)
 801a7d4:	4809      	ldr	r0, [pc, #36]	; (801a7fc <_Bfree+0x40>)
 801a7d6:	218a      	movs	r1, #138	; 0x8a
 801a7d8:	f000 fdf0 	bl	801b3bc <__assert_func>
 801a7dc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801a7e0:	6006      	str	r6, [r0, #0]
 801a7e2:	60c6      	str	r6, [r0, #12]
 801a7e4:	b13c      	cbz	r4, 801a7f6 <_Bfree+0x3a>
 801a7e6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801a7e8:	6862      	ldr	r2, [r4, #4]
 801a7ea:	68db      	ldr	r3, [r3, #12]
 801a7ec:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801a7f0:	6021      	str	r1, [r4, #0]
 801a7f2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801a7f6:	bd70      	pop	{r4, r5, r6, pc}
 801a7f8:	0801c62d 	.word	0x0801c62d
 801a7fc:	0801c734 	.word	0x0801c734

0801a800 <__multadd>:
 801a800:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a804:	690e      	ldr	r6, [r1, #16]
 801a806:	4607      	mov	r7, r0
 801a808:	4698      	mov	r8, r3
 801a80a:	460c      	mov	r4, r1
 801a80c:	f101 0014 	add.w	r0, r1, #20
 801a810:	2300      	movs	r3, #0
 801a812:	6805      	ldr	r5, [r0, #0]
 801a814:	b2a9      	uxth	r1, r5
 801a816:	fb02 8101 	mla	r1, r2, r1, r8
 801a81a:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 801a81e:	0c2d      	lsrs	r5, r5, #16
 801a820:	fb02 c505 	mla	r5, r2, r5, ip
 801a824:	b289      	uxth	r1, r1
 801a826:	3301      	adds	r3, #1
 801a828:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 801a82c:	429e      	cmp	r6, r3
 801a82e:	f840 1b04 	str.w	r1, [r0], #4
 801a832:	ea4f 4815 	mov.w	r8, r5, lsr #16
 801a836:	dcec      	bgt.n	801a812 <__multadd+0x12>
 801a838:	f1b8 0f00 	cmp.w	r8, #0
 801a83c:	d022      	beq.n	801a884 <__multadd+0x84>
 801a83e:	68a3      	ldr	r3, [r4, #8]
 801a840:	42b3      	cmp	r3, r6
 801a842:	dc19      	bgt.n	801a878 <__multadd+0x78>
 801a844:	6861      	ldr	r1, [r4, #4]
 801a846:	4638      	mov	r0, r7
 801a848:	3101      	adds	r1, #1
 801a84a:	f7ff ff77 	bl	801a73c <_Balloc>
 801a84e:	4605      	mov	r5, r0
 801a850:	b928      	cbnz	r0, 801a85e <__multadd+0x5e>
 801a852:	4602      	mov	r2, r0
 801a854:	4b0d      	ldr	r3, [pc, #52]	; (801a88c <__multadd+0x8c>)
 801a856:	480e      	ldr	r0, [pc, #56]	; (801a890 <__multadd+0x90>)
 801a858:	21b5      	movs	r1, #181	; 0xb5
 801a85a:	f000 fdaf 	bl	801b3bc <__assert_func>
 801a85e:	6922      	ldr	r2, [r4, #16]
 801a860:	3202      	adds	r2, #2
 801a862:	f104 010c 	add.w	r1, r4, #12
 801a866:	0092      	lsls	r2, r2, #2
 801a868:	300c      	adds	r0, #12
 801a86a:	f7fc ff8b 	bl	8017784 <memcpy>
 801a86e:	4621      	mov	r1, r4
 801a870:	4638      	mov	r0, r7
 801a872:	f7ff ffa3 	bl	801a7bc <_Bfree>
 801a876:	462c      	mov	r4, r5
 801a878:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 801a87c:	3601      	adds	r6, #1
 801a87e:	f8c3 8014 	str.w	r8, [r3, #20]
 801a882:	6126      	str	r6, [r4, #16]
 801a884:	4620      	mov	r0, r4
 801a886:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a88a:	bf00      	nop
 801a88c:	0801c6a3 	.word	0x0801c6a3
 801a890:	0801c734 	.word	0x0801c734

0801a894 <__s2b>:
 801a894:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a898:	460c      	mov	r4, r1
 801a89a:	4615      	mov	r5, r2
 801a89c:	461f      	mov	r7, r3
 801a89e:	2209      	movs	r2, #9
 801a8a0:	3308      	adds	r3, #8
 801a8a2:	4606      	mov	r6, r0
 801a8a4:	fb93 f3f2 	sdiv	r3, r3, r2
 801a8a8:	2100      	movs	r1, #0
 801a8aa:	2201      	movs	r2, #1
 801a8ac:	429a      	cmp	r2, r3
 801a8ae:	db09      	blt.n	801a8c4 <__s2b+0x30>
 801a8b0:	4630      	mov	r0, r6
 801a8b2:	f7ff ff43 	bl	801a73c <_Balloc>
 801a8b6:	b940      	cbnz	r0, 801a8ca <__s2b+0x36>
 801a8b8:	4602      	mov	r2, r0
 801a8ba:	4b19      	ldr	r3, [pc, #100]	; (801a920 <__s2b+0x8c>)
 801a8bc:	4819      	ldr	r0, [pc, #100]	; (801a924 <__s2b+0x90>)
 801a8be:	21ce      	movs	r1, #206	; 0xce
 801a8c0:	f000 fd7c 	bl	801b3bc <__assert_func>
 801a8c4:	0052      	lsls	r2, r2, #1
 801a8c6:	3101      	adds	r1, #1
 801a8c8:	e7f0      	b.n	801a8ac <__s2b+0x18>
 801a8ca:	9b08      	ldr	r3, [sp, #32]
 801a8cc:	6143      	str	r3, [r0, #20]
 801a8ce:	2d09      	cmp	r5, #9
 801a8d0:	f04f 0301 	mov.w	r3, #1
 801a8d4:	6103      	str	r3, [r0, #16]
 801a8d6:	dd16      	ble.n	801a906 <__s2b+0x72>
 801a8d8:	f104 0909 	add.w	r9, r4, #9
 801a8dc:	46c8      	mov	r8, r9
 801a8de:	442c      	add	r4, r5
 801a8e0:	f818 3b01 	ldrb.w	r3, [r8], #1
 801a8e4:	4601      	mov	r1, r0
 801a8e6:	3b30      	subs	r3, #48	; 0x30
 801a8e8:	220a      	movs	r2, #10
 801a8ea:	4630      	mov	r0, r6
 801a8ec:	f7ff ff88 	bl	801a800 <__multadd>
 801a8f0:	45a0      	cmp	r8, r4
 801a8f2:	d1f5      	bne.n	801a8e0 <__s2b+0x4c>
 801a8f4:	f1a5 0408 	sub.w	r4, r5, #8
 801a8f8:	444c      	add	r4, r9
 801a8fa:	1b2d      	subs	r5, r5, r4
 801a8fc:	1963      	adds	r3, r4, r5
 801a8fe:	42bb      	cmp	r3, r7
 801a900:	db04      	blt.n	801a90c <__s2b+0x78>
 801a902:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a906:	340a      	adds	r4, #10
 801a908:	2509      	movs	r5, #9
 801a90a:	e7f6      	b.n	801a8fa <__s2b+0x66>
 801a90c:	f814 3b01 	ldrb.w	r3, [r4], #1
 801a910:	4601      	mov	r1, r0
 801a912:	3b30      	subs	r3, #48	; 0x30
 801a914:	220a      	movs	r2, #10
 801a916:	4630      	mov	r0, r6
 801a918:	f7ff ff72 	bl	801a800 <__multadd>
 801a91c:	e7ee      	b.n	801a8fc <__s2b+0x68>
 801a91e:	bf00      	nop
 801a920:	0801c6a3 	.word	0x0801c6a3
 801a924:	0801c734 	.word	0x0801c734

0801a928 <__hi0bits>:
 801a928:	0c03      	lsrs	r3, r0, #16
 801a92a:	041b      	lsls	r3, r3, #16
 801a92c:	b9d3      	cbnz	r3, 801a964 <__hi0bits+0x3c>
 801a92e:	0400      	lsls	r0, r0, #16
 801a930:	2310      	movs	r3, #16
 801a932:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801a936:	bf04      	itt	eq
 801a938:	0200      	lsleq	r0, r0, #8
 801a93a:	3308      	addeq	r3, #8
 801a93c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801a940:	bf04      	itt	eq
 801a942:	0100      	lsleq	r0, r0, #4
 801a944:	3304      	addeq	r3, #4
 801a946:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801a94a:	bf04      	itt	eq
 801a94c:	0080      	lsleq	r0, r0, #2
 801a94e:	3302      	addeq	r3, #2
 801a950:	2800      	cmp	r0, #0
 801a952:	db05      	blt.n	801a960 <__hi0bits+0x38>
 801a954:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801a958:	f103 0301 	add.w	r3, r3, #1
 801a95c:	bf08      	it	eq
 801a95e:	2320      	moveq	r3, #32
 801a960:	4618      	mov	r0, r3
 801a962:	4770      	bx	lr
 801a964:	2300      	movs	r3, #0
 801a966:	e7e4      	b.n	801a932 <__hi0bits+0xa>

0801a968 <__lo0bits>:
 801a968:	6803      	ldr	r3, [r0, #0]
 801a96a:	f013 0207 	ands.w	r2, r3, #7
 801a96e:	4601      	mov	r1, r0
 801a970:	d00b      	beq.n	801a98a <__lo0bits+0x22>
 801a972:	07da      	lsls	r2, r3, #31
 801a974:	d424      	bmi.n	801a9c0 <__lo0bits+0x58>
 801a976:	0798      	lsls	r0, r3, #30
 801a978:	bf49      	itett	mi
 801a97a:	085b      	lsrmi	r3, r3, #1
 801a97c:	089b      	lsrpl	r3, r3, #2
 801a97e:	2001      	movmi	r0, #1
 801a980:	600b      	strmi	r3, [r1, #0]
 801a982:	bf5c      	itt	pl
 801a984:	600b      	strpl	r3, [r1, #0]
 801a986:	2002      	movpl	r0, #2
 801a988:	4770      	bx	lr
 801a98a:	b298      	uxth	r0, r3
 801a98c:	b9b0      	cbnz	r0, 801a9bc <__lo0bits+0x54>
 801a98e:	0c1b      	lsrs	r3, r3, #16
 801a990:	2010      	movs	r0, #16
 801a992:	f013 0fff 	tst.w	r3, #255	; 0xff
 801a996:	bf04      	itt	eq
 801a998:	0a1b      	lsreq	r3, r3, #8
 801a99a:	3008      	addeq	r0, #8
 801a99c:	071a      	lsls	r2, r3, #28
 801a99e:	bf04      	itt	eq
 801a9a0:	091b      	lsreq	r3, r3, #4
 801a9a2:	3004      	addeq	r0, #4
 801a9a4:	079a      	lsls	r2, r3, #30
 801a9a6:	bf04      	itt	eq
 801a9a8:	089b      	lsreq	r3, r3, #2
 801a9aa:	3002      	addeq	r0, #2
 801a9ac:	07da      	lsls	r2, r3, #31
 801a9ae:	d403      	bmi.n	801a9b8 <__lo0bits+0x50>
 801a9b0:	085b      	lsrs	r3, r3, #1
 801a9b2:	f100 0001 	add.w	r0, r0, #1
 801a9b6:	d005      	beq.n	801a9c4 <__lo0bits+0x5c>
 801a9b8:	600b      	str	r3, [r1, #0]
 801a9ba:	4770      	bx	lr
 801a9bc:	4610      	mov	r0, r2
 801a9be:	e7e8      	b.n	801a992 <__lo0bits+0x2a>
 801a9c0:	2000      	movs	r0, #0
 801a9c2:	4770      	bx	lr
 801a9c4:	2020      	movs	r0, #32
 801a9c6:	4770      	bx	lr

0801a9c8 <__i2b>:
 801a9c8:	b510      	push	{r4, lr}
 801a9ca:	460c      	mov	r4, r1
 801a9cc:	2101      	movs	r1, #1
 801a9ce:	f7ff feb5 	bl	801a73c <_Balloc>
 801a9d2:	4602      	mov	r2, r0
 801a9d4:	b928      	cbnz	r0, 801a9e2 <__i2b+0x1a>
 801a9d6:	4b05      	ldr	r3, [pc, #20]	; (801a9ec <__i2b+0x24>)
 801a9d8:	4805      	ldr	r0, [pc, #20]	; (801a9f0 <__i2b+0x28>)
 801a9da:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801a9de:	f000 fced 	bl	801b3bc <__assert_func>
 801a9e2:	2301      	movs	r3, #1
 801a9e4:	6144      	str	r4, [r0, #20]
 801a9e6:	6103      	str	r3, [r0, #16]
 801a9e8:	bd10      	pop	{r4, pc}
 801a9ea:	bf00      	nop
 801a9ec:	0801c6a3 	.word	0x0801c6a3
 801a9f0:	0801c734 	.word	0x0801c734

0801a9f4 <__multiply>:
 801a9f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a9f8:	4614      	mov	r4, r2
 801a9fa:	690a      	ldr	r2, [r1, #16]
 801a9fc:	6923      	ldr	r3, [r4, #16]
 801a9fe:	429a      	cmp	r2, r3
 801aa00:	bfb8      	it	lt
 801aa02:	460b      	movlt	r3, r1
 801aa04:	460d      	mov	r5, r1
 801aa06:	bfbc      	itt	lt
 801aa08:	4625      	movlt	r5, r4
 801aa0a:	461c      	movlt	r4, r3
 801aa0c:	f8d5 a010 	ldr.w	sl, [r5, #16]
 801aa10:	f8d4 9010 	ldr.w	r9, [r4, #16]
 801aa14:	68ab      	ldr	r3, [r5, #8]
 801aa16:	6869      	ldr	r1, [r5, #4]
 801aa18:	eb0a 0709 	add.w	r7, sl, r9
 801aa1c:	42bb      	cmp	r3, r7
 801aa1e:	b085      	sub	sp, #20
 801aa20:	bfb8      	it	lt
 801aa22:	3101      	addlt	r1, #1
 801aa24:	f7ff fe8a 	bl	801a73c <_Balloc>
 801aa28:	b930      	cbnz	r0, 801aa38 <__multiply+0x44>
 801aa2a:	4602      	mov	r2, r0
 801aa2c:	4b42      	ldr	r3, [pc, #264]	; (801ab38 <__multiply+0x144>)
 801aa2e:	4843      	ldr	r0, [pc, #268]	; (801ab3c <__multiply+0x148>)
 801aa30:	f240 115d 	movw	r1, #349	; 0x15d
 801aa34:	f000 fcc2 	bl	801b3bc <__assert_func>
 801aa38:	f100 0614 	add.w	r6, r0, #20
 801aa3c:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 801aa40:	4633      	mov	r3, r6
 801aa42:	2200      	movs	r2, #0
 801aa44:	4543      	cmp	r3, r8
 801aa46:	d31e      	bcc.n	801aa86 <__multiply+0x92>
 801aa48:	f105 0c14 	add.w	ip, r5, #20
 801aa4c:	f104 0314 	add.w	r3, r4, #20
 801aa50:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 801aa54:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 801aa58:	9202      	str	r2, [sp, #8]
 801aa5a:	ebac 0205 	sub.w	r2, ip, r5
 801aa5e:	3a15      	subs	r2, #21
 801aa60:	f022 0203 	bic.w	r2, r2, #3
 801aa64:	3204      	adds	r2, #4
 801aa66:	f105 0115 	add.w	r1, r5, #21
 801aa6a:	458c      	cmp	ip, r1
 801aa6c:	bf38      	it	cc
 801aa6e:	2204      	movcc	r2, #4
 801aa70:	9201      	str	r2, [sp, #4]
 801aa72:	9a02      	ldr	r2, [sp, #8]
 801aa74:	9303      	str	r3, [sp, #12]
 801aa76:	429a      	cmp	r2, r3
 801aa78:	d808      	bhi.n	801aa8c <__multiply+0x98>
 801aa7a:	2f00      	cmp	r7, #0
 801aa7c:	dc55      	bgt.n	801ab2a <__multiply+0x136>
 801aa7e:	6107      	str	r7, [r0, #16]
 801aa80:	b005      	add	sp, #20
 801aa82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801aa86:	f843 2b04 	str.w	r2, [r3], #4
 801aa8a:	e7db      	b.n	801aa44 <__multiply+0x50>
 801aa8c:	f8b3 a000 	ldrh.w	sl, [r3]
 801aa90:	f1ba 0f00 	cmp.w	sl, #0
 801aa94:	d020      	beq.n	801aad8 <__multiply+0xe4>
 801aa96:	f105 0e14 	add.w	lr, r5, #20
 801aa9a:	46b1      	mov	r9, r6
 801aa9c:	2200      	movs	r2, #0
 801aa9e:	f85e 4b04 	ldr.w	r4, [lr], #4
 801aaa2:	f8d9 b000 	ldr.w	fp, [r9]
 801aaa6:	b2a1      	uxth	r1, r4
 801aaa8:	fa1f fb8b 	uxth.w	fp, fp
 801aaac:	fb0a b101 	mla	r1, sl, r1, fp
 801aab0:	4411      	add	r1, r2
 801aab2:	f8d9 2000 	ldr.w	r2, [r9]
 801aab6:	0c24      	lsrs	r4, r4, #16
 801aab8:	0c12      	lsrs	r2, r2, #16
 801aaba:	fb0a 2404 	mla	r4, sl, r4, r2
 801aabe:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 801aac2:	b289      	uxth	r1, r1
 801aac4:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 801aac8:	45f4      	cmp	ip, lr
 801aaca:	f849 1b04 	str.w	r1, [r9], #4
 801aace:	ea4f 4214 	mov.w	r2, r4, lsr #16
 801aad2:	d8e4      	bhi.n	801aa9e <__multiply+0xaa>
 801aad4:	9901      	ldr	r1, [sp, #4]
 801aad6:	5072      	str	r2, [r6, r1]
 801aad8:	9a03      	ldr	r2, [sp, #12]
 801aada:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801aade:	3304      	adds	r3, #4
 801aae0:	f1b9 0f00 	cmp.w	r9, #0
 801aae4:	d01f      	beq.n	801ab26 <__multiply+0x132>
 801aae6:	6834      	ldr	r4, [r6, #0]
 801aae8:	f105 0114 	add.w	r1, r5, #20
 801aaec:	46b6      	mov	lr, r6
 801aaee:	f04f 0a00 	mov.w	sl, #0
 801aaf2:	880a      	ldrh	r2, [r1, #0]
 801aaf4:	f8be b002 	ldrh.w	fp, [lr, #2]
 801aaf8:	fb09 b202 	mla	r2, r9, r2, fp
 801aafc:	4492      	add	sl, r2
 801aafe:	b2a4      	uxth	r4, r4
 801ab00:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 801ab04:	f84e 4b04 	str.w	r4, [lr], #4
 801ab08:	f851 4b04 	ldr.w	r4, [r1], #4
 801ab0c:	f8be 2000 	ldrh.w	r2, [lr]
 801ab10:	0c24      	lsrs	r4, r4, #16
 801ab12:	fb09 2404 	mla	r4, r9, r4, r2
 801ab16:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 801ab1a:	458c      	cmp	ip, r1
 801ab1c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 801ab20:	d8e7      	bhi.n	801aaf2 <__multiply+0xfe>
 801ab22:	9a01      	ldr	r2, [sp, #4]
 801ab24:	50b4      	str	r4, [r6, r2]
 801ab26:	3604      	adds	r6, #4
 801ab28:	e7a3      	b.n	801aa72 <__multiply+0x7e>
 801ab2a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801ab2e:	2b00      	cmp	r3, #0
 801ab30:	d1a5      	bne.n	801aa7e <__multiply+0x8a>
 801ab32:	3f01      	subs	r7, #1
 801ab34:	e7a1      	b.n	801aa7a <__multiply+0x86>
 801ab36:	bf00      	nop
 801ab38:	0801c6a3 	.word	0x0801c6a3
 801ab3c:	0801c734 	.word	0x0801c734

0801ab40 <__pow5mult>:
 801ab40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801ab44:	4615      	mov	r5, r2
 801ab46:	f012 0203 	ands.w	r2, r2, #3
 801ab4a:	4606      	mov	r6, r0
 801ab4c:	460f      	mov	r7, r1
 801ab4e:	d007      	beq.n	801ab60 <__pow5mult+0x20>
 801ab50:	4c25      	ldr	r4, [pc, #148]	; (801abe8 <__pow5mult+0xa8>)
 801ab52:	3a01      	subs	r2, #1
 801ab54:	2300      	movs	r3, #0
 801ab56:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801ab5a:	f7ff fe51 	bl	801a800 <__multadd>
 801ab5e:	4607      	mov	r7, r0
 801ab60:	10ad      	asrs	r5, r5, #2
 801ab62:	d03d      	beq.n	801abe0 <__pow5mult+0xa0>
 801ab64:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801ab66:	b97c      	cbnz	r4, 801ab88 <__pow5mult+0x48>
 801ab68:	2010      	movs	r0, #16
 801ab6a:	f7fc fdfb 	bl	8017764 <malloc>
 801ab6e:	4602      	mov	r2, r0
 801ab70:	6270      	str	r0, [r6, #36]	; 0x24
 801ab72:	b928      	cbnz	r0, 801ab80 <__pow5mult+0x40>
 801ab74:	4b1d      	ldr	r3, [pc, #116]	; (801abec <__pow5mult+0xac>)
 801ab76:	481e      	ldr	r0, [pc, #120]	; (801abf0 <__pow5mult+0xb0>)
 801ab78:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 801ab7c:	f000 fc1e 	bl	801b3bc <__assert_func>
 801ab80:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801ab84:	6004      	str	r4, [r0, #0]
 801ab86:	60c4      	str	r4, [r0, #12]
 801ab88:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801ab8c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801ab90:	b94c      	cbnz	r4, 801aba6 <__pow5mult+0x66>
 801ab92:	f240 2171 	movw	r1, #625	; 0x271
 801ab96:	4630      	mov	r0, r6
 801ab98:	f7ff ff16 	bl	801a9c8 <__i2b>
 801ab9c:	2300      	movs	r3, #0
 801ab9e:	f8c8 0008 	str.w	r0, [r8, #8]
 801aba2:	4604      	mov	r4, r0
 801aba4:	6003      	str	r3, [r0, #0]
 801aba6:	f04f 0900 	mov.w	r9, #0
 801abaa:	07eb      	lsls	r3, r5, #31
 801abac:	d50a      	bpl.n	801abc4 <__pow5mult+0x84>
 801abae:	4639      	mov	r1, r7
 801abb0:	4622      	mov	r2, r4
 801abb2:	4630      	mov	r0, r6
 801abb4:	f7ff ff1e 	bl	801a9f4 <__multiply>
 801abb8:	4639      	mov	r1, r7
 801abba:	4680      	mov	r8, r0
 801abbc:	4630      	mov	r0, r6
 801abbe:	f7ff fdfd 	bl	801a7bc <_Bfree>
 801abc2:	4647      	mov	r7, r8
 801abc4:	106d      	asrs	r5, r5, #1
 801abc6:	d00b      	beq.n	801abe0 <__pow5mult+0xa0>
 801abc8:	6820      	ldr	r0, [r4, #0]
 801abca:	b938      	cbnz	r0, 801abdc <__pow5mult+0x9c>
 801abcc:	4622      	mov	r2, r4
 801abce:	4621      	mov	r1, r4
 801abd0:	4630      	mov	r0, r6
 801abd2:	f7ff ff0f 	bl	801a9f4 <__multiply>
 801abd6:	6020      	str	r0, [r4, #0]
 801abd8:	f8c0 9000 	str.w	r9, [r0]
 801abdc:	4604      	mov	r4, r0
 801abde:	e7e4      	b.n	801abaa <__pow5mult+0x6a>
 801abe0:	4638      	mov	r0, r7
 801abe2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801abe6:	bf00      	nop
 801abe8:	0801c888 	.word	0x0801c888
 801abec:	0801c62d 	.word	0x0801c62d
 801abf0:	0801c734 	.word	0x0801c734

0801abf4 <__lshift>:
 801abf4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801abf8:	460c      	mov	r4, r1
 801abfa:	6849      	ldr	r1, [r1, #4]
 801abfc:	6923      	ldr	r3, [r4, #16]
 801abfe:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801ac02:	68a3      	ldr	r3, [r4, #8]
 801ac04:	4607      	mov	r7, r0
 801ac06:	4691      	mov	r9, r2
 801ac08:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801ac0c:	f108 0601 	add.w	r6, r8, #1
 801ac10:	42b3      	cmp	r3, r6
 801ac12:	db0b      	blt.n	801ac2c <__lshift+0x38>
 801ac14:	4638      	mov	r0, r7
 801ac16:	f7ff fd91 	bl	801a73c <_Balloc>
 801ac1a:	4605      	mov	r5, r0
 801ac1c:	b948      	cbnz	r0, 801ac32 <__lshift+0x3e>
 801ac1e:	4602      	mov	r2, r0
 801ac20:	4b28      	ldr	r3, [pc, #160]	; (801acc4 <__lshift+0xd0>)
 801ac22:	4829      	ldr	r0, [pc, #164]	; (801acc8 <__lshift+0xd4>)
 801ac24:	f240 11d9 	movw	r1, #473	; 0x1d9
 801ac28:	f000 fbc8 	bl	801b3bc <__assert_func>
 801ac2c:	3101      	adds	r1, #1
 801ac2e:	005b      	lsls	r3, r3, #1
 801ac30:	e7ee      	b.n	801ac10 <__lshift+0x1c>
 801ac32:	2300      	movs	r3, #0
 801ac34:	f100 0114 	add.w	r1, r0, #20
 801ac38:	f100 0210 	add.w	r2, r0, #16
 801ac3c:	4618      	mov	r0, r3
 801ac3e:	4553      	cmp	r3, sl
 801ac40:	db33      	blt.n	801acaa <__lshift+0xb6>
 801ac42:	6920      	ldr	r0, [r4, #16]
 801ac44:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801ac48:	f104 0314 	add.w	r3, r4, #20
 801ac4c:	f019 091f 	ands.w	r9, r9, #31
 801ac50:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801ac54:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801ac58:	d02b      	beq.n	801acb2 <__lshift+0xbe>
 801ac5a:	f1c9 0e20 	rsb	lr, r9, #32
 801ac5e:	468a      	mov	sl, r1
 801ac60:	2200      	movs	r2, #0
 801ac62:	6818      	ldr	r0, [r3, #0]
 801ac64:	fa00 f009 	lsl.w	r0, r0, r9
 801ac68:	4302      	orrs	r2, r0
 801ac6a:	f84a 2b04 	str.w	r2, [sl], #4
 801ac6e:	f853 2b04 	ldr.w	r2, [r3], #4
 801ac72:	459c      	cmp	ip, r3
 801ac74:	fa22 f20e 	lsr.w	r2, r2, lr
 801ac78:	d8f3      	bhi.n	801ac62 <__lshift+0x6e>
 801ac7a:	ebac 0304 	sub.w	r3, ip, r4
 801ac7e:	3b15      	subs	r3, #21
 801ac80:	f023 0303 	bic.w	r3, r3, #3
 801ac84:	3304      	adds	r3, #4
 801ac86:	f104 0015 	add.w	r0, r4, #21
 801ac8a:	4584      	cmp	ip, r0
 801ac8c:	bf38      	it	cc
 801ac8e:	2304      	movcc	r3, #4
 801ac90:	50ca      	str	r2, [r1, r3]
 801ac92:	b10a      	cbz	r2, 801ac98 <__lshift+0xa4>
 801ac94:	f108 0602 	add.w	r6, r8, #2
 801ac98:	3e01      	subs	r6, #1
 801ac9a:	4638      	mov	r0, r7
 801ac9c:	612e      	str	r6, [r5, #16]
 801ac9e:	4621      	mov	r1, r4
 801aca0:	f7ff fd8c 	bl	801a7bc <_Bfree>
 801aca4:	4628      	mov	r0, r5
 801aca6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801acaa:	f842 0f04 	str.w	r0, [r2, #4]!
 801acae:	3301      	adds	r3, #1
 801acb0:	e7c5      	b.n	801ac3e <__lshift+0x4a>
 801acb2:	3904      	subs	r1, #4
 801acb4:	f853 2b04 	ldr.w	r2, [r3], #4
 801acb8:	f841 2f04 	str.w	r2, [r1, #4]!
 801acbc:	459c      	cmp	ip, r3
 801acbe:	d8f9      	bhi.n	801acb4 <__lshift+0xc0>
 801acc0:	e7ea      	b.n	801ac98 <__lshift+0xa4>
 801acc2:	bf00      	nop
 801acc4:	0801c6a3 	.word	0x0801c6a3
 801acc8:	0801c734 	.word	0x0801c734

0801accc <__mcmp>:
 801accc:	b530      	push	{r4, r5, lr}
 801acce:	6902      	ldr	r2, [r0, #16]
 801acd0:	690c      	ldr	r4, [r1, #16]
 801acd2:	1b12      	subs	r2, r2, r4
 801acd4:	d10e      	bne.n	801acf4 <__mcmp+0x28>
 801acd6:	f100 0314 	add.w	r3, r0, #20
 801acda:	3114      	adds	r1, #20
 801acdc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801ace0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801ace4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 801ace8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801acec:	42a5      	cmp	r5, r4
 801acee:	d003      	beq.n	801acf8 <__mcmp+0x2c>
 801acf0:	d305      	bcc.n	801acfe <__mcmp+0x32>
 801acf2:	2201      	movs	r2, #1
 801acf4:	4610      	mov	r0, r2
 801acf6:	bd30      	pop	{r4, r5, pc}
 801acf8:	4283      	cmp	r3, r0
 801acfa:	d3f3      	bcc.n	801ace4 <__mcmp+0x18>
 801acfc:	e7fa      	b.n	801acf4 <__mcmp+0x28>
 801acfe:	f04f 32ff 	mov.w	r2, #4294967295
 801ad02:	e7f7      	b.n	801acf4 <__mcmp+0x28>

0801ad04 <__mdiff>:
 801ad04:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ad08:	460c      	mov	r4, r1
 801ad0a:	4606      	mov	r6, r0
 801ad0c:	4611      	mov	r1, r2
 801ad0e:	4620      	mov	r0, r4
 801ad10:	4617      	mov	r7, r2
 801ad12:	f7ff ffdb 	bl	801accc <__mcmp>
 801ad16:	1e05      	subs	r5, r0, #0
 801ad18:	d110      	bne.n	801ad3c <__mdiff+0x38>
 801ad1a:	4629      	mov	r1, r5
 801ad1c:	4630      	mov	r0, r6
 801ad1e:	f7ff fd0d 	bl	801a73c <_Balloc>
 801ad22:	b930      	cbnz	r0, 801ad32 <__mdiff+0x2e>
 801ad24:	4b39      	ldr	r3, [pc, #228]	; (801ae0c <__mdiff+0x108>)
 801ad26:	4602      	mov	r2, r0
 801ad28:	f240 2132 	movw	r1, #562	; 0x232
 801ad2c:	4838      	ldr	r0, [pc, #224]	; (801ae10 <__mdiff+0x10c>)
 801ad2e:	f000 fb45 	bl	801b3bc <__assert_func>
 801ad32:	2301      	movs	r3, #1
 801ad34:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801ad38:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ad3c:	bfa4      	itt	ge
 801ad3e:	463b      	movge	r3, r7
 801ad40:	4627      	movge	r7, r4
 801ad42:	4630      	mov	r0, r6
 801ad44:	6879      	ldr	r1, [r7, #4]
 801ad46:	bfa6      	itte	ge
 801ad48:	461c      	movge	r4, r3
 801ad4a:	2500      	movge	r5, #0
 801ad4c:	2501      	movlt	r5, #1
 801ad4e:	f7ff fcf5 	bl	801a73c <_Balloc>
 801ad52:	b920      	cbnz	r0, 801ad5e <__mdiff+0x5a>
 801ad54:	4b2d      	ldr	r3, [pc, #180]	; (801ae0c <__mdiff+0x108>)
 801ad56:	4602      	mov	r2, r0
 801ad58:	f44f 7110 	mov.w	r1, #576	; 0x240
 801ad5c:	e7e6      	b.n	801ad2c <__mdiff+0x28>
 801ad5e:	693e      	ldr	r6, [r7, #16]
 801ad60:	60c5      	str	r5, [r0, #12]
 801ad62:	6925      	ldr	r5, [r4, #16]
 801ad64:	f107 0114 	add.w	r1, r7, #20
 801ad68:	f104 0914 	add.w	r9, r4, #20
 801ad6c:	f100 0e14 	add.w	lr, r0, #20
 801ad70:	f107 0210 	add.w	r2, r7, #16
 801ad74:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 801ad78:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 801ad7c:	46f2      	mov	sl, lr
 801ad7e:	2700      	movs	r7, #0
 801ad80:	f859 3b04 	ldr.w	r3, [r9], #4
 801ad84:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801ad88:	fa1f f883 	uxth.w	r8, r3
 801ad8c:	fa17 f78b 	uxtah	r7, r7, fp
 801ad90:	0c1b      	lsrs	r3, r3, #16
 801ad92:	eba7 0808 	sub.w	r8, r7, r8
 801ad96:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801ad9a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801ad9e:	fa1f f888 	uxth.w	r8, r8
 801ada2:	141f      	asrs	r7, r3, #16
 801ada4:	454d      	cmp	r5, r9
 801ada6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801adaa:	f84a 3b04 	str.w	r3, [sl], #4
 801adae:	d8e7      	bhi.n	801ad80 <__mdiff+0x7c>
 801adb0:	1b2b      	subs	r3, r5, r4
 801adb2:	3b15      	subs	r3, #21
 801adb4:	f023 0303 	bic.w	r3, r3, #3
 801adb8:	3304      	adds	r3, #4
 801adba:	3415      	adds	r4, #21
 801adbc:	42a5      	cmp	r5, r4
 801adbe:	bf38      	it	cc
 801adc0:	2304      	movcc	r3, #4
 801adc2:	4419      	add	r1, r3
 801adc4:	4473      	add	r3, lr
 801adc6:	469e      	mov	lr, r3
 801adc8:	460d      	mov	r5, r1
 801adca:	4565      	cmp	r5, ip
 801adcc:	d30e      	bcc.n	801adec <__mdiff+0xe8>
 801adce:	f10c 0203 	add.w	r2, ip, #3
 801add2:	1a52      	subs	r2, r2, r1
 801add4:	f022 0203 	bic.w	r2, r2, #3
 801add8:	3903      	subs	r1, #3
 801adda:	458c      	cmp	ip, r1
 801addc:	bf38      	it	cc
 801adde:	2200      	movcc	r2, #0
 801ade0:	441a      	add	r2, r3
 801ade2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 801ade6:	b17b      	cbz	r3, 801ae08 <__mdiff+0x104>
 801ade8:	6106      	str	r6, [r0, #16]
 801adea:	e7a5      	b.n	801ad38 <__mdiff+0x34>
 801adec:	f855 8b04 	ldr.w	r8, [r5], #4
 801adf0:	fa17 f488 	uxtah	r4, r7, r8
 801adf4:	1422      	asrs	r2, r4, #16
 801adf6:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 801adfa:	b2a4      	uxth	r4, r4
 801adfc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 801ae00:	f84e 4b04 	str.w	r4, [lr], #4
 801ae04:	1417      	asrs	r7, r2, #16
 801ae06:	e7e0      	b.n	801adca <__mdiff+0xc6>
 801ae08:	3e01      	subs	r6, #1
 801ae0a:	e7ea      	b.n	801ade2 <__mdiff+0xde>
 801ae0c:	0801c6a3 	.word	0x0801c6a3
 801ae10:	0801c734 	.word	0x0801c734

0801ae14 <__ulp>:
 801ae14:	b082      	sub	sp, #8
 801ae16:	ed8d 0b00 	vstr	d0, [sp]
 801ae1a:	9b01      	ldr	r3, [sp, #4]
 801ae1c:	4912      	ldr	r1, [pc, #72]	; (801ae68 <__ulp+0x54>)
 801ae1e:	4019      	ands	r1, r3
 801ae20:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 801ae24:	2900      	cmp	r1, #0
 801ae26:	dd05      	ble.n	801ae34 <__ulp+0x20>
 801ae28:	2200      	movs	r2, #0
 801ae2a:	460b      	mov	r3, r1
 801ae2c:	ec43 2b10 	vmov	d0, r2, r3
 801ae30:	b002      	add	sp, #8
 801ae32:	4770      	bx	lr
 801ae34:	4249      	negs	r1, r1
 801ae36:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 801ae3a:	ea4f 5021 	mov.w	r0, r1, asr #20
 801ae3e:	f04f 0200 	mov.w	r2, #0
 801ae42:	f04f 0300 	mov.w	r3, #0
 801ae46:	da04      	bge.n	801ae52 <__ulp+0x3e>
 801ae48:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 801ae4c:	fa41 f300 	asr.w	r3, r1, r0
 801ae50:	e7ec      	b.n	801ae2c <__ulp+0x18>
 801ae52:	f1a0 0114 	sub.w	r1, r0, #20
 801ae56:	291e      	cmp	r1, #30
 801ae58:	bfda      	itte	le
 801ae5a:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 801ae5e:	fa20 f101 	lsrle.w	r1, r0, r1
 801ae62:	2101      	movgt	r1, #1
 801ae64:	460a      	mov	r2, r1
 801ae66:	e7e1      	b.n	801ae2c <__ulp+0x18>
 801ae68:	7ff00000 	.word	0x7ff00000

0801ae6c <__b2d>:
 801ae6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ae6e:	6905      	ldr	r5, [r0, #16]
 801ae70:	f100 0714 	add.w	r7, r0, #20
 801ae74:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 801ae78:	1f2e      	subs	r6, r5, #4
 801ae7a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 801ae7e:	4620      	mov	r0, r4
 801ae80:	f7ff fd52 	bl	801a928 <__hi0bits>
 801ae84:	f1c0 0320 	rsb	r3, r0, #32
 801ae88:	280a      	cmp	r0, #10
 801ae8a:	f8df c07c 	ldr.w	ip, [pc, #124]	; 801af08 <__b2d+0x9c>
 801ae8e:	600b      	str	r3, [r1, #0]
 801ae90:	dc14      	bgt.n	801aebc <__b2d+0x50>
 801ae92:	f1c0 0e0b 	rsb	lr, r0, #11
 801ae96:	fa24 f10e 	lsr.w	r1, r4, lr
 801ae9a:	42b7      	cmp	r7, r6
 801ae9c:	ea41 030c 	orr.w	r3, r1, ip
 801aea0:	bf34      	ite	cc
 801aea2:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801aea6:	2100      	movcs	r1, #0
 801aea8:	3015      	adds	r0, #21
 801aeaa:	fa04 f000 	lsl.w	r0, r4, r0
 801aeae:	fa21 f10e 	lsr.w	r1, r1, lr
 801aeb2:	ea40 0201 	orr.w	r2, r0, r1
 801aeb6:	ec43 2b10 	vmov	d0, r2, r3
 801aeba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801aebc:	42b7      	cmp	r7, r6
 801aebe:	bf3a      	itte	cc
 801aec0:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801aec4:	f1a5 0608 	subcc.w	r6, r5, #8
 801aec8:	2100      	movcs	r1, #0
 801aeca:	380b      	subs	r0, #11
 801aecc:	d017      	beq.n	801aefe <__b2d+0x92>
 801aece:	f1c0 0c20 	rsb	ip, r0, #32
 801aed2:	fa04 f500 	lsl.w	r5, r4, r0
 801aed6:	42be      	cmp	r6, r7
 801aed8:	fa21 f40c 	lsr.w	r4, r1, ip
 801aedc:	ea45 0504 	orr.w	r5, r5, r4
 801aee0:	bf8c      	ite	hi
 801aee2:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 801aee6:	2400      	movls	r4, #0
 801aee8:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 801aeec:	fa01 f000 	lsl.w	r0, r1, r0
 801aef0:	fa24 f40c 	lsr.w	r4, r4, ip
 801aef4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 801aef8:	ea40 0204 	orr.w	r2, r0, r4
 801aefc:	e7db      	b.n	801aeb6 <__b2d+0x4a>
 801aefe:	ea44 030c 	orr.w	r3, r4, ip
 801af02:	460a      	mov	r2, r1
 801af04:	e7d7      	b.n	801aeb6 <__b2d+0x4a>
 801af06:	bf00      	nop
 801af08:	3ff00000 	.word	0x3ff00000

0801af0c <__d2b>:
 801af0c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801af10:	4689      	mov	r9, r1
 801af12:	2101      	movs	r1, #1
 801af14:	ec57 6b10 	vmov	r6, r7, d0
 801af18:	4690      	mov	r8, r2
 801af1a:	f7ff fc0f 	bl	801a73c <_Balloc>
 801af1e:	4604      	mov	r4, r0
 801af20:	b930      	cbnz	r0, 801af30 <__d2b+0x24>
 801af22:	4602      	mov	r2, r0
 801af24:	4b25      	ldr	r3, [pc, #148]	; (801afbc <__d2b+0xb0>)
 801af26:	4826      	ldr	r0, [pc, #152]	; (801afc0 <__d2b+0xb4>)
 801af28:	f240 310a 	movw	r1, #778	; 0x30a
 801af2c:	f000 fa46 	bl	801b3bc <__assert_func>
 801af30:	f3c7 550a 	ubfx	r5, r7, #20, #11
 801af34:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801af38:	bb35      	cbnz	r5, 801af88 <__d2b+0x7c>
 801af3a:	2e00      	cmp	r6, #0
 801af3c:	9301      	str	r3, [sp, #4]
 801af3e:	d028      	beq.n	801af92 <__d2b+0x86>
 801af40:	4668      	mov	r0, sp
 801af42:	9600      	str	r6, [sp, #0]
 801af44:	f7ff fd10 	bl	801a968 <__lo0bits>
 801af48:	9900      	ldr	r1, [sp, #0]
 801af4a:	b300      	cbz	r0, 801af8e <__d2b+0x82>
 801af4c:	9a01      	ldr	r2, [sp, #4]
 801af4e:	f1c0 0320 	rsb	r3, r0, #32
 801af52:	fa02 f303 	lsl.w	r3, r2, r3
 801af56:	430b      	orrs	r3, r1
 801af58:	40c2      	lsrs	r2, r0
 801af5a:	6163      	str	r3, [r4, #20]
 801af5c:	9201      	str	r2, [sp, #4]
 801af5e:	9b01      	ldr	r3, [sp, #4]
 801af60:	61a3      	str	r3, [r4, #24]
 801af62:	2b00      	cmp	r3, #0
 801af64:	bf14      	ite	ne
 801af66:	2202      	movne	r2, #2
 801af68:	2201      	moveq	r2, #1
 801af6a:	6122      	str	r2, [r4, #16]
 801af6c:	b1d5      	cbz	r5, 801afa4 <__d2b+0x98>
 801af6e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801af72:	4405      	add	r5, r0
 801af74:	f8c9 5000 	str.w	r5, [r9]
 801af78:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801af7c:	f8c8 0000 	str.w	r0, [r8]
 801af80:	4620      	mov	r0, r4
 801af82:	b003      	add	sp, #12
 801af84:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801af88:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801af8c:	e7d5      	b.n	801af3a <__d2b+0x2e>
 801af8e:	6161      	str	r1, [r4, #20]
 801af90:	e7e5      	b.n	801af5e <__d2b+0x52>
 801af92:	a801      	add	r0, sp, #4
 801af94:	f7ff fce8 	bl	801a968 <__lo0bits>
 801af98:	9b01      	ldr	r3, [sp, #4]
 801af9a:	6163      	str	r3, [r4, #20]
 801af9c:	2201      	movs	r2, #1
 801af9e:	6122      	str	r2, [r4, #16]
 801afa0:	3020      	adds	r0, #32
 801afa2:	e7e3      	b.n	801af6c <__d2b+0x60>
 801afa4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801afa8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801afac:	f8c9 0000 	str.w	r0, [r9]
 801afb0:	6918      	ldr	r0, [r3, #16]
 801afb2:	f7ff fcb9 	bl	801a928 <__hi0bits>
 801afb6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801afba:	e7df      	b.n	801af7c <__d2b+0x70>
 801afbc:	0801c6a3 	.word	0x0801c6a3
 801afc0:	0801c734 	.word	0x0801c734

0801afc4 <__ratio>:
 801afc4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801afc8:	4688      	mov	r8, r1
 801afca:	4669      	mov	r1, sp
 801afcc:	4681      	mov	r9, r0
 801afce:	f7ff ff4d 	bl	801ae6c <__b2d>
 801afd2:	a901      	add	r1, sp, #4
 801afd4:	4640      	mov	r0, r8
 801afd6:	ec55 4b10 	vmov	r4, r5, d0
 801afda:	f7ff ff47 	bl	801ae6c <__b2d>
 801afde:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801afe2:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801afe6:	eba3 0c02 	sub.w	ip, r3, r2
 801afea:	e9dd 3200 	ldrd	r3, r2, [sp]
 801afee:	1a9b      	subs	r3, r3, r2
 801aff0:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 801aff4:	ec51 0b10 	vmov	r0, r1, d0
 801aff8:	2b00      	cmp	r3, #0
 801affa:	bfd6      	itet	le
 801affc:	460a      	movle	r2, r1
 801affe:	462a      	movgt	r2, r5
 801b000:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801b004:	468b      	mov	fp, r1
 801b006:	462f      	mov	r7, r5
 801b008:	bfd4      	ite	le
 801b00a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 801b00e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801b012:	4620      	mov	r0, r4
 801b014:	ee10 2a10 	vmov	r2, s0
 801b018:	465b      	mov	r3, fp
 801b01a:	4639      	mov	r1, r7
 801b01c:	f7e5 fc3e 	bl	800089c <__aeabi_ddiv>
 801b020:	ec41 0b10 	vmov	d0, r0, r1
 801b024:	b003      	add	sp, #12
 801b026:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801b02a <__copybits>:
 801b02a:	3901      	subs	r1, #1
 801b02c:	b570      	push	{r4, r5, r6, lr}
 801b02e:	1149      	asrs	r1, r1, #5
 801b030:	6914      	ldr	r4, [r2, #16]
 801b032:	3101      	adds	r1, #1
 801b034:	f102 0314 	add.w	r3, r2, #20
 801b038:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801b03c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801b040:	1f05      	subs	r5, r0, #4
 801b042:	42a3      	cmp	r3, r4
 801b044:	d30c      	bcc.n	801b060 <__copybits+0x36>
 801b046:	1aa3      	subs	r3, r4, r2
 801b048:	3b11      	subs	r3, #17
 801b04a:	f023 0303 	bic.w	r3, r3, #3
 801b04e:	3211      	adds	r2, #17
 801b050:	42a2      	cmp	r2, r4
 801b052:	bf88      	it	hi
 801b054:	2300      	movhi	r3, #0
 801b056:	4418      	add	r0, r3
 801b058:	2300      	movs	r3, #0
 801b05a:	4288      	cmp	r0, r1
 801b05c:	d305      	bcc.n	801b06a <__copybits+0x40>
 801b05e:	bd70      	pop	{r4, r5, r6, pc}
 801b060:	f853 6b04 	ldr.w	r6, [r3], #4
 801b064:	f845 6f04 	str.w	r6, [r5, #4]!
 801b068:	e7eb      	b.n	801b042 <__copybits+0x18>
 801b06a:	f840 3b04 	str.w	r3, [r0], #4
 801b06e:	e7f4      	b.n	801b05a <__copybits+0x30>

0801b070 <__any_on>:
 801b070:	f100 0214 	add.w	r2, r0, #20
 801b074:	6900      	ldr	r0, [r0, #16]
 801b076:	114b      	asrs	r3, r1, #5
 801b078:	4298      	cmp	r0, r3
 801b07a:	b510      	push	{r4, lr}
 801b07c:	db11      	blt.n	801b0a2 <__any_on+0x32>
 801b07e:	dd0a      	ble.n	801b096 <__any_on+0x26>
 801b080:	f011 011f 	ands.w	r1, r1, #31
 801b084:	d007      	beq.n	801b096 <__any_on+0x26>
 801b086:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801b08a:	fa24 f001 	lsr.w	r0, r4, r1
 801b08e:	fa00 f101 	lsl.w	r1, r0, r1
 801b092:	428c      	cmp	r4, r1
 801b094:	d10b      	bne.n	801b0ae <__any_on+0x3e>
 801b096:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801b09a:	4293      	cmp	r3, r2
 801b09c:	d803      	bhi.n	801b0a6 <__any_on+0x36>
 801b09e:	2000      	movs	r0, #0
 801b0a0:	bd10      	pop	{r4, pc}
 801b0a2:	4603      	mov	r3, r0
 801b0a4:	e7f7      	b.n	801b096 <__any_on+0x26>
 801b0a6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801b0aa:	2900      	cmp	r1, #0
 801b0ac:	d0f5      	beq.n	801b09a <__any_on+0x2a>
 801b0ae:	2001      	movs	r0, #1
 801b0b0:	e7f6      	b.n	801b0a0 <__any_on+0x30>

0801b0b2 <__ssputs_r>:
 801b0b2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b0b6:	688e      	ldr	r6, [r1, #8]
 801b0b8:	429e      	cmp	r6, r3
 801b0ba:	4682      	mov	sl, r0
 801b0bc:	460c      	mov	r4, r1
 801b0be:	4690      	mov	r8, r2
 801b0c0:	461f      	mov	r7, r3
 801b0c2:	d838      	bhi.n	801b136 <__ssputs_r+0x84>
 801b0c4:	898a      	ldrh	r2, [r1, #12]
 801b0c6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801b0ca:	d032      	beq.n	801b132 <__ssputs_r+0x80>
 801b0cc:	6825      	ldr	r5, [r4, #0]
 801b0ce:	6909      	ldr	r1, [r1, #16]
 801b0d0:	eba5 0901 	sub.w	r9, r5, r1
 801b0d4:	6965      	ldr	r5, [r4, #20]
 801b0d6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801b0da:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801b0de:	3301      	adds	r3, #1
 801b0e0:	444b      	add	r3, r9
 801b0e2:	106d      	asrs	r5, r5, #1
 801b0e4:	429d      	cmp	r5, r3
 801b0e6:	bf38      	it	cc
 801b0e8:	461d      	movcc	r5, r3
 801b0ea:	0553      	lsls	r3, r2, #21
 801b0ec:	d531      	bpl.n	801b152 <__ssputs_r+0xa0>
 801b0ee:	4629      	mov	r1, r5
 801b0f0:	f7fc fbd8 	bl	80178a4 <_malloc_r>
 801b0f4:	4606      	mov	r6, r0
 801b0f6:	b950      	cbnz	r0, 801b10e <__ssputs_r+0x5c>
 801b0f8:	230c      	movs	r3, #12
 801b0fa:	f8ca 3000 	str.w	r3, [sl]
 801b0fe:	89a3      	ldrh	r3, [r4, #12]
 801b100:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801b104:	81a3      	strh	r3, [r4, #12]
 801b106:	f04f 30ff 	mov.w	r0, #4294967295
 801b10a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b10e:	6921      	ldr	r1, [r4, #16]
 801b110:	464a      	mov	r2, r9
 801b112:	f7fc fb37 	bl	8017784 <memcpy>
 801b116:	89a3      	ldrh	r3, [r4, #12]
 801b118:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801b11c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801b120:	81a3      	strh	r3, [r4, #12]
 801b122:	6126      	str	r6, [r4, #16]
 801b124:	6165      	str	r5, [r4, #20]
 801b126:	444e      	add	r6, r9
 801b128:	eba5 0509 	sub.w	r5, r5, r9
 801b12c:	6026      	str	r6, [r4, #0]
 801b12e:	60a5      	str	r5, [r4, #8]
 801b130:	463e      	mov	r6, r7
 801b132:	42be      	cmp	r6, r7
 801b134:	d900      	bls.n	801b138 <__ssputs_r+0x86>
 801b136:	463e      	mov	r6, r7
 801b138:	4632      	mov	r2, r6
 801b13a:	6820      	ldr	r0, [r4, #0]
 801b13c:	4641      	mov	r1, r8
 801b13e:	f7fc fb2f 	bl	80177a0 <memmove>
 801b142:	68a3      	ldr	r3, [r4, #8]
 801b144:	6822      	ldr	r2, [r4, #0]
 801b146:	1b9b      	subs	r3, r3, r6
 801b148:	4432      	add	r2, r6
 801b14a:	60a3      	str	r3, [r4, #8]
 801b14c:	6022      	str	r2, [r4, #0]
 801b14e:	2000      	movs	r0, #0
 801b150:	e7db      	b.n	801b10a <__ssputs_r+0x58>
 801b152:	462a      	mov	r2, r5
 801b154:	f000 f962 	bl	801b41c <_realloc_r>
 801b158:	4606      	mov	r6, r0
 801b15a:	2800      	cmp	r0, #0
 801b15c:	d1e1      	bne.n	801b122 <__ssputs_r+0x70>
 801b15e:	6921      	ldr	r1, [r4, #16]
 801b160:	4650      	mov	r0, sl
 801b162:	f7fc fb4f 	bl	8017804 <_free_r>
 801b166:	e7c7      	b.n	801b0f8 <__ssputs_r+0x46>

0801b168 <_svfiprintf_r>:
 801b168:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b16c:	4698      	mov	r8, r3
 801b16e:	898b      	ldrh	r3, [r1, #12]
 801b170:	061b      	lsls	r3, r3, #24
 801b172:	b09d      	sub	sp, #116	; 0x74
 801b174:	4607      	mov	r7, r0
 801b176:	460d      	mov	r5, r1
 801b178:	4614      	mov	r4, r2
 801b17a:	d50e      	bpl.n	801b19a <_svfiprintf_r+0x32>
 801b17c:	690b      	ldr	r3, [r1, #16]
 801b17e:	b963      	cbnz	r3, 801b19a <_svfiprintf_r+0x32>
 801b180:	2140      	movs	r1, #64	; 0x40
 801b182:	f7fc fb8f 	bl	80178a4 <_malloc_r>
 801b186:	6028      	str	r0, [r5, #0]
 801b188:	6128      	str	r0, [r5, #16]
 801b18a:	b920      	cbnz	r0, 801b196 <_svfiprintf_r+0x2e>
 801b18c:	230c      	movs	r3, #12
 801b18e:	603b      	str	r3, [r7, #0]
 801b190:	f04f 30ff 	mov.w	r0, #4294967295
 801b194:	e0d1      	b.n	801b33a <_svfiprintf_r+0x1d2>
 801b196:	2340      	movs	r3, #64	; 0x40
 801b198:	616b      	str	r3, [r5, #20]
 801b19a:	2300      	movs	r3, #0
 801b19c:	9309      	str	r3, [sp, #36]	; 0x24
 801b19e:	2320      	movs	r3, #32
 801b1a0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801b1a4:	f8cd 800c 	str.w	r8, [sp, #12]
 801b1a8:	2330      	movs	r3, #48	; 0x30
 801b1aa:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801b354 <_svfiprintf_r+0x1ec>
 801b1ae:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801b1b2:	f04f 0901 	mov.w	r9, #1
 801b1b6:	4623      	mov	r3, r4
 801b1b8:	469a      	mov	sl, r3
 801b1ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 801b1be:	b10a      	cbz	r2, 801b1c4 <_svfiprintf_r+0x5c>
 801b1c0:	2a25      	cmp	r2, #37	; 0x25
 801b1c2:	d1f9      	bne.n	801b1b8 <_svfiprintf_r+0x50>
 801b1c4:	ebba 0b04 	subs.w	fp, sl, r4
 801b1c8:	d00b      	beq.n	801b1e2 <_svfiprintf_r+0x7a>
 801b1ca:	465b      	mov	r3, fp
 801b1cc:	4622      	mov	r2, r4
 801b1ce:	4629      	mov	r1, r5
 801b1d0:	4638      	mov	r0, r7
 801b1d2:	f7ff ff6e 	bl	801b0b2 <__ssputs_r>
 801b1d6:	3001      	adds	r0, #1
 801b1d8:	f000 80aa 	beq.w	801b330 <_svfiprintf_r+0x1c8>
 801b1dc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801b1de:	445a      	add	r2, fp
 801b1e0:	9209      	str	r2, [sp, #36]	; 0x24
 801b1e2:	f89a 3000 	ldrb.w	r3, [sl]
 801b1e6:	2b00      	cmp	r3, #0
 801b1e8:	f000 80a2 	beq.w	801b330 <_svfiprintf_r+0x1c8>
 801b1ec:	2300      	movs	r3, #0
 801b1ee:	f04f 32ff 	mov.w	r2, #4294967295
 801b1f2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801b1f6:	f10a 0a01 	add.w	sl, sl, #1
 801b1fa:	9304      	str	r3, [sp, #16]
 801b1fc:	9307      	str	r3, [sp, #28]
 801b1fe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801b202:	931a      	str	r3, [sp, #104]	; 0x68
 801b204:	4654      	mov	r4, sl
 801b206:	2205      	movs	r2, #5
 801b208:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b20c:	4851      	ldr	r0, [pc, #324]	; (801b354 <_svfiprintf_r+0x1ec>)
 801b20e:	f7e5 f80f 	bl	8000230 <memchr>
 801b212:	9a04      	ldr	r2, [sp, #16]
 801b214:	b9d8      	cbnz	r0, 801b24e <_svfiprintf_r+0xe6>
 801b216:	06d0      	lsls	r0, r2, #27
 801b218:	bf44      	itt	mi
 801b21a:	2320      	movmi	r3, #32
 801b21c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801b220:	0711      	lsls	r1, r2, #28
 801b222:	bf44      	itt	mi
 801b224:	232b      	movmi	r3, #43	; 0x2b
 801b226:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801b22a:	f89a 3000 	ldrb.w	r3, [sl]
 801b22e:	2b2a      	cmp	r3, #42	; 0x2a
 801b230:	d015      	beq.n	801b25e <_svfiprintf_r+0xf6>
 801b232:	9a07      	ldr	r2, [sp, #28]
 801b234:	4654      	mov	r4, sl
 801b236:	2000      	movs	r0, #0
 801b238:	f04f 0c0a 	mov.w	ip, #10
 801b23c:	4621      	mov	r1, r4
 801b23e:	f811 3b01 	ldrb.w	r3, [r1], #1
 801b242:	3b30      	subs	r3, #48	; 0x30
 801b244:	2b09      	cmp	r3, #9
 801b246:	d94e      	bls.n	801b2e6 <_svfiprintf_r+0x17e>
 801b248:	b1b0      	cbz	r0, 801b278 <_svfiprintf_r+0x110>
 801b24a:	9207      	str	r2, [sp, #28]
 801b24c:	e014      	b.n	801b278 <_svfiprintf_r+0x110>
 801b24e:	eba0 0308 	sub.w	r3, r0, r8
 801b252:	fa09 f303 	lsl.w	r3, r9, r3
 801b256:	4313      	orrs	r3, r2
 801b258:	9304      	str	r3, [sp, #16]
 801b25a:	46a2      	mov	sl, r4
 801b25c:	e7d2      	b.n	801b204 <_svfiprintf_r+0x9c>
 801b25e:	9b03      	ldr	r3, [sp, #12]
 801b260:	1d19      	adds	r1, r3, #4
 801b262:	681b      	ldr	r3, [r3, #0]
 801b264:	9103      	str	r1, [sp, #12]
 801b266:	2b00      	cmp	r3, #0
 801b268:	bfbb      	ittet	lt
 801b26a:	425b      	neglt	r3, r3
 801b26c:	f042 0202 	orrlt.w	r2, r2, #2
 801b270:	9307      	strge	r3, [sp, #28]
 801b272:	9307      	strlt	r3, [sp, #28]
 801b274:	bfb8      	it	lt
 801b276:	9204      	strlt	r2, [sp, #16]
 801b278:	7823      	ldrb	r3, [r4, #0]
 801b27a:	2b2e      	cmp	r3, #46	; 0x2e
 801b27c:	d10c      	bne.n	801b298 <_svfiprintf_r+0x130>
 801b27e:	7863      	ldrb	r3, [r4, #1]
 801b280:	2b2a      	cmp	r3, #42	; 0x2a
 801b282:	d135      	bne.n	801b2f0 <_svfiprintf_r+0x188>
 801b284:	9b03      	ldr	r3, [sp, #12]
 801b286:	1d1a      	adds	r2, r3, #4
 801b288:	681b      	ldr	r3, [r3, #0]
 801b28a:	9203      	str	r2, [sp, #12]
 801b28c:	2b00      	cmp	r3, #0
 801b28e:	bfb8      	it	lt
 801b290:	f04f 33ff 	movlt.w	r3, #4294967295
 801b294:	3402      	adds	r4, #2
 801b296:	9305      	str	r3, [sp, #20]
 801b298:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801b364 <_svfiprintf_r+0x1fc>
 801b29c:	7821      	ldrb	r1, [r4, #0]
 801b29e:	2203      	movs	r2, #3
 801b2a0:	4650      	mov	r0, sl
 801b2a2:	f7e4 ffc5 	bl	8000230 <memchr>
 801b2a6:	b140      	cbz	r0, 801b2ba <_svfiprintf_r+0x152>
 801b2a8:	2340      	movs	r3, #64	; 0x40
 801b2aa:	eba0 000a 	sub.w	r0, r0, sl
 801b2ae:	fa03 f000 	lsl.w	r0, r3, r0
 801b2b2:	9b04      	ldr	r3, [sp, #16]
 801b2b4:	4303      	orrs	r3, r0
 801b2b6:	3401      	adds	r4, #1
 801b2b8:	9304      	str	r3, [sp, #16]
 801b2ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b2be:	4826      	ldr	r0, [pc, #152]	; (801b358 <_svfiprintf_r+0x1f0>)
 801b2c0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801b2c4:	2206      	movs	r2, #6
 801b2c6:	f7e4 ffb3 	bl	8000230 <memchr>
 801b2ca:	2800      	cmp	r0, #0
 801b2cc:	d038      	beq.n	801b340 <_svfiprintf_r+0x1d8>
 801b2ce:	4b23      	ldr	r3, [pc, #140]	; (801b35c <_svfiprintf_r+0x1f4>)
 801b2d0:	bb1b      	cbnz	r3, 801b31a <_svfiprintf_r+0x1b2>
 801b2d2:	9b03      	ldr	r3, [sp, #12]
 801b2d4:	3307      	adds	r3, #7
 801b2d6:	f023 0307 	bic.w	r3, r3, #7
 801b2da:	3308      	adds	r3, #8
 801b2dc:	9303      	str	r3, [sp, #12]
 801b2de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b2e0:	4433      	add	r3, r6
 801b2e2:	9309      	str	r3, [sp, #36]	; 0x24
 801b2e4:	e767      	b.n	801b1b6 <_svfiprintf_r+0x4e>
 801b2e6:	fb0c 3202 	mla	r2, ip, r2, r3
 801b2ea:	460c      	mov	r4, r1
 801b2ec:	2001      	movs	r0, #1
 801b2ee:	e7a5      	b.n	801b23c <_svfiprintf_r+0xd4>
 801b2f0:	2300      	movs	r3, #0
 801b2f2:	3401      	adds	r4, #1
 801b2f4:	9305      	str	r3, [sp, #20]
 801b2f6:	4619      	mov	r1, r3
 801b2f8:	f04f 0c0a 	mov.w	ip, #10
 801b2fc:	4620      	mov	r0, r4
 801b2fe:	f810 2b01 	ldrb.w	r2, [r0], #1
 801b302:	3a30      	subs	r2, #48	; 0x30
 801b304:	2a09      	cmp	r2, #9
 801b306:	d903      	bls.n	801b310 <_svfiprintf_r+0x1a8>
 801b308:	2b00      	cmp	r3, #0
 801b30a:	d0c5      	beq.n	801b298 <_svfiprintf_r+0x130>
 801b30c:	9105      	str	r1, [sp, #20]
 801b30e:	e7c3      	b.n	801b298 <_svfiprintf_r+0x130>
 801b310:	fb0c 2101 	mla	r1, ip, r1, r2
 801b314:	4604      	mov	r4, r0
 801b316:	2301      	movs	r3, #1
 801b318:	e7f0      	b.n	801b2fc <_svfiprintf_r+0x194>
 801b31a:	ab03      	add	r3, sp, #12
 801b31c:	9300      	str	r3, [sp, #0]
 801b31e:	462a      	mov	r2, r5
 801b320:	4b0f      	ldr	r3, [pc, #60]	; (801b360 <_svfiprintf_r+0x1f8>)
 801b322:	a904      	add	r1, sp, #16
 801b324:	4638      	mov	r0, r7
 801b326:	f7fc fbb7 	bl	8017a98 <_printf_float>
 801b32a:	1c42      	adds	r2, r0, #1
 801b32c:	4606      	mov	r6, r0
 801b32e:	d1d6      	bne.n	801b2de <_svfiprintf_r+0x176>
 801b330:	89ab      	ldrh	r3, [r5, #12]
 801b332:	065b      	lsls	r3, r3, #25
 801b334:	f53f af2c 	bmi.w	801b190 <_svfiprintf_r+0x28>
 801b338:	9809      	ldr	r0, [sp, #36]	; 0x24
 801b33a:	b01d      	add	sp, #116	; 0x74
 801b33c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b340:	ab03      	add	r3, sp, #12
 801b342:	9300      	str	r3, [sp, #0]
 801b344:	462a      	mov	r2, r5
 801b346:	4b06      	ldr	r3, [pc, #24]	; (801b360 <_svfiprintf_r+0x1f8>)
 801b348:	a904      	add	r1, sp, #16
 801b34a:	4638      	mov	r0, r7
 801b34c:	f7fc fe48 	bl	8017fe0 <_printf_i>
 801b350:	e7eb      	b.n	801b32a <_svfiprintf_r+0x1c2>
 801b352:	bf00      	nop
 801b354:	0801c894 	.word	0x0801c894
 801b358:	0801c89e 	.word	0x0801c89e
 801b35c:	08017a99 	.word	0x08017a99
 801b360:	0801b0b3 	.word	0x0801b0b3
 801b364:	0801c89a 	.word	0x0801c89a

0801b368 <_read_r>:
 801b368:	b538      	push	{r3, r4, r5, lr}
 801b36a:	4d07      	ldr	r5, [pc, #28]	; (801b388 <_read_r+0x20>)
 801b36c:	4604      	mov	r4, r0
 801b36e:	4608      	mov	r0, r1
 801b370:	4611      	mov	r1, r2
 801b372:	2200      	movs	r2, #0
 801b374:	602a      	str	r2, [r5, #0]
 801b376:	461a      	mov	r2, r3
 801b378:	f7fb ff9a 	bl	80172b0 <_read>
 801b37c:	1c43      	adds	r3, r0, #1
 801b37e:	d102      	bne.n	801b386 <_read_r+0x1e>
 801b380:	682b      	ldr	r3, [r5, #0]
 801b382:	b103      	cbz	r3, 801b386 <_read_r+0x1e>
 801b384:	6023      	str	r3, [r4, #0]
 801b386:	bd38      	pop	{r3, r4, r5, pc}
 801b388:	2001e3f8 	.word	0x2001e3f8
 801b38c:	00000000 	.word	0x00000000

0801b390 <nan>:
 801b390:	ed9f 0b01 	vldr	d0, [pc, #4]	; 801b398 <nan+0x8>
 801b394:	4770      	bx	lr
 801b396:	bf00      	nop
 801b398:	00000000 	.word	0x00000000
 801b39c:	7ff80000 	.word	0x7ff80000

0801b3a0 <__ascii_wctomb>:
 801b3a0:	b149      	cbz	r1, 801b3b6 <__ascii_wctomb+0x16>
 801b3a2:	2aff      	cmp	r2, #255	; 0xff
 801b3a4:	bf85      	ittet	hi
 801b3a6:	238a      	movhi	r3, #138	; 0x8a
 801b3a8:	6003      	strhi	r3, [r0, #0]
 801b3aa:	700a      	strbls	r2, [r1, #0]
 801b3ac:	f04f 30ff 	movhi.w	r0, #4294967295
 801b3b0:	bf98      	it	ls
 801b3b2:	2001      	movls	r0, #1
 801b3b4:	4770      	bx	lr
 801b3b6:	4608      	mov	r0, r1
 801b3b8:	4770      	bx	lr
	...

0801b3bc <__assert_func>:
 801b3bc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801b3be:	4614      	mov	r4, r2
 801b3c0:	461a      	mov	r2, r3
 801b3c2:	4b09      	ldr	r3, [pc, #36]	; (801b3e8 <__assert_func+0x2c>)
 801b3c4:	681b      	ldr	r3, [r3, #0]
 801b3c6:	4605      	mov	r5, r0
 801b3c8:	68d8      	ldr	r0, [r3, #12]
 801b3ca:	b14c      	cbz	r4, 801b3e0 <__assert_func+0x24>
 801b3cc:	4b07      	ldr	r3, [pc, #28]	; (801b3ec <__assert_func+0x30>)
 801b3ce:	9100      	str	r1, [sp, #0]
 801b3d0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801b3d4:	4906      	ldr	r1, [pc, #24]	; (801b3f0 <__assert_func+0x34>)
 801b3d6:	462b      	mov	r3, r5
 801b3d8:	f000 f80e 	bl	801b3f8 <fiprintf>
 801b3dc:	f000 f99e 	bl	801b71c <abort>
 801b3e0:	4b04      	ldr	r3, [pc, #16]	; (801b3f4 <__assert_func+0x38>)
 801b3e2:	461c      	mov	r4, r3
 801b3e4:	e7f3      	b.n	801b3ce <__assert_func+0x12>
 801b3e6:	bf00      	nop
 801b3e8:	2000036c 	.word	0x2000036c
 801b3ec:	0801c8a5 	.word	0x0801c8a5
 801b3f0:	0801c8b2 	.word	0x0801c8b2
 801b3f4:	0801c8e0 	.word	0x0801c8e0

0801b3f8 <fiprintf>:
 801b3f8:	b40e      	push	{r1, r2, r3}
 801b3fa:	b503      	push	{r0, r1, lr}
 801b3fc:	4601      	mov	r1, r0
 801b3fe:	ab03      	add	r3, sp, #12
 801b400:	4805      	ldr	r0, [pc, #20]	; (801b418 <fiprintf+0x20>)
 801b402:	f853 2b04 	ldr.w	r2, [r3], #4
 801b406:	6800      	ldr	r0, [r0, #0]
 801b408:	9301      	str	r3, [sp, #4]
 801b40a:	f000 f857 	bl	801b4bc <_vfiprintf_r>
 801b40e:	b002      	add	sp, #8
 801b410:	f85d eb04 	ldr.w	lr, [sp], #4
 801b414:	b003      	add	sp, #12
 801b416:	4770      	bx	lr
 801b418:	2000036c 	.word	0x2000036c

0801b41c <_realloc_r>:
 801b41c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b41e:	4607      	mov	r7, r0
 801b420:	4614      	mov	r4, r2
 801b422:	460e      	mov	r6, r1
 801b424:	b921      	cbnz	r1, 801b430 <_realloc_r+0x14>
 801b426:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801b42a:	4611      	mov	r1, r2
 801b42c:	f7fc ba3a 	b.w	80178a4 <_malloc_r>
 801b430:	b922      	cbnz	r2, 801b43c <_realloc_r+0x20>
 801b432:	f7fc f9e7 	bl	8017804 <_free_r>
 801b436:	4625      	mov	r5, r4
 801b438:	4628      	mov	r0, r5
 801b43a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b43c:	f000 f975 	bl	801b72a <_malloc_usable_size_r>
 801b440:	42a0      	cmp	r0, r4
 801b442:	d20f      	bcs.n	801b464 <_realloc_r+0x48>
 801b444:	4621      	mov	r1, r4
 801b446:	4638      	mov	r0, r7
 801b448:	f7fc fa2c 	bl	80178a4 <_malloc_r>
 801b44c:	4605      	mov	r5, r0
 801b44e:	2800      	cmp	r0, #0
 801b450:	d0f2      	beq.n	801b438 <_realloc_r+0x1c>
 801b452:	4631      	mov	r1, r6
 801b454:	4622      	mov	r2, r4
 801b456:	f7fc f995 	bl	8017784 <memcpy>
 801b45a:	4631      	mov	r1, r6
 801b45c:	4638      	mov	r0, r7
 801b45e:	f7fc f9d1 	bl	8017804 <_free_r>
 801b462:	e7e9      	b.n	801b438 <_realloc_r+0x1c>
 801b464:	4635      	mov	r5, r6
 801b466:	e7e7      	b.n	801b438 <_realloc_r+0x1c>

0801b468 <__sfputc_r>:
 801b468:	6893      	ldr	r3, [r2, #8]
 801b46a:	3b01      	subs	r3, #1
 801b46c:	2b00      	cmp	r3, #0
 801b46e:	b410      	push	{r4}
 801b470:	6093      	str	r3, [r2, #8]
 801b472:	da08      	bge.n	801b486 <__sfputc_r+0x1e>
 801b474:	6994      	ldr	r4, [r2, #24]
 801b476:	42a3      	cmp	r3, r4
 801b478:	db01      	blt.n	801b47e <__sfputc_r+0x16>
 801b47a:	290a      	cmp	r1, #10
 801b47c:	d103      	bne.n	801b486 <__sfputc_r+0x1e>
 801b47e:	f85d 4b04 	ldr.w	r4, [sp], #4
 801b482:	f7fd be39 	b.w	80190f8 <__swbuf_r>
 801b486:	6813      	ldr	r3, [r2, #0]
 801b488:	1c58      	adds	r0, r3, #1
 801b48a:	6010      	str	r0, [r2, #0]
 801b48c:	7019      	strb	r1, [r3, #0]
 801b48e:	4608      	mov	r0, r1
 801b490:	f85d 4b04 	ldr.w	r4, [sp], #4
 801b494:	4770      	bx	lr

0801b496 <__sfputs_r>:
 801b496:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b498:	4606      	mov	r6, r0
 801b49a:	460f      	mov	r7, r1
 801b49c:	4614      	mov	r4, r2
 801b49e:	18d5      	adds	r5, r2, r3
 801b4a0:	42ac      	cmp	r4, r5
 801b4a2:	d101      	bne.n	801b4a8 <__sfputs_r+0x12>
 801b4a4:	2000      	movs	r0, #0
 801b4a6:	e007      	b.n	801b4b8 <__sfputs_r+0x22>
 801b4a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b4ac:	463a      	mov	r2, r7
 801b4ae:	4630      	mov	r0, r6
 801b4b0:	f7ff ffda 	bl	801b468 <__sfputc_r>
 801b4b4:	1c43      	adds	r3, r0, #1
 801b4b6:	d1f3      	bne.n	801b4a0 <__sfputs_r+0xa>
 801b4b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801b4bc <_vfiprintf_r>:
 801b4bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b4c0:	460d      	mov	r5, r1
 801b4c2:	b09d      	sub	sp, #116	; 0x74
 801b4c4:	4614      	mov	r4, r2
 801b4c6:	4698      	mov	r8, r3
 801b4c8:	4606      	mov	r6, r0
 801b4ca:	b118      	cbz	r0, 801b4d4 <_vfiprintf_r+0x18>
 801b4cc:	6983      	ldr	r3, [r0, #24]
 801b4ce:	b90b      	cbnz	r3, 801b4d4 <_vfiprintf_r+0x18>
 801b4d0:	f7fc f81e 	bl	8017510 <__sinit>
 801b4d4:	4b89      	ldr	r3, [pc, #548]	; (801b6fc <_vfiprintf_r+0x240>)
 801b4d6:	429d      	cmp	r5, r3
 801b4d8:	d11b      	bne.n	801b512 <_vfiprintf_r+0x56>
 801b4da:	6875      	ldr	r5, [r6, #4]
 801b4dc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801b4de:	07d9      	lsls	r1, r3, #31
 801b4e0:	d405      	bmi.n	801b4ee <_vfiprintf_r+0x32>
 801b4e2:	89ab      	ldrh	r3, [r5, #12]
 801b4e4:	059a      	lsls	r2, r3, #22
 801b4e6:	d402      	bmi.n	801b4ee <_vfiprintf_r+0x32>
 801b4e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801b4ea:	f7fc f8d4 	bl	8017696 <__retarget_lock_acquire_recursive>
 801b4ee:	89ab      	ldrh	r3, [r5, #12]
 801b4f0:	071b      	lsls	r3, r3, #28
 801b4f2:	d501      	bpl.n	801b4f8 <_vfiprintf_r+0x3c>
 801b4f4:	692b      	ldr	r3, [r5, #16]
 801b4f6:	b9eb      	cbnz	r3, 801b534 <_vfiprintf_r+0x78>
 801b4f8:	4629      	mov	r1, r5
 801b4fa:	4630      	mov	r0, r6
 801b4fc:	f7fd fe60 	bl	80191c0 <__swsetup_r>
 801b500:	b1c0      	cbz	r0, 801b534 <_vfiprintf_r+0x78>
 801b502:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801b504:	07dc      	lsls	r4, r3, #31
 801b506:	d50e      	bpl.n	801b526 <_vfiprintf_r+0x6a>
 801b508:	f04f 30ff 	mov.w	r0, #4294967295
 801b50c:	b01d      	add	sp, #116	; 0x74
 801b50e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b512:	4b7b      	ldr	r3, [pc, #492]	; (801b700 <_vfiprintf_r+0x244>)
 801b514:	429d      	cmp	r5, r3
 801b516:	d101      	bne.n	801b51c <_vfiprintf_r+0x60>
 801b518:	68b5      	ldr	r5, [r6, #8]
 801b51a:	e7df      	b.n	801b4dc <_vfiprintf_r+0x20>
 801b51c:	4b79      	ldr	r3, [pc, #484]	; (801b704 <_vfiprintf_r+0x248>)
 801b51e:	429d      	cmp	r5, r3
 801b520:	bf08      	it	eq
 801b522:	68f5      	ldreq	r5, [r6, #12]
 801b524:	e7da      	b.n	801b4dc <_vfiprintf_r+0x20>
 801b526:	89ab      	ldrh	r3, [r5, #12]
 801b528:	0598      	lsls	r0, r3, #22
 801b52a:	d4ed      	bmi.n	801b508 <_vfiprintf_r+0x4c>
 801b52c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801b52e:	f7fc f8b3 	bl	8017698 <__retarget_lock_release_recursive>
 801b532:	e7e9      	b.n	801b508 <_vfiprintf_r+0x4c>
 801b534:	2300      	movs	r3, #0
 801b536:	9309      	str	r3, [sp, #36]	; 0x24
 801b538:	2320      	movs	r3, #32
 801b53a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801b53e:	f8cd 800c 	str.w	r8, [sp, #12]
 801b542:	2330      	movs	r3, #48	; 0x30
 801b544:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801b708 <_vfiprintf_r+0x24c>
 801b548:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801b54c:	f04f 0901 	mov.w	r9, #1
 801b550:	4623      	mov	r3, r4
 801b552:	469a      	mov	sl, r3
 801b554:	f813 2b01 	ldrb.w	r2, [r3], #1
 801b558:	b10a      	cbz	r2, 801b55e <_vfiprintf_r+0xa2>
 801b55a:	2a25      	cmp	r2, #37	; 0x25
 801b55c:	d1f9      	bne.n	801b552 <_vfiprintf_r+0x96>
 801b55e:	ebba 0b04 	subs.w	fp, sl, r4
 801b562:	d00b      	beq.n	801b57c <_vfiprintf_r+0xc0>
 801b564:	465b      	mov	r3, fp
 801b566:	4622      	mov	r2, r4
 801b568:	4629      	mov	r1, r5
 801b56a:	4630      	mov	r0, r6
 801b56c:	f7ff ff93 	bl	801b496 <__sfputs_r>
 801b570:	3001      	adds	r0, #1
 801b572:	f000 80aa 	beq.w	801b6ca <_vfiprintf_r+0x20e>
 801b576:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801b578:	445a      	add	r2, fp
 801b57a:	9209      	str	r2, [sp, #36]	; 0x24
 801b57c:	f89a 3000 	ldrb.w	r3, [sl]
 801b580:	2b00      	cmp	r3, #0
 801b582:	f000 80a2 	beq.w	801b6ca <_vfiprintf_r+0x20e>
 801b586:	2300      	movs	r3, #0
 801b588:	f04f 32ff 	mov.w	r2, #4294967295
 801b58c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801b590:	f10a 0a01 	add.w	sl, sl, #1
 801b594:	9304      	str	r3, [sp, #16]
 801b596:	9307      	str	r3, [sp, #28]
 801b598:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801b59c:	931a      	str	r3, [sp, #104]	; 0x68
 801b59e:	4654      	mov	r4, sl
 801b5a0:	2205      	movs	r2, #5
 801b5a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b5a6:	4858      	ldr	r0, [pc, #352]	; (801b708 <_vfiprintf_r+0x24c>)
 801b5a8:	f7e4 fe42 	bl	8000230 <memchr>
 801b5ac:	9a04      	ldr	r2, [sp, #16]
 801b5ae:	b9d8      	cbnz	r0, 801b5e8 <_vfiprintf_r+0x12c>
 801b5b0:	06d1      	lsls	r1, r2, #27
 801b5b2:	bf44      	itt	mi
 801b5b4:	2320      	movmi	r3, #32
 801b5b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801b5ba:	0713      	lsls	r3, r2, #28
 801b5bc:	bf44      	itt	mi
 801b5be:	232b      	movmi	r3, #43	; 0x2b
 801b5c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801b5c4:	f89a 3000 	ldrb.w	r3, [sl]
 801b5c8:	2b2a      	cmp	r3, #42	; 0x2a
 801b5ca:	d015      	beq.n	801b5f8 <_vfiprintf_r+0x13c>
 801b5cc:	9a07      	ldr	r2, [sp, #28]
 801b5ce:	4654      	mov	r4, sl
 801b5d0:	2000      	movs	r0, #0
 801b5d2:	f04f 0c0a 	mov.w	ip, #10
 801b5d6:	4621      	mov	r1, r4
 801b5d8:	f811 3b01 	ldrb.w	r3, [r1], #1
 801b5dc:	3b30      	subs	r3, #48	; 0x30
 801b5de:	2b09      	cmp	r3, #9
 801b5e0:	d94e      	bls.n	801b680 <_vfiprintf_r+0x1c4>
 801b5e2:	b1b0      	cbz	r0, 801b612 <_vfiprintf_r+0x156>
 801b5e4:	9207      	str	r2, [sp, #28]
 801b5e6:	e014      	b.n	801b612 <_vfiprintf_r+0x156>
 801b5e8:	eba0 0308 	sub.w	r3, r0, r8
 801b5ec:	fa09 f303 	lsl.w	r3, r9, r3
 801b5f0:	4313      	orrs	r3, r2
 801b5f2:	9304      	str	r3, [sp, #16]
 801b5f4:	46a2      	mov	sl, r4
 801b5f6:	e7d2      	b.n	801b59e <_vfiprintf_r+0xe2>
 801b5f8:	9b03      	ldr	r3, [sp, #12]
 801b5fa:	1d19      	adds	r1, r3, #4
 801b5fc:	681b      	ldr	r3, [r3, #0]
 801b5fe:	9103      	str	r1, [sp, #12]
 801b600:	2b00      	cmp	r3, #0
 801b602:	bfbb      	ittet	lt
 801b604:	425b      	neglt	r3, r3
 801b606:	f042 0202 	orrlt.w	r2, r2, #2
 801b60a:	9307      	strge	r3, [sp, #28]
 801b60c:	9307      	strlt	r3, [sp, #28]
 801b60e:	bfb8      	it	lt
 801b610:	9204      	strlt	r2, [sp, #16]
 801b612:	7823      	ldrb	r3, [r4, #0]
 801b614:	2b2e      	cmp	r3, #46	; 0x2e
 801b616:	d10c      	bne.n	801b632 <_vfiprintf_r+0x176>
 801b618:	7863      	ldrb	r3, [r4, #1]
 801b61a:	2b2a      	cmp	r3, #42	; 0x2a
 801b61c:	d135      	bne.n	801b68a <_vfiprintf_r+0x1ce>
 801b61e:	9b03      	ldr	r3, [sp, #12]
 801b620:	1d1a      	adds	r2, r3, #4
 801b622:	681b      	ldr	r3, [r3, #0]
 801b624:	9203      	str	r2, [sp, #12]
 801b626:	2b00      	cmp	r3, #0
 801b628:	bfb8      	it	lt
 801b62a:	f04f 33ff 	movlt.w	r3, #4294967295
 801b62e:	3402      	adds	r4, #2
 801b630:	9305      	str	r3, [sp, #20]
 801b632:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801b718 <_vfiprintf_r+0x25c>
 801b636:	7821      	ldrb	r1, [r4, #0]
 801b638:	2203      	movs	r2, #3
 801b63a:	4650      	mov	r0, sl
 801b63c:	f7e4 fdf8 	bl	8000230 <memchr>
 801b640:	b140      	cbz	r0, 801b654 <_vfiprintf_r+0x198>
 801b642:	2340      	movs	r3, #64	; 0x40
 801b644:	eba0 000a 	sub.w	r0, r0, sl
 801b648:	fa03 f000 	lsl.w	r0, r3, r0
 801b64c:	9b04      	ldr	r3, [sp, #16]
 801b64e:	4303      	orrs	r3, r0
 801b650:	3401      	adds	r4, #1
 801b652:	9304      	str	r3, [sp, #16]
 801b654:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b658:	482c      	ldr	r0, [pc, #176]	; (801b70c <_vfiprintf_r+0x250>)
 801b65a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801b65e:	2206      	movs	r2, #6
 801b660:	f7e4 fde6 	bl	8000230 <memchr>
 801b664:	2800      	cmp	r0, #0
 801b666:	d03f      	beq.n	801b6e8 <_vfiprintf_r+0x22c>
 801b668:	4b29      	ldr	r3, [pc, #164]	; (801b710 <_vfiprintf_r+0x254>)
 801b66a:	bb1b      	cbnz	r3, 801b6b4 <_vfiprintf_r+0x1f8>
 801b66c:	9b03      	ldr	r3, [sp, #12]
 801b66e:	3307      	adds	r3, #7
 801b670:	f023 0307 	bic.w	r3, r3, #7
 801b674:	3308      	adds	r3, #8
 801b676:	9303      	str	r3, [sp, #12]
 801b678:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b67a:	443b      	add	r3, r7
 801b67c:	9309      	str	r3, [sp, #36]	; 0x24
 801b67e:	e767      	b.n	801b550 <_vfiprintf_r+0x94>
 801b680:	fb0c 3202 	mla	r2, ip, r2, r3
 801b684:	460c      	mov	r4, r1
 801b686:	2001      	movs	r0, #1
 801b688:	e7a5      	b.n	801b5d6 <_vfiprintf_r+0x11a>
 801b68a:	2300      	movs	r3, #0
 801b68c:	3401      	adds	r4, #1
 801b68e:	9305      	str	r3, [sp, #20]
 801b690:	4619      	mov	r1, r3
 801b692:	f04f 0c0a 	mov.w	ip, #10
 801b696:	4620      	mov	r0, r4
 801b698:	f810 2b01 	ldrb.w	r2, [r0], #1
 801b69c:	3a30      	subs	r2, #48	; 0x30
 801b69e:	2a09      	cmp	r2, #9
 801b6a0:	d903      	bls.n	801b6aa <_vfiprintf_r+0x1ee>
 801b6a2:	2b00      	cmp	r3, #0
 801b6a4:	d0c5      	beq.n	801b632 <_vfiprintf_r+0x176>
 801b6a6:	9105      	str	r1, [sp, #20]
 801b6a8:	e7c3      	b.n	801b632 <_vfiprintf_r+0x176>
 801b6aa:	fb0c 2101 	mla	r1, ip, r1, r2
 801b6ae:	4604      	mov	r4, r0
 801b6b0:	2301      	movs	r3, #1
 801b6b2:	e7f0      	b.n	801b696 <_vfiprintf_r+0x1da>
 801b6b4:	ab03      	add	r3, sp, #12
 801b6b6:	9300      	str	r3, [sp, #0]
 801b6b8:	462a      	mov	r2, r5
 801b6ba:	4b16      	ldr	r3, [pc, #88]	; (801b714 <_vfiprintf_r+0x258>)
 801b6bc:	a904      	add	r1, sp, #16
 801b6be:	4630      	mov	r0, r6
 801b6c0:	f7fc f9ea 	bl	8017a98 <_printf_float>
 801b6c4:	4607      	mov	r7, r0
 801b6c6:	1c78      	adds	r0, r7, #1
 801b6c8:	d1d6      	bne.n	801b678 <_vfiprintf_r+0x1bc>
 801b6ca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801b6cc:	07d9      	lsls	r1, r3, #31
 801b6ce:	d405      	bmi.n	801b6dc <_vfiprintf_r+0x220>
 801b6d0:	89ab      	ldrh	r3, [r5, #12]
 801b6d2:	059a      	lsls	r2, r3, #22
 801b6d4:	d402      	bmi.n	801b6dc <_vfiprintf_r+0x220>
 801b6d6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801b6d8:	f7fb ffde 	bl	8017698 <__retarget_lock_release_recursive>
 801b6dc:	89ab      	ldrh	r3, [r5, #12]
 801b6de:	065b      	lsls	r3, r3, #25
 801b6e0:	f53f af12 	bmi.w	801b508 <_vfiprintf_r+0x4c>
 801b6e4:	9809      	ldr	r0, [sp, #36]	; 0x24
 801b6e6:	e711      	b.n	801b50c <_vfiprintf_r+0x50>
 801b6e8:	ab03      	add	r3, sp, #12
 801b6ea:	9300      	str	r3, [sp, #0]
 801b6ec:	462a      	mov	r2, r5
 801b6ee:	4b09      	ldr	r3, [pc, #36]	; (801b714 <_vfiprintf_r+0x258>)
 801b6f0:	a904      	add	r1, sp, #16
 801b6f2:	4630      	mov	r0, r6
 801b6f4:	f7fc fc74 	bl	8017fe0 <_printf_i>
 801b6f8:	e7e4      	b.n	801b6c4 <_vfiprintf_r+0x208>
 801b6fa:	bf00      	nop
 801b6fc:	0801c558 	.word	0x0801c558
 801b700:	0801c578 	.word	0x0801c578
 801b704:	0801c538 	.word	0x0801c538
 801b708:	0801c894 	.word	0x0801c894
 801b70c:	0801c89e 	.word	0x0801c89e
 801b710:	08017a99 	.word	0x08017a99
 801b714:	0801b497 	.word	0x0801b497
 801b718:	0801c89a 	.word	0x0801c89a

0801b71c <abort>:
 801b71c:	b508      	push	{r3, lr}
 801b71e:	2006      	movs	r0, #6
 801b720:	f000 f834 	bl	801b78c <raise>
 801b724:	2001      	movs	r0, #1
 801b726:	f7fb fda1 	bl	801726c <_exit>

0801b72a <_malloc_usable_size_r>:
 801b72a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801b72e:	1f18      	subs	r0, r3, #4
 801b730:	2b00      	cmp	r3, #0
 801b732:	bfbc      	itt	lt
 801b734:	580b      	ldrlt	r3, [r1, r0]
 801b736:	18c0      	addlt	r0, r0, r3
 801b738:	4770      	bx	lr

0801b73a <_raise_r>:
 801b73a:	291f      	cmp	r1, #31
 801b73c:	b538      	push	{r3, r4, r5, lr}
 801b73e:	4604      	mov	r4, r0
 801b740:	460d      	mov	r5, r1
 801b742:	d904      	bls.n	801b74e <_raise_r+0x14>
 801b744:	2316      	movs	r3, #22
 801b746:	6003      	str	r3, [r0, #0]
 801b748:	f04f 30ff 	mov.w	r0, #4294967295
 801b74c:	bd38      	pop	{r3, r4, r5, pc}
 801b74e:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801b750:	b112      	cbz	r2, 801b758 <_raise_r+0x1e>
 801b752:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801b756:	b94b      	cbnz	r3, 801b76c <_raise_r+0x32>
 801b758:	4620      	mov	r0, r4
 801b75a:	f000 f831 	bl	801b7c0 <_getpid_r>
 801b75e:	462a      	mov	r2, r5
 801b760:	4601      	mov	r1, r0
 801b762:	4620      	mov	r0, r4
 801b764:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801b768:	f000 b818 	b.w	801b79c <_kill_r>
 801b76c:	2b01      	cmp	r3, #1
 801b76e:	d00a      	beq.n	801b786 <_raise_r+0x4c>
 801b770:	1c59      	adds	r1, r3, #1
 801b772:	d103      	bne.n	801b77c <_raise_r+0x42>
 801b774:	2316      	movs	r3, #22
 801b776:	6003      	str	r3, [r0, #0]
 801b778:	2001      	movs	r0, #1
 801b77a:	e7e7      	b.n	801b74c <_raise_r+0x12>
 801b77c:	2400      	movs	r4, #0
 801b77e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801b782:	4628      	mov	r0, r5
 801b784:	4798      	blx	r3
 801b786:	2000      	movs	r0, #0
 801b788:	e7e0      	b.n	801b74c <_raise_r+0x12>
	...

0801b78c <raise>:
 801b78c:	4b02      	ldr	r3, [pc, #8]	; (801b798 <raise+0xc>)
 801b78e:	4601      	mov	r1, r0
 801b790:	6818      	ldr	r0, [r3, #0]
 801b792:	f7ff bfd2 	b.w	801b73a <_raise_r>
 801b796:	bf00      	nop
 801b798:	2000036c 	.word	0x2000036c

0801b79c <_kill_r>:
 801b79c:	b538      	push	{r3, r4, r5, lr}
 801b79e:	4d07      	ldr	r5, [pc, #28]	; (801b7bc <_kill_r+0x20>)
 801b7a0:	2300      	movs	r3, #0
 801b7a2:	4604      	mov	r4, r0
 801b7a4:	4608      	mov	r0, r1
 801b7a6:	4611      	mov	r1, r2
 801b7a8:	602b      	str	r3, [r5, #0]
 801b7aa:	f7fb fd57 	bl	801725c <_kill>
 801b7ae:	1c43      	adds	r3, r0, #1
 801b7b0:	d102      	bne.n	801b7b8 <_kill_r+0x1c>
 801b7b2:	682b      	ldr	r3, [r5, #0]
 801b7b4:	b103      	cbz	r3, 801b7b8 <_kill_r+0x1c>
 801b7b6:	6023      	str	r3, [r4, #0]
 801b7b8:	bd38      	pop	{r3, r4, r5, pc}
 801b7ba:	bf00      	nop
 801b7bc:	2001e3f8 	.word	0x2001e3f8

0801b7c0 <_getpid_r>:
 801b7c0:	f7fb bd4a 	b.w	8017258 <_getpid>

0801b7c4 <_init>:
 801b7c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b7c6:	bf00      	nop
 801b7c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b7ca:	bc08      	pop	{r3}
 801b7cc:	469e      	mov	lr, r3
 801b7ce:	4770      	bx	lr

0801b7d0 <_fini>:
 801b7d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b7d2:	bf00      	nop
 801b7d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b7d6:	bc08      	pop	{r3}
 801b7d8:	469e      	mov	lr, r3
 801b7da:	4770      	bx	lr
 801b7dc:	0000      	movs	r0, r0
	...
